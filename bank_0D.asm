    ORG $0D8000

Map16Common:
    db $70,$1C,$72,$1C,$71,$1C,$73,$1C
    db $C5,$09,$FB,$08,$C5,$09,$FB,$08
    db $FD,$1C,$FD,$1C,$FD,$1C,$FD,$1C
    db $FB,$08,$FB,$08,$FB,$08,$FB,$08
    db $4C,$2C,$4E,$2C,$4D,$2C,$4F,$2C
    db $FC,$2C,$FC,$2C,$FC,$2C,$FC,$2C
    db $87,$14,$88,$54,$88,$14,$87,$54
    db $89,$1C,$8A,$1C,$92,$1C,$82,$1C
    db $92,$1C,$82,$1C,$92,$1C,$82,$1C
    db $92,$1C,$82,$1C,$89,$5C,$8A,$5C
    db $8A,$1C,$8A,$1C,$82,$1C,$82,$1C
    db $82,$1C,$82,$1C,$82,$1C,$82,$1C
    db $82,$1C,$82,$1C,$8A,$5C,$8A,$5C
    db $8A,$1C,$89,$9C,$82,$1C,$92,$9C
    db $82,$1C,$92,$9C,$82,$1C,$92,$9C
    db $82,$1C,$92,$9C,$8A,$5C,$89,$DC
    db $82,$1C,$82,$1C,$82,$1C,$BA,$9C
    db $82,$1C,$AB,$1C,$82,$1C,$AB,$1C
    db $82,$1C,$BA,$DC,$82,$1C,$82,$1C
    db $82,$1C,$82,$1C,$AA,$1C,$AA,$1C
    db $F8,$1C,$F8,$1C,$F8,$1C,$F8,$1C
    db $AA,$5C,$AA,$5C,$82,$1C,$82,$1C
    db $82,$1C,$82,$1C,$BA,$1C,$82,$1C
    db $AB,$9C,$82,$1C,$AB,$9C,$82,$1C
    db $BA,$5C,$82,$1C,$82,$1C,$82,$1C
    db $82,$1C,$82,$1C,$82,$1C,$9A,$DC
    db $82,$1C,$9A,$9C,$82,$1C,$82,$1C
    db $82,$1C,$82,$1C,$9A,$5C,$82,$1C
    db $9A,$1C,$82,$1C,$82,$1C,$82,$1C
    db $F8,$10,$F8,$10,$F8,$10,$F8,$10
    db $F8,$10,$F8,$10,$F8,$10,$F8,$10
    db $85,$18,$95,$18,$86,$18,$96,$18
    db $95,$18,$95,$18,$96,$18,$96,$18
    db $F8,$18,$F8,$18,$F8,$18,$F8,$18
    db $F8,$10,$F8,$10,$F8,$10,$F8,$10
    db $F8,$10,$F8,$10,$F8,$10,$F8,$10
    db $F8,$10,$F8,$10,$F8,$10,$F8,$10
    db $F8,$10,$F8,$10,$F8,$10,$F8,$10
    db $F8,$10,$0C,$10,$F8,$10,$0C,$50
    db $50,$10,$52,$10,$51,$10,$53,$10
    db $52,$10,$52,$10,$53,$10,$53,$10
    db $78,$18,$7A,$18,$79,$18,$7B,$18
    db $54,$18,$56,$18,$55,$18,$57,$18
    db $6C,$18,$6E,$18,$6D,$18,$6F,$18
    db $6C,$1C,$6E,$1C,$6D,$1C,$6F,$1C
    db $08,$18,$18,$18,$09,$18,$19,$18
    db $28,$18,$38,$18,$29,$18,$39,$18
    db $F8,$08,$F8,$08,$74,$10,$75,$10
    db $F8,$08,$F8,$08,$75,$10,$75,$10
    db $F8,$08,$F8,$08,$75,$10,$77,$10
    db $74,$3C,$75,$3C,$F8,$18,$F8,$18
    db $75,$3C,$75,$3C,$F8,$18,$F8,$18
    db $75,$3C,$77,$3C,$F8,$18,$F8,$18
    db $F8,$1C,$F8,$1C,$76,$10,$75,$10
    db $F8,$18,$F8,$18,$75,$3C,$77,$3C
    db $F8,$18,$F8,$18,$75,$3C,$77,$3C
    db $98,$1C,$F8,$08,$98,$1C,$F8,$08
    db $A0,$10,$A2,$10,$A1,$10,$A3,$10
    db $A2,$10,$A2,$10,$A3,$10,$A3,$10
    db $A2,$10,$A4,$10,$A3,$10,$A5,$10
    db $A0,$3C,$A2,$3C,$A1,$3C,$A3,$3C
    db $A2,$3C,$A2,$3C,$A3,$3C,$A3,$3C
    db $A2,$3C,$A4,$3C,$A3,$3C,$A5,$3C
    db $94,$09,$92,$09,$95,$09,$93,$09
    db $C0,$09,$D0,$09,$95,$09,$93,$09
    db $94,$09,$92,$09,$C0,$49,$D0,$49
    db $85,$09,$92,$09,$95,$09,$93,$09
    db $94,$09,$92,$09,$85,$49,$93,$09
    db $92,$89,$94,$89,$93,$89,$95,$89
    db $80,$08,$90,$08,$81,$08,$91,$08
    db $80,$0C,$90,$0C,$81,$0C,$91,$0C
    db $80,$10,$90,$10,$81,$10,$91,$10
    db $EA,$18,$EC,$18,$EB,$18,$ED,$18
    db $FE,$14,$FE,$14,$FE,$14,$FE,$14
    db $FD,$14,$FD,$14,$FD,$14,$FD,$14
    db $F8,$14,$B0,$14,$F8,$14,$B1,$14
    db $F8,$14,$C1,$14,$F8,$14,$C2,$14
    db $B0,$14,$FE,$14,$B1,$14,$FE,$14
    db $A6,$14,$B6,$14,$A7,$14,$B7,$14
    db $B5,$14,$B5,$94,$FD,$14,$FD,$14
    db $FE,$14,$B2,$14,$FE,$14,$B3,$14
    db $B2,$14,$FD,$14,$B3,$14,$FD,$14
    db $FE,$14,$FE,$14,$E7,$14,$D0,$54
    db $C5,$14,$FE,$14,$C6,$14,$D6,$14
    db $F8,$14,$F8,$14,$C0,$14,$D0,$14
    db $FE,$14,$FE,$14,$C0,$14,$D0,$14
    db $FD,$14,$FD,$14,$E7,$54,$D0,$54
    db $C0,$14,$D0,$14,$FE,$14,$FE,$14
    db $C0,$14,$D0,$14,$FE,$14,$FE,$14
    db $E7,$54,$D0,$14,$FE,$14,$FE,$14
    db $A4,$14,$B4,$14,$A5,$14,$FE,$14
    db $E8,$14,$F3,$14,$E9,$14,$FE,$14
    db $D1,$14,$F1,$14,$D2,$14,$FE,$14
    db $E6,$14,$F5,$14,$F8,$14,$F8,$14
    db $E5,$14,$F5,$14,$FE,$14,$FE,$14
    db $E7,$14,$D0,$54,$FD,$14,$FD,$14
    db $FD,$14,$FD,$14,$E6,$14,$F5,$14
    db $FD,$14,$FD,$14,$E5,$14,$F5,$14
    db $FD,$14,$FD,$14,$E5,$14,$F5,$14
    db $C3,$14,$FD,$14,$A7,$14,$B7,$14
    db $E1,$14,$FD,$14,$E2,$14,$F2,$14
    db $E3,$14,$FD,$14,$E4,$14,$F4,$14
    db $F8,$1C,$0E,$1C,$F8,$1C,$0F,$1C
    db $F8,$1C,$8C,$1C,$F8,$1C,$F8,$1C
    db $1E,$1C,$93,$14,$1F,$1C,$D5,$1C
    db $9C,$1C,$F8,$1C,$F8,$1C,$94,$14
    db $2D,$14,$2D,$94,$2D,$54,$2D,$D4
    db $2D,$18,$2D,$98,$2D,$58,$2D,$D8
    db $2D,$1C,$2D,$9C,$2D,$5C,$2D,$DC
    db $3D,$1C,$3D,$9C,$3D,$5C,$3D,$DC
    db $BB,$18,$F0,$18,$8D,$18,$9D,$18
    db $F8,$10,$F8,$10,$F8,$10,$F8,$10
    db $F8,$10,$F8,$10,$F8,$10,$F8,$10
    db $F8,$10,$F8,$10,$F8,$10,$F8,$10
    db $F8,$10,$F8,$10,$F8,$10,$F8,$10
    db $82,$09,$92,$09,$83,$09,$93,$09
    db $81,$09,$D0,$09,$83,$09,$93,$09
    db $8D,$09,$D0,$09,$83,$09,$93,$09
    db $82,$09,$92,$09,$81,$49,$D0,$49
    db $82,$09,$92,$09,$8D,$49,$D0,$49
    db $0D,$18,$F8,$08,$0D,$18,$F8,$08
    db $2C,$1C,$3C,$1C,$2C,$5C,$3C,$5C
    db $64,$10,$66,$10,$65,$10,$67,$10
    db $DA,$1C,$DC,$1C,$DB,$1C,$DD,$1C
    db $64,$10,$66,$10,$65,$10,$67,$10
    db $60,$18,$62,$18,$61,$18,$63,$18
    db $64,$10,$66,$10,$65,$10,$67,$10
    db $64,$10,$66,$10,$65,$10,$67,$10
    db $68,$18,$6A,$18,$69,$18,$6B,$18
    db $68,$18,$6A,$18,$69,$18,$6B,$18
    db $68,$18,$6A,$18,$69,$18,$6B,$18
    db $68,$18,$6A,$18,$69,$18,$6B,$18
    db $68,$18,$6A,$18,$69,$18,$6B,$18
    db $68,$18,$6A,$18,$69,$18,$6B,$18
    db $68,$18,$6A,$18,$69,$18,$6B,$18
    db $06,$18,$16,$18,$07,$18,$17,$18
    db $60,$18,$62,$18,$61,$18,$63,$18
    db $60,$18,$62,$18,$61,$18,$63,$18
    db $60,$18,$62,$18,$61,$18,$63,$18
    db $60,$18,$62,$18,$61,$18,$63,$18
    db $60,$18,$62,$18,$61,$18,$63,$18
    db $60,$18,$62,$18,$61,$18,$63,$18
    db $60,$18,$62,$18,$61,$18,$63,$18
    db $60,$18,$62,$18,$61,$18,$63,$18
    db $60,$18,$62,$18,$61,$18,$63,$18
    db $60,$18,$62,$18,$61,$18,$63,$18
    db $06,$18,$16,$18,$07,$18,$17,$18
    db $06,$18,$16,$18,$07,$18,$17,$18
    db $06,$18,$16,$18,$07,$18,$17,$18
    db $8E,$10,$9E,$10,$8F,$10,$9F,$10
    db $BE,$14,$F6,$14,$D7,$14,$F7,$14
    db $68,$1C,$6A,$1C,$69,$1C,$6B,$1C
    db $5C,$18,$5E,$18,$5D,$18,$5F,$18
    db $30,$10,$32,$10,$31,$10,$33,$10
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $58,$18,$5A,$18,$59,$18,$5B,$18
    db $00,$14,$10,$14,$01,$14,$11,$14
    db $02,$14,$12,$14,$03,$14,$13,$14
    db $20,$14,$20,$14,$21,$14,$21,$14
    db $22,$14,$22,$14,$23,$14,$23,$14
    db $00,$14,$10,$14,$01,$14,$11,$14
    db $02,$14,$12,$14,$03,$14,$13,$14
    db $00,$14,$10,$14,$01,$14,$11,$14
    db $02,$14,$12,$14,$03,$14,$13,$14
    db $04,$14,$14,$14,$05,$14,$15,$14
    db $24,$14,$34,$14,$25,$14,$35,$14
    db $2E,$14,$3E,$14,$2E,$14,$3E,$14
    db $2F,$14,$3F,$14,$2F,$14,$3F,$14
    db $24,$14,$34,$14,$25,$14,$35,$14
    db $06,$18,$16,$18,$07,$18,$17,$18
    db $0A,$10,$1A,$10,$0A,$50,$1A,$50
    db $2A,$10,$3A,$10,$2B,$10,$3B,$10
    db $83,$10,$83,$10,$84,$10,$84,$10
    db $1C,$98,$1C,$18,$1C,$D8,$1C,$58
    db $80,$09,$90,$09,$83,$09,$93,$09
    db $91,$09,$90,$09,$83,$09,$93,$09
    db $D7,$09,$90,$09,$83,$09,$93,$09
    db $82,$09,$92,$09,$80,$49,$90,$49
    db $82,$09,$92,$09,$91,$49,$90,$49
    db $82,$09,$92,$09,$D7,$49,$90,$49
    db $84,$09,$90,$09,$95,$09,$93,$09
    db $94,$09,$92,$09,$84,$49,$90,$49
    db $90,$89,$80,$89,$93,$89,$83,$89
    db $92,$89,$82,$89,$93,$89,$83,$89
    db $92,$89,$82,$89,$90,$C9,$80,$C9
    db $90,$89,$84,$89,$93,$89,$95,$89
    db $92,$89,$94,$89,$90,$C9,$84,$C9
    db $F8,$10,$F8,$10,$F8,$10,$F8,$10
    db $F8,$08,$B4,$09,$F8,$08,$B5,$09
    db $94,$09,$A9,$09,$95,$09,$AA,$09
    db $C0,$09,$BE,$09,$95,$09,$AA,$09
    db $C5,$09,$CC,$09,$C5,$09,$CD,$09
    db $FB,$08,$CC,$09,$FB,$08,$CD,$09
    db $F8,$08,$B6,$09,$F8,$08,$B7,$09
    db $94,$09,$AB,$09,$95,$09,$AC,$09
    db $C0,$09,$AF,$09,$95,$09,$AC,$09
    db $C5,$09,$CE,$09,$C5,$09,$CF,$09
    db $FB,$08,$CE,$09,$FB,$08,$CF,$09
    db $B4,$09,$B8,$09,$B5,$09,$B9,$09
    db $ED,$09,$B8,$09,$EE,$09,$B9,$09
    db $EF,$09,$B8,$09,$EE,$09,$B9,$09
    db $C6,$09,$B8,$09,$C7,$09,$B9,$09
    db $CC,$09,$B8,$09,$CD,$09,$B9,$09
    db $A4,$09,$BA,$09,$A5,$09,$93,$09
    db $BB,$09,$BA,$09,$BC,$09,$93,$09
    db $BF,$09,$BA,$09,$BC,$09,$93,$09
    db $C8,$09,$BA,$09,$A5,$09,$93,$09
    db $CA,$09,$BA,$09,$A5,$09,$93,$09
    db $A5,$49,$92,$09,$A4,$49,$BA,$49
    db $BC,$49,$92,$09,$BB,$49,$BA,$49
    db $BC,$49,$93,$49,$BF,$49,$BA,$49
    db $A5,$49,$92,$09,$C8,$49,$BA,$49
    db $A5,$49,$92,$09,$CA,$49,$BA,$49
    db $B5,$49,$B9,$49,$B4,$49,$B8,$49
    db $EE,$49,$B9,$49,$ED,$49,$B8,$49
    db $EE,$49,$B9,$49,$EF,$49,$B8,$49
    db $C7,$49,$B9,$49,$C6,$49,$B8,$49
    db $CD,$49,$B9,$49,$CC,$49,$B8,$49
    db $F8,$08,$B7,$49,$F8,$08,$B6,$49
    db $94,$09,$AC,$49,$95,$09,$AB,$49
    db $94,$09,$AC,$49,$C0,$49,$AF,$49
    db $C5,$09,$CF,$49,$C5,$09,$CE,$49
    db $FB,$08,$CF,$49,$FB,$08,$CE,$49
    db $F8,$08,$B5,$49,$F8,$08,$B4,$49
    db $94,$09,$AA,$49,$95,$09,$A9,$49
    db $94,$09,$AA,$49,$C0,$49,$BE,$49
    db $C5,$09,$CD,$49,$C5,$09,$CC,$49
    db $FB,$08,$CD,$49,$FB,$08,$CC,$49
    db $F8,$08,$9B,$09,$F8,$08,$9C,$09
    db $94,$09,$A0,$09,$95,$09,$B1,$09
    db $C0,$09,$8F,$09,$95,$09,$B1,$09
    db $C5,$09,$D5,$09,$C5,$09,$D6,$09
    db $FB,$08,$D5,$09,$FB,$08,$D6,$09
    db $9B,$09,$9D,$09,$8E,$09,$9E,$09
    db $EC,$09,$9D,$09,$A1,$09,$9E,$09
    db $EB,$09,$9D,$09,$A1,$09,$9E,$09
    db $CA,$09,$9D,$09,$CB,$09,$9E,$09
    db $D5,$09,$9D,$09,$D6,$09,$9E,$09
    db $8E,$49,$9E,$49,$9B,$49,$9D,$49
    db $A1,$49,$9E,$49,$EC,$49,$9D,$49
    db $A1,$49,$9E,$49,$EB,$49,$9D,$49
    db $CB,$49,$9E,$49,$CA,$49,$9D,$49
    db $D6,$49,$9E,$49,$D5,$49,$9D,$49
    db $F8,$08,$9C,$49,$F8,$08,$9B,$49
    db $94,$09,$B1,$49,$95,$09,$A0,$49
    db $94,$09,$B1,$49,$C0,$49,$8F,$49
    db $C5,$09,$D6,$49,$C5,$09,$D5,$49
    db $FB,$08,$D6,$49,$FB,$08,$D5,$49
    db $F8,$08,$96,$09,$87,$09,$97,$09
    db $94,$09,$88,$09,$89,$09,$97,$09
    db $C0,$09,$98,$09,$89,$09,$97,$09
    db $C5,$09,$D8,$09,$C9,$09,$97,$09
    db $FB,$08,$D8,$09,$D8,$09,$97,$09
    db $87,$49,$97,$49,$F8,$08,$96,$49
    db $89,$49,$97,$49,$95,$09,$88,$49
    db $89,$49,$97,$49,$C0,$49,$98,$49
    db $C9,$49,$97,$49,$C5,$09,$D8,$49
    db $D8,$49,$97,$49,$FB,$08,$D8,$49
    db $DE,$1C,$EE,$1C,$DF,$1C,$EF,$1C
    db $DF,$5C,$EF,$5C,$DE,$5C,$EE,$5C
    db $C1,$09,$D1,$09,$C2,$09,$D2,$09
    db $C2,$49,$D2,$49,$C1,$49,$D1,$49
    db $A4,$09,$BA,$09,$BD,$09,$D0,$49
    db $BB,$09,$BA,$09,$AD,$09,$D0,$49
    db $BD,$49,$D0,$09,$A4,$49,$BA,$49
    db $AD,$49,$D0,$09,$BB,$49,$BA,$49
    db $9B,$09,$9D,$09,$A3,$09,$B2,$09
    db $EC,$09,$9D,$09,$A2,$09,$B2,$09
    db $A3,$49,$B2,$49,$9B,$49,$9D,$49
    db $A2,$49,$B2,$49,$EC,$49,$9D,$49
    db $F8,$08,$96,$09,$8A,$09,$9A,$09
    db $94,$09,$88,$09,$99,$09,$9A,$09
    db $8A,$49,$9A,$49,$F8,$08,$96,$49
    db $99,$49,$9A,$49,$95,$09,$88,$49
    db $96,$89,$F8,$08,$97,$89,$87,$89
    db $97,$C9,$87,$C9,$96,$C9,$F8,$08
    db $9B,$89,$F8,$08,$9C,$89,$F8,$08
    db $9D,$89,$9B,$89,$9E,$89,$8E,$89
    db $9E,$C9,$8E,$C9,$9D,$C9,$9B,$C9
    db $9C,$C9,$F8,$08,$9B,$C9,$F8,$08
    db $F8,$08,$F8,$08,$C1,$09,$D1,$09
    db $C1,$09,$D1,$09,$C2,$09,$D2,$09
    db $C1,$49,$D1,$49,$F8,$08,$F8,$08
    db $C2,$49,$D2,$49,$C1,$49,$D1,$49
    db $F8,$1C,$44,$08,$44,$08,$45,$08
    db $48,$48,$49,$48,$F8,$1C,$48,$48
    db $44,$48,$45,$48,$F8,$1C,$44,$48
    db $F8,$1C,$48,$08,$48,$08,$49,$08
    db $F8,$2C,$4C,$2C,$F8,$2C,$4D,$2C
    db $4C,$2C,$4E,$2C,$4D,$2C,$4F,$2C
    db $41,$6C,$43,$6C,$40,$6C,$42,$6C
    db $F8,$2C,$41,$6C,$F8,$2C,$40,$6C
    db $F8,$2C,$44,$2C,$44,$2C,$45,$2C
    db $46,$6C,$47,$6C,$F8,$2C,$46,$6C
    db $A6,$09,$92,$09,$A7,$09,$93,$09
    db $AE,$09,$D0,$09,$A7,$09,$93,$09
    db $A8,$09,$92,$09,$95,$09,$93,$09
    db $94,$09,$92,$09,$A8,$49,$93,$09
    db $A7,$49,$92,$09,$A6,$49,$93,$09
    db $A7,$49,$92,$09,$AE,$49,$D0,$49
    db $8C,$09,$92,$09,$B3,$09,$93,$09
    db $9F,$09,$D0,$09,$B3,$09,$93,$09
    db $B3,$49,$92,$09,$8C,$49,$93,$09
    db $B3,$49,$92,$09,$9F,$49,$D0,$49
    db $86,$09,$92,$09,$95,$09,$93,$09
    db $8B,$09,$D0,$09,$95,$09,$93,$09
    db $94,$09,$92,$09,$86,$49,$93,$09
    db $94,$09,$92,$09,$8B,$49,$D0,$49
    db $94,$09,$92,$09,$95,$09,$93,$09
    db $C0,$09,$D0,$09,$95,$09,$93,$09
    db $94,$09,$92,$09,$C0,$49,$D0,$49
    db $86,$09,$92,$09,$C0,$49,$D0,$49
    db $C0,$09,$D0,$09,$86,$49,$93,$49
    db $82,$09,$92,$09,$83,$09,$93,$09
    db $92,$89,$86,$89,$93,$89,$95,$89
    db $92,$89,$94,$89,$93,$89,$86,$C9
    db $92,$89,$8C,$89,$93,$89,$B3,$89
    db $92,$89,$B3,$C9,$93,$89,$8C,$C9
    db $92,$89,$94,$89,$93,$89,$95,$89
    db $C2,$09,$D2,$09,$95,$09,$93,$09
    db $94,$09,$92,$09,$C2,$49,$D2,$49
    db $45,$08,$47,$08,$47,$08,$92,$09
    db $4B,$48,$92,$49,$49,$48,$4B,$48
    db $47,$48,$92,$49,$45,$48,$47,$48
    db $49,$08,$4B,$08,$4B,$08,$92,$09
    db $C2,$09,$F8,$08,$93,$09,$D1,$C9
    db $F3,$09,$93,$09,$93,$09,$B0,$C9
    db $94,$09,$D1,$89,$C2,$49,$F8,$08
    db $94,$09,$B0,$89,$F3,$49,$93,$09
    db $4E,$2C,$FB,$2C,$4F,$2C,$FB,$2C
    db $43,$6C,$FB,$2C,$42,$6C,$FB,$2C
    db $45,$2C,$FB,$2C,$FB,$2C,$FB,$2C
    db $FB,$2C,$FB,$2C,$47,$6C,$FB,$2C
    db $FB,$2C,$FB,$2C,$FB,$2C,$FB,$2C
    db $F8,$08,$AC,$14,$A8,$14,$AD,$14
    db $A9,$14,$AE,$14,$F8,$08,$AF,$14
    db $BF,$14,$CB,$14,$F8,$08,$CC,$14
    db $F8,$08,$B8,$14,$B8,$14,$B9,$14
    db $B9,$14,$C8,$14,$BC,$14,$FF,$14
    db $BD,$14,$C9,$14,$CD,$14,$CA,$14
    db $B9,$14,$C8,$14,$C8,$14,$FF,$14
    db $D3,$14,$C4,$14,$D4,$14,$F8,$08
    db $00,$0C,$10,$0C,$01,$0C,$11,$0C
    db $02,$0C,$12,$0C,$03,$0C,$13,$0C
    db $20,$0C,$20,$0C,$21,$0C,$21,$0C
    db $22,$0C,$22,$0C,$23,$0C,$23,$0C
    db $00,$0C,$10,$0C,$01,$0C,$11,$0C
    db $02,$0C,$12,$0C,$03,$0C,$13,$0C
    db $00,$0C,$10,$0C,$01,$0C,$11,$0C
    db $02,$0C,$12,$0C,$03,$0C,$13,$0C
    db $00,$18,$10,$18,$01,$18,$11,$18
    db $02,$18,$12,$18,$03,$18,$13,$18
    db $20,$18,$20,$18,$21,$18,$21,$18
    db $22,$18,$22,$18,$23,$18,$23,$18
    db $00,$18,$10,$18,$01,$18,$11,$18
    db $02,$18,$12,$18,$03,$18,$13,$18
    db $00,$18,$10,$18,$01,$18,$11,$18
    db $02,$18,$12,$18,$03,$18,$13,$18
    db $00,$1C,$10,$1C,$01,$1C,$11,$1C
    db $02,$1C,$12,$1C,$03,$1C,$13,$1C
    db $20,$1C,$20,$1C,$21,$1C,$21,$1C
    db $22,$1C,$22,$1C,$23,$1C,$23,$1C
    db $00,$1C,$10,$1C,$01,$1C,$11,$1C
    db $02,$1C,$12,$1C,$03,$1C,$13,$1C
    db $00,$1C,$10,$1C,$01,$1C,$11,$1C
    db $02,$1C,$12,$1C,$03,$1C,$13,$1C

Map16Tileset0:
    db $C5,$15,$CC,$15,$C6,$15,$CD,$15
    db $C7,$15,$FF,$14,$C8,$15,$D5,$15
    db $C6,$15,$D6,$15,$CA,$15,$FF,$14
    db $C9,$15,$D6,$15,$C7,$15,$CF,$15
    db $C7,$15,$CE,$15,$C8,$15,$D5,$15
    db $C7,$15,$FF,$14,$C6,$15,$CF,$15
    db $C7,$15,$D6,$15,$CB,$15,$D7,$15
    db $F8,$14,$C5,$35,$F8,$14,$C6,$35
    db $F8,$14,$C7,$35,$F8,$14,$C8,$35
    db $F8,$14,$C6,$35,$F8,$14,$CA,$35
    db $F8,$14,$C9,$35,$F8,$14,$C7,$35
    db $F8,$14,$C7,$35,$F8,$14,$C8,$35
    db $F8,$14,$C7,$35,$F8,$14,$C6,$35
    db $F8,$14,$C7,$35,$F8,$14,$CB,$35
    db $DC,$0D,$DC,$0D,$DD,$0D,$DD,$0D
    db $DE,$0D,$E2,$0D,$DF,$0D,$F8,$14
    db $E0,$0D,$F8,$14,$E1,$0D,$E3,$0D
    db $F8,$14,$F8,$14,$E4,$0D,$E4,$0D
    db $E7,$09,$EA,$09,$E8,$09,$F0,$09
    db $E8,$09,$F0,$09,$E9,$09,$F1,$09
    db $E8,$09,$F0,$09,$E7,$49,$EA,$49
    db $CA,$14,$D6,$14,$CB,$14,$D6,$15
    db $CC,$14,$FF,$14,$CD,$14,$D5,$15
    db $CB,$14,$CF,$15,$CF,$14,$FF,$14
    db $CE,$14,$FF,$15,$CC,$14,$D6,$15
    db $CC,$14,$CF,$15,$CD,$14,$D5,$15
    db $CC,$14,$FF,$14,$C8,$14,$D6,$15
    db $CC,$14,$CE,$15,$D5,$14,$D7,$14
    db $F8,$08,$F8,$08,$C7,$09,$D7,$09
    db $C7,$49,$D7,$49,$F8,$08,$F8,$08
    db $F8,$08,$C5,$09,$C7,$09,$C9,$09
    db $C7,$49,$C9,$49,$F8,$08,$C5,$49
    db $F8,$08,$C5,$09,$F8,$08,$C6,$09
    db $F8,$08,$F8,$08,$F8,$08,$D7,$09
    db $F8,$08,$D7,$49,$F8,$08,$F8,$08
    db $F8,$08,$F8,$08,$F8,$08,$C6,$09
    db $F8,$08,$C5,$09,$F8,$08,$F8,$08
    db $92,$09,$94,$09,$C8,$09,$D8,$09
    db $C8,$49,$D8,$49,$93,$09,$95,$09
    db $92,$09,$D5,$09,$C8,$09,$D9,$09
    db $C8,$49,$D9,$49,$93,$09,$D6,$09
    db $92,$09,$D5,$09,$93,$09,$D6,$09
    db $92,$09,$94,$09,$93,$09,$D8,$09
    db $92,$09,$D8,$49,$93,$09,$95,$09
    db $92,$09,$94,$09,$92,$09,$D6,$09
    db $92,$09,$D5,$09,$93,$09,$95,$09
    db $C1,$09,$93,$09,$F8,$08,$D1,$09
    db $F2,$09,$93,$09,$94,$09,$B0,$09
    db $D1,$C9,$F8,$08,$93,$09,$D1,$C9
    db $B0,$C9,$93,$09,$93,$09,$B0,$C9
    db $D2,$C9,$DC,$09,$93,$09,$B0,$C9
    db $D1,$09,$93,$09,$F8,$08,$D1,$09
    db $B0,$09,$93,$09,$93,$09,$B0,$09
    db $B0,$09,$93,$09,$C0,$49,$D2,$09
    db $F8,$08,$D1,$49,$D1,$49,$95,$09
    db $94,$09,$B0,$49,$B0,$49,$95,$09
    db $C0,$09,$D2,$49,$B0,$49,$95,$09
    db $94,$09,$D1,$89,$D1,$89,$F8,$08
    db $94,$09,$B0,$89,$B0,$89,$95,$09
    db $94,$09,$B0,$89,$D2,$89,$D0,$49
    db $F8,$08,$D1,$49,$C1,$49,$95,$09
    db $94,$09,$B0,$49,$F2,$49,$95,$09
    db $E4,$09,$E5,$09,$FF,$08,$E6,$09
    db $E7,$09,$E8,$09,$FF,$08,$E9,$09
    db $FF,$08,$84,$09,$FF,$08,$FF,$08
    db $FF,$08,$FF,$08,$FF,$08,$FF,$08
    db $FF,$08,$FF,$08,$FF,$08,$84,$49
    db $FF,$08,$E6,$49,$E4,$49,$E5,$49
    db $FF,$08,$E9,$49,$E7,$49,$B0,$09
    db $CD,$09,$DD,$09,$DD,$89,$CD,$89
    db $C1,$29,$D1,$29,$C2,$29,$D2,$29
    db $F2,$29,$E2,$29,$C3,$29,$D3,$29
    db $E1,$29,$F1,$29,$E2,$29,$F2,$29
    db $C2,$29,$D2,$29,$E3,$29,$F3,$29
    db $E1,$29,$F1,$29,$E3,$29,$F3,$29
    db $C1,$29,$D1,$29,$C3,$29,$D3,$29
    db $E1,$09,$F1,$09,$E3,$09,$F3,$09
    db $C1,$09,$D1,$09,$C3,$09,$D3,$09
    db $C4,$09,$D4,$09,$AF,$09,$BF,$09
    db $AF,$49,$BF,$49,$C4,$49,$D4,$49
    db $F8,$08,$EA,$09,$F8,$08,$91,$09
    db $F0,$09,$F0,$09,$DD,$89,$CD,$89
    db $CD,$09,$DD,$09,$F0,$49,$F0,$49
    db $C3,$09,$D3,$09,$C3,$49,$D3,$49
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $D8,$0D,$DA,$0D,$D9,$0D,$DB,$0D
    db $D9,$0D,$DA,$0D,$D9,$0D,$DB,$0D
    db $D9,$0D,$DA,$0D,$D8,$4D,$DB,$0D
    db $D9,$0D,$E5,$0D,$D9,$0D,$E5,$0D
    db $C1,$29,$D1,$29,$C2,$29,$D2,$29
    db $F2,$29,$E2,$29,$C3,$29,$D3,$29
    db $E1,$29,$F1,$29,$E3,$29,$F3,$29
    db $CC,$09,$DC,$09,$CB,$09,$DB,$09
    db $CA,$09,$E0,$09,$CB,$09,$DB,$09
    db $CC,$09,$DC,$09,$CA,$49,$E0,$49
    db $F4,$15,$F6,$15,$F5,$15,$F7,$15
    db $F8,$15,$F8,$15,$F9,$15,$F9,$15
    db $F6,$95,$F4,$95,$F7,$95,$F5,$95
    db $FA,$19,$FD,$19,$FB,$19,$FE,$19
    db $FC,$19,$FF,$19,$FC,$19,$FF,$19
    db $FB,$59,$FE,$59,$FA,$59,$FD,$59
    db $FF,$14,$CD,$14,$CD,$14,$CE,$14
    db $CE,$14,$D8,$14,$CF,$14,$D9,$14
    db $CE,$14,$D8,$14,$D8,$14,$D9,$14
    db $D9,$14,$E0,$14,$E0,$14,$F8,$08
    db $DD,$C9,$CD,$C9,$DA,$49,$DA,$C9
    db $CB,$49,$DB,$49,$CA,$49,$DA,$49
    db $CA,$09,$DA,$09,$CB,$09,$DB,$09
    db $DA,$09,$DA,$89,$DD,$89,$CD,$89
    db $00,$10,$10,$10,$01,$10,$11,$10
    db $02,$10,$12,$10,$03,$10,$13,$10
    db $20,$10,$20,$10,$21,$10,$21,$10
    db $22,$10,$22,$10,$23,$10,$23,$10
    db $06,$10,$16,$10,$07,$10,$17,$10
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $20,$14,$20,$14,$21,$14,$21,$14
    db $22,$14,$22,$14,$23,$14,$23,$14
    db $26,$14,$36,$14,$26,$54,$36,$54
    db $26,$18,$36,$18,$26,$58,$36,$58
    db $26,$1C,$36,$1C,$26,$5C,$36,$5C
    db $27,$1C,$37,$1C,$27,$5C,$37,$5C

Map16BGTiles:
    db $F8,$00,$F8,$00,$F8,$00,$F8,$00
    db $53,$01,$54,$01,$F9,$00,$55,$01
    db $F9,$00,$55,$01,$F9,$00,$55,$01
    db $F9,$00,$55,$01,$53,$41,$56,$01
    db $F8,$00,$06,$01,$00,$01,$07,$01
    db $01,$01,$FC,$00,$02,$01,$FC,$00
    db $03,$01,$FC,$00,$04,$01,$08,$01
    db $05,$01,$09,$01,$F8,$00,$0A,$01
    db $0B,$01,$0E,$01,$FC,$00,$FC,$00
    db $FC,$00,$FC,$00,$FC,$00,$FC,$00
    db $0C,$01,$0F,$01,$0D,$01,$10,$01
    db $11,$01,$11,$01,$FC,$00,$FC,$00
    db $14,$01,$14,$81,$FC,$00,$FC,$00
    db $12,$01,$12,$01,$13,$01,$13,$01
    db $FC,$00,$FC,$00,$14,$01,$14,$81
    db $F8,$00,$27,$01,$23,$01,$FF,$00
    db $24,$01,$FF,$00,$25,$01,$FF,$00
    db $26,$01,$28,$01,$F8,$00,$29,$01
    db $2A,$01,$2D,$01,$FF,$00,$FF,$00
    db $FF,$00,$FF,$00,$30,$01,$30,$81
    db $2B,$01,$2E,$01,$2C,$01,$2F,$01
    db $18,$05,$FC,$04,$19,$05,$08,$05
    db $1A,$05,$1D,$05,$FF,$04,$1E,$05
    db $F9,$00,$55,$01,$57,$41,$59,$01
    db $2E,$01,$2E,$01,$2F,$01,$2F,$01
    db $0C,$05,$0F,$05,$20,$05,$22,$05
    db $FF,$04,$1B,$05,$15,$05,$1C,$05
    db $16,$05,$FC,$04,$17,$05,$FC,$04
    db $18,$01,$FC,$00,$19,$01,$08,$01
    db $1A,$01,$1D,$01,$FF,$00,$1E,$01
    db $1F,$05,$21,$05,$FC,$04,$FC,$04
    db $0C,$01,$0F,$01,$20,$01,$22,$01
    db $16,$01,$FC,$00,$17,$01,$FC,$00
    db $44,$05,$46,$05,$45,$05,$F9,$04
    db $F9,$00,$F9,$00,$F9,$00,$F9,$00
    db $45,$45,$F9,$04,$44,$45,$46,$45
    db $4D,$01,$4F,$01,$3D,$01,$50,$01
    db $3D,$01,$41,$01,$3D,$01,$41,$01
    db $3D,$01,$51,$01,$4E,$01,$52,$01
    db $2D,$01,$2D,$01,$FF,$00,$FF,$00
    db $FF,$00,$FF,$00,$FF,$00,$FF,$00
    db $2D,$01,$2D,$01,$30,$01,$30,$81
    db $FF,$00,$1B,$01,$15,$01,$1C,$01
    db $1F,$01,$21,$01,$FC,$00,$FC,$00
    db $57,$01,$58,$01,$F9,$00,$55,$01
    db $39,$01,$3B,$01,$3A,$01,$F9,$00
    db $3C,$01,$3F,$01,$3D,$01,$40,$01
    db $5B,$01,$F8,$00,$5C,$01,$F8,$00
    db $5C,$01,$F8,$00,$5C,$01,$F8,$00
    db $5C,$01,$F8,$00,$5D,$01,$F8,$00
    db $44,$01,$5A,$01,$50,$01,$5A,$01
    db $F8,$00,$F8,$00,$44,$00,$46,$00
    db $F8,$00,$F8,$00,$44,$01,$5A,$01
    db $50,$01,$4B,$01,$5A,$01,$5A,$01
    db $F8,$00,$F8,$00,$45,$00,$47,$00
    db $F8,$00,$F8,$00,$5A,$01,$5A,$01
    db $5A,$01,$5A,$01,$5A,$01,$4B,$01
    db $48,$01,$48,$01,$5A,$01,$4B,$01
    db $5A,$01,$5A,$01,$51,$01,$5A,$01
    db $45,$01,$5A,$01,$F8,$00,$F8,$00
    db $0F,$05,$F8,$00,$1F,$05,$F8,$00
    db $4B,$01,$F8,$00,$F8,$00,$F8,$00
    db $5A,$01,$5A,$01,$F8,$00,$F8,$00
    db $F8,$00,$F8,$00,$44,$04,$46,$04
    db $4B,$01,$48,$01,$48,$01,$4B,$01
    db $4B,$01,$F8,$00,$48,$01,$4B,$01
    db $44,$04,$46,$04,$F8,$00,$F8,$00
    db $F8,$00,$F8,$00,$45,$04,$47,$04
    db $45,$04,$47,$04,$F8,$00,$F8,$00
    db $48,$01,$4B,$01,$4B,$01,$F8,$00
    db $40,$01,$59,$01,$54,$01,$5A,$01
    db $4D,$01,$59,$01,$41,$01,$5A,$01
    db $F8,$00,$F8,$00,$45,$04,$46,$04
    db $59,$01,$59,$01,$5A,$01,$5A,$01
    db $F8,$00,$F8,$00,$F8,$00,$4D,$01
    db $59,$01,$4F,$01,$57,$01,$59,$01
    db $54,$01,$5A,$01,$F8,$00,$F8,$00
    db $59,$01,$59,$01,$4D,$01,$59,$01
    db $41,$01,$5A,$01,$F8,$00,$F8,$00
    db $F8,$00,$F8,$00,$59,$01,$59,$01
    db $5A,$01,$5A,$01,$59,$01,$59,$01
    db $F8,$00,$F8,$00,$40,$01,$59,$01
    db $54,$01,$5A,$01,$59,$01,$59,$01
    db $F8,$00,$F8,$00,$59,$01,$46,$01
    db $57,$01,$59,$01,$54,$01,$5A,$01
    db $5A,$01,$4D,$01,$F8,$00,$41,$01
    db $54,$01,$5A,$01,$5A,$01,$5A,$01
    db $51,$01,$5A,$01,$53,$01,$5A,$01
    db $F8,$00,$F8,$00,$4A,$01,$F8,$00
    db $5A,$01,$5A,$01,$57,$01,$59,$01
    db $54,$01,$5A,$01,$4B,$01,$F8,$00
    db $5A,$01,$5A,$01,$5A,$01,$52,$01
    db $5A,$01,$50,$01,$49,$01,$5A,$01
    db $F8,$00,$4B,$01,$4B,$01,$48,$01
    db $5A,$01,$51,$01,$5A,$01,$53,$01
    db $F8,$00,$F8,$00,$5A,$01,$4B,$01
    db $3A,$11,$3A,$91,$3B,$11,$54,$11
    db $54,$91,$54,$11,$3A,$51,$3A,$D1
    db $F8,$00,$00,$01,$F8,$00,$00,$41
    db $32,$11,$34,$11,$33,$11,$F9,$00
    db $F8,$00,$01,$01,$01,$01,$02,$01
    db $02,$01,$FA,$00,$02,$41,$FA,$00
    db $01,$41,$02,$41,$F8,$00,$01,$41
    db $F8,$00,$1F,$01,$F8,$00,$1F,$41
    db $2E,$11,$F9,$00,$F9,$00,$F9,$00
    db $02,$01,$FA,$00,$FA,$00,$FA,$00
    db $52,$01,$FA,$00,$FA,$00,$FA,$00
    db $FA,$00,$FA,$00,$02,$41,$FA,$00
    db $F8,$00,$20,$01,$F8,$00,$21,$01
    db $20,$01,$22,$01,$21,$01,$FD,$00
    db $22,$01,$FD,$00,$22,$41,$FD,$00
    db $21,$41,$FD,$00,$20,$41,$22,$41
    db $F8,$00,$21,$41,$F8,$00,$20,$41
    db $32,$11,$38,$11,$33,$11,$F9,$00
    db $FA,$00,$FA,$00,$FA,$00,$FA,$00
    db $FA,$00,$52,$01,$52,$01,$FA,$00
    db $06,$41,$02,$41,$FD,$00,$06,$41
    db $51,$01,$FD,$00,$FD,$00,$51,$01
    db $FD,$00,$FD,$00,$FD,$00,$FD,$00
    db $51,$01,$FD,$00,$FD,$00,$FD,$00
    db $FD,$00,$FD,$00,$22,$41,$FD,$00
    db $2B,$41,$FD,$00,$2A,$41,$22,$41
    db $F9,$00,$2B,$41,$F9,$00,$2A,$41
    db $33,$51,$F9,$00,$32,$51,$34,$51
    db $F9,$00,$F9,$00,$2E,$51,$F9,$00
    db $F8,$00,$35,$11,$F8,$00,$36,$11
    db $35,$11,$2E,$11,$36,$11,$F9,$00
    db $36,$51,$F9,$00,$35,$51,$2E,$51
    db $F8,$00,$36,$51,$F8,$00,$35,$51
    db $2C,$11,$39,$11,$2D,$11,$F9,$00
    db $F9,$00,$30,$11,$F9,$00,$31,$11
    db $2C,$11,$2F,$11,$2D,$11,$F9,$00
    db $31,$51,$F9,$00,$30,$51,$2E,$51
    db $F9,$00,$31,$51,$F9,$00,$30,$51
    db $2D,$51,$F9,$00,$2C,$51,$2F,$51
    db $2D,$51,$F9,$00,$2C,$51,$39,$51
    db $30,$11,$2E,$11,$31,$11,$F9,$00
    db $22,$01,$FD,$00,$FD,$00,$FD,$00
    db $FD,$00,$05,$01,$FD,$00,$05,$41
    db $F8,$00,$13,$01,$F8,$00,$14,$01
    db $FD,$00,$06,$01,$06,$01,$02,$01
    db $FD,$00,$1A,$01,$FD,$00,$1B,$01
    db $1A,$01,$15,$01,$1B,$01,$FA,$00
    db $15,$01,$FA,$00,$FA,$00,$FA,$00
    db $FD,$00,$28,$41,$FD,$00,$27,$41
    db $04,$41,$02,$41,$FA,$00,$04,$41
    db $FA,$00,$24,$01,$FA,$00,$25,$01
    db $24,$01,$22,$01,$25,$01,$FD,$00
    db $F8,$00,$12,$01,$F8,$00,$12,$41
    db $13,$01,$15,$01,$14,$01,$FA,$00
    db $14,$41,$FA,$00,$13,$41,$15,$41
    db $F8,$00,$14,$41,$F8,$00,$13,$41
    db $FA,$00,$FA,$00,$15,$41,$FA,$00
    db $28,$41,$FD,$00,$27,$41,$22,$41
    db $F8,$00,$3E,$01,$3E,$01,$FE,$00
    db $49,$01,$46,$01,$43,$01,$FC,$00
    db $3D,$41,$FC,$00,$F8,$00,$3D,$41
    db $33,$51,$F9,$00,$32,$51,$38,$51
    db $FE,$00,$FE,$00,$FE,$00,$FE,$00
    db $FE,$00,$41,$01,$41,$01,$FC,$00
    db $F9,$00,$50,$01,$50,$01,$FE,$00
    db $46,$01,$46,$01,$FC,$00,$FC,$00
    db $41,$41,$FC,$00,$FE,$00,$41,$41
    db $FC,$00,$3F,$01,$3F,$01,$FA,$00
    db $42,$01,$FA,$00,$42,$01,$FA,$00
    db $42,$01,$FA,$00,$48,$41,$45,$41
    db $44,$01,$FE,$00,$4A,$41,$47,$41
    db $4F,$41,$FC,$00,$F9,$00,$4F,$41
    db $47,$01,$47,$01,$FE,$00,$FE,$00
    db $FC,$00,$FC,$00,$46,$41,$46,$41
    db $FA,$00,$FA,$00,$45,$41,$45,$41
    db $FE,$00,$44,$81,$FE,$00,$44,$81
    db $3F,$41,$FA,$00,$FC,$00,$3F,$41
    db $FC,$00,$43,$81,$FC,$00,$43,$81
    db $FC,$00,$43,$81,$46,$41,$49,$C1
    db $FA,$00,$3F,$C1,$3F,$C1,$FC,$00
    db $FC,$00,$41,$C1,$41,$C1,$FE,$00
    db $FA,$00,$4B,$01,$4B,$01,$FA,$00
    db $FA,$00,$40,$C1,$40,$C1,$FE,$00
    db $4C,$81,$FC,$00,$FC,$00,$4C,$81
    db $41,$41,$FC,$00,$FE,$40,$41,$41
    db $4B,$81,$FA,$00,$FA,$00,$4B,$81
    db $3F,$81,$FC,$00,$FA,$00,$3F,$81
    db $FE,$00,$40,$01,$40,$01,$FA,$00
    db $41,$81,$FE,$00,$FC,$00,$41,$81
    db $FA,$00,$42,$81,$45,$41,$48,$C1
    db $FA,$00,$42,$81,$FA,$00,$42,$81
    db $FA,$00,$40,$C1,$40,$C1,$FE,$C0
    db $FE,$00,$4D,$01,$4D,$01,$FE,$00
    db $43,$01,$FC,$00,$43,$01,$FC,$00
    db $43,$01,$FC,$00,$49,$41,$46,$41
    db $FE,$00,$FE,$00,$47,$41,$47,$41
    db $40,$41,$FA,$00,$FE,$00,$40,$41
    db $45,$01,$45,$01,$FA,$00,$FA,$00
    db $4E,$41,$FA,$00,$F9,$00,$4E,$41
    db $FA,$00,$3C,$C1,$3C,$C1,$F8,$00
    db $44,$01,$FE,$00,$44,$01,$FE,$00
    db $FA,$00,$4E,$C1,$4E,$C1,$F9,$00
    db $FE,$00,$FE,$00,$5A,$01,$5A,$01
    db $7C,$01,$5B,$01,$79,$01,$FE,$00
    db $5B,$01,$5B,$01,$FE,$00,$FE,$00
    db $78,$01,$FE,$00,$79,$01,$FE,$00
    db $78,$01,$FE,$00,$7B,$01,$5A,$01
    db $FE,$00,$FE,$00,$78,$01,$FE,$00
    db $79,$01,$78,$01,$5A,$01,$7B,$01
    db $5B,$01,$7C,$01,$78,$01,$79,$01
    db $79,$01,$FE,$00,$FE,$00,$FE,$00
    db $40,$00,$42,$00,$41,$00,$43,$00
    db $64,$01,$66,$01,$65,$01,$67,$01
    db $FE,$00,$68,$41,$5E,$01,$60,$01
    db $FE,$00,$61,$01,$FE,$00,$62,$01
    db $5F,$01,$63,$01,$FE,$00,$68,$01
    db $FE,$00,$69,$01,$FE,$00,$69,$41
    db $6B,$41,$6E,$41,$6A,$41,$6C,$01
    db $FE,$00,$6D,$01,$FE,$00,$6D,$41
    db $6A,$01,$6C,$41,$6B,$01,$6E,$01
    db $FC,$00,$6F,$01,$FC,$00,$6F,$41
    db $70,$01,$72,$01,$71,$01,$73,$01
    db $74,$01,$76,$01,$75,$01,$77,$01
    db $0A,$41,$0B,$41,$F8,$00,$0A,$41
    db $F9,$00,$07,$01,$F9,$00,$07,$41
    db $FD,$00,$FD,$00,$0B,$41,$FD,$00
    db $11,$41,$0B,$41,$F9,$00,$11,$41
    db $F9,$00,$08,$01,$08,$01,$02,$01
    db $08,$41,$02,$41,$F9,$00,$08,$41
    db $F9,$00,$11,$01,$11,$01,$0B,$01
    db $0B,$01,$FD,$00,$FD,$00,$FD,$00
    db $FA,$00,$17,$01,$FA,$00,$18,$01
    db $17,$01,$15,$01,$18,$01,$FA,$00
    db $F8,$00,$09,$01,$F8,$00,$09,$41
    db $F8,$00,$33,$51,$F8,$00,$32,$51
    db $F8,$00,$0A,$01,$0A,$01,$0B,$01
    db $0B,$01,$FD,$00,$0B,$41,$FD,$00
    db $F9,$00,$F9,$00,$34,$51,$2E,$51
    db $FD,$00,$26,$01,$FD,$00,$26,$41
    db $FD,$00,$27,$01,$FD,$00,$28,$01
    db $27,$01,$22,$01,$28,$01,$FD,$00
    db $FD,$00,$19,$01,$FD,$00,$19,$41
    db $15,$01,$FA,$00,$15,$41,$FA,$00
    db $1B,$41,$FA,$00,$1A,$41,$15,$41
    db $FD,$00,$1B,$41,$FD,$00,$1A,$41
    db $7D,$01,$7D,$81,$7D,$41,$7D,$C1
    db $4F,$00,$F8,$00,$F8,$00,$F8,$00
    db $F8,$00,$F8,$00,$F8,$00,$4E,$00
    db $4C,$00,$4C,$80,$4C,$40,$4C,$C0
    db $4D,$00,$4D,$80,$4D,$40,$4D,$C0
    db $4D,$01,$FA,$00,$4E,$01,$FA,$00
    db $4F,$01,$FA,$00,$50,$01,$FA,$00
    db $51,$01,$FA,$00,$52,$01,$FA,$00

    %insert_empty($38,$38,$38,$38,$38)

    db $FD,$04,$FD,$04,$06,$05,$07,$05
    db $00,$05,$00,$05,$00,$45,$00,$45
    db $00,$05,$00,$05,$72,$04,$FF,$04
    db $00,$05,$00,$05,$FF,$04,$FF,$04
    db $FF,$04,$FF,$04,$00,$05,$00,$05
    db $FF,$04,$FF,$04,$0E,$45,$00,$45
    db $FF,$04,$FF,$04,$00,$45,$00,$45
    db $10,$05,$10,$05,$10,$45,$10,$45
    db $FA,$04,$FA,$04,$10,$05,$10,$05
    db $00,$05,$1B,$05,$00,$45,$1B,$45
    db $FF,$04,$05,$45,$0B,$45,$0C,$45
    db $FF,$04,$72,$04,$00,$45,$00,$45
    db $FD,$04,$FD,$04,$00,$05,$00,$05
    db $FD,$04,$FD,$04,$FD,$04,$FD,$04
    db $01,$05,$03,$05,$02,$05,$04,$05
    db $FF,$04,$FF,$04,$0B,$05,$0C,$05
    db $FF,$04,$05,$05,$00,$45,$00,$45
    db $73,$04,$FA,$04,$10,$05,$10,$05
    db $0E,$05,$00,$05,$FF,$04,$FF,$04
    db $00,$45,$00,$45,$FF,$04,$FF,$04
    db $02,$45,$04,$45,$01,$45,$03,$45
    db $00,$05,$1C,$05,$00,$45,$1C,$45
    db $00,$05,$00,$05,$FF,$04,$05,$45
    db $0B,$45,$0C,$45,$FF,$04,$FF,$04
    db $00,$45,$00,$45,$FD,$04,$FD,$04
    db $FD,$04,$18,$05,$FD,$04,$18,$45
    db $FD,$04,$13,$05,$FD,$04,$FD,$04
    db $FF,$04,$FF,$04,$72,$04,$FF,$04
    db $10,$05,$1D,$05,$10,$45,$1D,$45
    db $06,$45,$07,$45,$FD,$04,$FD,$04
    db $71,$04,$71,$84,$71,$44,$71,$C4
    db $10,$05,$10,$05,$FD,$04,$FD,$04
    db $0B,$05,$0C,$05,$FF,$04,$05,$05
    db $FA,$04,$FA,$04,$FA,$04,$FA,$04
    db $70,$04,$70,$84,$70,$44,$70,$C4
    db $FD,$04,$FD,$04,$FD,$04,$13,$45
    db $FA,$04,$19,$C5,$10,$05,$13,$85
    db $FD,$04,$18,$05,$10,$45,$1A,$45
    db $FF,$04,$FF,$04,$FF,$04,$FF,$04
    db $FF,$04,$05,$05,$FF,$04,$FF,$04
    db $FD,$04,$FD,$04,$10,$45,$10,$45
    db $FF,$04,$05,$45,$06,$45,$07,$45
    db $18,$85,$FD,$04,$18,$C5,$FD,$04
    db $13,$85,$FD,$04,$FD,$04,$FD,$04
    db $13,$45,$10,$45,$19,$05,$FA,$04
    db $1A,$85,$10,$05,$18,$C5,$FD,$04
    db $15,$05,$16,$05,$FD,$04,$13,$05
    db $10,$45,$10,$45,$FA,$04,$73,$04
    db $FA,$04,$FA,$04,$15,$05,$16,$05
    db $FD,$04,$13,$05,$10,$45,$10,$45
    db $10,$45,$19,$05,$FA,$04,$FA,$04
    db $10,$05,$1A,$05,$FD,$04,$18,$45
    db $1C,$85,$00,$05,$1C,$C5,$00,$45
    db $1D,$85,$10,$05,$1D,$C5,$10,$45
    db $FD,$04,$FD,$04,$13,$C5,$FD,$04
    db $16,$C5,$15,$C5,$FA,$04,$FA,$04
    db $FA,$04,$FA,$04,$19,$C5,$10,$05
    db $13,$85,$FD,$04,$10,$45,$10,$45
    db $07,$C5,$06,$C5,$FD,$04,$FD,$04
    db $07,$85,$06,$85,$05,$85,$FF,$04
    db $10,$05,$10,$05,$FD,$04,$13,$45
    db $15,$45,$16,$45,$FA,$04,$FA,$04
    db $10,$45,$13,$C5,$FA,$04,$19,$85
    db $16,$85,$15,$85,$13,$85,$FD,$04
    db $FD,$04,$FD,$04,$07,$85,$06,$85
    db $FA,$04,$FA,$04,$16,$85,$15,$85
    db $04,$C5,$02,$C5,$03,$C5,$01,$C5
    db $FF,$04,$FF,$04,$05,$C5,$FF,$04
    db $03,$85,$01,$85,$04,$85,$02,$85
    db $1B,$85,$00,$05,$1B,$C5,$00,$45
    db $00,$05,$0E,$85,$FF,$04,$FF,$04
    db $FF,$04,$FF,$04,$0C,$85,$0B,$85
    db $10,$05,$10,$05,$13,$C5,$FD,$04
    db $FF,$04,$FF,$04,$00,$45,$0E,$C5
    db $05,$85,$FF,$04,$00,$45,$00,$45
    db $0C,$C5,$0B,$C5,$FF,$04,$FF,$04
    db $0C,$85,$0B,$85,$05,$85,$FF,$04
    db $00,$05,$00,$05,$05,$C5,$FF,$04
    db $05,$C5,$FF,$04,$0C,$C5,$0B,$C5
    db $05,$C5,$FF,$04,$07,$C5,$06,$C5
    db $05,$85,$FF,$04,$FF,$04,$FF,$04
    db $FF,$04,$FF,$04,$FF,$04,$05,$45
    db $18,$85,$FD,$04,$1A,$C5,$10,$45
    db $06,$05,$07,$05,$FF,$04,$05,$05
    db $10,$45,$10,$45,$FA,$04,$FA,$04
    db $19,$45,$FA,$04,$13,$05,$10,$05
    db $FA,$04,$1D,$85,$FA,$04,$1D,$C5
    db $19,$05,$FA,$04,$FA,$04,$FA,$04
    db $19,$85,$13,$C5,$FA,$04,$19,$85
    db $F8,$00,$F8,$00,$F8,$00,$F8,$00
    db $3A,$11,$3A,$91,$3B,$11,$54,$11
    db $54,$91,$54,$11,$3A,$51,$3A,$D1
    db $64,$01,$74,$01,$65,$01,$FD,$00
    db $65,$41,$FD,$00,$64,$41,$74,$41
    db $75,$01,$FD,$00,$FD,$00,$FD,$00
    db $FD,$00,$FD,$00,$75,$41,$FD,$00
    db $FD,$00,$FD,$00,$FD,$00,$FD,$00
    db $FD,$00,$FD,$00,$FD,$00,$75,$C1
    db $FD,$00,$75,$81,$FD,$00,$FD,$00
    db $FD,$00,$59,$01,$59,$01,$59,$41
    db $FD,$00,$65,$C1,$74,$C1,$64,$C1
    db $74,$81,$64,$81,$FD,$00,$65,$81
    db $59,$41,$59,$01,$FD,$00,$59,$41
    db $66,$01,$76,$01,$67,$01,$FC,$00
    db $67,$41,$FC,$00,$66,$41,$76,$41
    db $77,$01,$FC,$00,$FC,$00,$FC,$00
    db $FC,$00,$FC,$00,$77,$41,$FC,$00
    db $FC,$00,$FC,$00,$FC,$00,$FC,$00
    db $6E,$01,$7E,$01,$6F,$01,$7F,$01
    db $6F,$41,$7F,$41,$6E,$41,$7E,$41
    db $FC,$00,$77,$81,$FC,$00,$FC,$00
    db $FC,$00,$FC,$00,$FC,$00,$77,$C1
    db $68,$01,$78,$01,$69,$01,$FB,$00
    db $69,$41,$FB,$00,$68,$41,$78,$41
    db $76,$81,$66,$81,$FC,$00,$67,$81
    db $FC,$00,$67,$C1,$76,$C1,$66,$C1
    db $79,$01,$FB,$00,$FB,$00,$FB,$00
    db $FB,$00,$FB,$00,$79,$41,$FB,$00
    db $70,$01,$72,$01,$71,$01,$73,$01
    db $FB,$00,$FB,$00,$FB,$00,$FB,$00
    db $78,$81,$68,$81,$FB,$00,$69,$81
    db $FB,$00,$79,$81,$FB,$00,$FB,$00
    db $FB,$00,$FB,$00,$FB,$00,$79,$C1
    db $FB,$00,$69,$C1,$78,$C1,$68,$C1
    db $71,$41,$73,$41,$70,$41,$72,$41
    db $6A,$01,$7A,$01,$6B,$01,$FA,$00
    db $6B,$41,$FA,$00,$6A,$41,$7A,$41
    db $7B,$01,$FA,$00,$FA,$00,$FA,$00
    db $FA,$00,$FA,$00,$7B,$41,$FA,$00
    db $6C,$01,$7C,$01,$6D,$01,$7D,$01
    db $6D,$41,$7D,$41,$6C,$41,$7C,$41
    db $FA,$00,$FA,$00,$FA,$00,$FA,$00
    db $7A,$81,$6A,$81,$FA,$00,$6B,$81
    db $FA,$00,$7B,$81,$FA,$00,$FA,$00
    db $FA,$00,$FA,$00,$FA,$00,$7B,$C1
    db $FA,$00,$6B,$C1,$7A,$C1,$6A,$C1
    db $35,$41,$35,$41,$35,$01,$35,$01
    db $2D,$41,$FA,$40,$2C,$41,$FA,$40
    db $2D,$41,$2C,$41,$2C,$41,$2D,$41
    db $34,$41,$33,$41,$34,$01,$33,$01
    db $2D,$41,$2C,$41,$2C,$41,$FA,$40
    db $FA,$40,$FA,$40,$FA,$40,$2D,$41
    db $2D,$41,$2C,$41,$2C,$41,$22,$01
    db $2D,$41,$23,$01,$2C,$41,$2D,$41
    db $22,$01,$2C,$41,$23,$01,$22,$01
    db $3A,$41,$39,$41,$3A,$01,$39,$01
    db $22,$01,$2C,$41,$23,$01,$2D,$41
    db $2D,$41,$FA,$40,$2C,$41,$2D,$41
    db $38,$01,$23,$01,$21,$01,$22,$01
    db $43,$41,$2F,$41,$43,$01,$2F,$01
    db $38,$01,$21,$01,$21,$01,$22,$01
    db $22,$01,$23,$01,$23,$01,$2D,$41
    db $2B,$01,$2B,$81,$2B,$01,$2B,$81
    db $2A,$01,$2A,$81,$29,$01,$29,$81
    db $28,$01,$28,$81,$27,$01,$27,$81
    db $26,$01,$26,$81,$25,$01,$25,$81
    db $24,$01,$24,$81,$36,$01,$36,$81
    db $2E,$41,$37,$41,$2E,$01,$37,$01
    db $36,$01,$36,$81,$24,$01,$24,$81
    db $25,$01,$25,$81,$26,$01,$26,$81
    db $27,$01,$27,$81,$28,$01,$28,$81
    db $29,$01,$29,$81,$2A,$01,$2A,$81
    db $22,$01,$23,$01,$23,$01,$38,$01
    db $38,$01,$21,$01,$21,$01,$1E,$01
    db $1E,$01,$1F,$01,$1F,$01,$1E,$01
    db $4C,$00,$4E,$00,$4C,$40,$4E,$40
    db $1E,$01,$1F,$01,$1F,$01,$38,$01
    db $22,$01,$23,$01,$23,$01,$2C,$41
    db $37,$41,$2E,$41,$37,$01,$2E,$01
    db $FA,$40,$2C,$41,$FA,$40,$FA,$40
    db $2F,$41,$43,$41,$2F,$01,$43,$01
    db $1E,$01,$21,$01,$1F,$01,$38,$01
    db $22,$01,$23,$01,$23,$01,$22,$01
    db $40,$01,$3B,$01,$41,$01,$44,$81
    db $42,$01,$44,$81,$40,$41,$3B,$01
    db $22,$01,$21,$01,$23,$01,$38,$01
    db $39,$41,$3A,$41,$39,$01,$3A,$01
    db $22,$01,$21,$01,$23,$01,$22,$01
    db $38,$01,$21,$01,$21,$01,$38,$01
    db $3C,$41,$3C,$01,$44,$41,$44,$81
    db $44,$41,$44,$81,$3C,$01,$3C,$41
    db $33,$41,$34,$41,$33,$01,$34,$01
    db $38,$01,$23,$01,$21,$01,$38,$01
    db $FA,$40,$FA,$40,$FA,$40,$FA,$40
    db $3D,$01,$40,$01,$44,$41,$41,$01
    db $44,$41,$42,$01,$3D,$01,$40,$41
    db $FA,$40,$2C,$41,$FA,$40,$2D,$41
    db $2D,$41,$23,$01,$2C,$41,$22,$01
    db $38,$01,$1F,$01,$21,$01,$38,$01
    db $38,$01,$1F,$01,$21,$01,$1E,$01
    db $1E,$01,$21,$01,$1F,$01,$1E,$01
    db $5E,$01,$7A,$01,$5F,$01,$7B,$01
    db $5E,$01,$6E,$01,$5F,$01,$6F,$01
    db $67,$41,$77,$41,$66,$41,$76,$41
    db $66,$01,$76,$01,$67,$01,$77,$01
    db $64,$01,$74,$01,$5F,$01,$6F,$01
    db $7A,$81,$5E,$81,$7B,$81,$5F,$81
    db $6E,$81,$5E,$81,$6F,$81,$5F,$81
    db $74,$81,$64,$81,$6F,$81,$5F,$81
    db $5A,$01,$6A,$01,$5B,$01,$6B,$01
    db $67,$41,$77,$41,$66,$41,$53,$01
    db $5A,$01,$54,$01,$5B,$01,$6B,$01
    db $6A,$81,$5A,$81,$6B,$81,$5B,$81
    db $54,$81,$5A,$81,$6B,$81,$5B,$81
    db $64,$01,$6E,$01,$65,$01,$6F,$01
    db $64,$01,$74,$01,$65,$01,$6F,$01
    db $57,$C1,$79,$C1,$56,$C1,$78,$C1
    db $66,$01,$53,$41,$67,$01,$77,$01
    db $69,$C1,$59,$C1,$68,$C1,$58,$C1
    db $58,$01,$68,$01,$59,$01,$69,$01
    db $78,$01,$56,$01,$79,$01,$57,$01
    db $5C,$01,$6C,$01,$5D,$01,$6D,$01
    db $7C,$01,$6E,$01,$7D,$01,$6F,$01
    db $F8,$00,$55,$01,$F8,$00,$F8,$00
    db $6E,$81,$7C,$81,$6F,$81,$7D,$81
    db $6C,$81,$5C,$81,$6D,$81,$5D,$81
    db $F5,$45,$FC,$05,$F5,$01,$FD,$01
    db $F5,$41,$FD,$01,$F6,$01,$F8,$01
    db $F4,$01,$F7,$01,$F5,$01,$FC,$01
    db $F5,$41,$FC,$01,$F5,$01,$FD,$01
    db $FE,$85,$FF,$05,$FF,$81,$FE,$41
    db $FE,$01,$FF,$01,$F8,$01,$F8,$81
    db $F7,$01,$F7,$81,$FE,$41,$FF,$81
    db $FE,$81,$FF,$01,$FF,$81,$FE,$41
    db $F4,$01,$F7,$01,$F6,$01,$F8,$01
    db $F7,$01,$F7,$81,$F8,$01,$F8,$81
    db $FF,$41,$FA,$01,$FE,$01,$FA,$41
    db $FE,$C1,$FA,$01,$F8,$01,$FB,$01
    db $F7,$01,$F9,$01,$FE,$01,$FA,$01
    db $F7,$01,$F9,$01,$F8,$01,$FB,$01
    db $74,$01,$72,$01,$75,$01,$73,$01
    db $F5,$45,$FD,$05,$F6,$05,$F8,$05
    db $F4,$05,$F7,$05,$F5,$05,$FC,$05
    db $F5,$45,$FC,$05,$F5,$05,$FD,$05
    db $FE,$05,$FF,$05,$F8,$01,$F8,$81
    db $FE,$C5,$FA,$05,$F8,$01,$FB,$01
    db $F5,$45,$FD,$05,$F6,$01,$F8,$01
    db $E0,$01,$E4,$01,$E1,$01,$E5,$81
    db $E1,$41,$E5,$C1,$E0,$41,$E4,$01
    db $E2,$01,$E2,$01,$E5,$01,$E5,$81
    db $E5,$41,$E5,$C1,$E2,$01,$E2,$01
    db $E2,$01,$E0,$01,$E5,$01,$E1,$01
    db $E5,$41,$E1,$41,$E2,$01,$E0,$41
    db $FF,$41,$FA,$01,$FE,$C1,$FA,$01

    %insert_empty($60,$60,$60,$60,$60)

CODE_0DA100:
; $0CF8DF   | Top-right of main overworld begins.
; $0CF9DF   | Bottom-left of main overworld begins.
; $0CFADF   | Bottom-right of main overworld begins.
; Note: last tile layers into next set.
; $0CFBDE   | Yoshi's Island and top half of Vanilla Dome begins.
; $0CFCDE   | Valley of Bowser and top half of Special World begins.
; $0CFDDE   | Bottom half of Vanilla Dome and Forest of Illusion begins.
; $0CFEDE   | Bottom half of Special World and Star World begins.
; Tilemap data for Map16 tiles 000-072.
; 8 bytes per 16x16, with 2 bytes per 8x8 (TTTTTTTT YXPCCCTT format).
; Ordered UL, BL, UR, BR.
; Tilemap data for Map16 tiles 100-106.
; 8 bytes per 16x16, with 2 bytes per 8x8 (TTTTTTTT YXPCCCTT format).
; Ordered UL, BL, UR, BR.
; Tilemap data for Map16 tiles 111-152.
; 8 bytes per 16x16, with 2 bytes per 8x8 (TTTTTTTT YXPCCCTT format).
; Ordered UL, BL, UR, BR.
; Tilemap data for Map16 tiles 16E-1C3.
; 8 bytes per 16x16, with 2 bytes per 8x8 (TTTTTTTT YXPCCCTT format).
; Ordered UL, BL, UR, BR.
; Tilemap data for Map16 tiles 1C4-1C7. Not used in GFX headers 0 or 7 (which use $0D8A70).
; 8 bytes per 16x16, with 2 bytes per 8x8 (TTTTTTTT YXPCCCTT format).
; Ordered UL, BL, UR, BR.
; Tilemap data for Map16 tiles 1C8-1EB.
; 8 bytes per 16x16, with 2 bytes per 8x8 (TTTTTTTT YXPCCCTT format).
; Ordered UL, BL, UR, BR.
; Tilemap data for Map16 tiles 1EC-1EF. Not used in GFX headers 0 or 7 (which use $0D8A90).
; 8 bytes per 16x16, with 2 bytes per 8x8 (TTTTTTTT YXPCCCTT format).
; Ordered UL, BL, UR, BR.
; Tilemap data for Map16 tiles 1F0-1FF.
; 8 bytes per 16x16, with 2 bytes per 8x8 (TTTTTTTT YXPCCCTT format).
; Ordered UL, BL, UR, BR.
; Tilemap data for Map16 tiles 1C4-1C7, in GFX headers 0 and 7 (others use $0D8890).
; 8 bytes per 16x16, with 2 bytes per 8x8 (TTTTTTTT YXPCCCTT format).
; Ordered UL, BL, UR, BR.
; Tilemap data for Map16 tiles 1EC-1EF, in GFX headers 0 and 7 (others use $0D89D0).
; 8 bytes per 16x16, with 2 bytes per 8x8 (TTTTTTTT YXPCCCTT format).
; Ordered UL, BL, UR, BR.
; Tilemap data for the different colors of Map16 tiles 133-13F (the pipes), excluding the default (green).
; Silver
; (screen % 4 = 0)
; Yellow
; (screen % 4 = 2)
; Blue
; (screen % 4 = 3)
; Tilemap data for Map16 tiles 073-0FF, in tileset 0 only.
; 8 bytes per 16x16, with 2 bytes per 8x8 (TTTTTTTT YXPCCCTT format).
; Ordered UL, BL, UR, BR.
; Tilemap data for Map16 tiles 107-110, in tileset 0 only.
; 8 bytes per 16x16, with 2 bytes per 8x8 (TTTTTTTT YXPCCCTT format).
; Ordered UL, BL, UR, BR.
; Tilemap data for Map16 tiles 153-16D, in tileset 0 only.
; 8 bytes per 16x16, with 2 bytes per 8x8 (TTTTTTTT YXPCCCTT format).
; Ordered UL, BL, UR, BR.
    SEP #$30                                  ; AXY->8; Tilemap data for the background Map16 tiles (tiles 8000-81FF in LM).
    JSR CODE_0DA106
    RTL

CODE_0DA106:
    SEP #$30                                  ; AXY->8
    LDA.B LvlLoadObjSize
    TAX
    JSL ExecutePtrLong

    dl CODE_0DA512
    dl CODE_0DA53D
    dl $000000
    dl $000000
    dl $000000
    dl $000000
    dl $000000
    dl $000000
    dl $000000
    dl $000000
    dl $000000
    dl $000000
    dl $000000
    dl $000000
    dl $000000
    dl $000000
    dl CODE_0DA57B
    dl CODE_0DA57B
    dl CODE_0DA57B
    dl CODE_0DA57B
    dl CODE_0DA57B
    dl CODE_0DA57B
    dl CODE_0DA57B
    dl CODE_0DA64D
    dl CODE_0DA57B
    dl CODE_0DA57B
    dl CODE_0DA57B
    dl CODE_0DA57B
    dl CODE_0DA57B
    dl CODE_0DA57B
    dl CODE_0DA57B
    dl CODE_0DA57B
    dl CODE_0DA57B
    dl CODE_0DA57B
    dl CODE_0DA57B
    dl CODE_0DA57B
    dl CODE_0DA57B
    dl CODE_0DA57B
    dl CODE_0DA57B
    dl CODE_0DA57B
    dl CODE_0DA57B
    dl CODE_0DA57B
    dl CODE_0DA57B
    dl CODE_0DA57B
    dl CODE_0DA57B
    dl CODE_0DA57B
    dl CODE_0DA57B
    dl CODE_0DA57B
    dl CODE_0DA57B
    dl CODE_0DA57B
    dl CODE_0DA57B
    dl CODE_0DA57B
    dl CODE_0DA57B
    dl CODE_0DA57B
    dl CODE_0DA57B
    dl CODE_0DA57B
    dl CODE_0DA57B
    dl CODE_0DA57B
    dl CODE_0DA57B
    dl CODE_0DA57B
    dl CODE_0DA57B
    dl CODE_0DA57B
    dl CODE_0DA57B
    dl CODE_0DA57B
    dl CODE_0DA57B
    dl CODE_0DB2CA
    dl ADDR_0DA656
    dl ADDR_0DA656
    dl CODE_0DA673
    dl CODE_0DA673
    dl CODE_0DA68E
    dl CODE_0DA6D1
    dl CODE_0DA6D1
    dl CODE_0DEABF
    dl CODE_0DA7C1
    dl CODE_0DC259
    dl CODE_0DC259
    dl CODE_0DCE67
    dl CODE_0DCE67
    dl CODE_0DCE67
    dl CODE_0DCE67
    dl CODE_0DCE94
    dl CODE_0DCE94
    dl CODE_0DCE94
    dl CODE_0DCE94
    dl CODE_0DCEC0
    dl CODE_0DCEDA
    dl CODE_0DE95F
    dl CODE_0DE95F
    dl CODE_0DE95F
    dl CODE_0DE95F
    dl CODE_0DE95F
    dl CODE_0DE95F
    dl CODE_0DE95F
    dl CODE_0DE95F
    dl ADDR_0DE971
    dl CODE_0DDA57
    dl CODE_0DE9AA
    dl CODE_0DE9AA
    dl CODE_0DE9AA
    dl CODE_0DE9ED
    dl CODE_0DE9ED
    dl ADDR_0DEA3E
    dl ADDR_0DEA3E
    dl ADDR_0DB571
    dl ADDR_0DB571
    dl ADDR_0DB571
    dl ADDR_0DB571
    dl ADDR_0DB571
    dl ADDR_0DB571
    dl ADDR_0DB571
    dl ADDR_0DB571
    dl ADDR_0DCEA6
    dl CODE_0DE0AE
    dl CODE_0DE0AE
    dl CODE_0DE0AE
    dl CODE_0DE0AE
    dl CODE_0DDA68
    dl CODE_0DDA68
    dl CODE_0DDA68
    dl CODE_0DDA68
    dl CODE_0DDA68
    dl CODE_0DDA68
    dl CODE_0DDA68
    dl CODE_0DDA80
    dl CODE_0DDA80
    dl CODE_0DDA80
    dl CODE_0DDAA2
    dl CODE_0DEB6A
    dl ADDR_0DEC68
    dl CODE_0DA71B
    dl CODE_0DA760
    dl CODE_0DC2E9
    dl CODE_0DEC33
    dl CODE_0DA7E7
    dl CODE_0DB58B
    dl CODE_0DB6E3
    dl CODE_0DB6E3
    dl CODE_0DEC8E
    dl CODE_0DEC8E
    dl CODE_0DEC8E
    dl CODE_0DEC8E
    dl CODE_0DB583
    dl CODE_0DECC1
    dl CODE_0DC31E
    dl CODE_0DA80D
    dl CODE_0DA80D
    dl CODE_0DA846
    dl CODE_0DA846
    dl CODE_0DA87D
    dl CODE_0DA87D
    dl CODE_0DEC5C
    dl CODE_0DA6D1
    dl CODE_0DA6D1
    dl CODE_0DA6D1
    dl CODE_0DA6D1
    dl CODE_0DA6D1
    dl CODE_0DA6D1
    dl CODE_0DA6D1
    dl CODE_0DA6D1
    dl CODE_0DA6D1
    dl CODE_0DA6D1
    dl CODE_0DA6D1
    dl CODE_0DA6D1
    dl CODE_0DA6D1
    dl CODE_0DA6D1
    dl CODE_0DA6D1
    dl CODE_0DA6D1
    dl CODE_0DA6D1
    dl CODE_0DA6D1
    dl CODE_0DA6D1
    dl CODE_0DA6D1
    dl CODE_0DA6D1
    dl CODE_0DA6D1
    dl CODE_0DA6D1
    dl CODE_0DA6D1
    dl CODE_0DA6D1
    dl CODE_0DA6D1
    dl CODE_0DA6D1
    dl CODE_0DA6D1
    dl CODE_0DA6D1
    dl CODE_0DA6D1
    dl CODE_0DA6D1
    dl CODE_0DA6D1
    dl CODE_0DA6D1
    dl CODE_0DA6D1
    dl CODE_0DA6D1
    dl CODE_0DA6D1
    dl CODE_0DA6D1
    dl CODE_0DA6D1
    dl CODE_0DA6D1
    dl CODE_0DA6D1
    dl CODE_0DA6D1
    dl CODE_0DA6D1
    dl CODE_0DA6D1
    dl CODE_0DA6D1
    dl CODE_0DA6D1
    dl CODE_0DA6D1
    dl CODE_0DA6D1
    dl CODE_0DA6D1
    dl CODE_0DA6D1
    dl CODE_0DA6D1
    dl CODE_0DA6D1
    dl CODE_0DA6D1
    dl CODE_0DA6D1
    dl CODE_0DA6D1
    dl CODE_0DA6D1
    dl CODE_0DA6D1
    dl CODE_0DA6D1
    dl CODE_0DA6D1
    dl CODE_0DA6D1
    dl CODE_0DA6D1
    dl CODE_0DA6D1
    dl CODE_0DA6D1
    dl CODE_0DA6D1
    dl CODE_0DA6D1
    dl CODE_0DA6D1
    dl CODE_0DA6D1
    dl CODE_0DA6D1
    dl CODE_0DA6D1
    dl CODE_0DA6D1
    dl CODE_0DA6D1
    dl CODE_0DA6D1
    dl CODE_0DA6D1
    dl CODE_0DA6D1
    dl CODE_0DA6D1
    dl CODE_0DA6D1
    dl CODE_0DA6D1
    dl CODE_0DA6D1
    dl CODE_0DA6D1
    dl CODE_0DA6D1
    dl CODE_0DA6D1
    dl CODE_0DA6D1
    dl CODE_0DA6D1
    dl CODE_0DA6D1
    dl CODE_0DA6D1
    dl CODE_0DA6D1
    dl CODE_0DA6D1
    dl CODE_0DA6D1
    dl CODE_0DA6D1
    dl CODE_0DA6D1
    dl CODE_0DA6D1
    dl CODE_0DA6D1
    dl CODE_0DA6D1
    dl CODE_0DA6D1
    dl CODE_0DA6D1
    dl CODE_0DA6D1
    dl CODE_0DA6D1
    dl CODE_0DA6D1
    dl CODE_0DA6D1
    dl CODE_0DA6D1
    dl CODE_0DA6D1
    dl CODE_0DA6D1
    dl CODE_0DA6D1
    dl CODE_0DA6D1
    dl CODE_0DA6D1

CODE_0DA40F:
; 8 bytes per 16x16, with 2 bytes per 8x8 (TTTTTTTT YXPCCCTT format).
; Ordered UL, BL, UR, BR.
; Routine to generate an extended object.
; $0DA100   |\
; $0DA102   || Wrapper for the below.
; $0DA105   |/
; $0DA106   |
; $0DA108   |\
; $0DA10A   || Jump to the appropriate routine for the object ID.
; $0DA10B   |/
; Extended object pointers.
; 00 - Screen exit
; 01 - Screen jump
; 02 - Unused
; 03 - Unused
; 04 - Unused
; 05 - Unused
; 06 - Unused
; 07 - Unused
; 08 - Unused
; 09 - Unused
; 0A - Unused
; 0B - Unused
; 0C - Unused
; 0D - Unused
; 0E - Unused
; 0F - Unused
; 10 - Small door
; 11 - Invisible 1up question block
; 12 - Invisible noteblock
; 13 - Top-left corner edge tile 1
; 14 - Top-right corner edge tile 1
; 15 - Small invisible P-Switch door
; 16 - Invisible P-Switch question block
; 17 - Green star block
; 18 - 3-Up moon
; 19 - Invisible 1up checkpoint #1
; 1A - Invisible 1up checkpoint #2
; 1B - Invisible 1up checkpoint #3
; 1C - Invisible 1up checkpoint #4
; 1D - Red berry
; 1E - Pink berry
; 1F - Green berry
; 20 - Always turning block
; 21 - Bottom right of midway point (unused)
; 22 - Bottom right of midway point (unused)
; 23 - Noteblock (flower/feather/star)
; 24 - ON/OFF block
; 25 - Direction coins ? block
; 26 - Noteblock
; 27 - Noteblock, bounce on all sides
; 28 - Turnblock (Flower)
; 29 - Turnblock (Feather)
; 2A - Turnblock (Star)
; 2B - Turnblock (Star 2/1up/Vine)
; 2C - Turnblock (Multiple coins)
; 2D - Turnblock (Coin)
; 2E - Turnblock (Nothing)
; 2F - Turnblock (POW)
; 30 - ? block (Flower)
; 31 - ? block (Feather)
; 32 - ? block (Star)
; 33 - ? block (Star 2)
; 34 - ? block (Multiple coins)
; 35 - ? block (Key/Wings/Balloon/Shell)
; 36 - ? block (Yoshi)
; 37 - ? block (Shell)
; 38 - ? block (Shell)
; 39 - Turnblock, unbreakable (Feather)
; 3A - Top left corner edge tile 2
; 3B - Top right corner edge tile 2
; 3C - Top left corner edge tile 3
; 3D - Top right corner edge tile 3
; 3E - Top left corner edge tile 4
; 3F - Top right corner edge tile 4
; 40 - Transculent block
; 41 - Yoshi Coin
; 42 - Top left slope
; 43 - Top right slope
; 44 - Purple triangle, left
; 45 - Purple triangle, right
; 46 - Midway point tape
; 47 - Door
; 48 - Invisible POW door
; 49 - Ghost house exit
; 4A - Climbing net door
; 4B - Conveyor end tile 1
; 4C - Conveyor end tile 2
; 4D - Line guide, top left 1/4 large circle
; 4E - Line guide, top right 1/4 large circle
; 4F - Line guide, bottom left 1/4 large circle
; 50 - Line guide, bottom right 1/4 large circle
; 51 - Line guide, top left 1/4 small circle
; 52 - Line guide, top right 1/4 small circle
; 53 - Line guide, bottom left 1/4 small circle
; 54 - Line guide, bottom right 1/4 small circle
; 55 - Line guide end, for horizontal line
; 56 - Line guide end, for vertical line
; 57 - Switch palace bottom right corner tile
; 58 - Switch palace bottom left corner tile
; 59 - Switch palace top right corner tile
; 5A - Switch palace top left corner tile
; 5B - Bit of brick background tile 1
; 5C - Bit of brick background tile 2
; 5D - Bit of brick background tile 3
; 5E - Bit of brick background tile 4
; 5F - Large background area
; 60 - Lava/mud top right corner edge
; 61 - Ghost house clock
; 62 - Ghost house top left to bottom right beam 1
; 63 - Ghost house top right to bottom left beam 1
; 64 - Ghost house cobweb, top right
; 65 - Ghost house cobweb, top left
; 66 - Ghost house top right to bottom left beam 2
; 67 - Ghost house top left to bottom right beam 2
; 68 - Cloud fringe, bottom and right edge
; 69 - Cloud fringe, bottom and left edge
; 6A - Cloud fringe, bottom right
; 6B - Cloud fringe, bottom left
; 6C - Cloud fringe on white, bottom and right edge
; 6D - Cloud fringe on white, bottom and left edge
; 6E - Cloud fringe on white, bottom right
; 6F - Cloud fringe on white, bottom left
; 70 - Bit of canvass 1
; 71 - Canvass 1
; 72 - Canvass 2
; 73 - Canvass 3
; 74 - Canvass 4
; 75 - Canvass tile 1
; 76 - Canvass tile 2
; 77 - Canvass tile 3
; 78 - Canvass tile 4
; 79 - Canvass tile 5
; 7A - Canvass tile 6
; 7B - Canvass tile 7
; 7C - Bit of canvas 2
; 7D - Bit of canvas 3
; 7E - Bit of canvas 4
; 7F - Torpedo launcher
; 80 - Ghost house entrance
; 81 - Water weed
; 82 - Big bush 1
; 83 - Big bush 2
; 84 - Castle entrance
; 85 - Yoshi's house
; 86 - Arrow sign
; 87 - Green switch palace block
; 88 - Tree branch, left
; 89 - Tree branch, right
; 8A - Green switch
; 8B - Yellow switch
; 8C - Blue switch
; 8D - Red switch
; 8E - Yellow switch palace block
; 8F - Ghost house window
; 90 - Boss door
; 91 - Steep left slope (vertical)
; 92 - Steep right slope (vertical)
; 93 - Normal left slope (vertical)
; 94 - Normal right slope (vertical)
; 95 - Very steep left slope (vertical)
; 96 - Very steep right slope (vertical)
; 97 - Switch palace right and bottom edge tile
; 98 - Unused
; 99 - Unused
; 9A - Unused
; 9B - Unused
; 9C - Unused
; 9D - Unused
; 9E - Unused
; 9F - Unused
; A0 - Unused
; A1 - Unused
; A2 - Unused
; A3 - Unused
; A4 - Unused
; A5 - Unused
; A6 - Unused
; A7 - Unused
; A8 - Unused
; A9 - Unused
; AA - Unused
; AB - Unused
; AC - Unused
; AD - Unused
; AE - Unused
; AF - Unused
; B0 - Unused
; B1 - Unused
; B2 - Unused
; B3 - Unused
; B4 - Unused
; B5 - Unused
; B6 - Unused
; B7 - Unused
; B8 - Unused
; B9 - Unused
; BA - Unused
; BB - Unused
; BC - Unused
; BD - Unused
; BE - Unused
; BF - Unused
; C0 - Unused
; C1 - Unused
; C2 - Unused
; C3 - Unused
; C4 - Unused
; C5 - Unused
; C6 - Unused
; C7 - Unused
; C8 - Unused
; C9 - Unused
; CA - Unused
; CB - Unused
; CC - Unused
; CD - Unused
; CE - Unused
; CF - Unused
; D0 - Unused
; D1 - Unused
; D2 - Unused
; D3 - Unused
; D4 - Unused
; D5 - Unused
; D6 - Unused
; D7 - Unused
; D8 - Unused
; D9 - Unused
; DA - Unused
; DB - Unused
; DC - Unused
; DD - Unused
; DE - Unused
; DF - Unused
; E0 - Unused
; E1 - Unused
; E2 - Unused
; E3 - Unused
; E4 - Unused
; E5 - Unused
; E6 - Unused
; E7 - Unused
; E8 - Unused
; E9 - Unused
; EA - Unused
; EB - Unused
; EC - Unused
; ED - Unused
; EE - Unused
; EF - Unused
; F0 - Unused
; F1 - Unused
; F2 - Unused
; F3 - Unused
; F4 - Unused
; F5 - Unused
; F6 - Unused
; F7 - Unused
; F8 - Unused
; F9 - Unused
; FA - Unused
; FB - Unused
; FC - Unused
; FD - Unused
; FE - Unused
; FF - Unused
    SEP #$30                                  ; AXY->8; Routine to generate a standard object.
    JSR CODE_0DA415
    RTL

CODE_0DA415:
    SEP #$30                                  ; AXY->8
    LDA.W ObjectTileset
    JSL ExecutePtrLong

    dl CODE_0DA44B
    dl CODE_0DC190
    dl CODE_0DCD90
    dl CODE_0DD990
    dl CODE_0DE890
    dl CODE_0DE890
    dl CODE_0DCD90
    dl CODE_0DA44B
    dl CODE_0DCD90
    dl CODE_0DD990
    dl CODE_0DD990
    dl CODE_0DD990
    dl CODE_0DA44B
    dl CODE_0DE890
    dl CODE_0DD990

CODE_0DA44B:
; Pointers to the standard object routines for each GFX setting.
; 00 - Normal 1
; 01 - Castle 1
; 02 - Rope 1
; 03 - Underground 1
; 04 - Switch Palace 1
; 05 - Ghost House 1
; 06 - Rope 2
; 07 - Normal 2
; 08 - Rope 3
; 09 - Underground 2
; 0A - Switch Palace 2
; 0B - Castle 2
; 0C - Cloud/Forest
; 0D - Ghost House 2
    SEP #$30                                  ; AXY->8; 0E - Underground 3
    LDX.B LvlLoadObjNo
    DEX
    TXA
    JSL ExecutePtrLong

    dl CODE_0DA8C3
    dl CODE_0DA8C3
    dl CODE_0DA8C3
    dl CODE_0DA8C3
    dl CODE_0DA8C3
    dl CODE_0DA8C3
    dl CODE_0DA8C3
    dl CODE_0DA8C3
    dl CODE_0DA8C3
    dl CODE_0DA8C3
    dl CODE_0DA8C3
    dl CODE_0DA8C3
    dl CODE_0DA8C3
    dl CODE_0DA8C3
    dl CODE_0DAA26
    dl CODE_0DAAB4
    dl CODE_0DAB0D
    dl CODE_0DAB3E
    dl CODE_0DB075
    dl CODE_0DB1D4
    dl CODE_0DB224
    dl ADDR_0DB336
    dl CODE_0DB3BD
    dl CODE_0DB3E3
    dl CODE_0DB3E3
    dl CODE_0DB3E3
    dl CODE_0DB3E3
    dl CODE_0DB42D
    dl CODE_0DB461
    dl CODE_0DB49E
    dl CODE_0DB51F
    dl CODE_0DB547
    dl CODE_0DB1C8
    dl CODE_0DB3E3
    dl CODE_0DB3E3
    dl CODE_0DB3E3
    dl CODE_0DB3E3
    dl CODE_0DB3E3
    dl CODE_0DB3E3
    dl CODE_0DB3E3
    dl CODE_0DB3E3
    dl CODE_0DB3E3
    dl CODE_0DB3E3
    dl CODE_0DB3E3
    dl CODE_0DB3E3
    dl CODE_0DB3E3
    dl CODE_0DB3E3
    dl CODE_0DBB2C
    dl CODE_0DBB63
    dl CODE_0DB916
    dl CODE_0DBADC
    dl CODE_0DBA4C
    dl CODE_0DBA0A
    dl CODE_0DB9C0
    dl CODE_0DB966
    dl CODE_0DB91E
    dl CODE_0DB73F
    dl CODE_0DB7AA
    dl CODE_0DB863
    dl CODE_0DB604
    dl CODE_0DB6C3
    dl ADDR_0DB705
    dl CODE_0DB5B7

CODE_0DA512:
; Standard object pointers (GFX settings 0, 7, C); aka T:0.
; 01 - Water tiles 1, dark blue
; 02 - Invisible coin blocks
; 03 - Invisible noteblocks
; 04 - Invisible POW coins
; 05 - Coins
; 06 - Walk-through dirt
; 07 - Water tiles 2, variable color
; 08 - Noteblocks
; 09 - Turnblocks
; 0A - Coin ? blocks
; 0B - Throw blocks
; 0C - Munchers
; 0D - Gray cement blocks
; 0E - Brown "used" blocks
; 0F - Vertical pipe
; 10 - Horizontal pipe
; 11 - Bullet bill shooter
; 12 - Slope
; 13 - Ledge edge / Vine
; 14 - Ledge
; 15 - Midway point / Goal point
; 16 - Purple coins
; 17 - Rope / Clouds
; 18 - Amimated water
; 19 - Normal water
; 1A - Animated lava/mud
; 1B - Net (top)
; 1C - Donut bridge
; 1D - Net (bottom)
; 1E - Net (left/right)
; 1F - Skinny vertical pipe/bone/log
; 20 - Skinny horizontal pipe/bone/log
; 21 - Wide-scale ledge
; 22 - Unused (used internally by LM for direct map16 page 0)
; 23 - Unused (used internally by LM for direct map16 page 1)
; 24 - Unused (used internally by LM for the deprecated FG/BG/SP graphics system)
; 25 - Unused (used internally by LM for the deprecated AN2 graphics system)
; 26 - Unused (used internally by LM for bypassing music)
; 27 - Unused (used internally by LM for direct map16 objects on pages 00-3F)
; 28 - Unused (used internally by LM for bypassing the time limit)
; 29 - Unused (used internally by LM for direct map16 objects on pages 40-7F)
; 2A - Unused (reserved for future use by LM)
; 2B - Unused (reserved for future use by LM)
; 2C - Unused (reserved for future use by LM)
; 2D - Unused (reserved for 5-byte user-defined objects)
; 2E - Tileset specific: Unused
; 2F - Tileset specific: Unused
; 30 - Tileset specific: Ice blue vertical pipe
; 31 - Tileset specific: Ice blue turn tiles
; 32 - Tileset specific: Blue switch blocks
; 33 - Tileset specific: Forest tree top
; 34 - Tileset specific: Forest ledge edge
; 35 - Tileset specific: Forest ledge
; 36 - Tileset specific: Large tree trunk
; 37 - Tileset specific: Small tree trunk
; 38 - Tileset specific: Red switch blocks
; 39 - Tileset specific: Right facing diagonal pipe
; 3A - Tileset specific: Left facing diagonal ledge
; 3B - Tileset specific: Right facing diganonal ledge
; 3C - Tileset specific: Arch ledge
; 3D - Tileset specific: Top cloud fringe
; 3E - Tileset specific: Left/right cloud fringe
; 3F - Tileset specific: Bush
    LDY.B #$00                                ; Create a screen exit.
    LDA.B [Layer1DataPtr],Y                   ; Store destination level to RAM.
    STA.B LvlLoadObjNo
    INY
    TYA
    CLC
    ADC.B Layer1DataPtr
    STA.B Layer1DataPtr                       ; Increase object pointer.
    LDA.B Layer1DataPtr+1
    ADC.B #$00
    STA.B Layer1DataPtr+1
    LDA.B _A
    AND.B #$1F
    TAX                                       ; Store destination level to the exit table.
    LDA.B LvlLoadObjNo
    STA.W ExitTableLow,X
    LDA.B _B
    AND.B #$01                                ; Store high bit of destination level to the exit table (unused).
    STA.W ExitTableHigh,X
    LDA.B _B
    LSR A                                     ; Set secondary exit flag for the level if applicable.
    STA.W UseSecondaryExit
    RTS

CODE_0DA53D:
    LDA.B _A
    AND.B #$1F
    STA.W LevelLoadObject
    STA.W LevelLoadObjectTile
    RTS


DATA_0DA548:
    db $1F,$22,$24,$42,$43,$27,$29,$25
    db $6E,$6F,$70,$71,$72,$45,$46,$47
    db $48,$36,$37,$11,$12,$14,$15,$16
    db $17,$18,$19,$1A,$1B,$1C,$29,$1D
    db $1F,$20,$21,$22,$23,$25,$26,$27
    db $28,$2A,$DE,$E0,$E2,$E4,$EC,$ED
    db $2C,$25,$2D

CODE_0DA57B:
; Low byte of the Map16 tiles for extended objects 10-40 (8th byte is unused; object 17 uses the last byte instead)
    TXA                                       ; Routine to load the Map16 for extended objects 10-40.
    SEC                                       ; Localize object numbers to 00. Note: object 17 (green star block) uses #$32 instead.
    SBC.B #$10
CODE_0DA57F:
    STA.B _0
    CPX.B #$18
    BCC CODE_0DA5B1                           ; If not objects 18-1C, branch.
    CPX.B #$1D                                ; (3-up, 1up checkpoints)
    BCS CODE_0DA5B1
    LDA.W TranslevelNo
    LSR A
    LSR A
    LSR A
    TAY                                       ; Get index to the 1up checkpoint/3up moon tables.
    LDA.W TranslevelNo
    AND.B #$07
    TAX
    LDA.B _0
    CMP.B #$08                                ; If it's one of the 1up checkpoints, branch.
    BNE CODE_0DA5A7
    LDA.W MoonCollected,Y
    AND.L DATA_0DA8A6,X                       ; If the 3-up moon has already been gotten for this level, return. Else, branch and continue.
    BEQ CODE_0DA5B1
    BRA Return0DA5B0

CODE_0DA5A7:
    LDA.W Checkpoint1upCollected,Y
    AND.L DATA_0DA8A6,X                       ; If the 1up checkpoints have already been passed for the level, return. Else, branch and continue.
    BEQ CODE_0DA5B1
Return0DA5B0:
    RTS

CODE_0DA5B1:
    LDY.B LevelLoadPos                        ; 1up checkpoint / 3-up moon hasn't been obtained yet, so actually make the object.
    JSR StzTo6ePointer
    LDX.B _0
    CPX.B #$13                                ; Set the high Map16 byte for objects 17 and 23-40, clear for all others.
    BMI +
    JSR Sta1To6ePointer
  + LDA.L DATA_0DA548,X                       ; $0C: Map16 tile to load.
    STA.B _C
    CPX.B #$01
    BEQ CODE_0DA5F0
    CPX.B #$07
    BEQ CODE_0DA5F0                           ; Branch if set to spawn a 1up under certain conditions.
    CPX.B #$32                                ; (invisible 1up block, green star block, Yoshi ? block)
    BEQ CODE_0DA5F0
    CPX.B #$26
    BEQ CODE_0DA5F0
    CPX.B #$1B                                ; If not the turnblock with Star 2/1up/Vine, branch.
    BNE CODE_0DA648
    TYA
    AND.B #$0F
    CMP.B #$01
    BEQ CODE_0DA5F0
    CMP.B #$04
    BEQ CODE_0DA5F0
    CMP.B #$07                                ; If the turnblock with Star 2/1up/Vine is not in a position that satisfies x%3=1, branch.
    BEQ CODE_0DA5F0
    CMP.B #$0A
    BEQ CODE_0DA5F0
    CMP.B #$0D
    BNE CODE_0DA648
CODE_0DA5F0:
    TXA
    PHA
    TYA
    PHA
    LDX.W ItemMemorySetting
    LDA.B #ItemMemoryTable
    CLC                                       ; If the item memory bit is set, make a brown block instead.
    ADC.L DATA_0DA8AE,X                       ; Note: a far more optimized version of the get-bit portion is available here: https://smwc.me/1477689
    STA.B _8
    LDA.B #ItemMemoryTable>>8
    ADC.L DATA_0DA8B1,X
    STA.B _9
    LDA.W LevelLoadObjectTile
    ASL A
    ASL A
    STA.B _E
    LDA.B _A
    AND.B #$10
    BEQ +
    LDA.B _E
    ORA.B #$02
    STA.B _E
  + TYA
    AND.B #$08
    BEQ +
    LDA.B _E
    ORA.B #$01
    STA.B _E
  + LDA.B LevelLoadPos
    AND.B #$07
    TAX
    LDY.B _E
    LDA.B (_8),Y
    AND.L DATA_0DA8A6,X
    STA.B _F
    PLA
    TAY
    PLA
    TAX
    LDA.B _F
    BEQ CODE_0DA648
    CPX.B #$07
    BEQ +                                     ; Create the brown block if necessary.
    JSR Sta1To6ePointer
    LDA.B #$32
    STA.B _C
CODE_0DA648:
    LDA.B _C                                  ; Store the block's Map16 number to the Map16 data.
    STA.B [Map16LowPtr],Y
  + RTS

CODE_0DA64D:
; Routine for extended object 17, the green star block.
    LDA.B #$32                                ; Use a Map16 index of 32.
    JMP CODE_0DA57F                           ; Create the block.


DATA_0DA652:
    db $D8,$DB

DATA_0DA654:
    db $DA,$DC

ADDR_0DA656:
    LDY.B LevelLoadPos
    TXA
    SEC
    SBC.B #$42
    TAX
    JSR Sta1To6ePointer
    LDA.L DATA_0DA652,X
    JSR CODE_0DA95B
    LDA.L DATA_0DA654,X
    STA.B [Map16LowPtr],Y
    JSR Sta1To6ePointer
    RTS


DATA_0DA671:
    db $B4,$B5

CODE_0DA673:
    LDY.B LevelLoadPos                        ; Extended object 44/45 - Purple Triangle
    TXA
    SEC
    SBC.B #$44
    TAX
    LDA.L DATA_0DA671,X
    STA.B [Map16LowPtr],Y
    JSR Sta1To6ePointer
    JSR CODE_0DA97D
    LDA.B #$EB
    STA.B [Map16LowPtr],Y
    JSR Sta1To6ePointer
    RTS

CODE_0DA68E:
    LDX.W TranslevelNo                        ; Extended object 46 - Midway point tape
    %WorL_X(LDA,OWLevelTileSettings)
    AND.B #$40                                ; Return if the midpoint has already been obtained.
    BNE +
    LDA.W MidwayFlag
    BNE +
    LDY.B LevelLoadPos
    DEY
    JSR StzTo6ePointer
    LDA.B #$35                                ; Tile to use for the left tile of the midpoint tape.
    JSR CODE_0DA95B
    JSR StzTo6ePointer
    LDA.B #$38                                ; Tile to use for the right tile of the midpoint tape.
    STA.B [Map16LowPtr],Y
  + RTS

CODE_0DA6B1:
    LDA.B Map16LowPtr                         ; Subroutine to get the 16-bit index to Map16 data in $04/$05.
    STA.B _4
    LDA.B Map16LowPtr+1
    STA.B _5
    RTS

CODE_0DA6BA:
    LDA.B _4                                  ; Subroutine to transfer the 16-bit Map16 pointer back from $04/$05.
    STA.B Map16LowPtr
    STA.B Map16HighPtr
    LDA.B _5
    STA.B Map16LowPtr+1
    STA.B Map16HighPtr+1
    LDA.W LevelLoadObject
    STA.W LevelLoadObjectTile
    RTS


DATA_0DA6CD:
    db $1F,$27

DATA_0DA6CF:
    db $20,$28

CODE_0DA6D1:
; Tile numbers for the top of doors.
; Tile numbers for the bottom of doors.
    LDY.B LevelLoadPos                        ; Object creation routine for doors (and also the unused objects).
    TXA
    SEC
    SBC.B #$47                                ; Store top tile number.
    TAX
    JSR StzTo6ePointer
    LDA.L DATA_0DA6CD,X
    STA.B [Map16LowPtr],Y
    JSR CODE_0DA97D
    JSR StzTo6ePointer                        ; Store bottom tile number.
    LDA.L DATA_0DA6CF,X
    STA.B [Map16LowPtr],Y
    RTS


DATA_0DA6EE:
    db $25,$25,$25,$4B,$4D,$4E,$25,$25
    db $25,$25,$25,$54,$49,$49,$5F,$63
    db $25,$25,$25,$25,$57,$49,$49,$52
    db $4A,$5D,$25,$25,$5A,$49,$49,$50
    db $51,$4A,$60,$25,$5A,$49,$49,$49
    db $53,$4A,$4A,$4A,$63

CODE_0DA71B:
    LDY.B LevelLoadPos
    LDA.B #$08
    STA.B _0
    LDA.B #$04
    STA.B _1
    LDX.B #$00
    JSR CODE_0DA6B1                           ; Get Map16 data pointer in $04/$05.
CODE_0DA72A:
    LDA.B _0
    STA.B _2
  - JSR StzTo6ePointer
    LDA.L DATA_0DA6EE,X
    JSR CODE_0DA78D
    INX
    DEC.B _2
    BPL -
    JSR CODE_0DA6BA                           ; Update Map16 pointer and move one row down.
    JSR CODE_0DA97D
    DEC.B _1
    BPL CODE_0DA72A
    RTS


DATA_0DA748:
    db $25,$25,$4B,$4C,$25,$25,$25,$54
    db $49,$5F,$63,$25,$25,$57,$49,$52
    db $4A,$5D,$5A,$49,$49,$49,$4F,$60

CODE_0DA760:
    LDY.B LevelLoadPos
    LDA.B #$05
    STA.B _0
    LDA.B #$03
    STA.B _1
    LDX.B #$00
    JSR CODE_0DA6B1                           ; Get Map16 data pointer in $04/$05.
CODE_0DA76F:
    LDA.B _0
    STA.B _2
  - JSR StzTo6ePointer
    LDA.L DATA_0DA748,X
    JSR CODE_0DA78D
    INX
    DEC.B _2
    BPL -
    JSR CODE_0DA6BA                           ; Update Map16 pointer and move one row down.
    JSR CODE_0DA97D
    DEC.B _1
    BPL CODE_0DA76F
    RTS

CODE_0DA78D:
    STA.B _F
    CMP.B #$25
    BNE +
    JMP CODE_0DA95D

  + CMP.B #$49
    BCC CODE_0DA7AC
    CMP.B #$54
    BCC CODE_0DA7AC
    LDA.B [Map16LowPtr],Y
    CMP.B #$25
    BEQ CODE_0DA7AC
    CMP.B #$49
    BEQ +
    INC.B _F
  + INC.B _F
CODE_0DA7AC:
    LDA.B _F
    JMP CODE_0DA95B


DATA_0DA7B1:
    db $10,$11,$11,$12,$13,$0B,$0B,$15
    db $13,$0B,$0B,$15,$16,$17,$17,$18

CODE_0DA7C1:
    LDY.B LevelLoadPos
    LDX.B #$00
    JSR CODE_0DA6B1                           ; Get Map16 data pointer in $04/$05.
CODE_0DA7C8:
    LDA.B #$03
    STA.B _2
  - LDA.L DATA_0DA7B1,X
    JSR CODE_0DA95B
    INX
    DEC.B _2
    BPL -
    JSR CODE_0DA6BA                           ; Update Map16 pointer and move one row down.
    JSR CODE_0DA97D
    CPX.B #$10
    BNE CODE_0DA7C8
    RTS


DATA_0DA7E3:
    db $66,$67,$68,$69

CODE_0DA7E7:
    LDY.B LevelLoadPos
    LDX.B #$00
    JSR CODE_0DA6B1                           ; Get Map16 data pointer in $04/$05.
  - JSR StzTo6ePointer
    LDA.L DATA_0DA7E3,X
    JSR CODE_0DA95B
    INX
    TXA
    AND.B #$01
    BNE -
    JSR CODE_0DA6BA                           ; Update Map16 pointer and move one row down.
    JSR CODE_0DA97D
    CPX.B #$04
    BNE -
    RTS


DATA_0DA809:
    db $AA,$AF

DATA_0DA80B:
    db $E2,$E4

CODE_0DA80D:
    LDY.B LevelLoadPos
    TXA
    SEC
    SBC.B #$91
    TAX
    JSR Sta1To6ePointer
    LDA.L DATA_0DA809,X
    STA.B [Map16LowPtr],Y
    JSR CODE_0DA82A
    JSR Sta1To6ePointer
    LDA.L DATA_0DA80B,X
    STA.B [Map16LowPtr],Y
    RTS

CODE_0DA82A:
    LDA.B LevelLoadPos
    CLC
    ADC.B #$10
    STA.B LevelLoadPos
    TAY
    BCC +
    LDA.B Map16LowPtr+1
    CLC
    ADC.B #$02
    STA.B Map16LowPtr+1
    STA.B Map16HighPtr+1
  + RTS


DATA_0DA83E:
    db $96,$A0

DATA_0DA840:
    db $9B,$A5

DATA_0DA842:
    db $DE,$E6

DATA_0DA844:
    db $E6,$E0

CODE_0DA846:
    LDY.B LevelLoadPos
    TXA
    SEC
    SBC.B #$93
    TAX
    JSR Sta1To6ePointer
    LDA.L DATA_0DA83E,X
    JSR CODE_0DA95B
    JSR Sta1To6ePointer
    LDA.L DATA_0DA840,X
    STA.B [Map16LowPtr],Y
    JSR CODE_0DA82A
    JSR Sta1To6ePointer
    LDA.L DATA_0DA842,X
    JSR CODE_0DA95B
    JSR Sta1To6ePointer
    LDA.L DATA_0DA844,X
    STA.B [Map16LowPtr],Y
    RTS


DATA_0DA877:
    db $CA,$CC

DATA_0DA879:
    db $CB,$CD

DATA_0DA87B:
    db $F1,$F2

CODE_0DA87D:
    LDY.B LevelLoadPos
    TXA
    SEC
    SBC.B #$95
    TAX
    JSR Sta1To6ePointer
    LDA.L DATA_0DA877,X
    STA.B [Map16LowPtr],Y
    JSR CODE_0DA82A
    JSR Sta1To6ePointer
    LDA.L DATA_0DA879,X
    STA.B [Map16LowPtr],Y
    JSR CODE_0DA82A
    JSR Sta1To6ePointer
    LDA.L DATA_0DA87B,X
    STA.B [Map16LowPtr],Y
    RTS


DATA_0DA8A6:
    db $80,$40,$20,$10,$08,$04,$02,$01
DATA_0DA8AE:
    db $00,$80,$00

DATA_0DA8B1:
    db $00,$00,$01

DATA_0DA8B4:
    db $02,$21,$23,$2A,$2B,$3F,$03,$13
    db $1E,$24,$2E,$2F,$30,$32,$65

CODE_0DA8C3:
; AND table used by various objects.
; Map16 tile numbers (low) for standard objects 01-0E and 31:0.
; Objects 01-07, written on page 0 (0xx).
; Objects 08-0E, written on page 1 (1xx).
; Object 31:0, written on page 1 (1xx).
    LDY.B LevelLoadPos                        ; Object creation routine for standard objects 01-0E. Also for tileset-specific object 31:0.
    LDA.B LvlLoadObjSize
    AND.B #$0F                                ; $00 = width
    STA.B _0                                  ; $02 = width (decrementing)
    STA.B _2
    LDA.B LvlLoadObjSize
    LSR A
    LSR A                                     ; $01 = height
    LSR A
    LSR A
    STA.B _1
    JSR CODE_0DA6B1                           ; Get Map16 data pointer in $04/$05.
CODE_0DA8D8:
    CPX.B #$04                                ; Tile write loop.
    BNE CODE_0DA92E                           ; For object 5 (coins) only:
    TXA                                       ; Check whether the item memory bit is set for this tile.
    PHA                                       ; If so, don't write the coin, and skip to the next.
    TYA
    PHA
    LDX.W ItemMemorySetting
    LDA.B #ItemMemoryTable
    CLC
    ADC.L DATA_0DA8AE,X
    STA.B _8
    LDA.B #ItemMemoryTable>>8
    ADC.L DATA_0DA8B1,X
    STA.B _9
    LDA.W LevelLoadObjectTile
    ASL A
    ASL A
    STA.B _E
    LDA.B _A
    AND.B #$10
    BEQ +
    LDA.B _E
    ORA.B #$02
    STA.B _E
  + TYA
    AND.B #$08
    BEQ +
    LDA.B _E
    ORA.B #$01
    STA.B _E
  + TYA
    AND.B #$07
    TAX
    LDY.B _E
    LDA.B (_8),Y
    AND.L DATA_0DA8A6,X
    STA.B _F
    PLA
    TAY
    PLA
    TAX
    LDA.B _F
    BEQ CODE_0DA92E
    JSR CODE_0DA95D
    JMP CODE_0DA943

CODE_0DA92E:
    LDA.L DATA_0DA8B4,X
    STA.B _C
    JSR StzTo6ePointer
    CPX.B #$07                                ; Write appropriate tile to the Map16 and move pointer right.
    BMI +                                     ; For object 7 and below, write from page 0 (0xx).
    JSR Sta1To6ePointer                       ; For object 8 and above, write from page 1 (1xx).
  + LDA.B _C
    JSR CODE_0DA95B
CODE_0DA943:
    DEC.B _2
    LDA.B _2                                  ; Loop for all tiles in the row.
    BPL CODE_0DA8D8
    JSR CODE_0DA6BA                           ; Update Map16 pointer and move one row down.
    JSR CODE_0DA97D
    LDA.B _0                                  ; Reset counter for width.
    STA.B _2
    DEC.B _1
    BMI +                                     ; Loop for all rows.
    JMP CODE_0DA8D8

  + RTS

CODE_0DA95B:
    STA.B [Map16LowPtr],Y                     ; Routine to place the Map16 tile from A and then...
CODE_0DA95D:
; Move the Map16 pointer one tile right.
    INY                                       ; Move to next tile.
    TYA
    AND.B #$0F                                ; Return if not at horizontal boundary.
    BNE +
    LDA.B Map16LowPtr
    CLC
    ADC.B #$B0
    STA.B Map16LowPtr
    STA.B Map16HighPtr                        ; Move to next horizontal Map16 block.
    LDA.B Map16LowPtr+1
    ADC.B #$01
    STA.B Map16LowPtr+1
    STA.B Map16HighPtr+1
    INC.W LevelLoadObjectTile                 ; Increase screen number.
    LDA.B LevelLoadPos
    AND.B #$F0                                ; Load new index to Y.
    TAY
  + RTS

CODE_0DA97D:
    LDA.B LevelLoadPos                        ; Move the Map16 pointer one tile down.
    CLC                                       ; Move to next row.
    ADC.B #$10
    STA.B LevelLoadPos
    TAY                                       ; Return if not at vertical boundary.
    BCC +
CODE_0DA987:
    LDA.B Map16LowPtr+1
    ADC.B #$00
    STA.B Map16LowPtr+1                       ; Move to next vertical Map16 block.
    STA.B Map16HighPtr+1
    STA.B _5
  + RTS

CODE_0DA992:
    LDA.B LevelLoadPos                        ; Move the Map16 pointer one tile down and left.
    CLC                                       ; Move down and left one tile.
    ADC.B #$0F
    TAY
    BCC +                                     ; If at horizontal boundary, move to next vertical block.
    JSR CODE_0DA987
  + TYA
    AND.B #$0F
    CMP.B #$0F
    BNE CODE_0DA9B1
    TYA                                       ; If at a vertical screen boundary, move to the next row
    CLC                                       ; and then to the previous vertical block or screen if necessary.
    ADC.B #$10
    TAY
    BCC +
    JSR CODE_0DA987
  + JSR CODE_0DA9D6
CODE_0DA9B1:
    STY.B LevelLoadPos
    RTS

CODE_0DA9B4:
    LDA.B LevelLoadPos                        ; Move the Map16 pointer one tile down and right.
    CLC                                       ; Move down and right one tile.
    ADC.B #$11
    TAY
    BCC +                                     ; If at a horizontal boundary, move to next vertical block.
    JSR CODE_0DA987
  + TYA
    AND.B #$0F
    CMP.B #$01
    BPL CODE_0DA9D3
    TYA                                       ; If at a vertical screen boundary, move to the next row
    SEC                                       ; and then to the next vertical block or screen if necessary.
    SBC.B #$10
    TAY
    BCS +
    JSR CODE_0DA987
  + JSR CODE_0DA9EF
CODE_0DA9D3:
    STY.B LevelLoadPos
    RTS

CODE_0DA9D6:
    LDA.B Map16LowPtr                         ; Move the Map16 pointer one screen back.
    SEC
    SBC.B #$B0
    STA.B Map16LowPtr
    STA.B Map16HighPtr
    STA.B _4
    LDA.B Map16LowPtr+1
    SBC.B #$01
    STA.B Map16LowPtr+1
    STA.B Map16HighPtr+1
    STA.B _5
    DEC.W LevelLoadObjectTile
    RTS

CODE_0DA9EF:
    LDA.B Map16LowPtr                         ; Move the Map16 pointer one screen forward.
    CLC
    ADC.B #$B0
    STA.B Map16LowPtr
    STA.B Map16HighPtr
    STA.B _4
    LDA.B Map16LowPtr+1
    ADC.B #$01
    STA.B Map16LowPtr+1
    STA.B Map16HighPtr+1
    STA.B _5
    INC.W LevelLoadObjectTile
    RTS

Sta1To6ePointer:
    LDA.B #$01                                ; Set tile's high Map16 byte to #$01.
    STA.B [Map16HighPtr],Y
    RTS

StzTo6ePointer:
    LDA.B #$00                                ; Set tile's high Map16 byte to #$00.
    STA.B [Map16HighPtr],Y
    RTS


DATA_0DAA12:
    db $33,$37,$39,$00,$00

DATA_0DAA17:
    db $34,$38,$3A,$00,$00

DATA_0DAA1C:
    db $00,$00,$39,$33,$37

DATA_0DAA21:
    db $00,$00,$3A,$34,$38

CODE_0DAA26:
; Tiles for the left side of the top of the vertical pipes.
; Top, top-exit, double-ended, unused, unused
; Tiles for the right side of the top of the vertical pipes.
; Top, top-exit, double-ended, unused, unused
; Tiles for the left side of the bottom of the vertical pipes.
; Unused, unused, double-ended, bottom, bottom-exit
; Tiles for the right side of the bottom of the vertical pipes.
; Unused, unused, double-ended, bottom, bottom-exit
; Vertical pipe types:
; 00 - End on top
; 01 - ...with exit enabled
; 02 - Double-ended
; 03 - End on bottom
; 04 - ...with exit enabled
; 05 - No end
    LDY.B LevelLoadPos                        ; Standard object 0F - Vertical pipe
    LDA.B LvlLoadObjSize
    LSR A
    LSR A                                     ; $00 = height
    LSR A
    LSR A
    STA.B _0
    LDA.B LvlLoadObjSize
    AND.B #$0F                                ; X = type
    TAX
    JSR CODE_0DA6B1                           ; Get Map16 data pointer in $04/$05.
    CPX.B #$03                                ; Branch if the pipe doesn't have a top end (03+).
    BPL CODE_0DAA52
    JSR Sta1To6ePointer
    LDA.L DATA_0DAA12,X
    JSR CODE_0DA95B                           ; Write the top of the pipe.
    JSR Sta1To6ePointer
    LDA.L DATA_0DAA17,X
    STA.B [Map16LowPtr],Y
    JMP CODE_0DAA77

CODE_0DAA52:
; Tile loop for the middle of the vertical pipe.
    CPX.B #$05                                ; Branch if the pipe is not the no-ended one (which uses different tiles for some reason).
    BNE CODE_0DAA68
    JSR Sta1To6ePointer
    LDA.B #$68                                ; Left tile for the no-ended vertical pipe (168).
    JSR CODE_0DA95B
    JSR Sta1To6ePointer
    LDA.B #$69                                ; Right tile for the no-ended vertical pipe (169).
    STA.B [Map16LowPtr],Y
    JMP CODE_0DAA77

CODE_0DAA68:
    JSR Sta1To6ePointer                       ; Not the no-ended vertical pipe.
    LDA.B #$35                                ; Left tile for the middle of the vertical pipe (135).
    JSR CODE_0DA95B
    JSR Sta1To6ePointer
    LDA.B #$36                                ; Right tile for the middle of the vertical pipe (136).
    STA.B [Map16LowPtr],Y
CODE_0DAA77:
    JSR CODE_0DA6BA                           ; Update Map16 pointer and move one row down.
    JSR CODE_0DA97D
    CPX.B #$05
    BEQ CODE_0DAA85                           ; Branch if the tile has a bottom end (02-04).
    CPX.B #$02
    BPL CODE_0DAA8C
CODE_0DAA85:
    DEC.B _0
    BPL CODE_0DAA52                           ; Loop for all rows, and return if at the end.
    JMP Return0DAAA3

CODE_0DAA8C:
; Pipe has a bottom end.
    DEC.B _0                                  ; Loop back if not at the last row yet.
    BNE CODE_0DAA68
    JSR Sta1To6ePointer
    LDA.L DATA_0DAA1C,X
    JSR CODE_0DA95B                           ; Write the bottom of the pipe.
    JSR Sta1To6ePointer
    LDA.L DATA_0DAA21,X
    STA.B [Map16LowPtr],Y
Return0DAAA3:
    RTS


DATA_0DAAA4:
    db $3B,$3C,$3B,$3F,$3B,$3C,$3B,$3F
DATA_0DAAAC:
    db $3D,$3E,$3D,$3E,$3D,$3E,$3D,$3E

CODE_0DAAB4:
; Tiles for the ends of the horizontal pipes. Two tiles (top, bottom) per type.
; Left, left-exit
; Right, right-exit
; Tiles for the middle of the horizontal pipes. Two tiles (top, bottom) per type.
; Left, left-exit
; Right, right-exit
; Horizontal pipe types:
; 00 - End on left
; 01 - ...with exit enabled
; 02 - End on right
; 03 - ...with exit enabled
    LDY.B LevelLoadPos                        ; Standard object 10: Horizontal pipe
    LDA.B LvlLoadObjSize
    AND.B #$0F                                ; $00 = width
    STA.B _0                                  ; $01 = width (decrementing)
    STA.B _1
    LDA.B LvlLoadObjSize
    AND.B #$F0
    LSR A                                     ; X = type, x2.
    LSR A
    LSR A
    TAX
    JSR CODE_0DA6B1                           ; Get Map16 data pointer in $04/$05.
CODE_0DAAC9:
    CPX.B #$04                                ; Tile loop.
    BPL CODE_0DAADA
    JSR Sta1To6ePointer                       ; If type is 0/1 (end on left),
    LDA.L DATA_0DAAA4,X                       ; write the left end of the pipe.
    JSR CODE_0DA95B
    JMP CODE_0DAAE4

CODE_0DAADA:
    JSR Sta1To6ePointer
    LDA.L DATA_0DAAAC,X                       ; Else, write the middle of the pipe.
    JSR CODE_0DA95B
CODE_0DAAE4:
    CPX.B #$04
    BPL CODE_0DAAEF
    DEC.B _1
    BPL CODE_0DAADA                           ; Loop for all of the middle tiles.
    JMP CODE_0DAAFC                           ; If type is 2/3 (end on right), end one tile early to...

CODE_0DAAEF:
    DEC.B _1
    BNE CODE_0DAAC9
    JSR Sta1To6ePointer
    LDA.L DATA_0DAAA4,X                       ; ...write the right end of the pipe.
    STA.B [Map16LowPtr],Y
CODE_0DAAFC:
    LDA.B _0
    STA.B _1
    JSR CODE_0DA6BA                           ; Update Map16 pointer and move one row down.
    JSR CODE_0DA97D
    INX
    TXA                                       ; Loop for the second row of the pipe.
    AND.B #$01
    BNE CODE_0DAAC9
    RTS

CODE_0DAB0D:
    LDY.B LevelLoadPos                        ; Standard object 11: Bullet bill shooter
    LDA.B LvlLoadObjSize
    LSR A
    LSR A                                     ; X = height
    LSR A
    LSR A
    TAX
    JSR Sta1To6ePointer
    LDA.B #$41                                ; Tile for the top of the bullet bill shooter (141).
    STA.B [Map16LowPtr],Y
    JSR CODE_0DA97D
    DEX                                       ; Move one tile down, and return if at the end of the object.
    BMI Return0DAB3D
    JSR Sta1To6ePointer
    LDA.B #$42                                ; Second tile for the top of the bullet bill shooter (142).
    STA.B [Map16LowPtr],Y
    JSR CODE_0DA97D
    DEX                                       ; Move one tile down, and return if at the end of the object.
    BMI Return0DAB3D
  - JSR Sta1To6ePointer
    LDA.B #$43                                ; Tile for the shaft fo the bullet bill shooter (143).
    STA.B [Map16LowPtr],Y
    JSR CODE_0DA97D                           ; Loop for all the tiles of the shaft.
    DEX
    BPL -
Return0DAB3D:
    RTS

CODE_0DAB3E:
    LDA.B LvlLoadObjSize                      ; Standard object 12 - Slope
    AND.B #$0F
CODE_0DAB42:
    CMP.B #$0A                                ; If the lower nibble of the settings byte is more than 10, subtract 10.
    BMI +                                     ; ...As far as I know, this should never happen, but hey, you do you Nintendo.
    SEC
    SBC.B #$0A
    JMP CODE_0DAB42

  + JSL ExecutePtrLong

    dl CODE_0DAB6E
    dl CODE_0DAC21
    dl CODE_0DAC92
    dl CODE_0DAD44
    dl CODE_0DADA3
    dl CODE_0DADEB
    dl CODE_0DAE6D
    dl CODE_0DAEFC
    dl CODE_0DAF61
    dl CODE_0DAFEA

CODE_0DAB6E:
; 00 - Normal left
; 01 - Steep left
; 02 - Gradual left
; 03 - Normal right
; 04 - Steep right
; 05 - Gradual right
; 06 - Normal left (upside down)
; 07 - Normal right (upside down)
; 08 - Steep left (upside down)
; 09 - Steep right (upside down)
    LDY.B LevelLoadPos                        ; Slope 00 - Normal left
    LDA.B #$01                                ; $02 = width of current row (starts at 2 tiles).
    STA.B _2
    STA.B _0
    JSR CODE_0DA6B1                           ; Get Map16 data pointer in $04/$05.
    LDA.B LvlLoadObjSize
    LSR A
    LSR A
    LSR A                                     ; $00 = height (+1)
    LSR A
    STA.B _0
    INC.B _0
CODE_0DAB83:
    LDX.B _2
    JSR Sta1To6ePointer
    LDA.B #$96                                ; Top tile A (196).
    JSR CODE_0DABFD
    JSR Sta1To6ePointer
    LDA.B #$9B                                ; Top tile B (19B).
    JSR CODE_0DABFD
    DEX
    DEX                                       ; Branch if at the end of this row.
    BMI CODE_0DABB8
CODE_0DAB99:
    JSR Sta1To6ePointer
    LDA.B #$DE                                ; Corner tile A (1DE).
    JSR CODE_0DA95B
    JSR Sta1To6ePointer
    LDA.B #$E6                                ; Corner tile B (1E6).
    JSR CODE_0DA95B
    DEX
    JMP CODE_0DABB5

  - JSR StzTo6ePointer                        ; Dirt loop.
    LDA.B #$3F                                ; Dirt tile to fill the rest of the slope with (03F).
    JSR CODE_0DA95B
CODE_0DABB5:
    DEX                                       ; Fill the remaining tiles in the row with dirt.
    BPL -
CODE_0DABB8:
; At end of row.
    JSR CODE_0DA6BA                           ; Update Map16 pointer.
    INC.B _2                                  ; Increase width for next row.
    INC.B _2
    DEC.B _0                                  ; Branch if at the last row.
    BEQ CODE_0DABEC
    BPL +                                     ; Return if done with the last row.
    JMP Return0DABF6

  + LDA.B LevelLoadPos                        ; Not at the last row of the slope yet.
    CLC
    ADC.B #$0E
    TAY
    BCC +
    JSR CODE_0DA987
  + TYA
    AND.B #$0F
    CMP.B #$0E                                ; Move one row down and two tiles left.
    BMI CODE_0DABE7
    TYA
    CLC
    ADC.B #$10
    TAY
    BCC +
    JSR CODE_0DA987
  + JSR CODE_0DA9D6
CODE_0DABE7:
    STY.B LevelLoadPos                        ; Continue to next row of the slope.
    JMP CODE_0DAB83

CODE_0DABEC:
    LDX.B _2                                  ; On the last row.
    DEX                                       ; Undo the increase in width (so last two rows have the same width).
    DEX
    JSR CODE_0DA97D                           ; Draw the next row, starting with the corner tile (skip the top of the slope).
    JMP CODE_0DAB99

Return0DABF6:
    RTS


DATA_0DABF7:
    db $3F,$01,$03

DATA_0DABFA:
    db $01,$03,$04

CODE_0DABFD:
; Tiles for which slopes switch to their alternate versions (dirt behind, water behind)
; 3F = dirt, 01 = water top, 03 = water bottom (note high byte isn't specified; any page will work)
; Offsets for the slope tile variations from their base tile.
; Ordered dirt, water top, water bottom
    STA.B _C                                  ; Object subroutine for slopes to handle its alternate versions (dirt/water behind).
    TXA
    PHA
    LDX.B #$02
    LDA.B [Map16LowPtr],Y
CODE_0DAC05:
    CMP.L DATA_0DABF7,X                       ; Check the tile the slope is being placed over, and if it's dirt/water...
    BEQ CODE_0DAC11
    DEX
    BPL CODE_0DAC05
    JMP CODE_0DAC1A

CODE_0DAC11:
    LDA.B _C
    CLC                                       ; ...offset the tile number accordingly.
    ADC.L DATA_0DABFA,X
    STA.B _C
CODE_0DAC1A:
    PLA
    TAX
    LDA.B _C                                  ; Add the tile and move right.
    JMP CODE_0DA95B

CODE_0DAC21:
    LDY.B LevelLoadPos                        ; Slope 02 - Steep left
    LDA.B LvlLoadObjSize
    LSR A
    LSR A
    LSR A                                     ; $00 = height (+1)
    LSR A
    STA.B _0
    INC.B _0
    LDA.B #$00                                ; $02 = width of current row (starts at 1 tile)
    STA.B _2
    JSR CODE_0DA6B1                           ; Get Map16 data pointer in $04/$05.
CODE_0DAC34:
    LDX.B _2                                  ; Tile loop.
    JSR Sta1To6ePointer
    LDA.B #$AA                                ; Top tile (1AA).
    JSR CODE_0DABFD
CODE_0DAC3E:
    DEX                                       ; Branch if at the end of the row (i.e. this was the top row).
    BMI CODE_0DAC57
    JSR Sta1To6ePointer
    LDA.B #$E2                                ; Corner tile (1E2).
    JSR CODE_0DA95B
    JMP CODE_0DAC54

  - JSR StzTo6ePointer                        ; Dirt loop.
    LDA.B #$3F                                ; Dirt tile to fill the rest of the slope with (03F).
    JSR CODE_0DA95B
CODE_0DAC54:
    DEX                                       ; Fill the remainder of the row with dirt.
    BPL -
CODE_0DAC57:
; At end of row.
    JSR CODE_0DA6BA                           ; Update Map16 pointer.
    INC.B _2                                  ; Increase width of next row.
    DEC.B _0                                  ; Branch if at the last row.
    BEQ CODE_0DAC89
    BPL +                                     ; Return if done with the last row.
    JMP Return0DAC91

  + LDA.B LevelLoadPos                        ; Not at last row.
    CLC
    ADC.B #$0F
    TAY
    BCC +
    JSR CODE_0DA987
  + TYA
    AND.B #$0F
    CMP.B #$0F                                ; Move one tile down and left.
    BNE CODE_0DAC84
    TYA
    CLC
    ADC.B #$10
    TAY
    BCC +
    JSR CODE_0DA987
  + JSR CODE_0DA9D6
CODE_0DAC84:
    STY.B LevelLoadPos                        ; Continue to next row of the slope.
    JMP CODE_0DAC34

CODE_0DAC89:
    LDX.B _2                                  ; At last row.
    JSR CODE_0DA97D                           ; Draw the next row, starting with the corner tile (skip the top of the slope).
    JMP CODE_0DAC3E

Return0DAC91:
    RTS

CODE_0DAC92:
    LDY.B LevelLoadPos                        ; Slope 03 - Gradual left
    LDA.B #$03                                ; $02 = width of current row (starts at 4 tiles)
    STA.B _2
    STA.B _0
    JSR CODE_0DA6B1                           ; Get Map16 data pointer in $04/$05.
    LDA.B LvlLoadObjSize
    LSR A
    LSR A
    LSR A                                     ; $00 = height (+1)
    LSR A
    STA.B _0
    INC.B _0
CODE_0DACA7:
    LDX.B _2                                  ; Tile loop.
    JSR Sta1To6ePointer
    LDA.B #$6E                                ; Top tile A (16E).
    JSR CODE_0DABFD
    JSR Sta1To6ePointer
    LDA.B #$73                                ; Top tile B (173).
    JSR CODE_0DABFD
    JSR Sta1To6ePointer
    LDA.B #$78                                ; Top tile C (178).
    JSR CODE_0DABFD
    JSR Sta1To6ePointer
    LDA.B #$7D                                ; Top tile D (17D).
    JSR CODE_0DABFD
    DEX
    DEX
    DEX                                       ; Branch if at end of row (i.e. this was the top row).
    DEX
    BMI CODE_0DAD00
CODE_0DACCF:
    JSR Sta1To6ePointer
    LDA.B #$D8                                ; Corner tile A (1D8).
    JSR CODE_0DA95B
    JSR Sta1To6ePointer
    LDA.B #$DA                                ; Corner tile B (1DA).
    JSR CODE_0DA95B
    JSR Sta1To6ePointer
    LDA.B #$E6                                ; Corner tile C (1E6).
    JSR CODE_0DA95B
    JSR Sta1To6ePointer
    LDA.B #$E6                                ; Corner tile D (1E6).
    JSR CODE_0DA95B
    DEX
    DEX
    DEX
    JMP CODE_0DACFD

  - JSR StzTo6ePointer                        ; Dirt loop.
    LDA.B #$3F                                ; Dirt tile to fill the rest of the slope with (03F).
    JSR CODE_0DA95B
CODE_0DACFD:
    DEX                                       ; Fill the remainder of the row with dirt.
    BPL -
CODE_0DAD00:
; Done with row.
    JSR CODE_0DA6BA                           ; Update Map16 pointer.
    LDA.B _2
    CLC                                       ; Increase width of next row.
    ADC.B #$04
    STA.B _2
    DEC.B _0                                  ; Branch if at the last row.
    BEQ CODE_0DAD37
    BPL +                                     ; Return if done with the last row.
    JMP Return0DAD43

  + LDA.B LevelLoadPos                        ; Not at last row.
    CLC
    ADC.B #$0C
    TAY
    BCC +
    JSR CODE_0DA987
  + TYA
    AND.B #$0F                                ; Move one tile down and four tiles left.
    CMP.B #$0C
    BMI CODE_0DAD32
    TYA
    CLC
    ADC.B #$10
    TAY
    BCC +
    JSR CODE_0DA987
  + JSR CODE_0DA9D6
CODE_0DAD32:
    STY.B LevelLoadPos                        ; Continue to next row of the slope.
    JMP CODE_0DACA7

CODE_0DAD37:
    LDX.B _2                                  ; At last row.
    DEX
    DEX                                       ; Undo the increase in width (so last two rows have the same width).
    DEX
    DEX
    JSR CODE_0DA97D                           ; Draw the next row, starting with the corner tile (skip the top of the slope).
    JMP CODE_0DACCF

Return0DAD43:
    RTS

CODE_0DAD44:
    LDY.B LevelLoadPos                        ; Slope 03 - Normal right
    LDX.B #$01                                ; $02 = width of current row (starts at 2 tiles)
    STX.B _2
    STX.B _0
    JSR CODE_0DA6B1                           ; Get Map16 data pointer in $04/$05.
    LDA.B LvlLoadObjSize
    LSR A
    LSR A
    LSR A                                     ; $00 = height (+1)
    LSR A
    STA.B _0
    INC.B _0
    JMP CODE_0DAD7F

  - JSR StzTo6ePointer                        ; Row loop.
    LDA.B #$3F                                ; Dirt tile to fill the head of the slope with (03F).
    JSR CODE_0DA95B
    DEX                                       ; Fill dirt until 4 tiles from the end of the row.
CODE_0DAD65:
    CPX.B #$03
    BNE -
    JSR Sta1To6ePointer
    LDA.B #$E6                                ; Corner tile A (1E6).
    JSR CODE_0DA95B
    JSR Sta1To6ePointer
    LDA.B #$E0                                ; Corner tile B (1E0).
    JSR CODE_0DA95B
    DEX
    DEX
    LDA.B _0                                  ; Return if at last row.
    BEQ Return0DAD9F
CODE_0DAD7F:
    JSR Sta1To6ePointer                       ; Entry point for the row loop.
    LDA.B #$A0                                ; Top tile A (1A0).
    JSR CODE_0DABFD
    JSR Sta1To6ePointer
    LDA.B #$A5                                ; Top tile B (1A5).
    JSR CODE_0DABFD
    JSR CODE_0DA6BA                           ; Update Map16 pointer and move one row down.
    JSR CODE_0DA97D
    INC.B _2                                  ; Increase width of next row by 2.
    INC.B _2
    LDX.B _2
    DEC.B _0                                  ; Loop for all remaining rows.
    BPL +
Return0DAD9F:
    RTS

  + JMP CODE_0DAD65

CODE_0DADA3:
    LDY.B LevelLoadPos                        ; Slope 04 - Steep right
    LDX.B #$00                                ; $02 = width of current row (starts at 1 tile)
    STX.B _2
    STX.B _0
    JSR CODE_0DA6B1                           ; Get Map16 data pointer in $04/$05.
    LDA.B LvlLoadObjSize
    LSR A
    LSR A
    LSR A                                     ; $00 = height (+1)
    LSR A
    STA.B _0
    INC.B _0
    JMP CODE_0DADD0

  - JSR StzTo6ePointer                        ; Row loop.
    LDA.B #$3F                                ; Dirt tile to fill the head of the slope with (03F).
    JSR CODE_0DA95B
    DEX                                       ; Fill dirt until 2 tiles from the end of the row.
CODE_0DADC4:
    CPX.B #$01
    BNE -
    JSR Sta1To6ePointer
    LDA.B #$E4                                ; Corner tile.
    JSR CODE_0DA95B
CODE_0DADD0:
; Entry point for the row loop.
    LDA.B _0                                  ; Return if at last row.
    BEQ Return0DADEA
    JSR Sta1To6ePointer
    LDA.B #$AF                                ; Top tile.
    JSR CODE_0DABFD
    JSR CODE_0DA6BA                           ; Update Map16 pointer and move one row down.
    JSR CODE_0DA97D
    INC.B _2                                  ; Increase width of next row.
    LDX.B _2
    DEC.B _0                                  ; Loop if not at the last row (slope is only one row tall).
    BPL CODE_0DADC4
Return0DADEA:
    RTS

CODE_0DADEB:
    LDY.B LevelLoadPos                        ; Slope 05 - Gradual right
    LDX.B #$03                                ; $02 = width of current row (starts at 4 tiles)
    STX.B _2
    JSR CODE_0DA6B1                           ; Get Map16 data pointer in $04/$05.
    LDA.B LvlLoadObjSize
    LSR A
    LSR A
    LSR A                                     ; $00 = height (+1)
    LSR A
    STA.B _0
    INC.B _0
    JMP CODE_0DAE36


  - JSR StzTo6ePointer                        ; Row loop.
    LDA.B #$3F                                ; Dirt tile to fill the head of the slope with (03F).
    JSR CODE_0DA95B
    DEX                                       ; Fill dirt until 8 tiles from the end of the row.
CODE_0DAE0A:
    CPX.B #$07
    BNE -
    JSR Sta1To6ePointer
    LDA.B #$E6                                ; Corner tile A (1E6).
    JSR CODE_0DA95B
    JSR Sta1To6ePointer
    LDA.B #$E6                                ; Corner tile B (1E6).
    JSR CODE_0DA95B
    JSR Sta1To6ePointer
    LDA.B #$DB                                ; Corner tile C (1DB).
    JSR CODE_0DA95B
    JSR Sta1To6ePointer
    LDA.B #$DC                                ; Corner tile D (1DC).
    JSR CODE_0DA95B
    DEX
    DEX
    DEX
    DEX
    LDA.B _0                                  ; Return if at the last row.
    BEQ Return0DAE69
CODE_0DAE36:
    JSR Sta1To6ePointer                       ; Entry point for the row loop.
    LDA.B #$82                                ; Top tile A (182).
    JSR CODE_0DABFD
    JSR Sta1To6ePointer
    LDA.B #$87                                ; Top tile B (187).
    JSR CODE_0DABFD
    JSR Sta1To6ePointer
    LDA.B #$8C                                ; Top tile C (18C).
    JSR CODE_0DABFD
    JSR Sta1To6ePointer
    LDA.B #$91                                ; Top tile D (191).
    JSR CODE_0DABFD
    JSR CODE_0DA6BA                           ; Update Map16 pointer and move one row down.
    JSR CODE_0DA97D
    LDA.B _2
    CLC                                       ; Increase width of next row by 4.
    ADC.B #$04
    STA.B _2
    LDX.B _2
    DEC.B _0                                  ; Loop if not at the last row (slope is only one row tall).
    BPL +
Return0DAE69:
    RTS

  + JMP CODE_0DAE0A

CODE_0DAE6D:
    LDY.B LevelLoadPos                        ; Slope 06 - Normal left (upside-down)
    LDA.B LvlLoadObjSize
    LSR A
    LSR A                                     ; $00 = height
    LSR A
    LSR A
    STA.B _0
    ASL A
    STA.B _2                                  ; $02 = width
    DEC.B _2
    LDA.B #$00                                ; $01 = counter for current row
    STA.B _1
    LDX.B _2
    JSR CODE_0DA6B1                           ; Get Map16 data pointer in $04/$05.
    JMP CODE_0DAE9E

CODE_0DAE88:
    LDX.B _2                                  ; Row loop.
    JSR Sta1To6ePointer
    LDA.B #$C6                                ; Corner tile A (1C6).
    JSR CODE_0DA95B
    JSR Sta1To6ePointer
    LDA.B #$C7                                ; Corner tile B (1C7).
    JSR CODE_0DA95B
    DEX
    DEX
    BMI CODE_0DAEBD
CODE_0DAE9E:
    JSR Sta1To6ePointer                       ; Entry point for the row loop.
    LDA.B #$EE                                ; Top tile A (1EE).
    JSR CODE_0DA95B
    JSR Sta1To6ePointer
    LDA.B #$F0                                ; Top tile B (1F0).
    JSR CODE_0DA95B
    DEX
    JMP CODE_0DAEBA

  - JSR Sta1To6ePointer                       ; Dirt loop.
    LDA.B #$65                                ; Dirt tile to fill the end of the slope with (03F).
    JSR CODE_0DA95B
CODE_0DAEBA:
    DEX
    BPL -
CODE_0DAEBD:
; Done with row.
    JSR CODE_0DA6BA                           ; Update Map16 pointer.
    LDA.B _1                                  ; Branch if not on the top row (to increase width of the next row).
    BNE +
    INC.B _1
    JSR CODE_0DA97D                           ; Move row down and don't adjust position.
    JMP CODE_0DAEF2

  + LDA.B _2                                  ; Not at last row.
    SEC                                       ; Decrease width of next row by 2.
    SBC.B #$02
    STA.B _2
    LDA.B LevelLoadPos
    CLC
    ADC.B #$12
    TAY
    BCC +
    JSR CODE_0DA987
  + TYA
    AND.B #$0F                                ; Move one tile down and two tiles right.
    CMP.B #$02
    BPL CODE_0DAEF2
    TYA
    SEC
    SBC.B #$10
    TAY
    BCS +
    JSR CODE_0DA987
  + JSR CODE_0DA9EF
CODE_0DAEF2:
    STY.B LevelLoadPos
    DEC.B _0
    BMI +                                     ; Loop for all rows.
    JMP CODE_0DAE88

  + RTS

CODE_0DAEFC:
    LDY.B LevelLoadPos                        ; Slope 07 - Normal right (upside-down)
    LDA.B LvlLoadObjSize
    LSR A
    LSR A                                     ; $00 = height
    LSR A
    LSR A
    STA.B _0
    ASL A
    STA.B _2                                  ; $02 = width
    INC.B _2
    LDA.B #$00                                ; $01 = counter for current row
    STA.B _1
    JSR CODE_0DA6B1                           ; Get Map16 data pointer in $04/$05.
    LDX.B _2
    JMP CODE_0DAF20

  - JSR Sta1To6ePointer                       ; Dirt loop
    LDA.B #$65                                ; Dirt tile to fill the head of the slope with (03F).
    JSR CODE_0DA95B
    DEX
CODE_0DAF20:
    CPX.B #$04
    BPL -
    CPX.B #$02
    BMI CODE_0DAF3C                           ; If two tiles from the end of the row, write the corner tiles.
    JSR Sta1To6ePointer
    LDA.B #$F0                                ; Corner tile A (1F0).
    JSR CODE_0DA95B
    JSR Sta1To6ePointer
    LDA.B #$EF                                ; Corner tile B (1EF).
    JSR CODE_0DA95B
    LDA.B _1
    BEQ +                                     ; If not at the end of the top row, write the slope tiles.
CODE_0DAF3C:
    JSR Sta1To6ePointer
    LDA.B #$C8                                ; Top tile A (1C8).
    JSR CODE_0DA95B
    JSR Sta1To6ePointer
    LDA.B #$C9                                ; Top tile B (1C9).
    JSR CODE_0DA95B
  + JSR CODE_0DA6BA                           ; Update Map16 pointer.
    LDA.B _2
    SEC                                       ; Decrease width of next row by 2.
    SBC.B #$02
    STA.B _2
    TAX
    INC.B _1
    JSR CODE_0DA97D
    DEC.B _0                                  ; Loop for all rows.
    BPL CODE_0DAF20
    RTS

CODE_0DAF61:
    LDY.B LevelLoadPos                        ; Slope 08 - Steep left (upside-down)
    LDA.B LvlLoadObjSize
    LSR A
    LSR A                                     ; $00 = height
    LSR A
    LSR A
    STA.B _0
    STA.B _2                                  ; $02 = width
    DEC.B _2
    LDA.B #$00                                ; $01 = counter for current row
    STA.B _1
    LDX.B _2
    JSR CODE_0DA6B1                           ; Get Map16 data pointer in $04/$05.
    JMP CODE_0DAF88

CODE_0DAF7B:
    LDX.B _2                                  ; Row loop.
    JSR Sta1To6ePointer
    LDA.B #$C4                                ; Top tile (1C4).
    JSR CODE_0DA95B
    DEX                                       ; If on the last row, skip writing the corner tile and dirt.
    BMI CODE_0DAF9E
CODE_0DAF88:
    JSR Sta1To6ePointer                       ; Entry point for the loop.
    LDA.B #$EC                                ; Write tile 1EC (corner).
    JSR CODE_0DA95B
    JMP CODE_0DAF9B

  - JSR Sta1To6ePointer                       ; Dirt loop.
    LDA.B #$65                                ; Dirt tile to fill the end of the slope with (165).
    JSR CODE_0DA95B
CODE_0DAF9B:
    DEX
    BPL -
CODE_0DAF9E:
    JSR CODE_0DA6BA                           ; Update Map16 pointer.
    LDA.B _1                                  ; Branch if not on the first row (need to adjust starting position).
    BNE +
    INC.B _1
    LDX.B _2                                  ; Else if on the top row, just move to the next row.
    JSR CODE_0DA97D
    JMP CODE_0DAFD5

  + LDA.B _2                                  ; Not on the top row.
    SEC                                       ; Decrease width of next row.
    SBC.B #$01
    STA.B _2
    LDA.B LevelLoadPos
    CLC
    ADC.B #$11
    TAY
    BCC +
    JSR CODE_0DA987
  + TYA
    AND.B #$0F
    CMP.B #$01
    BPL CODE_0DAFD5                           ; Move down one tile, and right one tile.
    TYA
    SEC
    SBC.B #$10
    TAY
    BCS +
    JSR CODE_0DAFDF
  + JSR CODE_0DA9EF
CODE_0DAFD5:
    STY.B LevelLoadPos
    DEC.B _0
    BMI +                                     ; Loop for all rows.
    JMP CODE_0DAF7B

  + RTS

CODE_0DAFDF:
    LDA.B Map16LowPtr+1                       ; Subroutine to move to the previous Map16 block.
    SBC.B #$00
    STA.B Map16LowPtr+1
    STA.B Map16HighPtr+1
    STA.B _5
    RTS

CODE_0DAFEA:
    LDY.B LevelLoadPos                        ; Slope 09 - Steep right (upside-down)
    LDA.B LvlLoadObjSize
    LSR A
    LSR A                                     ; $00 = height of slope
    LSR A                                     ; $02 = width of slope
    LSR A
    STA.B _0
    STA.B _2
    LDA.B #$00                                ; $01 = counter for current row
    STA.B _1
    JSR CODE_0DA6B1                           ; Get Map16 data pointer in $04/$05.
    LDX.B _2
    JMP CODE_0DB00B

  - JSR Sta1To6ePointer                       ; Row loop.
    LDA.B #$65                                ; Dirt tile to fill the head of the slope with (165).
    JSR CODE_0DA95B
    DEX
CODE_0DB00B:
    CPX.B #$02
    BPL -
    CPX.B #$01
    BMI CODE_0DB01F                           ; If one tile before the end, write the corner tile.
    JSR Sta1To6ePointer
    LDA.B #$ED                                ; Corner tile (1ED)
    JSR CODE_0DA95B
    LDA.B _1
    BEQ +
CODE_0DB01F:
    JSR Sta1To6ePointer                       ; If not at the end of the top row, write the slope tile.
    LDA.B #$C5                                ; Top tile (1C5)
    JSR CODE_0DA95B
  + JSR CODE_0DA6BA                           ; Update Map16 pointer.
    LDX.B _2
    DEX                                       ; Decrease width of next row by 1.
    STX.B _2
    INC.B _1
    JSR CODE_0DA97D                           ; Loop for all rows.
    DEC.B _0
    BPL CODE_0DB00B
    RTS


DATA_0DB039:
    db $40,$41,$06,$45,$4B,$48,$4C,$01
    db $03,$B6,$B7,$45,$4B,$48,$4C

DATA_0DB048:
    db $40,$41,$06,$4B,$4B,$4C,$4C,$40
    db $41,$4B,$4C,$4B,$4B,$4C,$4C

DATA_0DB057:
    db $40,$41,$06,$4B,$4B,$4C,$4C,$40
    db $41,$4B,$4C,$4B,$4B,$4C,$4C

DATA_0DB066:
    db $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
    db $FF,$FF,$FF,$E2,$E2,$E4,$E4

CODE_0DB075:
    LDY.B LevelLoadPos                        ; Standard object 13 - Ledge edge / Vine
    LDA.B LvlLoadObjSize
    LSR A
    LSR A
    LSR A
    LSR A
    STA.B _0
    LDA.B LvlLoadObjSize
    AND.B #$0F
    TAX
    JSR StzTo6ePointer
    CPX.B #$03
    BMI +
    JSR Sta1To6ePointer
  + LDA.L DATA_0DB039,X
    JSR CODE_0DB114
    STA.B [Map16LowPtr],Y
    JSR CODE_0DA97D
    DEC.B _0
    BMI CODE_0DB0E2
    JSR StzTo6ePointer
    CPX.B #$09
    BPL CODE_0DB0AD
    CPX.B #$07
    BPL +
    CPX.B #$03
    BMI +
CODE_0DB0AD:
    JSR Sta1To6ePointer
  + LDA.L DATA_0DB048,X
    JSR CODE_0DB198
    STA.B [Map16LowPtr],Y
    JSR CODE_0DA97D
    DEC.B _0
    BMI CODE_0DB0E2
CODE_0DB0C0:
    JSR StzTo6ePointer
    CPX.B #$09
    BPL CODE_0DB0CF
    CPX.B #$07
    BPL +
    CPX.B #$03
    BMI +
CODE_0DB0CF:
    JSR Sta1To6ePointer
  + LDA.L DATA_0DB057,X
    JSR CODE_0DB198
    STA.B [Map16LowPtr],Y
    JSR CODE_0DA97D
    DEC.B _0
    BPL CODE_0DB0C0
CODE_0DB0E2:
    CPX.B #$0B
    BMI +
    JSR Sta1To6ePointer
    LDA.L DATA_0DB066,X
    STA.B [Map16LowPtr],Y
  + RTS


DATA_0DB0F0:
    db $7D,$7E,$82,$83,$9B,$9C,$A0,$A1
    db $AA,$AB,$AF,$B0,$D8,$DC,$DE,$E0
    db $E2,$E4

DATA_0DB102:
    db $B8,$B9,$BA,$BB,$BC,$BD,$BE,$BF
    db $C0,$C1,$C2,$C3,$D9,$DD,$DF,$E1
    db $E3,$E5

CODE_0DB114:
    CPX.B #$03
    BMI CODE_0DB120
    CPX.B #$09
    BMI CODE_0DB120
    CPX.B #$0B
    BMI Return0DB15B
CODE_0DB120:
    CPX.B #$02
    BEQ Return0DB15B
    STX.B _B
    STA.B _C
    LDX.B #$11
    LDA.B [Map16LowPtr],Y
CODE_0DB12C:
    CMP.L DATA_0DB0F0,X
    BEQ CODE_0DB152
    DEX
    BPL CODE_0DB12C
    CMP.B #$25
    BEQ CODE_0DB14D
    LDA.B _C
    CMP.B #$01
    BEQ CODE_0DB14B
    CMP.B #$03
    BEQ CODE_0DB14B
    CMP.B #$45
    BEQ CODE_0DB14B
    CMP.B #$48
    BNE CODE_0DB14D
CODE_0DB14B:
    INC.B _C
CODE_0DB14D:
    LDA.B _C
    JMP CODE_0DB159

CODE_0DB152:
    JSR Sta1To6ePointer
    LDA.L DATA_0DB102,X
CODE_0DB159:
    LDX.B _B
Return0DB15B:
    RTS


DATA_0DB15C:
    db $6E,$6F,$73,$74,$78,$79,$7D,$7E
    db $82,$83,$87,$88,$8C,$8D,$91,$92
    db $96,$97,$9B,$9C,$A0,$A1,$A5,$A6
    db $AA,$AB,$AF,$B0,$E2,$E4

DATA_0DB17A:
    db $70,$70,$75,$75,$7A,$7A,$7F,$7F
    db $84,$84,$89,$89,$8E,$8E,$93,$93
    db $98,$98,$9D,$9D,$A2,$A2,$A7,$A7
    db $AC,$AC,$B1,$B1,$E9,$EA

CODE_0DB198:
    CPX.B #$03
    BMI CODE_0DB1A4
    CPX.B #$07
    BMI Return0DB1C7
    CPX.B #$09
    BPL Return0DB1C7
CODE_0DB1A4:
    CPX.B #$02
    BEQ Return0DB1C7
    STX.B _B
    STA.B _C
    LDX.B #$1D
    LDA.B [Map16LowPtr],Y
CODE_0DB1B0:
    CMP.L DATA_0DB15C,X
    BEQ CODE_0DB1BE
    DEX
    BPL CODE_0DB1B0
    LDA.B _C
    JMP CODE_0DB1C5

CODE_0DB1BE:
    JSR Sta1To6ePointer
    LDA.L DATA_0DB17A,X
CODE_0DB1C5:
    LDX.B _B
Return0DB1C7:
    RTS

CODE_0DB1C8:
; Standard object 21 - Wide-scale ledge
    LDA.B LvlLoadObjSize                      ; Width = full settings byte
    STA.B _0
    TAX
    LDA.B #$02                                ; Height = 3 tiles
    STA.B _2
    JMP CODE_0DB1E3

CODE_0DB1D4:
    LDA.B LvlLoadObjSize                      ; Standard object 14 - Ledge
    AND.B #$0F                                ; Width = lower nibble of settings byte
    STA.B _0
    TAX
    LDA.B LvlLoadObjSize
    LSR A
    LSR A                                     ; Height = upper nibble of settings byte
    LSR A
    LSR A
    STA.B _2
CODE_0DB1E3:
; Wide-scale ledge shares code beyond here.
    JSR CODE_0DA6B1                           ; Get Map16 data pointer in $04/$05.
    LDY.B LevelLoadPos
  - JSR Sta1To6ePointer
    LDA.B #$00                                ; Write the top row of the ledge (tile 100).
    JSR CODE_0DA95B
    DEX
    CPX.B #$FF
    BNE -
    JMP CODE_0DB205

  - JSR StzTo6ePointer
    LDA.B #$3F
    JSR CODE_0DA95B                           ; Write the next row of the ledge (tile 03F).
    DEX
    CPX.B #$FF
    BNE -
CODE_0DB205:
    JSR CODE_0DA6BA                           ; Update Map16 pointer and move one row down.
    JSR CODE_0DA97D
    LDX.B _0
    DEC.B _2                                  ; Repeat for all remaining rows.
    BPL -
    RTS


DATA_0DB212:
    db $2F,$25,$32

DATA_0DB215:
    db $30,$25,$33

DATA_0DB218:
    db $31,$25,$34

DATA_0DB21B:
    db $39,$25,$3C

DATA_0DB21E:
    db $3A,$25,$3D

DATA_0DB221:
    db $3B,$25,$3E

CODE_0DB224:
    LDY.B LevelLoadPos                        ; Standard object 15 - Midway point
    LDA.B LvlLoadObjSize
    AND.B #$0F
    STA.B _2
    LDA.B LvlLoadObjSize
    LSR A
    LSR A
    LSR A
    LSR A
    STA.B _0
    STA.B _1
    JSR CODE_0DA6B1                           ; Get Map16 data pointer in $04/$05.
    LDX.B #$00
CODE_0DB23B:
    LDA.L DATA_0DB212,X
    STA.B _3
    LDA.B _2
    BEQ +
    LDA.L DATA_0DB21B,X
    STA.B _3
  + JSR StzTo6ePointer
    LDA.B _3
    STA.B [Map16LowPtr],Y
    TYA
    CLC
    ADC.B #$10
    TAY
    BCC +
    LDA.B Map16LowPtr+1
    ADC.B #$00
    STA.B Map16LowPtr+1
    STA.B Map16HighPtr+1
  + DEC.B _1
    BEQ CODE_0DB28F
CODE_0DB265:
    LDA.L DATA_0DB215,X
    STA.B _3
    LDA.B _2
    BEQ +
    LDA.L DATA_0DB21E,X
    STA.B _3
  + JSR StzTo6ePointer
    LDA.B _3
    STA.B [Map16LowPtr],Y
    TYA
    CLC
    ADC.B #$10
    TAY
    BCC +
    LDA.B Map16LowPtr+1
    ADC.B #$00
    STA.B Map16LowPtr+1
    STA.B Map16HighPtr+1
  + DEC.B _1
    BNE CODE_0DB265
CODE_0DB28F:
    LDA.L DATA_0DB218,X
    STA.B _3
    LDA.B _2
    BEQ +
    LDA.L DATA_0DB221,X
    STA.B _3
  + JSR StzTo6ePointer
    LDA.B _3
    STA.B [Map16LowPtr],Y
    JSR CODE_0DA6BA                           ; Update Map16 pointer.
    LDA.B LevelLoadPos
    CLC
    ADC.B #$01
    TAY
    AND.B #$0F
    BNE +
    JSR CODE_0DA9EF
    LDA.B LevelLoadPos
    AND.B #$F0
    TAY
  + STY.B LevelLoadPos
    LDA.B _0
    STA.B _1
    INX
    CPX.B #$03
    BEQ Return0DB2C9
    JMP CODE_0DB23B

Return0DB2C9:
    RTS

CODE_0DB2CA:
    LDA.W TranslevelNo                        ; Extended Object 41 - Yoshi Coin MAIN
    LSR A
    LSR A
    LSR A
    TAY                                       ; Return if five Yoshi Coins have already been collected in the level.
    LDA.W TranslevelNo
    AND.B #$07
    TAX
    LDA.W AllDragonCoinsCollected,Y
    AND.L DATA_0DA8A6,X
    BNE Return0DB2C9
    LDX.W ItemMemorySetting
    LDA.B #ItemMemoryTable
    CLC                                       ; Check whether the item memory bit is set for this tile.
    ADC.L DATA_0DA8AE,X                       ; If so, don't load the coin.
    STA.B _8
    LDA.B #ItemMemoryTable>>8
    ADC.L DATA_0DA8B1,X
    STA.B _9
    LDA.W LevelLoadObjectTile
    ASL A
    ASL A
    STA.B _E
    LDA.B _A
    AND.B #$10
    BEQ +
    LDA.B _E
    ORA.B #$02
    STA.B _E
  + LDY.B LevelLoadPos
    TYA
    AND.B #$08
    BEQ +
    LDA.B _E
    ORA.B #$01
    STA.B _E
  + TYA
    AND.B #$07
    TAX
    LDY.B _E
    LDA.B (_8),Y
    AND.L DATA_0DA8A6,X
    BNE +
    LDY.B LevelLoadPos
    JSR StzTo6ePointer
    LDA.B #$2D                                ; Tile to use for the top tile of the Yoshi coin.
    STA.B [Map16LowPtr],Y
    JSR CODE_0DA97D
    JSR StzTo6ePointer
    LDA.B #$2E                                ; Tile to use for the bottom tile of the Yoshi coin.
    STA.B [Map16LowPtr],Y
  + RTS

ADDR_0DB336:
    LDY.B LevelLoadPos
    LDA.B LvlLoadObjSize
    AND.B #$0F
    STA.B _0
    TAX
    LDA.B LvlLoadObjSize
    LSR A
    LSR A
    LSR A
    LSR A
    STA.B _1
    JSR CODE_0DA6B1                           ; Get Map16 data pointer in $04/$05.
ADDR_0DB34A:
    TYA
    PHA
    TXA
    PHA
    LDX.W ItemMemorySetting
    LDA.B #ItemMemoryTable
    CLC
    ADC.L DATA_0DA8AE,X
    STA.B _8
    LDA.B #ItemMemoryTable>>8
    ADC.L DATA_0DA8B1,X
    STA.B _9
    LDA.W LevelLoadObjectTile
    ASL A
    ASL A
    STA.B _E
    LDA.B _A
    AND.B #$10
    BEQ +
    LDA.B _E
    ORA.B #$02
    STA.B _E
  + TYA
    AND.B #$08
    BEQ +
    LDA.B _E
    ORA.B #$01
    STA.B _E
  + TYA
    AND.B #$07
    TAX
    LDY.B _E
    LDA.B (_8),Y
    AND.L DATA_0DA8A6,X
    STA.B _F
    PLA
    TAX
    PLA
    TAY
    JSR StzTo6ePointer
    LDA.B #$2C
    STA.B _C
    LDA.B _F
    BEQ +
    JSR CODE_0DA987
    JMP ADDR_0DB3A8

  + LDA.B _C
    JSR CODE_0DA95B
ADDR_0DB3A8:
    DEX
    BPL ADDR_0DB34A
    JSR CODE_0DA6BA                           ; Update Map16 pointer and move one row down.
    JSR CODE_0DA97D
    LDX.B _0
    DEC.B _1
    BMI +
    JMP ADDR_0DB34A

  + RTS


DATA_0DB3BB:
    db $05,$06

CODE_0DB3BD:
    LDY.B LevelLoadPos
    LDA.B LvlLoadObjSize
    AND.B #$0F
    STA.B _0
    LDA.B LvlLoadObjSize
    LSR A
    LSR A
    LSR A
    LSR A
    TAX
  - JSR Sta1To6ePointer
    LDA.L DATA_0DB3BB,X
    JSR CODE_0DA95B
    DEC.B _0
    BPL -
    RTS


DATA_0DB3DB:
    db $00,$01,$04,$08

DATA_0DB3DF:
    db $02,$03,$05,$0B

CODE_0DB3E3:
; Low byte of the tile numbers for the top row of objects 18-1B.
; Low byte of the tile numbers for the other rows of objects 18-1B.
    LDY.B LevelLoadPos                        ; Object creation routine for water, lava, and the top of nets.
    LDA.B LvlLoadObjSize
    AND.B #$0F
    STA.B _0
    STA.B _2                                  ; $00 = Object width
    LDA.B LvlLoadObjSize                      ; $01 = Object height
    LSR A                                     ; $02 = Object width mirror
    LSR A
    LSR A
    LSR A
    STA.B _1
    TXA
    SEC                                       ; X is object ID, minus #$18.
    SBC.B #$17
    TAX
    JSR CODE_0DA6B1                           ; Get Map16 data pointer in $04/$05.
  - JSR StzTo6ePointer                        ; Loop for the top row of tiles.
    LDA.L DATA_0DB3DB,X
    JSR CODE_0DA95B                           ; Store Map16 tile, and loop for all tiles in the row.
    DEC.B _2
    BPL -
    JMP CODE_0DB41C

  - JSR StzTo6ePointer                        ; Loop for the other rows.
    LDA.L DATA_0DB3DF,X
    JSR CODE_0DA95B                           ; Store Map16 tile, and loop for all tiles in the row.
    DEC.B _2
    BPL -
CODE_0DB41C:
    JSR CODE_0DA6BA                           ; Update Map16 pointer and move one row down.
    JSR CODE_0DA97D
    LDA.B _0
    STA.B _2                                  ; Loop for all the rows.
    DEC.B _1
    BPL -
    RTS


DATA_0DB42B:
    db $26,$44

CODE_0DB42D:
    LDY.B LevelLoadPos
    LDA.B LvlLoadObjSize
    AND.B #$0F
    STA.B _0
    STA.B _1
    JSR CODE_0DA6B1                           ; Get Map16 data pointer in $04/$05.
    LDX.B #$00
CODE_0DB43C:
    JSR StzTo6ePointer
    CPX.B #$00
    BEQ +
    JSR Sta1To6ePointer
  + LDA.L DATA_0DB42B,X
    JSR CODE_0DA95B
    DEC.B _1
    BPL CODE_0DB43C
    JSR CODE_0DA6BA                           ; Update Map16 pointer and move one row down.
    JSR CODE_0DA97D
    LDA.B _0
    STA.B _1
    INX
    CPX.B #$02
    BNE CODE_0DB43C
    RTS

CODE_0DB461:
    LDY.B LevelLoadPos
    LDA.B LvlLoadObjSize
    LSR A
    LSR A
    LSR A
    LSR A
    STA.B _0
    LDA.B LvlLoadObjSize
    AND.B #$0F
    STA.B _1
    TAX
    JSR CODE_0DA6B1                           ; Get Map16 data pointer in $04/$05.
    LDA.B _0
    BEQ CODE_0DB490
  - JSR StzTo6ePointer
    LDA.B #$0B
    JSR CODE_0DA95B
    DEX
    BPL -
    JSR CODE_0DA6BA                           ; Update Map16 pointer and move one row down.
    JSR CODE_0DA97D
    LDX.B _1
    DEC.B _0
    BNE -
CODE_0DB490:
    JSR StzTo6ePointer
    LDA.B #$0E
    JSR CODE_0DA95B
    DEX
    BPL CODE_0DB490
    RTS


DATA_0DB49C:
    db $0A,$0C

CODE_0DB49E:
    LDY.B LevelLoadPos
    LDA.B LvlLoadObjSize
    LSR A
    LSR A
    LSR A
    LSR A
    STA.B _0
    LDA.B LvlLoadObjSize
    AND.B #$0F
    TAX
    LDA.L DATA_0DB49C,X
    JSR CODE_0DB4D9
    JMP CODE_0DB4C0

CODE_0DB4B7:
    JSR StzTo6ePointer
    LDA.L DATA_0DB49C,X
    STA.B [Map16LowPtr],Y
CODE_0DB4C0:
    TYA
    CLC
    ADC.B #$10
    TAY
    BCC +
    JSR CODE_0DA987
  + DEC.B _0
    BNE CODE_0DB4B7
    LDA.L DATA_0DB49C,X
    JMP CODE_0DB4FE


DATA_0DB4D5:
    db $07,$09

DATA_0DB4D7:
    db $1A,$19

CODE_0DB4D9:
    STA.B _C
    LDA.B [Map16LowPtr],Y
    CMP.B #$08
    BNE +
    LDA.L DATA_0DB4D5,X
    JMP CODE_0DB4F0

  + CMP.B #$0E
    BNE +
    LDA.L DATA_0DB4D7,X
CODE_0DB4F0:
    STA.B _C
  + JSR StzTo6ePointer
    LDA.B _C
    STA.B [Map16LowPtr],Y
    RTS


DATA_0DB4FA:
    db $0D,$0F

DATA_0DB4FC:
    db $1C,$1B

CODE_0DB4FE:
    STA.B _C
    LDA.B [Map16LowPtr],Y
    CMP.B #$0E
    BNE +
    LDA.L DATA_0DB4FA,X
    JMP CODE_0DB515

  + CMP.B #$08
    BNE +
    LDA.L DATA_0DB4FC,X
CODE_0DB515:
    STA.B _C
  + JSR StzTo6ePointer
    LDA.B _C
    STA.B [Map16LowPtr],Y
    RTS

CODE_0DB51F:
    LDY.B LevelLoadPos
    LDA.B LvlLoadObjSize
    AND.B #$F0
    LSR A
    LSR A
    LSR A
    LSR A
    TAX
    JSR Sta1To6ePointer
    LDA.B #$53
    JMP CODE_0DB537

  - JSR Sta1To6ePointer
    LDA.B #$54
CODE_0DB537:
    STA.B [Map16LowPtr],Y
    JSR CODE_0DA97D
    DEX
    BNE -
    JSR Sta1To6ePointer
    LDA.B #$55
    STA.B [Map16LowPtr],Y
    RTS

CODE_0DB547:
    LDY.B LevelLoadPos
    LDA.B LvlLoadObjSize
    AND.B #$0F
    TAX
    JSR Sta1To6ePointer
    LDA.B #$56
    JMP CODE_0DB55B

  - JSR Sta1To6ePointer
    LDA.B #$57
CODE_0DB55B:
    JSR CODE_0DA95B
    DEX
    BNE -
    JSR Sta1To6ePointer
    LDA.B #$58
    STA.B [Map16LowPtr],Y
    RTS


DATA_0DB569:
    db $91,$92,$96,$97,$9A,$9B,$9F,$A0

ADDR_0DB571:
    LDY.B LevelLoadPos
    LDA.B LvlLoadObjSize
    SEC
    SBC.B #$68
    TAX
    JSR StzTo6ePointer
    LDA.L DATA_0DB569,X
    STA.B [Map16LowPtr],Y
    RTS

CODE_0DB583:
    LDX.B #$01                                ; Extended object 8E - Yellow switch palace block
    BNE +                                     ; Equivalent to a BRA.

DATA_0DB587:
    db $6A,$6B

DATA_0DB589:
    db $6A,$6B

CODE_0DB58B:
; Map16 tile to generate for the green/yellow blocks when the switch is on (high byte = 01).
; Map16 tile to generate for the green/yellow blocks when the switch is off (high byte = 00).
    LDX.B #$00                                ; Extended object 87 - Green switch palace block
  + LDY.B LevelLoadPos                        ; Yellow switch block joins here with X = 1.
    LDA.W SwitchBlockFlags,X                  ; Branch if the corresponding switch palace has been activated.
    BNE +
    JSR StzTo6ePointer
    LDA.L DATA_0DB589,X                       ; Generate the outline tile.
    STA.B [Map16LowPtr],Y
    RTS

  + JSR Sta1To6ePointer                       ; Switch palace has been hit.
    LDA.L DATA_0DB587,X                       ; Generate the solid tile.
    STA.B [Map16LowPtr],Y
    RTS


DATA_0DB5A8:
    db $73,$7A,$85,$88,$C3

DATA_0DB5AD:
    db $74,$7B,$86,$89,$C3

DATA_0DB5B2:
    db $79,$80,$87,$8E,$C3

CODE_0DB5B7:
    LDY.B LevelLoadPos
    LDA.B LvlLoadObjSize
    AND.B #$0F
    STA.B _0
    LDA.B LvlLoadObjSize
    LSR A
    LSR A
    LSR A
    LSR A
    TAX
    JSR StzTo6ePointer
    LDA.L DATA_0DB5A8,X
    JMP CODE_0DB5D7

  - JSR StzTo6ePointer
    LDA.L DATA_0DB5AD,X
CODE_0DB5D7:
    JSR CODE_0DA95B
    DEC.B _0
    BNE -
    JSR StzTo6ePointer
    LDA.L DATA_0DB5B2,X
    STA.B [Map16LowPtr],Y
    RTS


DATA_0DB5E8:
    db $07

DATA_0DB5E9:
    db $0A

DATA_0DB5EA:
    db $0A,$08,$0A,$0A,$09,$81,$82,$83
    db $81,$82,$83,$81,$81,$25,$84,$81
    db $25,$84,$81,$81,$25,$84,$81,$25
    db $84,$81

CODE_0DB604:
    LDA.B LvlLoadObjSize
    AND.B #$0F
    STA.B _0
    LDA.B #$03
    STA.B _3
    LDX.B #$00
    JSR CODE_0DA6B1                           ; Get Map16 data pointer in $04/$05.
    LDY.B LevelLoadPos
    LDA.B _0
    STA.B _2
    LDA.B #$02
    STA.B _1
  - JSR Sta1To6ePointer
    LDA.L DATA_0DB5E8,X
    JSR CODE_0DA95B
    INX
    DEC.B _1
    BPL -
    DEC.B _2
    BEQ CODE_0DB652
  - JSR Sta1To6ePointer
    LDA.L DATA_0DB5E8,X
    JSR CODE_0DA95B
    JSR Sta1To6ePointer
    LDA.L DATA_0DB5E9,X
    JSR CODE_0DA95B
    JSR Sta1To6ePointer
    LDA.L DATA_0DB5EA,X
    JSR CODE_0DA95B
    DEC.B _2
    BNE -
CODE_0DB652:
    TXA
    CLC
    ADC.B #$03
    TAX
    JSR Sta1To6ePointer
    LDA.L DATA_0DB5E8,X
    JSR CODE_0DA95B
    JMP CODE_0DB6B2

CODE_0DB664:
    LDY.B LevelLoadPos
    LDA.B _0
    STA.B _2
    LDA.B #$02
    STA.B _1
  - JSR StzTo6ePointer
    LDA.L DATA_0DB5E8,X
    JSR CODE_0DA95B
    INX
    DEC.B _1
    BPL -
    DEC.B _2
    BEQ CODE_0DB6A3
  - JSR StzTo6ePointer
    LDA.L DATA_0DB5E8,X
    JSR CODE_0DA95B
    JSR StzTo6ePointer
    LDA.L DATA_0DB5E9,X
    JSR CODE_0DA95B
    JSR StzTo6ePointer
    LDA.L DATA_0DB5EA,X
    JSR CODE_0DA95B
    DEC.B _2
    BNE -
CODE_0DB6A3:
    TXA
    CLC
    ADC.B #$03
    TAX
    JSR StzTo6ePointer
    LDA.L DATA_0DB5E8,X
    JSR CODE_0DA95B
CODE_0DB6B2:
    INX
    JSR CODE_0DA6BA                           ; Update Map16 pointer and move one row down.
    JSR CODE_0DA97D
    DEC.B _3
    BMI +
    JMP CODE_0DB664

  + RTS


DATA_0DB6C1:
    db $93,$9C

CODE_0DB6C3:
    LDY.B LevelLoadPos
    LDA.B LvlLoadObjSize
    AND.B #$0F
    STA.B _0
    LDA.B LvlLoadObjSize
    LSR A
    LSR A
    LSR A
    LSR A
    TAX
  - JSR StzTo6ePointer
    LDA.L DATA_0DB6C1,X
    JSR CODE_0DA95B
    DEC.B _0
    BPL -
    RTS


DATA_0DB6E1:
    db $C1,$C2

CODE_0DB6E3:
    LDY.B LevelLoadPos
    LDA.B LvlLoadObjSize
    SEC
    SBC.B #$88
    TAX
    JSR StzTo6ePointer
    LDA.L DATA_0DB6E1,X
    STA.B [Map16LowPtr],Y
    RTS


DATA_0DB6F5:
    db $94,$8F,$9D,$98,$95,$90,$9E,$99
DATA_0DB6FD:
    db $8F,$8F,$98,$98,$90,$90,$99,$99

ADDR_0DB705:
    LDY.B LevelLoadPos
    LDA.B LvlLoadObjSize
    LSR A
    LSR A
    LSR A
    LSR A
    STA.B _0
    LDA.B LvlLoadObjSize
    AND.B #$0F
    TAX
    JSR StzTo6ePointer
    LDA.L DATA_0DB6F5,X
    JMP ADDR_0DB725

  - JSR StzTo6ePointer
    LDA.L DATA_0DB6FD,X
ADDR_0DB725:
    STA.B [Map16LowPtr],Y
    JSR CODE_0DA97D
    DEC.B _0
    BPL -
    RTS


DATA_0DB72F:
    db $C4,$C5,$C7,$EC,$ED,$C6,$C7,$EE
    db $59,$5A,$EF,$C7,$EE,$59,$5B,$5C

CODE_0DB73F:
    LDY.B LevelLoadPos
    LDA.B LvlLoadObjSize
    LSR A
    LSR A
    LSR A
    LSR A
    STA.B _0
    LDA.B #$01
    STA.B _1
    LDX.B #$00
    JSR CODE_0DA6B1                           ; Get Map16 data pointer in $04/$05.
CODE_0DB752:
    LDA.B _1
    STA.B _2
  - JSR Sta1To6ePointer
    LDA.L DATA_0DB72F,X
    JSR CODE_0DA95B
    INX
    DEC.B _2
    BPL -
    JSR CODE_0DA6BA                           ; Update Map16 pointer and move one row down and left.
    JSR CODE_0DA992
    INC.B _1
    INC.B _1
    DEC.B _0
    BMI CODE_0DB79F
    CPX.B #$06
    BNE CODE_0DB752
    DEC.B _1
CODE_0DB779:
    LDA.B _1
    STA.B _2
  - JSR Sta1To6ePointer
    LDA.L DATA_0DB72F,X
    JSR CODE_0DA95B
    INX
    DEC.B _2
    BPL -
    JSR CODE_0DA6BA                           ; Update Map16 pointer and move one row down and left.
    JSR CODE_0DA992
    CPX.B #$10
    BNE +
    TXA
    SEC
    SBC.B #$05
    TAX
  + DEC.B _0
    BPL CODE_0DB779
CODE_0DB79F:
    JSR CODE_0DA95D
    JSR Sta1To6ePointer
    LDA.B #$EB
    STA.B [Map16LowPtr],Y
    RTS

CODE_0DB7AA:
    LDY.B LevelLoadPos
    LDA.B LvlLoadObjSize
    AND.B #$0F
    STA.B _0
    STA.B _2
    LDA.B LvlLoadObjSize
    LSR A
    LSR A
    LSR A
    LSR A
    STA.B _3
    LDX.B #$01
    STX.B _1
    JSR CODE_0DA6B1                           ; Get Map16 data pointer in $04/$05.
    JSR Sta1To6ePointer
    LDA.B #$AA
    JSR CODE_0DABFD
    %LorW(LDA,StzTo6ePointer)                 ; wut
    LDA.B #$A1
    JSR CODE_0DB84E
    JMP CODE_0DB7FD

CODE_0DB7D6:
    JSR Sta1To6ePointer
    LDA.B #$AA
    JSR CODE_0DABFD
    DEX
    JSR Sta1To6ePointer
    LDA.B #$E2
    JSR CODE_0DA95B
    JMP CODE_0DB7F2

  - JSR StzTo6ePointer
    LDA.B #$3F
    JSR CODE_0DA95B
CODE_0DB7F2:
    DEX
    BNE -
    JSR StzTo6ePointer
    LDA.B #$A6
    JSR CODE_0DB84E
CODE_0DB7FD:
    JSR CODE_0DA6BA                           ; Update Map16 pointer and move one row down and left.
    JSR CODE_0DA992
    INC.B _1
    INC.B _1
    LDX.B _1
    DEC.B _2
    BPL CODE_0DB7D6
    JSR CODE_0DA95D
    STY.B LevelLoadPos
    JSR CODE_0DA6B1                           ; Get Map16 data pointer in $04/$05.
    DEX
    STX.B _1
    JSR Sta1To6ePointer
    LDA.B #$F7
    JSR CODE_0DABFD
    JMP CODE_0DB836

CODE_0DB823:
    JSR StzTo6ePointer
    LDA.B #$A3
    JSR CODE_0DB84E
    JMP CODE_0DB836

  - JSR StzTo6ePointer
    LDA.B #$3F
    JSR CODE_0DA95B
CODE_0DB836:
    DEX
    BNE -
    JSR StzTo6ePointer
    LDA.B #$A6
    JSR CODE_0DB84E
    JSR CODE_0DA6BA                           ; Update Map16 pointer and move one row down and right.
    JSR CODE_0DA9B4
    LDX.B _1
    DEC.B _3
    BPL CODE_0DB823
    RTS

CODE_0DB84E:
    STA.B _F
    LDA.B [Map16LowPtr],Y
    CMP.B #$25
    BEQ CODE_0DB85E
    CMP.B #$3F
    BEQ +
    INC.B _F
  + INC.B _F
CODE_0DB85E:
    LDA.B _F
    JMP CODE_0DA95B

CODE_0DB863:
    LDY.B LevelLoadPos
    LDA.B LvlLoadObjSize
    AND.B #$0F
    STA.B _0
    STA.B _2
    LDA.B LvlLoadObjSize
    LSR A
    LSR A
    LSR A
    LSR A
    STA.B _3
    LDX.B #$01
    STX.B _1
    JSR CODE_0DA6B1                           ; Get Map16 data pointer in $04/$05.
    %LorW(LDA,StzTo6ePointer)
    LDA.B #$AF
    JSR CODE_0DB84E
    JSR Sta1To6ePointer
    LDA.B #$AF
    JSR CODE_0DABFD
    JMP CODE_0DB8B7

CODE_0DB88F:
    JSR StzTo6ePointer
    LDA.B #$A9
    JSR CODE_0DB84E
    JMP CODE_0DB8A2

  - JSR StzTo6ePointer
    LDA.B #$3F
    JSR CODE_0DA95B
CODE_0DB8A2:
    DEX
    CPX.B #$01
    BNE -
    JSR Sta1To6ePointer
    LDA.B #$E4
    JSR CODE_0DA95B
    JSR Sta1To6ePointer
    LDA.B #$AF
    JSR CODE_0DABFD
CODE_0DB8B7:
    JSR CODE_0DA6BA                           ; Update Map16 pointer and move one row down and left.
    JSR CODE_0DA992
    INC.B _1
    INC.B _1
    LDX.B _1
    DEC.B _2
    BPL CODE_0DB88F
    DEX
    STX.B _1
    JSR StzTo6ePointer
    LDA.B #$A9
    JSR CODE_0DB84E
    JMP CODE_0DB8DD

  - JSR StzTo6ePointer
    LDA.B #$3F
    JSR CODE_0DA95B
CODE_0DB8DD:
    DEX
    BNE -
    JSR Sta1To6ePointer
    LDA.B #$F9
    JSR CODE_0DB84E
    JMP CODE_0DB909

CODE_0DB8EB:
    JSR StzTo6ePointer
    LDA.B #$A9
    JSR CODE_0DB84E
    JMP CODE_0DB8FE

  - JSR StzTo6ePointer
    LDA.B #$3F
    JSR CODE_0DA95B
CODE_0DB8FE:
    DEX
    BNE -
    JSR StzTo6ePointer
    LDA.B #$AC
    JSR CODE_0DB84E
CODE_0DB909:
    JSR CODE_0DA6BA                           ; Update Map16 pointer and move one row down and left.
    JSR CODE_0DA992
    LDX.B _1
    DEC.B _3
    BPL CODE_0DB8EB
    RTS

CODE_0DB916:
    LDX.B #$00                                ; Tileset-specific object 32/33/34/39 - Blue switch blocks
    BEQ +                                     ; Equivalent to a BRA.

DATA_0DB91A:
    db $6C,$6D

DATA_0DB91C:
    db $6C,$6D

CODE_0DB91E:
; Map16 tile numbers for the blue/red switch blocks when the switch is off (high byte = 00)
; Map16 tile numbers for the blue/red switch blocks when the switch is on (high byte = 01)
    LDX.B #$01                                ; Tileset-specific object 34/35/38/3A - Red switch blocks
  + LDY.B LevelLoadPos                        ; Blue switch blocks join here with X = 0.
    LDA.B LvlLoadObjSize
    AND.B #$0F                                ; $00 = object width
    STA.B _0
    LDA.B LvlLoadObjSize
    LSR A
    LSR A                                     ; $01 = object height
    LSR A
    LSR A
    STA.B _1
CODE_0DB930:
    LDA.B _0
    STA.B _2
    JSR CODE_0DA6B1                           ; Get Map16 data pointer in $04/$05.
CODE_0DB937:
    JSR StzTo6ePointer
    LDA.L DATA_0DB91A,X
    STA.B _F
    LDA.W SwitchBlockFlags+2,X                ; Generate a tile corresponding to whether the respective switch palace is hit.
    BEQ +
    JSR Sta1To6ePointer
    LDA.L DATA_0DB91C,X
    STA.B _F
  + LDA.B _F
    JSR CODE_0DA95B                           ; Loop for the rest of the horizontal width of tiles.
    DEC.B _2
    BPL CODE_0DB937
    JSR CODE_0DA6BA                           ; Update Map16 pointer and move one row down.
    JSR CODE_0DA97D
    DEC.B _1                                  ; Loop for the rest of the vertical height of tiles.
    BPL CODE_0DB930
    RTS


DATA_0DB962:
    db $BD,$BF

DATA_0DB964:
    db $BE,$C0

CODE_0DB966:
    LDY.B LevelLoadPos                        ; Tileset-specific object 37 - Small tree trunk
    LDA.B LvlLoadObjSize
    AND.B #$0F
    TAX
    LDA.B LvlLoadObjSize
    LSR A
    LSR A
    LSR A
    LSR A
    STA.B _0
CODE_0DB975:
    JSR StzTo6ePointer
    LDA.L DATA_0DB962,X
    JSR CODE_0DB997
    JSR CODE_0DA97D
    DEC.B _0
    BMI Return0DB996
    JSR StzTo6ePointer
    LDA.L DATA_0DB964,X
    STA.B [Map16LowPtr],Y
    JSR CODE_0DA97D
    DEC.B _0
    BPL CODE_0DB975
Return0DB996:
    RTS

CODE_0DB997:
    STA.B _F
    CPX.B #$01
    BNE CODE_0DB9AE
    LDA.B [Map16LowPtr],Y
    CMP.B #$B1
    BEQ CODE_0DB9A7
    CMP.B #$B6
    BNE CODE_0DB9BB
CODE_0DB9A7:
    STA.B _F
    INC.B _F
    JMP CODE_0DB9BB

CODE_0DB9AE:
    LDA.B [Map16LowPtr],Y
    CMP.B #$0E
    BNE CODE_0DB9BB
    JSR Sta1To6ePointer
    LDA.B #$0D
    STA.B _F
CODE_0DB9BB:
    LDA.B _F
    STA.B [Map16LowPtr],Y
    RTS

CODE_0DB9C0:
    LDY.B LevelLoadPos
    LDA.B LvlLoadObjSize
    LSR A
    LSR A
    LSR A
    LSR A
    STA.B _0
CODE_0DB9CA:
    JSR CODE_0DA6B1                           ; Get Map16 data pointer in $04/$05.
    LDX.B #$B9
    JSR CODE_0DB9F6
    JSR CODE_0DA6BA                           ; Update Map16 pointer and move one row down.
    JSR CODE_0DA97D
    DEC.B _0
    BMI Return0DB9F5
    JSR StzTo6ePointer
    LDA.B #$BB
    JSR CODE_0DA95B
    JSR StzTo6ePointer
    LDA.B #$BC
    STA.B [Map16LowPtr],Y
    JSR CODE_0DA6BA                           ; Update Map16 pointer and move one row down.
    JSR CODE_0DA97D
    DEC.B _0
    BPL CODE_0DB9CA
Return0DB9F5:
    RTS

CODE_0DB9F6:
    LDA.B [Map16LowPtr],Y
    CMP.B #$0E
    BNE +
    JSR Sta1To6ePointer
    LDX.B #$0B
  + TXA
    JSR CODE_0DA95B
    INX
    TXA
    STA.B [Map16LowPtr],Y
    RTS

CODE_0DBA0A:
    LDY.B LevelLoadPos
    LDA.B LvlLoadObjSize
    AND.B #$0F
    STA.B _0
    TAX
    LDA.B LvlLoadObjSize
    LSR A
    LSR A
    LSR A
    LSR A
    STA.B _1
    JSR CODE_0DA6B1                           ; Get Map16 data pointer in $04/$05.
  - JSR Sta1To6ePointer
    LDA.B #$0E
    JSR CODE_0DA95B
    DEX
    BPL -
    JMP CODE_0DBA37

  - JSR StzTo6ePointer
    LDA.B #$B8
    JSR CODE_0DA95B
    DEX
    BPL -
CODE_0DBA37:
    JSR CODE_0DA6BA                           ; Update Map16 pointer and move one row down.
    JSR CODE_0DA97D
    LDX.B _0
    DEC.B _1
    BPL -
    RTS


DATA_0DBA44:
    db $5F,$5E,$10,$0F

DATA_0DBA48:
    db $60,$5D,$C5,$C4

CODE_0DBA4C:
    LDY.B LevelLoadPos
    LDA.B LvlLoadObjSize
    AND.B #$0F
    TAX
    LDA.B LvlLoadObjSize
    LSR A
    LSR A
    LSR A
    LSR A
    STA.B _0
    JSR Sta1To6ePointer
    LDA.L DATA_0DBA44,X
    STA.B [Map16LowPtr],Y
    JMP CODE_0DBA74

CODE_0DBA67:
    CPX.B #$02
    BPL +
    JSR Sta1To6ePointer
  + LDA.L DATA_0DBA48,X
    STA.B [Map16LowPtr],Y
CODE_0DBA74:
    JSR CODE_0DA97D
    DEC.B _0
    BPL CODE_0DBA67
    RTS


DATA_0DBA7C:
    db $B4,$B4,$B4,$B4,$B4,$B4,$B4,$B4
    db $B4,$B4,$B4,$B4,$B4,$B4,$B4,$B4
    db $B4,$B4,$B4,$B4,$B4,$B4,$B4,$B4
    db $B4,$B4,$B4,$B4,$B4,$B4,$B4,$B4
    db $B4,$B4,$B4,$B4,$B4,$B4,$B4,$B4
    db $B4,$B4,$B4,$B4,$B5,$B3,$B5,$B3
    db $B3,$B4,$B4,$B5,$B3,$B4,$B4,$B4
    db $B4,$B5,$B3,$B5,$B6,$B1,$B6,$B1
    db $B1,$B3,$B5,$B6,$B1,$B3,$B5,$B3
    db $B5,$B6,$B1,$B6,$25,$25,$25,$25
    db $25,$B1,$B6,$25,$25,$B1,$B6,$B1
    db $B6,$25,$25,$25,$25,$25,$25,$25

CODE_0DBADC:
    LDA.B LvlLoadObjSize
    STA.B _F
CODE_0DBAE0:
    LDA.B LevelLoadPos
    STA.B _E
    TAY
    LDX.B #$00
    LDA.B #$05
    STA.B _1
    LDA.B #$0F
    STA.B _0
    JSR CODE_0DA6B1                           ; Get Map16 data pointer in $04/$05.
CODE_0DBAF2:
    LDA.B _0
    STA.B _2
  - LDA.L DATA_0DBA7C,X
    JSR CODE_0DA95B
    INX
    DEC.B _2
    BPL -
    JSR CODE_0DA6BA                           ; Update Map16 pointer.
    LDA.B _E
    CLC
    ADC.B #$10
    STA.B _E
    TAY
    BCC +
    JSR CODE_0DA987
  + DEC.B _1
    BPL CODE_0DBAF2
    LDA.B Map16LowPtr
    CLC
    ADC.B #$B0
    STA.B Map16LowPtr
    STA.B Map16HighPtr
    LDA.B Map16LowPtr+1
    ADC.B #$00
    STA.B Map16LowPtr+1
    STA.B Map16HighPtr+1
    DEC.B _F
    BPL CODE_0DBAE0
    RTS

CODE_0DBB2C:
    LDY.B LevelLoadPos
    LDA.B LvlLoadObjSize
    LSR A
    LSR A
    LSR A
    LSR A
    TAX
    JSR CODE_0DA6B1                           ; Get Map16 data pointer in $04/$05.
    JSR Sta1To6ePointer
    LDA.B #$61
    JSR CODE_0DA95B
    JSR Sta1To6ePointer
    LDA.B #$62
    STA.B [Map16LowPtr],Y
    JMP CODE_0DBB59

  - JSR Sta1To6ePointer
    LDA.B #$63
    JSR CODE_0DA95B
    JSR Sta1To6ePointer
    LDA.B #$64
    STA.B [Map16LowPtr],Y
CODE_0DBB59:
    JSR CODE_0DA6BA                           ; Update Map16 pointer and move one row down.
    JSR CODE_0DA97D
    DEX
    BPL -
    RTS

CODE_0DBB63:
    LDX.B #$0E                                ; Tileset-specific object 31:0 (ice blue turn tiles)
    JMP CODE_0DA8C3

    %insert_empty($97,$98,$98,$98,$98)

Map16Tileset1:
    db $F4,$09,$F7,$09,$F5,$09,$FC,$09
    db $F5,$49,$FC,$09,$F5,$09,$FD,$09
    db $F5,$49,$FD,$09,$F6,$09,$F8,$09
    db $F7,$09,$F7,$89,$FE,$49,$FF,$89
    db $FE,$89,$FF,$09,$FF,$89,$FE,$49
    db $FE,$09,$FF,$09,$F8,$09,$F8,$89
    db $F7,$09,$F9,$09,$FE,$09,$FA,$09
    db $FF,$49,$FA,$09,$FE,$09,$FA,$49
    db $FE,$C9,$FA,$09,$F8,$09,$FB,$09
    db $F4,$29,$F7,$29,$F5,$29,$FC,$29
    db $F5,$69,$FC,$29,$F5,$29,$FD,$29
    db $F7,$29,$F7,$A9,$FE,$69,$FF,$A9
    db $FE,$A9,$FF,$29,$FF,$A9,$FE,$69
    db $F7,$29,$F9,$29,$FE,$29,$FA,$29
    db $FF,$69,$FA,$29,$FE,$29,$FA,$69
    db $C8,$29,$CA,$29,$C7,$29,$C9,$29
    db $71,$09,$73,$09,$FA,$08,$FA,$08
    db $FA,$08,$FA,$08,$FA,$08,$FA,$08
    db $FA,$08,$FA,$08,$70,$29,$72,$29
if ver_is_lores(!_VER)                        ;\=============== J, U, SS, & E0 ================
    db $D3,$99,$D3,$19,$D4,$99,$D4,$19        ;!
else                                          ;<===================== E1 ======================
    db $D3,$19,$D3,$19,$D4,$19,$D4,$19        ;!
endif                                         ;/===============================================
    db $B1,$81,$A1,$81,$B2,$81,$A2,$81
    db $B3,$81,$A3,$81,$B4,$81,$A4,$81
    db $F8,$00,$F8,$00,$AC,$01,$BC,$01
    db $AB,$41,$BB,$41,$F8,$00,$F8,$00
    db $F8,$00,$F8,$00,$AB,$01,$BB,$01
    db $AF,$01,$BF,$01,$F8,$00,$F8,$00
    db $A1,$01,$B1,$01,$A2,$01,$B2,$01
    db $A3,$01,$B3,$01,$A4,$01,$B4,$01
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $8A,$1D,$8A,$1D,$F8,$1C,$F8,$1C
    db $F8,$1C,$F8,$1C,$8A,$5D,$8A,$5D
    db $8B,$1D,$F8,$1C,$8B,$1D,$F8,$1C
    db $F8,$1C,$8B,$9D,$F8,$1C,$8B,$9D
    db $A5,$0D,$B5,$0D,$A6,$0D,$B6,$0D
    db $A7,$0D,$B7,$0D,$A8,$0D,$B8,$0D
    db $A9,$0D,$B9,$0D,$AA,$0D,$BA,$0D
    db $A0,$0D,$9A,$0D,$F3,$0D,$9B,$0D
    db $EB,$0D,$ED,$0D,$EC,$0D,$DD,$0D
    db $EC,$4D,$DD,$4D,$EB,$4D,$ED,$4D
    db $DD,$4D,$DD,$4D,$DD,$0D,$EF,$0D
    db $DD,$4D,$EF,$4D,$DD,$0D,$DD,$0D
    db $DD,$4D,$EE,$0D,$DD,$0D,$EE,$4D
    db $7E,$0D,$7E,$0D,$21,$0C,$21,$0C
    db $22,$0C,$22,$0C,$7F,$0D,$7F,$0D
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $46,$10,$46,$90,$46,$50,$46,$D0
    db $4A,$10,$4A,$90,$4A,$50,$4A,$D0
    db $C3,$15,$D3,$19,$C4,$15,$D4,$19
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $C5,$01,$D5,$01,$C6,$01,$D6,$01
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $FA,$19,$FD,$19,$FB,$19,$FE,$19
    db $FC,$19,$FF,$19,$FC,$19,$FF,$19
    db $FB,$59,$FE,$59,$FA,$59,$FD,$59
    db $85,$19,$96,$19,$87,$19,$97,$19
    db $96,$99,$85,$99,$97,$99,$87,$99
    db $88,$19,$98,$19,$89,$19,$99,$19
    db $89,$59,$99,$59,$88,$59,$98,$59
    db $F4,$09,$F7,$09,$F5,$09,$FC,$09
    db $F5,$49,$FC,$09,$F5,$09,$FD,$09
    db $F5,$49,$FD,$09,$F6,$09,$F8,$09
    db $F7,$09,$F7,$89,$FE,$49,$FF,$89
    db $FE,$89,$FF,$09,$FF,$89,$FE,$49
    db $FE,$09,$FF,$09,$F8,$09,$F8,$89
    db $F7,$09,$F9,$09,$FE,$09,$FA,$09
    db $FF,$49,$FA,$09,$FE,$09,$FA,$49
    db $FE,$C9,$FA,$09,$F8,$09,$FB,$09
    db $AD,$01,$BD,$01,$8D,$01,$9D,$01
    db $8E,$01,$9E,$01,$8F,$01,$9F,$01
    db $8C,$01,$9C,$01,$8D,$01,$9D,$01
    db $8E,$01,$9E,$01,$AE,$01,$BE,$01
    db $26,$14,$36,$14,$26,$54,$36,$54
    db $26,$18,$36,$18,$26,$58,$36,$58
    db $26,$1C,$36,$1C,$26,$5C,$36,$5C
    db $27,$1C,$37,$1C,$27,$5C,$37,$5C

CODE_0DC190:
; Unused.
; Tilemap data for Map16 tiles 073-0FF, in tileset 1 only.
; 8 bytes per 16x16, with 2 bytes per 8x8 (TTTTTTTT YXPCCCTT format).
; Ordered UL, BL, UR, BR.
; Tilemap data for Map16 tiles 107-110, in tileset 1 only.
; 8 bytes per 16x16, with 2 bytes per 8x8 (TTTTTTTT YXPCCCTT format).
; Ordered UL, BL, UR, BR.
; Tilemap data for Map16 tiles 153-16D, in tileset 1 only.
; 8 bytes per 16x16, with 2 bytes per 8x8 (TTTTTTTT YXPCCCTT format).
    SEP #$30                                  ; AXY->8; Ordered UL, BL, UR, BR.
    LDX.B LvlLoadObjNo
    DEX
    TXA
    JSL ExecutePtrLong

    dl CODE_0DA8C3
    dl CODE_0DA8C3
    dl CODE_0DA8C3
    dl CODE_0DA8C3
    dl CODE_0DA8C3
    dl CODE_0DA8C3
    dl CODE_0DA8C3
    dl CODE_0DA8C3
    dl CODE_0DA8C3
    dl CODE_0DA8C3
    dl CODE_0DA8C3
    dl CODE_0DA8C3
    dl CODE_0DA8C3
    dl CODE_0DA8C3
    dl CODE_0DAA26
    dl CODE_0DAAB4
    dl CODE_0DAB0D
    dl CODE_0DAB3E
    dl CODE_0DB075
    dl CODE_0DB1D4
    dl CODE_0DB224
    dl ADDR_0DB336
    dl CODE_0DB3BD
    dl CODE_0DB3E3
    dl CODE_0DB3E3
    dl CODE_0DB3E3
    dl CODE_0DB3E3
    dl CODE_0DB42D
    dl CODE_0DB461
    dl CODE_0DB49E
    dl CODE_0DB51F
    dl CODE_0DB547
    dl CODE_0DB1C8
    dl CODE_0DB3E3
    dl CODE_0DB3E3
    dl CODE_0DB3E3
    dl CODE_0DB3E3
    dl CODE_0DB3E3
    dl CODE_0DB3E3
    dl CODE_0DB3E3
    dl CODE_0DB3E3
    dl CODE_0DB3E3
    dl CODE_0DB3E3
    dl CODE_0DB3E3
    dl CODE_0DB3E3
    dl CODE_0DB3E3
    dl CODE_0DB3E3
    dl CODE_0DB3E3
    dl CODE_0DB3E3
    dl CODE_0DB3E3
    dl CODE_0DB3E3
    dl CODE_0DC5D8
    dl CODE_0DC58A
    dl CODE_0DC4EF
    dl CODE_0DCF12
    dl CODE_0DCF33
    dl CODE_0DB916
    dl CODE_0DB91E
    dl CODE_0DC4C9
    dl CODE_0DC478
    dl CODE_0DC341
    dl CODE_0DC42E
    dl CODE_0DC44F

DATA_0DC257:
    db $07,$08

CODE_0DC259:
    LDY.B LevelLoadPos                        ; Standard object pointers (GFX setting 1); aka T:1.
; 01 - Water tiles 1, dark blue
; 02 - Invisible coin blocks
; 03 - Invisible noteblocks
; 04 - Invisible POW coins
; 05 - Coins
; 06 - Walk-through dirt
; 07 - Water tiles 2, variable color
; 08 - Noteblocks
; 09 - Turnblocks
; 0A - Coin ? blocks
; 0B - Throw blocks
; 0C - Munchers
; 0D - Gray cement blocks
; 0E - Brown "used" blocks
; 0F - Vertical pipe
; 10 - Horizontal pipe
; 11 - Bullet bill shooter
; 12 - Slope
; 13 - Ledge edge / Vine
; 14 - Ledge
; 15 - Midway point / Goal point
; 16 - Purple coins
; 17 - Rope / Clouds
; 18 - Amimated water
; 19 - Normal water
; 1A - Animated lava/mud
; 1B - Net (top)
; 1C - Donut bridge
; 1D - Net (bottom)
; 1E - Net (left/right)
; 1F - Skinny vertical pipe/bone/log
; 20 - Skinny horizontal pipe/bone/log
; 21 - Wide-scale ledge
; 22 - Unused (used internally by LM for direct map16 page 0)
; 23 - Unused (used internally by LM for direct map16 page 1)
; 24 - Unused (used internally by LM for the deprecated FG/BG/SP graphics system)
; 25 - Unused (used internally by LM for the deprecated AN2 graphics system)
; 26 - Unused (used internally by LM for bypassing music)
; 27 - Unused (used internally by LM for direct map16 objects on pages 00-3F)
; 28 - Unused (used internally by LM for bypassing the time limit)
; 29 - Unused (used internally by LM for direct map16 objects on pages 40-7F)
; 2A - Unused (reserved for future use by LM)
; 2B - Unused (reserved for future use by LM)
; 2C - Unused (reserved for future use by LM)
; 2D - Unused (reserved for 5-byte user defined objects)
; 2E - Tileset specific: Unused
; 2F - Tileset specific: Unused
; 30 - Tileset specific: Unused
; 31 - Tileset specific: Unused
; 32 - Tileset specific: Unused
; 33 - Tileset specific: Unused
; 34 - Tileset specific: Double-ended pipe
; 35 - Tileset specific: Rock wall BG
; 36 - Tileset specific: Large spike
; 37 - Tileset specific: Horizontal line guide
; 38 - Tileset specific: Vertical line guide
; 39 - Tileset specific: Blue switch blocks
; 3A - Tileset specific: Red switch blocks
; 3B - Tileset specific: Ledge
; 3C - Tileset specific: Stone block wall
; 3D - Tileset specific: Conveyors
; 3E - Tileset specific: Horizontal down-facing spikes
    LDA.B LvlLoadObjSize                      ; 3F - Tileset specific: Vertical down-facing spikes.
    SEC
    SBC.B #$4B
    TAX
    JSR Sta1To6ePointer
    LDA.L DATA_0DC257,X
    STA.B [Map16LowPtr],Y
    RTS


DATA_0DC26B:
    db $73,$74,$75,$73,$74,$74,$7B,$79
    db $7A,$79,$7A,$7B,$79,$7A,$7B,$73
    db $74,$75,$73,$74,$74,$74,$75,$73
    db $77,$77,$78,$76,$77,$77,$7A,$7B
    db $79,$7A,$7A,$7B,$79,$7A,$7B,$73
    db $74,$74,$75,$73,$74,$73,$75,$73
    db $77,$7A,$7A,$7B,$79,$7A,$79,$7B
    db $79,$7B,$7C,$7D,$7D,$7D,$7D,$25
    db $73,$74,$75,$7E,$7F,$7F,$7F,$7F
    db $25,$76,$77,$78,$80,$81,$81,$81
    db $81,$25,$76,$77,$78,$82,$82,$82
    db $82,$7C,$25,$79,$7A,$7B,$83,$84
    db $84,$85,$80,$25,$73,$74,$75,$83
    db $84,$84,$85,$7C,$25,$76,$77,$78
    db $83,$84,$84,$85,$7E,$25,$79,$7A
    db $7B,$83,$84,$84,$85,$80

CODE_0DC2E9:
    LDY.B LevelLoadPos
    LDX.B #$00
CODE_0DC2ED:
    LDA.B #$08
    STA.B _0
CODE_0DC2F1:
    JSR StzTo6ePointer
    LDA.L DATA_0DC26B,X
    CMP.B #$25
    BEQ +
    STA.B [Map16LowPtr],Y
  + JSR CODE_0DA95D
    INX
    DEC.B _0
    BNE CODE_0DC2F1
    JSR StzTo6ePointer
    LDA.L DATA_0DC26B,X
    STA.B [Map16LowPtr],Y
    INX
    JSR CODE_0DA97D
    CPX.B #$7E
    BNE CODE_0DC2ED
    RTS


DATA_0DC318:
    db $98,$99,$9A,$9B,$9C,$9C

CODE_0DC31E:
    LDY.B LevelLoadPos                        ; Extended object 90 - Big boss door
    LDX.B #$00
    LDA.B #$01
    STA.B _0
CODE_0DC326:
    LDA.B _0
    STA.B _1
  - JSR StzTo6ePointer
    LDA.L DATA_0DC318,X
    JSR CODE_0DA95B
    INX
    DEC.B _1
    BPL -
    JSR CODE_0DA97D
    CPX.B #$06
    BNE CODE_0DC326
    RTS

CODE_0DC341:
    LDA.B LvlLoadObjSize
    AND.B #$02
    LSR A
    JSL ExecutePtrLong

    dl CODE_0DC358
    dl CODE_0DC3D8

DATA_0DC350:
    db $CE,$D1,$CF,$D0

DATA_0DC354:
    db $F3,$F6,$F4,$F5

CODE_0DC358:
    LDY.B LevelLoadPos
    LDA.B #$00
    STA.B _2
    LDA.B LvlLoadObjSize
    AND.B #$03
    TAX
    JSR CODE_0DA6B1                           ; Get Map16 data pointer in $04/$05.
    LDA.B LvlLoadObjSize
    LSR A
    LSR A
    LSR A
    LSR A
    STA.B _0
    INC.B _0
CODE_0DC370:
    LDA.B _2
    STA.B _3
    JSR Sta1To6ePointer
    LDA.L DATA_0DC350,X
    JSR CODE_0DA95B
CODE_0DC37E:
    DEC.B _3
    BMI CODE_0DC39B
    JSR Sta1To6ePointer
    LDA.L DATA_0DC354,X
    JSR CODE_0DA95B
    JMP CODE_0DC397

  - JSR StzTo6ePointer
    LDA.B #$3F
    JSR CODE_0DA95B
CODE_0DC397:
    DEC.B _3
    BPL -
CODE_0DC39B:
    JSR CODE_0DA6BA                           ; Update Map16 pointer.
    INC.B _2
    DEC.B _0
    BEQ CODE_0DC3CD
    BPL +
    JMP Return0DC3D7

  + LDA.B LevelLoadPos
    CLC
    ADC.B #$0F
    TAY
    BCC +
    JSR CODE_0DA987
  + TYA
    AND.B #$0F
    CMP.B #$0F
    BNE CODE_0DC3C8
    TYA
    CLC
    ADC.B #$10
    TAY
    BCC +
    JSR CODE_0DA987
  + JSR CODE_0DA9D6
CODE_0DC3C8:
    STY.B LevelLoadPos
    JMP CODE_0DC370

CODE_0DC3CD:
    LDA.B _2
    STA.B _3
    JSR CODE_0DA97D
    JMP CODE_0DC37E

Return0DC3D7:
    RTS

CODE_0DC3D8:
    LDY.B LevelLoadPos
    LDA.B #$00
    STA.B _2
    LDA.B LvlLoadObjSize
    AND.B #$03
    TAX
    JSR CODE_0DA6B1                           ; Get Map16 data pointer in $04/$05.
    LDA.B LvlLoadObjSize
    LSR A
    LSR A
    LSR A
    LSR A
    STA.B _0
    INC.B _0
    JMP CODE_0DC40D

  - JSR StzTo6ePointer
    LDA.B #$3F
    JSR CODE_0DA95B
    DEC.B _3
CODE_0DC3FD:
    LDA.B _3
    CMP.B #$01
    BNE -
    JSR Sta1To6ePointer
    LDA.L DATA_0DC354,X
    JSR CODE_0DA95B
CODE_0DC40D:
    LDA.B _0
    BEQ Return0DC42B
    JSR Sta1To6ePointer
    LDA.L DATA_0DC350,X
    JSR CODE_0DA95B
    JSR CODE_0DA6BA                           ; Update Map16 pointer and move one row down.
    JSR CODE_0DA97D
    INC.B _2
    LDA.B _2
    STA.B _3
    DEC.B _0
    BPL CODE_0DC3FD
Return0DC42B:
    RTS


DATA_0DC42C:
    db $5A,$59

CODE_0DC42E:
    LDY.B LevelLoadPos
    LDA.B LvlLoadObjSize
    AND.B #$0F
    STA.B _0
    LDA.B LvlLoadObjSize
    LSR A
    LSR A
    LSR A
    LSR A
    TAX
  - JSR Sta1To6ePointer
    LDA.L DATA_0DC42C,X
    JSR CODE_0DA95B
    DEC.B _0
    BPL -
    RTS


DATA_0DC44C:
    db $5B,$5C,$53

CODE_0DC44F:
    LDY.B LevelLoadPos
    LDA.B LvlLoadObjSize
    LSR A
    LSR A
    LSR A
    LSR A
    STA.B _0
    LDA.B LvlLoadObjSize
    AND.B #$0F
    TAX
  - JSR Sta1To6ePointer
    LDA.L DATA_0DC44C,X
    STA.B [Map16LowPtr],Y
    JSR CODE_0DA97D
    DEC.B _0
    BPL -
    RTS


DATA_0DC46F:
    db $5D,$60,$63

DATA_0DC472:
    db $5E,$61,$64

DATA_0DC475:
    db $5F,$62,$65

CODE_0DC478:
    LDY.B LevelLoadPos
    LDA.B LvlLoadObjSize
    AND.B #$0F
    STA.B _0
    LDA.B LvlLoadObjSize
    LSR A
    LSR A
    LSR A
    LSR A
    STA.B _1
    JSR CODE_0DA6B1                           ; Get Map16 data pointer in $04/$05.
    LDX.B #$00
CODE_0DC48D:
    LDA.B _0
    STA.B _2
    JSR Sta1To6ePointer
    LDA.L DATA_0DC46F,X
    JSR CODE_0DA95B
    JMP CODE_0DC4A8

  - JSR Sta1To6ePointer
    LDA.L DATA_0DC472,X
    JSR CODE_0DA95B
CODE_0DC4A8:
    DEC.B _2
    BNE -
    JSR Sta1To6ePointer
    LDA.L DATA_0DC475,X
    STA.B [Map16LowPtr],Y
    JSR CODE_0DA6BA                           ; Update Map16 pointer and move one row down.
    JSR CODE_0DA97D
    LDX.B #$01
    DEC.B _1
    BMI Return0DC4C8
    BNE +
    LDX.B #$02
  + JMP CODE_0DC48D

Return0DC4C8:
    RTS

CODE_0DC4C9:
    LDY.B LevelLoadPos
    LDA.B LvlLoadObjSize
    AND.B #$0F
    STA.B _0
if ver_is_hires(!_VER)                        ;\======================= E1 ====================
    JSR CODE_0DA6B1                           ;!
endif                                         ;/===============================================
    LDX.B _0
  - JSR Sta1To6ePointer
    LDA.B #$09
    JSR CODE_0DA95B
    DEX
    BPL -
if ver_is_hires(!_VER)                        ;\======================= E1 ====================
    JSR CODE_0DA6BA                           ;!
endif                                         ;/===============================================
    JSR CODE_0DA97D
    LDX.B _0
  - JSR StzTo6ePointer
    LDA.B #$86
    JSR CODE_0DA95B
    DEX
    BPL -
    RTS

CODE_0DC4EF:
    LDY.B LevelLoadPos
    LDA.B LvlLoadObjSize
    AND.B #$0F
    TAX
    LDA.B LvlLoadObjSize
    LSR A
    LSR A
    LSR A
    LSR A
    STA.B _0
    JSR CODE_0DA6B1                           ; Get Map16 data pointer in $04/$05.
    CPX.B #$00
    BEQ CODE_0DC51E
    JSR CODE_0DA95D
    JSR StzTo6ePointer
    LDA.B #$87
    JSR CODE_0DA95B
    JSR StzTo6ePointer
    LDA.B #$88
    JSR CODE_0DA95B
    JSR CODE_0DA6BA                           ; Update Map16 pointer and move one row down.
    JSR CODE_0DA97D
CODE_0DC51E:
    JSR StzTo6ePointer
    LDA.B #$89
    JSR CODE_0DA95B
    JSR Sta1To6ePointer
    LDA.B #$66
    JSR CODE_0DA95B
    JSR Sta1To6ePointer
    LDA.B #$67
    JSR CODE_0DA95B
    JSR StzTo6ePointer
    LDA.B #$8A
    JSR CODE_0DA95B
    JSR CODE_0DA6BA                           ; Update Map16 pointer and move one row down.
    JSR CODE_0DA97D
    DEC.B _0
    BMI CODE_0DC572
    JSR StzTo6ePointer
    LDA.B #$8B
    JSR CODE_0DA95B
    JSR Sta1To6ePointer
    LDA.B #$68
    JSR CODE_0DA95B
    JSR Sta1To6ePointer
    LDA.B #$69
    JSR CODE_0DA95B
    JSR StzTo6ePointer
    LDA.B #$8C
    JSR CODE_0DA95B
    JSR CODE_0DA6BA                           ; Update Map16 pointer and move one row down.
    JSR CODE_0DA97D
    DEC.B _0
    BPL CODE_0DC51E
CODE_0DC572:
    CPX.B #$00
    BNE +
    JSR CODE_0DA95D
    JSR StzTo6ePointer
    LDA.B #$8D
    JSR CODE_0DA95B
    JSR StzTo6ePointer
    LDA.B #$8E
    JSR CODE_0DA95B
  + RTS

CODE_0DC58A:
    LDY.B LevelLoadPos
    LDA.B LvlLoadObjSize
    AND.B #$0F
    STA.B _0
    LDA.B LvlLoadObjSize
    LSR A
    LSR A
    LSR A
    LSR A
    STA.B _1
    JSR CODE_0DA6B1                           ; Get Map16 data pointer in $04/$05.
CODE_0DC59D:
    LDX.B _0
  - JSR StzTo6ePointer
    LDA.B #$94
    JSR CODE_0DA95B
    JSR StzTo6ePointer
    LDA.B #$95
    JSR CODE_0DA95B
    DEX
    BPL -
    JSR CODE_0DA6BA                           ; Update Map16 pointer and move one row down.
    JSR CODE_0DA97D
    LDX.B _0
  - JSR StzTo6ePointer
    LDA.B #$96
    JSR CODE_0DA95B
    JSR StzTo6ePointer
    LDA.B #$97
    JSR CODE_0DA95B
    DEX
    BPL -
    JSR CODE_0DA6BA                           ; Update Map16 pointer and move one row down.
    JSR CODE_0DA97D
    DEC.B _1
    BPL CODE_0DC59D
    RTS

CODE_0DC5D8:
; Object 34 - Tileset specific: Double-ended pipe
    LDY.B LevelLoadPos                        ; Load position.
    LDA.B LvlLoadObjSize
    LSR A
    LSR A                                     ; $00 = height.
    LSR A
    LSR A
    STA.B _0
    JSR CODE_0DA6B1                           ; Get Map16 data pointer in $04/$05.
    JSR Sta1To6ePointer
    LDA.B #$33
    JSR CODE_0DA95B                           ; Add top row.
    JSR Sta1To6ePointer
    LDA.B #$34
    STA.B [Map16LowPtr],Y
    JMP CODE_0DC606

  - JSR StzTo6ePointer
    LDA.B #$9D
    JSR CODE_0DA95B                           ; Add middle row(s).
    JSR StzTo6ePointer
    LDA.B #$9E
    STA.B [Map16LowPtr],Y
CODE_0DC606:
    JSR CODE_0DA6BA                           ; Update Map16 pointer and move one row down.
    JSR CODE_0DA97D
    DEC.B _0                                  ; Loop to add a middle row if not at the bottom.
    BNE -
    JSR Sta1To6ePointer
    LDA.B #$33
    JSR CODE_0DA95B                           ; Add bottom row.
    JSR Sta1To6ePointer
    LDA.B #$34
    STA.B [Map16LowPtr],Y
    RTS

    %insert_empty($1E0,$1E0,$1E0,$1E0,$1DA)

Map16Tileset2:
    db $C5,$09,$C5,$09,$85,$09,$C6,$89
    db $C6,$09,$85,$89,$85,$09,$C6,$89
    db $C6,$09,$85,$89,$C5,$49,$C5,$49
    db $C1,$1D,$D1,$1D,$C2,$1D,$F8,$1C
    db $C2,$5D,$F8,$1C,$C1,$5D,$D1,$5D
    db $D1,$9D,$C1,$9D,$F8,$1C,$C2,$9D
    db $F8,$1C,$C2,$DD,$D1,$DD,$C1,$DD
    db $F8,$1C,$DC,$1D,$CD,$1D,$DD,$1D
    db $CE,$1D,$F8,$1C,$CF,$1D,$F8,$1C
    db $E0,$1D,$F0,$1D,$F8,$1C,$F8,$1C
    db $F8,$1C,$F8,$1C,$E0,$5D,$F0,$5D
    db $CF,$5D,$F8,$1C,$CE,$5D,$F8,$1C
    db $CD,$5D,$DD,$5D,$F8,$1C,$DC,$5D
    db $DC,$9D,$F8,$1C,$DD,$9D,$CD,$9D
    db $F8,$1C,$CE,$9D,$F8,$1C,$CF,$9D
    db $F0,$9D,$E0,$9D,$F8,$1C,$F8,$1C
    db $F8,$1C,$F8,$1C,$F0,$DD,$E0,$DD
    db $F8,$1C,$CF,$DD,$F8,$1C,$CE,$DD
    db $DD,$DD,$CD,$DD,$DC,$DD,$F8,$1C
    db $F8,$1C,$CC,$1D,$CC,$1D,$F8,$1C
    db $CC,$5D,$F8,$1C,$F8,$1C,$CC,$5D
    db $F8,$1C,$F8,$1C,$E1,$1D,$F1,$1D
    db $E1,$5D,$F1,$5D,$F8,$1C,$F8,$1C
    db $E1,$1D,$F1,$1D,$F8,$1C,$F8,$1C
    db $F8,$1C,$F8,$1C,$E1,$5D,$F1,$5D
    db $F8,$1C,$F2,$1D,$F8,$1C,$F3,$1D
    db $F2,$1D,$F8,$1C,$F3,$1D,$F8,$1C
    db $F3,$5D,$F8,$1C,$F2,$5D,$F8,$1C
    db $F8,$1C,$F3,$5D,$F8,$1C,$F2,$5D
    db $DE,$1D,$DE,$1D,$F8,$1C,$F8,$1C
    db $F8,$1C,$F8,$1C,$DE,$5D,$DE,$5D
    db $DF,$1D,$F8,$1C,$DF,$1D,$F8,$1C
    db $F8,$1C,$DF,$9D,$F8,$1C,$DF,$9D
    db $F8,$1C,$7C,$1C,$7C,$1C,$F8,$1C
    db $7D,$08,$F8,$1C,$F8,$1C,$7D,$08
    db $F8,$1C,$4C,$1C,$F8,$1C,$4D,$1C
    db $4D,$DC,$F8,$1C,$4C,$DC,$F8,$1C
    db $F8,$1C,$F8,$1C,$4C,$1C,$4D,$DC
    db $4D,$1C,$4C,$DC,$F8,$1C,$F8,$1C
    db $C3,$35,$D3,$35,$C4,$35,$D4,$35
    db $C4,$75,$D4,$75,$C3,$75,$D3,$75
    db $C3,$2D,$D3,$2D,$C4,$2D,$D4,$2D
    db $C4,$6D,$D4,$6D,$C3,$6D,$D3,$6D
    db $C3,$39,$D3,$39,$C4,$39,$D4,$39
    db $C4,$79,$D4,$79,$C3,$79,$D3,$79
    db $C3,$3D,$D3,$3D,$C4,$3D,$D4,$3D
    db $C4,$7D,$D4,$7D,$C3,$7D,$D3,$7D
    db $C5,$09,$C5,$09,$C5,$49,$C5,$49
    db $F8,$08,$53,$09,$F8,$08,$55,$09
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $80,$15,$91,$15,$D6,$15,$D6,$95
    db $D6,$15,$D6,$95,$D6,$15,$D6,$95
    db $D6,$15,$D6,$95,$80,$55,$91,$55
    db $D5,$15,$C7,$15,$D6,$15,$D6,$95
    db $D6,$15,$D6,$95,$D5,$55,$C7,$55
    db $4E,$08,$F8,$1C,$4E,$08,$F8,$1C
    db $4E,$48,$F8,$1C,$4E,$48,$F8,$1C
    db $56,$09,$58,$09,$57,$09,$5A,$09
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $F4,$19,$F6,$19,$F5,$19,$F7,$19
    db $F8,$19,$F8,$19,$F9,$19,$F9,$19
    db $F6,$99,$F4,$99,$F7,$99,$F5,$99
    db $FA,$19,$FD,$19,$FB,$19,$FE,$19
    db $FC,$19,$FF,$19,$FC,$19,$FF,$19
    db $FB,$59,$FE,$59,$FA,$59,$FD,$59
    db $CA,$19,$DA,$19,$CB,$19,$DB,$19
    db $CB,$19,$DB,$19,$CB,$19,$DB,$19
    db $CB,$19,$DB,$19,$CA,$59,$DA,$59
    db $C8,$19,$D8,$19,$C9,$19,$D9,$19
    db $D8,$19,$D8,$19,$D9,$19,$D9,$19
    db $D8,$19,$C8,$99,$D9,$19,$C9,$99
    db $E2,$11,$D7,$11,$E3,$11,$F9,$1C
    db $E4,$11,$F9,$1C,$E5,$11,$EA,$11
    db $D7,$11,$D7,$11,$E6,$11,$E7,$11
    db $E6,$51,$E7,$51,$EA,$11,$EA,$11
    db $E9,$11,$E9,$91,$F9,$1C,$F9,$1C
    db $F9,$1C,$F9,$1C,$EA,$11,$E8,$11
    db $D7,$11,$D7,$11,$F9,$1C,$F9,$1C
    db $F9,$1C,$F9,$1C,$E8,$91,$EA,$11
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $20,$14,$20,$14,$21,$14,$21,$14
    db $22,$14,$22,$14,$23,$14,$23,$14
    db $26,$14,$36,$14,$26,$54,$36,$54
    db $26,$18,$36,$18,$26,$58,$36,$58
    db $26,$1C,$36,$1C,$26,$5C,$36,$5C
    db $27,$1C,$37,$1C,$27,$5C,$37,$5C

CODE_0DCD90:
; Unused.
; Tilemap data for Map16 tiles 073-0FF, in tileset 2 only.
; 8 bytes per 16x16, with 2 bytes per 8x8 (TTTTTTTT YXPCCCTT format).
; Ordered UL, BL, UR, BR.
; Tilemap data for Map16 tiles 107-110, in tileset 2 only.
; 8 bytes per 16x16, with 2 bytes per 8x8 (TTTTTTTT YXPCCCTT format).
; Ordered UL, BL, UR, BR.
; Tilemap data for Map16 tiles 107-110, in tileset 2 only.
; 8 bytes per 16x16, with 2 bytes per 8x8 (TTTTTTTT YXPCCCTT format).
    SEP #$30                                  ; AXY->8; Ordered UL, BL, UR, BR.
    LDX.B LvlLoadObjNo
    DEX
    TXA
    JSL ExecutePtrLong

    dl CODE_0DA8C3
    dl CODE_0DA8C3
    dl CODE_0DA8C3
    dl CODE_0DA8C3
    dl CODE_0DA8C3
    dl CODE_0DA8C3
    dl CODE_0DA8C3
    dl CODE_0DA8C3
    dl CODE_0DA8C3
    dl CODE_0DA8C3
    dl CODE_0DA8C3
    dl CODE_0DA8C3
    dl CODE_0DA8C3
    dl CODE_0DA8C3
    dl CODE_0DAA26
    dl CODE_0DAAB4
    dl CODE_0DAB0D
    dl CODE_0DAB3E
    dl CODE_0DB075
    dl CODE_0DB1D4
    dl CODE_0DB224
    dl ADDR_0DB336
    dl CODE_0DB3BD
    dl CODE_0DB3E3
    dl CODE_0DB3E3
    dl CODE_0DB3E3
    dl CODE_0DB3E3
    dl CODE_0DB42D
    dl CODE_0DB461
    dl CODE_0DB49E
    dl CODE_0DB51F
    dl CODE_0DB547
    dl CODE_0DB1C8
    dl CODE_0DB3E3
    dl CODE_0DB3E3
    dl CODE_0DB3E3
    dl CODE_0DB3E3
    dl CODE_0DB3E3
    dl CODE_0DB3E3
    dl CODE_0DB3E3
    dl CODE_0DB3E3
    dl CODE_0DB3E3
    dl CODE_0DB3E3
    dl CODE_0DB3E3
    dl CODE_0DB3E3
    dl CODE_0DB3E3
    dl CODE_0DB3E3
    dl CODE_0DB3E3
    dl CODE_0DB3E3
    dl CODE_0DD24E
    dl CODE_0DB916
    dl CODE_0DB91E
    dl CODE_0DD1D9
    dl ADDR_0DCEF2
    dl CODE_0DC341
    dl CODE_0DCF12
    dl CODE_0DCF33
    dl CODE_0DCF53
    dl ADDR_0DD070
    dl CODE_0DD103
    dl CODE_0DD145
    dl ADDR_0DD182
    dl ADDR_0DD1A5

DATA_0DCE57:
    db $7A,$7B,$7C,$25,$7E,$7F,$25,$7D
    db $82,$25,$80,$81,$25,$83,$84,$85

CODE_0DCE67:
    LDY.B LevelLoadPos                        ; Standard object pointers (GFX settings 2, 6, 8); aka T:2.
; 01 - Water tiles 1, dark blue
; 02 - Invisible coin blocks
; 03 - Invisible noteblocks
; 04 - Invisible POW coins
; 05 - Coins
; 06 - Walk-through dirt
; 07 - Water tiles 2, variable color
; 08 - Noteblocks
; 09 - Turnblocks
; 0A - Coin ? blocks
; 0B - Throw blocks
; 0C - Munchers
; 0D - Gray cement blocks
; 0E - Brown "used" blocks
; 0F - Vertical pipe
; 10 - Horizontal pipe
; 11 - Bullet bill shooter
; 12 - Slope
; 13 - Ledge edge / Vine
; 14 - Ledge
; 15 - Midway point / Goal point
; 16 - Purple coins
; 17 - Rope / Clouds
; 18 - Amimated water
; 19 - Normal water
; 1A - Animated lava/mud
; 1B - Net (top)
; 1C - Donut bridge
; 1D - Net (bottom)
; 1E - Net (left/right)
; 1F - Skinny vertical pipe/bone/log
; 20 - Skinny horizontal pipe/bone/log
; 21 - Wide-scale ledge
; 22 - Unused (used internally by LM for direct map16 page 0)
; 23 - Unused (used internally by LM for direct map16 page 1)
; 24 - Unused (used internally by LM for the deprecated FG/BG/SP graphics system)
; 25 - Unused (used internally by LM for the deprecated AN2 graphics system)
; 26 - Unused (used internally by LM for bypassing music)
; 27 - Unused (used internally by LM for direct map16 objects on pages 00-3F)
; 28 - Unused (used internally by LM for bypassing the time limit)
; 29 - Unused (used internally by LM for direct map16 objects on pages 40-7F)
; 2A - Unused (reserved for future use by LM)
; 2B - Unused (reserved for future use by LM)
; 2C - Unused (reserved for future use by LM)
; 2D - Unused (reserved for 5-byte user defined objects)
; 2E - Tileset specific: Unused
; 2F - Tileset specific: Unused
; 30 - Tileset specific: Unused
; 31 - Tileset specific: Unused
; 32 - Tileset specific: Log bridge
; 33 - Tileset specific: Blue switch blocks
; 34 - Tileset specific: Red switch blocks
; 35 - Tileset specific: Plant on column (radishes)
; 36 - Tileset specific: Horizontal conveyor
; 37 - Tileset specific: Diagonal conveyor
; 38 - Tileset specific: Horizontal line guide
; 39 - Tileset specific: Vertical line guide / Vertical column
; 3A - Tileset specific: Slope line guide / ON/OFF line guide
; 3B - Tileset specific: Very steep line guides
; 3C - Tileset specific: Mushroom ledge
; 3D - Tileset specific: Mushroom column
; 3E - Tileset specific: Horizontal log
    LDA.B LvlLoadObjSize                      ; 3F - Tileset specific: Vertical log
    SEC
    SBC.B #$4D
    ASL A
    ASL A
    TAX
    JSR CODE_0DA6B1                           ; Get Map16 data pointer in $04/$05.
  - JSR StzTo6ePointer
    LDA.L DATA_0DCE57,X
    JSR CODE_0DA95B
    INX
    TXA
    AND.B #$01
    BNE -
    JSR CODE_0DA6BA                           ; Update Map16 pointer and move one row down.
    JSR CODE_0DA97D
    TXA
    AND.B #$03
    BNE -
    RTS


DATA_0DCE90:
    db $76,$77,$78,$79

CODE_0DCE94:
    LDY.B LevelLoadPos
    LDA.B LvlLoadObjSize
    SEC
    SBC.B #$51
    TAX
    JSR StzTo6ePointer
    LDA.L DATA_0DCE90,X
    STA.B [Map16LowPtr],Y
    RTS

ADDR_0DCEA6:
    LDY.B LevelLoadPos
    LDA.B LvlLoadObjSize
    SEC
    SBC.B #$51
    TAX
    JSR StzTo6ePointer
    LDA.B #$84
    JSR CODE_0DA95B
    JSR StzTo6ePointer
    LDA.B #$85
    STA.B [Map16LowPtr],Y
    RTS


DATA_0DCEBE:
    db $96,$97

CODE_0DCEC0:
    LDY.B LevelLoadPos
    LDA.B LvlLoadObjSize
    LDX.B #$00
  - JSR StzTo6ePointer
    LDA.L DATA_0DCEBE,X
    STA.B [Map16LowPtr],Y
    JSR CODE_0DA97D
    INX
    CPX.B #$02
    BNE -
    RTS


DATA_0DCED8:
    db $98,$99

CODE_0DCEDA:
    LDY.B LevelLoadPos
    LDA.B LvlLoadObjSize
    LDX.B #$00
  - JSR StzTo6ePointer
    LDA.L DATA_0DCED8,X
    JSR CODE_0DA95B
    INX
    CPX.B #$02
    BNE -
    RTS


DATA_0DCEF0:
    db $0C,$0D

ADDR_0DCEF2:
    LDY.B LevelLoadPos
    LDA.B LvlLoadObjSize
    AND.B #$0F
    STA.B _0
    LDA.B LvlLoadObjSize
    LSR A
    LSR A
    LSR A
    LSR A
    TAX
  - JSR Sta1To6ePointer
    LDA.L DATA_0DCEF0,X
    JSR CODE_0DA95B
    DEC.B _0
    BPL -
    RTS


DATA_0DCF10:
    db $92,$93

CODE_0DCF12:
    LDY.B LevelLoadPos
    LDA.B LvlLoadObjSize
    AND.B #$0F
    STA.B _0
    LDA.B LvlLoadObjSize
    LSR A
    LSR A
    LSR A
    LSR A
    TAX
  - JSR StzTo6ePointer
    LDA.L DATA_0DCF10,X
    JSR CODE_0DA95B
    DEC.B _0
    BPL -
    RTS


DATA_0DCF30:
    db $90,$91,$A2

CODE_0DCF33:
    LDY.B LevelLoadPos
    LDA.B LvlLoadObjSize
    AND.B #$0F
    TAX
    LDA.B LvlLoadObjSize
    LSR A
    LSR A
    LSR A
    LSR A
    STA.B _0
  - JSR StzTo6ePointer
    LDA.L DATA_0DCF30,X
    STA.B [Map16LowPtr],Y
    JSR CODE_0DA97D
    DEC.B _0
    BPL -
    RTS

CODE_0DCF53:
    LDA.B LvlLoadObjSize
    AND.B #$0F
    TAX
    JSL ExecutePtrLong

    dl CODE_0DCF6E
    dl CODE_0DCFB1
    dl ADDR_0DCFF0
    dl CODE_0DD034
    dl CODE_0DCFB1
    dl CODE_0DD034

CODE_0DCF6E:
    LDY.B LevelLoadPos
    LDA.B LvlLoadObjSize
    LSR A
    LSR A
    LSR A
    LSR A
    TAX
    JSR CODE_0DA6B1                           ; Get Map16 data pointer in $04/$05.
CODE_0DCF7A:
    JSR StzTo6ePointer
    LDA.B #$8C
    JSR CODE_0DA95B
    JSR StzTo6ePointer
    LDA.B #$8D
    STA.B [Map16LowPtr],Y
    JSR CODE_0DA6BA                           ; Update Map16 pointer.
    LDA.B LevelLoadPos
    CLC
    ADC.B #$0E
    TAY
    BCC +
    JSR CODE_0DA987
  + TYA
    AND.B #$0F
    CMP.B #$0E
    BMI CODE_0DCFAB
    TYA
    CLC
    ADC.B #$10
    TAY
    BCC +
    JSR CODE_0DA987
  + JSR CODE_0DA9D6
CODE_0DCFAB:
    STY.B LevelLoadPos
    DEX
    BPL CODE_0DCF7A
    RTS

CODE_0DCFB1:
    LDA.B #$86
    CPX.B #$04
    BNE +
    LDA.B #$94
  + STA.B _0
    LDY.B LevelLoadPos
    LDA.B LvlLoadObjSize
    LSR A
    LSR A
    LSR A
    LSR A
    TAX
CODE_0DCFC4:
    JSR StzTo6ePointer
    LDA.B _0
    STA.B [Map16LowPtr],Y
    LDA.B LevelLoadPos
    CLC
    ADC.B #$0F
    TAY
    BCC +
    JSR CODE_0DA987
  + TYA
    AND.B #$0F
    CMP.B #$0F
    BMI CODE_0DCFEA
    TYA
    CLC
    ADC.B #$10
    TAY
    BCC +
    JSR CODE_0DA987
  + JSR CODE_0DA9D6
CODE_0DCFEA:
    STY.B LevelLoadPos
    DEX
    BPL CODE_0DCFC4
    RTS

ADDR_0DCFF0:
    LDY.B LevelLoadPos
    LDA.B LvlLoadObjSize
    LSR A
    LSR A
    LSR A
    LSR A
    TAX
    JSR CODE_0DA6B1                           ; Get Map16 data pointer in $04/$05.
ADDR_0DCFFC:
    JSR StzTo6ePointer
    LDA.B #$8E
    JSR CODE_0DA95B
    JSR StzTo6ePointer
    LDA.B #$8F
    STA.B [Map16LowPtr],Y
    JSR CODE_0DA6BA                           ; Update Map16 pointer.
    LDA.B LevelLoadPos
    CLC
    ADC.B #$10
    TAY
    BCC +
    JSR CODE_0DA987
  + TYA
    CLC
    ADC.B #$02
    TAY
    AND.B #$0F
    CMP.B #$02
    BPL +
    TYA
    SEC
    SBC.B #$10
    AND.B #$F1
    TAY
    JSR CODE_0DA9EF
  + STY.B LevelLoadPos
    DEX
    BPL ADDR_0DCFFC
    RTS

CODE_0DD034:
    LDA.B #$87
    CPX.B #$05
    BNE +
    LDA.B #$95
  + STA.B _0
    LDY.B LevelLoadPos
    LDA.B LvlLoadObjSize
    LSR A
    LSR A
    LSR A
    LSR A
    TAX
CODE_0DD047:
    JSR StzTo6ePointer
    LDA.B _0
    STA.B [Map16LowPtr],Y
    LDA.B LevelLoadPos
    CLC
    ADC.B #$10
    TAY
    BCC +
    JSR CODE_0DA987
  + TYA
    CLC
    ADC.B #$01
    TAY
    AND.B #$0F
    BNE +
    DEY
    TYA
    AND.B #$F0
    TAY
    JSR CODE_0DA9EF
  + STY.B LevelLoadPos
    DEX
    BPL CODE_0DD047
    RTS

ADDR_0DD070:
    LDA.B LvlLoadObjSize
    LSR A
    LSR A
    LSR A
    LSR A
    JSL ExecutePtrLong

    dl ADDR_0DD080
    dl ADDR_0DD0C3

ADDR_0DD080:
    LDY.B LevelLoadPos
    LDA.B LvlLoadObjSize
    AND.B #$0F
    TAX
ADDR_0DD087:
    JSR StzTo6ePointer
    LDA.B #$88
    STA.B [Map16LowPtr],Y
    TYA
    CLC
    ADC.B #$10
    TAY
    BCC +
    JSR CODE_0DA987
  + JSR StzTo6ePointer
    LDA.B #$8A
    STA.B [Map16LowPtr],Y
    TYA
    CLC
    ADC.B #$0F
    TAY
    BCC +
    JSR CODE_0DA987
  + TYA
    AND.B #$0F
    CMP.B #$0F
    BNE ADDR_0DD0BD
    TYA
    CLC
    ADC.B #$10
    TAY
    BCC +
    JSR CODE_0DA987
  + JSR CODE_0DA9D6
ADDR_0DD0BD:
    STY.B LevelLoadPos
    DEX
    BPL ADDR_0DD087
    RTS

ADDR_0DD0C3:
    LDY.B LevelLoadPos
    LDA.B LvlLoadObjSize
    AND.B #$0F
    TAX
ADDR_0DD0CA:
    JSR StzTo6ePointer
    LDA.B #$89
    STA.B [Map16LowPtr],Y
    TYA
    CLC
    ADC.B #$10
    TAY
    BCC +
    JSR CODE_0DA987
  + JSR StzTo6ePointer
    LDA.B #$8B
    STA.B [Map16LowPtr],Y
    TYA
    CLC
    ADC.B #$10
    TAY
    BCC +
    JSR CODE_0DA987
  + TYA
    CLC
    ADC.B #$01
    TAY
    AND.B #$0F
    BNE +
    DEY
    TYA
    AND.B #$F0
    TAY
    JSR CODE_0DA9EF
  + STY.B LevelLoadPos
    DEX
    BPL ADDR_0DD0CA
    RTS

CODE_0DD103:
    LDY.B LevelLoadPos
    LDA.B LvlLoadObjSize
    AND.B #$0F
    STA.B _0
    JSR Sta1To6ePointer
    LDX.B #$07
    LDA.B [Map16LowPtr],Y
    CMP.B #$73
    BMI +
    CMP.B #$76
    BPL +
    LDX.B #$0A
  + TXA
    JSR CODE_0DA95B
    JMP CODE_0DD12B

  - JSR Sta1To6ePointer
    LDA.B #$08
    JSR CODE_0DA95B
CODE_0DD12B:
    DEC.B _0
    BNE -
    JSR Sta1To6ePointer
    LDX.B #$09
    LDA.B [Map16LowPtr],Y
    CMP.B #$73
    BMI +
    CMP.B #$76
    BPL +
    LDX.B #$0B
  + TXA
    JSR CODE_0DA95B
    RTS

CODE_0DD145:
    LDY.B LevelLoadPos
    LDA.B LvlLoadObjSize
    AND.B #$0F
    STA.B _0
    LDA.B LvlLoadObjSize
    LSR A
    LSR A
    LSR A
    LSR A
    STA.B _1
    JSR CODE_0DA6B1                           ; Get Map16 data pointer in $04/$05.
CODE_0DD158:
    LDX.B _0
    JSR StzTo6ePointer
    LDA.B #$73
    JMP CODE_0DD167

  - JSR StzTo6ePointer
    LDA.B #$74
CODE_0DD167:
    JSR CODE_0DA95B
    DEX
    BNE -
    JSR StzTo6ePointer
    LDA.B #$75
    JSR CODE_0DA95B
    JSR CODE_0DA6BA                           ; Update Map16 pointer.
    LDX.B _0
    JSR CODE_0DA97D
    DEC.B _1
    BPL CODE_0DD158
    RTS

ADDR_0DD182:
    LDY.B LevelLoadPos
    LDA.B LvlLoadObjSize
    AND.B #$0F
    TAX
    JSR Sta1To6ePointer
    LDA.B #$59
    JMP ADDR_0DD196

  - JSR Sta1To6ePointer
    LDA.B #$5A
ADDR_0DD196:
    JSR CODE_0DA95B
    DEX
    BNE -
    JSR Sta1To6ePointer
    LDA.B #$5B
    JSR CODE_0DA95B
    RTS

ADDR_0DD1A5:
    LDY.B LevelLoadPos
    LDA.B LvlLoadObjSize
    LSR A
    LSR A
    LSR A
    LSR A
    TAX
    JSR Sta1To6ePointer
    LDA.B #$5C
    JMP ADDR_0DD1BB

  - JSR Sta1To6ePointer
    LDA.B #$5D
ADDR_0DD1BB:
    STA.B [Map16LowPtr],Y
    JSR CODE_0DA97D
    DEX
    BNE -
    JSR Sta1To6ePointer
    LDA.B #$5E
    STA.B [Map16LowPtr],Y
    RTS


DATA_0DD1CB:
    db $9A,$9C,$9E,$A0

DATA_0DD1CF:
    db $9B,$9D,$9F,$A1

DATA_0DD1D3:
    db $61,$62,$63,$64,$65,$66

CODE_0DD1D9:
    LDY.B LevelLoadPos
    LDA.B LvlLoadObjSize
    AND.B #$0F
    TAX
    LDA.B LvlLoadObjSize
    LSR A
    LSR A
    LSR A
    LSR A
    STA.B _0
    JSR CODE_0DA6B1                           ; Get Map16 data pointer in $04/$05.
    JSR StzTo6ePointer
    LDA.L DATA_0DD1CB,X
    JSR CODE_0DA95B
    JSR StzTo6ePointer
    LDA.L DATA_0DD1CF,X
    STA.B [Map16LowPtr],Y
    DEC.B _0
    BPL +
    JMP Return0DD24B

  + JSR CODE_0DA6BA                           ; Update Map16 pointer and move one row down.
    JSR CODE_0DA97D
    JSR Sta1To6ePointer
    LDA.B #$5F
    JSR CODE_0DA95B
    JSR Sta1To6ePointer
    LDA.B #$60
    STA.B [Map16LowPtr],Y
    DEC.B _0
    BMI Return0DD24B
    JSR CODE_0DA6BA                           ; Update Map16 pointer and move one row down.
    JSR CODE_0DA97D
    LDX.B #$00
CODE_0DD226:
    JSR Sta1To6ePointer
    LDA.L DATA_0DD1D3,X
    JSR CODE_0DA95B
    INX
    JSR Sta1To6ePointer
    LDA.L DATA_0DD1D3,X
    STA.B [Map16LowPtr],Y
    INX
    JSR CODE_0DA6BA                           ; Update Map16 pointer and move one row down.
    JSR CODE_0DA97D
    CPX.B #$06
    BNE +
    LDX.B #$00
  + DEC.B _0
    BPL CODE_0DD226
Return0DD24B:
    RTS


DATA_0DD24C:
    db $A3,$0E

CODE_0DD24E:
    LDY.B LevelLoadPos
    LDA.B LvlLoadObjSize
    AND.B #$0F
    STA.B _0
    STA.B _1
    JSR CODE_0DA6B1                           ; Get Map16 data pointer in $04/$05.
    LDX.B #$00
CODE_0DD25D:
    JSR StzTo6ePointer
    CPX.B #$00
    BEQ +
    JSR Sta1To6ePointer
  + LDA.L DATA_0DD24C,X
    JSR CODE_0DA95B
    DEC.B _1
    BPL CODE_0DD25D
    JSR CODE_0DA6BA                           ; Update Map16 pointer and move one row down.
    JSR CODE_0DA97D
    LDA.B _0
    STA.B _1
    INX
    CPX.B #$02
    BNE CODE_0DD25D
    RTS

    %insert_empty($17E,$17E,$17E,$17E,$17E)

Map16Tileset3:
    db $F0,$B5
    db $F0,$35,$F1,$B5,$F1,$35,$F1,$B5
    db $F1,$35,$F1,$B5,$F1,$35,$F1,$B5
    db $F1,$35,$F2,$B5,$F2,$35,$CF,$3D
    db $F8,$1C,$CF,$3D,$F8,$1C,$CB,$35
    db $D7,$35,$CC,$35,$D8,$35,$CD,$35
    db $D9,$35,$CC,$35,$D8,$35,$CD,$35
    db $D9,$35,$CE,$35,$DA,$35,$D7,$B5
    db $CB,$B5,$D8,$B5,$CC,$B5,$D9,$B5
    db $CD,$B5,$D8,$B5,$CC,$B5,$D9,$B5
    db $CD,$B5,$DA,$B5,$CE,$B5,$E3,$B5
    db $E3,$35,$F1,$B5,$F1,$35,$F1,$B5
    db $F1,$35,$E3,$B5,$E3,$35,$F0,$B5
    db $F0,$35,$E3,$B5,$E3,$35,$E3,$B5
    db $E3,$35,$F2,$B5,$F2,$35,$E6,$39
    db $E8,$39,$D2,$B5,$C2,$B5,$D1,$B5
    db $C1,$B5,$D2,$B5,$C2,$B5,$D1,$B5
    db $C1,$B5,$E7,$39,$E9,$39,$E8,$B9
    db $E6,$B9,$C2,$35,$D2,$35,$C1,$35
    db $D1,$35,$C2,$35,$D2,$35,$C1,$35
    db $D1,$35,$E9,$B9,$E7,$B9,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$00,$00
    db $00,$00,$00,$00,$00,$00,$F4,$11
    db $F6,$11,$F5,$11,$F7,$11,$F8,$11
    db $F8,$11,$F9,$11,$F9,$11,$F6,$91
    db $F4,$91,$F7,$91,$F5,$91,$FA,$11
    db $FD,$11,$FB,$11,$FE,$11,$FC,$11
    db $FF,$11,$FC,$11,$FF,$11,$FB,$51
    db $FE,$51,$FA,$51,$FD,$51,$4A,$2C
    db $FB,$2C,$4B,$2C,$FB,$2C,$4A,$2C
    db $FB,$2C,$48,$2C,$49,$2C,$FB,$2C
    db $FB,$2C,$49,$2C,$49,$2C,$C7,$29
    db $DB,$39,$C8,$29,$DC,$39,$C7,$29
    db $DC,$39,$C8,$29,$DC,$39,$C7,$29
    db $DC,$39,$C8,$29,$DF,$39,$DE,$09
    db $B0,$09,$C8,$09,$CA,$09,$C7,$09
    db $B0,$09,$C8,$09,$CA,$09,$C8,$09
    db $CA,$09,$C8,$09,$CA,$09,$F0,$B5
    db $F0,$35,$F1,$B5,$F1,$35,$F1,$B5
    db $F1,$35,$F1,$B5,$F1,$35,$F1,$B5
    db $F1,$35,$F2,$B5,$F2,$35,$92,$89
    db $94,$89,$93,$89,$95,$89,$E0,$11
    db $E3,$11,$E1,$11,$C3,$11,$FA,$1C
    db $C4,$11,$E2,$11,$FA,$1C,$FA,$1C
    db $E2,$D1,$D3,$11,$FA,$1C,$D4,$11
    db $FA,$1C,$FA,$1C,$E2,$91,$26,$14
    db $36,$14,$26,$54,$36,$54,$26,$18
    db $36,$18,$26,$58,$36,$58,$26,$1C
    db $36,$1C,$26,$5C,$36,$5C,$27,$1C
    db $37,$1C,$27,$5C,$37,$5C

CODE_0DD990:
; Unused.
; Tilemap data for Map16 tiles 073-0FF, in tileset 3 only.
; 8 bytes per 16x16, with 2 bytes per 8x8 (TTTTTTTT YXPCCCTT format).
; Ordered UL, BL, UR, BR.
; Tilemap data for Map16 tiles 107-110, in tileset 3 only.
; 8 bytes per 16x16, with 2 bytes per 8x8 (TTTTTTTT YXPCCCTT format).
; Ordered UL, BL, UR, BR.
; Tilemap data for Map16 tiles 153-16D, in tileset 3 only.
; 8 bytes per 16x16, with 2 bytes per 8x8 (TTTTTTTT YXPCCCTT format).
    SEP #$30                                  ; AXY->8; Ordered UL, BL, UR, BR.
    LDX.B LvlLoadObjNo
    DEX
    TXA
    JSL ExecutePtrLong

    dl CODE_0DA8C3
    dl CODE_0DA8C3
    dl CODE_0DA8C3
    dl CODE_0DA8C3
    dl CODE_0DA8C3
    dl CODE_0DA8C3
    dl CODE_0DA8C3
    dl CODE_0DA8C3
    dl CODE_0DA8C3
    dl CODE_0DA8C3
    dl CODE_0DA8C3
    dl CODE_0DA8C3
    dl CODE_0DA8C3
    dl CODE_0DA8C3
    dl CODE_0DAA26
    dl CODE_0DAAB4
    dl CODE_0DAB0D
    dl CODE_0DAB3E
    dl CODE_0DB075
    dl CODE_0DB1D4
    dl CODE_0DB224
    dl ADDR_0DB336
    dl CODE_0DB3BD
    dl CODE_0DB3E3
    dl CODE_0DB3E3
    dl CODE_0DB3E3
    dl CODE_0DB3E3
    dl CODE_0DB42D
    dl CODE_0DB461
    dl CODE_0DB49E
    dl CODE_0DB51F
    dl CODE_0DB547
    dl CODE_0DB1C8
    dl CODE_0DB3E3
    dl CODE_0DB3E3
    dl CODE_0DB3E3
    dl CODE_0DB3E3
    dl CODE_0DB3E3
    dl CODE_0DB3E3
    dl CODE_0DB3E3
    dl CODE_0DB3E3
    dl CODE_0DB3E3
    dl CODE_0DB3E3
    dl CODE_0DB3E3
    dl CODE_0DB3E3
    dl CODE_0DB3E3
    dl CODE_0DB3E3
    dl CODE_0DB3E3
    dl CODE_0DB3E3
    dl CODE_0DB3E3
    dl CODE_0DB3E3
    dl CODE_0DB916
    dl CODE_0DB91E
    dl CODE_0DE135
    dl CODE_0DDF3A
    dl CODE_0DDAC8
    dl CODE_0DDAF2
    dl CODE_0DDCA9
    dl CODE_0DDCA9
    dl CODE_0DDD87
    dl CODE_0DDCEA
    dl CODE_0DDD2E
    dl CODE_0DDD5C

CODE_0DDA57:
; Standard object pointers (GFX settings 3, 9, A, B, E); aka T:3.
; 01 - Water tiles 1, dark blue
; 02 - Invisible coin blocks
; 03 - Invisible noteblocks
; 04 - Invisible POW coins
; 05 - Coins
; 06 - Walk-through dirt
; 07 - Water tiles 2, variable color
; 08 - Noteblocks
; 09 - Turnblocks
; 0A - Coin ? blocks
; 0B - Throw blocks
; 0C - Munchers
; 0D - Gray cement blocks
; 0E - Brown "used" blocks
; 0F - Vertical pipe
; 10 - Horizontal pipe
; 11 - Bullet bill shooter
; 12 - Slope
; 13 - Ledge edge / Vine
; 14 - Ledge
; 15 - Midway point / Goal point
; 16 - Purple coins
; 17 - Rope / Clouds
; 18 - Amimated water
; 19 - Normal water
; 1A - Animated lava/mud
; 1B - Net (top)
; 1C - Donut bridge
; 1D - Net (bottom)
; 1E - Net (left/right)
; 1F - Skinny vertical pipe/bone/log
; 20 - Skinny horizontal pipe/bone/log
; 21 - Wide-scale ledge
; 22 - Unused (used internally by LM for direct map16 page 0)
; 23 - Unused (used internally by LM for direct map16 page 1)
; 24 - Unused (used internally by LM for the deprecated FG/BG/SP graphics system)
; 25 - Unused (used internally by LM for the deprecated AN2 graphics system)
; 26 - Unused (used internally by LM for bypassing music)
; 27 - Unused (used internally by LM for direct map16 objects on pages 00-3F)
; 28 - Unused (used internally by LM for bypassing the time limit)
; 29 - Unused (used internally by LM for direct map16 objects on pages 40-7F)
; 2A - Unused (reserved for future use by LM)
; 2B - Unused (reserved for future use by LM)
; 2C - Unused (reserved for future use by LM)
; 2D - Unused (reserved for 5-byte user defined objects)
; 2E - Tileset specific: Unused
; 2F - Tileset specific: Unused
; 30 - Tileset specific: Unused
; 31 - Tileset specific: Unused
; 32 - Tileset specific: Unused
; 33 - Tileset specific: Unused
; 34 - Tileset specific: Blue switch blocks
; 35 - Tileset specific: Red switch blocks
; 36 - Tileset specific: Four-sided edge ground square
; 37 - Tileset specific: Bowser's Castle canvasses
; 38 - Tileset specific: Right-facing mud/lava
; 39 - Tileset specific: Mud/lava slope
; 3A - Tileset specific: Mud/lava with top
; 3B - Tileset specific: Mud/lava tiles
; 3C - Tileset specific: Very steep slope
; 3D - Tileset specific: Upside-down ledge
; 3E - Tileset specific: Upside-down ledge edge
    LDY.B LevelLoadPos                        ; 3F - Tileset specific: Solid dirt
    JSR Sta1To6ePointer
    LDA.B #$FE
    STA.B [Map16LowPtr],Y
    RTS


DATA_0DDA61:
    db $7D,$7E,$7F,$80,$81,$82,$83

CODE_0DDA68:
    LDY.B LevelLoadPos
    LDA.B LvlLoadObjSize
    SEC
    SBC.B #$75
    TAX
    JSR StzTo6ePointer
    LDA.L DATA_0DDA61,X
    STA.B [Map16LowPtr],Y
    RTS


DATA_0DDA7A:
    db $81,$82,$83

DATA_0DDA7D:
    db $84,$85,$86

CODE_0DDA80:
    LDY.B LevelLoadPos
    LDA.B LvlLoadObjSize
    SEC
    SBC.B #$7C
    TAX
    JSR StzTo6ePointer
    LDA.L DATA_0DDA7A,X
    STA.B [Map16LowPtr],Y
    JSR CODE_0DA97D
    JSR StzTo6ePointer
    LDA.L DATA_0DDA7D,X
    STA.B [Map16LowPtr],Y
    RTS


DATA_0DDA9E:
    db $66,$67,$68,$69

CODE_0DDAA2:
    LDY.B LevelLoadPos
    LDX.B #$00
    JSR CODE_0DA6B1                           ; Get Map16 data pointer in $04/$05.
  - JSR Sta1To6ePointer
    LDA.L DATA_0DDA9E,X
    JSR CODE_0DA95B
    INX
    TXA
    AND.B #$01
    BNE -
    JSR CODE_0DA6BA                           ; Update Map16 pointer and move one row down.
    JSR CODE_0DA97D
    CPX.B #$04
    BNE -
    RTS


DATA_0DDAC4:
    db $5A,$5B

DATA_0DDAC6:
    db $5B,$5B

CODE_0DDAC8:
    LDY.B LevelLoadPos
    LDA.B LvlLoadObjSize
    AND.B #$0F
    TAX
    LDA.B LvlLoadObjSize
    LSR A
    LSR A
    LSR A
    LSR A
    STA.B _0
    JSR Sta1To6ePointer
    LDA.L DATA_0DDAC4,X
    JMP CODE_0DDAE8

  - JSR Sta1To6ePointer
    LDA.L DATA_0DDAC6,X
CODE_0DDAE8:
    STA.B [Map16LowPtr],Y
    JSR CODE_0DA97D
    DEC.B _0
    BPL -
    RTS

CODE_0DDAF2:
    LDA.B LvlLoadObjSize
    AND.B #$03
    JSL ExecutePtrLong

    dl CODE_0DDB06
    dl CODE_0DDB8F
    dl ADDR_0DDC02
    dl CODE_0DDC61

CODE_0DDB06:
    LDY.B LevelLoadPos
    LDA.B #$01
    STA.B _2
    STA.B _0
    JSR CODE_0DA6B1                           ; Get Map16 data pointer in $04/$05.
    LDA.B LvlLoadObjSize
    LSR A
    LSR A
    LSR A
    LSR A
    STA.B _0
    INC.B _0
CODE_0DDB1B:
    LDX.B _2
    JSR Sta1To6ePointer
    LDA.B #$D2
    JSR CODE_0DA95B
    JSR Sta1To6ePointer
    LDA.B #$D3
    JSR CODE_0DA95B
    DEX
    DEX
    BMI CODE_0DDB50
CODE_0DDB31:
    JSR Sta1To6ePointer
    LDA.B #$FB
    JSR CODE_0DA95B
    JSR Sta1To6ePointer
    LDA.B #$FF
    JSR CODE_0DA95B
    DEX
    JMP CODE_0DDB4D

  - JSR Sta1To6ePointer
    LDA.B #$FF
    JSR CODE_0DA95B
CODE_0DDB4D:
    DEX
    BPL -
CODE_0DDB50:
    JSR CODE_0DA6BA                           ; Update Map16 pointer.
    INC.B _2
    INC.B _2
    DEC.B _0
    BEQ CODE_0DDB84
    BPL +
    JMP Return0DDB8E

  + LDA.B LevelLoadPos
    CLC
    ADC.B #$0E
    TAY
    BCC +
    JSR CODE_0DA987
  + TYA
    AND.B #$0F
    CMP.B #$0E
    BMI CODE_0DDB7F
    TYA
    CLC
    ADC.B #$10
    TAY
    BCC +
    JSR CODE_0DA987
  + JSR CODE_0DA9D6
CODE_0DDB7F:
    STY.B LevelLoadPos
    JMP CODE_0DDB1B

CODE_0DDB84:
    LDX.B _2
    DEX
    DEX
    JSR CODE_0DA97D
    JMP CODE_0DDB31

Return0DDB8E:
    RTS

CODE_0DDB8F:
    LDY.B LevelLoadPos
    LDA.B #$00
    STA.B _2
    STA.B _0
    JSR CODE_0DA6B1                           ; Get Map16 data pointer in $04/$05.
    LDA.B LvlLoadObjSize
    LSR A
    LSR A
    LSR A
    LSR A
    STA.B _0
    INC.B _0
CODE_0DDBA4:
    LDX.B _2
    JSR Sta1To6ePointer
    LDA.B #$D6
    JSR CODE_0DA95B
CODE_0DDBAE:
    DEX
    BMI CODE_0DDBC7
    JSR Sta1To6ePointer
    LDA.B #$FD
    JSR CODE_0DA95B
    JMP CODE_0DDBC4

  - JSR Sta1To6ePointer
    LDA.B #$FF
    JSR CODE_0DA95B
CODE_0DDBC4:
    DEX
    BPL -
CODE_0DDBC7:
    JSR CODE_0DA6BA                           ; Update Map16 pointer.
    INC.B _2
    DEC.B _0
    BEQ CODE_0DDBF9
    BPL +
    JMP Return0DDC01

  + LDA.B LevelLoadPos
    CLC
    ADC.B #$0F
    TAY
    BCC +
    JSR CODE_0DA987
  + TYA
    AND.B #$0F
    CMP.B #$0F
    BNE CODE_0DDBF4
    TYA
    CLC
    ADC.B #$10
    TAY
    BCC +
    JSR CODE_0DA987
  + JSR CODE_0DA9D6
CODE_0DDBF4:
    STY.B LevelLoadPos
    JMP CODE_0DDBA4

CODE_0DDBF9:
    LDX.B _2
    JSR CODE_0DA97D
    JMP CODE_0DDBAE

Return0DDC01:
    RTS

ADDR_0DDC02:
    LDY.B LevelLoadPos
    LDX.B #$01
    STX.B _2
    STX.B _0
    JSR CODE_0DA6B1                           ; Get Map16 data pointer in $04/$05.
    LDA.B LvlLoadObjSize
    LSR A
    LSR A
    LSR A
    LSR A
    STA.B _0
    INC.B _0
    JMP ADDR_0DDC3D

  - JSR Sta1To6ePointer
    LDA.B #$FF
    JSR CODE_0DA95B
    DEX
ADDR_0DDC23:
    CPX.B #$03
    BNE -
    JSR Sta1To6ePointer
    LDA.B #$FF
    JSR CODE_0DA95B
    JSR Sta1To6ePointer
    LDA.B #$FC
    JSR CODE_0DA95B
    DEX
    DEX
    LDA.B _0
    BEQ Return0DDC5D
ADDR_0DDC3D:
    JSR Sta1To6ePointer
    LDA.B #$D4
    JSR CODE_0DA95B
    JSR Sta1To6ePointer
    LDA.B #$D5
    JSR CODE_0DA95B
    JSR CODE_0DA6BA                           ; Update Map16 pointer and move one row down.
    JSR CODE_0DA97D
    INC.B _2
    INC.B _2
    LDX.B _2
    DEC.B _0
    BPL +
Return0DDC5D:
    RTS

  + JMP ADDR_0DDC23

CODE_0DDC61:
    LDY.B LevelLoadPos
    LDX.B #$00
    STX.B _2
    STX.B _0
    JSR CODE_0DA6B1                           ; Get Map16 data pointer in $04/$05.
    LDA.B LvlLoadObjSize
    LSR A
    LSR A
    LSR A
    LSR A
    STA.B _0
    INC.B _0
    JMP CODE_0DDC8E

  - JSR Sta1To6ePointer
    LDA.B #$FF
    JSR CODE_0DA95B
    DEX
CODE_0DDC82:
    CPX.B #$01
    BNE -
    JSR Sta1To6ePointer
    LDA.B #$FE
    JSR CODE_0DA95B
CODE_0DDC8E:
    LDA.B _0
    BEQ Return0DDCA8
    JSR Sta1To6ePointer
    LDA.B #$D7
    JSR CODE_0DA95B
    JSR CODE_0DA6BA                           ; Update Map16 pointer and move one row down.
    JSR CODE_0DA97D
    INC.B _2
    LDX.B _2
    DEC.B _0
    BPL CODE_0DDC82
Return0DDCA8:
    RTS

CODE_0DDCA9:
    LDY.B LevelLoadPos
    LDA.B LvlLoadObjSize
    AND.B #$0F
    STA.B _0
    LDA.B LvlLoadObjSize
    LSR A
    LSR A
    LSR A
    LSR A
    STA.B _1
    JSR CODE_0DA6B1                           ; Get Map16 data pointer in $04/$05.
    TXA
    LDX.B _0
    SEC
    SBC.B #$39
    BNE CODE_0DDCD2
  - JSR Sta1To6ePointer
    LDA.B #$59
    JSR CODE_0DA95B
    DEX
    BPL -
    JMP CODE_0DDCDD

CODE_0DDCD2:
    JSR Sta1To6ePointer
    LDA.B #$FF
    JSR CODE_0DA95B
    DEX
    BPL CODE_0DDCD2
CODE_0DDCDD:
    JSR CODE_0DA6BA                           ; Update Map16 pointer and move one row down.
    JSR CODE_0DA97D
    LDX.B _0
    DEC.B _1
    BPL CODE_0DDCD2
    RTS

CODE_0DDCEA:
    LDY.B LevelLoadPos
    LDA.B LvlLoadObjSize
    LSR A
    LSR A
    LSR A
    LSR A
    STA.B _0
    LDA.B LvlLoadObjSize
    AND.B #$0F
    STA.B _1
    JSR CODE_0DA6B1                           ; Get Map16 data pointer in $04/$05.
    LDA.B _0
    BEQ CODE_0DDD18
CODE_0DDD01:
    LDX.B _1
  - JSR Sta1To6ePointer
    LDA.B #$65
    JSR CODE_0DA95B
    DEX
    BPL -
    JSR CODE_0DA6BA                           ; Update Map16 pointer and move one row down.
    JSR CODE_0DA97D
    DEC.B _0
    BNE CODE_0DDD01
CODE_0DDD18:
    LDX.B _1
  - JSR Sta1To6ePointer
    LDA.B #$4E
    JSR CODE_0DA95B
    DEX
    BPL -
    RTS


DATA_0DDD26:
    db $50,$50,$51,$51

DATA_0DDD2A:
    db $4D,$50,$4F,$51

CODE_0DDD2E:
    LDY.B LevelLoadPos
    LDA.B LvlLoadObjSize
    LSR A
    LSR A
    LSR A
    LSR A
    STA.B _0
    LDA.B LvlLoadObjSize
    AND.B #$0F
    TAX
    LDA.B _0
    BEQ CODE_0DDD51
  - JSR Sta1To6ePointer
    LDA.L DATA_0DDD26,X
    STA.B [Map16LowPtr],Y
    JSR CODE_0DA97D
    DEC.B _0
    BNE -
CODE_0DDD51:
    JSR Sta1To6ePointer
    LDA.L DATA_0DDD2A,X
    JSR CODE_0DA95B
    RTS

CODE_0DDD5C:
    LDY.B LevelLoadPos
    LDA.B LvlLoadObjSize
    LSR A
    LSR A
    LSR A
    LSR A
    STA.B _0
    LDA.B LvlLoadObjSize
    AND.B #$0F
    STA.B _1
    JSR CODE_0DA6B1                           ; Get Map16 data pointer in $04/$05.
CODE_0DDD6F:
    LDX.B _1
  - JSR Sta1To6ePointer
    LDA.B #$65
    JSR CODE_0DA95B
    DEX
    BPL -
    JSR CODE_0DA6BA                           ; Update Map16 pointer and move one row down.
    JSR CODE_0DA97D
    DEC.B _0
    BPL CODE_0DDD6F
    RTS

CODE_0DDD87:
    LDA.B LvlLoadObjSize
    LSR A
    LSR A
    LSR A
    LSR A
    AND.B #$01
    JSL ExecutePtrLong

    dl CODE_0DDD99
    dl CODE_0DDE3C

CODE_0DDD99:
    LDY.B LevelLoadPos
    LDA.B LvlLoadObjSize
    AND.B #$0F
    STA.B _0
    ASL A
    CLC
    ADC.B #$02
    STA.B _1
CODE_0DDDA7:
    JSR CODE_0DA6B1                           ; Get Map16 data pointer in $04/$05.
    LDX.B _1
    JSR Sta1To6ePointer
    LDA.B #$CA
    STA.B [Map16LowPtr],Y
    TYA
    CLC
    ADC.B #$10
    TAY
    BCC +
    LDA.B Map16LowPtr+1
    ADC.B #$00
    STA.B Map16LowPtr+1
    STA.B Map16HighPtr+1
  + JSR Sta1To6ePointer
    LDA.B #$CB
    STA.B [Map16LowPtr],Y
    TYA
    CLC
    ADC.B #$10
    TAY
    BCC +
    LDA.B Map16LowPtr+1
    ADC.B #$00
    STA.B Map16LowPtr+1
    STA.B Map16HighPtr+1
  + JSR Sta1To6ePointer
    LDA.B #$F1
    STA.B [Map16LowPtr],Y
    TYA
    CLC
    ADC.B #$10
    TAY
    BCC +
    LDA.B Map16LowPtr+1
    ADC.B #$00
    STA.B Map16LowPtr+1
    STA.B Map16HighPtr+1
  + DEX
    DEX
    JMP CODE_0DDE09

CODE_0DDDF3:
    JSR StzTo6ePointer
    LDA.B #$3F
    STA.B [Map16LowPtr],Y
    TYA
    CLC
    ADC.B #$10
    TAY
    BCC CODE_0DDE09
    LDA.B Map16LowPtr+1
    ADC.B #$00
    STA.B Map16LowPtr+1
    STA.B Map16HighPtr+1
CODE_0DDE09:
    DEX
    BPL CODE_0DDDF3
    JSR CODE_0DA6BA                           ; Update Map16 pointer.
    LDA.B LevelLoadPos
    CLC
    ADC.B #$1F
    TAY
    BCC +
    JSR CODE_0DA987
  + TYA
    AND.B #$0F
    CMP.B #$0F
    BNE CODE_0DDE2E
    TYA
    CLC
    ADC.B #$10
    TAY
    BCC +
    JSR CODE_0DA987
  + JSR CODE_0DA9D6
CODE_0DDE2E:
    STY.B LevelLoadPos
    DEC.B _1
    DEC.B _1
    DEC.B _0
    BMI +
    JMP CODE_0DDDA7

  + RTS

CODE_0DDE3C:
    LDY.B LevelLoadPos
    LDA.B LvlLoadObjSize
    AND.B #$0F
    STA.B _0
    ASL A
    CLC
    ADC.B #$02
    STA.B _1
CODE_0DDE4A:
    JSR CODE_0DA6B1                           ; Get Map16 data pointer in $04/$05.
    LDX.B _1
    JSR Sta1To6ePointer
    LDA.B #$CC
    STA.B [Map16LowPtr],Y
    TYA
    CLC
    ADC.B #$10
    TAY
    BCC +
    LDA.B Map16LowPtr+1
    ADC.B #$00
    STA.B Map16LowPtr+1
    STA.B Map16HighPtr+1
  + JSR Sta1To6ePointer
    LDA.B #$CD
    STA.B [Map16LowPtr],Y
    TYA
    CLC
    ADC.B #$10
    TAY
    BCC +
    LDA.B Map16LowPtr+1
    ADC.B #$00
    STA.B Map16LowPtr+1
    STA.B Map16HighPtr+1
  + JSR Sta1To6ePointer
    LDA.B #$F2
    STA.B [Map16LowPtr],Y
    TYA
    CLC
    ADC.B #$10
    TAY
    BCC +
    LDA.B Map16LowPtr+1
    ADC.B #$00
    STA.B Map16LowPtr+1
    STA.B Map16HighPtr+1
  + DEX
    DEX
    JMP CODE_0DDEAC

CODE_0DDE96:
    JSR StzTo6ePointer
    LDA.B #$3F
    STA.B [Map16LowPtr],Y
    TYA
    CLC
    ADC.B #$10
    TAY
    BCC CODE_0DDEAC
    LDA.B Map16LowPtr+1
    ADC.B #$00
    STA.B Map16LowPtr+1
    STA.B Map16HighPtr+1
CODE_0DDEAC:
    DEX
    BPL CODE_0DDE96
    JSR CODE_0DA6BA                           ; Update Map16 pointer.
    LDA.B LevelLoadPos
    CLC
    ADC.B #$20
    TAY
    BCC +
    JSR CODE_0DA987
  + TYA
    CLC
    ADC.B #$01
    TAY
    AND.B #$0F
    BNE +
    JSR CODE_0DA9EF
    DEY
    TYA
    AND.B #$F0
    TAY
  + STY.B LevelLoadPos
    DEC.B _1
    DEC.B _1
    DEC.B _0
    BMI +
    JMP CODE_0DDE4A

  + RTS


DATA_0DDEDC:
    db $5C

DATA_0DDEDD:
    db $5D

DATA_0DDEDE:
    db $5E,$60,$73,$74,$75,$62,$63,$64
    db $5F,$76,$76,$76

DATA_0DDEEA:
    db $50,$58,$94,$9C,$D0,$D8,$14,$1C
DATA_0DDEF2:
    db $C8,$C8,$C8,$C8,$C8,$C8,$C9,$C9

DATA_0DDEFA:
    dw Map16TilesLow
    dw Map16TilesLow+$1B0
    dw Map16TilesLow+$360
    dw Map16TilesLow+$510
    dw Map16TilesLow+$6C0
    dw Map16TilesLow+$870
    dw Map16TilesLow+$A20
    dw Map16TilesLow+$BD0
    dw Map16TilesLow+$D80
    dw Map16TilesLow+$F30
    dw Map16TilesLow+$10E0
    dw Map16TilesLow+$1290
    dw Map16TilesLow+$1440
    dw Map16TilesLow+$15F0
    dw Map16TilesLow+$17A0
    dw Map16TilesLow+$1950
DATA_0DDF1A:
    dw Map16TilesHigh
    dw Map16TilesHigh+$1B0
    dw Map16TilesHigh+$360
    dw Map16TilesHigh+$510
    dw Map16TilesHigh+$6C0
    dw Map16TilesHigh+$870
    dw Map16TilesHigh+$A20
    dw Map16TilesHigh+$BD0
    dw Map16TilesHigh+$D80
    dw Map16TilesHigh+$F30
    dw Map16TilesHigh+$10E0
    dw Map16TilesHigh+$1290
    dw Map16TilesHigh+$1440
    dw Map16TilesHigh+$15F0
    dw Map16TilesHigh+$17A0
    dw Map16TilesHigh+$1950

CODE_0DDF3A:
    LDA.B LvlLoadObjSize
    AND.B #$0F
    STA.B LvlLoadObjSize
    JSR CODE_0DA6B1                           ; Get Map16 data pointer in $04/$05.
    LDY.B #$50
    STY.B LevelLoadPos
    LDA.B #$0F
    STA.B _0
    LDA.B #$04
    STA.B _1
CODE_0DDF4F:
    LDX.B _0
  - JSR Sta1To6ePointer
    LDA.B #$61
    JSR CODE_0DA95B
    DEX
    BPL -
    JSR CODE_0DA6BA                           ; Update Map16 pointer.
    LDA.B LevelLoadPos
    CLC
    ADC.B #$40
    STA.B LevelLoadPos
    TAY
    BCC +
    JSR CODE_0DA987
  + DEC.B _1
    BPL CODE_0DDF4F
    LDA.B #$00
    STA.B Map16LowPtr
    STA.B _4
    STA.B Map16HighPtr
    LDA.B #$00
    STA.B _0
    LDA.B #$07
    STA.B _3
CODE_0DDF80:
    LDA.B #$02
    STA.B _1
    LDX.B _0
    LDA.L DATA_0DDEEA,X
    STA.B LevelLoadPos
    TAY
    LDA.L DATA_0DDEF2,X
    STA.B Map16LowPtr+1
    STA.B _5
    STA.B Map16HighPtr+1
    LDA.B #$03
    STA.B _2
    LDX.B #$00
  - JSR Sta1To6ePointer
    LDA.L DATA_0DDEDC,X
    JSR CODE_0DA95B
    INX
    DEC.B _2
    BPL -
    JSR CODE_0DA6BA                           ; Update Map16 pointer and move one row down.
    JSR CODE_0DA97D
  - JSR StzTo6ePointer
    LDA.L DATA_0DDEDC,X
    JSR CODE_0DA95B
    JSR StzTo6ePointer
    LDA.L DATA_0DDEDD,X
    JSR CODE_0DA95B
    JSR StzTo6ePointer
    LDA.L DATA_0DDEDE,X
    STA.B [Map16LowPtr],Y
    JSR CODE_0DA97D
    DEC.B _1
    BPL -
    INX
    INX
    INX
    LDA.B #$03
    STA.B _2
  - JSR Sta1To6ePointer
    LDA.L DATA_0DDEDC,X
    JSR CODE_0DA95B
    INX
    DEC.B _2
    BPL -
    JSR CODE_0DA6BA                           ; Update Map16 pointer.
    LDA.B #$02
    STA.B _2
    JSR CODE_0DA97D
  - JSR StzTo6ePointer
    LDA.L DATA_0DDEDC,X
    JSR CODE_0DA95B
    INX
    DEC.B _2
    BPL -
    DEC.B _3
    BMI +
    INC.B _0
    JMP CODE_0DDF80

  + LDA.B #$01
    STA.B _8
    LDA.B #$00
    STA.B _9
CODE_0DE016:
    REP #$30                                  ; AXY->16
    LDA.B _8
    ASL A
    TAX
    LDA.L DATA_0DDEFA,X
    STA.B _4
    LDA.L DATA_0DDF1A,X
    STA.B _6
    LDA.W #$01B0
    STA.B _0
    LDA.W #$C800
    STA.B _2
    PHB
    LDA.B _0
    LDX.B _2
    LDY.B _4
    MVN $7E,$7E
    PLB
    LDA.W #$01B0
    STA.B _0
    LDA.W #$C800
    STA.B _2
    PHB
    LDA.B _0
    LDX.B _2
    LDY.B _6
    MVN $7F,$7F
    PLB
    SEP #$30                                  ; AXY->8
    DEC.B LvlLoadObjSize
    BEQ +
    INC.B _8
    JMP CODE_0DE016

  + RTS


DATA_0DE05E:
    db $5C,$5D,$5E,$60,$73,$74,$75,$73
    db $74,$75,$73,$74,$75,$73,$74,$75
    db $76,$76,$76,$5C,$5D,$5E,$60,$77
    db $78,$79,$7A,$7B,$7C,$77,$78,$79
    db $7A,$7B,$7C,$76,$76,$76,$5C,$5D
    db $5E,$60,$73,$7D,$75,$73,$7E,$75
    db $73,$74,$75,$7F,$74,$75,$76,$76
    db $76,$5C,$5D,$5E,$60,$77,$82,$83
    db $7A,$85,$86,$81,$78,$79,$84,$7B
    db $7C,$76,$76,$76

DATA_0DE0AA:
    db $00,$13,$26,$39

CODE_0DE0AE:
    LDY.B LevelLoadPos
    LDA.B LvlLoadObjSize
    SEC
    SBC.B #$71
    TAX
    LDA.L DATA_0DE0AA,X
    TAX
    JSR CODE_0DA6B1                           ; Get Map16 data pointer in $04/$05.
    LDA.B #$02
    STA.B _1
    LDA.B #$03
    STA.B _2
  - JSR Sta1To6ePointer
    LDA.L DATA_0DE05E,X
    JSR CODE_0DA95B
    INX
    DEC.B _2
    BPL -
    JSR CODE_0DA6BA                           ; Update Map16 pointer and move one row down.
    JSR CODE_0DA97D
CODE_0DE0DB:
    LDA.B #$02
    STA.B _2
  - JSR StzTo6ePointer
    LDA.L DATA_0DE05E,X
    JSR CODE_0DA95B
    INX
    DEC.B _2
    BPL -
    JSR CODE_0DA6BA                           ; Update Map16 pointer and move one row down.
    JSR CODE_0DA97D
    DEC.B _1
    BPL CODE_0DE0DB
    LDA.B #$02
    STA.B _2
  - JSR StzTo6ePointer
    LDA.L DATA_0DE05E,X
    JSR CODE_0DA95B
    INX
    DEC.B _2
    BPL -
    JSR Sta1To6ePointer
    LDA.B #$5F
    STA.B [Map16LowPtr],Y
    JSR CODE_0DA6BA                           ; Update Map16 pointer.
    LDA.B #$02
    STA.B _2
    JSR CODE_0DA97D
  - JSR StzTo6ePointer
    LDA.L DATA_0DE05E,X
    JSR CODE_0DA95B
    INX
    DEC.B _2
    BPL -
    RTS


DATA_0DE12C:
    db $45,$50,$4D

DATA_0DE12F:
    db $00,$F0,$4E

DATA_0DE132:
    db $48,$51,$4F

CODE_0DE135:
    LDY.B LevelLoadPos
    LDA.B LvlLoadObjSize
    AND.B #$0F
    STA.B _0
    LDA.B LvlLoadObjSize
    LSR A
    LSR A
    LSR A
    LSR A
    STA.B _1
    JSR CODE_0DA6B1                           ; Get Map16 data pointer in $04/$05.
    LDX.B #$00
CODE_0DE14A:
    LDA.B _0
    STA.B _2
    JSR Sta1To6ePointer
    LDA.L DATA_0DE12C,X
    JSR CODE_0DA95B
    JMP CODE_0DE165

  - JSR Sta1To6ePointer
    LDA.L DATA_0DE12F,X
    JSR CODE_0DA95B
CODE_0DE165:
    DEC.B _2
    BNE -
    JSR Sta1To6ePointer
    LDA.L DATA_0DE132,X
    STA.B [Map16LowPtr],Y
    JSR CODE_0DA6BA                           ; Update Map16 pointer and move one row down.
    JSR CODE_0DA97D
    LDX.B #$01
    DEC.B _1
    BMI Return0DE185
    BNE +
    LDX.B #$02
  + JMP CODE_0DE14A

Return0DE185:
    RTS

    %insert_empty($17A,$17A,$17A,$17A,$17A)

Map16Tileset4:
    db $82,$1D,$82,$DD,$82,$DD
    db $83,$1D,$82,$1D,$86,$1D,$82,$DD
    db $82,$1D,$82,$1D,$82,$DD,$89,$1D
    db $82,$1D,$8A,$1D,$82,$DD,$82,$DD
    db $82,$1D,$7A,$05,$7A,$85,$7A,$45
    db $7A,$C5,$88,$0D,$98,$0D,$89,$0D
    db $99,$0D,$98,$0D,$98,$0D,$99,$0D
    db $99,$0D,$F8,$1C,$85,$4D,$82,$4D
    db $84,$4D,$81,$4D,$83,$4D,$80,$4D
    db $F8,$1C,$F8,$1C,$85,$4D,$85,$4D
    db $84,$4D,$84,$4D,$83,$4D,$83,$4D
    db $F8,$1C,$80,$0D,$F8,$1C,$81,$0D
    db $83,$0D,$82,$0D,$84,$0D,$F8,$1C
    db $85,$0D,$83,$0D,$F8,$1C,$84,$0D
    db $83,$0D,$85,$0D,$84,$0D,$F8,$1C
    db $85,$0D,$20,$0D,$20,$8D,$20,$0D
    db $20,$8D,$30,$0D,$30,$0D,$30,$4D
    db $30,$4D,$F8,$1C,$8D,$4D,$8D,$4D
    db $8C,$4D,$8C,$4D,$8B,$4D,$8B,$4D
    db $F8,$1C,$8B,$0D,$F8,$1C,$8C,$0D
    db $8B,$0D,$8D,$0D,$8C,$0D,$F8,$1C
    db $8D,$0D,$8E,$2D,$8E,$AD,$F8,$3C
    db $F8,$3C,$F8,$3C,$9A,$2D,$F8,$3C
    db $9B,$2D,$F8,$3C,$9B,$2D,$F8,$3C
    db $9B,$2D,$F8,$3C,$9B,$2D,$F8,$3C
    db $9A,$6D,$F8,$08,$F8,$08,$AB,$0D
    db $F8,$08,$AC,$0D,$BC,$0D,$AD,$0D
    db $BD,$0D,$CC,$0D,$F8,$08,$CD,$0D
    db $F8,$08,$CD,$4D,$F8,$08,$CC,$4D
    db $F8,$08,$AD,$4D,$BD,$4D,$AC,$4D
    db $BC,$4D,$AB,$4D,$F8,$08,$F8,$08
    db $F8,$08,$31,$0D,$32,$0D,$32,$0D
    db $31,$0D,$31,$0D,$F8,$1C,$32,$0D
    db $31,$0D,$F8,$1C,$32,$0D,$F8,$1C
    db $31,$0D,$31,$0D,$32,$0D,$32,$0D
    db $F8,$1C,$F8,$1C,$32,$0D,$F8,$1C
    db $F8,$1C,$20,$0D,$20,$8D,$9E,$0D
    db $AE,$0D,$9F,$0D,$AF,$0D,$9F,$4D
    db $AF,$4D,$9E,$4D,$AE,$4D,$20,$0D
    db $20,$8D,$F8,$1C,$F8,$1C,$BE,$0D
    db $BE,$0D,$BF,$0D,$CF,$0D,$BF,$4D
    db $CF,$4D,$BE,$4D,$BE,$4D,$F8,$1C
    db $F8,$1C,$8D,$0D,$8C,$0D,$BE,$0D
    db $EE,$0D,$DF,$0D,$EF,$0D,$DF,$4D
    db $EF,$4D,$BE,$4D,$EE,$4D,$8D,$4D
    db $8C,$4D,$60,$11,$60,$91,$49,$51
    db $48,$D1,$49,$11,$48,$91,$49,$51
    db $48,$D1,$49,$11,$48,$91,$60,$51
    db $60,$D1,$8F,$09,$AA,$09,$AA,$09
    db $8F,$09,$43,$41,$43,$41,$39,$01
    db $39,$01,$26,$01,$27,$81,$26,$01
    db $27,$81,$63,$01,$73,$01,$62,$01
    db $72,$01,$4C,$01,$73,$01,$4B,$01
    db $72,$01,$4A,$01,$71,$01,$4B,$01
    db $72,$01,$61,$01,$71,$01,$62,$01
    db $72,$01,$3E,$01,$73,$01,$3F,$01
    db $72,$01,$3E,$01,$71,$01,$3F,$01
    db $72,$01,$40,$01,$3B,$01,$41,$01
    db $45,$81,$42,$01,$45,$81,$40,$41
    db $3B,$01,$3C,$41,$3C,$01,$45,$01
    db $45,$81,$45,$01,$45,$81,$3C,$01
    db $3C,$41,$3D,$01,$40,$01,$45,$01
    db $41,$01,$45,$01,$42,$01,$3D,$01
    db $40,$41,$41,$01,$45,$01,$41,$01
    db $45,$01,$45,$81,$41,$01,$45,$81
    db $41,$01,$3E,$01,$3F,$01,$3F,$01
    db $3E,$01,$26,$01,$27,$81,$26,$01
    db $C2,$01,$26,$01,$C3,$01,$26,$01
    db $C4,$01,$26,$01,$C5,$01,$26,$01
    db $C6,$01,$26,$01,$C7,$01,$26,$01
    db $C8,$01,$26,$01,$C9,$01,$26,$01
    db $27,$81,$4A,$01,$71,$01,$D2,$01
    db $E2,$01,$D3,$01,$E3,$01,$D4,$01
    db $E4,$01,$D5,$01,$E5,$01,$D6,$01
    db $E6,$01,$D7,$01,$E7,$01,$D8,$01
    db $E8,$01,$D9,$01,$E9,$01,$4A,$01
    db $72,$01,$3E,$01,$73,$01,$3F,$01
    db $3E,$01,$3E,$01,$3F,$01,$3F,$01
    db $72,$01,$3D,$01,$3C,$01,$FA,$1C
    db $FA,$1C,$FA,$1C,$FA,$1C,$FA,$1C
    db $FA,$1C,$FA,$1C,$FA,$1C,$3D,$21
    db $3C,$21,$26,$21,$27,$A1,$26,$21
    db $27,$A1,$3E,$21,$3F,$21,$3F,$21
    db $3E,$21,$FA,$1C,$FA,$1C,$3D,$01
    db $3C,$01,$BB,$09,$F2,$09,$BB,$09
    db $F2,$09,$F0,$09,$F0,$09,$F0,$09
    db $F0,$09,$F8,$1C,$F8,$1C,$44,$14
    db $46,$14,$F8,$1C,$F8,$1C,$45,$14
    db $47,$14,$F8,$08,$F8,$08,$95,$19
    db $95,$19,$96,$19,$96,$19,$97,$19
    db $97,$19,$F8,$08,$8E,$09,$8B,$09
    db $8F,$09,$8C,$09,$FF,$08,$8D,$09
    db $FF,$08,$A4,$09,$FF,$08,$A4,$09
    db $FF,$08,$98,$09,$FF,$08,$99,$09
    db $FF,$08,$9A,$09,$9B,$09,$F8,$08
    db $9C,$09,$A6,$09,$B6,$09,$FF,$08
    db $FF,$08,$FF,$08,$FF,$08,$FF,$08
    db $FF,$08,$9D,$09,$9F,$09,$9E,$09
    db $A7,$09,$F1,$09,$F1,$09,$FF,$08
    db $FF,$08,$FF,$08,$FF,$08,$A5,$09
    db $A5,$09,$F1,$09,$B2,$09,$A3,$09
    db $B3,$09,$FF,$08,$B2,$09,$A3,$09
    db $B3,$09,$FF,$08,$B4,$09,$A3,$09
    db $B5,$09,$FF,$08,$B2,$09,$A3,$09
    db $92,$09,$FF,$08,$93,$09,$A3,$09
    db $94,$09,$FF,$08,$B2,$09,$A5,$09
    db $B3,$09,$A8,$09,$A8,$09,$A9,$09
    db $A9,$09,$C4,$1D,$D4,$1D,$C5,$1D
    db $D5,$1D,$F8,$08,$F8,$08,$E6,$0D
    db $F6,$0D,$E7,$0D,$F7,$0D,$E8,$0D
    db $F8,$0D,$E9,$09,$F9,$09,$A9,$09
    db $A9,$09,$F8,$08,$C0,$09,$95,$19
    db $C1,$09,$96,$19,$C1,$09,$97,$19
    db $C3,$09,$F8,$08,$C3,$49,$F8,$08
    db $F8,$08,$F8,$08,$AA,$09,$F8,$08
    db $AB,$09,$E4,$1D,$F4,$09,$E5,$1D
    db $F5,$09,$D0,$09,$D0,$09,$D1,$09
    db $E1,$09,$D2,$09,$D2,$09,$D3,$09
    db $E3,$09,$D3,$49,$E3,$49,$F8,$08
    db $AA,$09,$B1,$89,$B0,$09,$B0,$89
    db $B1,$09,$80,$14,$90,$14,$81,$14
    db $91,$14,$AC,$15,$BC,$15,$AD,$15
    db $BD,$15,$AD,$55,$BD,$55,$AC,$55
    db $BC,$55,$CC,$15,$DC,$19,$CD,$15
    db $DD,$19,$CD,$55,$DE,$19,$CC,$55
    db $DF,$19,$AC,$19,$BC,$19,$AD,$19
    db $BD,$19,$AD,$59,$BD,$59,$AC,$59
    db $BC,$59,$CC,$19,$DC,$19,$CD,$19
    db $DD,$19,$CD,$59,$DE,$19,$CC,$59
    db $DF,$19,$AC,$1D,$BC,$1D,$AD,$1D
    db $BD,$1D,$AD,$5D,$BD,$5D,$AC,$5D
    db $BC,$5D,$CC,$1D,$DC,$19,$CD,$1D
    db $DD,$19,$CD,$5D,$DE,$19,$CC,$5D
    db $DF,$19,$AE,$1D,$BE,$1D,$AF,$1D
    db $BF,$1D,$AF,$5D,$BF,$5D,$AE,$5D
    db $BE,$5D,$CE,$1D,$DC,$19,$CF,$1D
    db $DD,$19,$CF,$5D,$DE,$19,$CE,$5D
    db $DF,$19,$A6,$01,$B6,$01,$A7,$01
    db $B7,$01,$A6,$41,$B6,$41,$20,$0D
    db $20,$8D,$B6,$01,$DC,$01,$B7,$01
    db $DD,$01,$B6,$41,$DC,$41,$20,$0D
    db $20,$8D,$80,$09,$EA,$09,$81,$09
    db $EB,$09,$81,$49,$EB,$49,$81,$09
    db $EB,$09,$81,$49,$EB,$49,$80,$49
    db $EA,$49,$A2,$09,$9D,$4D,$A3,$09
    db $9C,$0D,$A2,$09,$9C,$0D,$A3,$09
    db $9C,$0D,$A2,$09,$9C,$0D,$A3,$09
    db $9D,$0D,$D1,$09,$F1,$89,$D1,$09
    db $F1,$89,$A8,$15,$B8,$09,$A9,$15
    db $B9,$09,$EC,$09,$B0,$09,$ED,$09
    db $B1,$09,$82,$1D,$84,$1D,$87,$1D
    db $FD,$1D,$82,$1D,$82,$DD,$82,$DD
    db $82,$1D,$82,$1D,$84,$1D,$82,$DD
    db $85,$1D,$82,$1D,$82,$DD,$87,$1D
    db $88,$1D,$FA,$19,$FD,$19,$FB,$19
    db $FE,$19,$FC,$19,$FF,$19,$FC,$19
    db $FF,$19,$FB,$59,$FE,$59,$FA,$59
    db $FD,$59,$CE,$01,$DE,$01,$CE,$01
    db $DE,$01,$EC,$01,$EC,$01,$ED,$01
    db $ED,$01,$ED,$41,$ED,$41,$EC,$41
    db $EC,$41,$87,$DD,$88,$DD,$82,$DD
    db $82,$1D,$84,$DD,$82,$DD,$85,$DD
    db $82,$1D,$90,$09,$A0,$09,$91,$09
    db $A1,$09,$B0,$09,$C0,$09,$B1,$09
    db $C1,$09,$B1,$49,$C1,$49,$B0,$49
    db $C0,$49,$B2,$09,$BA,$09,$D1,$09
    db $F1,$89,$D1,$09,$F1,$89,$B3,$09
    db $BA,$09,$BA,$09,$BA,$09,$BB,$09
    db $F2,$09,$BB,$09,$F2,$09,$BA,$09
    db $BA,$09,$BA,$09,$BA,$09,$F0,$09
    db $F0,$09,$E0,$11,$EB,$11,$E1,$11
    db $CA,$11,$FA,$1C,$CB,$11,$EA,$11
    db $FA,$1C,$FA,$1C,$EA,$D1,$DA,$11
    db $FA,$1C,$DB,$11,$FA,$1C,$FA,$1C
    db $EA,$91,$F0,$09,$F0,$09,$BA,$09
    db $BA,$09,$BA,$09,$B4,$09,$F0,$09
    db $D1,$09,$F0,$09,$D1,$09,$F0,$09
    db $D1,$09,$F0,$09,$D1,$09,$BA,$09
    db $B5,$09

CODE_0DE890:
; Unused, currently.
; $0DE190   | Used by LM to access the secondary exit tables, for the exit expansion.
; ($05F800)
; ($05FA00)
; ($05FC00)
; $0DE1B0   | Used by LM for extended object 02 (5-byte screen exit).
; Used by LM for extended object 01 (screen jump).
; Used by LM for extended object 03 (vertical screen jump).
; Subroutine added by Lunar Magic for clearing $8A/$8B.
; Unused...?
; Tilemap data for Map16 tiles 073-0FF, in tileset 4 only.
; 8 bytes per 16x16, with 2 bytes per 8x8 (TTTTTTTT YXPCCCTT format).
; Ordered UL, BL, UR, BR.
; Tilemap data for Map16 tiles 107-110, in tileset 4 only.
; 8 bytes per 16x16, with 2 bytes per 8x8 (TTTTTTTT YXPCCCTT format).
; Ordered UL, BL, UR, BR.
; Tilemap data for Map16 tiles 153-16D, in tileset 4 only.
; 8 bytes per 16x16, with 2 bytes per 8x8 (TTTTTTTT YXPCCCTT format).
    SEP #$30                                  ; AXY->8; Ordered UL, BL, UR, BR.
    LDX.B LvlLoadObjNo
    DEX
    TXA
    JSL ExecutePtrLong

    dl CODE_0DA8C3
    dl CODE_0DA8C3
    dl CODE_0DA8C3
    dl CODE_0DA8C3
    dl CODE_0DA8C3
    dl CODE_0DA8C3
    dl CODE_0DA8C3
    dl CODE_0DA8C3
    dl CODE_0DA8C3
    dl CODE_0DA8C3
    dl CODE_0DA8C3
    dl CODE_0DA8C3
    dl CODE_0DA8C3
    dl CODE_0DA8C3
    dl CODE_0DAA26
    dl CODE_0DAAB4
    dl CODE_0DAB0D
    dl CODE_0DAB3E
    dl CODE_0DB075
    dl CODE_0DB1D4
    dl CODE_0DB224
    dl ADDR_0DB336
    dl CODE_0DB3BD
    dl CODE_0DB3E3
    dl CODE_0DB3E3
    dl CODE_0DB3E3
    dl CODE_0DB3E3
    dl CODE_0DB42D
    dl CODE_0DB461
    dl CODE_0DB49E
    dl CODE_0DB51F
    dl CODE_0DB547
    dl CODE_0DB1C8
    dl CODE_0DB3E3
    dl CODE_0DB3E3
    dl CODE_0DB3E3
    dl CODE_0DB3E3
    dl CODE_0DB3E3
    dl CODE_0DB3E3
    dl CODE_0DB3E3
    dl CODE_0DB3E3
    dl CODE_0DB3E3
    dl CODE_0DB3E3
    dl CODE_0DB3E3
    dl CODE_0DB3E3
    dl CODE_0DF06C
    dl ADDR_0DF066
    dl CODE_0DF02B
    dl CODE_0DEFA8
    dl CODE_0DEF67
    dl CODE_0DEF45
    dl CODE_0DEEC0
    dl CODE_0DECC9
    dl CODE_0DECC9
    dl CODE_0DED12
    dl CODE_0DED43
    dl CODE_0DED6B
    dl CODE_0DED99
    dl CODE_0DEDB9
    dl CODE_0DEDDB
    dl CODE_0DEE17
    dl CODE_0DEE52
    dl CODE_0DEE89

DATA_0DE957:
    db $73,$74,$75,$76,$93,$94,$95,$96

CODE_0DE95F:
    LDY.B LevelLoadPos                        ; Standard object pointers (GFX settings 4, 5, D); aka T:4.
; 01 - Water tiles 1, dark blue
; 02 - Invisible coin blocks
; 03 - Invisible noteblocks
; 03 - Invisible noteblocks
; 04 - Invisible POW coins
; 05 - Coins
; 06 - Walk-through dirt
; 07 - Water tiles 2, variable color
; 08 - Noteblocks
; 09 - Turnblocks
; 0A - Coin ? blocks
; 0B - Throw blocks
; 0C - Munchers
; 0D - Gray cement blocks
; 0E - Brown "used" blocks
; 0F - Vertical pipe
; 10 - Horizontal pipe
; 11 - Bullet bill shooter
; 12 - Slope
; 13 - Ledge edge / Vine
; 14 - Ledge
; 15 - Midway point / Goal point
; 16 - Purple coins
; 17 - Rope / Clouds
; 18 - Amimated water
; 19 - Normal water
; 1A - Animated lava/mud
; 1B - Net (top)
; 1C - Donut bridge
; 1D - Net (bottom)
; 1E - Net (left/right)
; 1F - Skinny vertical pipe/bone/log
; 20 - Skinny horizontal pipe/bone/log
; 21 - Wide-scale ledge
; 22 - Unused (used internally by LM for direct map16 page 0)
; 23 - Unused (used internally by LM for direct map16 page 1)
; 24 - Unused (used internally by LM for the deprecated FG/BG/SP graphics system)
; 25 - Unused (used internally by LM for the deprecated AN2 graphics system)
; 26 - Unused (used internally by LM for bypassing music)
; 27 - Unused (used internally by LM for direct map16 objects on pages 00-3F)
; 28 - Unused (used internally by LM for bypassing the time limit)
; 29 - Unused (used internally by LM for direct map16 objects on pages 40-7F)
; 2A - Unused (reserved for future use by LM)
; 2B - Unused (reserved for future use by LM)
; 2C - Unused (reserved for future use by LM)
; 2D - Unused (reserved for 5-byte user defined objects)
; 2E - Tileset specific: Thin horizontal upward spikes
; 2F - Tileset specific: Log background
; 30 - Tileset specific: Grass ledge 1
; 31 - Tileset specific: Wooden crate
; 32 - Tileset specific: Grass ledge 2
; 33 - Tileset specific: Ghost house cloud
; 34 - Tileset specific: Wood ledge on column
; 35 - Tileset specific: Gray bricks background
; 36 - Tileset specific: Wooden blocks
; 37 - Tileset specific: Horizontal log background, hand rail
; 38 - Tileset specific: Wood ledge without column
; 39 - Tileset specific: Vertical log background
; 3A - Tileset specific: Solid brick edges, thin vertical spikes
; 3B - Tileset specific: Wood ledge (switch palace)
; 3C - Tileset specific: Upside down ledge (switch palace)
; 3D - Tileset specific: Ledge (switch palace)
; 3E - Tileset specific: Right facing edge (switch palace)
    LDA.B LvlLoadObjSize                      ; 3F - Tileset specific: Left facing edge (switch palace)
    SEC
    SBC.B #$57
    TAX
    JSR StzTo6ePointer
    LDA.L DATA_0DE957,X
    STA.B [Map16LowPtr],Y
    RTS

ADDR_0DE971:
    LDA.B #$03
    STA.B _0
    LDY.B #$00
  - JSR StzTo6ePointer
    LDA.B #$77
    STA.B [Map16LowPtr],Y
    INY
    BNE -
    LDA.B Map16LowPtr+1
    CLC
    ADC.B #$01
    STA.B Map16LowPtr+1
    STA.B Map16HighPtr+1
    DEC.B _0
    BPL -
    RTS


DATA_0DE98F:
    db $97,$98,$99,$9A,$9B,$9C,$9D,$9E
    db $9F,$86,$87,$25,$25,$86,$87,$25
    db $25,$86,$25,$84,$85,$84,$85,$25
    db $85,$25,$25

CODE_0DE9AA:
    LDY.B LevelLoadPos
    LDA.B LvlLoadObjSize
    SEC
    SBC.B #$61
    STA.B _0
    ASL A
    ASL A
    ASL A
    CLC
    ADC.B _0
    TAX
    LDA.B #$02
    STA.B _0
    STA.B _1
    JSR CODE_0DA6B1                           ; Get Map16 data pointer in $04/$05.
  - JSR StzTo6ePointer
    LDA.L DATA_0DE98F,X
    JSR CODE_0DA95B
    INX
    DEC.B _0
    BPL -
    JSR CODE_0DA6BA                           ; Update Map16 pointer and move one row down.
    JSR CODE_0DA97D
    LDA.B #$02
    STA.B _0
    DEC.B _1
    BPL -
    RTS


DATA_0DE9E1:
    db $8C,$8D,$25,$8E,$90,$91,$8F,$25
    db $FC,$FD,$FE,$FF

CODE_0DE9ED:
    LDA.B LvlLoadObjSize
    SEC
    SBC.B #$64
    ASL A
    ASL A
    TAX
CODE_0DE9F5:
    LDY.B LevelLoadPos
    LDA.B #$01
    STA.B _0
    STA.B _1
    JSR CODE_0DA6B1                           ; Get Map16 data pointer in $04/$05.
  - JSR StzTo6ePointer
    LDA.L DATA_0DE9E1,X
    JSR CODE_0DA95B
    INX
    DEC.B _0
    BPL -
    JSR CODE_0DA6BA                           ; Update Map16 pointer and move one row down.
    JSR CODE_0DA97D
    LDA.B #$01
    STA.B _0
    DEC.B _1
    BPL -
    RTS


DATA_0DEA1E:
    db $25,$25,$7A,$7B,$25,$7C,$7D,$25
    db $7C,$7D,$25,$25,$7D,$25,$25,$25
    db $7E,$7F,$25,$25,$25,$80,$81,$25
    db $25,$25,$80,$81,$25,$25,$25,$80

ADDR_0DEA3E:
    LDY.B LevelLoadPos
    LDA.B LvlLoadObjSize
    SEC
    SBC.B #$66
    ASL A
    ASL A
    ASL A
    ASL A
    TAX
    LDA.B #$03
    STA.B _0
    STA.B _1
    JSR CODE_0DA6B1                           ; Get Map16 data pointer in $04/$05.
  - JSR StzTo6ePointer
    LDA.L DATA_0DEA1E,X
    JSR CODE_0DA95B
    INX
    DEC.B _0
    BPL -
    JSR CODE_0DA6BA                           ; Update Map16 pointer and move one row down.
    JSR CODE_0DA97D
    LDA.B #$03
    STA.B _0
    DEC.B _1
    BPL -
    RTS


DATA_0DEA71:
    db $A5,$A5,$A4,$A5,$A5,$A4,$A7,$A8
    db $A4,$A7,$A8,$A4,$AC,$AD,$A4,$AC
    db $AD,$A4,$AE,$AF,$A4,$AE,$AF,$A4
    db $B0,$B1,$A4,$B0,$B1,$A4,$A7,$A8
    db $A4,$A7,$A8,$A4,$A5,$A5,$A5,$A5
    db $A5,$A4,$B4,$B4,$B4,$B4,$B4,$A4
    db $AC,$B2,$AD,$B4,$B4,$A4,$B0,$B3
    db $B1,$B4,$B4,$A4,$C1,$C2,$C6,$B4
    db $B4,$A4,$C1,$C2,$C6,$A5,$A5,$A4
    db $C1,$C2,$C6,$A7,$A8,$A4

CODE_0DEABF:
    LDY.B LevelLoadPos
    LDX.B #$00
CODE_0DEAC3:
    LDA.B #$05
    STA.B _0
  - JSR StzTo6ePointer
    LDA.L DATA_0DEA71,X
    JSR CODE_0DA95B
    INX
    DEC.B _0
    BPL -
    JSR CODE_0DA97D
    CPX.B #$4E
    BNE CODE_0DEAC3
    RTS


DATA_0DEADE:
    db $A4,$A6,$A9,$A9,$A9,$A9,$A9,$A9
    db $A9,$A9,$A4,$A5,$A5,$A5,$A5,$A5
    db $A5,$A5,$A5,$A5,$A4,$C0,$A8,$A8
    db $A8,$A8,$AB,$AB,$A8,$A8,$A4,$A6
    db $AC,$AD,$C0,$AC,$AD,$A6,$AC,$AD
    db $A4,$A6,$AE,$AF,$A6,$AE,$AF,$BF
    db $AE,$AF,$A4,$BF,$B0,$B1,$AB,$B0
    db $B1,$A6,$B0,$B1,$A4,$A6,$AB,$A8
    db $A9,$A8,$AB,$A9,$A8,$A8,$A4,$A5
    db $A5,$A5,$B5,$B6,$B7,$B8,$B9,$A5
    db $A4,$A7,$A8,$AB,$BA,$BB,$BC,$BD
    db $BE,$A8,$A4,$C0,$AC,$AD,$A6,$AC
    db $B2,$AD,$BF,$AC,$A4,$A7,$AE,$AF
    db $C0,$AE,$B3,$AF,$AB,$AE,$A4,$BF
    db $B0,$B1,$A6,$C1,$C2,$C3,$A6,$B0
    db $A4,$A5,$A5,$A5,$A5,$C1,$C2,$C3
    db $C4,$C4,$A4,$B4,$B4,$B4,$B4,$C1
    db $C2,$C3,$C5,$C5

CODE_0DEB6A:
    LDY.B LevelLoadPos
    LDX.B #$00
CODE_0DEB6E:
    LDA.B #$09
    STA.B _0
  - JSR StzTo6ePointer
    LDA.L DATA_0DEADE,X
    JSR CODE_0DA95B
    INX
    DEC.B _0
    BNE -
    JSR StzTo6ePointer
    LDA.L DATA_0DEADE,X
    STA.B [Map16LowPtr],Y
    INX
    JSR CODE_0DA97D
    CPX.B #$8C
    BNE CODE_0DEB6E
    RTS


DATA_0DEB93:
    db $25,$25,$25,$25,$25,$25,$25,$25
    db $25,$25,$25,$CB,$CC,$25,$25,$25
    db $25,$CD,$CE,$CF,$CF,$CF,$CF,$CF
    db $CF,$CF,$CF,$CF,$CF,$D0,$D1,$25
    db $25,$D2,$EB,$D3,$D3,$D3,$EB,$D3
    db $D3,$D3,$D3,$EB,$D3,$D3,$D4,$25
    db $25,$D5,$D3,$EB,$D3,$D3,$D3,$D3
    db $D3,$EB,$D3,$D3,$D3,$EB,$D6,$25
    db $25,$D5,$D3,$D3,$D3,$D3,$D3,$EB
    db $D3,$D3,$D3,$D3,$D3,$D3,$D6,$25
    db $25,$D7,$D8,$D9,$D8,$D8,$D9,$D8
    db $D8,$D9,$D8,$DA,$DB,$D8,$DC,$25
    db $25,$25,$25,$DD,$25,$25,$DD,$25
    db $25,$DD,$25,$CB,$CC,$25,$25,$25
    db $25,$25,$DE,$DD,$25,$25,$DD,$25
    db $25,$DD,$25,$CB,$CC,$25,$25,$25
    db $25,$DF,$E0,$E1,$25,$25,$DD,$25
    db $25,$DD,$25,$E2,$E3,$E4,$25,$25
    db $E5,$E5,$E6,$DD,$E5,$E5,$DD,$E5
    db $E5,$DD,$E5,$E7,$E8,$E9,$E5,$E5

CODE_0DEC33:
    LDY.B LevelLoadPos
    LDX.B #$00
CODE_0DEC37:
    LDA.B #$0F
    STA.B _0
  - JSR StzTo6ePointer
    LDA.L DATA_0DEB93,X
    JSR CODE_0DA95B
    INX
    DEC.B _0
    BNE -
    JSR StzTo6ePointer
    LDA.L DATA_0DEB93,X
    STA.B [Map16LowPtr],Y
    INX
    JSR CODE_0DA97D
    CPX.B #$A0
    BNE CODE_0DEC37
    RTS

CODE_0DEC5C:
    LDY.B LevelLoadPos
    JSR Sta1To6ePointer
    LDA.B #$10
    STA.B [Map16LowPtr],Y
    RTS

ADDR_0DEC66:
    CMP.B #$CA
ADDR_0DEC68:
    LDY.B LevelLoadPos
    LDX.B #$00
  - JSR StzTo6ePointer
    LDA.L ADDR_0DEC66,X
    STA.B [Map16LowPtr],Y
    JSR CODE_0DA97D
    INX
    CPX.B #$02
    BNE -
    RTS


DATA_0DEC7E:
    db $EC,$ED,$EE,$EF,$F0,$F1,$F2,$F3
    db $F4,$F5,$F6,$F7,$F8,$F9,$FA,$FB

CODE_0DEC8E:
; Switch palace switch tiles.
; Green
; Yellow
; Blue
; Red
    LDY.B LevelLoadPos                        ; Extended objects 8A-8D: Switch palace switches
    LDA.B LvlLoadObjSize
    SEC
    SBC.B #$8A                                ; Return without creating the object if the switch has already been pressed.
    TAX
    %WorL_X(LDA,SwitchBlockFlags)
    BNE Return0DECC0
    TXA
    ASL A
    ASL A
    TAX
    LDA.B #$01
    STA.B _0
    STA.B _1
CODE_0DECA6:
    LDA.B _0
    STA.B _2
  - JSR StzTo6ePointer
    LDA.L DATA_0DEC7E,X
    JSR CODE_0DA95B
    INX
    DEC.B _2
    BPL -
    JSR CODE_0DA97D
    DEC.B _1
    BPL CODE_0DECA6
Return0DECC0:
    RTS

CODE_0DECC1:
    LDX.B #$08                                ; Extended object 8F: Ghost House window
    JMP CODE_0DE9F5


DATA_0DECC6:
    db $92,$5E,$82

CODE_0DECC9:
    TXA                                       ; Tileset-specific objects 35/36: Wooden blocks, gray bricks background
    SEC
    SBC.B #$34
    TAX
CODE_0DECCE:
    LDY.B LevelLoadPos
    LDA.B LvlLoadObjSize
    AND.B #$0F
    STA.B _0
    STA.B _2
    LDA.B LvlLoadObjSize
    LSR A
    LSR A
    LSR A
    LSR A
    STA.B _1
    JSR CODE_0DA6B1                           ; Get Map16 data pointer in $04/$05.
CODE_0DECE3:
    JSR StzTo6ePointer
    CPX.B #$01
    BNE +
    JSR Sta1To6ePointer
  + LDA.L DATA_0DECC6,X
    JSR CODE_0DA95B
    DEC.B _2
    LDA.B _2
    BPL CODE_0DECE3
    JSR CODE_0DA6BA                           ; Update Map16 pointer and move one row down.
    JSR CODE_0DA97D
    LDA.B _0
    STA.B _2
    DEC.B _1
    BPL CODE_0DECE3
    RTS


DATA_0DED09:
    db $82,$89,$88

DATA_0DED0C:
    db $82,$8A,$88

DATA_0DED0F:
    db $82,$8B,$88

CODE_0DED12:
    LDY.B LevelLoadPos
    LDA.B LvlLoadObjSize
    AND.B #$0F
    STA.B _0
    LDA.B LvlLoadObjSize
    LSR A
    LSR A
    LSR A
    LSR A
    TAX
    JSR StzTo6ePointer
    LDA.L DATA_0DED09,X
    JMP CODE_0DED32

  - JSR StzTo6ePointer
    LDA.L DATA_0DED0C,X
CODE_0DED32:
    JSR CODE_0DA95B
    DEC.B _0
    BNE -
    JSR StzTo6ePointer
    LDA.L DATA_0DED0F,X
    STA.B [Map16LowPtr],Y
    RTS

CODE_0DED43:
    LDY.B LevelLoadPos
    LDA.B LvlLoadObjSize
    AND.B #$0F
    TAX
CODE_0DED4A:
    JSR Sta1To6ePointer
    LDA.B #$0A
    JMP CODE_0DED57

  - JSR Sta1To6ePointer
    LDA.B #$0B
CODE_0DED57:
    JSR CODE_0DA95B
    DEX
    BNE -
    JSR Sta1To6ePointer
    LDA.B #$0C
    STA.B [Map16LowPtr],Y
    RTS


DATA_0DED65:
    db $83,$78,$79

DATA_0DED68:
    db $83,$79,$79

CODE_0DED6B:
    LDY.B LevelLoadPos
    LDA.B LvlLoadObjSize
    LSR A
    LSR A
    LSR A
    LSR A
    STA.B _0
    LDA.B LvlLoadObjSize
    AND.B #$0F
    TAX
    JSR StzTo6ePointer
    LDA.L DATA_0DED65,X
    JMP CODE_0DED8B

  - JSR StzTo6ePointer
    LDA.L DATA_0DED68,X
CODE_0DED8B:
    STA.B [Map16LowPtr],Y
    JSR CODE_0DA97D
    DEC.B _0
    BPL -
    RTS


DATA_0DED95:
    db $5F,$60,$5A,$5B

CODE_0DED99:
    LDA.B LvlLoadObjSize
    AND.B #$0F
    TAX
    LDY.B LevelLoadPos
    LDA.B LvlLoadObjSize
    LSR A
    LSR A
    LSR A
    LSR A
    STA.B _0
  - JSR Sta1To6ePointer
    LDA.L DATA_0DED95,X
    STA.B [Map16LowPtr],Y
    JSR CODE_0DA97D
    DEC.B _0
    BPL -
    RTS

CODE_0DEDB9:
    LDY.B LevelLoadPos
    LDA.B LvlLoadObjSize
    AND.B #$0F
    TAX
    JSR Sta1To6ePointer
    LDA.B #$07
    JMP CODE_0DEDCD

  - JSR Sta1To6ePointer
    LDA.B #$08
CODE_0DEDCD:
    JSR CODE_0DA95B
    DEX
    BNE -
    JSR Sta1To6ePointer
    LDA.B #$09
    STA.B [Map16LowPtr],Y
    RTS

CODE_0DEDDB:
    LDY.B LevelLoadPos
    LDA.B LvlLoadObjSize
    AND.B #$0F
    STA.B _0
    LDA.B LvlLoadObjSize
    LSR A
    LSR A
    LSR A
    LSR A
    STA.B _1
    JSR CODE_0DA6B1                           ; Get Map16 data pointer in $04/$05.
    LDX.B _0
    LDA.B _1
    BEQ CODE_0DEE0B
  - JSR Sta1To6ePointer
    LDA.B #$53
    JSR CODE_0DA95B
    DEX
    BPL -
    JSR CODE_0DA6BA                           ; Update Map16 pointer and move one row down.
    JSR CODE_0DA97D
    LDX.B _0
    DEC.B _1
    BNE -
CODE_0DEE0B:
    JSR Sta1To6ePointer
    LDA.B #$54
    JSR CODE_0DA95B
    DEX
    BPL CODE_0DEE0B
    RTS

CODE_0DEE17:
    LDY.B LevelLoadPos
    LDA.B LvlLoadObjSize
    AND.B #$0F
    STA.B _0
    LDA.B LvlLoadObjSize
    LSR A
    LSR A
    LSR A
    LSR A
    STA.B _1
    JSR CODE_0DA6B1                           ; Get Map16 data pointer in $04/$05.
    LDX.B _0
  - JSR Sta1To6ePointer
    LDA.B #$5D
    JSR CODE_0DA95B
    DEX
    BPL -
    JMP CODE_0DEE45

  - JSR Sta1To6ePointer
    LDA.B #$53
    JSR CODE_0DA95B
    DEX
    BPL -
CODE_0DEE45:
    JSR CODE_0DA6BA                           ; Update Map16 pointer and move one row down.
    JSR CODE_0DA97D
    LDX.B _0
    DEC.B _1
    BPL -
    RTS

CODE_0DEE52:
    LDY.B LevelLoadPos
    LDA.B LvlLoadObjSize
    AND.B #$0F
    STA.B _0
    LDA.B LvlLoadObjSize
    LSR A
    LSR A
    LSR A
    LSR A
    STA.B _1
    JSR CODE_0DA6B1                           ; Get Map16 data pointer in $04/$05.
CODE_0DEE65:
    LDX.B _0
    BEQ CODE_0DEE74
  - JSR Sta1To6ePointer
    LDA.B #$53
    JSR CODE_0DA95B
    DEX
    BNE -
CODE_0DEE74:
    JSR Sta1To6ePointer
    LDA.B #$55
    JSR CODE_0DA95B
    JSR CODE_0DA6BA                           ; Update Map16 pointer and move one row down.
    JSR CODE_0DA97D
    LDX.B _0
    DEC.B _1
    BPL CODE_0DEE65
    RTS

CODE_0DEE89:
    LDY.B LevelLoadPos
    LDA.B LvlLoadObjSize
    AND.B #$0F
    STA.B _0
    LDA.B LvlLoadObjSize
    LSR A
    LSR A
    LSR A
    LSR A
    STA.B _1
    JSR CODE_0DA6B1                           ; Get Map16 data pointer in $04/$05.
CODE_0DEE9C:
    JSR Sta1To6ePointer
    LDA.B #$5C
    JSR CODE_0DA95B
    LDX.B _0
    BEQ CODE_0DEEB3
  - JSR Sta1To6ePointer
    LDA.B #$53
    JSR CODE_0DA95B
    DEX
    BPL -
CODE_0DEEB3:
    JSR CODE_0DA6BA                           ; Update Map16 pointer and move one row down.
    JSR CODE_0DA97D
    LDX.B _0
    DEC.B _1
    BPL CODE_0DEE9C
    RTS

CODE_0DEEC0:
    LDY.B LevelLoadPos
    LDA.B LvlLoadObjSize
    AND.B #$0F
    STA.B _0
    ASL A
    ASL A
    CLC
    ADC.B #$02
    TAX
    LDA.B LvlLoadObjSize
    LSR A
    LSR A
    LSR A
    LSR A
    STA.B _1
    JSR CODE_0DA6B1                           ; Get Map16 data pointer in $04/$05.
    JSR CODE_0DED4A
    JSR CODE_0DA6BA                           ; Update Map16 pointer.
    LDA.B LevelLoadPos
    CLC
    ADC.B #$01
    TAY
    AND.B #$0F
    BNE +
    LDA.B LevelLoadPos
    AND.B #$F0
    TAY
    JSR CODE_0DA9EF
  + TYA
    CLC
    ADC.B #$10
    STA.B LevelLoadPos
    TAY
    BCC CODE_0DEEFD
    JSR CODE_0DA987
CODE_0DEEFD:
    JSR CODE_0DA6BA                           ; Update Map16 pointer.
    LDX.B _1
    JSR StzTo6ePointer
    LDA.B #$78
    JMP CODE_0DEF0F

CODE_0DEF0A:
    JSR StzTo6ePointer
    LDA.B #$79
CODE_0DEF0F:
    STA.B [Map16LowPtr],Y
    TYA
    CLC
    ADC.B #$10
    TAY
    BCC +
    LDA.B Map16LowPtr+1
    CLC
    ADC.B #$01
    STA.B Map16LowPtr+1
    STA.B Map16HighPtr+1
  + DEX
    BNE CODE_0DEF0A
    JSR CODE_0DA6BA                           ; Update Map16 pointer.
    LDA.B LevelLoadPos
    CLC
    ADC.B #$04
    TAY
    AND.B #$0F
    CMP.B #$04
    BPL +
    TYA
    SEC
    SBC.B #$10
    TAY
    JSR CODE_0DA9EF
  + STY.B LevelLoadPos
    DEC.B _0
    BMI +
    JMP CODE_0DEEFD

  + RTS

CODE_0DEF45:
    LDY.B LevelLoadPos
    LDA.B LvlLoadObjSize
    AND.B #$0F
    TAX
    JSR StzTo6ePointer
    LDA.B #$A0
    JMP CODE_0DEF59

  - JSR StzTo6ePointer
    LDA.B #$A1
CODE_0DEF59:
    JSR CODE_0DA95B
    DEX
    BNE -
    JSR StzTo6ePointer
    LDA.B #$A2
    STA.B [Map16LowPtr],Y
    RTS

CODE_0DEF67:
    LDY.B LevelLoadPos
    LDA.B LvlLoadObjSize
    AND.B #$0F
    STA.B _0
    LDA.B LvlLoadObjSize
    LSR A
    LSR A
    LSR A
    LSR A
    STA.B _1
    LDX.B _0
    JSR CODE_0DA6B1                           ; Get Map16 data pointer in $04/$05.
  - JSR Sta1To6ePointer
    LDA.B #$0E
    JSR CODE_0DA95B
    DEX
    BPL -
CODE_0DEF87:
    DEC.B _1
    BMI Return0DEFA1
    JSR CODE_0DA6BA                           ; Update Map16 pointer.
    JSR CODE_0DA97D
    LDX.B _0
  - JSR StzTo6ePointer
    LDA.B #$A3
    JSR CODE_0DA95B
    DEX
    BPL -
    JMP CODE_0DEF87

Return0DEFA1:
    RTS


DATA_0DEFA2:
    db $63,$65

DATA_0DEFA4:
    db $C7,$C8

DATA_0DEFA6:
    db $64,$6A

CODE_0DEFA8:
    LDY.B LevelLoadPos
    LDA.B LvlLoadObjSize
    AND.B #$0F
    STA.B _0
    LDA.B LvlLoadObjSize
    LSR A
    LSR A
    LSR A
    LSR A
    STA.B _1
    JSR CODE_0DA6B1                           ; Get Map16 data pointer in $04/$05.
    LDA.B _0
    STA.B _2
    JSR Sta1To6ePointer
    LDA.B #$61
    BNE +
  - JSR Sta1To6ePointer
    LDA.B #$0D
  + JSR CODE_0DA95B
    DEC.B _2
    BNE -
    JSR Sta1To6ePointer
    LDA.B #$62
    STA.B [Map16LowPtr],Y
    LDX.B #$01
    JMP CODE_0DEFFE

CODE_0DEFDE:
    JSR Sta1To6ePointer
    LDA.L DATA_0DEFA2,X
    BNE +
  - JSR StzTo6ePointer
    LDA.L DATA_0DEFA4,X
  + JSR CODE_0DA95B
    DEC.B _2
    BNE -
    JSR Sta1To6ePointer
    LDA.L DATA_0DEFA6,X
    STA.B [Map16LowPtr],Y
CODE_0DEFFE:
    JSR CODE_0DA6BA                           ; Update Map16 pointer.
    LDA.B _0
    STA.B _2
    TXA
    EOR.B #$01
    TAX
    JSR CODE_0DA97D
    DEC.B _1
    BNE CODE_0DEFDE
    JSR Sta1To6ePointer
    LDA.B #$6B
    BNE +
  - JSR Sta1To6ePointer
    LDA.B #$6C
  + JSR CODE_0DA95B
    DEC.B _0
    BNE -
    JSR Sta1To6ePointer
    LDA.B #$6D
    STA.B [Map16LowPtr],Y
    RTS

CODE_0DF02B:
    LDY.B LevelLoadPos
    LDA.B LvlLoadObjSize
    AND.B #$0F
    STA.B _0
    LDA.B LvlLoadObjSize
    LSR A
    LSR A
    LSR A
    LSR A
    STA.B _1
    JSR CODE_0DA6B1                           ; Get Map16 data pointer in $04/$05.
    LDX.B _0
  - JSR Sta1To6ePointer
    LDA.B #$0F
    JSR CODE_0DA95B
    DEX
    BPL -
    JMP CODE_0DF05B

CODE_0DF04E:
    LDX.B _0
  - JSR StzTo6ePointer
    LDA.B #$EA
    JSR CODE_0DA95B
    DEX
    BPL -
CODE_0DF05B:
    JSR CODE_0DA6BA                           ; Update Map16 pointer and move one row down.
; Used by Lunar Magic for new object routines.
; $0DF300   | Enemy credits names stripe data: Scene 1 (grassland - forest)
; FISHIN'LAKITU
; PARA-BOMB
; PARA-GOOMBA
; LAKITU
; SPINY
; WIGGLER
; BOB-OMB
; $0DF42D   | Enemy credits names stripe data: Scene 2 (grassland - clouds)
; AMAZING FLYIN'
; HAMMER BROTHER
; SUPER KOOPA
; CHARGIN'
; CHUCK
; JUMPING
; PIRHANA PLANT
; VOLCANO
; LOTUS
; Enemy credits names stripe data: Scene 3 (grassland - mountains)
; SUMO BROTHER
; MONTY MOLE
; POKEY
; BULLET BILL
; Enemy credits names stripe data: Scene 4 (grassland - dark)
; REX
; MEGA MOLE
; BANZAI BILL
; Enemy credits names stripe data: Scene 5 (grassland - hills)
; DINO-RHINO
; DINO-TORCH
; KOOPAS
; Enemy credits names stripe data: Scene 6 (underground)
; SPIKE TOP
; SWOOPERS
; BUZZY BEETLE
; BLARGG
; Enemy credits names stripe data: Scene 7 (water)
; BLURPS
; URCHIN
; PORCU-PUFFER
; TORPEDO TED
; RIP VAN FISH
; Enemy credits names stripe data: Scene 8 (ghost house)
; "BOO" BUDDIES
; FISHIN'BOO
; THE BIG "BOO"
; EERIES
; Enemy credits names stripe data: Scene 9 (castle)
; LIL SPARKY
; BONY BEETLE
; DRY BONES
; THWOMP
; THWIMP
; HOTHEAD
; Enemy credits names stripe data: Scene 10 (castle - water)
; GRINDER
; BALL'N'CHAIN
; FISHBONE
; Enemy credits names stripe data: Scene 11 (Reznor)
; REZNOR
; Enemy credits names stripe data: Scene 12 (mechakoopas)
; MECHAKOOPAS
; Enemy credits names stripe data: Scene 13 (Koopa Kids)
; MORTON
; KOOPA JR.
; ROY
; KOOPA
; BOWSER
; LEMMY
; KOOPA
; WENDY
; O.KOOPA
; IGGY
; KOOPA
; LARRY
; KOOPA
; LUDWIG
; VON KOOPA
; Enemy credits names stripe data: Scene 1, special world passed
; Enemy credits names stripe data: Scene 2, special world passed
; PUMPKIN
; Enemy credits names stripe data: Scene 3, special world passed
; PIDGIT
; Enemy credits names stripe data: Scene 4, special world passed
; Enemy credits names stripe data: Scene 5, special world passed
; MASK KOOPAS
; Enemy credits names stripe data: Scene 6, special world passed
; Enemy credits names stripe data: Scene 7, special world passed
; Enemy credits names stripe data: Scene 8, special world passed
; Enemy credits names stripe data: Scene 9, special world passed
; Enemy credits names stripe data: Scene 10, special world passed
; Enemy credits names stripe data: Scene 11, special world passed
; Enemy credits names stripe data: Scene 12, special world passed
    JSR CODE_0DA97D                           ; Enemy credits names stripe data: Scene 13, special world passed
    DEC.B _1
    BPL CODE_0DF04E
    RTS

ADDR_0DF066:
    LDX.B #$02
    JMP CODE_0DECCE


DATA_0DF06B:
    db $59

CODE_0DF06C:
    LDY.B LevelLoadPos
    LDA.B LvlLoadObjSize
    AND.B #$0F
    STA.B _0
    LDA.B LvlLoadObjSize
    LSR A
    LSR A
    LSR A
    LSR A
    TAX
  - JSR Sta1To6ePointer
    LDA.L DATA_0DF06B,X
    JSR CODE_0DA95B
    DEC.B _0
    BPL -
    RTS

    %insert_empty($277,$276,$276,$276,$276)

if ver_is_japanese(!_VER)                     ;\======================= J =====================
EnemyNameStripe00:                            ;!
    db $20,$00,$40,$A4,$FA,$34,$20,$60        ;!
    db $C0,$2C,$FA,$34,$20,$61,$C0,$2C        ;!
    db $FA,$34,$20,$62,$C0,$2C,$FA,$34        ;!
    db $21,$C3,$C0,$22,$FA,$34,$21,$C4        ;!
    db $C0,$22,$FA,$34,$21,$C5,$C0,$22        ;!
    db $FA,$34,$20,$6F,$C0,$14,$FA,$34        ;!
    db $20,$70,$C0,$14,$FA,$34,$20,$71        ;!
    db $C0,$14,$FA,$34,$20,$72,$C0,$14        ;!
    db $FA,$34,$21,$C3,$40,$1E,$FA,$34        ;!
    db $21,$E0,$40,$7E,$FA,$34,$20,$5C        ;!
    db $C0,$2E,$FA,$34,$20,$5D,$C0,$2E        ;!
    db $FA,$34,$20,$5E,$C0,$2E,$FA,$34        ;!
    db $20,$5F,$C0,$2E,$FA,$34,$22,$3A        ;!
    db $C0,$10,$FA,$34,$22,$3B,$C0,$10        ;!
    db $FA,$34,$22,$40,$C0,$10,$FA,$34        ;!
    db $22,$41,$C0,$10,$FA,$34,$22,$42        ;!
    db $C0,$10,$FA,$34,$22,$43,$C0,$10        ;!
    db $FA,$34,$22,$44,$C0,$10,$FA,$34        ;!
    db $22,$45,$C0,$10,$FA,$34,$23,$40        ;!
    db $49,$3E,$FA,$34,$50,$71,$00,$19        ;!
    db $0F,$38,$12,$38,$1C,$38,$11,$38        ;!
    db $12,$38,$17,$38,$10,$38,$FC,$00        ;!
    db $13,$38,$1E,$38,$10,$38,$0E,$38        ;!
    db $16,$38,$50,$82,$00,$0F,$19,$38        ;!
    db $0A,$38,$1B,$38,$0A,$38,$FC,$00        ;!
    db $0B,$38,$18,$38,$16,$38,$51,$67        ;!
    db $00,$11,$19,$38,$0A,$38,$1B,$38        ;!
    db $0A,$38,$FC,$00,$14,$38,$1E,$38        ;!
    db $1B,$38,$12,$38,$51,$B3,$00,$09        ;!
    db $13,$38,$1E,$38,$10,$38,$0E,$38        ;!
    db $16,$38,$52,$27,$00,$0B,$1D,$38        ;!
    db $18,$38,$10,$38,$0E,$38,$23,$38        ;!
    db $18,$38,$52,$93,$00,$0F,$11,$38        ;!
    db $0A,$38,$17,$38,$0A,$38,$0C,$38        ;!
    db $11,$38,$0A,$38,$17,$38,$53,$2E        ;!
    db $00,$0B,$0B,$38,$18,$38,$16,$38        ;!
    db $11,$38,$0E,$38,$12,$38,$FF            ;!
                                              ;!
EnemyNameStripe01:                            ;!
    db $20                                    ;!
    db $00,$40,$DE,$FA,$34,$20,$80,$40        ;!
    db $1E,$FA,$34,$20,$A0,$40,$1E,$FA        ;!
    db $34,$20,$C0,$C0,$28,$FA,$34,$20        ;!
    db $C1,$C0,$28,$FA,$34,$20,$C2,$C0        ;!
    db $28,$FA,$34,$20,$CD,$C0,$0C,$FA        ;!
    db $34,$20,$CE,$C0,$0C,$FA,$34,$20        ;!
    db $CF,$C0,$0C,$FA,$34,$21,$A3,$40        ;!
    db $18,$FA,$34,$21,$C3,$40,$18,$FA        ;!
    db $34,$21,$E3,$40,$30,$FA,$34,$22        ;!
    db $03,$40,$30,$FA,$34,$22,$2D,$C0        ;!
    db $12,$FA,$34,$22,$2E,$C0,$12,$FA        ;!
    db $34,$20,$7C,$C0,$1A,$FA,$34,$20        ;!
    db $7D,$C0,$2E,$FA,$34,$20,$7E,$C0        ;!
    db $2E,$FA,$34,$20,$7F,$C0,$2E,$FA        ;!
    db $34,$23,$60,$49,$3E,$FA,$34,$50        ;!
    db $85,$00,$0B,$0A,$38,$19,$38,$19        ;!
    db $38,$0A,$38,$1B,$38,$0E,$38,$51        ;!
    db $15,$00,$11,$16,$38,$0A,$38,$17        ;!
    db $38,$1D,$38,$18,$38,$10,$38,$0A        ;!
    db $38,$16,$38,$0E,$38,$52,$58,$00        ;!
    db $05,$0B,$38,$1E,$38,$15,$38,$52        ;!
    db $C4,$00,$0F,$19,$38,$27,$38,$19        ;!
    db $38,$0A,$38,$14,$38,$14,$38,$1E        ;!
    db $38,$17,$38,$53,$30,$00,$0B,$19        ;!
    db $38,$18,$38,$17,$38,$14,$38,$0E        ;!
    db $38,$22,$38,$FF                        ;!
                                              ;!
EnemyNameStripe02:                            ;!
    db $20,$00,$40,$BE                        ;!
    db $FA,$34,$20,$6B,$40,$28,$FA,$34        ;!
    db $20,$8B,$40,$28,$FA,$34,$20,$AB        ;!
    db $40,$28,$FA,$34,$20,$60,$C0,$1E        ;!
    db $FA,$34,$20,$61,$C0,$1E,$FA,$34        ;!
    db $20,$62,$C0,$1E,$FA,$34,$20,$CB        ;!
    db $C0,$18,$FA,$34,$20,$CC,$C0,$18        ;!
    db $FA,$34,$20,$CD,$C0,$18,$FA,$34        ;!
    db $20,$DE,$C0,$18,$FA,$34,$20,$DF        ;!
    db $C0,$18,$FA,$34,$22,$60,$40,$8E        ;!
    db $FA,$34,$22,$C0,$40,$0E,$FA,$34        ;!
    db $22,$E0,$40,$0E,$FA,$34,$23,$00        ;!
    db $40,$0E,$FA,$34,$23,$20,$40,$0E        ;!
    db $FA,$34,$23,$40,$40,$0E,$FA,$34        ;!
    db $23,$60,$40,$0E,$FA,$34,$22,$B5        ;!
    db $40,$14,$FA,$34,$22,$D5,$40,$14        ;!
    db $FA,$34,$22,$F5,$40,$14,$FA,$34        ;!
    db $23,$15,$40,$14,$FA,$34,$23,$35        ;!
    db $40,$14,$FA,$34,$23,$55,$40,$14        ;!
    db $FA,$34,$23,$75,$49,$14,$FA,$34        ;!
    db $50,$87,$00,$07,$14,$38,$24,$28        ;!
    db $14,$38,$24,$28,$50,$F7,$00,$0F        ;!
    db $0C,$38,$11,$38,$18,$38,$1B,$38        ;!
    db $18,$38,$19,$38,$18,$38,$18,$38        ;!
    db $51,$CF,$00,$09,$1C,$38,$0A,$38        ;!
    db $17,$38,$0B,$38,$18,$38,$53,$32        ;!
    db $00,$0B,$14,$38,$12,$38,$15,$38        ;!
    db $15,$38,$0E,$38,$1B,$38,$FF            ;!
                                              ;!
EnemyNameStripe03:                            ;!
    db $20                                    ;!
    db $00,$41,$12,$FA,$34,$20,$80,$40        ;!
    db $12,$FA,$34,$20,$A0,$40,$12,$FA        ;!
    db $34,$20,$C0,$40,$12,$FA,$34,$20        ;!
    db $E0,$40,$12,$FA,$34,$21,$00,$40        ;!
    db $12,$FA,$34,$21,$20,$40,$12,$FA        ;!
    db $34,$21,$40,$40,$12,$FA,$34,$21        ;!
    db $60,$40,$12,$FA,$34,$21,$80,$40        ;!
    db $12,$FA,$34,$21,$A0,$40,$12,$FA        ;!
    db $34,$21,$C0,$40,$12,$FA,$34,$21        ;!
    db $E0,$40,$88,$FA,$34,$22,$40,$C0        ;!
    db $0E,$FA,$34,$22,$41,$C0,$0E,$FA        ;!
    db $34,$22,$42,$C0,$0E,$FA,$34,$22        ;!
    db $43,$C0,$0E,$FA,$34,$22,$44,$C0        ;!
    db $0E,$FA,$34,$22,$2C,$C0,$10,$FA        ;!
    db $34,$22,$2D,$C0,$10,$FA,$34,$23        ;!
    db $40,$40,$1A,$FA,$34,$20,$9C,$C0        ;!
    db $2C,$FA,$34,$20,$9D,$C0,$2C,$FA        ;!
    db $34,$20,$9E,$C0,$2C,$FA,$34,$20        ;!
    db $9F,$C0,$2C,$FA,$34,$23,$60,$49        ;!
    db $3E,$FA,$34,$51,$11,$00,$0D,$0D        ;!
    db $38,$18,$38,$1B,$38,$0A,$38,$0B        ;!
    db $38,$18,$38,$17,$38,$51,$E3,$00        ;!
    db $07,$12,$38,$17,$38,$0D,$38,$22        ;!
    db $38,$53,$11,$00,$19,$16,$38,$0A        ;!
    db $38,$10,$38,$17,$38,$1E,$38,$16        ;!
    db $38,$FC,$00,$14,$38,$12,$38,$15        ;!
    db $38,$15,$38,$0E,$38,$1B,$38,$FF        ;!
                                              ;!
EnemyNameStripe04:                            ;!
    db $20,$00,$41,$06,$FA,$34,$20,$A0        ;!
    db $C0,$18,$FA,$34,$20,$A1,$C0,$18        ;!
    db $FA,$34,$20,$A2,$C0,$18,$FA,$34        ;!
    db $20,$A3,$C0,$18,$FA,$34,$20,$92        ;!
    db $40,$1A,$FA,$34,$20,$B2,$40,$1A        ;!
    db $FA,$34,$20,$D2,$40,$1A,$FA,$34        ;!
    db $20,$F2,$40,$1A,$FA,$34,$21,$12        ;!
    db $40,$1A,$FA,$34,$21,$32,$40,$1A        ;!
    db $FA,$34,$21,$52,$40,$1A,$FA,$34        ;!
    db $21,$72,$40,$1A,$FA,$34,$21,$92        ;!
    db $40,$1A,$FA,$34,$21,$B2,$40,$22        ;!
    db $FA,$34,$21,$D2,$40,$22,$FA,$34        ;!
    db $21,$F2,$40,$22,$FA,$34,$22,$12        ;!
    db $40,$22,$FA,$34,$22,$20,$40,$92        ;!
    db $FA,$34,$22,$80,$40,$12,$FA,$34        ;!
    db $22,$A0,$40,$12,$FA,$34,$22,$C0        ;!
    db $40,$12,$FA,$34,$22,$E0,$40,$12        ;!
    db $FA,$34,$23,$00,$40,$12,$FA,$34        ;!
    db $23,$20,$40,$12,$FA,$34,$22,$7C        ;!
    db $C0,$0C,$FA,$34,$22,$7D,$C0,$0C        ;!
    db $FA,$34,$22,$7E,$C0,$0C,$FA,$34        ;!
    db $22,$7F,$C0,$0C,$FA,$34,$23,$40        ;!
    db $49,$7E,$FA,$34,$50,$C5,$00,$09        ;!
    db $1B,$38,$0A,$38,$12,$38,$1D,$38        ;!
    db $0A,$38,$51,$8E,$00,$15,$0C,$38        ;!
    db $11,$38,$12,$38,$0B,$38,$12,$38        ;!
    db $FC,$00,$1B,$38,$0A,$38,$12,$38        ;!
    db $1D,$38,$0A,$38,$52,$6E,$00,$11        ;!
    db $17,$38,$18,$38,$14,$38,$18,$38        ;!
    db $FC,$00,$17,$38,$18,$38,$14,$38        ;!
    db $18,$38,$FF                            ;!
                                              ;!
EnemyNameStripe05:                            ;!
    db $20,$00,$41,$04,$FA                    ;!
    db $34,$20,$A0,$C0,$28,$FA,$34,$20        ;!
    db $A1,$C0,$28,$FA,$34,$20,$A2,$C0        ;!
    db $28,$FA,$34,$20,$8A,$C0,$10,$FA        ;!
    db $34,$20,$8B,$C0,$10,$FA,$34,$20        ;!
    db $9A,$C0,$2A,$FA,$34,$20,$9B,$C0        ;!
    db $2A,$FA,$34,$20,$9C,$C0,$2A,$FA        ;!
    db $34,$20,$9D,$C0,$2A,$FA,$34,$20        ;!
    db $9E,$C0,$2A,$FA,$34,$20,$9F,$C0        ;!
    db $2A,$FA,$34,$21,$AA,$40,$B6,$FA        ;!
    db $34,$22,$23,$C0,$10,$FA,$34,$22        ;!
    db $24,$C0,$10,$FA,$34,$22,$25,$C0        ;!
    db $10,$FA,$34,$22,$19,$C0,$12,$FA        ;!
    db $34,$23,$40,$49,$7E,$FA,$34,$50        ;!
    db $A2,$00,$0D,$1D,$38,$18,$38,$10        ;!
    db $38,$0E,$38,$16,$38,$0E,$38,$1D        ;!
    db $38,$50,$B2,$00,$11,$0B,$38,$0A        ;!
    db $38,$1C,$38,$0A,$38,$FC,$00,$0B        ;!
    db $38,$0A,$38,$1C,$38,$0A,$38,$52        ;!
    db $27,$00,$05,$16,$38,$0E,$38,$1D        ;!
    db $38,$52,$73,$00,$0B,$1E,$38,$17        ;!
    db $38,$0B,$38,$0A,$38,$0B,$38,$0A        ;!
    db $38,$FF                                ;!
                                              ;!
EnemyNameStripe06:                            ;!
    db $20,$00,$40,$BE,$FA,$34                ;!
    db $20,$60,$C0,$16,$FA,$34,$20,$61        ;!
    db $C0,$16,$FA,$34,$20,$62,$C0,$16        ;!
    db $FA,$34,$20,$7C,$C0,$16,$FA,$34        ;!
    db $20,$7D,$C0,$2C,$FA,$34,$20,$7E        ;!
    db $C0,$2C,$FA,$34,$20,$7F,$C0,$2C        ;!
    db $FA,$34,$21,$E0,$40,$9C,$FA,$34        ;!
    db $22,$40,$C0,$10,$FA,$34,$22,$41        ;!
    db $C0,$10,$FA,$34,$22,$42,$C0,$10        ;!
    db $FA,$34,$22,$4C,$C0,$10,$FA,$34        ;!
    db $22,$4D,$C0,$10,$FA,$34,$22,$4E        ;!
    db $C0,$10,$FA,$34,$23,$4C,$49,$66        ;!
    db $FA,$34,$50,$83,$00,$11,$0B,$38        ;!
    db $1E,$38,$14,$38,$1E,$38,$FC,$00        ;!
    db $0B,$38,$1E,$38,$14,$38,$1E,$38        ;!
    db $50,$F7,$00,$09,$1E,$38,$17,$38        ;!
    db $12,$38,$1B,$38,$0A,$38,$51,$A8        ;!
    db $00,$13,$0F,$38,$1E,$38,$10,$38        ;!
    db $1E,$38,$16,$38,$0A,$38,$17,$38        ;!
    db $17,$38,$0E,$38,$17,$38,$52,$75        ;!
    db $00,$0D,$1D,$38,$18,$38,$1B,$38        ;!
    db $19,$38,$0E,$38,$0D,$38,$18,$38        ;!
    db $53,$22,$00,$15,$FC,$00,$FC,$00        ;!
    db $10,$38,$18,$38,$18,$38,$1C,$38        ;!
    db $14,$38,$0A,$38,$FC,$00,$FC,$00        ;!
    db $FC,$00,$FF                            ;!
                                              ;!
EnemyNameStripe07:                            ;!
    db $20,$00,$40,$E2,$FA                    ;!
    db $34,$20,$80,$C0,$2C,$FA,$34,$20        ;!
    db $81,$C0,$2C,$FA,$34,$20,$82,$C0        ;!
    db $2C,$FA,$34,$20,$83,$C0,$12,$FA        ;!
    db $34,$20,$8E,$C0,$26,$FA,$34,$20        ;!
    db $8F,$C0,$26,$FA,$34,$20,$90,$C0        ;!
    db $10,$FA,$34,$20,$91,$C0,$10,$FA        ;!
    db $34,$20,$7C,$C0,$28,$FA,$34,$20        ;!
    db $7D,$C0,$28,$FA,$34,$20,$7E,$C0        ;!
    db $28,$FA,$34,$20,$7F,$C0,$28,$FA        ;!
    db $34,$21,$AE,$40,$C2,$FA,$34,$23        ;!
    db $0E,$40,$22,$FA,$34,$23,$2E,$40        ;!
    db $22,$FA,$34,$23,$4E,$49,$82,$FA        ;!
    db $34,$50,$D4,$00,$09,$1C,$38,$19        ;!
    db $38,$18,$38,$18,$38,$14,$38,$50        ;!
    db $E3,$00,$0B,$1D,$38,$0E,$38,$15        ;!
    db $38,$0E,$38,$1C,$38,$0A,$38,$52        ;!
    db $02,$00,$19,$0A,$38,$1D,$38,$18        ;!
    db $38,$16,$38,$12,$38,$0C,$38,$FC        ;!
    db $00,$1D,$38,$0E,$38,$15,$38,$0E        ;!
    db $38,$1C,$38,$0A,$38,$52,$B4,$00        ;!
    db $11,$1D,$38,$0E,$38,$15,$38,$0E        ;!
    db $38,$1C,$38,$0A,$38,$1E,$38,$15        ;!
    db $38,$1C,$38,$FF                        ;!
                                              ;!
EnemyNameStripe08:                            ;!
    db $20,$00,$40,$BE                        ;!
    db $FA,$34,$20,$60,$C0,$2E,$FA,$34        ;!
    db $20,$61,$C0,$2E,$FA,$34,$20,$62        ;!
    db $C0,$2E,$FA,$34,$21,$63,$C0,$1E        ;!
    db $FA,$34,$21,$64,$C0,$1E,$FA,$34        ;!
    db $21,$65,$C0,$1E,$FA,$34,$20,$7D        ;!
    db $C0,$2A,$FA,$34,$20,$7E,$C0,$2A        ;!
    db $FA,$34,$20,$7F,$C0,$2A,$FA,$34        ;!
    db $21,$7C,$C0,$1A,$FA,$34,$21,$AE        ;!
    db $C0,$1A,$FA,$34,$21,$AF,$C0,$1A        ;!
    db $FA,$34,$21,$60,$40,$7E,$FA,$34        ;!
    db $23,$30,$40,$1E,$FA,$34,$23,$50        ;!
    db $49,$5E,$FA,$34,$50,$6C,$00,$0D        ;!
    db $14,$38,$0E,$38,$1C,$38,$0E,$38        ;!
    db $1B,$38,$0A,$38,$17,$38,$50,$F3        ;!
    db $00,$0F,$11,$38,$18,$38,$17,$38        ;!
    db $0E,$38,$FC,$00,$16,$38,$0E,$38        ;!
    db $1D,$38,$51,$24,$00,$09,$14,$38        ;!
    db $0A,$38,$1B,$38,$18,$38,$17,$38        ;!
    db $52,$4F,$00,$09,$0D,$38,$18,$38        ;!
    db $1C,$38,$1E,$38,$17,$38,$52,$B6        ;!
    db $00,$09,$0C,$38,$18,$38,$1D,$38        ;!
    db $18,$38,$17,$38,$52,$E8,$00,$0D        ;!
    db $19,$38,$0A,$38,$1C,$38,$0A,$38        ;!
    db $1B,$38,$0A,$38,$17,$38,$FF            ;!
                                              ;!
EnemyNameStripe09:                            ;!
    db $20                                    ;!
    db $00,$40,$FE,$FA,$34,$20,$80,$C0        ;!
    db $14,$FA,$34,$20,$81,$C0,$14,$FA        ;!
    db $34,$20,$82,$C0,$14,$FA,$34,$20        ;!
    db $83,$C0,$14,$FA,$34,$20,$84,$C0        ;!
    db $14,$FA,$34,$20,$85,$C0,$14,$FA        ;!
    db $34,$20,$86,$C0,$14,$FA,$34,$20        ;!
    db $87,$C0,$14,$FA,$34,$20,$98,$C0        ;!
    db $14,$FA,$34,$20,$99,$C0,$14,$FA        ;!
    db $34,$20,$9A,$C0,$14,$FA,$34,$20        ;!
    db $9B,$C0,$14,$FA,$34,$20,$9C,$C0        ;!
    db $14,$FA,$34,$20,$9D,$C0,$14,$FA        ;!
    db $34,$20,$9E,$C0,$14,$FA,$34,$20        ;!
    db $9F,$C0,$14,$FA,$34,$21,$E0,$40        ;!
    db $7E,$FA,$34,$22,$20,$C0,$12,$FA        ;!
    db $34,$22,$21,$C0,$12,$FA,$34,$22        ;!
    db $22,$C0,$12,$FA,$34,$22,$23,$C0        ;!
    db $12,$FA,$34,$22,$3C,$C0,$12,$FA        ;!
    db $34,$22,$3D,$C0,$12,$FA,$34,$22        ;!
    db $3E,$C0,$12,$FA,$34,$22,$3F,$C0        ;!
    db $12,$FA,$34,$23,$60,$49,$3E,$FA        ;!
    db $34,$50,$90,$00,$11,$10,$38,$0A        ;!
    db $38,$1B,$38,$12,$38,$FC,$00,$10        ;!
    db $38,$0A,$38,$1B,$38,$12,$38,$51        ;!
    db $A7,$00,$11,$10,$38,$1E,$38,$1B        ;!
    db $38,$1E,$38,$FC,$00,$10,$38,$1E        ;!
    db $38,$1B,$38,$1E,$38,$52,$4D,$00        ;!
    db $11,$0F,$38,$12,$38,$1C,$38,$11        ;!
    db $38,$FC,$00,$0B,$38,$18,$38,$17        ;!
    db $38,$0E,$38,$FF                        ;!
                                              ;!
EnemyNameStripe0A:                            ;!
    db $20,$00,$40,$FE                        ;!
    db $FA,$34,$20,$80,$C0,$2A,$FA,$34        ;!
    db $20,$81,$C0,$2A,$FA,$34,$20,$82        ;!
    db $C0,$2A,$FA,$34,$20,$83,$C0,$2A        ;!
    db $FA,$34,$20,$84,$C0,$2A,$FA,$34        ;!
    db $20,$85,$C0,$2A,$FA,$34,$20,$86        ;!
    db $C0,$2A,$FA,$34,$20,$87,$C0,$2A        ;!
    db $FA,$34,$20,$98,$C0,$2A,$FA,$34        ;!
    db $20,$99,$C0,$2A,$FA,$34,$20,$9A        ;!
    db $C0,$2A,$FA,$34,$20,$9B,$C0,$2A        ;!
    db $FA,$34,$20,$9C,$C0,$2A,$FA,$34        ;!
    db $20,$9D,$C0,$2A,$FA,$34,$20,$9E        ;!
    db $C0,$2A,$FA,$34,$20,$9F,$C0,$2A        ;!
    db $FA,$34,$23,$40,$49,$7E,$FA,$34        ;!
    db $51,$8D,$00,$0B,$0B,$38,$1E,$38        ;!
    db $12,$38,$0B,$38,$1E,$38,$12,$38        ;!
    db $FF                                    ;!
                                              ;!
EnemyNameStripe0B:                            ;!
    db $20,$00,$42,$80,$FA,$34,$21            ;!
    db $40,$C0,$12,$FA,$34,$21,$41,$C0        ;!
    db $12,$FA,$34,$21,$42,$C0,$12,$FA        ;!
    db $34,$21,$43,$C0,$12,$FA,$34,$21        ;!
    db $44,$C0,$12,$FA,$34,$21,$45,$C0        ;!
    db $12,$FA,$34,$21,$46,$C0,$12,$FA        ;!
    db $34,$21,$47,$C0,$12,$FA,$34,$21        ;!
    db $58,$C0,$12,$FA,$34,$21,$59,$C0        ;!
    db $12,$FA,$34,$21,$5A,$C0,$12,$FA        ;!
    db $34,$21,$5B,$C0,$12,$FA,$34,$21        ;!
    db $5C,$C0,$12,$FA,$34,$21,$5D,$C0        ;!
    db $12,$FA,$34,$21,$5E,$C0,$12,$FA        ;!
    db $34,$21,$5F,$C0,$12,$FA,$34,$22        ;!
    db $80,$4A,$FE,$FA,$34,$51,$8B,$00        ;!
    db $13,$16,$38,$0E,$38,$14,$38,$0A        ;!
    db $38,$FC,$00,$14,$38,$18,$38,$18        ;!
    db $38,$19,$38,$0A,$38,$FF                ;!
                                              ;!
EnemyNameStripe0C:                            ;!
    db $20,$00                                ;!
    db $5F,$FE,$FA,$14,$51,$25,$00,$0B        ;!
    db $16,$38,$18,$38,$1B,$38,$1D,$38        ;!
    db $18,$38,$17,$38,$51,$37,$00,$05        ;!
    db $1B,$38,$18,$38,$22,$38,$52,$0E        ;!
    db $00,$09,$14,$38,$18,$38,$18,$38        ;!
    db $19,$38,$0A,$38,$52,$43,$00,$09        ;!
    db $15,$38,$0E,$38,$16,$38,$16,$38        ;!
    db $22,$38,$52,$59,$00,$09,$20,$38        ;!
    db $0E,$38,$17,$38,$0D,$38,$22,$38        ;!
    db $53,$05,$00,$07,$12,$38,$10,$38        ;!
    db $10,$38,$22,$38,$53,$17,$00,$09        ;!
    db $15,$38,$0A,$38,$1B,$38,$1B,$38        ;!
    db $22,$38,$53,$4E,$00,$0B,$15,$38        ;!
    db $1E,$38,$0D,$38,$20,$38,$12,$38        ;!
    db $10,$38,$FF                            ;!
else                                          ;<================ U, SS, E0, & E1 ==============
EnemyNameStripe00:                            ;!
    db $20,$00,$40,$A4,$FA,$34,$20,$60        ;!
    db $C0,$2C,$FA,$34,$20,$61,$C0,$2C        ;!
    db $FA,$34,$20,$62,$C0,$2C,$FA,$34        ;!
    db $21,$C3,$C0,$22,$FA,$34,$21,$C4        ;!
    db $C0,$22,$FA,$34,$21,$C5,$C0,$22        ;!
    db $FA,$34,$20,$6F,$C0,$14,$FA,$34        ;!
    db $20,$70,$C0,$14,$FA,$34,$20,$71        ;!
    db $C0,$14,$FA,$34,$20,$72,$C0,$14        ;!
    db $FA,$34,$21,$C3,$40,$1E,$FA,$34        ;!
    db $21,$E0,$40,$7E,$FA,$34,$20,$5C        ;!
    db $C0,$2E,$FA,$34,$20,$5D,$C0,$2E        ;!
    db $FA,$34,$20,$5E,$C0,$2E,$FA,$34        ;!
    db $20,$5F,$C0,$2E,$FA,$34,$22,$3A        ;!
    db $C0,$10,$FA,$34,$22,$3B,$C0,$10        ;!
    db $FA,$34,$22,$40,$C0,$10,$FA,$34        ;!
    db $22,$41,$C0,$10,$FA,$34,$22,$42        ;!
    db $C0,$10,$FA,$34,$22,$43,$C0,$10        ;!
    db $FA,$34,$22,$44,$C0,$10,$FA,$34        ;!
    db $22,$45,$C0,$10,$FA,$34,$23,$40        ;!
    db $49,$3E,$FA,$34,$50,$72,$00,$19        ;!
    db $0F,$38,$12,$38,$1C,$38,$11,$38        ;!
    db $12,$38,$17,$38,$85,$38,$15,$38        ;!
    db $0A,$38,$14,$38,$12,$38,$1D,$38        ;!
    db $1E,$38,$50,$82,$00,$11,$19,$38        ;!
    db $0A,$38,$1B,$38,$0A,$38,$27,$38        ;!
    db $0B,$38,$18,$38,$16,$38,$0B,$38        ;!
    db $51,$67,$00,$15,$19,$38,$0A,$38        ;!
    db $1B,$38,$0A,$38,$27,$38,$10,$38        ;!
    db $18,$38,$18,$38,$16,$38,$0B,$38        ;!
    db $0A,$38,$51,$B2,$00,$0B,$15,$38        ;!
    db $0A,$38,$14,$38,$12,$38,$1D,$38        ;!
    db $1E,$38,$52,$28,$00,$09,$1C,$38        ;!
    db $19,$38,$12,$38,$17,$38,$22,$38        ;!
    db $52,$B7,$00,$0D,$20,$38,$12,$38        ;!
    db $10,$38,$10,$38,$15,$38,$0E,$38        ;!
    db $1B,$38,$53,$2E,$00,$0D,$0B,$38        ;!
    db $18,$38,$0B,$38,$27,$38,$18,$38        ;!
    db $16,$38,$0B,$38,$FF                    ;!
                                              ;!
EnemyNameStripe01:                            ;!
    db $20,$00,$40,$DE,$FA,$34,$20,$80        ;!
    db $40,$1E,$FA,$34,$20,$A0,$40,$1E        ;!
    db $FA,$34,$20,$C0,$C0,$28,$FA,$34        ;!
    db $20,$C1,$C0,$28,$FA,$34,$20,$C2        ;!
    db $C0,$28,$FA,$34,$20,$CD,$C0,$0C        ;!
    db $FA,$34,$20,$CE,$C0,$0C,$FA,$34        ;!
    db $20,$CF,$C0,$0C,$FA,$34,$21,$A3        ;!
    db $40,$18,$FA,$34,$21,$C3,$40,$18        ;!
    db $FA,$34,$21,$E3,$40,$30,$FA,$34        ;!
    db $22,$03,$40,$30,$FA,$34,$22,$2D        ;!
    db $C0,$12,$FA,$34,$22,$2E,$C0,$12        ;!
    db $FA,$34,$20,$7C,$C0,$1A,$FA,$34        ;!
    db $20,$7D,$C0,$2E,$FA,$34,$20,$7E        ;!
    db $C0,$2E,$FA,$34,$20,$7F,$C0,$2E        ;!
    db $FA,$34,$23,$60,$49,$3E,$FA,$34        ;!
    db $50,$81,$00,$1B,$0A,$38,$16,$38        ;!
    db $0A,$38,$23,$38,$12,$38,$17,$38        ;!
    db $10,$38,$FC,$00,$0F,$38,$15,$38        ;!
    db $22,$38,$12,$38,$17,$38,$85,$38        ;!
    db $50,$A1,$00,$1B,$11,$38,$0A,$38        ;!
    db $16,$38,$16,$38,$0E,$38,$1B,$38        ;!
    db $FC,$00,$0B,$38,$1B,$38,$18,$38        ;!
    db $1D,$38,$11,$38,$0E,$38,$1B,$38        ;!
    db $50,$F2,$00,$15,$1C,$38,$1E,$38        ;!
    db $19,$38,$0E,$38,$1B,$38,$FC,$00        ;!
    db $14,$38,$18,$38,$18,$38,$19,$38        ;!
    db $0A,$38,$52,$57,$00,$0F,$0C,$38        ;!
    db $11,$38,$0A,$38,$1B,$38,$10,$38        ;!
    db $12,$38,$17,$38,$85,$38,$52,$78        ;!
    db $00,$09,$0C,$38,$11,$38,$1E,$38        ;!
    db $0C,$38,$14,$38,$52,$A4,$00,$0D        ;!
    db $13,$38,$1E,$38,$16,$38,$19,$38        ;!
    db $12,$38,$17,$38,$10,$38,$52,$C1        ;!
    db $00,$19,$19,$38,$12,$38,$1B,$38        ;!
    db $11,$38,$0A,$38,$17,$38,$0A,$38        ;!
    db $FC,$00,$19,$38,$15,$38,$0A,$38        ;!
    db $17,$38,$1D,$38,$53,$30,$00,$0D        ;!
    db $1F,$38,$18,$38,$15,$38,$0C,$38        ;!
    db $0A,$38,$17,$38,$18,$38,$53,$51        ;!
    db $00,$09,$15,$38,$18,$38,$1D,$38        ;!
    db $1E,$38,$1C,$38,$FF                    ;!
                                              ;!
EnemyNameStripe02:                            ;!
    db $20,$00,$40,$BE,$FA,$34,$20,$6B        ;!
    db $40,$28,$FA,$34,$20,$8B,$40,$28        ;!
    db $FA,$34,$20,$AB,$40,$28,$FA,$34        ;!
    db $20,$60,$C0,$1E,$FA,$34,$20,$61        ;!
    db $C0,$1E,$FA,$34,$20,$62,$C0,$1E        ;!
    db $FA,$34,$20,$CB,$C0,$18,$FA,$34        ;!
    db $20,$CC,$C0,$18,$FA,$34,$20,$CD        ;!
    db $C0,$18,$FA,$34,$20,$DE,$C0,$18        ;!
    db $FA,$34,$20,$DF,$C0,$18,$FA,$34        ;!
    db $22,$60,$40,$8E,$FA,$34,$22,$C0        ;!
    db $40,$0E,$FA,$34,$22,$E0,$40,$0E        ;!
    db $FA,$34,$23,$00,$40,$0E,$FA,$34        ;!
    db $23,$20,$40,$0E,$FA,$34,$23,$40        ;!
    db $40,$0E,$FA,$34,$23,$60,$40,$0E        ;!
    db $FA,$34,$22,$B5,$40,$14,$FA,$34        ;!
    db $22,$D5,$40,$14,$FA,$34,$22,$F5        ;!
    db $40,$14,$FA,$34,$23,$15,$40,$14        ;!
    db $FA,$34,$23,$35,$40,$14,$FA,$34        ;!
    db $23,$55,$40,$14,$FA,$34,$23,$75        ;!
    db $49,$14,$FA,$34,$50,$81,$00,$17        ;!
    db $1C,$38,$1E,$38,$16,$38,$18,$38        ;!
    db $FC,$00,$0B,$38,$1B,$38,$18,$38        ;!
    db $1D,$38,$11,$38,$0E,$38,$1B,$38        ;!
    db $50,$F5,$00,$13,$16,$38,$18,$38        ;!
    db $17,$38,$1D,$38,$22,$38,$FC,$00        ;!
    db $16,$38,$18,$38,$15,$38,$0E,$38        ;!
    db $51,$D0,$00,$09,$19,$38,$18,$38        ;!
    db $14,$38,$0E,$38,$22,$38,$53,$2D        ;!
    db $00,$15,$0B,$38,$1E,$38,$15,$38        ;!
    db $15,$38,$0E,$38,$1D,$38,$FC,$00        ;!
    db $0B,$38,$12,$38,$15,$38,$15,$38        ;!
    db $FF                                    ;!
                                              ;!
EnemyNameStripe03:                            ;!
    db $20,$00,$41,$12,$FA,$34,$20,$80        ;!
    db $40,$12,$FA,$34,$20,$A0,$40,$12        ;!
    db $FA,$34,$20,$C0,$40,$12,$FA,$34        ;!
    db $20,$E0,$40,$12,$FA,$34,$21,$00        ;!
    db $40,$12,$FA,$34,$21,$20,$40,$12        ;!
    db $FA,$34,$21,$40,$40,$12,$FA,$34        ;!
    db $21,$60,$40,$12,$FA,$34,$21,$80        ;!
    db $40,$12,$FA,$34,$21,$A0,$40,$12        ;!
    db $FA,$34,$21,$C0,$40,$12,$FA,$34        ;!
    db $21,$E0,$40,$88,$FA,$34,$22,$40        ;!
    db $C0,$0E,$FA,$34,$22,$41,$C0,$0E        ;!
    db $FA,$34,$22,$42,$C0,$0E,$FA,$34        ;!
    db $22,$43,$C0,$0E,$FA,$34,$22,$44        ;!
    db $C0,$0E,$FA,$34,$22,$2C,$C0,$10        ;!
    db $FA,$34,$22,$2D,$C0,$10,$FA,$34        ;!
    db $23,$40,$40,$1A,$FA,$34,$20,$9C        ;!
    db $C0,$2C,$FA,$34,$20,$9D,$C0,$2C        ;!
    db $FA,$34,$20,$9E,$C0,$2C,$FA,$34        ;!
    db $20,$9F,$C0,$2C,$FA,$34,$23,$60        ;!
    db $49,$3E,$FA,$34,$51,$11,$00,$05        ;!
    db $1B,$38,$0E,$38,$21,$38,$52,$03        ;!
    db $00,$11,$16,$38,$0E,$38,$10,$38        ;!
    db $0A,$38,$FC,$00,$16,$38,$18,$38        ;!
    db $15,$38,$0E,$38,$53,$30,$00,$15        ;!
    db $0B,$38,$0A,$38,$17,$38,$23,$38        ;!
    db $0A,$38,$12,$38,$FC,$00,$0B,$38        ;!
    db $12,$38,$15,$38,$15,$38,$FF            ;!
                                              ;!
EnemyNameStripe04:                            ;!
    db $20,$00,$41,$06,$FA,$34,$20,$A0        ;!
    db $C0,$18,$FA,$34,$20,$A1,$C0,$18        ;!
    db $FA,$34,$20,$A2,$C0,$18,$FA,$34        ;!
    db $20,$A3,$C0,$18,$FA,$34,$20,$92        ;!
    db $40,$1A,$FA,$34,$20,$B2,$40,$1A        ;!
    db $FA,$34,$20,$D2,$40,$1A,$FA,$34        ;!
    db $20,$F2,$40,$1A,$FA,$34,$21,$12        ;!
    db $40,$1A,$FA,$34,$21,$32,$40,$1A        ;!
    db $FA,$34,$21,$52,$40,$1A,$FA,$34        ;!
    db $21,$72,$40,$1A,$FA,$34,$21,$92        ;!
    db $40,$1A,$FA,$34,$21,$B2,$40,$22        ;!
    db $FA,$34,$21,$D2,$40,$22,$FA,$34        ;!
    db $21,$F2,$40,$22,$FA,$34,$22,$12        ;!
    db $40,$22,$FA,$34,$22,$20,$40,$92        ;!
    db $FA,$34,$22,$80,$40,$12,$FA,$34        ;!
    db $22,$A0,$40,$12,$FA,$34,$22,$C0        ;!
    db $40,$12,$FA,$34,$22,$E0,$40,$12        ;!
    db $FA,$34,$23,$00,$40,$12,$FA,$34        ;!
    db $23,$20,$40,$12,$FA,$34,$22,$7C        ;!
    db $C0,$0C,$FA,$34,$22,$7D,$C0,$0C        ;!
    db $FA,$34,$22,$7E,$C0,$0C,$FA,$34        ;!
    db $22,$7F,$C0,$0C,$FA,$34,$23,$40        ;!
    db $49,$7E,$FA,$34,$50,$C2,$00,$13        ;!
    db $0D,$38,$12,$38,$17,$38,$18,$38        ;!
    db $27,$38,$1B,$38,$11,$38,$12,$38        ;!
    db $17,$38,$18,$38,$51,$E9,$00,$13        ;!
    db $0D,$38,$12,$38,$17,$38,$18,$38        ;!
    db $27,$38,$1D,$38,$18,$38,$1B,$38        ;!
    db $0C,$38,$11,$38,$53,$30,$00,$0B        ;!
    db $14,$38,$18,$38,$18,$38,$19,$38        ;!
    db $0A,$38,$1C,$38,$FF                    ;!
                                              ;!
EnemyNameStripe05:                            ;!
    db $20,$00,$41,$04,$FA,$34,$20,$A0        ;!
    db $C0,$28,$FA,$34,$20,$A1,$C0,$28        ;!
    db $FA,$34,$20,$A2,$C0,$28,$FA,$34        ;!
    db $20,$8A,$C0,$10,$FA,$34,$20,$8B        ;!
    db $C0,$10,$FA,$34,$20,$9A,$C0,$2A        ;!
    db $FA,$34,$20,$9B,$C0,$2A,$FA,$34        ;!
    db $20,$9C,$C0,$2A,$FA,$34,$20,$9D        ;!
    db $C0,$2A,$FA,$34,$20,$9E,$C0,$2A        ;!
    db $FA,$34,$20,$9F,$C0,$2A,$FA,$34        ;!
    db $21,$AA,$40,$B6,$FA,$34,$22,$23        ;!
    db $C0,$10,$FA,$34,$22,$24,$C0,$10        ;!
    db $FA,$34,$22,$25,$C0,$10,$FA,$34        ;!
    db $22,$19,$C0,$12,$FA,$34,$23,$40        ;!
    db $49,$7E,$FA,$34,$50,$A2,$00,$11        ;!
    db $1C,$38,$19,$38,$12,$38,$14,$38        ;!
    db $0E,$38,$FC,$00,$1D,$38,$18,$38        ;!
    db $19,$38,$50,$B1,$00,$0F,$1C,$38        ;!
    db $20,$38,$18,$38,$18,$38,$19,$38        ;!
    db $0E,$38,$1B,$38,$1C,$38,$52,$03        ;!
    db $00,$17,$0B,$38,$1E,$38,$23,$38        ;!
    db $23,$38,$22,$38,$FC,$00,$0B,$38        ;!
    db $0E,$38,$0E,$38,$1D,$38,$15,$38        ;!
    db $0E,$38,$52,$72,$00,$0B,$0B,$38        ;!
    db $15,$38,$0A,$38,$1B,$38,$10,$38        ;!
    db $10,$38,$FF                            ;!
                                              ;!
EnemyNameStripe06:                            ;!
    db $20,$00,$40,$BE,$FA,$34,$20,$60        ;!
    db $C0,$16,$FA,$34,$20,$61,$C0,$16        ;!
    db $FA,$34,$20,$62,$C0,$16,$FA,$34        ;!
    db $20,$7C,$C0,$16,$FA,$34,$20,$7D        ;!
    db $C0,$2C,$FA,$34,$20,$7E,$C0,$2C        ;!
    db $FA,$34,$20,$7F,$C0,$2C,$FA,$34        ;!
    db $21,$E0,$40,$9C,$FA,$34,$22,$40        ;!
    db $C0,$10,$FA,$34,$22,$41,$C0,$10        ;!
    db $FA,$34,$22,$42,$C0,$10,$FA,$34        ;!
    db $22,$4C,$C0,$10,$FA,$34,$22,$4D        ;!
    db $C0,$10,$FA,$34,$22,$4E,$C0,$10        ;!
    db $FA,$34,$23,$4C,$49,$66,$FA,$34        ;!
    db $50,$84,$00,$0B,$0B,$38,$15,$38        ;!
    db $1E,$38,$1B,$38,$19,$38,$1C,$38        ;!
    db $50,$B2,$00,$0B,$1E,$38,$1B,$38        ;!
    db $0C,$38,$11,$38,$12,$38,$17,$38        ;!
    db $51,$A7,$00,$17,$19,$38,$18,$38        ;!
    db $1B,$38,$0C,$38,$1E,$38,$27,$38        ;!
    db $19,$38,$1E,$38,$0F,$38,$0F,$38        ;!
    db $0E,$38,$1B,$38,$52,$52,$00,$15        ;!
    db $1D,$38,$18,$38,$1B,$38,$19,$38        ;!
    db $0E,$38,$0D,$38,$18,$38,$FC,$00        ;!
    db $1D,$38,$0E,$38,$0D,$38,$53,$02        ;!
    db $00,$17,$1B,$38,$12,$38,$19,$38        ;!
    db $FC,$00,$1F,$38,$0A,$38,$17,$38        ;!
    db $FC,$00,$0F,$38,$12,$38,$1C,$38        ;!
    db $11,$38,$FF                            ;!
                                              ;!
EnemyNameStripe07:                            ;!
    db $20,$00,$40,$E2,$FA,$34,$20,$80        ;!
    db $C0,$2C,$FA,$34,$20,$81,$C0,$2C        ;!
    db $FA,$34,$20,$82,$C0,$2C,$FA,$34        ;!
    db $20,$83,$C0,$12,$FA,$34,$20,$8E        ;!
    db $C0,$26,$FA,$34,$20,$8F,$C0,$26        ;!
    db $FA,$34,$20,$90,$C0,$10,$FA,$34        ;!
    db $20,$91,$C0,$10,$FA,$34,$20,$7C        ;!
    db $C0,$28,$FA,$34,$20,$7D,$C0,$28        ;!
    db $FA,$34,$20,$7E,$C0,$28,$FA,$34        ;!
    db $20,$7F,$C0,$28,$FA,$34,$21,$AE        ;!
    db $40,$C2,$FA,$34,$23,$0E,$40,$22        ;!
    db $FA,$34,$23,$2E,$40,$22,$FA,$34        ;!
    db $23,$4E,$49,$82,$FA,$34,$50,$A3        ;!
    db $00,$19,$86,$78,$0B,$38,$18,$38        ;!
    db $18,$38,$86,$38,$FC,$00,$0B,$38        ;!
    db $1E,$38,$0D,$38,$0D,$38,$12,$38        ;!
    db $0E,$38,$1C,$38,$50,$D2,$00,$13        ;!
    db $0F,$38,$12,$38,$1C,$38,$11,$38        ;!
    db $12,$38,$17,$38,$85,$38,$0B,$38        ;!
    db $18,$38,$18,$38,$52,$22,$00,$19        ;!
    db $1D,$38,$11,$38,$0E,$38,$FC,$00        ;!
    db $0B,$38,$12,$38,$10,$38,$FC,$00        ;!
    db $86,$78,$0B,$38,$18,$38,$18,$38        ;!
    db $86,$38,$52,$B3,$00,$0B,$0E,$38        ;!
    db $0E,$38,$1B,$38,$12,$38,$0E,$38        ;!
    db $1C,$38,$FF                            ;!
                                              ;!
EnemyNameStripe08:                            ;!
    db $20,$00,$40,$BE,$FA,$34,$20,$60        ;!
    db $C0,$2E,$FA,$34,$20,$61,$C0,$2E        ;!
    db $FA,$34,$20,$62,$C0,$2E,$FA,$34        ;!
    db $21,$63,$C0,$1E,$FA,$34,$21,$64        ;!
    db $C0,$1E,$FA,$34,$21,$65,$C0,$1E        ;!
    db $FA,$34,$20,$7D,$C0,$2A,$FA,$34        ;!
    db $20,$7E,$C0,$2A,$FA,$34,$20,$7F        ;!
    db $C0,$2A,$FA,$34,$21,$7C,$C0,$1A        ;!
    db $FA,$34,$21,$AE,$C0,$1A,$FA,$34        ;!
    db $21,$AF,$C0,$1A,$FA,$34,$21,$60        ;!
    db $40,$7E,$FA,$34,$23,$30,$40,$1E        ;!
    db $FA,$34,$23,$50,$49,$5E,$FA,$34        ;!
    db $50,$6B,$00,$13,$15,$38,$12,$38        ;!
    db $15,$38,$FC,$00,$1C,$38,$19,$38        ;!
    db $0A,$38,$1B,$38,$14,$38,$22,$38        ;!
    db $50,$F1,$00,$15,$0B,$38,$18,$38        ;!
    db $17,$38,$22,$38,$FC,$00,$0B,$38        ;!
    db $0E,$38,$0E,$38,$1D,$38,$15,$38        ;!
    db $0E,$38,$51,$22,$00,$11,$0D,$38        ;!
    db $1B,$38,$22,$38,$FC,$00,$0B,$38        ;!
    db $18,$38,$17,$38,$0E,$38,$1C,$38        ;!
    db $52,$4F,$00,$0B,$1D,$38,$11,$38        ;!
    db $20,$38,$18,$38,$16,$38,$19,$38        ;!
    db $52,$B6,$00,$0B,$1D,$38,$11,$38        ;!
    db $20,$38,$12,$38,$16,$38,$19,$38        ;!
    db $52,$E9,$00,$0D,$11,$38,$18,$38        ;!
    db $1D,$38,$11,$38,$0E,$38,$0A,$38        ;!
    db $0D,$38,$FF                            ;!
                                              ;!
EnemyNameStripe09:                            ;!
    db $20,$00,$40,$FE,$FA,$34,$20,$80        ;!
    db $C0,$14,$FA,$34,$20,$81,$C0,$14        ;!
    db $FA,$34,$20,$82,$C0,$14,$FA,$34        ;!
    db $20,$83,$C0,$14,$FA,$34,$20,$84        ;!
    db $C0,$14,$FA,$34,$20,$85,$C0,$14        ;!
    db $FA,$34,$20,$86,$C0,$14,$FA,$34        ;!
    db $20,$87,$C0,$14,$FA,$34,$20,$98        ;!
    db $C0,$14,$FA,$34,$20,$99,$C0,$14        ;!
    db $FA,$34,$20,$9A,$C0,$14,$FA,$34        ;!
    db $20,$9B,$C0,$14,$FA,$34,$20,$9C        ;!
    db $C0,$14,$FA,$34,$20,$9D,$C0,$14        ;!
    db $FA,$34,$20,$9E,$C0,$14,$FA,$34        ;!
    db $20,$9F,$C0,$14,$FA,$34,$21,$E0        ;!
    db $40,$7E,$FA,$34,$22,$20,$C0,$12        ;!
    db $FA,$34,$22,$21,$C0,$12,$FA,$34        ;!
    db $22,$22,$C0,$12,$FA,$34,$22,$23        ;!
    db $C0,$12,$FA,$34,$22,$3C,$C0,$12        ;!
    db $FA,$34,$22,$3D,$C0,$12,$FA,$34        ;!
    db $22,$3E,$C0,$12,$FA,$34,$22,$3F        ;!
    db $C0,$12,$FA,$34,$23,$60,$49,$3E        ;!
    db $FA,$34,$50,$90,$00,$0D,$10,$38        ;!
    db $1B,$38,$12,$38,$17,$38,$0D,$38        ;!
    db $0E,$38,$1B,$38,$51,$A7,$00,$17        ;!
    db $0B,$38,$0A,$38,$15,$38,$15,$38        ;!
    db $85,$78,$17,$38,$85,$38,$0C,$38        ;!
    db $11,$38,$0A,$38,$12,$38,$17,$38        ;!
    db $52,$4D,$00,$0F,$0F,$38,$12,$38        ;!
    db $1C,$38,$11,$38,$0B,$38,$18,$38        ;!
    db $17,$38,$0E,$38,$FF                    ;!
                                              ;!
EnemyNameStripe0A:                            ;!
    db $20,$00,$40,$FE,$FA,$34,$20,$80        ;!
    db $C0,$2A,$FA,$34,$20,$81,$C0,$2A        ;!
    db $FA,$34,$20,$82,$C0,$2A,$FA,$34        ;!
    db $20,$83,$C0,$2A,$FA,$34,$20,$84        ;!
    db $C0,$2A,$FA,$34,$20,$85,$C0,$2A        ;!
    db $FA,$34,$20,$86,$C0,$2A,$FA,$34        ;!
    db $20,$87,$C0,$2A,$FA,$34,$20,$98        ;!
    db $C0,$2A,$FA,$34,$20,$99,$C0,$2A        ;!
    db $FA,$34,$20,$9A,$C0,$2A,$FA,$34        ;!
    db $20,$9B,$C0,$2A,$FA,$34,$20,$9C        ;!
    db $C0,$2A,$FA,$34,$20,$9D,$C0,$2A        ;!
    db $FA,$34,$20,$9E,$C0,$2A,$FA,$34        ;!
    db $20,$9F,$C0,$2A,$FA,$34,$23,$40        ;!
    db $49,$7E,$FA,$34,$51,$8D,$00,$0B        ;!
    db $1B,$38,$0E,$38,$23,$38,$17,$38        ;!
    db $18,$38,$1B,$38,$FF                    ;!
                                              ;!
EnemyNameStripe0B:                            ;!
    db $20,$00,$42,$80,$FA,$34,$21,$40        ;!
    db $C0,$12,$FA,$34,$21,$41,$C0,$12        ;!
    db $FA,$34,$21,$42,$C0,$12,$FA,$34        ;!
    db $21,$43,$C0,$12,$FA,$34,$21,$44        ;!
    db $C0,$12,$FA,$34,$21,$45,$C0,$12        ;!
    db $FA,$34,$21,$46,$C0,$12,$FA,$34        ;!
    db $21,$47,$C0,$12,$FA,$34,$21,$58        ;!
    db $C0,$12,$FA,$34,$21,$59,$C0,$12        ;!
    db $FA,$34,$21,$5A,$C0,$12,$FA,$34        ;!
    db $21,$5B,$C0,$12,$FA,$34,$21,$5C        ;!
    db $C0,$12,$FA,$34,$21,$5D,$C0,$12        ;!
    db $FA,$34,$21,$5E,$C0,$12,$FA,$34        ;!
    db $21,$5F,$C0,$12,$FA,$34,$22,$80        ;!
    db $4A,$FE,$FA,$34,$51,$8B,$00,$15        ;!
    db $16,$38,$0E,$38,$0C,$38,$11,$38        ;!
    db $0A,$38,$14,$38,$18,$38,$18,$38        ;!
    db $19,$38,$0A,$38,$1C,$38,$FF            ;!
                                              ;!
EnemyNameStripe0C:                            ;!
    db $20,$00,$5F,$FE,$FA,$14,$51,$25        ;!
    db $00,$0B,$16,$38,$18,$38,$1B,$38        ;!
    db $1D,$38,$18,$38,$17,$38,$51,$44        ;!
    db $00,$11,$14,$38,$18,$38,$18,$38        ;!
    db $19,$38,$0A,$38,$FC,$00,$13,$38        ;!
    db $1B,$38,$24,$38,$51,$37,$00,$05        ;!
    db $1B,$38,$18,$38,$22,$38,$51,$56        ;!
    db $00,$09,$14,$38,$18,$38,$18,$38        ;!
    db $19,$38,$0A,$38,$52,$0D,$00,$0B        ;!
    db $0B,$38,$18,$38,$20,$38,$1C,$38        ;!
    db $0E,$38,$1B,$38,$52,$43,$00,$09        ;!
    db $15,$38,$0E,$38,$16,$38,$16,$38        ;!
    db $22,$38,$52,$63,$00,$09,$14,$38        ;!
    db $18,$38,$18,$38,$19,$38,$0A,$38        ;!
    db $52,$59,$00,$09,$20,$38,$0E,$38        ;!
    db $17,$38,$0D,$38,$22,$38,$52,$78        ;!
    db $00,$0D,$18,$38,$24,$38,$14,$38        ;!
    db $18,$38,$18,$38,$19,$38,$0A,$38        ;!
    db $53,$06,$00,$07,$12,$38,$10,$38        ;!
    db $10,$38,$22,$38,$53,$26,$00,$09        ;!
    db $14,$38,$18,$38,$18,$38,$19,$38        ;!
    db $0A,$38,$53,$17,$00,$09,$15,$38        ;!
    db $0A,$38,$1B,$38,$1B,$38,$22,$38        ;!
    db $53,$37,$00,$09,$14,$38,$18,$38        ;!
    db $18,$38,$19,$38,$0A,$38,$53,$2E        ;!
    db $00,$0B,$15,$38,$1E,$38,$0D,$38        ;!
    db $20,$38,$12,$38,$10,$38,$53,$4D        ;!
    db $00,$11,$1F,$38,$18,$38,$17,$38        ;!
    db $FC,$00,$14,$38,$18,$38,$18,$38        ;!
    db $19,$38,$0A,$38,$FF                    ;!
                                              ;!
SpecEneNameStripe00:                          ;!
    db $FF,$FF                                ;!
SpecEneNameStripe01:                          ;!
    db $52,$C1,$00,$0D,$19,$38,$1E,$38        ;!
    db $16,$38,$19,$38,$14,$38,$12,$38        ;!
    db $17,$38,$FF,$FF                        ;!
SpecEneNameStripe02:                          ;!
    db $53,$2D,$00,$0B,$19                    ;!
    db $38,$12,$38,$0D,$38,$10,$38,$12        ;!
    db $38,$1D,$38,$FF,$FF                    ;!
SpecEneNameStripe03:                          ;!
    db $FF,$FF                                ;!
SpecEneNameStripe04:                          ;!
    db $53,$2E,$00,$15,$16,$38,$0A,$38        ;!
    db $1C,$38,$14,$38,$FC,$00,$14,$38        ;!
    db $18,$38,$18,$38,$19,$38,$0A,$38        ;!
    db $1C,$38,$FF,$FF                        ;!
SpecEneNameStripe05:                          ;!
    db $FF,$FF                                ;!
SpecEneNameStripe06:                          ;!
    db $FF,$FF                                ;!
SpecEneNameStripe07:                          ;!
    db $FF,$FF                                ;!
SpecEneNameStripe08:                          ;!
    db $FF,$FF                                ;!
SpecEneNameStripe09:                          ;!
    db $FF,$FF                                ;!
SpecEneNameStripe0A:                          ;!
    db $FF,$FF                                ;!
SpecEneNameStripe0B:                          ;!
    db $FF,$FF                                ;!
SpecEneNameStripe0C:                          ;!
    db $FF,$FF                                ;!
endif                                         ;/===============================================

    %insert_empty($315,$161,$161,$161,$161)
