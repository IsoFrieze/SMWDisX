                      ORG $018000                               ;;  J |  U + SS / E0 \ E1 ;
                                                                ;;                        ;
DATA_018000:          db $80,$40,$20,$10,$08,$04,$02,$01        ;;8000|8000+8000/8000\8000;
                                                                ;;                        ;
IsTouchingObjSide:    LDA.W !SpriteBlockedDirs,X                ;;8008|8008+8008/8008\8008; \ Set A to lower two bits of 
                      AND.B #$03                                ;;800B|800B+800B/800B\800B; / current sprite's Position Status 
                      RTS                                       ;;800D|800D+800D/800D\800D; Return 
                                                                ;;                        ;
IsOnGround:           LDA.W !SpriteBlockedDirs,X                ;;800E|800E+800E/800E\800E; \ Set A to bit 2 of 
                      AND.B #$04                                ;;8011|8011+8011/8011\8011; / current sprite's Position Status 
                      RTS                                       ;;8013|8013+8013/8013\8013; Return 
                                                                ;;                        ;
IsTouchingCeiling:    LDA.W !SpriteBlockedDirs,X                ;;8014|8014+8014/8014\8014; \ Set A to bit 3 of 
                      AND.B #$08                                ;;8017|8017+8017/8017\8017; / current sprite's Position Status 
                      RTS                                       ;;8019|8019+8019/8019\8019; Return 
                                                                ;;                        ;
UpdateYPosNoGvtyW:    PHB                                       ;;801A|801A+801A/801A\801A;
                      PHK                                       ;;801B|801B+801B/801B\801B;
                      PLB                                       ;;801C|801C+801C/801C\801C;
                      JSR SubSprYPosNoGrvty                     ;;801D|801D+801D/801D\801D;
                      PLB                                       ;;8020|8020+8020/8020\8020;
                      RTL                                       ;;8021|8021+8021/8021\8021; Return 
                                                                ;;                        ;
UpdateXPosNoGvtyW:    PHB                                       ;;8022|8022+8022/8022\8022;
                      PHK                                       ;;8023|8023+8023/8023\8023;
                      PLB                                       ;;8024|8024+8024/8024\8024;
                      JSR SubSprXPosNoGrvty                     ;;8025|8025+8025/8025\8025;
                      PLB                                       ;;8028|8028+8028/8028\8028;
                      RTL                                       ;;8029|8029+8029/8029\8029; Return 
                                                                ;;                        ;
UpdateSpritePos:      PHB                                       ;;802A|802A+802A/802A\802A;
                      PHK                                       ;;802B|802B+802B/802B\802B;
                      PLB                                       ;;802C|802C+802C/802C\802C;
                      JSR SubUpdateSprPos                       ;;802D|802D+802D/802D\802D;
                      PLB                                       ;;8030|8030+8030/8030\8030;
                      RTL                                       ;;8031|8031+8031/8031\8031; Return 
                                                                ;;                        ;
SprSprInteract:       PHB                                       ;;8032|8032+8032/8032\8032;
                      PHK                                       ;;8033|8033+8033/8033\8033;
                      PLB                                       ;;8034|8034+8034/8034\8034;
                      JSR SubSprSprInteract                     ;;8035|8035+8035/8035\8035;
                      PLB                                       ;;8038|8038+8038/8038\8038;
                      RTL                                       ;;8039|8039+8039/8039\8039; Return 
                                                                ;;                        ;
SprSpr_MarioSprRts:   PHB                                       ;;803A|803A+803A/803A\803A;
                      PHK                                       ;;803B|803B+803B/803B\803B;
                      PLB                                       ;;803C|803C+803C/803C\803C;
                      JSR SubSprSpr_MarioSpr                    ;;803D|803D+803D/803D\803D;
                      PLB                                       ;;8040|8040+8040/8040\8040;
                      RTL                                       ;;8041|8041+8041/8041\8041; Return 
                                                                ;;                        ;
GenericSprGfxRt0:     PHB                                       ;;8042|8042+8042/8042\8042;
                      PHK                                       ;;8043|8043+8043/8043\8043;
                      PLB                                       ;;8044|8044+8044/8044\8044;
                      JSR SubSprGfx0Entry0                      ;;8045|8045+8045/8045\8045;
                      PLB                                       ;;8048|8048+8048/8048\8048;
                      RTL                                       ;;8049|8049+8049/8049\8049; Return 
                                                                ;;                        ;
InvertAccum:          EOR.B #$FF                                ;;804A|804A+804A/804A\804A; \ Set A to -A 
                      INC A                                     ;;804C|804C+804C/804C\804C; /  
                      RTS                                       ;;804D|804D+804D/804D\804D; Return 
                                                                ;;                        ;
CODE_01804E:          LDA.W !SpriteBlockedDirs,X                ;;804E|804E+804E/804E\804E; \ Branch if in air 
                      BEQ Return018072                          ;;8051|8051+8051/8051\8051; / 
                      LDA.B !TrueFrame                          ;;8053|8053+8053/8053\8053;
                      AND.B #$03                                ;;8055|8055+8055/8055\8055;
                      ORA.B !LevelIsSlippery                    ;;8057|8057+8057/8057\8057;
                      BNE Return018072                          ;;8059|8059+8059/8059\8059;
                      LDA.B #$04                                ;;805B|805B+805B/805B\805B;
                      STA.B !_0                                 ;;805D|805D+805D/805D\805D;
                      LDA.B #$0A                                ;;805F|805F+805F/805F\805F;
                      STA.B !_1                                 ;;8061|8061+8061/8061\8061;
CODE_018063:          JSR IsSprOffScreen                        ;;8063|8063+8063/8063\8063;
                      BNE Return018072                          ;;8066|8066+8066/8066\8066;
                      LDY.B #$03                                ;;8068|8068+8068/8068\8068;
CODE_01806A:          LDA.W !SmokeSpriteNumber,Y                ;;806A|806A+806A/806A\806A;
                      BEQ CODE_018073                           ;;806D|806D+806D/806D\806D;
                      DEY                                       ;;806F|806F+806F/806F\806F;
                      BPL CODE_01806A                           ;;8070|8070+8070/8070\8070;
Return018072:         RTS                                       ;;8072|8072+8072/8072\8072; Return 
                                                                ;;                        ;
CODE_018073:          LDA.B #$03                                ;;8073|8073+8073/8073\8073;
                      STA.W !SmokeSpriteNumber,Y                ;;8075|8075+8075/8075\8075;
                      LDA.B !SpriteXPosLow,X                    ;;8078|8078+8078/8078\8078;
                      ADC.B !_0                                 ;;807A|807A+807A/807A\807A;
                      STA.W !SmokeSpriteXPos,Y                  ;;807C|807C+807C/807C\807C;
                      LDA.B !SpriteYPosLow,X                    ;;807F|807F+807F/807F\807F;
                      ADC.B !_1                                 ;;8081|8081+8081/8081\8081;
                      STA.W !SmokeSpriteYPos,Y                  ;;8083|8083+8083/8083\8083;
                      LDA.B #$13                                ;;8086|8086+8086/8086\8086;
                      STA.W !SmokeSpriteTimer,Y                 ;;8088|8088+8088/8088\8088;
                      RTS                                       ;;808B|808B+808B/808B\808B; Return 
                                                                ;;                        ;
CODE_01808C:          PHB                                       ;;808C|808C+808C/808C\808C;
                      PHK                                       ;;808D|808D+808D/808D\808D;
                      PLB                                       ;;808E|808E+808E/808E\808E;
                      LDA.W !IsCarryingItem                     ;;808F|808F+808F/808F\808F;
                      STA.W !CarryingFlag                       ;;8092|8092+8092/8092\8092; Reset carrying enemy flag 
                      STZ.W !IsCarryingItem                     ;;8095|8095+8095/8095\8095;
                      STZ.W !StandOnSolidSprite                 ;;8098|8098+8098/8098\8098;
                      STZ.W !PlayerInCloud                      ;;809B|809B+809B/809B\809B;
                      LDA.W !CurrentYoshiSlot                   ;;809E|809E+809E/809E\809E;
                      STA.W !YoshiIsLoose                       ;;80A1|80A1+80A1/80A1\80A1;
                      STZ.W !CurrentYoshiSlot                   ;;80A4|80A4+80A4/80A4\80A4;
                      LDX.B #$0B                                ;;80A7|80A7+80A7/80A7\80A7;
                    - STX.W !CurSpriteProcess                   ;;80A9|80A9+80A9/80A9\80A9;
                      JSR CODE_0180D2                           ;;80AC|80AC+80AC/80AC\80AC;
                      JSR HandleSprite                          ;;80AF|80AF+80AF/80AF\80AF;
                      DEX                                       ;;80B2|80B2+80B2/80B2\80B2;
                      BPL -                                     ;;80B3|80B3+80B3/80B3\80B3;
                      LDA.W !ActivateClusterSprite              ;;80B5|80B5+80B5/80B5\80B5;
                      BEQ +                                     ;;80B8|80B8+80B8/80B8\80B8;
                      JSL CODE_02F808                           ;;80BA|80BA+80BA/80BA\80BA;
                    + LDA.W !CurrentYoshiSlot                   ;;80BE|80BE+80BE/80BE\80BE;
                      BNE +                                     ;;80C1|80C1+80C1/80C1\80C1;
                      STZ.W !PlayerRidingYoshi                  ;;80C3|80C3+80C3/80C3\80C3;
                      STZ.W !ScrShakePlayerYOffset              ;;80C6|80C6+80C6/80C6\80C6;
                    + PLB                                       ;;80C9|80C9+80C9/80C9\80C9;
                      RTL                                       ;;80CA|80CA+80CA/80CA\80CA; Return 
                                                                ;;                        ;
IsSprOffScreen:       LDA.W !SpriteOffscreenX,X                 ;;80CB|80CB+80CB/80CB\80CB; \ A = Current sprite is offscreen 
                      ORA.W !SpriteOffscreenVert,X              ;;80CE|80CE+80CE/80CE\80CE; /  
                      RTS                                       ;;80D1|80D1+80D1/80D1\80D1; Return 
                                                                ;;                        ;
CODE_0180D2:          PHX                                       ;;80D2|80D2+80D2/80D2\80D2; In all sprite routines, X = current sprite 
                      TXA                                       ;;80D3|80D3+80D3/80D3\80D3;
                      LDX.W !SpriteMemorySetting                ;;80D4|80D4+80D4/80D4\80D4; $1692 = Current Sprite memory settings 
                      CLC                                       ;;80D7|80D7+80D7/80D7\80D7; \  
                      ADC.L DATA_07F0B4,X                       ;;80D8|80D8+80D8/80D8\80D8;  |Add $07:F0B4,$1692 to sprite index.  i.e. minimum one tile allotted to each sprite 
                      TAX                                       ;;80DC|80DC+80DC/80DC\80DC;  |the bytes read go straight to the OAM indexes 
                      LDA.L DATA_07F000,X                       ;;80DD|80DD+80DD/80DD\80DD;  | 
                      PLX                                       ;;80E1|80E1+80E1/80E1\80E1; /  
                      STA.W !SpriteOAMIndex,X                   ;;80E2|80E2+80E2/80E2\80E2; Current sprite's OAM index 
                      LDA.W !SpriteStatus,X                     ;;80E5|80E5+80E5/80E5\80E5; If  (something related to current sprite) is 0 
                      BEQ Return018126                          ;;80E8|80E8+80E8/80E8\80E8; do not decrement these counters 
                      LDA.B !SpriteLock                         ;;80EA|80EA+80EA/80EA\80EA; Lock sprites timer 
                      BNE Return018126                          ;;80EC|80EC+80EC/80EC\80EC; if sprites locked, do not decrement counters 
                      LDA.W !SpriteMisc1540,X                   ;;80EE|80EE+80EE/80EE\80EE; \ Decrement a bunch of sprite counter tables 
                      BEQ +                                     ;;80F1|80F1+80F1/80F1\80F1;  | 
                      DEC.W !SpriteMisc1540,X                   ;;80F3|80F3+80F3/80F3\80F3;  |Do not decrement any individual counter if it's already at zero 
                    + LDA.W !SpriteMisc154C,X                   ;;80F6|80F6+80F6/80F6\80F6;  | 
                      BEQ +                                     ;;80F9|80F9+80F9/80F9\80F9;  | 
                      DEC.W !SpriteMisc154C,X                   ;;80FB|80FB+80FB/80FB\80FB;  | 
                    + LDA.W !SpriteMisc1558,X                   ;;80FE|80FE+80FE/80FE\80FE;  | 
                      BEQ +                                     ;;8101|8101+8101/8101\8101;  | 
                      DEC.W !SpriteMisc1558,X                   ;;8103|8103+8103/8103\8103;  | 
                    + LDA.W !SpriteMisc1564,X                   ;;8106|8106+8106/8106\8106;  | 
                      BEQ +                                     ;;8109|8109+8109/8109\8109;  | 
                      DEC.W !SpriteMisc1564,X                   ;;810B|810B+810B/810B\810B;  | 
                    + LDA.W !SpriteMisc1FE2,X                   ;;810E|810E+810E/810E\810E;  | 
                      BEQ +                                     ;;8111|8111+8111/8111\8111;  | 
                      DEC.W !SpriteMisc1FE2,X                   ;;8113|8113+8113/8113\8113;  | 
                    + LDA.W !SpriteMisc15AC,X                   ;;8116|8116+8116/8116\8116;  | 
                      BEQ +                                     ;;8119|8119+8119/8119\8119;  | 
                      DEC.W !SpriteMisc15AC,X                   ;;811B|811B+811B/811B\811B;  | 
                    + LDA.W !SpriteMisc163E,X                   ;;811E|811E+811E/811E\811E;  | 
                      BEQ Return018126                          ;;8121|8121+8121/8121\8121;  | 
                      DEC.W !SpriteMisc163E,X                   ;;8123|8123+8123/8123\8123;  | 
Return018126:         RTS                                       ;;8126|8126+8126/8126\8126; / Return 
                                                                ;;                        ;
HandleSprite:         LDA.W !SpriteStatus,X                     ;;8127|8127+8127/8127\8127; Call a routine based on the sprite's status 
                      BEQ EraseSprite                           ;;812A|812A+812A/812A\812A; Routine for status 0 hardcoded, maybe for performance 
                      CMP.B #$08                                ;;812C|812C+812C/812C\812C;
                      BNE +                                     ;;812E|812E+812E/812E\812E; Routine for status 8 hardcoded, maybe for preformance 
                      JMP CallSpriteMain                        ;;8130|8130+8130/8130\8130;
                                                                ;;                        ;
                    + JSL ExecutePtr                            ;;8133|8133+8133/8133\8133;
                                                                ;;                        ;
                      dw EraseSprite                            ;;8137|8137+8137/8137\8137; 0 - Non-existant (Bypassed above) 
                      dw CallSpriteInit                         ;;8139|8139+8139/8139\8139; 1 - Initialization 
                      dw HandleSprKilled                        ;;813B|813B+813B/813B\813B; 2 - Falling off screen (hit by star, shell, etc) 
                      dw HandleSprSmushed                       ;;813D|813D+813D/813D\813D; 3 - Smushed 
                      dw HandleSprSpinJump                      ;;813F|813F+813F/813F\813F; 4 - Spin Jumped 
                      dw CODE_019A7B                            ;;8141|8141+8141/8141\8141; 5 
                      dw HandleSprLvlEnd                        ;;8143|8143+8143/8143\8143; 6 - End of level turn to coin 
                      dw Return018156                           ;;8145|8145+8145/8145\8145; 7 - Unused 
                      dw Return0185C2                           ;;8147|8147+8147/8147\8147; 8 - Normal (Bypassed above) 
                      dw HandleSprStunned                       ;;8149|8149+8149/8149\8149; 9 - Stationary (Carryable, flipped, stunned) 
                      dw HandleSprKicked                        ;;814B|814B+814B/814B\814B; A - Kicked 
                      dw HandleSprCarried                       ;;814D|814D+814D/814D\814D; B - Carried 
                      dw HandleGoalPowerup                      ;;814F|814F+814F/814F\814F; C - Power up from carrying a sprite past the goal tape 
                                                                ;;                        ;
EraseSprite:          LDA.B #$FF                                ;;8151|8151+8151/8151\8151; \ Permanently erase sprite: 
                      STA.W !SpriteLoadIndex,X                  ;;8153|8153+8153/8153\8153;  | By changing the sprite's index into the level tables 
Return018156:         RTS                                       ;;8156|8156+8156/8156\8156; / the actual sprite won't get marked for reloading 
                                                                ;;                        ;
HandleGoalPowerup:    JSR CallSpriteMain                        ;;8157|8157+8157/8157\8157;
                      JSR SubOffscreen0Bnk1                     ;;815A|815A+815A/815A\815A;
                      JSR SubUpdateSprPos                       ;;815D|815D+815D/815D\815D;
                      DEC.B !SpriteYSpeed,X                     ;;8160|8160+8160/8160\8160;
                      DEC.B !SpriteYSpeed,X                     ;;8162|8162+8162/8162\8162;
                      JSR IsOnGround                            ;;8164|8164+8164/8164\8164;
                      BEQ +                                     ;;8167|8167+8167/8167\8167;
                      JSR SetSomeYSpeed__                       ;;8169|8169+8169/8169\8169;
                    + RTS                                       ;;816C|816C+816C/816C\816C; Return 
                                                                ;;                        ;
HandleSprLvlEnd:      JSL LvlEndSprCoins                        ;;816D|816D+816D/816D\816D;
                      RTS                                       ;;8171|8171+8171/8171\8171; Return 
                                                                ;;                        ;
CallSpriteInit:       LDA.B #$08                                ;;8172|8172+8172/8172\8172; \ Sprite status = Normal 
                      STA.W !SpriteStatus,X                     ;;8174|8174+8174/8174\8174; / 
                      LDA.B !SpriteNumber,X                     ;;8177|8177+8177/8177\8177;
                      JSL ExecutePtr                            ;;8179|8179+8179/8179\8179;
                                                                ;;                        ;
                      dw InitStandardSprite                     ;;817D|817D+817D/817D\817D; 00 - Green Koopa, no shell 
                      dw InitStandardSprite                     ;;817F|817F+817F/817F\817F; 01 - Red Koopa, no shell 
                      dw InitStandardSprite                     ;;8181|8181+8181/8181\8181; 02 - Blue Koopa, no shell 
                      dw InitStandardSprite                     ;;8183|8183+8183/8183\8183; 03 - Yellow Koopa, no shell 
                      dw InitStandardSprite                     ;;8185|8185+8185/8185\8185; 04 - Green Koopa 
                      dw InitStandardSprite                     ;;8187|8187+8187/8187\8187; 05 - Red Koopa 
                      dw InitStandardSprite                     ;;8189|8189+8189/8189\8189; 06 - Blue Koopa 
                      dw InitStandardSprite                     ;;818B|818B+818B/818B\818B; 07 - Yellow Koopa 
                      dw InitStandardSprite                     ;;818D|818D+818D/818D\818D; 08 - Green Koopa, flying left 
                      dw InitGrnBounceKoopa                     ;;818F|818F+818F/818F\818F; 09 - Green bouncing Koopa 
                      dw InitStandardSprite                     ;;8191|8191+8191/8191\8191; 0A - Red vertical flying Koopa 
                      dw InitStandardSprite                     ;;8193|8193+8193/8193\8193; 0B - Red horizontal flying Koopa 
                      dw InitStandardSprite                     ;;8195|8195+8195/8195\8195; 0C - Yellow Koopa with wings 
                      dw InitBomb                               ;;8197|8197+8197/8197\8197; 0D - Bob-omb 
                      dw InitKeyHole                            ;;8199|8199+8199/8199\8199; 0E - Keyhole 
                      dw InitStandardSprite                     ;;819B|819B+819B/819B\819B; 0F - Goomba 
                      dw InitStandardSprite                     ;;819D|819D+819D/819D\819D; 10 - Bouncing Goomba with wings 
                      dw InitStandardSprite                     ;;819F|819F+819F/819F\819F; 11 - Buzzy Beetle 
                      dw UnusedInit                             ;;81A1|81A1+81A1/81A1\81A1; 12 - Unused 
                      dw InitStandardSprite                     ;;81A3|81A3+81A3/81A3\81A3; 13 - Spiny 
                      dw InitStandardSprite                     ;;81A5|81A5+81A5/81A5\81A5; 14 - Spiny falling 
                      dw Return01B011                           ;;81A7|81A7+81A7/81A7\81A7; 15 - Fish, horizontal 
                      dw InitVerticalFish                       ;;81A9|81A9+81A9/81A9\81A9; 16 - Fish, vertical 
                      dw InitFish                               ;;81AB|81AB+81AB/81AB\81AB; 17 - Fish, created from generator 
                      dw InitFish                               ;;81AD|81AD+81AD/81AD\81AD; 18 - Surface jumping fish 
                      dw InitMsg_SideExit                       ;;81AF|81AF+81AF/81AF\81AF; 19 - Display text from level Message Box #1 
                      dw InitPiranha                            ;;81B1|81B1+81B1/81B1\81B1; 1A - Classic Piranha Plant 
                      dw Return0185C2                           ;;81B3|81B3+81B3/81B3\81B3; 1B - Bouncing football in place 
                      dw InitBulletBill                         ;;81B5|81B5+81B5/81B5\81B5; 1C - Bullet Bill 
                      dw InitStandardSprite                     ;;81B7|81B7+81B7/81B7\81B7; 1D - Hopping flame 
                      dw InitLakitu                             ;;81B9|81B9+81B9/81B9\81B9; 1E - Lakitu 
                      dw InitMagikoopa                          ;;81BB|81BB+81BB/81BB\81BB; 1F - Magikoopa 
                      dw Return018583                           ;;81BD|81BD+81BD/81BD\81BD; 20 - Magikoopa's magic 
                      dw FaceMario                              ;;81BF|81BF+81BF/81BF\81BF; 21 - Moving coin 
                      dw InitVertNetKoopa                       ;;81C1|81C1+81C1/81C1\81C1; 22 - Green vertical net Koopa 
                      dw InitVertNetKoopa                       ;;81C3|81C3+81C3/81C3\81C3; 23 - Red vertical net Koopa 
                      dw InitHorzNetKoopa                       ;;81C5|81C5+81C5/81C5\81C5; 24 - Green horizontal net Koopa 
                      dw InitHorzNetKoopa                       ;;81C7|81C7+81C7/81C7\81C7; 25 - Red horizontal net Koopa 
                      dw InitThwomp                             ;;81C9|81C9+81C9/81C9\81C9; 26 - Thwomp 
                      dw Return01AEA2                           ;;81CB|81CB+81CB/81CB\81CB; 27 - Thwimp 
                      dw InitBigBoo                             ;;81CD|81CD+81CD/81CD\81CD; 28 - Big Boo 
                      dw InitKoopaKid                           ;;81CF|81CF+81CF/81CF\81CF; 29 - Koopa Kid 
                      dw InitDownPiranha                        ;;81D1|81D1+81D1/81D1\81D1; 2A - Upside down Piranha Plant 
                      dw Return0185C2                           ;;81D3|81D3+81D3/81D3\81D3; 2B - Sumo Brother's fire lightning 
                      dw InitYoshiEgg                           ;;81D5|81D5+81D5/81D5\81D5; 2C - Yoshi egg 
                      dw InitKey_BabyYoshi                      ;;81D7|81D7+81D7/81D7\81D7; 2D - Baby green Yoshi 
                      dw InitSpikeTop                           ;;81D9|81D9+81D9/81D9\81D9; 2E - Spike Top 
                      dw Return0185C2                           ;;81DB|81DB+81DB/81DB\81DB; 2F - Portable spring board 
                      dw FaceMario                              ;;81DD|81DD+81DD/81DD\81DD; 30 - Dry Bones, throws bones 
                      dw FaceMario                              ;;81DF|81DF+81DF/81DF\81DF; 31 - Bony Beetle 
                      dw FaceMario                              ;;81E1|81E1+81E1/81E1\81E1; 32 - Dry Bones, stay on ledge 
                      dw InitFireball                           ;;81E3|81E3+81E3/81E3\81E3; 33 - Fireball 
                      dw Return0185C2                           ;;81E5|81E5+81E5/81E5\81E5; 34 - Boss fireball 
                      dw InitYoshi                              ;;81E7|81E7+81E7/81E7\81E7; 35 - Green Yoshi 
                      dw Return0185C2                           ;;81E9|81E9+81E9/81E9\81E9; 36 - Unused 
                      dw InitBigBoo                             ;;81EB|81EB+81EB/81EB\81EB; 37 - Boo 
                      dw InitEerie                              ;;81ED|81ED+81ED/81ED\81ED; 38 - Eerie 
                      dw InitEerie                              ;;81EF|81EF+81EF/81EF\81EF; 39 - Eerie, wave motion 
                      dw InitUrchin                             ;;81F1|81F1+81F1/81F1\81F1; 3A - Urchin, fixed 
                      dw InitUrchin                             ;;81F3|81F3+81F3/81F3\81F3; 3B - Urchin, wall detect 
                      dw InitUrchinWallFllw                     ;;81F5|81F5+81F5/81F5\81F5; 3C - Urchin, wall follow 
                      dw InitRipVanFish                         ;;81F7|81F7+81F7/81F7\81F7; 3D - Rip Van Fish 
                      dw InitPSwitch                            ;;81F9|81F9+81F9/81F9\81F9; 3E - POW 
                      dw Return0185C2                           ;;81FB|81FB+81FB/81FB\81FB; 3F - Para-Goomba 
                      dw Return0185C2                           ;;81FD|81FD+81FD/81FD\81FD; 40 - Para-Bomb 
                      dw Return01843D                           ;;81FF|81FF+81FF/81FF\81FF; 41 - Dolphin, horizontal 
                      dw Return01843D                           ;;8201|8201+8201/8201\8201; 42 - Dolphin2, horizontal 
                      dw Return01843D                           ;;8203|8203+8203/8203\8203; 43 - Dolphin, vertical 
                      dw Return01843D                           ;;8205|8205+8205/8205\8205; 44 - Torpedo Ted 
                      dw Return0185C2                           ;;8207|8207+8207/8207\8207; 45 - Directional coins 
                      dw InitDigginChuck                        ;;8209|8209+8209/8209\8209; 46 - Diggin' Chuck 
                      dw Return0183EE                           ;;820B|820B+820B/820B\820B; 47 - Swimming/Jumping fish 
                      dw Return0183EE                           ;;820D|820D+820D/820D\820D; 48 - Diggin' Chuck's rock 
                      dw InitGrowingPipe                        ;;820F|820F+820F/820F\820F; 49 - Growing/shrinking pipe end 
                      dw Return0183EE                           ;;8211|8211+8211/8211\8211; 4A - Goal Point Question Sphere 
                      dw InitPiranha                            ;;8213|8213+8213/8213\8213; 4B - Pipe dwelling Lakitu 
                      dw InitExplodingBlk                       ;;8215|8215+8215/8215\8215; 4C - Exploding Block 
                      dw InitMontyMole                          ;;8217|8217+8217/8217\8217; 4D - Ground dwelling Monty Mole 
                      dw InitMontyMole                          ;;8219|8219+8219/8219\8219; 4E - Ledge dwelling Monty Mole 
                      dw InitPiranha                            ;;821B|821B+821B/821B\821B; 4F - Jumping Piranha Plant 
                      dw InitPiranha                            ;;821D|821D+821D/821D\821D; 50 - Jumping Piranha Plant, spit fire 
                      dw FaceMario                              ;;821F|821F+821F/821F\821F; 51 - Ninji 
                      dw InitMovingLedge                        ;;8221|8221+8221/8221\8221; 52 - Moving ledge hole in ghost house 
                      dw Return0185C2                           ;;8223|8223+8223/8223\8223; 53 - Throw block sprite 
                      dw InitClimbingDoor                       ;;8225|8225+8225/8225\8225; 54 - Climbing net door 
                      dw InitChckbrdPlat                        ;;8227|8227+8227/8227\8227; 55 - Checkerboard platform, horizontal 
                      dw Return01B25D                           ;;8229|8229+8229/8229\8229; 56 - Flying rock platform, horizontal 
                      dw InitChckbrdPlat                        ;;822B|822B+822B/822B\822B; 57 - Checkerboard platform, vertical 
                      dw Return01B25D                           ;;822D|822D+822D/822D\822D; 58 - Flying rock platform, vertical 
                      dw Return01B267                           ;;822F|822F+822F/822F\822F; 59 - Turn block bridge, horizontal and vertical 
                      dw Return01B267                           ;;8231|8231+8231/8231\8231; 5A - Turn block bridge, horizontal 
                      dw InitFloatingPlat                       ;;8233|8233+8233/8233\8233; 5B - Brown platform floating in water 
                      dw InitFallingPlat                        ;;8235|8235+8235/8235\8235; 5C - Checkerboard platform that falls 
                      dw InitFloatingPlat                       ;;8237|8237+8237/8237\8237; 5D - Orange platform floating in water 
                      dw InitOrangePlat                         ;;8239|8239+8239/8239\8239; 5E - Orange platform, goes on forever 
                      dw InitBrwnChainPlat                      ;;823B|823B+823B/823B\823B; 5F - Brown platform on a chain 
                      dw Return01AE90                           ;;823D|823D+823D/823D\823D; 60 - Flat green switch palace switch 
                      dw InitFloatingSkull                      ;;823F|823F+823F/823F\823F; 61 - Floating skulls 
                      dw InitLineBrwnPlat                       ;;8241|8241+8241/8241\8241; 62 - Brown platform, line-guided 
                      dw InitLinePlat                           ;;8243|8243+8243/8243\8243; 63 - Checker/brown platform, line-guided 
                      dw InitLineRope                           ;;8245|8245+8245/8245\8245; 64 - Rope mechanism, line-guided 
                      dw InitLineGuidedSpr                      ;;8247|8247+8247/8247\8247; 65 - Chainsaw, line-guided 
                      dw InitLineGuidedSpr                      ;;8249|8249+8249/8249\8249; 66 - Upside down chainsaw, line-guided 
                      dw InitLineGuidedSpr                      ;;824B|824B+824B/824B\824B; 67 - Grinder, line-guided 
                      dw InitLineGuidedSpr                      ;;824D|824D+824D/824D\824D; 68 - Fuzz ball, line-guided 
                      dw Return01D6C3                           ;;824F|824F+824F/824F\824F; 69 - Unused 
                      dw Return0185C2                           ;;8251|8251+8251/8251\8251; 6A - Coin game cloud 
                      dw Return01843D                           ;;8253|8253+8253/8253\8253; 6B - Spring board, left wall 
                      dw InitPeaBouncer                         ;;8255|8255+8255/8255\8255; 6C - Spring board, right wall 
                      dw Return0185C2                           ;;8257|8257+8257/8257\8257; 6D - Invisible solid block 
                      dw InitDinos                              ;;8259|8259+8259/8259\8259; 6E - Dino Rhino 
                      dw InitDinos                              ;;825B|825B+825B/825B\825B; 6F - Dino Torch 
                      dw InitPokey                              ;;825D|825D+825D/825D\825D; 70 - Pokey 
                      dw InitSuperKoopa                         ;;825F|825F+825F/825F\825F; 71 - Super Koopa, red cape 
                      dw InitSuperKoopa                         ;;8261|8261+8261/8261\8261; 72 - Super Koopa, yellow cape 
                      dw InitSuperKoopaFthr                     ;;8263|8263+8263/8263\8263; 73 - Super Koopa, feather 
                      dw InitPowerUp                            ;;8265|8265+8265/8265\8265; 74 - Mushroom 
                      dw InitPowerUp                            ;;8267|8267+8267/8267\8267; 75 - Flower 
                      dw InitPowerUp                            ;;8269|8269+8269/8269\8269; 76 - Star 
                      dw InitPowerUp                            ;;826B|826B+826B/826B\826B; 77 - Feather 
                      dw InitPowerUp                            ;;826D|826D+826D/826D\826D; 78 - 1-Up 
                      dw Return018583                           ;;826F|826F+826F/826F\826F; 79 - Growing Vine 
                      dw Return018583                           ;;8271|8271+8271/8271\8271; 7A - Firework 
                      dw InitGoalTape                           ;;8273|8273+8273/8273\8273; 7B - Goal Point 
                      dw Return0185C2                           ;;8275|8275+8275/8275\8275; 7C - Princess Peach 
                      dw Return0185C2                           ;;8277|8277+8277/8277\8277; 7D - Balloon 
                      dw Return0185C2                           ;;8279|8279+8279/8279\8279; 7E - Flying Red coin 
                      dw Return0185C2                           ;;827B|827B+827B/827B\827B; 7F - Flying yellow 1-Up 
                      dw InitKey_BabyYoshi                      ;;827D|827D+827D/827D\827D; 80 - Key 
                      dw InitChangingItem                       ;;827F|827F+827F/827F\827F; 81 - Changing item from translucent block 
                      dw InitBonusGame                          ;;8281|8281+8281/8281\8281; 82 - Bonus game sprite 
                      dw InitFlying_Block                       ;;8283|8283+8283/8283\8283; 83 - Left flying question block 
                      dw InitFlying_Block                       ;;8285|8285+8285/8285\8285; 84 - Flying question block 
                      dw Return0185C2                           ;;8287|8287+8287/8287\8287; 85 - Unused (Pretty sure) 
                      dw InitWiggler                            ;;8289|8289+8289/8289\8289; 86 - Wiggler 
                      dw Return0185C2                           ;;828B|828B+828B/828B\828B; 87 - Lakitu's cloud 
                      dw InitWingedCage                         ;;828D|828D+828D/828D\828D; 88 - Unused (Winged cage sprite) 
                      dw Return01843D                           ;;828F|828F+828F/828F\828F; 89 - Layer 3 smash 
                      dw Return0185C2                           ;;8291|8291+8291/8291\8291; 8A - Bird from Yoshi's house 
                      dw Return0185C2                           ;;8293|8293+8293/8293\8293; 8B - Puff of smoke from Yoshi's house 
                      dw InitMsg_SideExit                       ;;8295|8295+8295/8295\8295; 8C - Fireplace smoke/exit from side screen 
                      dw Return0185C2                           ;;8297|8297+8297/8297\8297; 8D - Ghost house exit sign and door 
                      dw Return0185C2                           ;;8299|8299+8299/8299\8299; 8E - Invisible "Warp Hole" blocks 
                      dw InitScalePlats                         ;;829B|829B+829B/829B\829B; 8F - Scale platforms 
                      dw FaceMario                              ;;829D|829D+829D/829D\829D; 90 - Large green gas bubble 
                      dw Return018869                           ;;829F|829F+829F/829F\829F; 91 - Chargin' Chuck 
                      dw InitChuck                              ;;82A1|82A1+82A1/82A1\82A1; 92 - Splittin' Chuck 
                      dw InitChuck                              ;;82A3|82A3+82A3/82A3\82A3; 93 - Bouncin' Chuck 
                      dw InitWhistlinChuck                      ;;82A5|82A5+82A5/82A5\82A5; 94 - Whistlin' Chuck 
                      dw InitClappinChuck                       ;;82A7|82A7+82A7/82A7\82A7; 95 - Clapin' Chuck 
                      dw Return018869                           ;;82A9|82A9+82A9/82A9\82A9; 96 - Unused (Chargin' Chuck clone) 
                      dw InitPuntinChuck                        ;;82AB|82AB+82AB/82AB\82AB; 97 - Puntin' Chuck 
                      dw InitPitchinChuck                       ;;82AD|82AD+82AD/82AD\82AD; 98 - Pitchin' Chuck 
                      dw Return0183EE                           ;;82AF|82AF+82AF/82AF\82AF; 99 - Volcano Lotus 
                      dw InitSumoBrother                        ;;82B1|82B1+82B1/82B1\82B1; 9A - Sumo Brother 
                      dw InitHammerBrother                      ;;82B3|82B3+82B3/82B3\82B3; 9B - Hammer Brother 
                      dw Return0185C2                           ;;82B5|82B5+82B5/82B5\82B5; 9C - Flying blocks for Hammer Brother 
                      dw InitBubbleSpr                          ;;82B7|82B7+82B7/82B7\82B7; 9D - Bubble with sprite 
                      dw InitBallNChain                         ;;82B9|82B9+82B9/82B9\82B9; 9E - Ball and Chain 
                      dw InitBanzai                             ;;82BB|82BB+82BB/82BB\82BB; 9F - Banzai Bill 
                      dw InitBowserScene                        ;;82BD|82BD+82BD/82BD\82BD; A0 - Activates Bowser scene 
                      dw Return0185C2                           ;;82BF|82BF+82BF/82BF\82BF; A1 - Bowser's bowling ball 
                      dw Return0185C2                           ;;82C1|82C1+82C1/82C1\82C1; A2 - MechaKoopa 
                      dw InitGreyChainPlat                      ;;82C3|82C3+82C3/82C3\82C3; A3 - Grey platform on chain 
                      dw InitFloatSpkBall                       ;;82C5|82C5+82C5/82C5\82C5; A4 - Floating Spike ball 
                      dw InitFuzzBall_Spark                     ;;82C7|82C7+82C7/82C7\82C7; A5 - Fuzzball/Sparky, ground-guided 
                      dw InitFuzzBall_Spark                     ;;82C9|82C9+82C9/82C9\82C9; A6 - HotHead, ground-guided 
                      dw Return0185C2                           ;;82CB|82CB+82CB/82CB\82CB; A7 - Iggy's ball 
                      dw Return0185C2                           ;;82CD|82CD+82CD/82CD\82CD; A8 - Blargg 
                      dw InitReznor                             ;;82CF|82CF+82CF/82CF\82CF; A9 - Reznor 
                      dw InitFishbone                           ;;82D1|82D1+82D1/82D1\82D1; AA - Fishbone 
                      dw FaceMario                              ;;82D3|82D3+82D3/82D3\82D3; AB - Rex 
                      dw InitWoodSpike                          ;;82D5|82D5+82D5/82D5\82D5; AC - Wooden Spike, moving down and up 
                      dw InitWoodSpike2                         ;;82D7|82D7+82D7/82D7\82D7; AD - Wooden Spike, moving up/down first 
                      dw Return0185C2                           ;;82D9|82D9+82D9/82D9\82D9; AE - Fishin' Boo 
                      dw Return0185C2                           ;;82DB|82DB+82DB/82DB\82DB; AF - Boo Block 
                      dw InitDiagBouncer                        ;;82DD|82DD+82DD/82DD\82DD; B0 - Reflecting stream of Boo Buddies 
                      dw InitCreateEatBlk                       ;;82DF|82DF+82DF/82DF\82DF; B1 - Creating/Eating block 
                      dw Return0185C2                           ;;82E1|82E1+82E1/82E1\82E1; B2 - Falling Spike 
                      dw InitBowsersFire                        ;;82E3|82E3+82E3/82E3\82E3; B3 - Bowser statue fireball 
                      dw FaceMario                              ;;82E5|82E5+82E5/82E5\82E5; B4 - Grinder, non-line-guided 
                      dw Return0185C2                           ;;82E7|82E7+82E7/82E7\82E7; B5 - Sinking fireball used in boss battles 
                      dw InitDiagBouncer                        ;;82E9|82E9+82E9/82E9\82E9; B6 - Reflecting fireball 
                      dw Return0185C2                           ;;82EB|82EB+82EB/82EB\82EB; B7 - Carrot Top lift, upper right 
                      dw Return0185C2                           ;;82ED|82ED+82ED/82ED\82ED; B8 - Carrot Top lift, upper left 
                      dw Return0185C2                           ;;82EF|82EF+82EF/82EF\82EF; B9 - Info Box 
                      dw InitTimedPlat                          ;;82F1|82F1+82F1/82F1\82F1; BA - Timed lift 
                      dw Return0185C2                           ;;82F3|82F3+82F3/82F3\82F3; BB - Grey moving castle block 
                      dw InitBowserStatue                       ;;82F5|82F5+82F5/82F5\82F5; BC - Bowser statue 
                      dw InitSlidingKoopa                       ;;82F7|82F7+82F7/82F7\82F7; BD - Sliding Koopa without a shell 
                      dw Return0185C2                           ;;82F9|82F9+82F9/82F9\82F9; BE - Swooper bat 
                      dw FaceMario                              ;;82FB|82FB+82FB/82FB\82FB; BF - Mega Mole 
                      dw InitGreyLavaPlat                       ;;82FD|82FD+82FD/82FD\82FD; C0 - Grey platform on lava 
                      dw InitMontyMole                          ;;82FF|82FF+82FF/82FF\82FF; C1 - Flying grey turnblocks 
                      dw FaceMario                              ;;8301|8301+8301/8301\8301; C2 - Blurp fish 
                      dw FaceMario                              ;;8303|8303+8303/8303\8303; C3 - Porcu-Puffer fish 
                      dw Return0185C2                           ;;8305|8305+8305/8305\8305; C4 - Grey platform that falls 
                      dw FaceMario                              ;;8307|8307+8307/8307\8307; C5 - Big Boo Boss 
                      dw Return018313                           ;;8309|8309+8309/8309\8309; C6 - Dark room with spot light 
                      dw Return0185C2                           ;;830B|830B+830B/830B\830B; C7 - Invisible mushroom 
                      dw Return0185C2                           ;;830D|830D+830D/830D\830D; C8 - Light switch block for dark room 
                                                                ;;                        ;
InitGreyLavaPlat:     INC.B !SpriteYPosLow,X                    ;;830F|830F+830F/830F\830F;
                      INC.B !SpriteYPosLow,X                    ;;8311|8311+8311/8311\8311;
Return018313:         RTS                                       ;;8313|8313+8313/8313\8313;
                                                                ;;                        ;
InitBowserStatue:     INC.W !SpriteMisc157C,X                   ;;8314|8314+8314/8314\8314;
                      JSR InitExplodingBlk                      ;;8317|8317+8317/8317\8317;
                      STY.B !SpriteTableC2,X                    ;;831A|831A+831A/831A\831A;
                      CPY.B #$02                                ;;831C|831C+831C/831C\831C;
                      BNE +                                     ;;831E|831E+831E/831E\831E;
                      LDA.B #$01                                ;;8320|8320+8320/8320\8320;
                      STA.W !SpriteOBJAttribute,X               ;;8322|8322+8322/8322\8322;
                    + RTS                                       ;;8325|8325+8325/8325\8325; Return 
                                                                ;;                        ;
InitTimedPlat:        LDY.B #$3F                                ;;8326|8326+8326/8326\8326;
                      LDA.B !SpriteXPosLow,X                    ;;8328|8328+8328/8328\8328;
                      AND.B #$10                                ;;832A|832A+832A/832A\832A;
                      BNE +                                     ;;832C|832C+832C/832C\832C;
                      LDY.B #$FF                                ;;832E|832E+832E/832E\832E;
                    + TYA                                       ;;8330|8330+8330/8330\8330;
                      STA.W !SpriteMisc1570,X                   ;;8331|8331+8331/8331\8331;
                      RTS                                       ;;8334|8334+8334/8334\8334; Return 
                                                                ;;                        ;
                                                                ;;                        ;
YoshiPal:             db $09,$07,$05,$07                        ;;8335|8335+8335/8335\8335;
                                                                ;;                        ;
InitYoshiEgg:         LDA.B !SpriteXPosLow,X                    ;;8339|8339+8339/8339\8339;
                      LSR A                                     ;;833B|833B+833B/833B\833B;
                      LSR A                                     ;;833C|833C+833C/833C\833C;
                      LSR A                                     ;;833D|833D+833D/833D\833D;
                      LSR A                                     ;;833E|833E+833E/833E\833E;
                      AND.B #$03                                ;;833F|833F+833F/833F\833F;
                      TAY                                       ;;8341|8341+8341/8341\8341;
                      LDA.W YoshiPal,Y                          ;;8342|8342+8342/8342\8342;
                      STA.W !SpriteOBJAttribute,X               ;;8345|8345+8345/8345\8345;
                      INC.W !SpriteMisc187B,X                   ;;8348|8348+8348/8348\8348;
                      RTS                                       ;;834B|834B+834B/834B\834B; Return 
                                                                ;;                        ;
                                                                ;;                        ;
DATA_01834C:          db $10,$F0                                ;;834C|834C+834C/834C\834C;
                                                                ;;                        ;
InitDiagBouncer:      JSR FaceMario                             ;;834E|834E+834E/834E\834E;
                      LDA.W DATA_01834C,Y                       ;;8351|8351+8351/8351\8351;
                      STA.B !SpriteXSpeed,X                     ;;8354|8354+8354/8354\8354;
                      LDA.B #$F0                                ;;8356|8356+8356/8356\8356;
                      STA.B !SpriteYSpeed,X                     ;;8358|8358+8358/8358\8358;
                      RTS                                       ;;835A|835A+835A/835A\835A; Return 
                                                                ;;                        ;
InitWoodSpike:        LDA.B !SpriteYPosLow,X                    ;;835B|835B+835B/835B\835B;
                      SEC                                       ;;835D|835D+835D/835D\835D;
                      SBC.B #$40                                ;;835E|835E+835E/835E\835E;
                      STA.B !SpriteYPosLow,X                    ;;8360|8360+8360/8360\8360;
                      LDA.W !SpriteXPosHigh,X                   ;;8362|8362+8362/8362\8362;
                      SBC.B #$00                                ;;8365|8365+8365/8365\8365;
                      STA.W !SpriteXPosHigh,X                   ;;8367|8367+8367/8367\8367;
                      RTS                                       ;;836A|836A+836A/836A\836A; Return 
                                                                ;;                        ;
InitWoodSpike2:       JMP InitMontyMole                         ;;836B|836B+836B/836B\836B;
                                                                ;;                        ;
InitBowserScene:      JSL CODE_03A0F1                           ;;836E|836E+836E/836E\836E;
                      RTS                                       ;;8372|8372+8372/8372\8372; Return 
                                                                ;;                        ;
InitSumoBrother:      LDA.B #$03                                ;;8373|8373+8373/8373\8373;
                      STA.B !SpriteTableC2,X                    ;;8375|8375+8375/8375\8375;
                      LDA.B #$70                                ;;8377|8377+8377/8377\8377;
                    - STA.W !SpriteMisc1540,X                   ;;8379|8379+8379/8379\8379;
                      RTS                                       ;;837C|837C+837C/837C\837C; Return 
                                                                ;;                        ;
InitSlidingKoopa:     LDA.B #$04                                ;;837D|837D+837D/837D\837D;
                      BRA -                                     ;;837F|837F+837F/837F\837F;
                                                                ;;                        ;
InitGrowingPipe:      LDA.B #$40                                ;;8381|8381+8381/8381\8381;
                      STA.W !SpriteMisc1534,X                   ;;8383|8383+8383/8383\8383;
                      RTS                                       ;;8386|8386+8386/8386\8386; Return 
                                                                ;;                        ;
InitBanzai:           JSR SubHorizPos                           ;;8387|8387+8387/8387\8387;
                      TYA                                       ;;838A|838A+838A/838A\838A;
                      BNE +                                     ;;838B|838B+838B/838B\838B;
                      JMP OffScrEraseSprite                     ;;838D|838D+838D/838D\838D;
                                                                ;;                        ;
                    + LDA.B #!SFX_KAPOW                         ;;8390|8390+8390/8390\8390;
                      STA.W !SPCIO3                             ;;8392|8392+8392/8392\8392; / Play sound effect 
                      RTS                                       ;;8395|8395+8395/8395\8395; Return 
                                                                ;;                        ;
InitBallNChain:       LDA.B #$38                                ;;8396|8396+8396/8396\8396;
                      BRA +                                     ;;8398|8398+8398/8398\8398;
                                                                ;;                        ;
InitGreyChainPlat:    LDA.B #$30                                ;;839A|839A+839A/839A\839A;
                    + STA.W !SpriteMisc187B,X                   ;;839C|839C+839C/839C\839C;
                      RTS                                       ;;839F|839F+839F/839F\839F; Return 
                                                                ;;                        ;
                                                                ;;                        ;
ExplodingBlkSpr:      db $15,$0F,$00,$04                        ;;83A0|83A0+83A0/83A0\83A0;
                                                                ;;                        ;
InitExplodingBlk:     LDA.B !SpriteXPosLow,X                    ;;83A4|83A4+83A4/83A4\83A4;
                      LSR A                                     ;;83A6|83A6+83A6/83A6\83A6;
                      LSR A                                     ;;83A7|83A7+83A7/83A7\83A7;
                      LSR A                                     ;;83A8|83A8+83A8/83A8\83A8;
                      LSR A                                     ;;83A9|83A9+83A9/83A9\83A9;
                      AND.B #$03                                ;;83AA|83AA+83AA/83AA\83AA;
                      TAY                                       ;;83AC|83AC+83AC/83AC\83AC;
                      LDA.W ExplodingBlkSpr,Y                   ;;83AD|83AD+83AD/83AD\83AD;
                      STA.B !SpriteTableC2,X                    ;;83B0|83B0+83B0/83B0\83B0;
                      RTS                                       ;;83B2|83B2+83B2/83B2\83B2; Return 
                                                                ;;                        ;
                                                                ;;                        ;
DATA_0183B3:          db $80,$40                                ;;83B3|83B3+83B3/83B3\83B3;
                                                                ;;                        ;
InitScalePlats:       LDA.B !SpriteYPosLow,X                    ;;83B5|83B5+83B5/83B5\83B5;
                      STA.W !SpriteMisc1534,X                   ;;83B7|83B7+83B7/83B7\83B7;
                      LDA.W !SpriteXPosHigh,X                   ;;83BA|83BA+83BA/83BA\83BA;
                      STA.W !SpriteMisc151C,X                   ;;83BD|83BD+83BD/83BD\83BD;
                      LDA.B !SpriteXPosLow,X                    ;;83C0|83C0+83C0/83C0\83C0;
                      AND.B #$10                                ;;83C2|83C2+83C2/83C2\83C2;
                      LSR A                                     ;;83C4|83C4+83C4/83C4\83C4;
                      LSR A                                     ;;83C5|83C5+83C5/83C5\83C5;
                      LSR A                                     ;;83C6|83C6+83C6/83C6\83C6;
                      LSR A                                     ;;83C7|83C7+83C7/83C7\83C7;
                      TAY                                       ;;83C8|83C8+83C8/83C8\83C8;
                      LDA.B !SpriteXPosLow,X                    ;;83C9|83C9+83C9/83C9\83C9;
                      CLC                                       ;;83CB|83CB+83CB/83CB\83CB;
                      ADC.W DATA_0183B3,Y                       ;;83CC|83CC+83CC/83CC\83CC;
                      STA.B !SpriteTableC2,X                    ;;83CF|83CF+83CF/83CF\83CF;
                      LDA.W !SpriteYPosHigh,X                   ;;83D1|83D1+83D1/83D1\83D1;
                      ADC.B #$00                                ;;83D4|83D4+83D4/83D4\83D4;
                      STA.W !SpriteMisc1602,X                   ;;83D6|83D6+83D6/83D6\83D6;
                      RTS                                       ;;83D9|83D9+83D9/83D9\83D9; Return 
                                                                ;;                        ;
InitMsg_SideExit:     LDA.B #$28                                ;;83DA|83DA+83DA/83DA\83DA; \ Set current sprite's "disable contact with other sprites" timer to x28 
                      STA.W !SpriteMisc1564,X                   ;;83DC|83DC+83DC/83DC\83DC; /  
                      RTS                                       ;;83DF|83DF+83DF/83DF\83DF; Return 
                                                                ;;                        ;
InitYoshi:            DEC.W !SpriteMisc160E,X                   ;;83E0|83E0+83E0/83E0\83E0;
                      INC.W !SpriteMisc157C,X                   ;;83E3|83E3+83E3/83E3\83E3;
                      LDA.W !CarryYoshiThruLvls                 ;;83E6|83E6+83E6/83E6\83E6;
                      BEQ Return0183EE                          ;;83E9|83E9+83E9/83E9\83E9;
                      STZ.W !SpriteStatus,X                     ;;83EB|83EB+83EB/83EB\83EB;
Return0183EE:         RTS                                       ;;83EE|83EE+83EE/83EE\83EE;
                                                                ;;                        ;
                                                                ;;                        ;
DATA_0183EF:          db $08                                    ;;83EF|83EF+83EF/83EF\83EF;
                                                                ;;                        ;
DATA_0183F0:          db $00,$08                                ;;83F0|83F0+83F0/83F0\83F0;
                                                                ;;                        ;
InitSpikeTop:         JSR SubHorizPos                           ;;83F2|83F2+83F2/83F2\83F2;
                      TYA                                       ;;83F5|83F5+83F5/83F5\83F5;
                      EOR.B #$01                                ;;83F6|83F6+83F6/83F6\83F6;
                      ASL A                                     ;;83F8|83F8+83F8/83F8\83F8;
                      ASL A                                     ;;83F9|83F9+83F9/83F9\83F9;
                      ASL A                                     ;;83FA|83FA+83FA/83FA\83FA;
                      ASL A                                     ;;83FB|83FB+83FB/83FB\83FB;
                      JSR CODE_01841D                           ;;83FC|83FC+83FC/83FC\83FC;
                      STZ.W !SpriteInLiquid,X                   ;;83FF|83FF+83FF/83FF\83FF;
                      BRA CODE_01840E                           ;;8402|8402+8402/8402\8402;
                                                                ;;                        ;
InitUrchinWallFllw:   INC.B !SpriteYPosLow,X                    ;;8404|8404+8404/8404\8404;
                      BNE InitFuzzBall_Spark                    ;;8406|8406+8406/8406\8406;
                      INC.W !SpriteXPosHigh,X                   ;;8408|8408+8408/8408\8408;
InitFuzzBall_Spark:   JSR InitUrchin                            ;;840B|840B+840B/840B\840B;
CODE_01840E:          LDA.W !SpriteMisc151C,X                   ;;840E|840E+840E/840E\840E;
                      EOR.B #$10                                ;;8411|8411+8411/8411\8411;
                      STA.W !SpriteMisc151C,X                   ;;8413|8413+8413/8413\8413;
                      LSR A                                     ;;8416|8416+8416/8416\8416;
                      LSR A                                     ;;8417|8417+8417/8417\8417;
                      STA.B !SpriteTableC2,X                    ;;8418|8418+8418/8418\8418;
                      RTS                                       ;;841A|841A+841A/841A\841A; Return 
                                                                ;;                        ;
InitUrchin:           LDA.B !SpriteXPosLow,X                    ;;841B|841B+841B/841B\841B;
CODE_01841D:          LDY.B #$00                                ;;841D|841D+841D/841D\841D;
                      AND.B #$10                                ;;841F|841F+841F/841F\841F;
                      STA.W !SpriteMisc151C,X                   ;;8421|8421+8421/8421\8421;
                      BNE +                                     ;;8424|8424+8424/8424\8424;
                      INY                                       ;;8426|8426+8426/8426\8426;
                    + LDA.W DATA_0183EF,Y                       ;;8427|8427+8427/8427\8427;
                      STA.B !SpriteXSpeed,X                     ;;842A|842A+842A/842A\842A;
                      LDA.W DATA_0183F0,Y                       ;;842C|842C+842C/842C\842C;
                      STA.B !SpriteYSpeed,X                     ;;842F|842F+842F/842F\842F;
InitRipVanFish:       INC.W !SpriteInLiquid,X                   ;;8431|8431+8431/8431\8431;
                      RTS                                       ;;8434|8434+8434/8434\8434; Return 
                                                                ;;                        ;
InitKey_BabyYoshi:    LDA.B #$09                                ;;8435|8435+8435/8435\8435; \ Sprite status = Carryable 
                      STA.W !SpriteStatus,X                     ;;8437|8437+8437/8437\8437; / 
                      RTS                                       ;;843A|843A+843A/843A\843A; Return 
                                                                ;;                        ;
InitChangingItem:     INC.B !SpriteTableC2,X                    ;;843B|843B+843B/843B\843B;
Return01843D:         RTS                                       ;;843D|843D+843D/843D\843D;
                                                                ;;                        ;
InitPeaBouncer:       LDA.B !SpriteXPosLow,X                    ;;843E|843E+843E/843E\843E;
                      SEC                                       ;;8440|8440+8440/8440\8440;
                      SBC.B #$08                                ;;8441|8441+8441/8441\8441;
                      STA.B !SpriteXPosLow,X                    ;;8443|8443+8443/8443\8443;
                      LDA.W !SpriteYPosHigh,X                   ;;8445|8445+8445/8445\8445;
                      SBC.B #$00                                ;;8448|8448+8448/8448\8448;
                      STA.W !SpriteYPosHigh,X                   ;;844A|844A+844A/844A\844A;
                      RTS                                       ;;844D|844D+844D/844D\844D; Return 
                                                                ;;                        ;
InitPSwitch:          LDA.B !SpriteXPosLow,X                    ;;844E|844E+844E/844E\844E; \ $151C,x = Blue/Silver, 
                      LSR A                                     ;;8450|8450+8450/8450\8450;  | depending on initial X position 
                      LSR A                                     ;;8451|8451+8451/8451\8451;  | 
                      LSR A                                     ;;8452|8452+8452/8452\8452;  | 
                      LSR A                                     ;;8453|8453+8453/8453\8453;  | 
                      AND.B #$01                                ;;8454|8454+8454/8454\8454;  | 
                      STA.W !SpriteMisc151C,X                   ;;8456|8456+8456/8456\8456; / 
                      TAY                                       ;;8459|8459+8459/8459\8459; \ Store appropriate palette to RAM 
                      LDA.W PSwitchPal,Y                        ;;845A|845A+845A/845A\845A;  | 
                      STA.W !SpriteOBJAttribute,X               ;;845D|845D+845D/845D\845D; / 
                      LDA.B #$09                                ;;8460|8460+8460/8460\8460; \ Sprite status = Carryable 
                      STA.W !SpriteStatus,X                     ;;8462|8462+8462/8462\8462; / 
                      RTS                                       ;;8465|8465+8465/8465\8465; Return 
                                                                ;;                        ;
                                                                ;;                        ;
PSwitchPal:           db $06,$02                                ;;8466|8466+8466/8466\8466;
                                                                ;;                        ;
ADDR_018468:          JMP OffScrEraseSprite                     ;;8468|8468+8468/8468\8468;
                                                                ;;                        ;
InitLakitu:           LDY.B #$09                                ;;846B|846B+846B/846B\846B;
CODE_01846D:          CPY.W !CurSpriteProcess                   ;;846D|846D+846D/846D\846D;
                      BEQ CODE_018484                           ;;8470|8470+8470/8470\8470;
                      LDA.W !SpriteStatus,Y                     ;;8472|8472+8472/8472\8472;
                      CMP.B #$08                                ;;8475|8475+8475/8475\8475;
                      BNE CODE_018484                           ;;8477|8477+8477/8477\8477;
                      LDA.W !SpriteNumber,Y                     ;;8479|8479+8479/8479\8479;
                      CMP.B #$87                                ;;847C|847C+847C/847C\847C;
                      BEQ ADDR_018468                           ;;847E|847E+847E/847E\847E;
                      CMP.B #$1E                                ;;8480|8480+8480/8480\8480;
                      BEQ ADDR_018468                           ;;8482|8482+8482/8482\8482;
CODE_018484:          DEY                                       ;;8484|8484+8484/8484\8484;
                      BPL CODE_01846D                           ;;8485|8485+8485/8485\8485;
                      STZ.W !SpriteRespawnTimer                 ;;8487|8487+8487/8487\8487;
                      STZ.W !SpriteWillAppear                   ;;848A|848A+848A/848A\848A;
                      STZ.W !CurrentGenerator                   ;;848D|848D+848D/848D\848D;
                      LDA.B !SpriteYPosLow,X                    ;;8490|8490+8490/8490\8490;
                      STA.W !SpriteRespawnYPos                  ;;8492|8492+8492/8492\8492;
                      LDA.W !SpriteXPosHigh,X                   ;;8495|8495+8495/8495\8495;
                      STA.W !SpriteRespawnYPos+1                ;;8498|8498+8498/8498\8498;
                      JSL FindFreeSprSlot                       ;;849B|849B+849B/849B\849B;
                      BMI InitMontyMole                         ;;849F|849F+849F/849F\849F;
                      STY.W !LakituCloudSlot                    ;;84A1|84A1+84A1/84A1\84A1;
                      LDA.B #$87                                ;;84A4|84A4+84A4/84A4\84A4; \ Sprite = Lakitu Cloud 
                      STA.W !SpriteNumber,Y                     ;;84A6|84A6+84A6/84A6\84A6; / 
                      LDA.B #$08                                ;;84A9|84A9+84A9/84A9\84A9; \ Sprite status = Normal 
                      STA.W !SpriteStatus,Y                     ;;84AB|84AB+84AB/84AB\84AB; / 
                      LDA.B !SpriteXPosLow,X                    ;;84AE|84AE+84AE/84AE\84AE;
                      STA.W !SpriteXPosLow,Y                    ;;84B0|84B0+84B0/84B0\84B0;
                      LDA.W !SpriteYPosHigh,X                   ;;84B3|84B3+84B3/84B3\84B3;
                      STA.W !SpriteYPosHigh,Y                   ;;84B6|84B6+84B6/84B6\84B6;
                      LDA.B !SpriteYPosLow,X                    ;;84B9|84B9+84B9/84B9\84B9;
                      STA.W !SpriteYPosLow,Y                    ;;84BB|84BB+84BB/84BB\84BB;
                      LDA.W !SpriteXPosHigh,X                   ;;84BE|84BE+84BE/84BE\84BE;
                      STA.W !SpriteXPosHigh,Y                   ;;84C1|84C1+84C1/84C1\84C1;
                      PHX                                       ;;84C4|84C4+84C4/84C4\84C4;
                      TYX                                       ;;84C5|84C5+84C5/84C5\84C5;
                      JSL InitSpriteTables                      ;;84C6|84C6+84C6/84C6\84C6;
                      PLX                                       ;;84CA|84CA+84CA/84CA\84CA;
                      STZ.W !LakituCloudTimer                   ;;84CB|84CB+84CB/84CB\84CB;
InitMontyMole:        LDA.B !SpriteXPosLow,X                    ;;84CE|84CE+84CE/84CE\84CE;
                      AND.B #$10                                ;;84D0|84D0+84D0/84D0\84D0;
                      STA.W !SpriteMisc151C,X                   ;;84D2|84D2+84D2/84D2\84D2;
                      RTS                                       ;;84D5|84D5+84D5/84D5\84D5; Return 
                                                                ;;                        ;
InitCreateEatBlk:     LDA.B #$FF                                ;;84D6|84D6+84D6/84D6\84D6;
                      STA.W !BlockSnakeActive                   ;;84D8|84D8+84D8/84D8\84D8;
                      BRA InitMontyMole                         ;;84DB|84DB+84DB/84DB\84DB;
                                                                ;;                        ;
InitBulletBill:       JSR SubHorizPos                           ;;84DD|84DD+84DD/84DD\84DD;
                      TYA                                       ;;84E0|84E0+84E0/84E0\84E0;
                      STA.B !SpriteTableC2,X                    ;;84E1|84E1+84E1/84E1\84E1;
                      LDA.B #$10                                ;;84E3|84E3+84E3/84E3\84E3;
                      STA.W !SpriteMisc1540,X                   ;;84E5|84E5+84E5/84E5\84E5;
                      RTS                                       ;;84E8|84E8+84E8/84E8\84E8; Return 
                                                                ;;                        ;
InitClappinChuck:     LDA.B #$08                                ;;84E9|84E9+84E9/84E9\84E9;
                      BRA +                                     ;;84EB|84EB+84EB/84EB\84EB;
                                                                ;;                        ;
InitPitchinChuck:     LDA.B !SpriteXPosLow,X                    ;;84ED|84ED+84ED/84ED\84ED;
                      AND.B #$30                                ;;84EF|84EF+84EF/84EF\84EF;
                      LSR A                                     ;;84F1|84F1+84F1/84F1\84F1;
                      LSR A                                     ;;84F2|84F2+84F2/84F2\84F2;
                      LSR A                                     ;;84F3|84F3+84F3/84F3\84F3;
                      LSR A                                     ;;84F4|84F4+84F4/84F4\84F4;
                      STA.W !SpriteMisc187B,X                   ;;84F5|84F5+84F5/84F5\84F5;
                      LDA.B #$0A                                ;;84F8|84F8+84F8/84F8\84F8;
                      BRA +                                     ;;84FA|84FA+84FA/84FA\84FA;
                                                                ;;                        ;
InitPuntinChuck:      LDA.B #$09                                ;;84FC|84FC+84FC/84FC\84FC;
                      BRA +                                     ;;84FE|84FE+84FE/84FE\84FE;
                                                                ;;                        ;
InitWhistlinChuck:    LDA.B #$0B                                ;;8500|8500+8500/8500\8500;
                      BRA +                                     ;;8502|8502+8502/8502\8502;
                                                                ;;                        ;
InitChuck:            LDA.B #$05                                ;;8504|8504+8504/8504\8504;
                      BRA +                                     ;;8506|8506+8506/8506\8506;
                                                                ;;                        ;
InitDigginChuck:      LDA.B #$30                                ;;8508|8508+8508/8508\8508;
                      STA.W !SpriteMisc1540,X                   ;;850A|850A+850A/850A\850A;
                      LDA.B !SpriteXPosLow,X                    ;;850D|850D+850D/850D\850D;
                      AND.B #$10                                ;;850F|850F+850F/850F\850F;
                      LSR A                                     ;;8511|8511+8511/8511\8511;
                      LSR A                                     ;;8512|8512+8512/8512\8512;
                      LSR A                                     ;;8513|8513+8513/8513\8513;
                      LSR A                                     ;;8514|8514+8514/8514\8514;
                      STA.W !SpriteMisc157C,X                   ;;8515|8515+8515/8515\8515;
                      LDA.B #$04                                ;;8518|8518+8518/8518\8518;
                    + STA.B !SpriteTableC2,X                    ;;851A|851A+851A/851A\851A;
                      JSR FaceMario                             ;;851C|851C+851C/851C\851C;
                      LDA.W DATA_018526,Y                       ;;851F|851F+851F/851F\851F;
                      STA.W !SpriteMisc151C,X                   ;;8522|8522+8522/8522\8522;
                      RTS                                       ;;8525|8525+8525/8525\8525; Return 
                                                                ;;                        ;
                                                                ;;                        ;
DATA_018526:          db $00,$04                                ;;8526|8526+8526/8526\8526;
                                                                ;;                        ;
InitSuperKoopa:       LDA.B #$28                                ;;8528|8528+8528/8528\8528;
                      STA.B !SpriteYSpeed,X                     ;;852A|852A+852A/852A\852A;
                      BRA FaceMario                             ;;852C|852C+852C/852C\852C;
                                                                ;;                        ;
InitSuperKoopaFthr:   JSR FaceMario                             ;;852E|852E+852E/852E\852E;
                      LDA.B !SpriteXPosLow,X                    ;;8531|8531+8531/8531\8531;
                      AND.B #$10                                ;;8533|8533+8533/8533\8533;
                      BEQ +                                     ;;8535|8535+8535/8535\8535;
                      LDA.B #$10                                ;;8537|8537+8537/8537\8537; \ Can be jumped on 
                      STA.W !SpriteTweakerA,X                   ;;8539|8539+8539/8539\8539; / 
                      LDA.B #$80                                ;;853C|853C+853C/853C\853C;
                      STA.W !SpriteTweakerB,X                   ;;853E|853E+853E/853E\853E;
                      LDA.B #$10                                ;;8541|8541+8541/8541\8541;
                      STA.W !SpriteTweakerE,X                   ;;8543|8543+8543/8543\8543;
                      RTS                                       ;;8546|8546+8546/8546\8546; Return 
                                                                ;;                        ;
                    + INC.W !SpriteMisc1534,X                   ;;8547|8547+8547/8547\8547;
                      RTS                                       ;;854A|854A+854A/854A\854A; Return 
                                                                ;;                        ;
InitPokey:            LDA.B #$1F                                ;;854B|854B+854B/854B\854B; \ If on Yoshi, $C2,x = #$1F 
                      LDY.W !PlayerRidingYoshi                  ;;854D|854D+854D/854D\854D;  | (5 segments, 1 bit each) 
                      BNE +                                     ;;8550|8550+8550/8550\8550;  | 
                      LDA.B #$07                                ;;8552|8552+8552/8552\8552;  | If not on Yoshi, $C2,x = #$07 
                    + STA.B !SpriteTableC2,X                    ;;8554|8554+8554/8554\8554; /   (3 segments, 1 bit each) 
                      BRA FaceMario                             ;;8556|8556+8556/8556\8556;
                                                                ;;                        ;
InitDinos:            LDA.B #$04                                ;;8558|8558+8558/8558\8558;
                      STA.W !SpriteMisc151C,X                   ;;855A|855A+855A/855A\855A;
InitBomb:             LDA.B #$FF                                ;;855D|855D+855D/855D\855D;
                      STA.W !SpriteMisc1540,X                   ;;855F|855F+855F/855F\855F;
                      BRA FaceMario                             ;;8562|8562+8562/8562\8562;
                                                                ;;                        ;
InitBubbleSpr:        JSR InitExplodingBlk                      ;;8564|8564+8564/8564\8564;
                      STY.B !SpriteTableC2,X                    ;;8567|8567+8567/8567\8567;
                      DEC.W !SpriteMisc1534,X                   ;;8569|8569+8569/8569\8569;
                      BRA FaceMario                             ;;856C|856C+856C/856C\856C;
                                                                ;;                        ;
InitGrnBounceKoopa:   LDA.B !SpriteYPosLow,X                    ;;856E|856E+856E/856E\856E;
                      AND.B #$10                                ;;8570|8570+8570/8570\8570;
                      STA.W !SpriteMisc160E,X                   ;;8572|8572+8572/8572\8572;
InitStandardSprite:   JSL GetRand                               ;;8575|8575+8575/8575\8575;
                      STA.W !SpriteMisc1570,X                   ;;8579|8579+8579/8579\8579;
FaceMario:            JSR SubHorizPos                           ;;857C|857C+857C/857C\857C;
                      TYA                                       ;;857F|857F+857F/857F\857F;
                      STA.W !SpriteMisc157C,X                   ;;8580|8580+8580/8580\8580;
Return018583:         RTS                                       ;;8583|8583+8583/8583\8583;
                                                                ;;                        ;
InitBowsersFire:      LDA.B #!SFX_FIRESPIT                      ;;8584|8584+8584/8584\8584;
                      STA.W !SPCIO3                             ;;8586|8586+8586/8586\8586; / Play sound effect 
                      BRA FaceMario                             ;;8589|8589+8589/8589\8589;
                                                                ;;                        ;
InitPowerUp:          INC.B !SpriteTableC2,X                    ;;858B|858B+858B/858B\858B;
                      RTS                                       ;;858D|858D+858D/858D\858D; Return 
                                                                ;;                        ;
InitFishbone:         JSL GetRand                               ;;858E|858E+858E/858E\858E;
                      AND.B #$1F                                ;;8592|8592+8592/8592\8592;
                      STA.W !SpriteMisc1540,X                   ;;8594|8594+8594/8594\8594;
                      JMP FaceMario                             ;;8597|8597+8597/8597\8597;
                                                                ;;                        ;
InitDownPiranha:      ASL.W !SpriteOBJAttribute,X               ;;859A|859A+859A/859A\859A;
                      SEC                                       ;;859D|859D+859D/859D\859D;
                      ROR.W !SpriteOBJAttribute,X               ;;859E|859E+859E/859E\859E;
                      LDA.B !SpriteYPosLow,X                    ;;85A1|85A1+85A1/85A1\85A1;
                      SEC                                       ;;85A3|85A3+85A3/85A3\85A3;
                      SBC.B #$10                                ;;85A4|85A4+85A4/85A4\85A4;
                      STA.B !SpriteYPosLow,X                    ;;85A6|85A6+85A6/85A6\85A6;
                      LDA.W !SpriteXPosHigh,X                   ;;85A8|85A8+85A8/85A8\85A8;
                      SBC.B #$00                                ;;85AB|85AB+85AB/85AB\85AB;
                      STA.W !SpriteXPosHigh,X                   ;;85AD|85AD+85AD/85AD\85AD;
InitPiranha:          LDA.B !SpriteXPosLow,X                    ;;85B0|85B0+85B0/85B0\85B0; \ Center sprite between two tiles 
                      CLC                                       ;;85B2|85B2+85B2/85B2\85B2;  | 
                      ADC.B #$08                                ;;85B3|85B3+85B3/85B3\85B3;  | 
                      STA.B !SpriteXPosLow,X                    ;;85B5|85B5+85B5/85B5\85B5; / 
                      DEC.B !SpriteYPosLow,X                    ;;85B7|85B7+85B7/85B7\85B7;
                      LDA.B !SpriteYPosLow,X                    ;;85B9|85B9+85B9/85B9\85B9;
                      CMP.B #$FF                                ;;85BB|85BB+85BB/85BB\85BB;
                      BNE Return0185C2                          ;;85BD|85BD+85BD/85BD\85BD;
                      DEC.W !SpriteXPosHigh,X                   ;;85BF|85BF+85BF/85BF\85BF;
Return0185C2:         RTS                                       ;;85C2|85C2+85C2/85C2\85C2;
                                                                ;;                        ;
CallSpriteMain:       STZ.W !SpriteXMovement                    ;;85C3|85C3+85C3/85C3\85C3; CallSpriteMain 
                      LDA.B !SpriteNumber,X                     ;;85C6|85C6+85C6/85C6\85C6;
                      JSL ExecutePtr                            ;;85C8|85C8+85C8/85C8\85C8;
                                                                ;;                        ;
                      dw ShellessKoopas                         ;;85CC|85CC+85CC/85CC\85CC; 00 - Green Koopa, no shell 
                      dw ShellessKoopas                         ;;85CE|85CE+85CE/85CE\85CE; 01 - Red Koopa, no shell 
                      dw ShellessKoopas                         ;;85D0|85D0+85D0/85D0\85D0; 02 - Blue Koopa, no shell 
                      dw ShellessKoopas                         ;;85D2|85D2+85D2/85D2\85D2; 03 - Yellow Koopa, no shell 
                      dw Spr0to13Start                          ;;85D4|85D4+85D4/85D4\85D4; 04 - Green Koopa 
                      dw Spr0to13Start                          ;;85D6|85D6+85D6/85D6\85D6; 05 - Red Koopa 
                      dw Spr0to13Start                          ;;85D8|85D8+85D8/85D8\85D8; 06 - Blue Koopa 
                      dw Spr0to13Start                          ;;85DA|85DA+85DA/85DA\85DA; 07 - Yellow Koopa 
                      dw GreenParaKoopa                         ;;85DC|85DC+85DC/85DC\85DC; 08 - Green Koopa, flying left 
                      dw GreenParaKoopa                         ;;85DE|85DE+85DE/85DE\85DE; 09 - Green bouncing Koopa 
                      dw RedVertParaKoopa                       ;;85E0|85E0+85E0/85E0\85E0; 0A - Red vertical flying Koopa 
                      dw RedHorzParaKoopa                       ;;85E2|85E2+85E2/85E2\85E2; 0B - Red horizontal flying Koopa 
                      dw Spr0to13Start                          ;;85E4|85E4+85E4/85E4\85E4; 0C - Yellow Koopa with wings 
                      dw Bobomb                                 ;;85E6|85E6+85E6/85E6\85E6; 0D - Bob-omb 
                      dw Keyhole                                ;;85E8|85E8+85E8/85E8\85E8; 0E - Keyhole 
                      dw Spr0to13Start                          ;;85EA|85EA+85EA/85EA\85EA; 0F - Goomba 
                      dw WingedGoomba                           ;;85EC|85EC+85EC/85EC\85EC; 10 - Bouncing Goomba with wings 
                      dw Spr0to13Start                          ;;85EE|85EE+85EE/85EE\85EE; 11 - Buzzy Beetle 
                      dw Return01F87B                           ;;85F0|85F0+85F0/85F0\85F0; 12 - Unused 
                      dw Spr0to13Start                          ;;85F2|85F2+85F2/85F2\85F2; 13 - Spiny 
                      dw SpinyEgg                               ;;85F4|85F4+85F4/85F4\85F4; 14 - Spiny falling 
                      dw Fish                                   ;;85F6|85F6+85F6/85F6\85F6; 15 - Fish, horizontal 
                      dw Fish                                   ;;85F8|85F8+85F8/85F8\85F8; 16 - Fish, vertical 
                      dw GeneratedFish                          ;;85FA|85FA+85FA/85FA\85FA; 17 - Fish, created from generator 
                      dw JumpingFish                            ;;85FC|85FC+85FC/85FC\85FC; 18 - Surface jumping fish 
                      dw PSwitch                                ;;85FE|85FE+85FE/85FE\85FE; 19 - Display text from level Message Box #1 
                      dw ClassicPiranhas                        ;;8600|8600+8600/8600\8600; 1A - Classic Piranha Plant 
                      dw Bank3SprHandler                        ;;8602|8602+8602/8602\8602; 1B - Bouncing football in place 
                      dw BulletBill                             ;;8604|8604+8604/8604\8604; 1C - Bullet Bill 
                      dw HoppingFlame                           ;;8606|8606+8606/8606\8606; 1D - Hopping flame 
                      dw Lakitu                                 ;;8608|8608+8608/8608\8608; 1E - Lakitu 
                      dw Magikoopa                              ;;860A|860A+860A/860A\860A; 1F - Magikoopa 
                      dw MagikoopasMagic                        ;;860C|860C+860C/860C\860C; 20 - Magikoopa's magic 
                      dw PowerUpRt                              ;;860E|860E+860E/860E\860E; 21 - Moving coin 
                      dw ClimbingKoopa                          ;;8610|8610+8610/8610\8610; 22 - Green vertical net Koopa 
                      dw ClimbingKoopa                          ;;8612|8612+8612/8612\8612; 23 - Red vertical net Koopa 
                      dw ClimbingKoopa                          ;;8614|8614+8614/8614\8614; 24 - Green horizontal net Koopa 
                      dw ClimbingKoopa                          ;;8616|8616+8616/8616\8616; 25 - Red horizontal net Koopa 
                      dw Thwomp                                 ;;8618|8618+8618/8618\8618; 26 - Thwomp 
                      dw Thwimp                                 ;;861A|861A+861A/861A\861A; 27 - Thwimp 
                      dw BigBoo                                 ;;861C|861C+861C/861C\861C; 28 - Big Boo 
                      dw KoopaKid                               ;;861E|861E+861E/861E\861E; 29 - Koopa Kid 
                      dw ClassicPiranhas                        ;;8620|8620+8620/8620\8620; 2A - Upside down Piranha Plant 
                      dw SumosLightning                         ;;8622|8622+8622/8622\8622; 2B - Sumo Brother's fire lightning 
                      dw YoshiEgg                               ;;8624|8624+8624/8624\8624; 2C - Yoshi egg 
                      dw Return0185C2                           ;;8626|8626+8626/8626\8626; 2D - Baby green Yoshi 
                      dw WallFollowers                          ;;8628|8628+8628/8628\8628; 2E - Spike Top 
                      dw SpringBoard                            ;;862A|862A+862A/862A\862A; 2F - Portable spring board 
                      dw DryBonesAndBeetle                      ;;862C|862C+862C/862C\862C; 30 - Dry Bones, throws bones 
                      dw DryBonesAndBeetle                      ;;862E|862E+862E/862E\862E; 31 - Bony Beetle 
                      dw DryBonesAndBeetle                      ;;8630|8630+8630/8630\8630; 32 - Dry Bones, stay on ledge 
                      dw Fireballs                              ;;8632|8632+8632/8632\8632; 33 - Fireball 
                      dw BossFireball                           ;;8634|8634+8634/8634\8634; 34 - Boss fireball 
                      dw Yoshi                                  ;;8636|8636+8636/8636\8636; 35 - Green Yoshi 
                      dw DATA_01E41F                            ;;8638|8638+8638/8638\8638; 36 - Unused 
                      dw Boo_BooBlock                           ;;863A|863A+863A/863A\863A; 37 - Boo 
                      dw Eerie                                  ;;863C|863C+863C/863C\863C; 38 - Eerie 
                      dw Eerie                                  ;;863E|863E+863E/863E\863E; 39 - Eerie, wave motion 
                      dw WallFollowers                          ;;8640|8640+8640/8640\8640; 3A - Urchin, fixed 
                      dw WallFollowers                          ;;8642|8642+8642/8642\8642; 3B - Urchin, wall detect 
                      dw WallFollowers                          ;;8644|8644+8644/8644\8644; 3C - Urchin, wall follow 
                      dw RipVanFish                             ;;8646|8646+8646/8646\8646; 3D - Rip Van Fish 
                      dw PSwitch                                ;;8648|8648+8648/8648\8648; 3E - POW 
                      dw ParachuteSprites                       ;;864A|864A+864A/864A\864A; 3F - Para-Goomba 
                      dw ParachuteSprites                       ;;864C|864C+864C/864C\864C; 40 - Para-Bomb 
                      dw Dolphin                                ;;864E|864E+864E/864E\864E; 41 - Dolphin, horizontal 
                      dw Dolphin                                ;;8650|8650+8650/8650\8650; 42 - Dolphin2, horizontal 
                      dw Dolphin                                ;;8652|8652+8652/8652\8652; 43 - Dolphin, vertical 
                      dw TorpedoTed                             ;;8654|8654+8654/8654\8654; 44 - Torpedo Ted 
                      dw DirectionalCoins                       ;;8656|8656+8656/8656\8656; 45 - Directional coins 
                      dw DigginChuck                            ;;8658|8658+8658/8658\8658; 46 - Diggin' Chuck 
                      dw SwimJumpFish                           ;;865A|865A+865A/865A\865A; 47 - Swimming/Jumping fish 
                      dw DigginChucksRock                       ;;865C|865C+865C/865C\865C; 48 - Diggin' Chuck's rock 
                      dw GrowingPipe                            ;;865E|865E+865E/865E\865E; 49 - Growing/shrinking pipe end 
                      dw GoalSphere                             ;;8660|8660+8660/8660\8660; 4A - Goal Point Question Sphere 
                      dw PipeLakitu                             ;;8662|8662+8662/8662\8662; 4B - Pipe dwelling Lakitu 
                      dw ExplodingBlock                         ;;8664|8664+8664/8664\8664; 4C - Exploding Block 
                      dw MontyMole                              ;;8666|8666+8666/8666\8666; 4D - Ground dwelling Monty Mole 
                      dw MontyMole                              ;;8668|8668+8668/8668\8668; 4E - Ledge dwelling Monty Mole 
                      dw JumpingPiranha                         ;;866A|866A+866A/866A\866A; 4F - Jumping Piranha Plant 
                      dw JumpingPiranha                         ;;866C|866C+866C/866C\866C; 50 - Jumping Piranha Plant, spit fire 
                      dw Bank3SprHandler                        ;;866E|866E+866E/866E\866E; 51 - Ninji 
                      dw MovingLedge                            ;;8670|8670+8670/8670\8670; 52 - Moving ledge hole in ghost house 
                      dw Return0185C2                           ;;8672|8672+8672/8672\8672; 53 - Throw block sprite 
                      dw ClimbingDoor                           ;;8674|8674+8674/8674\8674; 54 - Climbing net door 
                      dw Platforms                              ;;8676|8676+8676/8676\8676; 55 - Checkerboard platform, horizontal 
                      dw Platforms                              ;;8678|8678+8678/8678\8678; 56 - Flying rock platform, horizontal 
                      dw Platforms                              ;;867A|867A+867A/867A\867A; 57 - Checkerboard platform, vertical 
                      dw Platforms                              ;;867C|867C+867C/867C\867C; 58 - Flying rock platform, vertical 
                      dw TurnBlockBridge                        ;;867E|867E+867E/867E\867E; 59 - Turn block bridge, horizontal and vertical 
                      dw HorzTurnBlkBridge                      ;;8680|8680+8680/8680\8680; 5A - Turn block bridge, horizontal 
                      dw Platforms2                             ;;8682|8682+8682/8682\8682; 5B - Brown platform floating in water 
                      dw Platforms2                             ;;8684|8684+8684/8684\8684; 5C - Checkerboard platform that falls 
                      dw Platforms2                             ;;8686|8686+8686/8686\8686; 5D - Orange platform floating in water 
                      dw OrangePlatform                         ;;8688|8688+8688/8688\8688; 5E - Orange platform, goes on forever 
                      dw BrownChainedPlat                       ;;868A|868A+868A/868A\868A; 5F - Brown platform on a chain 
                      dw PalaceSwitch                           ;;868C|868C+868C/868C\868C; 60 - Flat green switch palace switch 
                      dw FloatingSkulls                         ;;868E|868E+868E/868E\868E; 61 - Floating skulls 
                      dw LineFuzzy_Plats                        ;;8690|8690+8690/8690\8690; 62 - Brown platform, line-guided 
                      dw LineFuzzy_Plats                        ;;8692|8692+8692/8692\8692; 63 - Checker/brown platform, line-guided 
                      dw LineRope_Chainsaw                      ;;8694|8694+8694/8694\8694; 64 - Rope mechanism, line-guided 
                      dw LineRope_Chainsaw                      ;;8696|8696+8696/8696\8696; 65 - Chainsaw, line-guided 
                      dw LineRope_Chainsaw                      ;;8698|8698+8698/8698\8698; 66 - Upside down chainsaw, line-guided 
                      dw LineGrinder                            ;;869A|869A+869A/869A\869A; 67 - Grinder, line-guided 
                      dw LineFuzzy_Plats                        ;;869C|869C+869C/869C\869C; 68 - Fuzz ball, line-guided 
                      dw Return01D6C3                           ;;869E|869E+869E/869E\869E; 69 - Unused 
                      dw CoinCloud                              ;;86A0|86A0+86A0/86A0\86A0; 6A - Coin game cloud 
                      dw PeaBouncer                             ;;86A2|86A2+86A2/86A2\86A2; 6B - Spring board, left wall 
                      dw PeaBouncer                             ;;86A4|86A4+86A4/86A4\86A4; 6C - Spring board, right wall 
                      dw InvisSolid_Dinos                       ;;86A6|86A6+86A6/86A6\86A6; 6D - Invisible solid block 
                      dw InvisSolid_Dinos                       ;;86A8|86A8+86A8/86A8\86A8; 6E - Dino Rhino 
                      dw InvisSolid_Dinos                       ;;86AA|86AA+86AA/86AA\86AA; 6F - Dino Torch 
                      dw Pokey                                  ;;86AC|86AC+86AC/86AC\86AC; 70 - Pokey 
                      dw RedSuperKoopa                          ;;86AE|86AE+86AE/86AE\86AE; 71 - Super Koopa, red cape 
                      dw YellowSuperKoopa                       ;;86B0|86B0+86B0/86B0\86B0; 72 - Super Koopa, yellow cape 
                      dw FeatherSuperKoopa                      ;;86B2|86B2+86B2/86B2\86B2; 73 - Super Koopa, feather 
                      dw PowerUpRt                              ;;86B4|86B4+86B4/86B4\86B4; 74 - Mushroom 
                      dw FireFlower                             ;;86B6|86B6+86B6/86B6\86B6; 75 - Flower 
                      dw PowerUpRt                              ;;86B8|86B8+86B8/86B8\86B8; 76 - Star 
                      dw Feather                                ;;86BA|86BA+86BA/86BA\86BA; 77 - Feather 
                      dw PowerUpRt                              ;;86BC|86BC+86BC/86BC\86BC; 78 - 1-Up 
                      dw GrowingVine                            ;;86BE|86BE+86BE/86BE\86BE; 79 - Growing Vine 
                      dw Bank3SprHandler                        ;;86C0|86C0+86C0/86C0\86C0; 7A - Firework 
                      dw GoalTape                               ;;86C2|86C2+86C2/86C2\86C2; 7B - Goal Point 
                      dw Bank3SprHandler                        ;;86C4|86C4+86C4/86C4\86C4; 7C - Princess Peach 
                      dw BalloonKeyFlyObjs                      ;;86C6|86C6+86C6/86C6\86C6; 7D - Balloon 
                      dw BalloonKeyFlyObjs                      ;;86C8|86C8+86C8/86C8\86C8; 7E - Flying Red coin 
                      dw BalloonKeyFlyObjs                      ;;86CA|86CA+86CA/86CA\86CA; 7F - Flying yellow 1-Up 
                      dw BalloonKeyFlyObjs                      ;;86CC|86CC+86CC/86CC\86CC; 80 - Key 
                      dw ChangingItem                           ;;86CE|86CE+86CE/86CE\86CE; 81 - Changing item from translucent block 
                      dw BonusGame                              ;;86D0|86D0+86D0/86D0\86D0; 82 - Bonus game sprite 
                      dw Flying_Block                           ;;86D2|86D2+86D2/86D2\86D2; 83 - Left flying question block 
                      dw Flying_Block                           ;;86D4|86D4+86D4/86D4\86D4; 84 - Flying question block 
                      dw InitFlying_Block                       ;;86D6|86D6+86D6/86D6\86D6; 85 - Unused (Pretty sure) 
                      dw Wiggler                                ;;86D8|86D8+86D8/86D8\86D8; 86 - Wiggler 
                      dw LakituCloud                            ;;86DA|86DA+86DA/86DA\86DA; 87 - Lakitu's cloud 
                      dw WingedCage                             ;;86DC|86DC+86DC/86DC\86DC; 88 - Unused (Winged cage sprite) 
                      dw Layer3Smash                            ;;86DE|86DE+86DE/86DE\86DE; 89 - Layer 3 smash 
                      dw YoshisHouseBirds                       ;;86E0|86E0+86E0/86E0\86E0; 8A - Bird from Yoshi's house 
                      dw YoshisHouseSmoke                       ;;86E2|86E2+86E2/86E2\86E2; 8B - Puff of smoke from Yoshi's house 
                      dw SideExit                               ;;86E4|86E4+86E4/86E4\86E4; 8C - Fireplace smoke/exit from side screen 
                      dw GhostHouseExit                         ;;86E6|86E6+86E6/86E6\86E6; 8D - Ghost house exit sign and door 
                      dw WarpBlocks                             ;;86E8|86E8+86E8/86E8\86E8; 8E - Invisible "Warp Hole" blocks 
                      dw ScalePlatforms                         ;;86EA|86EA+86EA/86EA\86EA; 8F - Scale platforms 
                      dw GasBubble                              ;;86EC|86EC+86EC/86EC\86EC; 90 - Large green gas bubble 
                      dw Chucks                                 ;;86EE|86EE+86EE/86EE\86EE; 91 - Chargin' Chuck 
                      dw Chucks                                 ;;86F0|86F0+86F0/86F0\86F0; 92 - Splittin' Chuck 
                      dw Chucks                                 ;;86F2|86F2+86F2/86F2\86F2; 93 - Bouncin' Chuck 
                      dw Chucks                                 ;;86F4|86F4+86F4/86F4\86F4; 94 - Whistlin' Chuck 
                      dw Chucks                                 ;;86F6|86F6+86F6/86F6\86F6; 95 - Clapin' Chuck 
                      dw Chucks                                 ;;86F8|86F8+86F8/86F8\86F8; 96 - Unused (Chargin' Chuck clone) 
                      dw Chucks                                 ;;86FA|86FA+86FA/86FA\86FA; 97 - Puntin' Chuck 
                      dw Chucks                                 ;;86FC|86FC+86FC/86FC\86FC; 98 - Pitchin' Chuck 
                      dw VolcanoLotus                           ;;86FE|86FE+86FE/86FE\86FE; 99 - Volcano Lotus 
                      dw SumoBrother                            ;;8700|8700+8700/8700\8700; 9A - Sumo Brother 
                      dw HammerBrother                          ;;8702|8702+8702/8702\8702; 9B - Hammer Brother 
                      dw FlyingPlatform                         ;;8704|8704+8704/8704\8704; 9C - Flying blocks for Hammer Brother 
                      dw BubbleWithSprite                       ;;8706|8706+8706/8706\8706; 9D - Bubble with sprite 
                      dw BanzaiBnCGrayPlat                      ;;8708|8708+8708/8708\8708; 9E - Ball and Chain 
                      dw BanzaiBnCGrayPlat                      ;;870A|870A+870A/870A\870A; 9F - Banzai Bill 
                      dw Bank3SprHandler                        ;;870C|870C+870C/870C\870C; A0 - Activates Bowser scene 
                      dw Bank3SprHandler                        ;;870E|870E+870E/870E\870E; A1 - Bowser's bowling ball 
                      dw Bank3SprHandler                        ;;8710|8710+8710/8710\8710; A2 - MechaKoopa 
                      dw BanzaiBnCGrayPlat                      ;;8712|8712+8712/8712\8712; A3 - Grey platform on chain 
                      dw FloatingSpikeBall                      ;;8714|8714+8714/8714\8714; A4 - Floating Spike ball 
                      dw WallFollowers                          ;;8716|8716+8716/8716\8716; A5 - Fuzzball/Sparky, ground-guided 
                      dw WallFollowers                          ;;8718|8718+8718/8718\8718; A6 - HotHead, ground-guided 
                      dw IggysBall                              ;;871A|871A+871A/871A\871A; A7 - Iggy's ball 
                      dw Bank3SprHandler                        ;;871C|871C+871C/871C\871C; A8 - Blargg 
                      dw Bank3SprHandler                        ;;871E|871E+871E/871E\871E; A9 - Reznor 
                      dw Bank3SprHandler                        ;;8720|8720+8720/8720\8720; AA - Fishbone 
                      dw Bank3SprHandler                        ;;8722|8722+8722/8722\8722; AB - Rex 
                      dw Bank3SprHandler                        ;;8724|8724+8724/8724\8724; AC - Wooden Spike, moving down and up 
                      dw Bank3SprHandler                        ;;8726|8726+8726/8726\8726; AD - Wooden Spike, moving up/down first 
                      dw Bank3SprHandler                        ;;8728|8728+8728/8728\8728; AE - Fishin' Boo 
                      dw Boo_BooBlock                           ;;872A|872A+872A/872A\872A; AF - Boo Block 
                      dw Bank3SprHandler                        ;;872C|872C+872C/872C\872C; B0 - Reflecting stream of Boo Buddies 
                      dw Bank3SprHandler                        ;;872E|872E+872E/872E\872E; B1 - Creating/Eating block 
                      dw Bank3SprHandler                        ;;8730|8730+8730/8730\8730; B2 - Falling Spike 
                      dw Bank3SprHandler                        ;;8732|8732+8732/8732\8732; B3 - Bowser statue fireball 
                      dw Grinder                                ;;8734|8734+8734/8734\8734; B4 - Grinder, non-line-guided 
                      dw Fireballs                              ;;8736|8736+8736/8736\8736; B5 - Sinking fireball used in boss battles 
                      dw Bank3SprHandler                        ;;8738|8738+8738/8738\8738; B6 - Reflecting fireball 
                      dw Bank3SprHandler                        ;;873A|873A+873A/873A\873A; B7 - Carrot Top lift, upper right 
                      dw Bank3SprHandler                        ;;873C|873C+873C/873C\873C; B8 - Carrot Top lift, upper left 
                      dw Bank3SprHandler                        ;;873E|873E+873E/873E\873E; B9 - Info Box 
                      dw Bank3SprHandler                        ;;8740|8740+8740/8740\8740; BA - Timed lift 
                      dw Bank3SprHandler                        ;;8742|8742+8742/8742\8742; BB - Grey moving castle block 
                      dw Bank3SprHandler                        ;;8744|8744+8744/8744\8744; BC - Bowser statue 
                      dw Bank3SprHandler                        ;;8746|8746+8746/8746\8746; BD - Sliding Koopa without a shell 
                      dw Bank3SprHandler                        ;;8748|8748+8748/8748\8748; BE - Swooper bat 
                      dw Bank3SprHandler                        ;;874A|874A+874A/874A\874A; BF - Mega Mole 
                      dw Bank3SprHandler                        ;;874C|874C+874C/874C\874C; C0 - Grey platform on lava 
                      dw Bank3SprHandler                        ;;874E|874E+874E/874E\874E; C1 - Flying grey turnblocks 
                      dw Bank3SprHandler                        ;;8750|8750+8750/8750\8750; C2 - Blurp fish 
                      dw Bank3SprHandler                        ;;8752|8752+8752/8752\8752; C3 - Porcu-Puffer fish 
                      dw Bank3SprHandler                        ;;8754|8754+8754/8754\8754; C4 - Grey platform that falls 
                      dw Bank3SprHandler                        ;;8756|8756+8756/8756\8756; C5 - Big Boo Boss 
                      dw Bank3SprHandler                        ;;8758|8758+8758/8758\8758; C6 - Dark room with spot light 
                      dw Bank3SprHandler                        ;;875A|875A+875A/875A\875A; C7 - Invisible mushroom 
                      dw Bank3SprHandler                        ;;875C|875C+875C/875C\875C; C8 - Light switch block for dark room 
                                                                ;;                        ;
InvisSolid_Dinos:     JSL InvisBlk_DinosMain                    ;;875E|875E+875E/875E\875E;
                      RTS                                       ;;8762|8762+8762/8762\8762; Return 
                                                                ;;                        ;
GoalSphere:           JSR SubSprGfx2Entry1                      ;;8763|8763+8763/8763\8763;
                      LDA.B !SpriteLock                         ;;8766|8766+8766/8766\8766; \ Branch if sprites locked 
                      BNE +                                     ;;8768|8768+8768/8768\8768; / 
                      LDA.B !TrueFrame                          ;;876A|876A+876A/876A\876A;
                      AND.B #$1F                                ;;876C|876C+876C/876C\876C;
                      ORA.B !SpriteLock                         ;;876E|876E+876E/876E\876E;
                      JSR CODE_01B152                           ;;8770|8770+8770/8770\8770;
                      JSR MarioSprInteractRt                    ;;8773|8773+8773/8773\8773;
                      BCC +                                     ;;8776|8776+8776/8776\8776;
                      STZ.W !SpriteStatus,X                     ;;8778|8778+8778/8778\8778;
                      LDA.B #$FF                                ;;877B|877B+877B/877B\877B;
                      STA.W !EndLevelTimer                      ;;877D|877D+877D/877D\877D;
                      STA.W !MusicBackup                        ;;8780|8780+8780/8780\8780;
                      LDA.B #!BGM_BOSSCLEAR                     ;;8783|8783+8783/8783\8783;
                      STA.W !SPCIO2                             ;;8785|8785+8785/8785\8785; / Change music 
                    + RTS                                       ;;8788|8788+8788/8788\8788; Return 
                                                                ;;                        ;
InitReznor:           JSL ReznorInit                            ;;8789|8789+8789/8789\8789;
                      RTS                                       ;;878D|878D+878D/878D\878D; Return 
                                                                ;;                        ;
Bank3SprHandler:      JSL Bnk3CallSprMain                       ;;878E|878E+878E/878E\878E;
                      RTS                                       ;;8792|8792+8792/8792\8792; Return 
                                                                ;;                        ;
BanzaiBnCGrayPlat:    JSL Banzai_Rotating                       ;;8793|8793+8793/8793\8793;
                      RTS                                       ;;8797|8797+8797/8797\8797; Return 
                                                                ;;                        ;
BubbleWithSprite:     JSL BubbleSpriteMain                      ;;8798|8798+8798/8798\8798;
                      RTS                                       ;;879C|879C+879C/879C\879C; Return 
                                                                ;;                        ;
HammerBrother:        JSL HammerBrotherMain                     ;;879D|879D+879D/879D\879D;
                      RTS                                       ;;87A1|87A1+87A1/87A1\87A1; Return 
                                                                ;;                        ;
FlyingPlatform:       JSL FlyingPlatformMain                    ;;87A2|87A2+87A2/87A2\87A2;
                      RTS                                       ;;87A6|87A6+87A6/87A6\87A6; Return 
                                                                ;;                        ;
InitHammerBrother:    JSL Return02DA59                          ;;87A7|87A7+87A7/87A7\87A7; Do nothing at all (Might as well be NOPs) 
                      RTS                                       ;;87AB|87AB+87AB/87AB\87AB; Return 
                                                                ;;                        ;
VolcanoLotus:         JSL VolcanoLotusMain                      ;;87AC|87AC+87AC/87AC\87AC;
                      RTS                                       ;;87B0|87B0+87B0/87B0\87B0; Return 
                                                                ;;                        ;
SumoBrother:          JSL SumoBrotherMain                       ;;87B1|87B1+87B1/87B1\87B1;
                      RTS                                       ;;87B5|87B5+87B5/87B5\87B5; Return 
                                                                ;;                        ;
SumosLightning:       JSL SumosLightningMain                    ;;87B6|87B6+87B6/87B6\87B6;
                      RTS                                       ;;87BA|87BA+87BA/87BA\87BA; Return 
                                                                ;;                        ;
JumpingPiranha:       JSL JumpingPiranhaMain                    ;;87BB|87BB+87BB/87BB\87BB;
                      RTS                                       ;;87BF|87BF+87BF/87BF\87BF; Return 
                                                                ;;                        ;
GasBubble:            JSL GasBubbleMain                         ;;87C0|87C0+87C0/87C0\87C0;
                      RTS                                       ;;87C4|87C4+87C4/87C4\87C4; Return 
                                                                ;;                        ;
                      JSL SumoBrotherMain                       ;;87C5|87C5+87C5/87C5\87C5; Unused call to main Sumo Brother routine 
                      RTS                                       ;;87C9|87C9+87C9/87C9\87C9; Return 
                                                                ;;                        ;
DirectionalCoins:     JSL DirectionCoinsMain                    ;;87CA|87CA+87CA/87CA\87CA;
                      RTS                                       ;;87CE|87CE+87CE/87CE\87CE; Return 
                                                                ;;                        ;
ExplodingBlock:       JSL ExplodingBlkMain                      ;;87CF|87CF+87CF/87CF\87CF;
                      RTS                                       ;;87D3|87D3+87D3/87D3\87D3; Return 
                                                                ;;                        ;
ScalePlatforms:       JSL ScalePlatformMain                     ;;87D4|87D4+87D4/87D4\87D4;
                      RTS                                       ;;87D8|87D8+87D8/87D8\87D8; Return 
                                                                ;;                        ;
InitFloatingSkull:    JSL FloatingSkullInit                     ;;87D9|87D9+87D9/87D9\87D9;
                      RTS                                       ;;87DD|87DD+87DD/87DD\87DD; Return 
                                                                ;;                        ;
FloatingSkulls:       JSL FloatingSkullMain                     ;;87DE|87DE+87DE/87DE\87DE;
                      RTS                                       ;;87E2|87E2+87E2/87E2\87E2; Return 
                                                                ;;                        ;
GhostHouseExit:       JSL GhostExitMain                         ;;87E3|87E3+87E3/87E3\87E3;
                      RTS                                       ;;87E7|87E7+87E7/87E7\87E7; Return 
                                                                ;;                        ;
WarpBlocks:           JSL WarpBlocksMain                        ;;87E8|87E8+87E8/87E8\87E8;
                      RTS                                       ;;87EC|87EC+87EC/87EC\87EC; Return 
                                                                ;;                        ;
Pokey:                JSL PokeyMain                             ;;87ED|87ED+87ED/87ED\87ED;
                      RTS                                       ;;87F1|87F1+87F1/87F1\87F1; Return 
                                                                ;;                        ;
RedSuperKoopa:        JSL SuperKoopaMain                        ;;87F2|87F2+87F2/87F2\87F2;
                      RTS                                       ;;87F6|87F6+87F6/87F6\87F6; Return 
                                                                ;;                        ;
YellowSuperKoopa:     JSL SuperKoopaMain                        ;;87F7|87F7+87F7/87F7\87F7;
                      RTS                                       ;;87FB|87FB+87FB/87FB\87FB; Return 
                                                                ;;                        ;
FeatherSuperKoopa:    JSL SuperKoopaMain                        ;;87FC|87FC+87FC/87FC\87FC;
                      RTS                                       ;;8800|8800+8800/8800\8800; Return 
                                                                ;;                        ;
PipeLakitu:           JSL PipeLakituMain                        ;;8801|8801+8801/8801\8801;
                      RTS                                       ;;8805|8805+8805/8805\8805; Return 
                                                                ;;                        ;
DigginChuck:          JSL ChucksMain                            ;;8806|8806+8806/8806\8806;
                      RTS                                       ;;880A|880A+880A/880A\880A; Return 
                                                                ;;                        ;
SwimJumpFish:         JSL SwimJumpFishMain                      ;;880B|880B+880B/880B\880B;
                      RTS                                       ;;880F|880F+880F/880F\880F; Return 
                                                                ;;                        ;
DigginChucksRock:     JSL ChucksRockMain                        ;;8810|8810+8810/8810\8810;
                      RTS                                       ;;8814|8814+8814/8814\8814; Return 
                                                                ;;                        ;
GrowingPipe:          JSL GrowingPipeMain                       ;;8815|8815+8815/8815\8815;
                      RTS                                       ;;8819|8819+8819/8819\8819; Return 
                                                                ;;                        ;
YoshisHouseBirds:     JSL BirdsMain                             ;;881A|881A+881A/881A\881A;
                      RTS                                       ;;881E|881E+881E/881E\881E; Return 
                                                                ;;                        ;
YoshisHouseSmoke:     JSL SmokeMain                             ;;881F|881F+881F/881F\881F;
                      RTS                                       ;;8823|8823+8823/8823\8823; Return 
                                                                ;;                        ;
SideExit:             JSL SideExitMain                          ;;8824|8824+8824/8824\8824;
                      RTS                                       ;;8828|8828+8828/8828\8828; Return 
                                                                ;;                        ;
InitWiggler:          JSL WigglerInit                           ;;8829|8829+8829/8829\8829;
                      RTS                                       ;;882D|882D+882D/882D\882D; Return 
                                                                ;;                        ;
Wiggler:              JSL WigglerMain                           ;;882E|882E+882E/882E\882E;
                      RTS                                       ;;8832|8832+8832/8832\8832; Return 
                                                                ;;                        ;
CoinCloud:            JSL CoinCloudMain                         ;;8833|8833+8833/8833\8833;
                      RTS                                       ;;8837|8837+8837/8837\8837; Return 
                                                                ;;                        ;
TorpedoTed:           JSL TorpedoTedMain                        ;;8838|8838+8838/8838\8838;
                      RTS                                       ;;883C|883C+883C/883C\883C; Return 
                                                                ;;                        ;
Layer3Smash:          PHB                                       ;;883D|883D+883D/883D\883D;
                      LDA.B #$02                                ;;883E|883E+883E/883E\883E;
                      PHA                                       ;;8840|8840+8840/8840\8840;
                      PLB                                       ;;8841|8841+8841/8841\8841;
                      JSL Layer3SmashMain                       ;;8842|8842+8842/8842\8842;
                      PLB                                       ;;8846|8846+8846/8846\8846;
                      RTS                                       ;;8847|8847+8847/8847\8847; Return 
                                                                ;;                        ;
PeaBouncer:           PHB                                       ;;8848|8848+8848/8848\8848;
                      LDA.B #$02                                ;;8849|8849+8849/8849\8849;
                      PHA                                       ;;884B|884B+884B/884B\884B;
                      PLB                                       ;;884C|884C+884C/884C\884C;
                      JSL PeaBouncerMain                        ;;884D|884D+884D/884D\884D;
                      PLB                                       ;;8851|8851+8851/8851\8851;
                      RTS                                       ;;8852|8852+8852/8852\8852; Return 
                                                                ;;                        ;
RipVanFish:           PHB                                       ;;8853|8853+8853/8853\8853;
                      LDA.B #$02                                ;;8854|8854+8854/8854\8854;
                      PHA                                       ;;8856|8856+8856/8856\8856;
                      PLB                                       ;;8857|8857+8857/8857\8857;
                      JSL RipVanFishMain                        ;;8858|8858+8858/8858\8858;
                      PLB                                       ;;885C|885C+885C/885C\885C;
                      RTS                                       ;;885D|885D+885D/885D\885D; Return 
                                                                ;;                        ;
WallFollowers:        PHB                                       ;;885E|885E+885E/885E\885E;
                      LDA.B #$02                                ;;885F|885F+885F/885F\885F;
                      PHA                                       ;;8861|8861+8861/8861\8861;
                      PLB                                       ;;8862|8862+8862/8862\8862;
                      JSL WallFollowersMain                     ;;8863|8863+8863/8863\8863;
                      PLB                                       ;;8867|8867+8867/8867\8867;
                      RTS                                       ;;8868|8868+8868/8868\8868; Return 
                                                                ;;                        ;
Return018869:         RTS                                       ;;8869|8869+8869/8869\8869;
                                                                ;;                        ;
Chucks:               JSL ChucksMain                            ;;886A|886A+886A/886A\886A;
                      RTS                                       ;;886E|886E+886E/886E\886E; Return 
                                                                ;;                        ;
InitWingedCage:       PHB                                       ;;886F|886F+886F/886F\886F; \ Do nothing at all 
                      LDA.B #$02                                ;;8870|8870+8870/8870\8870;  | (Might as well be NOPs) 
                      PHA                                       ;;8872|8872+8872/8872\8872;  | 
                      PLB                                       ;;8873|8873+8873/8873\8873;  | 
                      JSL Return02CBFD                          ;;8874|8874+8874/8874\8874;  | 
                      PLB                                       ;;8878|8878+8878/8878\8878; / 
                      RTS                                       ;;8879|8879+8879/8879\8879; Return 
                                                                ;;                        ;
WingedCage:           PHB                                       ;;887A|887A+887A/887A\887A;
                      LDA.B #$02                                ;;887B|887B+887B/887B\887B;
                      PHA                                       ;;887D|887D+887D/887D\887D;
                      PLB                                       ;;887E|887E+887E/887E\887E;
                      JSL WingedCageMain                        ;;887F|887F+887F/887F\887F;
                      PLB                                       ;;8883|8883+8883/8883\8883;
                      RTS                                       ;;8884|8884+8884/8884\8884; Return 
                                                                ;;                        ;
Dolphin:              PHB                                       ;;8885|8885+8885/8885\8885;
                      LDA.B #$02                                ;;8886|8886+8886/8886\8886;
                      PHA                                       ;;8888|8888+8888/8888\8888;
                      PLB                                       ;;8889|8889+8889/8889\8889;
                      JSL DolphinMain                           ;;888A|888A+888A/888A\888A;
                      PLB                                       ;;888E|888E+888E/888E\888E;
                      RTS                                       ;;888F|888F+888F/888F\888F; Return 
                                                                ;;                        ;
InitMovingLedge:      DEC.B !SpriteYPosLow,X                    ;;8890|8890+8890/8890\8890;
                      RTS                                       ;;8892|8892+8892/8892\8892; Return 
                                                                ;;                        ;
MovingLedge:          JSL MovingLedgeMain                       ;;8893|8893+8893/8893\8893;
                      RTS                                       ;;8897|8897+8897/8897\8897; Return 
                                                                ;;                        ;
JumpOverShells:       TXA                                       ;;8898|8898+8898/8898\8898; \ Process every 4 frames 
                      EOR.B !TrueFrame                          ;;8899|8899+8899/8899\8899;  | 
                      AND.B #$03                                ;;889B|889B+889B/889B\889B;  | 
                      BNE Return0188AB                          ;;889D|889D+889D/889D\889D; / 
                      LDY.B #$09                                ;;889F|889F+889F/889F\889F; \ Loop over sprites: 
JumpLoopStart:        LDA.W !SpriteStatus,Y                     ;;88A1|88A1+88A1/88A1\88A1;  | 
                      CMP.B #$0A                                ;;88A4|88A4+88A4/88A4\88A4;  | If sprite status = kicked, try to jump it 
                      BEQ HandleJumpOver                        ;;88A6|88A6+88A6/88A6\88A6;  | 
JumpLoopNext:         DEY                                       ;;88A8|88A8+88A8/88A8\88A8;  | 
                      BPL JumpLoopStart                         ;;88A9|88A9+88A9/88A9\88A9; / 
Return0188AB:         RTS                                       ;;88AB|88AB+88AB/88AB\88AB; Return 
                                                                ;;                        ;
HandleJumpOver:       LDA.W !SpriteXPosLow,Y                    ;;88AC|88AC+88AC/88AC\88AC;
                      SEC                                       ;;88AF|88AF+88AF/88AF\88AF;
                      SBC.B #$1A                                ;;88B0|88B0+88B0/88B0\88B0;
                      STA.B !_0                                 ;;88B2|88B2+88B2/88B2\88B2;
                      LDA.W !SpriteYPosHigh,Y                   ;;88B4|88B4+88B4/88B4\88B4;
                      SBC.B #$00                                ;;88B7|88B7+88B7/88B7\88B7;
                      STA.B !_8                                 ;;88B9|88B9+88B9/88B9\88B9;
                      LDA.B #$44                                ;;88BB|88BB+88BB/88BB\88BB;
                      STA.B !_2                                 ;;88BD|88BD+88BD/88BD\88BD;
                      LDA.W !SpriteYPosLow,Y                    ;;88BF|88BF+88BF/88BF\88BF;
                      STA.B !_1                                 ;;88C2|88C2+88C2/88C2\88C2;
                      LDA.W !SpriteXPosHigh,Y                   ;;88C4|88C4+88C4/88C4\88C4;
                      STA.B !_9                                 ;;88C7|88C7+88C7/88C7\88C7;
                      LDA.B #$10                                ;;88C9|88C9+88C9/88C9\88C9;
                      STA.B !_3                                 ;;88CB|88CB+88CB/88CB\88CB;
                      JSL GetSpriteClippingA                    ;;88CD|88CD+88CD/88CD\88CD;
                      JSL CheckForContact                       ;;88D1|88D1+88D1/88D1\88D1;
                      BCC JumpLoopNext                          ;;88D5|88D5+88D5/88D5\88D5; If not close to shell, go back to main loop 
                      JSR IsOnGround                            ;;88D7|88D7+88D7/88D7\88D7; \ If sprite not on ground, go back to main loop 
                      BEQ JumpLoopNext                          ;;88DA|88DA+88DA/88DA\88DA; / 
                      LDA.W !SpriteMisc157C,Y                   ;;88DC|88DC+88DC/88DC\88DC; \ If sprite not facing shell, don't jump 
                      CMP.W !SpriteMisc157C,X                   ;;88DF|88DF+88DF/88DF\88DF;  | 
                      BEQ +                                     ;;88E2|88E2+88E2/88E2\88E2; / 
                      LDA.B #$C0                                ;;88E4|88E4+88E4/88E4\88E4; \ Finally set jump speed 
                      STA.B !SpriteYSpeed,X                     ;;88E6|88E6+88E6/88E6\88E6; / 
                      STZ.W !SpriteMisc163E,X                   ;;88E8|88E8+88E8/88E8\88E8;
                    + RTS                                       ;;88EB|88EB+88EB/88EB\88EB; Return 
                                                                ;;                        ;
                                                                ;;                        ;
Spr0to13SpeedX:       db $08,$F8,$0C,$F4                        ;;88EC|88EC+88EC/88EC\88EC;
                                                                ;;                        ;
Spr0to13Prop:         db $00,$02,$03,$0D,$40,$42,$43,$45        ;;88F0|88F0+88F0/88F0\88F0;
                      db $50,$50,$50,$5C,$DD,$05,$00,$20        ;;88F8|88F8+88F8/88F8\88F8;
                      db $20,$00,$00,$00                        ;;8900|8900+8900/8900\8900;
                                                                ;;                        ;
ShellessKoopas:       LDA.B !SpriteLock                         ;;8904|8904+8904/8904\8904; \ If sprites aren't locked, 
                      BEQ CODE_018952                           ;;8906|8906+8906/8906\8906; / branch to $8952 
CODE_018908:          LDA.W !SpriteMisc163E,X                   ;;8908|8908+8908/8908\8908;COME BACK HERE ON NOT STATIONARY BRANCH             
                      CMP.B #$80                                ;;890B|890B+890B/890B\890B;
                      BCC +                                     ;;890D|890D+890D/890D\890D;
                      LDA.B !SpriteLock                         ;;890F|890F+890F/890F\890F; \ If sprites are locked, 
                      BNE +                                     ;;8911|8911+8911/8911\8911; / branch to $891F 
CODE_018913:          JSR SetAnimationFrame                     ;;8913|8913+8913/8913\8913;
                      LDA.W !SpriteMisc1602,X                   ;;8916|8916+8916/8916\8916; \  
                      CLC                                       ;;8919|8919+8919/8919\8919;  |Increase sprite's image by x05 
                      ADC.B #$05                                ;;891A|891A+891A/891A\891A;  | 
                      STA.W !SpriteMisc1602,X                   ;;891C|891C+891C/891C\891C; /  
                    + JSR CODE_018931                           ;;891F|891F+891F/891F\891F;
                      JSR SubUpdateSprPos                       ;;8922|8922+8922/8922\8922;
                      STZ.B !SpriteXSpeed,X                     ;;8925|8925+8925/8925\8925; Sprite X Speed = 0 
                      JSR IsOnGround                            ;;8927|8927+8927/8927\8927; \ If sprite is on edge (on ground), 
                      BEQ +                                     ;;892A|892A+892A/892A\892A;  |Sprite Y Speed = 0 
                      STZ.B !SpriteYSpeed,X                     ;;892C|892C+892C/892C\892C; /  
                    + JMP CODE_018B03                           ;;892E|892E+892E/892E\892E;
                                                                ;;                        ;
CODE_018931:          LDA.B !SpriteNumber,X                     ;;8931|8931+8931/8931\8931; \  
                      CMP.B #$02                                ;;8933|8933+8933/8933\8933;  |If sprite isn't Blue shelless Koopa, 
                      BNE CODE_01893C                           ;;8935|8935+8935/8935\8935; / branch to $893C 
                      JSR MarioSprInteractRt                    ;;8937|8937+8937/8937\8937;
                      BRA Return018951                          ;;893A|893A+893A/893A\893A;
                                                                ;;                        ;
CODE_01893C:          ASL.W !SpriteTweakerD,X                   ;;893C|893C+893C/893C\893C;
                      SEC                                       ;;893F|893F+893F/893F\893F;
                      ROR.W !SpriteTweakerD,X                   ;;8940|8940+8940/8940\8940;
                      JSR MarioSprInteractRt                    ;;8943|8943+8943/8943\8943;
                      BCC +                                     ;;8946|8946+8946/8946\8946;
                      JSR CODE_01B12A                           ;;8948|8948+8948/8948\8948;
                    + ASL.W !SpriteTweakerD,X                   ;;894B|894B+894B/894B\894B;
                      LSR.W !SpriteTweakerD,X                   ;;894E|894E+894E/894E\894E;
Return018951:         RTS                                       ;;8951|8951+8951/8951\8951; Return 
                                                                ;;                        ;
CODE_018952:          LDA.W !SpriteMisc163E,X                   ;;8952|8952+8952/8952\8952;CODE RUNA T START?        
                      BEQ CODE_0189B4                           ;;8955|8955+8955/8955\8955;SKIP IF $163E IS ZERO FOR SPRITE.  IS KICKING SHELL TIMER / GENREAL TIME          
                      CMP.B #$80                                ;;8957|8957+8957/8957\8957;
                      BNE CODE_01896B                           ;;8959|8959+8959/8959\8959;
                      JSR FaceMario                             ;;895B|895B+895B/895B\895B;
                      LDA.B !SpriteNumber,X                     ;;895E|895E+895E/895E\895E; \  
                      CMP.B #$02                                ;;8960|8960+8960/8960\8960;  |If sprite is Blue shelless Koopa, 
                      BEQ +                                     ;;8962|8962+8962/8962\8962;  |Set Y speed to xE0 
                      LDA.B #$E0                                ;;8964|8964+8964/8964\8964;  | 
                      STA.B !SpriteYSpeed,X                     ;;8966|8966+8966/8966\8966; /  
                    + STZ.W !SpriteMisc163E,X                   ;;8968|8968+8968/8968\8968;ZERO KICKING SHELL TIMER             
CODE_01896B:          CMP.B #$01                                ;;896B|896B+896B/896B\896B;
                      BNE CODE_018908                           ;;896D|896D+896D/896D\896D;
                      LDY.W !SpriteMisc160E,X                   ;;896F|896F+896F/896F\896F;IT KICKS THIS? !@#             
                      LDA.W !SpriteStatus,Y                     ;;8972|8972+8972/8972\8972;
                      CMP.B #$09                                ;;8975|8975+8975/8975\8975;IF NOT STATIONARY, BRANCH                
                      BNE CODE_018908                           ;;8977|8977+8977/8977\8977;
                      LDA.B !SpriteXPosLow,X                    ;;8979|8979+8979/8979\8979;KOOPA BLUE KICK SHELL!       
                      SEC                                       ;;897B|897B+897B/897B\897B;
                      SBC.W !SpriteXPosLow,Y                    ;;897C|897C+897C/897C\897C;
                      CLC                                       ;;897F|897F+897F/897F\897F;
                      ADC.B #$12                                ;;8980|8980+8980/8980\8980;
                      CMP.B #$24                                ;;8982|8982+8982/8982\8982;
                      BCS CODE_018908                           ;;8984|8984+8984/8984\8984;
                      JSR PlayKickSfx                           ;;8986|8986+8986/8986\8986;
                      JSR CODE_01A755                           ;;8989|8989+8989/8989\8989;
                      LDY.W !SpriteMisc157C,X                   ;;898C|898C+898C/898C\898C;
                      LDA.W DATA_01A6D7,Y                       ;;898F|898F+898F/898F\898F;
                      LDY.W !SpriteMisc160E,X                   ;;8992|8992+8992/8992\8992;
                      STA.W !SpriteXSpeed,Y                     ;;8995|8995+8995/8995\8995;
                      LDA.B #$0A                                ;;8998|8998+8998/8998\8998; \ Sprite status = Kicked 
                      STA.W !SpriteStatus,Y                     ;;899A|899A+899A/899A\899A; / 
                      LDA.W !SpriteMisc1540,Y                   ;;899D|899D+899D/899D\899D;
                      STA.W !SpriteTableC2,Y                    ;;89A0|89A0+89A0/89A0\89A0;
                      LDA.B #$08                                ;;89A3|89A3+89A3/89A3\89A3;
                      STA.W !SpriteMisc1564,Y                   ;;89A5|89A5+89A5/89A5\89A5;
                      LDA.W !SpriteTweakerD,Y                   ;;89A8|89A8+89A8/89A8\89A8;
                      AND.B #$10                                ;;89AB|89AB+89AB/89AB\89AB;
                      BEQ CODE_0189B4                           ;;89AD|89AD+89AD/89AD\89AD;
                      LDA.B #$E0                                ;;89AF|89AF+89AF/89AF\89AF;
                      STA.W !SpriteYSpeed,Y                     ;;89B1|89B1+89B1/89B1\89B1;
CODE_0189B4:          LDA.W !SpriteMisc1528,X                   ;;89B4|89B4+89B4/89B4\89B4;
                      BEQ CODE_018A15                           ;;89B7|89B7+89B7/89B7\89B7;
                      JSR IsTouchingObjSide                     ;;89B9|89B9+89B9/89B9\89B9;
                      BEQ +                                     ;;89BC|89BC+89BC/89BC\89BC;
                      STZ.B !SpriteXSpeed,X                     ;;89BE|89BE+89BE/89BE\89BE; Sprite X Speed = 0 
                    + JSR IsOnGround                            ;;89C0|89C0+89C0/89C0\89C0;
                      BEQ CODE_0189E6                           ;;89C3|89C3+89C3/89C3\89C3;
                      LDA.B !LevelIsSlippery                    ;;89C5|89C5+89C5/89C5\89C5;
                      CMP.B #$01                                ;;89C7|89C7+89C7/89C7\89C7;
                      LDA.B #$02                                ;;89C9|89C9+89C9/89C9\89C9;
                      BCC +                                     ;;89CB|89CB+89CB/89CB\89CB;
                      LSR A                                     ;;89CD|89CD+89CD/89CD\89CD;
                    + STA.B !_0                                 ;;89CE|89CE+89CE/89CE\89CE;
                      LDA.B !SpriteXSpeed,X                     ;;89D0|89D0+89D0/89D0\89D0;
                      CMP.B #$02                                ;;89D2|89D2+89D2/89D2\89D2;
                      BCC CODE_0189FD                           ;;89D4|89D4+89D4/89D4\89D4;
                      BPL +                                     ;;89D6|89D6+89D6/89D6\89D6;
                      CLC                                       ;;89D8|89D8+89D8/89D8\89D8;
                      ADC.B !_0                                 ;;89D9|89D9+89D9/89D9\89D9;
                      CLC                                       ;;89DB|89DB+89DB/89DB\89DB;
                      ADC.B !_0                                 ;;89DC|89DC+89DC/89DC\89DC;
                    + SEC                                       ;;89DE|89DE+89DE/89DE\89DE;
                      SBC.B !_0                                 ;;89DF|89DF+89DF/89DF\89DF;
                      STA.B !SpriteXSpeed,X                     ;;89E1|89E1+89E1/89E1\89E1;
                      JSR CODE_01804E                           ;;89E3|89E3+89E3/89E3\89E3;
CODE_0189E6:          STZ.W !SpriteMisc1570,X                   ;;89E6|89E6+89E6/89E6\89E6;
                      JSR CODE_018B43                           ;;89E9|89E9+89E9/89E9\89E9;
                      LDA.B #$E6                                ;;89EC|89EC+89EC/89EC\89EC;
                      LDY.B !SpriteNumber,X                     ;;89EE|89EE+89EE/89EE\89EE; \ Branch if Blue shelless
                      CPY.B #$02                                ;;89F0|89F0+89F0/89F0\89F0;  |
                      BEQ +                                     ;;89F2|89F2+89F2/89F2\89F2; /
                      LDA.B #$86                                ;;89F4|89F4+89F4/89F4\89F4;
                    + LDY.W !SpriteOAMIndex,X                   ;;89F6|89F6+89F6/89F6\89F6; Y = Index into sprite OAM 
                      STA.W !OAMTileNo+$100,Y                   ;;89F9|89F9+89F9/89F9\89F9;
                      RTS                                       ;;89FC|89FC+89FC/89FC\89FC; Return 
                                                                ;;                        ;
CODE_0189FD:          JSR IsOnGround                            ;;89FD|89FD+89FD/89FD\89FD;KOOPA CODE         
                      BEQ CODE_018A0F                           ;;8A00|8A00+8A00/8A00\8A00;
                      LDA.B #$FF                                ;;8A02|8A02+8A02/8A02\8A02;
                      LDY.B !SpriteNumber,X                     ;;8A04|8A04+8A04/8A04\8A04;
                      CPY.B #$02                                ;;8A06|8A06+8A06/8A06\8A06;
                      BNE +                                     ;;8A08|8A08+8A08/8A08\8A08;
                      LDA.B #$A0                                ;;8A0A|8A0A+8A0A/8A0A\8A0A;
                    + STA.W !SpriteMisc163E,X                   ;;8A0C|8A0C+8A0C/8A0C\8A0C;
CODE_018A0F:          STZ.W !SpriteMisc1528,X                   ;;8A0F|8A0F+8A0F/8A0F\8A0F;
                      JMP CODE_018913                           ;;8A12|8A12+8A12/8A12\8A12;
                                                                ;;                        ;
CODE_018A15:          LDA.W !SpriteMisc1534,X                   ;;8A15|8A15+8A15/8A15\8A15;
                      BEQ CODE_018A88                           ;;8A18|8A18+8A18/8A18\8A18;
                      LDY.W !SpriteMisc160E,X                   ;;8A1A|8A1A+8A1A/8A1A\8A1A;
                      LDA.W !SpriteStatus,Y                     ;;8A1D|8A1D+8A1D/8A1D\8A1D;
                      CMP.B #$0A                                ;;8A20|8A20+8A20/8A20\8A20;
                      BEQ CODE_018A29                           ;;8A22|8A22+8A22/8A22\8A22;
                      STZ.W !SpriteMisc1534,X                   ;;8A24|8A24+8A24/8A24\8A24;
                      BRA CODE_018A62                           ;;8A27|8A27+8A27/8A27\8A27;
                                                                ;;                        ;
CODE_018A29:          STA.W !SpriteMisc1528,Y                   ;;8A29|8A29+8A29/8A29\8A29;
                      JSR IsTouchingObjSide                     ;;8A2C|8A2C+8A2C/8A2C\8A2C;
                      BEQ +                                     ;;8A2F|8A2F+8A2F/8A2F\8A2F;
                      LDA.B #$00                                ;;8A31|8A31+8A31/8A31\8A31;
                      STA.W !SpriteXSpeed,Y                     ;;8A33|8A33+8A33/8A33\8A33;
                      STA.B !SpriteXSpeed,X                     ;;8A36|8A36+8A36/8A36\8A36;
                    + JSR IsOnGround                            ;;8A38|8A38+8A38/8A38\8A38;
                      BEQ CODE_018A62                           ;;8A3B|8A3B+8A3B/8A3B\8A3B;
                      LDA.B !LevelIsSlippery                    ;;8A3D|8A3D+8A3D/8A3D\8A3D;
                      CMP.B #$01                                ;;8A3F|8A3F+8A3F/8A3F\8A3F;
                      LDA.B #$02                                ;;8A41|8A41+8A41/8A41\8A41;
                      BCC +                                     ;;8A43|8A43+8A43/8A43\8A43;
                      LSR A                                     ;;8A45|8A45+8A45/8A45\8A45;
                    + STA.B !_0                                 ;;8A46|8A46+8A46/8A46\8A46;
                      LDA.W !SpriteXSpeed,Y                     ;;8A48|8A48+8A48/8A48\8A48;
                      CMP.B #$02                                ;;8A4B|8A4B+8A4B/8A4B\8A4B;
                      BCC CODE_018A69                           ;;8A4D|8A4D+8A4D/8A4D\8A4D;
                      BPL +                                     ;;8A4F|8A4F+8A4F/8A4F\8A4F;
                      CLC                                       ;;8A51|8A51+8A51/8A51\8A51;
                      ADC.B !_0                                 ;;8A52|8A52+8A52/8A52\8A52;
                      CLC                                       ;;8A54|8A54+8A54/8A54\8A54;
                      ADC.B !_0                                 ;;8A55|8A55+8A55/8A55\8A55;
                    + SEC                                       ;;8A57|8A57+8A57/8A57\8A57;
                      SBC.B !_0                                 ;;8A58|8A58+8A58/8A58\8A58;
                      STA.W !SpriteXSpeed,Y                     ;;8A5A|8A5A+8A5A/8A5A\8A5A;
                      STA.B !SpriteXSpeed,X                     ;;8A5D|8A5D+8A5D/8A5D\8A5D;
                      JSR CODE_01804E                           ;;8A5F|8A5F+8A5F/8A5F\8A5F;
CODE_018A62:          STZ.W !SpriteMisc1570,X                   ;;8A62|8A62+8A62/8A62\8A62;
                      JSR CODE_018B43                           ;;8A65|8A65+8A65/8A65\8A65;
                      RTS                                       ;;8A68|8A68+8A68/8A68\8A68; Return 
                                                                ;;                        ;
CODE_018A69:          LDA.B #$00                                ;;8A69|8A69+8A69/8A69\8A69;
                      STA.B !SpriteXSpeed,X                     ;;8A6B|8A6B+8A6B/8A6B\8A6B;
                      STA.W !SpriteXSpeed,Y                     ;;8A6D|8A6D+8A6D/8A6D\8A6D;
                      STZ.W !SpriteMisc1534,X                   ;;8A70|8A70+8A70/8A70\8A70;
                      LDA.B #$09                                ;;8A73|8A73+8A73/8A73\8A73; \ Sprite status = Carryable 
                      STA.W !SpriteStatus,Y                     ;;8A75|8A75+8A75/8A75\8A75; / 
                      PHX                                       ;;8A78|8A78+8A78/8A78\8A78;
                      TYX                                       ;;8A79|8A79+8A79/8A79\8A79;
                      JSR CODE_01AA0B                           ;;8A7A|8A7A+8A7A/8A7A\8A7A;
                      LDA.W !SpriteMisc1540,X                   ;;8A7D|8A7D+8A7D/8A7D\8A7D;
                      BEQ +                                     ;;8A80|8A80+8A80/8A80\8A80;
                      LDA.B #$FF                                ;;8A82|8A82+8A82/8A82\8A82;
                      STA.W !SpriteMisc1540,X                   ;;8A84|8A84+8A84/8A84\8A84;
                    + PLX                                       ;;8A87|8A87+8A87/8A87\8A87;
CODE_018A88:          LDA.B !SpriteTableC2,X                    ;;8A88|8A88+8A88/8A88\8A88;
                      BEQ CODE_018A9B                           ;;8A8A|8A8A+8A8A/8A8A\8A8A;
                      DEC.B !SpriteTableC2,X                    ;;8A8C|8A8C+8A8C/8A8C\8A8C;
                      CMP.B #$08                                ;;8A8E|8A8E+8A8E/8A8E\8A8E;
                      LDA.B #$04                                ;;8A90|8A90+8A90/8A90\8A90;
                      BCS +                                     ;;8A92|8A92+8A92/8A92\8A92;
                      LDA.B #$00                                ;;8A94|8A94+8A94/8A94\8A94;
                    + STA.W !SpriteMisc1602,X                   ;;8A96|8A96+8A96/8A96\8A96;
                      BRA CODE_018B00                           ;;8A99|8A99+8A99/8A99\8A99;
                                                                ;;                        ;
CODE_018A9B:          LDA.W !SpriteMisc1558,X                   ;;8A9B|8A9B+8A9B/8A9B\8A9B;
                      CMP.B #$01                                ;;8A9E|8A9E+8A9E/8A9E\8A9E;
                      BNE Spr0to13Main                          ;;8AA0|8AA0+8AA0/8AA0\8AA0;
                      LDY.W !SpriteMisc1594,X                   ;;8AA2|8AA2+8AA2/8AA2\8AA2;SHELL TO INTERACT WITH???             
                      LDA.W !SpriteStatus,Y                     ;;8AA5|8AA5+8AA5/8AA5\8AA5;
                      CMP.B #$08                                ;;8AA8|8AA8+8AA8/8AA8\8AA8;
                      BCC +                                     ;;8AAA|8AAA+8AAA/8AAA\8AAA;
                      LDA.W !SpriteYSpeed,Y                     ;;8AAC|8AAC+8AAC/8AAC\8AAC;
                      BMI +                                     ;;8AAF|8AAF+8AAF/8AAF\8AAF;
                      LDA.W !SpriteNumber,Y                     ;;8AB1|8AB1+8AB1/8AB1\8AB1; \ Return if Coin sprite
                      CMP.B #$21                                ;;8AB4|8AB4+8AB4/8AB4\8AB4;  |
                      BEQ +                                     ;;8AB6|8AB6+8AB6/8AB6\8AB6; /
                      JSL GetSpriteClippingA                    ;;8AB8|8AB8+8AB8/8AB8\8AB8;
                      PHX                                       ;;8ABC|8ABC+8ABC/8ABC\8ABC;
                      TYX                                       ;;8ABD|8ABD+8ABD/8ABD\8ABD;
                      JSL GetSpriteClippingB                    ;;8ABE|8ABE+8ABE/8ABE\8ABE;
                      PLX                                       ;;8AC2|8AC2+8AC2/8AC2\8AC2;
                      JSL CheckForContact                       ;;8AC3|8AC3+8AC3/8AC3\8AC3;
                      BCC +                                     ;;8AC7|8AC7+8AC7/8AC7\8AC7;
                      JSR OffScrEraseSprite                     ;;8AC9|8AC9+8AC9/8AC9\8AC9;
                      LDY.W !SpriteMisc1594,X                   ;;8ACC|8ACC+8ACC/8ACC\8ACC;
                      LDA.B #$10                                ;;8ACF|8ACF+8ACF/8ACF\8ACF;
                      STA.W !SpriteMisc1558,Y                   ;;8AD1|8AD1+8AD1/8AD1\8AD1;
                      LDA.B !SpriteNumber,X                     ;;8AD4|8AD4+8AD4/8AD4\8AD4;
                      STA.W !SpriteMisc160E,Y                   ;;8AD6|8AD6+8AD6/8AD6\8AD6;SPRITE NUMBER TO DEAL WITH ?            
                    + RTS                                       ;;8AD9|8AD9+8AD9/8AD9\8AD9; Return 
                                                                ;;                        ;
                    - PHB                                       ;;8ADA|8ADA+8ADA/8ADA\8ADA; \ Change Bob-omb into explosion 
                      LDA.B #$02                                ;;8ADB|8ADB+8ADB/8ADB\8ADB;  | 
                      PHA                                       ;;8ADD|8ADD+8ADD/8ADD\8ADD;  | 
                      PLB                                       ;;8ADE|8ADE+8ADE/8ADE\8ADE;  | 
                      JSL ExplodeBombRt                         ;;8ADF|8ADF+8ADF/8ADF\8ADF;  | 
                      PLB                                       ;;8AE3|8AE3+8AE3/8AE3\8AE3;  | 
                      RTS                                       ;;8AE4|8AE4+8AE4/8AE4\8AE4; / 
                                                                ;;                        ;
Bobomb:               LDA.W !SpriteMisc1534,X                   ;;8AE5|8AE5+8AE5/8AE5\8AE5; \ Branch if exploding 
                      BNE -                                     ;;8AE8|8AE8+8AE8/8AE8\8AE8; / 
                      LDA.W !SpriteMisc1540,X                   ;;8AEA|8AEA+8AEA/8AEA\8AEA; \ Branch if not set to explode 
                      BNE Spr0to13Start                         ;;8AED|8AED+8AED/8AED\8AED; / 
                      LDA.B #$09                                ;;8AEF|8AEF+8AEF/8AEF\8AEF; \ Sprite status = Stunned 
                      STA.W !SpriteStatus,X                     ;;8AF1|8AF1+8AF1/8AF1\8AF1; / 
                      LDA.B #$40                                ;;8AF4|8AF4+8AF4/8AF4\8AF4; \ Time until explosion = #$40 
                      STA.W !SpriteMisc1540,X                   ;;8AF6|8AF6+8AF6/8AF6\8AF6; / 
                      JMP SubSprGfx2Entry1                      ;;8AF9|8AF9+8AF9/8AF9\8AF9; Draw sprite 
                                                                ;;                        ;
Spr0to13Start:        LDA.B !SpriteLock                         ;;8AFC|8AFC+8AFC/8AFC\8AFC; \ If sprites locked... 
                      BEQ Spr0to13Main                          ;;8AFE|8AFE+8AFE/8AFE\8AFE;  | 
CODE_018B00:          JSR MarioSprInteractRt                    ;;8B00|8B00+8B00/8B00\8B00;  | ...interact with Mario 
CODE_018B03:          JSR SubSprSprInteract                     ;;8B03|8B03+8B03/8B03\8B03;  | ...interact with sprites 
                      JSR Spr0to13Gfx                           ;;8B06|8B06+8B06/8B06\8B06;  | ...draw sprite 
                      RTS                                       ;;8B09|8B09+8B09/8B09\8B09; / Return 
                                                                ;;                        ;
Spr0to13Main:         JSR IsOnGround                            ;;8B0A|8B0A+8B0A/8B0A\8B0A; \ If sprite on ground... 
                      BEQ CODE_018B2E                           ;;8B0D|8B0D+8B0D/8B0D\8B0D;  | 
                      LDY.B !SpriteNumber,X                     ;;8B0F|8B0F+8B0F/8B0F\8B0F;  | 
                      LDA.W Spr0to13Prop,Y                      ;;8B11|8B11+8B11/8B11\8B11;  | Set sprite X speed 
                      LSR A                                     ;;8B14|8B14+8B14/8B14\8B14;  | 
                      LDY.W !SpriteMisc157C,X                   ;;8B15|8B15+8B15/8B15\8B15;  | 
                      BCC +                                     ;;8B18|8B18+8B18/8B18\8B18;  | 
                      INY                                       ;;8B1A|8B1A+8B1A/8B1A\8B1A;  | Increase index if sprite set to go fast 
                      INY                                       ;;8B1B|8B1B+8B1B/8B1B\8B1B;  | 
                    + LDA.W Spr0to13SpeedX,Y                    ;;8B1C|8B1C+8B1C/8B1C\8B1C;  | 
                      EOR.W !SpriteSlope,X                      ;;8B1F|8B1F+8B1F/8B1F\8B1F;  | what does $15B8,x do? 
                      ASL A                                     ;;8B22|8B22+8B22/8B22\8B22;  | 
                      LDA.W Spr0to13SpeedX,Y                    ;;8B23|8B23+8B23/8B23\8B23;  | 
                      BCC +                                     ;;8B26|8B26+8B26/8B26\8B26;  | 
                      CLC                                       ;;8B28|8B28+8B28/8B28\8B28;  | 
                      ADC.W !SpriteSlope,X                      ;;8B29|8B29+8B29/8B29\8B29;  | 
                    + STA.B !SpriteXSpeed,X                     ;;8B2C|8B2C+8B2C/8B2C\8B2C; / 
CODE_018B2E:          LDY.W !SpriteMisc157C,X                   ;;8B2E|8B2E+8B2E/8B2E\8B2E; \ If touching an object in the direction 
                      TYA                                       ;;8B31|8B31+8B31/8B31\8B31;  | that Mario is moving... 
                      INC A                                     ;;8B32|8B32+8B32/8B32\8B32;  | 
                      AND.W !SpriteBlockedDirs,X                ;;8B33|8B33+8B33/8B33\8B33;  | 
                      AND.B #$03                                ;;8B36|8B36+8B36/8B36\8B36;  | 
                      BEQ +                                     ;;8B38|8B38+8B38/8B38\8B38;  | 
                      STZ.B !SpriteXSpeed,X                     ;;8B3A|8B3A+8B3A/8B3A\8B3A; / ...Sprite X Speed = 0 
                    + JSR IsTouchingCeiling                     ;;8B3C|8B3C+8B3C/8B3C\8B3C; \ If touching ceiling... 
                      BEQ CODE_018B43                           ;;8B3F|8B3F+8B3F/8B3F\8B3F;  | 
                      STZ.B !SpriteYSpeed,X                     ;;8B41|8B41+8B41/8B41\8B41; / ...Sprite Y Speed = 0 
CODE_018B43:          JSR SubOffscreen0Bnk1                     ;;8B43|8B43+8B43/8B43\8B43;
                      JSR SubUpdateSprPos                       ;;8B46|8B46+8B46/8B46\8B46; Apply speed to position 
                      JSR SetAnimationFrame                     ;;8B49|8B49+8B49/8B49\8B49; Set the animation frame 
                      JSR IsOnGround                            ;;8B4C|8B4C+8B4C/8B4C\8B4C; \ Branch if not on ground 
                      BEQ SpriteInAir                           ;;8B4F|8B4F+8B4F/8B4F\8B4F; / 
                      JSR SetSomeYSpeed__                       ;;8B51|8B51+8B51/8B51\8B51;
                      STZ.W !SpriteMisc151C,X                   ;;8B54|8B54+8B54/8B54\8B54;
                      LDY.B !SpriteNumber,X                     ;;8B57|8B57+8B57/8B57\8B57; \ 
                      LDA.W Spr0to13Prop,Y                      ;;8B59|8B59+8B59/8B59\8B59;  | If follow Mario is set... 
                      PHA                                       ;;8B5C|8B5C+8B5C/8B5C\8B5C;  | 
                      AND.B #$04                                ;;8B5D|8B5D+8B5D/8B5D\8B5D;  | 
                      BEQ +                                     ;;8B5F|8B5F+8B5F/8B5F\8B5F;  | 
                      LDA.W !SpriteMisc1570,X                   ;;8B61|8B61+8B61/8B61\8B61;  | ...and time until turn == 0... 
                      AND.B #$7F                                ;;8B64|8B64+8B64/8B64\8B64;  | 
                      BNE +                                     ;;8B66|8B66+8B66/8B66\8B66;  | 
                      LDA.W !SpriteMisc157C,X                   ;;8B68|8B68+8B68/8B68\8B68;  | 
                      PHA                                       ;;8B6B|8B6B+8B6B/8B6B\8B6B;  | 
                      JSR FaceMario                             ;;8B6C|8B6C+8B6C/8B6C\8B6C;  | ...face Mario 
                      PLA                                       ;;8B6F|8B6F+8B6F/8B6F\8B6F;  | If was facing the other direction... 
                      CMP.W !SpriteMisc157C,X                   ;;8B70|8B70+8B70/8B70\8B70;  | 
                      BEQ +                                     ;;8B73|8B73+8B73/8B73\8B73;  | 
                      LDA.B #$08                                ;;8B75|8B75+8B75/8B75\8B75;  | ...set turning timer 
                      STA.W !SpriteMisc15AC,X                   ;;8B77|8B77+8B77/8B77\8B77; / 
                    + PLA                                       ;;8B7A|8B7A+8B7A/8B7A\8B7A; \ If jump over shells is set call routine 
                      AND.B #$08                                ;;8B7B|8B7B+8B7B/8B7B\8B7B;  | 
                      BEQ +                                     ;;8B7D|8B7D+8B7D/8B7D\8B7D;  | 
                      JSR JumpOverShells                        ;;8B7F|8B7F+8B7F/8B7F\8B7F;  | 
                    + BRA CODE_018BB0                           ;;8B82|8B82+8B82/8B82\8B82; / 
                                                                ;;                        ;
SpriteInAir:          LDY.B !SpriteNumber,X                     ;;8B84|8B84+8B84/8B84\8B84;
                      LDA.W Spr0to13Prop,Y                      ;;8B86|8B86+8B86/8B86\8B86; \ If flutter wings is set... 
                      BPL CODE_018B90                           ;;8B89|8B89+8B89/8B89\8B89;  | 
                      JSR SetAnimationFrame                     ;;8B8B|8B8B+8B8B/8B8B\8B8B;  | ...set frame... 
                      BRA +                                     ;;8B8E|8B8E+8B8E/8B8E\8B8E;  | ...and don't zero out $1570,x 
                                                                ;;                        ;
CODE_018B90:          STZ.W !SpriteMisc1570,X                   ;;8B90|8B90+8B90/8B90\8B90; / 
                    + LDA.W Spr0to13Prop,Y                      ;;8B93|8B93+8B93/8B93\8B93; \ If stay on ledges is set... 
                      AND.B #$02                                ;;8B96|8B96+8B96/8B96\8B96;  | 
                      BEQ CODE_018BB0                           ;;8B98|8B98+8B98/8B98\8B98;  | 
                      LDA.W !SpriteMisc151C,X                   ;;8B9A|8B9A+8B9A/8B9A\8B9A;  | todo: what are all these? 
                      ORA.W !SpriteMisc1558,X                   ;;8B9D|8B9D+8B9D/8B9D\8B9D;  | 
                      ORA.W !SpriteMisc1528,X                   ;;8BA0|8BA0+8BA0/8BA0\8BA0;  | 
                      ORA.W !SpriteMisc1534,X                   ;;8BA3|8BA3+8BA3/8BA3\8BA3;  | 
                      BNE CODE_018BB0                           ;;8BA6|8BA6+8BA6/8BA6\8BA6;  | 
                      JSR FlipSpriteDir                         ;;8BA8|8BA8+8BA8/8BA8\8BA8;  | ...change sprite direction 
                      LDA.B #$01                                ;;8BAB|8BAB+8BAB/8BAB\8BAB;  | 
                      STA.W !SpriteMisc151C,X                   ;;8BAD|8BAD+8BAD/8BAD\8BAD; / 
CODE_018BB0:          LDA.W !SpriteMisc1528,X                   ;;8BB0|8BB0+8BB0/8BB0\8BB0;
                      BEQ CODE_018BBA                           ;;8BB3|8BB3+8BB3/8BB3\8BB3;
                      JSR CODE_018931                           ;;8BB5|8BB5+8BB5/8BB5\8BB5;
                      BRA +                                     ;;8BB8|8BB8+8BB8/8BB8\8BB8;
                                                                ;;                        ;
CODE_018BBA:          JSR MarioSprInteractRt                    ;;8BBA|8BBA+8BBA/8BBA\8BBA; Interact with Mario 
                    + JSR SubSprSprInteract                     ;;8BBD|8BBD+8BBD/8BBD\8BBD; Interact with other sprites 
                      JSR FlipIfTouchingObj                     ;;8BC0|8BC0+8BC0/8BC0\8BC0; Change direction if touching an object 
Spr0to13Gfx:          LDA.W !SpriteMisc157C,X                   ;;8BC3|8BC3+8BC3/8BC3\8BC3; \ Store sprite direction 
                      PHA                                       ;;8BC6|8BC6+8BC6/8BC6\8BC6; / 
                      LDY.W !SpriteMisc15AC,X                   ;;8BC7|8BC7+8BC7/8BC7\8BC7; \ If turning timer is set... 
                      BEQ CODE_018BDE                           ;;8BCA|8BCA+8BCA/8BCA\8BCA;  | 
                      LDA.B #$02                                ;;8BCC|8BCC+8BCC/8BCC\8BCC;  | ...set turning image 
                      STA.W !SpriteMisc1602,X                   ;;8BCE|8BCE+8BCE/8BCE\8BCE;  | 
                      LDA.B #$00                                ;;8BD1|8BD1+8BD1/8BD1\8BD1;  | 
                      CPY.B #$05                                ;;8BD3|8BD3+8BD3/8BD3\8BD3;  | If turning timer >= 5... 
                      BCC +                                     ;;8BD5|8BD5+8BD5/8BD5\8BD5;  | 
                      INC A                                     ;;8BD7|8BD7+8BD7/8BD7\8BD7;  | ...flip sprite direction (temporarily) 
                    + EOR.W !SpriteMisc157C,X                   ;;8BD8|8BD8+8BD8/8BD8\8BD8;  | 
                      STA.W !SpriteMisc157C,X                   ;;8BDB|8BDB+8BDB/8BDB\8BDB; / 
CODE_018BDE:          LDY.B !SpriteNumber,X                     ;;8BDE|8BDE+8BDE/8BDE\8BDE; \ Branch if sprite is 2 tiles high 
                      LDA.W Spr0to13Prop,Y                      ;;8BE0|8BE0+8BE0/8BE0\8BE0;  | 
                      AND.B #$40                                ;;8BE3|8BE3+8BE3/8BE3\8BE3;  | 
                      BNE CODE_018BEC                           ;;8BE5|8BE5+8BE5/8BE5\8BE5; / 
                      JSR SubSprGfx2Entry1                      ;;8BE7|8BE7+8BE7/8BE7\8BE7; \ Draw 1 tile high sprite and return 
                      BRA +                                     ;;8BEA|8BEA+8BEA/8BEA\8BEA; / 
                                                                ;;                        ;
CODE_018BEC:          LDA.W !SpriteMisc1602,X                   ;;8BEC|8BEC+8BEC/8BEC\8BEC; \ Nothing? 
                      LSR A                                     ;;8BEF|8BEF+8BEF/8BEF\8BEF; / 
                      LDA.B !SpriteYPosLow,X                    ;;8BF0|8BF0+8BF0/8BF0\8BF0; \ Y position -= #$0F (temporarily) 
                      PHA                                       ;;8BF2|8BF2+8BF2/8BF2\8BF2;  | 
                      SBC.B #$0F                                ;;8BF3|8BF3+8BF3/8BF3\8BF3;  | 
                      STA.B !SpriteYPosLow,X                    ;;8BF5|8BF5+8BF5/8BF5\8BF5;  | 
                      LDA.W !SpriteXPosHigh,X                   ;;8BF7|8BF7+8BF7/8BF7\8BF7;  | 
                      PHA                                       ;;8BFA|8BFA+8BFA/8BFA\8BFA;  | 
                      SBC.B #$00                                ;;8BFB|8BFB+8BFB/8BFB\8BFB;  | 
                      STA.W !SpriteXPosHigh,X                   ;;8BFD|8BFD+8BFD/8BFD\8BFD; / 
                      JSR SubSprGfx1                            ;;8C00|8C00+8C00/8C00\8C00; Draw sprite 
                      PLA                                       ;;8C03|8C03+8C03/8C03\8C03; \ Restore Y position 
                      STA.W !SpriteXPosHigh,X                   ;;8C04|8C04+8C04/8C04\8C04;  | 
                      PLA                                       ;;8C07|8C07+8C07/8C07\8C07;  | 
                      STA.B !SpriteYPosLow,X                    ;;8C08|8C08+8C08/8C08\8C08; / 
                      LDA.B !SpriteNumber,X                     ;;8C0A|8C0A+8C0A/8C0A\8C0A; \ Add wings if sprite number > #$08 
                      CMP.B #$08                                ;;8C0C|8C0C+8C0C/8C0C\8C0C;  | 
                      BCC +                                     ;;8C0E|8C0E+8C0E/8C0E\8C0E;  | 
                      JSR KoopaWingGfxRt                        ;;8C10|8C10+8C10/8C10\8C10; / 
                    + PLA                                       ;;8C13|8C13+8C13/8C13\8C13; \ Restore sprite direction 
                      STA.W !SpriteMisc157C,X                   ;;8C14|8C14+8C14/8C14\8C14; / 
                      RTS                                       ;;8C17|8C17+8C17/8C17\8C17; Return 
                                                                ;;                        ;
SpinyEgg:             LDA.B !SpriteLock                         ;;8C18|8C18+8C18/8C18\8C18; \ Branch if sprites locked 
                      BNE CODE_018C44                           ;;8C1A|8C1A+8C1A/8C1A\8C1A; / 
                      LDA.W !SpriteStatus,X                     ;;8C1C|8C1C+8C1C/8C1C\8C1C;
                      CMP.B #$08                                ;;8C1F|8C1F+8C1F/8C1F\8C1F;
                      BNE CODE_018C44                           ;;8C21|8C21+8C21/8C21\8C21;
                      JSR SetAnimationFrame                     ;;8C23|8C23+8C23/8C23\8C23;
                      JSR SubUpdateSprPos                       ;;8C26|8C26+8C26/8C26\8C26;
                      DEC.B !SpriteYSpeed,X                     ;;8C29|8C29+8C29/8C29\8C29;
                      JSR IsOnGround                            ;;8C2B|8C2B+8C2B/8C2B\8C2B;
                      BEQ +                                     ;;8C2E|8C2E+8C2E/8C2E\8C2E;
                      LDA.B #$13                                ;;8C30|8C30+8C30/8C30\8C30; \ Sprite = Spiny 
                      STA.B !SpriteNumber,X                     ;;8C32|8C32+8C32/8C32\8C32; / 
                      JSL InitSpriteTables                      ;;8C34|8C34+8C34/8C34\8C34; Reset sprite tables 
                      JSR FaceMario                             ;;8C38|8C38+8C38/8C38\8C38;
                      JSR CODE_0197D5                           ;;8C3B|8C3B+8C3B/8C3B\8C3B;
                    + JSR FlipIfTouchingObj                     ;;8C3E|8C3E+8C3E/8C3E\8C3E;
                      JSR SubSprSpr_MarioSpr                    ;;8C41|8C41+8C41/8C41\8C41;
CODE_018C44:          JSR SubOffscreen0Bnk1                     ;;8C44|8C44+8C44/8C44\8C44;
                      LDA.B #$02                                ;;8C47|8C47+8C47/8C47\8C47;
                      JSR SubSprGfx0Entry0                      ;;8C49|8C49+8C49/8C49\8C49;
                      RTS                                       ;;8C4C|8C4C+8C4C/8C4C\8C4C; Return 
                                                                ;;                        ;
GreenParaKoopa:       LDA.B !SpriteLock                         ;;8C4D|8C4D+8C4D/8C4D\8C4D; \ Branch if sprites locked 
                      BNE CODE_018CB7                           ;;8C4F|8C4F+8C4F/8C4F\8C4F; / 
                      LDY.W !SpriteMisc157C,X                   ;;8C51|8C51+8C51/8C51\8C51;
                      LDA.W Spr0to13SpeedX,Y                    ;;8C54|8C54+8C54/8C54\8C54;
                      EOR.W !SpriteSlope,X                      ;;8C57|8C57+8C57/8C57\8C57;
                      ASL A                                     ;;8C5A|8C5A+8C5A/8C5A\8C5A;
                      LDA.W Spr0to13SpeedX,Y                    ;;8C5B|8C5B+8C5B/8C5B\8C5B;
                      BCC +                                     ;;8C5E|8C5E+8C5E/8C5E\8C5E;
                      CLC                                       ;;8C60|8C60+8C60/8C60\8C60;
                      ADC.W !SpriteSlope,X                      ;;8C61|8C61+8C61/8C61\8C61;
                    + STA.B !SpriteXSpeed,X                     ;;8C64|8C64+8C64/8C64\8C64;
                      TYA                                       ;;8C66|8C66+8C66/8C66\8C66;
                      INC A                                     ;;8C67|8C67+8C67/8C67\8C67;
                      AND.W !SpriteBlockedDirs,X                ;;8C68|8C68+8C68/8C68\8C68; \ If touching object,
                      AND.B #$03                                ;;8C6B|8C6B+8C6B/8C6B\8C6B;  | 
                      BEQ +                                     ;;8C6D|8C6D+8C6D/8C6D\8C6D;  | 
                      STZ.B !SpriteXSpeed,X                     ;;8C6F|8C6F+8C6F/8C6F\8C6F; / Sprite X Speed = 0 
                    + LDA.B !SpriteNumber,X                     ;;8C71|8C71+8C71/8C71\8C71; \ If flying left Green Koopa...
                      CMP.B #$08                                ;;8C73|8C73+8C73/8C73\8C73;  |
                      BNE CODE_018C8C                           ;;8C75|8C75+8C75/8C75\8C75;  |
                      JSR SubSprXPosNoGrvty                     ;;8C77|8C77+8C77/8C77\8C77;  | Update X position
                      LDY.B #$FC                                ;;8C7A|8C7A+8C7A/8C7A\8C7A;  |
                      LDA.W !SpriteMisc1570,X                   ;;8C7C|8C7C+8C7C/8C7C\8C7C;  | Y speed = #$FC or #$04,
                      AND.B #$20                                ;;8C7F|8C7F+8C7F/8C7F\8C7F;  | depending on 1570,x
                      BEQ +                                     ;;8C81|8C81+8C81/8C81\8C81;  | 
                      LDY.B #$04                                ;;8C83|8C83+8C83/8C83\8C83;  |
                    + STY.B !SpriteYSpeed,X                     ;;8C85|8C85+8C85/8C85\8C85;  |
                      JSR SubSprYPosNoGrvty                     ;;8C87|8C87+8C87/8C87\8C87; / Update Y position
                      BRA +                                     ;;8C8A|8C8A+8C8A/8C8A\8C8A;
                                                                ;;                        ;
CODE_018C8C:          JSR SubUpdateSprPos                       ;;8C8C|8C8C+8C8C/8C8C\8C8C;
                      DEC.B !SpriteYSpeed,X                     ;;8C8F|8C8F+8C8F/8C8F\8C8F;
                    + JSR SubSprSpr_MarioSpr                    ;;8C91|8C91+8C91/8C91\8C91;
                      JSR IsTouchingCeiling                     ;;8C94|8C94+8C94/8C94\8C94;
                      BEQ +                                     ;;8C97|8C97+8C97/8C97\8C97;
                      STZ.B !SpriteYSpeed,X                     ;;8C99|8C99+8C99/8C99\8C99; Sprite Y Speed = 0 
                    + JSR IsOnGround                            ;;8C9B|8C9B+8C9B/8C9B\8C9B;
                      BEQ CODE_018CAE                           ;;8C9E|8C9E+8C9E/8C9E\8C9E;
                      JSR SetSomeYSpeed__                       ;;8CA0|8CA0+8CA0/8CA0\8CA0;
                      LDA.B #$D0                                ;;8CA3|8CA3+8CA3/8CA3\8CA3;
                      LDY.W !SpriteMisc160E,X                   ;;8CA5|8CA5+8CA5/8CA5\8CA5;
                      BNE +                                     ;;8CA8|8CA8+8CA8/8CA8\8CA8;
                      LDA.B #$B0                                ;;8CAA|8CAA+8CAA/8CAA\8CAA;
                    + STA.B !SpriteYSpeed,X                     ;;8CAC|8CAC+8CAC/8CAC\8CAC;
CODE_018CAE:          JSR FlipIfTouchingObj                     ;;8CAE|8CAE+8CAE/8CAE\8CAE;
                      JSR SetAnimationFrame                     ;;8CB1|8CB1+8CB1/8CB1\8CB1;
                      JSR SubOffscreen0Bnk1                     ;;8CB4|8CB4+8CB4/8CB4\8CB4;
CODE_018CB7:          JMP Spr0to13Gfx                           ;;8CB7|8CB7+8CB7/8CB7\8CB7;
                                                                ;;                        ;
                                                                ;;                        ;
DATA_018CBA:          db $FF,$01                                ;;8CBA|8CBA+8CBA/8CBA\8CBA;
                                                                ;;                        ;
DATA_018CBC:          db $F0,$10                                ;;8CBC|8CBC+8CBC/8CBC\8CBC;
                                                                ;;                        ;
RedHorzParaKoopa:     JSR SubOffscreen1Bnk1                     ;;8CBE|8CBE+8CBE/8CBE\8CBE;
                      BRA +                                     ;;8CC1|8CC1+8CC1/8CC1\8CC1;
                                                                ;;                        ;
RedVertParaKoopa:     JSR SubOffscreen0Bnk1                     ;;8CC3|8CC3+8CC3/8CC3\8CC3;
                    + LDA.B !SpriteLock                         ;;8CC6|8CC6+8CC6/8CC6\8CC6; \ Branch if sprites locked 
                      BNE CODE_018D2A                           ;;8CC8|8CC8+8CC8/8CC8\8CC8; / 
                      LDA.W !SpriteMisc157C,X                   ;;8CCA|8CCA+8CCA/8CCA\8CCA;
                      PHA                                       ;;8CCD|8CCD+8CCD/8CCD\8CCD;
                      JSR UpdateDirection                       ;;8CCE|8CCE+8CCE/8CCE\8CCE;
                      PLA                                       ;;8CD1|8CD1+8CD1/8CD1\8CD1;
                      CMP.W !SpriteMisc157C,X                   ;;8CD2|8CD2+8CD2/8CD2\8CD2;
                      BEQ +                                     ;;8CD5|8CD5+8CD5/8CD5\8CD5;
                      LDA.B #$08                                ;;8CD7|8CD7+8CD7/8CD7\8CD7; \ Set turning timer 
                      STA.W !SpriteMisc15AC,X                   ;;8CD9|8CD9+8CD9/8CD9\8CD9; / 
                    + JSR SetAnimationFrame                     ;;8CDC|8CDC+8CDC/8CDC\8CDC;
                      LDA.B !SpriteNumber,X                     ;;8CDF|8CDF+8CDF/8CDF\8CDF;
                      CMP.B #$0A                                ;;8CE1|8CE1+8CE1/8CE1\8CE1;
                      BNE CODE_018CEA                           ;;8CE3|8CE3+8CE3/8CE3\8CE3;
                      JSR SubSprYPosNoGrvty                     ;;8CE5|8CE5+8CE5/8CE5\8CE5;
                      BRA CODE_018CFD                           ;;8CE8|8CE8+8CE8/8CE8\8CE8;
                                                                ;;                        ;
CODE_018CEA:          LDY.B #$FC                                ;;8CEA|8CEA+8CEA/8CEA\8CEA;
                      LDA.W !SpriteMisc1570,X                   ;;8CEC|8CEC+8CEC/8CEC\8CEC;
                      AND.B #$20                                ;;8CEF|8CEF+8CEF/8CEF\8CEF;
                      BEQ +                                     ;;8CF1|8CF1+8CF1/8CF1\8CF1;
                      LDY.B #$04                                ;;8CF3|8CF3+8CF3/8CF3\8CF3;
                    + STY.B !SpriteYSpeed,X                     ;;8CF5|8CF5+8CF5/8CF5\8CF5;
                      JSR SubSprYPosNoGrvty                     ;;8CF7|8CF7+8CF7/8CF7\8CF7;
                      JSR SubSprXPosNoGrvty                     ;;8CFA|8CFA+8CFA/8CFA\8CFA;
CODE_018CFD:          LDA.W !SpriteMisc1540,X                   ;;8CFD|8CFD+8CFD/8CFD\8CFD;
                      BNE +                                     ;;8D00|8D00+8D00/8D00\8D00;
                      INC.B !SpriteTableC2,X                    ;;8D02|8D02+8D02/8D02\8D02;
                      LDA.B !SpriteTableC2,X                    ;;8D04|8D04+8D04/8D04\8D04;
                      AND.B #$03                                ;;8D06|8D06+8D06/8D06\8D06;
                      BNE +                                     ;;8D08|8D08+8D08/8D08\8D08;
                      LDA.W !SpriteMisc151C,X                   ;;8D0A|8D0A+8D0A/8D0A\8D0A;
                      AND.B #$01                                ;;8D0D|8D0D+8D0D/8D0D\8D0D;
                      TAY                                       ;;8D0F|8D0F+8D0F/8D0F\8D0F;
                      LDA.B !SpriteXSpeed,X                     ;;8D10|8D10+8D10/8D10\8D10;
                      CLC                                       ;;8D12|8D12+8D12/8D12\8D12;
                      ADC.W DATA_018CBA,Y                       ;;8D13|8D13+8D13/8D13\8D13;
                      STA.B !SpriteYSpeed,X                     ;;8D16|8D16+8D16/8D16\8D16;
                      STA.B !SpriteXSpeed,X                     ;;8D18|8D18+8D18/8D18\8D18;
                      CMP.W DATA_018CBC,Y                       ;;8D1A|8D1A+8D1A/8D1A\8D1A;
                      BNE +                                     ;;8D1D|8D1D+8D1D/8D1D\8D1D;
                      INC.W !SpriteMisc151C,X                   ;;8D1F|8D1F+8D1F/8D1F\8D1F;
                      LDA.B #$30                                ;;8D22|8D22+8D22/8D22\8D22;
                      STA.W !SpriteMisc1540,X                   ;;8D24|8D24+8D24/8D24\8D24;
                    + JSR SubSprSpr_MarioSpr                    ;;8D27|8D27+8D27/8D27\8D27;
CODE_018D2A:          JSR CODE_018CB7                           ;;8D2A|8D2A+8D2A/8D2A\8D2A;
                      RTS                                       ;;8D2D|8D2D+8D2D/8D2D\8D2D; Return 
                                                                ;;                        ;
WingedGoomba:         JSR SubOffscreen0Bnk1                     ;;8D2E|8D2E+8D2E/8D2E\8D2E;
                      LDA.B !SpriteLock                         ;;8D31|8D31+8D31/8D31\8D31;
                      BEQ +                                     ;;8D33|8D33+8D33/8D33\8D33;
                      JSR CODE_018DAC                           ;;8D35|8D35+8D35/8D35\8D35;
                      RTS                                       ;;8D38|8D38+8D38/8D38\8D38; Return 
                                                                ;;                        ;
                    + JSR CODE_018DBB                           ;;8D39|8D39+8D39/8D39\8D39;
                      JSR SubUpdateSprPos                       ;;8D3C|8D3C+8D3C/8D3C\8D3C;
                      DEC.B !SpriteYSpeed,X                     ;;8D3F|8D3F+8D3F/8D3F\8D3F;
                      LDA.B !SpriteTableC2,X                    ;;8D41|8D41+8D41/8D41\8D41;
                      LSR A                                     ;;8D43|8D43+8D43/8D43\8D43;
                      LSR A                                     ;;8D44|8D44+8D44/8D44\8D44;
                      LSR A                                     ;;8D45|8D45+8D45/8D45\8D45;
                      AND.B #$01                                ;;8D46|8D46+8D46/8D46\8D46;
                      STA.W !SpriteMisc1602,X                   ;;8D48|8D48+8D48/8D48\8D48;
                      JSR CODE_018DAC                           ;;8D4B|8D4B+8D4B/8D4B\8D4B;
                      INC.B !SpriteTableC2,X                    ;;8D4E|8D4E+8D4E/8D4E\8D4E;
                      LDA.W !SpriteMisc151C,X                   ;;8D50|8D50+8D50/8D50\8D50;
                      BNE +                                     ;;8D53|8D53+8D53/8D53\8D53;
                      LDA.B !SpriteYSpeed,X                     ;;8D55|8D55+8D55/8D55\8D55;
                      BPL +                                     ;;8D57|8D57+8D57/8D57\8D57;
                      INC.W !SpriteMisc1570,X                   ;;8D59|8D59+8D59/8D59\8D59;
                      INC.W !SpriteMisc1570,X                   ;;8D5C|8D5C+8D5C/8D5C\8D5C;
                    + INC.W !SpriteMisc1570,X                   ;;8D5F|8D5F+8D5F/8D5F\8D5F;
                      JSR IsTouchingCeiling                     ;;8D62|8D62+8D62/8D62\8D62;
                      BEQ +                                     ;;8D65|8D65+8D65/8D65\8D65;
                      STZ.B !SpriteYSpeed,X                     ;;8D67|8D67+8D67/8D67\8D67; Sprite Y Speed = 0 
                    + JSR IsOnGround                            ;;8D69|8D69+8D69/8D69\8D69;
                      BEQ CODE_018DA5                           ;;8D6C|8D6C+8D6C/8D6C\8D6C;
                      LDA.B !SpriteTableC2,X                    ;;8D6E|8D6E+8D6E/8D6E\8D6E;
                      AND.B #$3F                                ;;8D70|8D70+8D70/8D70\8D70;
                      BNE +                                     ;;8D72|8D72+8D72/8D72\8D72;
                      JSR FaceMario                             ;;8D74|8D74+8D74/8D74\8D74;
                    + JSR SetSomeYSpeed__                       ;;8D77|8D77+8D77/8D77\8D77;
                      LDA.W !SpriteMisc151C,X                   ;;8D7A|8D7A+8D7A/8D7A\8D7A;
                      BNE +                                     ;;8D7D|8D7D+8D7D/8D7D\8D7D;
                      STZ.W !SpriteMisc1570,X                   ;;8D7F|8D7F+8D7F/8D7F\8D7F;
                    + LDA.W !SpriteMisc1540,X                   ;;8D82|8D82+8D82/8D82\8D82;
                      BNE CODE_018DA5                           ;;8D85|8D85+8D85/8D85\8D85;
                      INC.W !SpriteMisc151C,X                   ;;8D87|8D87+8D87/8D87\8D87;
                      LDY.B #$F0                                ;;8D8A|8D8A+8D8A/8D8A\8D8A;
                      LDA.W !SpriteMisc151C,X                   ;;8D8C|8D8C+8D8C/8D8C\8D8C;
                      CMP.B #$04                                ;;8D8F|8D8F+8D8F/8D8F\8D8F;
                      BNE +                                     ;;8D91|8D91+8D91/8D91\8D91;
                      STZ.W !SpriteMisc151C,X                   ;;8D93|8D93+8D93/8D93\8D93;
                      JSL GetRand                               ;;8D96|8D96+8D96/8D96\8D96;
                      AND.B #$3F                                ;;8D9A|8D9A+8D9A/8D9A\8D9A;
                      ORA.B #$50                                ;;8D9C|8D9C+8D9C/8D9C\8D9C;
                      STA.W !SpriteMisc1540,X                   ;;8D9E|8D9E+8D9E/8D9E\8D9E;
                      LDY.B #$D0                                ;;8DA1|8DA1+8DA1/8DA1\8DA1;
                    + STY.B !SpriteYSpeed,X                     ;;8DA3|8DA3+8DA3/8DA3\8DA3;
CODE_018DA5:          JSR FlipIfTouchingObj                     ;;8DA5|8DA5+8DA5/8DA5\8DA5;
                      JSR SubSprSpr_MarioSpr                    ;;8DA8|8DA8+8DA8/8DA8\8DA8;
                      RTS                                       ;;8DAB|8DAB+8DAB/8DAB\8DAB; Return 
                                                                ;;                        ;
CODE_018DAC:          JSR GoombaWingGfxRt                       ;;8DAC|8DAC+8DAC/8DAC\8DAC;
                      LDA.W !SpriteOAMIndex,X                   ;;8DAF|8DAF+8DAF/8DAF\8DAF;
                      CLC                                       ;;8DB2|8DB2+8DB2/8DB2\8DB2;
                      ADC.B #$04                                ;;8DB3|8DB3+8DB3/8DB3\8DB3;
                      STA.W !SpriteOAMIndex,X                   ;;8DB5|8DB5+8DB5/8DB5\8DB5;
                      JMP SubSprGfx2Entry1                      ;;8DB8|8DB8+8DB8/8DB8\8DB8;
                                                                ;;                        ;
CODE_018DBB:          LDA.B #$F8                                ;;8DBB|8DBB+8DBB/8DBB\8DBB;
                      LDY.W !SpriteMisc157C,X                   ;;8DBD|8DBD+8DBD/8DBD\8DBD;
                      BNE +                                     ;;8DC0|8DC0+8DC0/8DC0\8DC0;
                      LDA.B #$08                                ;;8DC2|8DC2+8DC2/8DC2\8DC2;
                    + STA.B !SpriteXSpeed,X                     ;;8DC4|8DC4+8DC4/8DC4\8DC4;
                      RTS                                       ;;8DC6|8DC6+8DC6/8DC6\8DC6; Return 
                                                                ;;                        ;
                                                                ;;                        ;
DATA_018DC7:          db $F7,$0B,$F6,$0D,$FD,$0C,$FC,$0D        ;;8DC7|8DC7+8DC7/8DC7\8DC7;
                      db $0B,$F5,$0A,$F3,$0B,$FC,$0C,$FB        ;;8DCF|8DCF+8DCF/8DCF\8DCF;
DATA_018DD7:          db $F7,$F7,$F8,$F8,$01,$01,$02,$02        ;;8DD7|8DD7+8DD7/8DD7\8DD7;
GoombaWingGfxProp:    db $46,$06                                ;;8DDF|8DDF+8DDF/8DDF\8DDF;
                                                                ;;                        ;
GoombaWingTiles:      db $C6,$C6,$5D,$5D                        ;;8DE1|8DE1+8DE1/8DE1\8DE1;
                                                                ;;                        ;
GoombaWingTileSize:   db $02,$02,$00,$00                        ;;8DE5|8DE5+8DE5/8DE5\8DE5;
                                                                ;;                        ;
GoombaWingGfxRt:      JSR GetDrawInfoBnk1                       ;;8DE9|8DE9+8DE9/8DE9\8DE9;
                      LDA.W !SpriteMisc1570,X                   ;;8DEC|8DEC+8DEC/8DEC\8DEC;
                      LSR A                                     ;;8DEF|8DEF+8DEF/8DEF\8DEF;
                      LSR A                                     ;;8DF0|8DF0+8DF0/8DF0\8DF0;
                      AND.B #$02                                ;;8DF1|8DF1+8DF1/8DF1\8DF1;
                      CLC                                       ;;8DF3|8DF3+8DF3/8DF3\8DF3;
                      ADC.W !SpriteMisc1602,X                   ;;8DF4|8DF4+8DF4/8DF4\8DF4;
                      STA.B !_5                                 ;;8DF7|8DF7+8DF7/8DF7\8DF7;
                      ASL A                                     ;;8DF9|8DF9+8DF9/8DF9\8DF9;
                      STA.B !_2                                 ;;8DFA|8DFA+8DFA/8DFA\8DFA;
                      LDA.W !SpriteMisc157C,X                   ;;8DFC|8DFC+8DFC/8DFC\8DFC;
                      STA.B !_4                                 ;;8DFF|8DFF+8DFF/8DFF\8DFF;
                      LDY.W !SpriteOAMIndex,X                   ;;8E01|8E01+8E01/8E01\8E01; Y = Index into sprite OAM 
                      PHX                                       ;;8E04|8E04+8E04/8E04\8E04;
                      LDX.B #$01                                ;;8E05|8E05+8E05/8E05\8E05;
CODE_018E07:          STX.B !_3                                 ;;8E07|8E07+8E07/8E07\8E07;
                      TXA                                       ;;8E09|8E09+8E09/8E09\8E09;
                      CLC                                       ;;8E0A|8E0A+8E0A/8E0A\8E0A;
                      ADC.B !_2                                 ;;8E0B|8E0B+8E0B/8E0B\8E0B;
                      PHA                                       ;;8E0D|8E0D+8E0D/8E0D\8E0D;
                      LDX.B !_4                                 ;;8E0E|8E0E+8E0E/8E0E\8E0E;
                      BNE +                                     ;;8E10|8E10+8E10/8E10\8E10;
                      CLC                                       ;;8E12|8E12+8E12/8E12\8E12;
                      ADC.B #$08                                ;;8E13|8E13+8E13/8E13\8E13;
                    + TAX                                       ;;8E15|8E15+8E15/8E15\8E15;
                      LDA.B !_0                                 ;;8E16|8E16+8E16/8E16\8E16;
                      CLC                                       ;;8E18|8E18+8E18/8E18\8E18;
                      ADC.W DATA_018DC7,X                       ;;8E19|8E19+8E19/8E19\8E19;
                      STA.W !OAMTileXPos+$100,Y                 ;;8E1C|8E1C+8E1C/8E1C\8E1C;
                      PLX                                       ;;8E1F|8E1F+8E1F/8E1F\8E1F;
                      LDA.B !_1                                 ;;8E20|8E20+8E20/8E20\8E20;
                      CLC                                       ;;8E22|8E22+8E22/8E22\8E22;
                      ADC.W DATA_018DD7,X                       ;;8E23|8E23+8E23/8E23\8E23;
                      STA.W !OAMTileYPos+$100,Y                 ;;8E26|8E26+8E26/8E26\8E26;
                      LDX.B !_5                                 ;;8E29|8E29+8E29/8E29\8E29;
                      LDA.W GoombaWingTiles,X                   ;;8E2B|8E2B+8E2B/8E2B\8E2B;
                      STA.W !OAMTileNo+$100,Y                   ;;8E2E|8E2E+8E2E/8E2E\8E2E;
                      PHY                                       ;;8E31|8E31+8E31/8E31\8E31;
                      TYA                                       ;;8E32|8E32+8E32/8E32\8E32;
                      LSR A                                     ;;8E33|8E33+8E33/8E33\8E33;
                      LSR A                                     ;;8E34|8E34+8E34/8E34\8E34;
                      TAY                                       ;;8E35|8E35+8E35/8E35\8E35;
                      LDA.W GoombaWingTileSize,X                ;;8E36|8E36+8E36/8E36\8E36;
                      STA.W !OAMTileSize+$40,Y                  ;;8E39|8E39+8E39/8E39\8E39;
                      PLY                                       ;;8E3C|8E3C+8E3C/8E3C\8E3C;
                      LDX.B !_3                                 ;;8E3D|8E3D+8E3D/8E3D\8E3D;
                      LDA.B !_4                                 ;;8E3F|8E3F+8E3F/8E3F\8E3F;
                      LSR A                                     ;;8E41|8E41+8E41/8E41\8E41;
                      LDA.W GoombaWingGfxProp,X                 ;;8E42|8E42+8E42/8E42\8E42;
                      BCS +                                     ;;8E45|8E45+8E45/8E45\8E45;
                      EOR.B #$40                                ;;8E47|8E47+8E47/8E47\8E47;
                    + ORA.B !SpriteProperties                   ;;8E49|8E49+8E49/8E49\8E49;
                      STA.W !OAMTileAttr+$100,Y                 ;;8E4B|8E4B+8E4B/8E4B\8E4B;
                      TYA                                       ;;8E4E|8E4E+8E4E/8E4E\8E4E;
                      CLC                                       ;;8E4F|8E4F+8E4F/8E4F\8E4F;
                      ADC.B #$08                                ;;8E50|8E50+8E50/8E50\8E50;
                      TAY                                       ;;8E52|8E52+8E52/8E52\8E52;
                      DEX                                       ;;8E53|8E53+8E53/8E53\8E53;
                      BPL CODE_018E07                           ;;8E54|8E54+8E54/8E54\8E54;
                      PLX                                       ;;8E56|8E56+8E56/8E56\8E56;
                      LDY.B #$FF                                ;;8E57|8E57+8E57/8E57\8E57;
                      LDA.B #$02                                ;;8E59|8E59+8E59/8E59\8E59;
                      JSR FinishOAMWriteRt                      ;;8E5B|8E5B+8E5B/8E5B\8E5B;
                      RTS                                       ;;8E5E|8E5E+8E5E/8E5E\8E5E; Return 
                                                                ;;                        ;
SetAnimationFrame:    INC.W !SpriteMisc1570,X                   ;;8E5F|8E5F+8E5F/8E5F\8E5F;
                      LDA.W !SpriteMisc1570,X                   ;;8E62|8E62+8E62/8E62\8E62; \ Change animation image every 8 cycles 
                      LSR A                                     ;;8E65|8E65+8E65/8E65\8E65;  | 
                      LSR A                                     ;;8E66|8E66+8E66/8E66\8E66;  | 
                      LSR A                                     ;;8E67|8E67+8E67/8E67\8E67;  | 
                      AND.B #$01                                ;;8E68|8E68+8E68/8E68\8E68;  | 
                      STA.W !SpriteMisc1602,X                   ;;8E6A|8E6A+8E6A/8E6A\8E6A; / 
                      RTS                                       ;;8E6D|8E6D+8E6D/8E6D\8E6D; Return 
                                                                ;;                        ;
                                                                ;;                        ;
PiranhaSpeed:         db $00,$F0,$00,$10                        ;;8E6E|8E6E+8E6E/8E6E\8E6E;
                                                                ;;                        ;
PiranTimeInState:     db $20,$30,$20,$30                        ;;8E72|8E72+8E72/8E72\8E72;
                                                                ;;                        ;
ClassicPiranhas:      LDA.W !SpriteMisc1594,X                   ;;8E76|8E76+8E76/8E76\8E76; \ Don't draw the sprite if in pipe and Mario naerby 
                      BNE CODE_018E9A                           ;;8E79|8E79+8E79/8E79\8E79; / 
                      LDA.B !SpriteProperties                   ;;8E7B|8E7B+8E7B/8E7B\8E7B; \ Set sprite to go behind objects 
                      PHA                                       ;;8E7D|8E7D+8E7D/8E7D\8E7D;  | for the graphics routine 
                      LDA.W !SpriteOnYoshiTongue,X              ;;8E7E|8E7E+8E7E/8E7E\8E7E;  | 
                      BNE +                                     ;;8E81|8E81+8E81/8E81\8E81;  | 
                      LDA.B #$10                                ;;8E83|8E83+8E83/8E83\8E83;  | 
                      STA.B !SpriteProperties                   ;;8E85|8E85+8E85/8E85\8E85; / 
                    + JSR SubSprGfx1                            ;;8E87|8E87+8E87/8E87\8E87; Draw the sprite 
                      LDY.W !SpriteOAMIndex,X                   ;;8E8A|8E8A+8E8A/8E8A\8E8A; \ Modify the palette and page of the stem 
                      LDA.W !OAMTileAttr+$108,Y                 ;;8E8D|8E8D+8E8D/8E8D\8E8D;  | 
                      AND.B #$F1                                ;;8E90|8E90+8E90/8E90\8E90;  | 
                      ORA.B #$0B                                ;;8E92|8E92+8E92/8E92\8E92;  | 
                      STA.W !OAMTileAttr+$108,Y                 ;;8E94|8E94+8E94/8E94\8E94; / 
                      PLA                                       ;;8E97|8E97+8E97/8E97\8E97; \ Restore value of $64 
                      STA.B !SpriteProperties                   ;;8E98|8E98+8E98/8E98\8E98; / 
CODE_018E9A:          JSR SubOffscreen0Bnk1                     ;;8E9A|8E9A+8E9A/8E9A\8E9A;
                      LDA.B !SpriteLock                         ;;8E9D|8E9D+8E9D/8E9D\8E9D; \ Branch if sprites locked 
                      BNE Return018EC7                          ;;8E9F|8E9F+8E9F/8E9F\8E9F; / 
                      JSR SetAnimationFrame                     ;;8EA1|8EA1+8EA1/8EA1\8EA1;
                      LDA.W !SpriteMisc1594,X                   ;;8EA4|8EA4+8EA4/8EA4\8EA4; \ Don't don't process interactions if in pipe and Mario nearby 
                      BNE +                                     ;;8EA7|8EA7+8EA7/8EA7\8EA7;  | 
                      JSR SubSprSpr_MarioSpr                    ;;8EA9|8EA9+8EA9/8EA9\8EA9; / 
                    + LDA.B !SpriteTableC2,X                    ;;8EAC|8EAC+8EAC/8EAC\8EAC; \ Y = Piranha state 
                      AND.B #$03                                ;;8EAE|8EAE+8EAE/8EAE\8EAE;  | 
                      TAY                                       ;;8EB0|8EB0+8EB0/8EB0\8EB0; / 
                      LDA.W !SpriteMisc1540,X                   ;;8EB1|8EB1+8EB1/8EB1\8EB1; \ Change state if it's time 
                      BEQ ChangePiranhaState                    ;;8EB4|8EB4+8EB4/8EB4\8EB4; / 
                      LDA.W PiranhaSpeed,Y                      ;;8EB6|8EB6+8EB6/8EB6\8EB6; Load Y speed 
                      LDY.B !SpriteNumber,X                     ;;8EB9|8EB9+8EB9/8EB9\8EB9; \ Invert speed if upside-down piranha 
                      CPY.B #$2A                                ;;8EBB|8EBB+8EBB/8EBB\8EBB;  | 
                      BNE +                                     ;;8EBD|8EBD+8EBD/8EBD\8EBD;  | 
                      EOR.B #$FF                                ;;8EBF|8EBF+8EBF/8EBF\8EBF;  | 
                      INC A                                     ;;8EC1|8EC1+8EC1/8EC1\8EC1; / 
                    + STA.B !SpriteYSpeed,X                     ;;8EC2|8EC2+8EC2/8EC2\8EC2; Store Y Speed 
                      JSR SubSprYPosNoGrvty                     ;;8EC4|8EC4+8EC4/8EC4\8EC4; Update position based on speed 
Return018EC7:         RTS                                       ;;8EC7|8EC7+8EC7/8EC7\8EC7; Return 
                                                                ;;                        ;
ChangePiranhaState:   LDA.B !SpriteTableC2,X                    ;;8EC8|8EC8+8EC8/8EC8\8EC8; \ $00 = Sprite state (00 - 03) 
                      AND.B #$03                                ;;8ECA|8ECA+8ECA/8ECA\8ECA;  | 
                      STA.B !_0                                 ;;8ECC|8ECC+8ECC/8ECC\8ECC; / 
                      BNE CODE_018EE1                           ;;8ECE|8ECE+8ECE/8ECE\8ECE; \ If the piranha is in the pipe (State 0)... 
                      JSR SubHorizPos                           ;;8ED0|8ED0+8ED0/8ED0\8ED0;  | ...check if Mario is nearby... 
                      LDA.B !_F                                 ;;8ED3|8ED3+8ED3/8ED3\8ED3;  | 
                      CLC                                       ;;8ED5|8ED5+8ED5/8ED5\8ED5;  | 
                      ADC.B #$1B                                ;;8ED6|8ED6+8ED6/8ED6\8ED6;  | 
                      CMP.B #$37                                ;;8ED8|8ED8+8ED8/8ED8\8ED8;  | 
                      LDA.B #$01                                ;;8EDA|8EDA+8EDA/8EDA\8EDA;  | 
                      STA.W !SpriteMisc1594,X                   ;;8EDC|8EDC+8EDC/8EDC\8EDC;  | ...and set $1594,x if so 
                      BCC +                                     ;;8EDF|8EDF+8EDF/8EDF\8EDF;  | 
CODE_018EE1:          STZ.W !SpriteMisc1594,X                   ;;8EE1|8EE1+8EE1/8EE1\8EE1; / 
                      LDY.B !_0                                 ;;8EE4|8EE4+8EE4/8EE4\8EE4; \ Set time in state 
                      LDA.W PiranTimeInState,Y                  ;;8EE6|8EE6+8EE6/8EE6\8EE6;  | 
                      STA.W !SpriteMisc1540,X                   ;;8EE9|8EE9+8EE9/8EE9\8EE9; / 
                      INC.B !SpriteTableC2,X                    ;;8EEC|8EEC+8EEC/8EEC\8EEC; Go to next state 
                    + RTS                                       ;;8EEE|8EEE+8EEE/8EEE\8EEE; Return 
                                                                ;;                        ;
CODE_018EEF:          LDY.B #$07                                ;;8EEF|8EEF+8EEF/8EEF\8EEF; \ Find a free extended sprite slot 
CODE_018EF1:          LDA.W !ExtSpriteNumber,Y                  ;;8EF1|8EF1+8EF1/8EF1\8EF1;
                      BEQ CODE_018F07                           ;;8EF4|8EF4+8EF4/8EF4\8EF4;
                      DEY                                       ;;8EF6|8EF6+8EF6/8EF6\8EF6;
                      BPL CODE_018EF1                           ;;8EF7|8EF7+8EF7/8EF7\8EF7;
                      DEC.W !ExtSpriteSlotIdx                   ;;8EF9|8EF9+8EF9/8EF9\8EF9;
                      BPL +                                     ;;8EFC|8EFC+8EFC/8EFC\8EFC;
                      LDA.B #$07                                ;;8EFE|8EFE+8EFE/8EFE\8EFE;
                      STA.W !ExtSpriteSlotIdx                   ;;8F00|8F00+8F00/8F00\8F00;
                    + LDY.W !ExtSpriteSlotIdx                   ;;8F03|8F03+8F03/8F03\8F03;
                    - RTS                                       ;;8F06|8F06+8F06/8F06\8F06; Return 
                                                                ;;                        ;
CODE_018F07:          LDA.W !SpriteOffscreenX,X                 ;;8F07|8F07+8F07/8F07\8F07;
                      BNE -                                     ;;8F0A|8F0A+8F0A/8F0A\8F0A;
                      RTS                                       ;;8F0C|8F0C+8F0C/8F0C\8F0C; Return 
                                                                ;;                        ;
HoppingFlame:         LDA.B !SpriteLock                         ;;8F0D|8F0D+8F0D/8F0D\8F0D; \ Branch if sprites locked 
                      BNE CODE_018F49                           ;;8F0F|8F0F+8F0F/8F0F\8F0F; / 
                      INC.W !SpriteMisc1602,X                   ;;8F11|8F11+8F11/8F11\8F11;
                      JSR SetAnimationFrame                     ;;8F14|8F14+8F14/8F14\8F14;
                      JSR SubUpdateSprPos                       ;;8F17|8F17+8F17/8F17\8F17;
                      DEC.B !SpriteYSpeed,X                     ;;8F1A|8F1A+8F1A/8F1A\8F1A;
                      JSR CODE_018DBB                           ;;8F1C|8F1C+8F1C/8F1C\8F1C;
                      ASL.B !SpriteXSpeed,X                     ;;8F1F|8F1F+8F1F/8F1F\8F1F;
                      JSR IsOnGround                            ;;8F21|8F21+8F21/8F21\8F21;
                      BEQ CODE_018F43                           ;;8F24|8F24+8F24/8F24\8F24;
                      STZ.B !SpriteXSpeed,X                     ;;8F26|8F26+8F26/8F26\8F26; Sprite X Speed = 0 
                      JSR SetSomeYSpeed__                       ;;8F28|8F28+8F28/8F28\8F28;
                      LDA.W !SpriteMisc1540,X                   ;;8F2B|8F2B+8F2B/8F2B\8F2B;
                      BEQ CODE_018F38                           ;;8F2E|8F2E+8F2E/8F2E\8F2E;
                      DEC A                                     ;;8F30|8F30+8F30/8F30\8F30;
                      BNE CODE_018F43                           ;;8F31|8F31+8F31/8F31\8F31;
                      JSR CODE_018F50                           ;;8F33|8F33+8F33/8F33\8F33;
                      BRA CODE_018F43                           ;;8F36|8F36+8F36/8F36\8F36;
                                                                ;;                        ;
CODE_018F38:          JSL GetRand                               ;;8F38|8F38+8F38/8F38\8F38;
                      AND.B #$1F                                ;;8F3C|8F3C+8F3C/8F3C\8F3C;
                      ORA.B #$20                                ;;8F3E|8F3E+8F3E/8F3E\8F3E;
                      STA.W !SpriteMisc1540,X                   ;;8F40|8F40+8F40/8F40\8F40;
CODE_018F43:          JSR FlipIfTouchingObj                     ;;8F43|8F43+8F43/8F43\8F43;
                      JSR MarioSprInteractRt                    ;;8F46|8F46+8F46/8F46\8F46;
CODE_018F49:          JSR SubOffscreen0Bnk1                     ;;8F49|8F49+8F49/8F49\8F49;
                      JSR SubSprGfx2Entry1                      ;;8F4C|8F4C+8F4C/8F4C\8F4C;
                      RTS                                       ;;8F4F|8F4F+8F4F/8F4F\8F4F; Return 
                                                                ;;                        ;
CODE_018F50:          JSL GetRand                               ;;8F50|8F50+8F50/8F50\8F50;
                      AND.B #$0F                                ;;8F54|8F54+8F54/8F54\8F54;
                      ORA.B #$D0                                ;;8F56|8F56+8F56/8F56\8F56;
                      STA.B !SpriteYSpeed,X                     ;;8F58|8F58+8F58/8F58\8F58;
                      LDA.W !RandomNumber                       ;;8F5A|8F5A+8F5A/8F5A\8F5A;
                      AND.B #$03                                ;;8F5D|8F5D+8F5D/8F5D\8F5D;
                      BNE +                                     ;;8F5F|8F5F+8F5F/8F5F\8F5F;
                      JSR FaceMario                             ;;8F61|8F61+8F61/8F61\8F61;
                    + JSR IsSprOffScreen                        ;;8F64|8F64+8F64/8F64\8F64;
                      BNE +                                     ;;8F67|8F67+8F67/8F67\8F67;
                      JSR CODE_018EEF                           ;;8F69|8F69+8F69/8F69\8F69;
                      LDA.B !SpriteXPosLow,X                    ;;8F6C|8F6C+8F6C/8F6C\8F6C;
                      CLC                                       ;;8F6E|8F6E+8F6E/8F6E\8F6E;
                      ADC.B #$04                                ;;8F6F|8F6F+8F6F/8F6F\8F6F;
                      STA.W !ExtSpriteXPosLow,Y                 ;;8F71|8F71+8F71/8F71\8F71;
                      LDA.W !SpriteYPosHigh,X                   ;;8F74|8F74+8F74/8F74\8F74;
                      ADC.B #$00                                ;;8F77|8F77+8F77/8F77\8F77;
                      STA.W !ExtSpriteXPosHigh,Y                ;;8F79|8F79+8F79/8F79\8F79;
                      LDA.B !SpriteYPosLow,X                    ;;8F7C|8F7C+8F7C/8F7C\8F7C;
                      CLC                                       ;;8F7E|8F7E+8F7E/8F7E\8F7E;
                      ADC.B #$08                                ;;8F7F|8F7F+8F7F/8F7F\8F7F;
                      STA.W !ExtSpriteYPosLow,Y                 ;;8F81|8F81+8F81/8F81\8F81;
                      LDA.W !SpriteXPosHigh,X                   ;;8F84|8F84+8F84/8F84\8F84;
                      ADC.B #$00                                ;;8F87|8F87+8F87/8F87\8F87;
                      STA.W !ExtSpriteYPosHigh,Y                ;;8F89|8F89+8F89/8F89\8F89;
                      LDA.B #$03                                ;;8F8C|8F8C+8F8C/8F8C\8F8C; \ Extended sprite = Hopping flame's flame 
                      STA.W !ExtSpriteNumber,Y                  ;;8F8E|8F8E+8F8E/8F8E\8F8E; / 
                      LDA.B #$FF                                ;;8F91|8F91+8F91/8F91\8F91;
                      STA.W !ExtSpriteMisc176F,Y                ;;8F93|8F93+8F93/8F93\8F93;
                    + RTS                                       ;;8F96|8F96+8F96/8F96\8F96; Return 
                                                                ;;                        ;
Lakitu:               LDY.B #$00                                ;;8F97|8F97+8F97/8F97\8F97;
                      LDA.W !SpriteMisc1558,X                   ;;8F99|8F99+8F99/8F99\8F99;
                      BEQ +                                     ;;8F9C|8F9C+8F9C/8F9C\8F9C;
                      LDY.B #$02                                ;;8F9E|8F9E+8F9E/8F9E\8F9E;
                    + TYA                                       ;;8FA0|8FA0+8FA0/8FA0\8FA0;
                      STA.W !SpriteMisc1602,X                   ;;8FA1|8FA1+8FA1/8FA1\8FA1;
                      JSR SubSprGfx1                            ;;8FA4|8FA4+8FA4/8FA4\8FA4;
                      LDA.W !SpriteMisc1558,X                   ;;8FA7|8FA7+8FA7/8FA7\8FA7;
                      BEQ +                                     ;;8FAA|8FAA+8FAA/8FAA\8FAA;
                      LDY.W !SpriteOAMIndex,X                   ;;8FAC|8FAC+8FAC/8FAC\8FAC; Y = Index into sprite OAM 
                      LDA.W !OAMTileYPos+$104,Y                 ;;8FAF|8FAF+8FAF/8FAF\8FAF;
                      SEC                                       ;;8FB2|8FB2+8FB2/8FB2\8FB2;
                      SBC.B #$03                                ;;8FB3|8FB3+8FB3/8FB3\8FB3;
                      STA.W !OAMTileYPos+$104,Y                 ;;8FB5|8FB5+8FB5/8FB5\8FB5;
                    + LDA.W !SpriteMisc151C,X                   ;;8FB8|8FB8+8FB8/8FB8\8FB8;
                      BEQ SubSprSpr_MarioSpr                    ;;8FBB|8FBB+8FBB/8FBB\8FBB;
                      JSL CODE_02E672                           ;;8FBD|8FBD+8FBD/8FBD\8FBD;
SubSprSpr_MarioSpr:   JSR SubSprSprInteract                     ;;8FC1|8FC1+8FC1/8FC1\8FC1;
                      JMP MarioSprInteractRt                    ;;8FC4|8FC4+8FC4/8FC4\8FC4;
                                                                ;;                        ;
                                                                ;;                        ;
BulletGfxProp:        db $42,$02,$03,$83,$03,$43,$03,$43        ;;8FC7|8FC7+8FC7/8FC7\8FC7;
DATA_018FCF:          db $00,$00,$01,$01,$02,$03,$03,$02        ;;8FCF|8FCF+8FCF/8FCF\8FCF;
BulletSpeedX:         db $20,$E0,$00,$00,$18,$18,$E8,$E8        ;;8FD7|8FD7+8FD7/8FD7\8FD7;
BulletSpeedY:         db $00,$00,$E0,$20,$E8,$18,$18,$E8        ;;8FDF|8FDF+8FDF/8FDF\8FDF;
                                                                ;;                        ;
BulletBill:           LDA.B #$01                                ;;8FE7|8FE7+8FE7/8FE7\8FE7;
                      STA.W !SpriteMisc157C,X                   ;;8FE9|8FE9+8FE9/8FE9\8FE9;
                      LDA.B !SpriteLock                         ;;8FEC|8FEC+8FEC/8FEC\8FEC; \ Branch if sprites locked 
                      BNE +                                     ;;8FEE|8FEE+8FEE/8FEE\8FEE; / 
                      LDY.B !SpriteTableC2,X                    ;;8FF0|8FF0+8FF0/8FF0\8FF0;
                      LDA.W BulletGfxProp,Y                     ;;8FF2|8FF2+8FF2/8FF2\8FF2; \ Store gfx properties into palette byte
                      STA.W !SpriteOBJAttribute,X               ;;8FF5|8FF5+8FF5/8FF5\8FF5; /
                      LDA.W DATA_018FCF,Y                       ;;8FF8|8FF8+8FF8/8FF8\8FF8;
                      STA.W !SpriteMisc1602,X                   ;;8FFB|8FFB+8FFB/8FFB\8FFB;
                      LDA.W BulletSpeedX,Y                      ;;8FFE|8FFE+8FFE/8FFE\8FFE; \ Set X speed
                      STA.B !SpriteXSpeed,X                     ;;9001|9001+9001/9001\9001; /
                      LDA.W BulletSpeedY,Y                      ;;9003|9003+9003/9003\9003; \ Set Y speed
                      STA.B !SpriteYSpeed,X                     ;;9006|9006+9006/9006\9006; /
                      JSR SubSprXPosNoGrvty                     ;;9008|9008+9008/9008\9008; \ Update position
                      JSR SubSprYPosNoGrvty                     ;;900B|900B+900B/900B\900B; /
                      JSR CODE_019140                           ;;900E|900E+900E/900E\900E;
                      JSR SubSprSpr_MarioSpr                    ;;9011|9011+9011/9011\9011; Interact with Mario and sprites
                    + JSR SubOffscreen0Bnk1                     ;;9014|9014+9014/9014\9014;
                      LDA.B !SpriteYPosLow,X                    ;;9017|9017+9017/9017\9017;
                      SEC                                       ;;9019|9019+9019/9019\9019;
                      SBC.B !Layer1YPos                         ;;901A|901A+901A/901A\901A;
                      CMP.B #$F0                                ;;901C|901C+901C/901C\901C;
                      BCC +                                     ;;901E|901E+901E/901E\901E;
                      STZ.W !SpriteStatus,X                     ;;9020|9020+9020/9020\9020;
                    + LDA.W !SpriteMisc1540,X                   ;;9023|9023+9023/9023\9023;
                      BEQ +                                     ;;9026|9026+9026/9026\9026;
                      JMP CODE_019546                           ;;9028|9028+9028/9028\9028;
                                                                ;;                        ;
                    + JMP SubSprGfx2Entry1                      ;;902B|902B+902B/902B\902B;
                                                                ;;                        ;
                                                                ;;                        ;
DATA_01902E:          db $40,$10                                ;;902E|902E+902E/902E\902E;
                                                                ;;                        ;
DATA_019030:          db $03,$01                                ;;9030|9030+9030/9030\9030;
                                                                ;;                        ;
SubUpdateSprPos:      JSR SubSprYPosNoGrvty                     ;;9032|9032+9032/9032\9032;
                      LDY.B #$00                                ;;9035|9035+9035/9035\9035;
                      LDA.W !SpriteInLiquid,X                   ;;9037|9037+9037/9037\9037;
                      BEQ +                                     ;;903A|903A+903A/903A\903A;
                      INY                                       ;;903C|903C+903C/903C\903C;
                      LDA.B !SpriteYSpeed,X                     ;;903D|903D+903D/903D\903D;
                      BPL +                                     ;;903F|903F+903F/903F\903F;
                      CMP.B #$E8                                ;;9041|9041+9041/9041\9041;
                      BCS +                                     ;;9043|9043+9043/9043\9043;
                      LDA.B #$E8                                ;;9045|9045+9045/9045\9045;
                      STA.B !SpriteYSpeed,X                     ;;9047|9047+9047/9047\9047;
                    + LDA.B !SpriteYSpeed,X                     ;;9049|9049+9049/9049\9049;
                      CLC                                       ;;904B|904B+904B/904B\904B;
                      ADC.W DATA_019030,Y                       ;;904C|904C+904C/904C\904C;
                      STA.B !SpriteYSpeed,X                     ;;904F|904F+904F/904F\904F;
                      BMI +                                     ;;9051|9051+9051/9051\9051;
                      CMP.W DATA_01902E,Y                       ;;9053|9053+9053/9053\9053;
                      BCC +                                     ;;9056|9056+9056/9056\9056;
                      LDA.W DATA_01902E,Y                       ;;9058|9058+9058/9058\9058;
                      STA.B !SpriteYSpeed,X                     ;;905B|905B+905B/905B\905B;
                    + LDA.B !SpriteXSpeed,X                     ;;905D|905D+905D/905D\905D;
                      PHA                                       ;;905F|905F+905F/905F\905F;
                      LDY.W !SpriteInLiquid,X                   ;;9060|9060+9060/9060\9060;
                      BEQ +                                     ;;9063|9063+9063/9063\9063;
                      ASL A                                     ;;9065|9065+9065/9065\9065;
                      ROR.B !SpriteXSpeed,X                     ;;9066|9066+9066/9066\9066;
                      LDA.B !SpriteXSpeed,X                     ;;9068|9068+9068/9068\9068;
                      PHA                                       ;;906A|906A+906A/906A\906A;
                      STA.B !_0                                 ;;906B|906B+906B/906B\906B;
                      ASL A                                     ;;906D|906D+906D/906D\906D;
                      ROR.B !_0                                 ;;906E|906E+906E/906E\906E;
                      PLA                                       ;;9070|9070+9070/9070\9070;
                      CLC                                       ;;9071|9071+9071/9071\9071;
                      ADC.B !_0                                 ;;9072|9072+9072/9072\9072;
                      STA.B !SpriteXSpeed,X                     ;;9074|9074+9074/9074\9074;
                    + JSR SubSprXPosNoGrvty                     ;;9076|9076+9076/9076\9076;
                      PLA                                       ;;9079|9079+9079/9079\9079;
                      STA.B !SpriteXSpeed,X                     ;;907A|907A+907A/907A\907A;
                      LDA.W !SpriteDisableObjInt,X              ;;907C|907C+907C/907C\907C;
                      BNE +                                     ;;907F|907F+907F/907F\907F;
                      JSR CODE_019140                           ;;9081|9081+9081/9081\9081;
                      RTS                                       ;;9084|9084+9084/9084\9084; Return 
                                                                ;;                        ;
                    + STZ.W !SpriteBlockedDirs,X                ;;9085|9085+9085/9085\9085;
                      RTS                                       ;;9088|9088+9088/9088\9088; Return 
                                                                ;;                        ;
FlipIfTouchingObj:    LDA.W !SpriteMisc157C,X                   ;;9089|9089+9089/9089\9089; \ If touching an object in the direction 
                      INC A                                     ;;908C|908C+908C/908C\908C;  | that the sprite is moving... 
                      AND.W !SpriteBlockedDirs,X                ;;908D|908D+908D/908D\908D;  | 
                      AND.B #$03                                ;;9090|9090+9090/9090\9090;  | 
                      BEQ +                                     ;;9092|9092+9092/9092\9092;  | 
                      JSR FlipSpriteDir                         ;;9094|9094+9094/9094\9094;  | ...flip direction 
                    + RTS                                       ;;9097|9097+9097/9097\9097; / 
                                                                ;;                        ;
FlipSpriteDir:        LDA.W !SpriteMisc15AC,X                   ;;9098|9098+9098/9098\9098; \ Return if turning timer is set 
                      BNE +                                     ;;909B|909B+909B/909B\909B; / 
                      LDA.B #$08                                ;;909D|909D+909D/909D\909D; \ Set turning timer 
                      STA.W !SpriteMisc15AC,X                   ;;909F|909F+909F/909F\909F; / 
CODE_0190A2:          LDA.B !SpriteXSpeed,X                     ;;90A2|90A2+90A2/90A2\90A2; \ Invert speed 
                      EOR.B #$FF                                ;;90A4|90A4+90A4/90A4\90A4;  | 
                      INC A                                     ;;90A6|90A6+90A6/90A6\90A6;  | 
                      STA.B !SpriteXSpeed,X                     ;;90A7|90A7+90A7/90A7\90A7; / 
                      LDA.W !SpriteMisc157C,X                   ;;90A9|90A9+90A9/90A9\90A9; \ Flip sprite direction 
                      EOR.B #$01                                ;;90AC|90AC+90AC/90AC\90AC;  | 
                      STA.W !SpriteMisc157C,X                   ;;90AE|90AE+90AE/90AE\90AE; / 
                    + RTS                                       ;;90B1|90B1+90B1/90B1\90B1; Return 
                                                                ;;                        ;
GenericSprGfxRt2:     PHB                                       ;;90B2|90B2+90B2/90B2\90B2;
                      PHK                                       ;;90B3|90B3+90B3/90B3\90B3;
                      PLB                                       ;;90B4|90B4+90B4/90B4\90B4;
                      JSR SubSprGfx2Entry1                      ;;90B5|90B5+90B5/90B5\90B5;
                      PLB                                       ;;90B8|90B8+90B8/90B8\90B8;
                      RTL                                       ;;90B9|90B9+90B9/90B9\90B9; Return 
                                                                ;;                        ;
                                                                ;;                        ;
SpriteObjClippingX:   db $0E,$02,$08,$08,$0E,$02,$07,$07        ;;90BA|90BA+90BA/90BA\90BA;
                      db $07,$07,$07,$07,$0E,$02,$08,$08        ;;90C2|90C2+90C2/90C2\90C2;
                      db $10,$00,$08,$08,$0D,$02,$08,$08        ;;90CA|90CA+90CA/90CA\90CA;
                      db $07,$00,$04,$04,$1F,$01,$10,$10        ;;90D2|90D2+90D2/90D2\90D2;
                      db $0F,$00,$08,$08,$10,$00,$08,$08        ;;90DA|90DA+90DA/90DA\90DA;
                      db $0D,$02,$08,$08,$0E,$02,$08,$08        ;;90E2|90E2+90E2/90E2\90E2;
                      db $0D,$02,$08,$08,$10,$00,$08,$08        ;;90EA|90EA+90EA/90EA\90EA;
                      db $1F,$00,$10,$10,$08                    ;;90F2|90F2+90F2/90F2\90F2;
                                                                ;;                        ;
SpriteObjClippingY:   db $08,$08,$10,$02,$12,$12,$20,$02        ;;90F7|90F7+90F7/90F7\90F7;
                      db $07,$07,$07,$07,$10,$10,$20,$0B        ;;90FF|90FF+90FF/90FF\90FF;
                      db $12,$12,$20,$02,$18,$18,$20,$10        ;;9107|9107+9107/9107\9107;
                      db $04,$04,$08,$00,$10,$10,$1F,$01        ;;910F|910F+910F/910F\910F;
                      db $08,$08,$0F,$00,$08,$08,$10,$00        ;;9117|9117+9117/9117\9117;
                      db $48,$48,$50,$42,$04,$04,$08,$00        ;;911F|911F+911F/911F\911F;
                      db $00,$00,$00,$00,$08,$08,$10,$00        ;;9127|9127+9127/9127\9127;
                      db $08,$08,$10,$00,$04                    ;;912F|912F+912F/912F\912F;
                                                                ;;                        ;
DATA_019134:          db $01,$02,$04,$08                        ;;9134|9134+9134/9134\9134;
                                                                ;;                        ;
CODE_019138:          PHB                                       ;;9138|9138+9138/9138\9138;
                      PHK                                       ;;9139|9139+9139/9139\9139;
                      PLB                                       ;;913A|913A+913A/913A\913A;
                      JSR CODE_019140                           ;;913B|913B+913B/913B\913B;
                      PLB                                       ;;913E|913E+913E/913E\913E;
                      RTL                                       ;;913F|913F+913F/913F\913F; Return 
                                                                ;;                        ;
CODE_019140:          STZ.W !SpriteBlockOffset                  ;;9140|9140+9140/9140\9140;
                      STZ.W !SpriteBlockedDirs,X                ;;9143|9143+9143/9143\9143; Set sprite's position status to 0 (in air) 
                      STZ.W !SpriteSlope,X                      ;;9146|9146+9146/9146\9146;
                      STZ.W !TileGenerateTrackA                 ;;9149|9149+9149/9149\9149;
                      LDA.W !SpriteInLiquid,X                   ;;914C|914C+914C/914C\914C;
                      STA.W !SpriteInterIndex                   ;;914F|914F+914F/914F\914F;
                      STZ.W !SpriteInLiquid,X                   ;;9152|9152+9152/9152\9152;
                      JSR CODE_019211                           ;;9155|9155+9155/9155\9155;
                      LDA.B !ScreenMode                         ;;9158|9158+9158/9158\9158; Vertical level flag 
                      BPL CODE_0191BE                           ;;915A|915A+915A/915A\915A;
                      INC.W !TileGenerateTrackA                 ;;915C|915C+915C/915C\915C;
                      LDA.B !SpriteXPosLow,X                    ;;915F|915F+915F/915F\915F; \ Sprite's X position += $26 
                      CLC                                       ;;9161|9161+9161/9161\9161;  | for call to below routine 
                      ADC.B !Layer23XRelPos                     ;;9162|9162+9162/9162\9162;  | 
                      STA.B !SpriteXPosLow,X                    ;;9164|9164+9164/9164\9164;  | 
                      LDA.W !SpriteYPosHigh,X                   ;;9166|9166+9166/9166\9166;  | 
                      ADC.B !Layer23XRelPos+1                   ;;9169|9169+9169/9169\9169;  | 
                      STA.W !SpriteYPosHigh,X                   ;;916B|916B+916B/916B\916B; / 
                      LDA.B !SpriteYPosLow,X                    ;;916E|916E+916E/916E\916E; \ Sprite's Y position += $28 
                      CLC                                       ;;9170|9170+9170/9170\9170;  | for call to below routine 
                      ADC.B !Layer23YRelPos                     ;;9171|9171+9171/9171\9171;  | 
                      STA.B !SpriteYPosLow,X                    ;;9173|9173+9173/9173\9173;  | 
                      LDA.W !SpriteXPosHigh,X                   ;;9175|9175+9175/9175\9175;  | 
                      ADC.B !Layer23YRelPos+1                   ;;9178|9178+9178/9178\9178;  | 
                      STA.W !SpriteXPosHigh,X                   ;;917A|917A+917A/917A\917A; / 
                      JSR CODE_019211                           ;;917D|917D+917D/917D\917D;
                      LDA.B !SpriteXPosLow,X                    ;;9180|9180+9180/9180\9180; \ Restore sprite's original position 
                      SEC                                       ;;9182|9182+9182/9182\9182;  | 
                      SBC.B !Layer23XRelPos                     ;;9183|9183+9183/9183\9183;  | 
                      STA.B !SpriteXPosLow,X                    ;;9185|9185+9185/9185\9185;  | 
                      LDA.W !SpriteYPosHigh,X                   ;;9187|9187+9187/9187\9187;  | 
                      SBC.B !Layer23XRelPos+1                   ;;918A|918A+918A/918A\918A;  | 
                      STA.W !SpriteYPosHigh,X                   ;;918C|918C+918C/918C\918C;  | 
                      LDA.B !SpriteYPosLow,X                    ;;918F|918F+918F/918F\918F;  | 
                      SEC                                       ;;9191|9191+9191/9191\9191;  | 
                      SBC.B !Layer23YRelPos                     ;;9192|9192+9192/9192\9192;  | 
                      STA.B !SpriteYPosLow,X                    ;;9194|9194+9194/9194\9194;  | 
                      LDA.W !SpriteXPosHigh,X                   ;;9196|9196+9196/9196\9196;  | 
                      SBC.B !Layer23YRelPos+1                   ;;9199|9199+9199/9199\9199;  | 
                      STA.W !SpriteXPosHigh,X                   ;;919B|919B+919B/919B\919B; / 
                      LDA.W !SpriteBlockedDirs,X                ;;919E|919E+919E/919E\919E;
                      BPL CODE_0191BE                           ;;91A1|91A1+91A1/91A1\91A1;
                      AND.B #$03                                ;;91A3|91A3+91A3/91A3\91A3;
                      BNE CODE_0191BE                           ;;91A5|91A5+91A5/91A5\91A5;
                      LDY.B #$00                                ;;91A7|91A7+91A7/91A7\91A7;
                      LDA.W !Layer2DXPos                        ;;91A9|91A9+91A9/91A9\91A9; \ A = -$17BF 
                      EOR.B #$FF                                ;;91AC|91AC+91AC/91AC\91AC;  | 
                      INC A                                     ;;91AE|91AE+91AE/91AE\91AE;  | 
                      BPL +                                     ;;91AF|91AF+91AF/91AF\91AF;
                      DEY                                       ;;91B1|91B1+91B1/91B1\91B1;
                    + CLC                                       ;;91B2|91B2+91B2/91B2\91B2;
                      ADC.B !SpriteXPosLow,X                    ;;91B3|91B3+91B3/91B3\91B3;
                      STA.B !SpriteXPosLow,X                    ;;91B5|91B5+91B5/91B5\91B5;
                      TYA                                       ;;91B7|91B7+91B7/91B7\91B7;
                      ADC.W !SpriteYPosHigh,X                   ;;91B8|91B8+91B8/91B8\91B8;
                      STA.W !SpriteYPosHigh,X                   ;;91BB|91BB+91BB/91BB\91BB;
CODE_0191BE:          LDA.W !SpriteTweakerF,X                   ;;91BE|91BE+91BE/91BE\91BE; \ Branch if "Don't get stuck in walls" is not set 
                      BPL +                                     ;;91C1|91C1+91C1/91C1\91C1; / 
                      LDA.W !SpriteBlockedDirs,X                ;;91C3|91C3+91C3/91C3\91C3; \ Branch if not touching object 
                      AND.B #$03                                ;;91C6|91C6+91C6/91C6\91C6;  | 
                      BEQ +                                     ;;91C8|91C8+91C8/91C8\91C8; / 
                      TAY                                       ;;91CA|91CA+91CA/91CA\91CA;
                      LDA.W !SpriteOnYoshiTongue,X              ;;91CB|91CB+91CB/91CB\91CB;
                      BNE +                                     ;;91CE|91CE+91CE/91CE\91CE;
                      LDA.B !SpriteXPosLow,X                    ;;91D0|91D0+91D0/91D0\91D0;
                      CLC                                       ;;91D2|91D2+91D2/91D2\91D2;
                      ADC.W Return019283,Y                      ;;91D3|91D3+91D3/91D3\91D3;
                      STA.B !SpriteXPosLow,X                    ;;91D6|91D6+91D6/91D6\91D6;
                      LDA.W !SpriteYPosHigh,X                   ;;91D8|91D8+91D8/91D8\91D8;
                      ADC.W DATA_019285,Y                       ;;91DB|91DB+91DB/91DB\91DB;
                      STA.W !SpriteYPosHigh,X                   ;;91DE|91DE+91DE/91DE\91DE;
                      LDA.B !SpriteXSpeed,X                     ;;91E1|91E1+91E1/91E1\91E1;
                      BNE +                                     ;;91E3|91E3+91E3/91E3\91E3;
                      LDA.W !SpriteBlockedDirs,X                ;;91E5|91E5+91E5/91E5\91E5;
                      AND.B #$FC                                ;;91E8|91E8+91E8/91E8\91E8;
                      STA.W !SpriteBlockedDirs,X                ;;91EA|91EA+91EA/91EA\91EA;
                    + LDA.W !SpriteInLiquid,X                   ;;91ED|91ED+91ED/91ED\91ED;
                      EOR.W !SpriteInterIndex                   ;;91F0|91F0+91F0/91F0\91F0;
                      BEQ Return019210                          ;;91F3|91F3+91F3/91F3\91F3;
                   if ver_is_lores(!_VER)             ;\   IF   ;;++++++++++++++++++++++++; J, U, SS, & E0
                      ASL A                                     ;;91F5|91F5+91F5/91F5     ;
                      LDA.W !SpriteTweakerC,X                   ;;91F6|91F6+91F6/91F6     ; \ TODO: Unknown Bit A... 
                      AND.B #$40                                ;;91F9|91F9+91F9/91F9     ;  | ... may be related to cape 
                      ORA.W !SpriteMisc1FE2,X                   ;;91FB|91FB+91FB/91FB     ;
                      BNE Return019210                          ;;91FE|91FE+91FE/91FE     ;
                      BCS +                                     ;;9200|9200+9200/9200     ;
                   else                               ;<  ELSE  ;;------------------------; E1
                      TAY                                       ;;                   \91F5;
                      LDA.W !SpriteTweakerC,X                   ;;                   \91F6;
                      AND.B #$40                                ;;                   \91F9;
                      ORA.W !SpriteMisc1FE2,X                   ;;                   \91FB;
                      BNE Return019210                          ;;                   \91FE;
                      LDA.W !SpriteYPosLow,X                    ;;                   \9200;
                      SEC                                       ;;                   \9203;
                      SBC.W !Layer1YPos                         ;;                   \9204;
                      CMP.B #$D2                                ;;                   \9207;
                      BCS Return019210                          ;;                   \9209;
                      TYA                                       ;;                   \920B;
                      BMI +                                     ;;                   \920C;
                   endif                              ;/ ENDIF  ;;++++++++++++++++++++++++;
                      BIT.W !IRQNMICommand                      ;;9202|9202+9202/9202\920E;
                      BMI +                                     ;;9205|9205+9205/9205\9211;
                      JSL CODE_0284C0                           ;;9207|9207+9207/9207\9213;
                      RTS                                       ;;920B|920B+920B/920B\9217; Return 
                                                                ;;                        ;
                    + JSL CODE_028528                           ;;920C|920C+920C/920C\9218;
Return019210:         RTS                                       ;;9210|9210+9210/9210\921C; Return 
                                                                ;;                        ;
CODE_019211:          LDA.W !SpriteBuoyancy                     ;;9211|9211+9211/9211\921D;
                      BEQ CODE_01925B                           ;;9214|9214+9214/9214\9220;
                      LDA.B !LevelIsWater                       ;;9216|9216+9216/9216\9222;
                      BNE CODE_019258                           ;;9218|9218+9218/9218\9224;
                      LDY.B #$3C                                ;;921A|921A+921A/921A\9226;
                      JSR CODE_01944D                           ;;921C|921C+921C/921C\9228;
                      BEQ CODE_019233                           ;;921F|921F+921F/921F\922B;
                      LDA.W !Map16TileNumber                    ;;9221|9221+9221/9221\922D;
                      CMP.B #$6E                                ;;9224|9224+9224/9224\9230;
                      BCC CODE_01925B                           ;;9226|9226+9226/9226\9232;
                      JSL CODE_00F04D                           ;;9228|9228+9228/9228\9234;
                      LDA.W !Map16TileNumber                    ;;922C|922C+922C/922C\9238;
                      BCC CODE_01925B                           ;;922F|922F+922F/922F\923B;
                      BCS CODE_01923A                           ;;9231|9231+9231/9231\923D;
CODE_019233:          LDA.W !Map16TileNumber                    ;;9233|9233+9233/9233\923F;
                      CMP.B #$06                                ;;9236|9236+9236/9236\9242;
                      BCS CODE_01925B                           ;;9238|9238+9238/9238\9244;
CODE_01923A:          TAY                                       ;;923A|923A+923A/923A\9246;
                      LDA.W !SpriteInLiquid,X                   ;;923B|923B+923B/923B\9247;
                      ORA.B #$01                                ;;923E|923E+923E/923E\924A;
                      CPY.B #$04                                ;;9240|9240+9240/9240\924C;
                      BNE CODE_019258                           ;;9242|9242+9242/9242\924E;
                      PHA                                       ;;9244|9244+9244/9244\9250;
                      LDA.B !SpriteNumber,X                     ;;9245|9245+9245/9245\9251; \ Branch if Yoshi 
                      CMP.B #$35                                ;;9247|9247+9247/9247\9253;  | 
                      BEQ CODE_019252                           ;;9249|9249+9249/9249\9255; / 
                      LDA.W !SpriteTweakerD,X                   ;;924B|924B+924B/924B\9257; \ Branch if "Process interaction every frame" 
                      AND.B #$02                                ;;924E|924E+924E/924E\925A;  | is set 
                      BNE +                                     ;;9250|9250+9250/9250\925C; / 
CODE_019252:          JSR CODE_019330                           ;;9252|9252+9252/9252\925E;
                    + PLA                                       ;;9255|9255+9255/9255\9261;
                      ORA.B #$80                                ;;9256|9256+9256/9256\9262;
CODE_019258:          STA.W !SpriteInLiquid,X                   ;;9258|9258+9258/9258\9264;
CODE_01925B:          LDA.W !SpriteTweakerE,X                   ;;925B|925B+925B/925B\9267;
                      BMI Return019210                          ;;925E|925E+925E/925E\926A;
                      LDA.W !TileGenerateTrackA                 ;;9260|9260+9260/9260\926C;
                      BEQ CODE_01926F                           ;;9263|9263+9263/9263\926F;
                      BIT.W !SpriteBuoyancy                     ;;9265|9265+9265/9265\9271;
                      BVS Return0192C0                          ;;9268|9268+9268/9268\9274;
                      LDA.W !SpriteTweakerC,X                   ;;926A|926A+926A/926A\9276; \ TODO: Return if Unknown Bit B is set 
                      BMI Return0192C0                          ;;926D|926D+926D/926D\9279; / 
CODE_01926F:          JSR CODE_0192C9                           ;;926F|926F+926F/926F\927B;
                      LDA.W !SpriteTweakerF,X                   ;;9272|9272+9272/9272\927E; \ Branch if "Don't get stuck in walls" is not set 
                      BPL +                                     ;;9275|9275+9275/9275\9281; / 
                      LDA.B !SpriteXSpeed,X                     ;;9277|9277+9277/9277\9283; \ Branch if sprite has X speed... 
                      ORA.W !SpriteMisc15AC,X                   ;;9279|9279+9279/9279\9285;  | ...or sprite is turning 
                      BNE +                                     ;;927C|927C+927C/927C\9288; / 
                      LDA.B !TrueFrame                          ;;927E|927E+927E/927E\928A;
                      JSR CODE_01928E                           ;;9280|9280+9280/9280\928C;
Return019283:         RTS                                       ;;9283|9283+9283/9283\928F; Return 
                                                                ;;                        ;
                                                                ;;                        ;
                      db $FC                                    ;;9284|9284+9284/9284\9290;
                                                                ;;                        ;
DATA_019285:          db $04,$FF,$00                            ;;9285|9285+9285/9285\9291;
                                                                ;;                        ;
                    + LDA.B !SpriteXSpeed,X                     ;;9288|9288+9288/9288\9294;
                      BEQ Return0192C0                          ;;928A|928A+928A/928A\9296;
                      ASL A                                     ;;928C|928C+928C/928C\9298;
                      ROL A                                     ;;928D|928D+928D/928D\9299;
CODE_01928E:          AND.B #$01                                ;;928E|928E+928E/928E\929A;
                      TAY                                       ;;9290|9290+9290/9290\929C;
                      JSR CODE_019441                           ;;9291|9291+9291/9291\929D;
                      STA.W !SprMap16TouchHorizHigh             ;;9294|9294+9294/9294\92A0;
                      BEQ +                                     ;;9297|9297+9297/9297\92A3;
                      LDA.W !Map16TileNumber                    ;;9299|9299+9299/9299\92A5;
                      CMP.B #$11                                ;;929C|929C+929C/929C\92A8;
                      BCC +                                     ;;929E|929E+929E/929E\92AA;
                      CMP.B #$6E                                ;;92A0|92A0+92A0/92A0\92AC;
                      BCS +                                     ;;92A2|92A2+92A2/92A2\92AE;
                      JSR CODE_019425                           ;;92A4|92A4+92A4/92A4\92B0;
                      LDA.W !Map16TileNumber                    ;;92A7|92A7+92A7/92A7\92B3;
                      STA.W !Map16TileDestroy                   ;;92AA|92AA+92AA/92AA\92B6;
                      LDA.W !TileGenerateTrackA                 ;;92AD|92AD+92AD/92AD\92B9;
                      BEQ +                                     ;;92B0|92B0+92B0/92B0\92BC;
                      LDA.W !SpriteBlockedDirs,X                ;;92B2|92B2+92B2/92B2\92BE;
                      ORA.B #$40                                ;;92B5|92B5+92B5/92B5\92C1;
                      STA.W !SpriteBlockedDirs,X                ;;92B7|92B7+92B7/92B7\92C3;
                    + LDA.W !Map16TileNumber                    ;;92BA|92BA+92BA/92BA\92C6;
                      STA.W !SprMap16TouchHorizLow              ;;92BD|92BD+92BD/92BD\92C9;
Return0192C0:         RTS                                       ;;92C0|92C0+92C0/92C0\92CC; Return 
                                                                ;;                        ;
                                                                ;;                        ;
                      db $FE,$02,$FF,$00                        ;;92C1|92C1+92C1/92C1\92CD;
                                                                ;;                        ;
DATA_0192C5:          db $01,$FF                                ;;92C5|92C5+92C5/92C5\92D1;
                                                                ;;                        ;
DATA_0192C7:          db $00,$FF                                ;;92C7|92C7+92C7/92C7\92D3;
                                                                ;;                        ;
CODE_0192C9:          LDY.B #$02                                ;;92C9|92C9+92C9/92C9\92D5;
                      LDA.B !SpriteYSpeed,X                     ;;92CB|92CB+92CB/92CB\92D7;
                      BPL +                                     ;;92CD|92CD+92CD/92CD\92D9;
                      INY                                       ;;92CF|92CF+92CF/92CF\92DB;
                    + JSR CODE_019441                           ;;92D0|92D0+92D0/92D0\92DC;
                      STA.W !SprMap16TouchVertHigh              ;;92D3|92D3+92D3/92D3\92DF;
                      PHP                                       ;;92D6|92D6+92D6/92D6\92E2;
                      LDA.W !Map16TileNumber                    ;;92D7|92D7+92D7/92D7\92E3;
                      STA.W !SprMap16TouchVertLow               ;;92DA|92DA+92DA/92DA\92E6;
                      PLP                                       ;;92DD|92DD+92DD/92DD\92E9;
                      BEQ Return01930F                          ;;92DE|92DE+92DE/92DE\92EA;
                      LDA.W !Map16TileNumber                    ;;92E0|92E0+92E0/92E0\92EC;
                      CPY.B #$02                                ;;92E3|92E3+92E3/92E3\92EF;
                      BEQ CODE_019310                           ;;92E5|92E5+92E5/92E5\92F1;
                      CMP.B #$11                                ;;92E7|92E7+92E7/92E7\92F3;
                      BCC Return01930F                          ;;92E9|92E9+92E9/92E9\92F5;
                      CMP.B #$6E                                ;;92EB|92EB+92EB/92EB\92F7;
                      BCC CODE_0192F9                           ;;92ED|92ED+92ED/92ED\92F9;
                      CMP.W !SolidTileStart                     ;;92EF|92EF+92EF/92EF\92FB;
                      BCC Return01930F                          ;;92F2|92F2+92F2/92F2\92FE;
                      CMP.W !SolidTileEnd                       ;;92F4|92F4+92F4/92F4\9300;
                      BCS Return01930F                          ;;92F7|92F7+92F7/92F7\9303;
CODE_0192F9:          JSR CODE_019425                           ;;92F9|92F9+92F9/92F9\9305;
                      LDA.W !Map16TileNumber                    ;;92FC|92FC+92FC/92FC\9308;
                      STA.W !Map16TileHittable                  ;;92FF|92FF+92FF/92FF\930B;
                      LDA.W !TileGenerateTrackA                 ;;9302|9302+9302/9302\930E;
                      BEQ Return01930F                          ;;9305|9305+9305/9305\9311;
                      LDA.W !SpriteBlockedDirs,X                ;;9307|9307+9307/9307\9313;
                      ORA.B #$20                                ;;930A|930A+930A/930A\9316;
                      STA.W !SpriteBlockedDirs,X                ;;930C|930C+930C/930C\9318;
Return01930F:         RTS                                       ;;930F|930F+930F/930F\931B; Return 
                                                                ;;                        ;
CODE_019310:          CMP.B #$59                                ;;9310|9310+9310/9310\931C;
                      BCC CODE_01933B                           ;;9312|9312+9312/9312\931E;
                      CMP.B #$5C                                ;;9314|9314+9314/9314\9320;
                      BCS CODE_01933B                           ;;9316|9316+9316/9316\9322;
                      LDY.W !ObjectTileset                      ;;9318|9318+9318/9318\9324;
                      CPY.B #$0E                                ;;931B|931B+931B/931B\9327;
                      BEQ CODE_019323                           ;;931D|931D+931D/931D\9329;
                      CPY.B #$03                                ;;931F|931F+931F/931F\932B;
                      BNE CODE_01933B                           ;;9321|9321+9321/9321\932D;
CODE_019323:          LDA.B !SpriteNumber,X                     ;;9323|9323+9323/9323\932F; \ Branch if sprite == Yoshi 
                      CMP.B #$35                                ;;9325|9325+9325/9325\9331;  | 
                      BEQ CODE_019330                           ;;9327|9327+9327/9327\9333; / 
                      LDA.W !SpriteTweakerD,X                   ;;9329|9329+9329/9329\9335; \ Branch if "Process interaction every frame" 
                      AND.B #$02                                ;;932C|932C+932C/932C\9338;  | is set 
                      BNE CODE_01933B                           ;;932E|932E+932E/932E\933A; / 
CODE_019330:          LDA.B #$05                                ;;9330|9330+9330/9330\933C; \ Sprite status = #$05 ??? 
                      STA.W !SpriteStatus,X                     ;;9332|9332+9332/9332\933E; / 
                      LDA.B #$40                                ;;9335|9335+9335/9335\9341;
                      STA.W !SpriteMisc1558,X                   ;;9337|9337+9337/9337\9343;
                      RTS                                       ;;933A|933A+933A/933A\9346; Return 
                                                                ;;                        ;
CODE_01933B:          CMP.B #$11                                ;;933B|933B+933B/933B\9347;
                      BCC CODE_0193B0                           ;;933D|933D+933D/933D\9349;
                      CMP.B #$6E                                ;;933F|933F+933F/933F\934B;
                      BCC CODE_0193B8                           ;;9341|9341+9341/9341\934D;
                      CMP.B #$D8                                ;;9343|9343+9343/9343\934F;
                      BCS CODE_019386                           ;;9345|9345+9345/9345\9351;
                      JSL CODE_00FA19                           ;;9347|9347+9347/9347\9353;
                      LDA.B [!_5],Y                             ;;934B|934B+934B/934B\9357;
                      CMP.B #$10                                ;;934D|934D+934D/934D\9359;
                      BEQ Return0193AF                          ;;934F|934F+934F/934F\935B;
                      BCS CODE_019386                           ;;9351|9351+9351/9351\935D;
                      LDA.B !_0                                 ;;9353|9353+9353/9353\935F;
                      CMP.B #$0C                                ;;9355|9355+9355/9355\9361;
                      BCS CODE_01935D                           ;;9357|9357+9357/9357\9363;
                      CMP.B [!_5],Y                             ;;9359|9359+9359/9359\9365;
                      BCC Return0193AF                          ;;935B|935B+935B/935B\9367;
CODE_01935D:          LDA.B [!_5],Y                             ;;935D|935D+935D/935D\9369;
                      STA.W !SpriteBlockOffset                  ;;935F|935F+935F/935F\936B;
                      PHX                                       ;;9362|9362+9362/9362\936E;
                      LDX.B !_8                                 ;;9363|9363+9363/9363\936F;
                      LDA.L DATA_00E53D,X                       ;;9365|9365+9365/9365\9371;
                      PLX                                       ;;9369|9369+9369/9369\9375;
                      STA.W !SpriteSlope,X                      ;;936A|936A+936A/936A\9376;
                      CMP.B #$04                                ;;936D|936D+936D/936D\9379;
                      BEQ CODE_019375                           ;;936F|936F+936F/936F\937B;
                      CMP.B #$FC                                ;;9371|9371+9371/9371\937D;
                      BNE CODE_019384                           ;;9373|9373+9373/9373\937F;
CODE_019375:          EOR.B !SpriteXSpeed,X                     ;;9375|9375+9375/9375\9381;
                      BPL +                                     ;;9377|9377+9377/9377\9383;
                      LDA.B !SpriteXSpeed,X                     ;;9379|9379+9379/9379\9385;
                      BEQ +                                     ;;937B|937B+937B/937B\9387;
                      JSR FlipSpriteDir                         ;;937D|937D+937D/937D\9389;
                    + JSL CODE_03C1CA                           ;;9380|9380+9380/9380\938C;
CODE_019384:          BRA CODE_0193B8                           ;;9384|9384+9384/9384\9390;
                                                                ;;                        ;
CODE_019386:          LDA.B !_C                                 ;;9386|9386+9386/9386\9392;
                      AND.B #$0F                                ;;9388|9388+9388/9388\9394;
                      CMP.B #$05                                ;;938A|938A+938A/938A\9396;
                      BCS Return0193AF                          ;;938C|938C+938C/938C\9398;
                      LDA.W !SpriteStatus,X                     ;;938E|938E+938E/938E\939A; \ Return if sprite status == Killed 
                      CMP.B #$02                                ;;9391|9391+9391/9391\939D;  | 
                      BEQ Return0193AF                          ;;9393|9393+9393/9393\939F; / 
                      CMP.B #$05                                ;;9395|9395+9395/9395\93A1; \ Return if sprite status == #$05 
                      BEQ Return0193AF                          ;;9397|9397+9397/9397\93A3; / 
                      CMP.B #$0B                                ;;9399|9399+9399/9399\93A5; \ Return if sprite status == Carried 
                      BEQ Return0193AF                          ;;939B|939B+939B/939B\93A7; / 
                      LDA.B !SpriteYPosLow,X                    ;;939D|939D+939D/939D\93A9;
                      SEC                                       ;;939F|939F+939F/939F\93AB;
                      SBC.B #$01                                ;;93A0|93A0+93A0/93A0\93AC;
                      STA.B !SpriteYPosLow,X                    ;;93A2|93A2+93A2/93A2\93AE;
                      LDA.W !SpriteXPosHigh,X                   ;;93A4|93A4+93A4/93A4\93B0;
                      SBC.B #$00                                ;;93A7|93A7+93A7/93A7\93B3;
                      STA.W !SpriteXPosHigh,X                   ;;93A9|93A9+93A9/93A9\93B5;
                      JSR CODE_0192C9                           ;;93AC|93AC+93AC/93AC\93B8;
Return0193AF:         RTS                                       ;;93AF|93AF+93AF/93AF\93BB; Return 
                                                                ;;                        ;
CODE_0193B0:          LDA.B !_C                                 ;;93B0|93B0+93B0/93B0\93BC;
                      AND.B #$0F                                ;;93B2|93B2+93B2/93B2\93BE;
                      CMP.B #$05                                ;;93B4|93B4+93B4/93B4\93C0;
                      BCS Return019424                          ;;93B6|93B6+93B6/93B6\93C2;
CODE_0193B8:          LDA.W !SpriteTweakerE,X                   ;;93B8|93B8+93B8/93B8\93C4;
                      AND.B #$04                                ;;93BB|93BB+93BB/93BB\93C7;
                      BNE CODE_019414                           ;;93BD|93BD+93BD/93BD\93C9;
                      LDA.W !SpriteStatus,X                     ;;93BF|93BF+93BF/93BF\93CB; \ Return if sprite status == Killed 
                      CMP.B #$02                                ;;93C2|93C2+93C2/93C2\93CE;  | 
                      BEQ Return019424                          ;;93C4|93C4+93C4/93C4\93D0; / 
                      CMP.B #$05                                ;;93C6|93C6+93C6/93C6\93D2; \ Return if sprite status == #$05 
                      BEQ Return019424                          ;;93C8|93C8+93C8/93C8\93D4; / 
                      CMP.B #$0B                                ;;93CA|93CA+93CA/93CA\93D6; \ Return if sprite status == Carried 
                      BEQ Return019424                          ;;93CC|93CC+93CC/93CC\93D8; / 
                      LDY.W !Map16TileNumber                    ;;93CE|93CE+93CE/93CE\93DA;
                      CPY.B #$0C                                ;;93D1|93D1+93D1/93D1\93DD;
                      BEQ CODE_0193D9                           ;;93D3|93D3+93D3/93D3\93DF;
                      CPY.B #$0D                                ;;93D5|93D5+93D5/93D5\93E1;
                      BNE CODE_019405                           ;;93D7|93D7+93D7/93D7\93E3;
CODE_0193D9:          LDA.B !TrueFrame                          ;;93D9|93D9+93D9/93D9\93E5;
                      AND.B #$03                                ;;93DB|93DB+93DB/93DB\93E7;
                      BNE CODE_019405                           ;;93DD|93DD+93DD/93DD\93E9;
                      JSR IsTouchingObjSide                     ;;93DF|93DF+93DF/93DF\93EB;
                      BNE CODE_019405                           ;;93E2|93E2+93E2/93E2\93EE;
                      LDA.W !ObjectTileset                      ;;93E4|93E4+93E4/93E4\93F0;
                      CMP.B #$02                                ;;93E7|93E7+93E7/93E7\93F3;
                      BEQ ADDR_0193EF                           ;;93E9|93E9+93E9/93E9\93F5;
                      CMP.B #$08                                ;;93EB|93EB+93EB/93EB\93F7;
                      BNE CODE_019405                           ;;93ED|93ED+93ED/93ED\93F9;
ADDR_0193EF:          TYA                                       ;;93EF|93EF+93EF/93EF\93FB;
                      SEC                                       ;;93F0|93F0+93F0/93F0\93FC;
                      SBC.B #$0C                                ;;93F1|93F1+93F1/93F1\93FD;
                      TAY                                       ;;93F3|93F3+93F3/93F3\93FF;
                      LDA.B !SpriteXPosLow,X                    ;;93F4|93F4+93F4/93F4\9400;
                      CLC                                       ;;93F6|93F6+93F6/93F6\9402;
                      ADC.W DATA_0192C5,Y                       ;;93F7|93F7+93F7/93F7\9403;
                      STA.B !SpriteXPosLow,X                    ;;93FA|93FA+93FA/93FA\9406;
                      LDA.W !SpriteYPosHigh,X                   ;;93FC|93FC+93FC/93FC\9408;
                      ADC.W DATA_0192C7,Y                       ;;93FF|93FF+93FF/93FF\940B;
                      STA.W !SpriteYPosHigh,X                   ;;9402|9402+9402/9402\940E;
CODE_019405:          LDA.W !SpriteOnYoshiTongue,X              ;;9405|9405+9405/9405\9411;
                      BNE CODE_019414                           ;;9408|9408+9408/9408\9414;
                      LDA.B !SpriteYPosLow,X                    ;;940A|940A+940A/940A\9416;
                      AND.B #$F0                                ;;940C|940C+940C/940C\9418;
                      CLC                                       ;;940E|940E+940E/940E\941A;
                      ADC.W !SpriteBlockOffset                  ;;940F|940F+940F/940F\941B;
                      STA.B !SpriteYPosLow,X                    ;;9412|9412+9412/9412\941E;
CODE_019414:          JSR CODE_019435                           ;;9414|9414+9414/9414\9420;
                      LDA.W !TileGenerateTrackA                 ;;9417|9417+9417/9417\9423;
                      BEQ Return019424                          ;;941A|941A+941A/941A\9426;
                      LDA.W !SpriteBlockedDirs,X                ;;941C|941C+941C/941C\9428;
                      ORA.B #$80                                ;;941F|941F+941F/941F\942B;
                      STA.W !SpriteBlockedDirs,X                ;;9421|9421+9421/9421\942D;
Return019424:         RTS                                       ;;9424|9424+9424/9424\9430; Return 
                                                                ;;                        ;
CODE_019425:          LDA.B !_A                                 ;;9425|9425+9425/9425\9431;
                      STA.B !TouchBlockXPos                     ;;9427|9427+9427/9427\9433;
                      LDA.B !_B                                 ;;9429|9429+9429/9429\9435;
                      STA.B !TouchBlockXPos+1                   ;;942B|942B+942B/942B\9437;
                      LDA.B !_C                                 ;;942D|942D+942D/942D\9439;
                      STA.B !TouchBlockYPos                     ;;942F|942F+942F/942F\943B;
                      LDA.B !_D                                 ;;9431|9431+9431/9431\943D;
                      STA.B !TouchBlockYPos+1                   ;;9433|9433+9433/9433\943F;
CODE_019435:          LDY.B !_F                                 ;;9435|9435+9435/9435\9441;
                      LDA.W !SpriteBlockedDirs,X                ;;9437|9437+9437/9437\9443;
                      ORA.W DATA_019134,Y                       ;;943A|943A+943A/943A\9446;
                      STA.W !SpriteBlockedDirs,X                ;;943D|943D+943D/943D\9449;
                      RTS                                       ;;9440|9440+9440/9440\944C; Return 
                                                                ;;                        ;
CODE_019441:          STY.B !_F                                 ;;9441|9441+9441/9441\944D; Can be 00-03 
                      LDA.W !SpriteTweakerA,X                   ;;9443|9443+9443/9443\944F; \ Y = $1656,x (Upper 4 bits) + $0F (Lower 2 bits) 
                      AND.B #$0F                                ;;9446|9446+9446/9446\9452;  | 
                      ASL A                                     ;;9448|9448+9448/9448\9454;  | 
                      ASL A                                     ;;9449|9449+9449/9449\9455;  | 
                      ADC.B !_F                                 ;;944A|944A+944A/944A\9456;  | 
                      TAY                                       ;;944C|944C+944C/944C\9458; / 
CODE_01944D:          LDA.W !TileGenerateTrackA                 ;;944D|944D+944D/944D\9459;
                      INC A                                     ;;9450|9450+9450/9450\945C;
                      AND.B !ScreenMode                         ;;9451|9451+9451/9451\945D;
                      BEQ CODE_0194BF                           ;;9453|9453+9453/9453\945F;
                      LDA.B !SpriteYPosLow,X                    ;;9455|9455+9455/9455\9461;
                      CLC                                       ;;9457|9457+9457/9457\9463;
                      ADC.W SpriteObjClippingY,Y                ;;9458|9458+9458/9458\9464;
                      STA.B !_C                                 ;;945B|945B+945B/945B\9467;
                      AND.B #$F0                                ;;945D|945D+945D/945D\9469;
                      STA.B !_0                                 ;;945F|945F+945F/945F\946B;
                      LDA.W !SpriteXPosHigh,X                   ;;9461|9461+9461/9461\946D;
                      ADC.B #$00                                ;;9464|9464+9464/9464\9470;
                      CMP.B !LevelScrLength                     ;;9466|9466+9466/9466\9472;
                      BCS CODE_0194B4                           ;;9468|9468+9468/9468\9474;
                      STA.B !_D                                 ;;946A|946A+946A/946A\9476;
                      LDA.B !SpriteXPosLow,X                    ;;946C|946C+946C/946C\9478;
                      CLC                                       ;;946E|946E+946E/946E\947A;
                      ADC.W SpriteObjClippingX,Y                ;;946F|946F+946F/946F\947B;
                      STA.B !_A                                 ;;9472|9472+9472/9472\947E;
                      STA.B !_1                                 ;;9474|9474+9474/9474\9480;
                      LDA.W !SpriteYPosHigh,X                   ;;9476|9476+9476/9476\9482;
                      ADC.B #$00                                ;;9479|9479+9479/9479\9485;
                      CMP.B #$02                                ;;947B|947B+947B/947B\9487;
                      BCS CODE_0194B4                           ;;947D|947D+947D/947D\9489;
                      STA.B !_B                                 ;;947F|947F+947F/947F\948B;
                      LDA.B !_1                                 ;;9481|9481+9481/9481\948D;
                      LSR A                                     ;;9483|9483+9483/9483\948F;
                      LSR A                                     ;;9484|9484+9484/9484\9490;
                      LSR A                                     ;;9485|9485+9485/9485\9491;
                      LSR A                                     ;;9486|9486+9486/9486\9492;
                      ORA.B !_0                                 ;;9487|9487+9487/9487\9493;
                      STA.B !_0                                 ;;9489|9489+9489/9489\9495;
                      LDX.B !_D                                 ;;948B|948B+948B/948B\9497;
                      LDA.L DATA_00BA80,X                       ;;948D|948D+948D/948D\9499;
                      LDY.W !TileGenerateTrackA                 ;;9491|9491+9491/9491\949D;
                      BEQ +                                     ;;9494|9494+9494/9494\94A0;
                      LDA.L DATA_00BA8E,X                       ;;9496|9496+9496/9496\94A2;
                    + CLC                                       ;;949A|949A+949A/949A\94A6;
                      ADC.B !_0                                 ;;949B|949B+949B/949B\94A7;
                      STA.B !_5                                 ;;949D|949D+949D/949D\94A9;
                      LDA.L DATA_00BABC,X                       ;;949F|949F+949F/949F\94AB;
                      LDY.W !TileGenerateTrackA                 ;;94A3|94A3+94A3/94A3\94AF;
                      BEQ +                                     ;;94A6|94A6+94A6/94A6\94B2;
                      LDA.L DATA_00BACA,X                       ;;94A8|94A8+94A8/94A8\94B4;
                    + ADC.B !_B                                 ;;94AC|94AC+94AC/94AC\94B8;
                      STA.B !_6                                 ;;94AE|94AE+94AE/94AE\94BA;
                      JSR CODE_019523                           ;;94B0|94B0+94B0/94B0\94BC;
                      RTS                                       ;;94B3|94B3+94B3/94B3\94BF; Return 
                                                                ;;                        ;
CODE_0194B4:          LDY.B !_F                                 ;;94B4|94B4+94B4/94B4\94C0;
                      LDA.B #$00                                ;;94B6|94B6+94B6/94B6\94C2;
                      STA.W !Map16TileNumber                    ;;94B8|94B8+94B8/94B8\94C4;
                      STA.W !SpriteBlockOffset                  ;;94BB|94BB+94BB/94BB\94C7;
                      RTS                                       ;;94BE|94BE+94BE/94BE\94CA; Return 
                                                                ;;                        ;
CODE_0194BF:          LDA.B !SpriteYPosLow,X                    ;;94BF|94BF+94BF/94BF\94CB;
                      CLC                                       ;;94C1|94C1+94C1/94C1\94CD;
                      ADC.W SpriteObjClippingY,Y                ;;94C2|94C2+94C2/94C2\94CE;
                      STA.B !_C                                 ;;94C5|94C5+94C5/94C5\94D1;
                      AND.B #$F0                                ;;94C7|94C7+94C7/94C7\94D3;
                      STA.B !_0                                 ;;94C9|94C9+94C9/94C9\94D5;
                      LDA.W !SpriteXPosHigh,X                   ;;94CB|94CB+94CB/94CB\94D7;
                      ADC.B #$00                                ;;94CE|94CE+94CE/94CE\94DA;
                      STA.B !_D                                 ;;94D0|94D0+94D0/94D0\94DC;
                      REP #$20                                  ;;94D2|94D2+94D2/94D2\94DE; Accum (16 bit) 
                      LDA.B !_C                                 ;;94D4|94D4+94D4/94D4\94E0;
                      CMP.W #$01B0                              ;;94D6|94D6+94D6/94D6\94E2;
                      SEP #$20                                  ;;94D9|94D9+94D9/94D9\94E5; Accum (8 bit) 
                      BCS CODE_0194B4                           ;;94DB|94DB+94DB/94DB\94E7;
                      LDA.B !SpriteXPosLow,X                    ;;94DD|94DD+94DD/94DD\94E9;
                      CLC                                       ;;94DF|94DF+94DF/94DF\94EB;
                      ADC.W SpriteObjClippingX,Y                ;;94E0|94E0+94E0/94E0\94EC;
                      STA.B !_A                                 ;;94E3|94E3+94E3/94E3\94EF;
                      STA.B !_1                                 ;;94E5|94E5+94E5/94E5\94F1;
                      LDA.W !SpriteYPosHigh,X                   ;;94E7|94E7+94E7/94E7\94F3;
                      ADC.B #$00                                ;;94EA|94EA+94EA/94EA\94F6;
                      STA.B !_B                                 ;;94EC|94EC+94EC/94EC\94F8;
                      BMI CODE_0194B4                           ;;94EE|94EE+94EE/94EE\94FA;
                      CMP.B !LevelScrLength                     ;;94F0|94F0+94F0/94F0\94FC;
                      BCS CODE_0194B4                           ;;94F2|94F2+94F2/94F2\94FE;
                      LDA.B !_1                                 ;;94F4|94F4+94F4/94F4\9500;
                      LSR A                                     ;;94F6|94F6+94F6/94F6\9502;
                      LSR A                                     ;;94F7|94F7+94F7/94F7\9503;
                      LSR A                                     ;;94F8|94F8+94F8/94F8\9504;
                      LSR A                                     ;;94F9|94F9+94F9/94F9\9505;
                      ORA.B !_0                                 ;;94FA|94FA+94FA/94FA\9506;
                      STA.B !_0                                 ;;94FC|94FC+94FC/94FC\9508;
                      LDX.B !_B                                 ;;94FE|94FE+94FE/94FE\950A;
                      LDA.L DATA_00BA60,X                       ;;9500|9500+9500/9500\950C;
                      LDY.W !TileGenerateTrackA                 ;;9504|9504+9504/9504\9510;
                      BEQ +                                     ;;9507|9507+9507/9507\9513;
                      LDA.L DATA_00BA70,X                       ;;9509|9509+9509/9509\9515;
                    + CLC                                       ;;950D|950D+950D/950D\9519;
                      ADC.B !_0                                 ;;950E|950E+950E/950E\951A;
                      STA.B !_5                                 ;;9510|9510+9510/9510\951C;
                      LDA.L DATA_00BA9C,X                       ;;9512|9512+9512/9512\951E;
                      LDY.W !TileGenerateTrackA                 ;;9516|9516+9516/9516\9522;
                      BEQ +                                     ;;9519|9519+9519/9519\9525;
                      LDA.L DATA_00BAAC,X                       ;;951B|951B+951B/951B\9527;
                    + ADC.B !_D                                 ;;951F|951F+951F/951F\952B;
                      STA.B !_6                                 ;;9521|9521+9521/9521\952D;
CODE_019523:          LDA.B #$7E                                ;;9523|9523+9523/9523\952F;
                      STA.B !_7                                 ;;9525|9525+9525/9525\9531;
                      LDX.W !CurSpriteProcess                   ;;9527|9527+9527/9527\9533; X = Sprite index 
                      LDA.B [!_5]                               ;;952A|952A+952A/952A\9536;
                      STA.W !Map16TileNumber                    ;;952C|952C+952C/952C\9538;
                      INC.B !_7                                 ;;952F|952F+952F/952F\953B;
                      LDA.B [!_5]                               ;;9531|9531+9531/9531\953D;
                      JSL CODE_00F545                           ;;9533|9533+9533/9533\953F;
                      LDY.B !_F                                 ;;9537|9537+9537/9537\9543;
                      CMP.B #$00                                ;;9539|9539+9539/9539\9545;
                      RTS                                       ;;953B|953B+953B/953B\9547; Return 
                                                                ;;                        ;
HandleSprStunned:     LDA.B !SpriteNumber,X                     ;;953C|953C+953C/953C\9548; \ Branch if not Yoshi shell 
                      CMP.B #$2C                                ;;953E|953E+953E/953E\954A; / 
                      BNE CODE_019554                           ;;9540|9540+9540/9540\954C;
                      LDA.B !SpriteTableC2,X                    ;;9542|9542+9542/9542\954E;
                      BEQ CODE_01956A                           ;;9544|9544+9544/9544\9550;
CODE_019546:          LDA.B !SpriteProperties                   ;;9546|9546+9546/9546\9552; \ Temporarily set $64 = #$10... 
                      PHA                                       ;;9548|9548+9548/9548\9554;  | 
                      LDA.B #$10                                ;;9549|9549+9549/9549\9555;  | 
                      STA.B !SpriteProperties                   ;;954B|954B+954B/954B\9557;  | 
                      JSR SubSprGfx2Entry1                      ;;954D|954D+954D/954D\9559;  | ...and call gfx routine 
                      PLA                                       ;;9550|9550+9550/9550\955C;  | 
                      STA.B !SpriteProperties                   ;;9551|9551+9551/9551\955D; / 
                      RTS                                       ;;9553|9553+9553/9553\955F; Return 
                                                                ;;                        ;
CODE_019554:          CMP.B #$2F                                ;;9554|9554+9554/9554\9560; \ If Spring Board... 
                      BEQ SetNormalStatus2                      ;;9556|9556+9556/9556\9562;  | ...Unused Sprite 85... 
                      CMP.B #$85                                ;;9558|9558+9558/9558\9564;  | ...or Balloon, 
                      BEQ SetNormalStatus2                      ;;955A|955A+955A/955A\9566;  | Set Status = Normal... 
                      CMP.B #$7D                                ;;955C|955C+955C/955C\9568;  |  ...and jump to $01A187 
                      BNE CODE_01956A                           ;;955E|955E+955E/955E\956A;  | 
                      STZ.B !SpriteYSpeed,X                     ;;9560|9560+9560/9560\956C;  | Balloon Y Speed = 0 
SetNormalStatus2:     LDA.B #$08                                ;;9562|9562+9562/9562\956E;  | 
                      STA.W !SpriteStatus,X                     ;;9564|9564+9564/9564\9570;  | 
                      JMP CODE_01A187                           ;;9567|9567+9567/9567\9573; / 
                                                                ;;                        ;
CODE_01956A:          LDA.B !SpriteLock                         ;;956A|956A+956A/956A\9576; \ If sprites locked, 
                      BEQ +                                     ;;956C|956C+956C/956C\9578;  | jump to $0195F5 
                      JMP CODE_0195F5                           ;;956E|956E+956E/956E\957A; / 
                                                                ;;                        ;
                    + JSR CODE_019624                           ;;9571|9571+9571/9571\957D;
                      JSR SubUpdateSprPos                       ;;9574|9574+9574/9574\9580;
                      JSR IsOnGround                            ;;9577|9577+9577/9577\9583;
                      BEQ CODE_019598                           ;;957A|957A+957A/957A\9586;
                      JSR CODE_0197D5                           ;;957C|957C+957C/957C\9588;
                      LDA.B !SpriteNumber,X                     ;;957F|957F+957F/957F\958B;
                      CMP.B #$16                                ;;9581|9581+9581/9581\958D; \ If Vertical or Horizontal Fish, 
                      BEQ ADDR_019589                           ;;9583|9583+9583/9583\958F;  | 
                      CMP.B #$15                                ;;9585|9585+9585/9585\9591;  | jump to $019562 
                      BNE +                                     ;;9587|9587+9587/9587\9593;  | 
ADDR_019589:          JMP SetNormalStatus2                      ;;9589|9589+9589/9589\9595; / 
                                                                ;;                        ;
                    + CMP.B #$2C                                ;;958C|958C+958C/958C\9598; \ Branch if not Yoshi Egg 
                      BNE CODE_019598                           ;;958E|958E+958E/958E\959A; / 
                      LDA.B #$F0                                ;;9590|9590+9590/9590\959C; \ Set upward speed 
                      STA.B !SpriteYSpeed,X                     ;;9592|9592+9592/9592\959E; / 
                      JSL CODE_01F74C                           ;;9594|9594+9594/9594\95A0;
CODE_019598:          JSR IsTouchingCeiling                     ;;9598|9598+9598/9598\95A4;
                      BEQ +                                     ;;959B|959B+959B/959B\95A7;
                      LDA.B #$10                                ;;959D|959D+959D/959D\95A9; \ Set downward speed 
                      STA.B !SpriteYSpeed,X                     ;;959F|959F+959F/959F\95AB; / 
                      JSR IsTouchingObjSide                     ;;95A1|95A1+95A1/95A1\95AD;
                      BNE +                                     ;;95A4|95A4+95A4/95A4\95B0;
                      LDA.B !SpriteXPosLow,X                    ;;95A6|95A6+95A6/95A6\95B2; \ $9A = Sprite X position + #$08 
                      CLC                                       ;;95A8|95A8+95A8/95A8\95B4;  | 
                      ADC.B #$08                                ;;95A9|95A9+95A9/95A9\95B5;  | 
                      STA.B !TouchBlockXPos                     ;;95AB|95AB+95AB/95AB\95B7;  | 
                      LDA.W !SpriteYPosHigh,X                   ;;95AD|95AD+95AD/95AD\95B9;  | 
                      ADC.B #$00                                ;;95B0|95B0+95B0/95B0\95BC;  | 
                      STA.B !TouchBlockXPos+1                   ;;95B2|95B2+95B2/95B2\95BE; / 
                      LDA.B !SpriteYPosLow,X                    ;;95B4|95B4+95B4/95B4\95C0; \ $9A = Sprite X position 
                      AND.B #$F0                                ;;95B6|95B6+95B6/95B6\95C2;  | (Rounded down to nearest #$10) 
                      STA.B !TouchBlockYPos                     ;;95B8|95B8+95B8/95B8\95C4;  | 
                      LDA.W !SpriteXPosHigh,X                   ;;95BA|95BA+95BA/95BA\95C6;  | 
                      STA.B !TouchBlockYPos+1                   ;;95BD|95BD+95BD/95BD\95C9; / 
                      LDA.W !SpriteBlockedDirs,X                ;;95BF|95BF+95BF/95BF\95CB;
                      AND.B #$20                                ;;95C2|95C2+95C2/95C2\95CE;
                      ASL A                                     ;;95C4|95C4+95C4/95C4\95D0;
                      ASL A                                     ;;95C5|95C5+95C5/95C5\95D1;
                      ASL A                                     ;;95C6|95C6+95C6/95C6\95D2;
                      ROL A                                     ;;95C7|95C7+95C7/95C7\95D3;
                      AND.B #$01                                ;;95C8|95C8+95C8/95C8\95D4;
                      STA.W !LayerProcessing                    ;;95CA|95CA+95CA/95CA\95D6;
                      LDY.B #$00                                ;;95CD|95CD+95CD/95CD\95D9;
                      LDA.W !Map16TileHittable                  ;;95CF|95CF+95CF/95CF\95DB;
                      JSL CODE_00F160                           ;;95D2|95D2+95D2/95D2\95DE;
                      LDA.B #$08                                ;;95D6|95D6+95D6/95D6\95E2;
                      STA.W !SpriteMisc1FE2,X                   ;;95D8|95D8+95D8/95D8\95E4;
                    + JSR IsTouchingObjSide                     ;;95DB|95DB+95DB/95DB\95E7;
                      BEQ CODE_0195F2                           ;;95DE|95DE+95DE/95DE\95EA;
                      LDA.B !SpriteNumber,X                     ;;95E0|95E0+95E0/95E0\95EC; \ Call $0195E9 if sprite number < #$0D 
                      CMP.B #$0D                                ;;95E2|95E2+95E2/95E2\95EE;  | (Koopa Troopas) 
                      BCC +                                     ;;95E4|95E4+95E4/95E4\95F0;  | 
                      JSR CODE_01999E                           ;;95E6|95E6+95E6/95E6\95F2; / 
                    + LDA.B !SpriteXSpeed,X                     ;;95E9|95E9+95E9/95E9\95F5;
                      ASL A                                     ;;95EB|95EB+95EB/95EB\95F7;
                      PHP                                       ;;95EC|95EC+95EC/95EC\95F8;
                      ROR.B !SpriteXSpeed,X                     ;;95ED|95ED+95ED/95ED\95F9;
                      PLP                                       ;;95EF|95EF+95EF/95EF\95FB;
                      ROR.B !SpriteXSpeed,X                     ;;95F0|95F0+95F0/95F0\95FC;
CODE_0195F2:          JSR SubSprSpr_MarioSpr                    ;;95F2|95F2+95F2/95F2\95FE;
CODE_0195F5:          JSR CODE_01A187                           ;;95F5|95F5+95F5/95F5\9601;
                      JSR SubOffscreen0Bnk1                     ;;95F8|95F8+95F8/95F8\9604;
                      RTS                                       ;;95FB|95FB+95FB/95FB\9607; Return 
                                                                ;;                        ;
                                                                ;;                        ;
                      db $00,$00,$00,$00,$04,$05,$06,$07        ;;95FC|95FC+95FC/95FC\9608;
                      db $00,$00,$00,$00,$04,$05,$06,$07        ;;9604|9604+9604/9604\9610;
                      db $00,$00,$00,$00,$04,$05,$06,$07        ;;960C|960C+960C/960C\9618;
                      db $00,$00,$00,$00,$04,$05,$06,$07        ;;9614|9614+9614/9614\9620;
SpriteKoopasSpawn:    db $00,$00,$00,$00,$00,$01,$02,$03        ;;961C|961C+961C/961C\9628;
                                                                ;;                        ;
CODE_019624:          LDA.B !SpriteNumber,X                     ;;9624|9624+9624/9624\9630; \ Branch away if sprite isn't a Bob-omb 
                      CMP.B #$0D                                ;;9626|9626+9626/9626\9632;  | 
                      BNE CODE_01965C                           ;;9628|9628+9628/9628\9634; / 
                      LDA.W !SpriteMisc1540,X                   ;;962A|962A+962A/962A\9636; \ Branch away if it's not time to explode 
                      CMP.B #$01                                ;;962D|962D+962D/962D\9639;  | 
                      BNE +                                     ;;962F|962F+962F/962F\963B; / 
                      LDA.B #!SFX_KAPOW                         ;;9631|9631+9631/9631\963D; \ Bomb sound effect 
                      STA.W !SPCIO3                             ;;9633|9633+9633/9633\963F; / 
                      LDA.B #$01                                ;;9636|9636+9636/9636\9642;
                      STA.W !SpriteMisc1534,X                   ;;9638|9638+9638/9638\9644;
                      LDA.B #$40                                ;;963B|963B+963B/963B\9647; \ Set explosion timer 
                      STA.W !SpriteMisc1540,X                   ;;963D|963D+963D/963D\9649; / 
                      LDA.B #$08                                ;;9640|9640+9640/9640\964C; \ Set normal status 
                      STA.W !SpriteStatus,X                     ;;9642|9642+9642/9642\964E; / 
                      LDA.W !SpriteTweakerE,X                   ;;9645|9645+9645/9645\9651; \ Set to interact with other sprites 
                      AND.B #$F7                                ;;9648|9648+9648/9648\9654;  | 
                      STA.W !SpriteTweakerE,X                   ;;964A|964A+964A/964A\9656; / 
                      RTS                                       ;;964D|964D+964D/964D\9659; Return 
                                                                ;;                        ;
                    + CMP.B #$40                                ;;964E|964E+964E/964E\965A;
                      BCS +                                     ;;9650|9650+9650/9650\965C;
                      ASL A                                     ;;9652|9652+9652/9652\965E;
                      AND.B #$0E                                ;;9653|9653+9653/9653\965F;
                      EOR.W !SpriteOBJAttribute,X               ;;9655|9655+9655/9655\9661;
                      STA.W !SpriteOBJAttribute,X               ;;9658|9658+9658/9658\9664;
                    + RTS                                       ;;965B|965B+965B/965B\9667; Return 
                                                                ;;                        ;
CODE_01965C:          LDA.W !SpriteMisc1540,X                   ;;965C|965C+965C/965C\9668;
                      ORA.W !SpriteMisc1558,X                   ;;965F|965F+965F/965F\966B;
                      STA.B !SpriteTableC2,X                    ;;9662|9662+9662/9662\966E;
                      LDA.W !SpriteMisc1558,X                   ;;9664|9664+9664/9664\9670;
                      BEQ CODE_01969C                           ;;9667|9667+9667/9667\9673;
                      CMP.B #$01                                ;;9669|9669+9669/9669\9675;
                      BNE CODE_01969C                           ;;966B|966B+966B/966B\9677;
                      LDY.W !SpriteMisc1594,X                   ;;966D|966D+966D/966D\9679;
                      LDA.W !SpriteOnYoshiTongue,Y              ;;9670|9670+9670/9670\967C;
                      BNE CODE_01969C                           ;;9673|9673+9673/9673\967F;
                      JSL LoadSpriteTables                      ;;9675|9675+9675/9675\9681;
                      JSR FaceMario                             ;;9679|9679+9679/9679\9685;
                      ASL.W !SpriteOBJAttribute,X               ;;967C|967C+967C/967C\9688;
                      LSR.W !SpriteOBJAttribute,X               ;;967F|967F+967F/967F\968B;
                      LDY.W !SpriteMisc160E,X                   ;;9682|9682+9682/9682\968E;
                      LDA.B #$08                                ;;9685|9685+9685/9685\9691;
                      CPY.B #$03                                ;;9687|9687+9687/9687\9693;
                      BNE +                                     ;;9689|9689+9689/9689\9695;
                      INC.W !SpriteMisc187B,X                   ;;968B|968B+968B/968B\9697;
                      LDA.W !SpriteTweakerC,X                   ;;968E|968E+968E/968E\969A; \ Disable fireball/cape killing 
                      ORA.B #$30                                ;;9691|9691+9691/9691\969D;  | 
                      STA.W !SpriteTweakerC,X                   ;;9693|9693+9693/9693\969F; / 
                      LDA.B #$0A                                ;;9696|9696+9696/9696\96A2; \ Sprite status = Kicked 
                    + STA.W !SpriteStatus,X                     ;;9698|9698+9698/9698\96A4; / 
                    - RTS                                       ;;969B|969B+969B/969B\96A7; Return 
                                                                ;;                        ;
CODE_01969C:          LDA.W !SpriteMisc1540,X                   ;;969C|969C+969C/969C\96A8; \ Return if stun timer == 0 
                      BEQ -                                     ;;969F|969F+969F/969F\96AB; / 
                      CMP.B #$03                                ;;96A1|96A1+96A1/96A1\96AD; \ If stun timer == 3, un-stun the sprite 
                      BEQ UnstunSprite                          ;;96A3|96A3+96A3/96A3\96AF; / 
                      CMP.B #$01                                ;;96A5|96A5+96A5/96A5\96B1; \ Every other frame, increment the stall timer 
                      BNE IncrmntStunTimer                      ;;96A7|96A7+96A7/96A7\96B3; /  to emulates a slower timer 
UnstunSprite:         LDA.B !SpriteNumber,X                     ;;96A9|96A9+96A9/96A9\96B5; \ Branch if Buzzy Beetle 
                      CMP.B #$11                                ;;96AB|96AB+96AB/96AB\96B7;  | 
                      BEQ SetNormalStatus                       ;;96AD|96AD+96AD/96AD\96B9; / 
                      CMP.B #$2E                                ;;96AF|96AF+96AF/96AF\96BB; \ Branch if Spike Top 
                      BEQ SetNormalStatus                       ;;96B1|96B1+96B1/96B1\96BD; / 
                      CMP.B #$2D                                ;;96B3|96B3+96B3/96B3\96BF; \ Return if Baby Yoshi 
                      BEQ Return0196CA                          ;;96B5|96B5+96B5/96B5\96C1; / 
                      CMP.B #$A2                                ;;96B7|96B7+96B7/96B7\96C3; \ Branch if MechaKoopa 
                      BEQ SetNormalStatus                       ;;96B9|96B9+96B9/96B9\96C5; / 
                      CMP.B #$0F                                ;;96BB|96BB+96BB/96BB\96C7; \ Branch if Goomba 
                      BEQ SetNormalStatus                       ;;96BD|96BD+96BD/96BD\96C9; / 
                      CMP.B #$2C                                ;;96BF|96BF+96BF/96BF\96CB; \ Branch if Yoshi Egg 
                      BEQ Return0196CA                          ;;96C1|96C1+96C1/96C1\96CD; / 
                      CMP.B #$53                                ;;96C3|96C3+96C3/96C3\96CF; \ Branch if not Throw Block 
                      BNE GeneralResetSpr                       ;;96C5|96C5+96C5/96C5\96D1; / 
                      JSR CODE_019ACB                           ;;96C7|96C7+96C7/96C7\96D3; Set throw block to vanish 
Return0196CA:         RTS                                       ;;96CA|96CA+96CA/96CA\96D6; Return 
                                                                ;;                        ;
SetNormalStatus:      LDA.B #$08                                ;;96CB|96CB+96CB/96CB\96D7; \ Sprite Status = Normal 
                      STA.W !SpriteStatus,X                     ;;96CD|96CD+96CD/96CD\96D9; / 
                      ASL.W !SpriteOBJAttribute,X               ;;96D0|96D0+96D0/96D0\96DC; \ Clear vertical flip bit 
                      LSR.W !SpriteOBJAttribute,X               ;;96D3|96D3+96D3/96D3\96DF; / 
                      RTS                                       ;;96D6|96D6+96D6/96D6\96E2; Return 
                                                                ;;                        ;
IncrmntStunTimer:     LDA.B !TrueFrame                          ;;96D7|96D7+96D7/96D7\96E3; \ Increment timer every other frame 
                      AND.B #$01                                ;;96D9|96D9+96D9/96D9\96E5;  | 
                      BNE +                                     ;;96DB|96DB+96DB/96DB\96E7;  | 
                      INC.W !SpriteMisc1540,X                   ;;96DD|96DD+96DD/96DD\96E9;  | 
                    + RTS                                       ;;96E0|96E0+96E0/96E0\96EC; / 
                                                                ;;                        ;
GeneralResetSpr:      JSL FindFreeSprSlot                       ;;96E1|96E1+96E1/96E1\96ED; \ Return if no free sprite slot found 
                      BMI Return0196CA                          ;;96E5|96E5+96E5/96E5\96F1; / 
                      LDA.B #$08                                ;;96E7|96E7+96E7/96E7\96F3; \ Sprite status = Normal 
                      STA.W !SpriteStatus,Y                     ;;96E9|96E9+96E9/96E9\96F5; / 
                      LDA.B !SpriteNumber,X                     ;;96EC|96EC+96EC/96EC\96F8; \ Store sprite number for shelless koopa 
                      TAX                                       ;;96EE|96EE+96EE/96EE\96FA;  | 
                      LDA.W SpriteKoopasSpawn,X                 ;;96EF|96EF+96EF/96EF\96FB;  | 
                      STA.W !SpriteNumber,Y                     ;;96F2|96F2+96F2/96F2\96FE; / 
                      TYX                                       ;;96F5|96F5+96F5/96F5\9701; \ Reset sprite tables 
                      JSL InitSpriteTables                      ;;96F6|96F6+96F6/96F6\9702;  | 
                      LDX.W !CurSpriteProcess                   ;;96FA|96FA+96FA/96FA\9706; / 
                      LDA.B !SpriteXPosLow,X                    ;;96FD|96FD+96FD/96FD\9709; \ Shelless Koopa position = Koopa position 
                      STA.W !SpriteXPosLow,Y                    ;;96FF|96FF+96FF/96FF\970B;  | 
                      LDA.W !SpriteYPosHigh,X                   ;;9702|9702+9702/9702\970E;  | 
                      STA.W !SpriteYPosHigh,Y                   ;;9705|9705+9705/9705\9711;  | 
                      LDA.B !SpriteYPosLow,X                    ;;9708|9708+9708/9708\9714;  | 
                      STA.W !SpriteYPosLow,Y                    ;;970A|970A+970A/970A\9716;  | 
                      LDA.W !SpriteXPosHigh,X                   ;;970D|970D+970D/970D\9719;  | 
                      STA.W !SpriteXPosHigh,Y                   ;;9710|9710+9710/9710\971C; / 
                      LDA.B #$00                                ;;9713|9713+9713/9713\971F; \ Direction = 0 
                      STA.W !SpriteMisc157C,Y                   ;;9715|9715+9715/9715\9721; / 
                      LDA.B #$10                                ;;9718|9718+9718/9718\9724;
                      STA.W !SpriteMisc1564,Y                   ;;971A|971A+971A/971A\9726;
                      LDA.W !SpriteInLiquid,X                   ;;971D|971D+971D/971D\9729;
                      STA.W !SpriteInLiquid,Y                   ;;9720|9720+9720/9720\972C;
                      LDA.W !SpriteMisc1540,X                   ;;9723|9723+9723/9723\972F;
                      STZ.W !SpriteMisc1540,X                   ;;9726|9726+9726/9726\9732;
                      CMP.B #$01                                ;;9729|9729+9729/9729\9735;
                      BEQ +                                     ;;972B|972B+972B/972B\9737;
                      LDA.B #$D0                                ;;972D|972D+972D/972D\9739; \ Set upward speed 
                      STA.W !SpriteYSpeed,Y                     ;;972F|972F+972F/972F\973B; / 
                      PHY                                       ;;9732|9732+9732/9732\973E; \ Make Shelless Koopa face away from Mario 
                      JSR SubHorizPos                           ;;9733|9733+9733/9733\973F;  | 
                      TYA                                       ;;9736|9736+9736/9736\9742;  | 
                      EOR.B #$01                                ;;9737|9737+9737/9737\9743;  | 
                      PLY                                       ;;9739|9739+9739/9739\9745;  | 
                      STA.W !SpriteMisc157C,Y                   ;;973A|973A+973A/973A\9746; / 
                      PHX                                       ;;973D|973D+973D/973D\9749; \ Set Shelless X speed 
                      TAX                                       ;;973E|973E+973E/973E\974A;  | 
                      LDA.W Spr0to13SpeedX,X                    ;;973F|973F+973F/973F\974B;  | 
                      STA.W !SpriteXSpeed,Y                     ;;9742|9742+9742/9742\974E;  | 
                      PLX                                       ;;9745|9745+9745/9745\9751; / 
                      RTS                                       ;;9746|9746+9746/9746\9752; Return 
                                                                ;;                        ;
                    + PHY                                       ;;9747|9747+9747/9747\9753;
                      JSR SubHorizPos                           ;;9748|9748+9748/9748\9754;
                      LDA.W DATA_0197AD,Y                       ;;974B|974B+974B/974B\9757;
                      STY.B !_0                                 ;;974E|974E+974E/974E\975A;
                      PLY                                       ;;9750|9750+9750/9750\975C;
                      STA.W !SpriteXSpeed,Y                     ;;9751|9751+9751/9751\975D;
                      LDA.B !_0                                 ;;9754|9754+9754/9754\9760;
                      EOR.B #$01                                ;;9756|9756+9756/9756\9762;
                      STA.W !SpriteMisc157C,Y                   ;;9758|9758+9758/9758\9764;
                      STA.B !_1                                 ;;975B|975B+975B/975B\9767;
                      LDA.B #$10                                ;;975D|975D+975D/975D\9769;
                      STA.W !SpriteMisc154C,Y                   ;;975F|975F+975F/975F\976B;
                      STA.W !SpriteMisc1528,Y                   ;;9762|9762+9762/9762\976E;
                      LDA.B !SpriteNumber,X                     ;;9765|9765+9765/9765\9771; \ If Yellow Koopa... 
                      CMP.B #$07                                ;;9767|9767+9767/9767\9773;  | 
                      BNE Return019775                          ;;9769|9769+9769/9769\9775;  | 
                      LDY.B #$08                                ;;976B|976B+976B/976B\9777;  | ...find free sprite slot... 
CODE_01976D:          LDA.W !SpriteStatus,Y                     ;;976D|976D+976D/976D\9779;  | 
                      BEQ SpawnMovingCoin                       ;;9770|9770+9770/9770\977C;  | ...and spawn moving coin 
                      DEY                                       ;;9772|9772+9772/9772\977E;  | 
                      BPL CODE_01976D                           ;;9773|9773+9773/9773\977F; / 
Return019775:         RTS                                       ;;9775|9775+9775/9775\9781; Return 
                                                                ;;                        ;
SpawnMovingCoin:      LDA.B #$08                                ;;9776|9776+9776/9776\9782; \ Sprite status = normal 
                      STA.W !SpriteStatus,Y                     ;;9778|9778+9778/9778\9784; / 
                      LDA.B #$21                                ;;977B|977B+977B/977B\9787; \ Sprite = Moving Coin 
                      STA.W !SpriteNumber,Y                     ;;977D|977D+977D/977D\9789; / 
                      LDA.B !SpriteXPosLow,X                    ;;9780|9780+9780/9780\978C; \ Copy X position to coin 
                      STA.W !SpriteXPosLow,Y                    ;;9782|9782+9782/9782\978E;  | 
                      LDA.W !SpriteYPosHigh,X                   ;;9785|9785+9785/9785\9791;  | 
                      STA.W !SpriteYPosHigh,Y                   ;;9788|9788+9788/9788\9794; / 
                      LDA.B !SpriteYPosLow,X                    ;;978B|978B+978B/978B\9797; \ Copy Y position to coin 
                      STA.W !SpriteYPosLow,Y                    ;;978D|978D+978D/978D\9799;  | 
                      LDA.W !SpriteXPosHigh,X                   ;;9790|9790+9790/9790\979C;  | 
                      STA.W !SpriteXPosHigh,Y                   ;;9793|9793+9793/9793\979F; / 
                      PHX                                       ;;9796|9796+9796/9796\97A2; \ 
                      TYX                                       ;;9797|9797+9797/9797\97A3;  | 
                      JSL InitSpriteTables                      ;;9798|9798+9798/9798\97A4;  | Clear all sprite tables, and load new values 
                      PLX                                       ;;979C|979C+979C/979C\97A8; / 
                      LDA.B #$D0                                ;;979D|979D+979D/979D\97A9; \ Set Y speed 
                      STA.W !SpriteYSpeed,Y                     ;;979F|979F+979F/979F\97AB; / 
                      LDA.B !_1                                 ;;97A2|97A2+97A2/97A2\97AE; \ Set direction 
                      STA.W !SpriteMisc157C,Y                   ;;97A4|97A4+97A4/97A4\97B0; / 
                      LDA.B #$20                                ;;97A7|97A7+97A7/97A7\97B3;
                      STA.W !SpriteMisc154C,Y                   ;;97A9|97A9+97A9/97A9\97B5;
                      RTS                                       ;;97AC|97AC+97AC/97AC\97B8; Return 
                                                                ;;                        ;
                                                                ;;                        ;
DATA_0197AD:          db $C0,$40                                ;;97AD|97AD+97AD/97AD\97B9;
                                                                ;;                        ;
DATA_0197AF:          db $00,$00,$00,$F8,$F8,$F8,$F8,$F8        ;;97AF|97AF+97AF/97AF\97BB;
                      db $F8,$F7,$F6,$F5,$F4,$F3,$F2,$E8        ;;97B7|97B7+97B7/97B7\97C3;
                      db $E8,$E8,$E8,$00,$00,$00,$00,$FE        ;;97BF|97BF+97BF/97BF\97CB;
                      db $FC,$F8,$EC,$EC,$EC,$E8,$E4,$E0        ;;97C7|97C7+97C7/97C7\97D3;
                      db $DC,$D8,$D4,$D0,$CC,$C8                ;;97CF|97CF+97CF/97CF\97DB;
                                                                ;;                        ;
CODE_0197D5:          LDA.B !SpriteXSpeed,X                     ;;97D5|97D5+97D5/97D5\97E1;
                      PHP                                       ;;97D7|97D7+97D7/97D7\97E3;
                      BPL +                                     ;;97D8|97D8+97D8/97D8\97E4;
                      JSR InvertAccum                           ;;97DA|97DA+97DA/97DA\97E6;
                    + LSR A                                     ;;97DD|97DD+97DD/97DD\97E9;
                      PLP                                       ;;97DE|97DE+97DE/97DE\97EA;
                      BPL +                                     ;;97DF|97DF+97DF/97DF\97EB;
                      JSR InvertAccum                           ;;97E1|97E1+97E1/97E1\97ED;
                    + STA.B !SpriteXSpeed,X                     ;;97E4|97E4+97E4/97E4\97F0;
                      LDA.B !SpriteYSpeed,X                     ;;97E6|97E6+97E6/97E6\97F2;
                      PHA                                       ;;97E8|97E8+97E8/97E8\97F4;
                      JSR SetSomeYSpeed__                       ;;97E9|97E9+97E9/97E9\97F5;
                      PLA                                       ;;97EC|97EC+97EC/97EC\97F8;
                      LSR A                                     ;;97ED|97ED+97ED/97ED\97F9;
                      LSR A                                     ;;97EE|97EE+97EE/97EE\97FA;
                      TAY                                       ;;97EF|97EF+97EF/97EF\97FB;
                      LDA.B !SpriteNumber,X                     ;;97F0|97F0+97F0/97F0\97FC; \ If Goomba, Y += #$13 
                      CMP.B #$0F                                ;;97F2|97F2+97F2/97F2\97FE;  | 
                      BNE +                                     ;;97F4|97F4+97F4/97F4\9800;  | 
                      TYA                                       ;;97F6|97F6+97F6/97F6\9802;  | 
                      CLC                                       ;;97F7|97F7+97F7/97F7\9803;  | 
                      ADC.B #$13                                ;;97F8|97F8+97F8/97F8\9804;  | 
                      TAY                                       ;;97FA|97FA+97FA/97FA\9806; / 
                    + LDA.W DATA_0197AF,Y                       ;;97FB|97FB+97FB/97FB\9807;
                      LDY.W !SpriteBlockedDirs,X                ;;97FE|97FE+97FE/97FE\980A;
                      BMI +                                     ;;9801|9801+9801/9801\980D;
                      STA.B !SpriteYSpeed,X                     ;;9803|9803+9803/9803\980F;
                    + RTS                                       ;;9805|9805+9805/9805\9811; Return 
                                                                ;;                        ;
CODE_019806:          LDA.B #$06                                ;;9806|9806+9806/9806\9812;
                      LDY.W !SpriteOAMIndex,X                   ;;9808|9808+9808/9808\9814; Y = Index into sprite OAM 
                      BNE CODE_01980F                           ;;980B|980B+980B/980B\9817;
                      LDA.B #$08                                ;;980D|980D+980D/980D\9819;
CODE_01980F:          STA.W !SpriteMisc1602,X                   ;;980F|980F+980F/980F\981B;
                      LDA.W !SpriteOAMIndex,X                   ;;9812|9812+9812/9812\981E;
                      PHA                                       ;;9815|9815+9815/9815\9821;
                      BEQ +                                     ;;9816|9816+9816/9816\9822;
                      CLC                                       ;;9818|9818+9818/9818\9824;
                      ADC.B #$08                                ;;9819|9819+9819/9819\9825;
                    + STA.W !SpriteOAMIndex,X                   ;;981B|981B+981B/981B\9827;
                      JSR SubSprGfx2Entry1                      ;;981E|981E+981E/981E\982A;
                      PLA                                       ;;9821|9821+9821/9821\982D;
                      STA.W !SpriteOAMIndex,X                   ;;9822|9822+9822/9822\982E;
                      LDA.W !OWLevelTileSettings+$49            ;;9825|9825+9825/9825\9831;
                      BMI Return0198A6                          ;;9828|9828+9828/9828\9834;
                      LDA.W !SpriteMisc1602,X                   ;;982A|982A+982A/982A\9836;
                      CMP.B #$06                                ;;982D|982D+982D/982D\9839;
                      BNE Return0198A6                          ;;982F|982F+982F/982F\983B;
                      LDY.W !SpriteOAMIndex,X                   ;;9831|9831+9831/9831\983D; Y = Index into sprite OAM 
                      LDA.W !SpriteMisc1558,X                   ;;9834|9834+9834/9834\9840;
                      BNE CODE_019842                           ;;9837|9837+9837/9837\9843;
                      LDA.W !SpriteMisc1540,X                   ;;9839|9839+9839/9839\9845;
                      BEQ Return0198A6                          ;;983C|983C+983C/983C\9848;
                      CMP.B #$30                                ;;983E|983E+983E/983E\984A;
                      BCS +                                     ;;9840|9840+9840/9840\984C;
CODE_019842:          LSR A                                     ;;9842|9842+9842/9842\984E;
                      LDA.W !OAMTileXPos+$108,Y                 ;;9843|9843+9843/9843\984F;
                      ADC.B #$00                                ;;9846|9846+9846/9846\9852;
                      BCS +                                     ;;9848|9848+9848/9848\9854;
                      STA.W !OAMTileXPos+$108,Y                 ;;984A|984A+984A/984A\9856;
                    + LDA.B !SpriteNumber,X                     ;;984D|984D+984D/984D\9859; \ Branch away if a Buzzy Beetle 
                      CMP.B #$11                                ;;984F|984F+984F/984F\985B;  | 
                      BEQ Return0198A6                          ;;9851|9851+9851/9851\985D; / 
                      JSR IsSprOffScreen                        ;;9853|9853+9853/9853\985F;
                      BNE Return0198A6                          ;;9856|9856+9856/9856\9862;
                      LDA.W !SpriteOBJAttribute,X               ;;9858|9858+9858/9858\9864;
                      ASL A                                     ;;985B|985B+985B/985B\9867;
                      LDA.B #$08                                ;;985C|985C+985C/985C\9868;
                      BCC +                                     ;;985E|985E+985E/985E\986A;
                      LDA.B #$00                                ;;9860|9860+9860/9860\986C;
                    + STA.B !_0                                 ;;9862|9862+9862/9862\986E;
                      LDA.W !OAMTileXPos+$108,Y                 ;;9864|9864+9864/9864\9870;
                      CLC                                       ;;9867|9867+9867/9867\9873;
                      ADC.B #$02                                ;;9868|9868+9868/9868\9874;
                      STA.W !OAMTileXPos+$100,Y                 ;;986A|986A+986A/986A\9876;
                      CLC                                       ;;986D|986D+986D/986D\9879;
                      ADC.B #$04                                ;;986E|986E+986E/986E\987A;
                      STA.W !OAMTileXPos+$104,Y                 ;;9870|9870+9870/9870\987C;
                      LDA.W !OAMTileYPos+$108,Y                 ;;9873|9873+9873/9873\987F;
                      CLC                                       ;;9876|9876+9876/9876\9882;
                      ADC.B !_0                                 ;;9877|9877+9877/9877\9883;
                      STA.W !OAMTileYPos+$100,Y                 ;;9879|9879+9879/9879\9885;
                      STA.W !OAMTileYPos+$104,Y                 ;;987C|987C+987C/987C\9888;
                      PHY                                       ;;987F|987F+987F/987F\988B;
                      LDY.B #$64                                ;;9880|9880+9880/9880\988C;
                      LDA.B !EffFrame                           ;;9882|9882+9882/9882\988E;
                      AND.B #$F8                                ;;9884|9884+9884/9884\9890;
                      BNE +                                     ;;9886|9886+9886/9886\9892;
                      LDY.B #$4D                                ;;9888|9888+9888/9888\9894;
                    + TYA                                       ;;988A|988A+988A/988A\9896;
                      PLY                                       ;;988B|988B+988B/988B\9897;
                      STA.W !OAMTileNo+$100,Y                   ;;988C|988C+988C/988C\9898;
                      STA.W !OAMTileNo+$104,Y                   ;;988F|988F+988F/988F\989B;
                      LDA.B !SpriteProperties                   ;;9892|9892+9892/9892\989E;
                      STA.W !OAMTileAttr+$100,Y                 ;;9894|9894+9894/9894\98A0;
                      STA.W !OAMTileAttr+$104,Y                 ;;9897|9897+9897/9897\98A3;
                      TYA                                       ;;989A|989A+989A/989A\98A6;
                      LSR A                                     ;;989B|989B+989B/989B\98A7;
                      LSR A                                     ;;989C|989C+989C/989C\98A8;
                      TAY                                       ;;989D|989D+989D/989D\98A9;
                      LDA.B #$00                                ;;989E|989E+989E/989E\98AA;
                      STA.W !OAMTileSize+$40,Y                  ;;98A0|98A0+98A0/98A0\98AC;
                      STA.W !OAMTileSize+$41,Y                  ;;98A3|98A3+98A3/98A3\98AF;
Return0198A6:         RTS                                       ;;98A6|98A6+98A6/98A6\98B2; Return 
                                                                ;;                        ;
                                                                ;;                        ;
                      db $E0,$20                                ;;98A7|98A7+98A7/98A7\98B3;
                                                                ;;                        ;
CODE_0198A9:          LDA.B !SpriteLock                         ;;98A9|98A9+98A9/98A9\98B5;
                      BEQ +                                     ;;98AB|98AB+98AB/98AB\98B7;
                      JMP CODE_019A2A                           ;;98AD|98AD+98AD/98AD\98B9;
                                                                ;;                        ;
                    + JSR SubUpdateSprPos                       ;;98B0|98B0+98B0/98B0\98BC;
                      LDA.W !SpriteMisc151C,X                   ;;98B3|98B3+98B3/98B3\98BF;
                      AND.B #$1F                                ;;98B6|98B6+98B6/98B6\98C2;
                      BNE +                                     ;;98B8|98B8+98B8/98B8\98C4;
                      JSR FaceMario                             ;;98BA|98BA+98BA/98BA\98C6;
                    + LDA.B !SpriteXSpeed,X                     ;;98BD|98BD+98BD/98BD\98C9;
                      LDY.W !SpriteMisc157C,X                   ;;98BF|98BF+98BF/98BF\98CB;
                      CPY.B #$00                                ;;98C2|98C2+98C2/98C2\98CE;
                      BNE CODE_0198D0                           ;;98C4|98C4+98C4/98C4\98D0;
                      CMP.B #$20                                ;;98C6|98C6+98C6/98C6\98D2;
                      BPL +                                     ;;98C8|98C8+98C8/98C8\98D4;
                      INC.B !SpriteXSpeed,X                     ;;98CA|98CA+98CA/98CA\98D6;
                      INC.B !SpriteXSpeed,X                     ;;98CC|98CC+98CC/98CC\98D8;
                      BRA +                                     ;;98CE|98CE+98CE/98CE\98DA;
                                                                ;;                        ;
CODE_0198D0:          CMP.B #$E0                                ;;98D0|98D0+98D0/98D0\98DC;
                      BMI +                                     ;;98D2|98D2+98D2/98D2\98DE;
                      DEC.B !SpriteXSpeed,X                     ;;98D4|98D4+98D4/98D4\98E0;
                      DEC.B !SpriteXSpeed,X                     ;;98D6|98D6+98D6/98D6\98E2;
                    + JSR IsTouchingObjSide                     ;;98D8|98D8+98D8/98D8\98E4;
                      BEQ +                                     ;;98DB|98DB+98DB/98DB\98E7;
                      PHA                                       ;;98DD|98DD+98DD/98DD\98E9;
                      JSR CODE_01999E                           ;;98DE|98DE+98DE/98DE\98EA;
                      PLA                                       ;;98E1|98E1+98E1/98E1\98ED;
                      AND.B #$03                                ;;98E2|98E2+98E2/98E2\98EE;
                      TAY                                       ;;98E4|98E4+98E4/98E4\98F0;
                      LDA.W Return0198A6,Y                      ;;98E5|98E5+98E5/98E5\98F1;
                      STA.B !SpriteXSpeed,X                     ;;98E8|98E8+98E8/98E8\98F4;
                    + JSR IsOnGround                            ;;98EA|98EA+98EA/98EA\98F6;
                      BEQ +                                     ;;98ED|98ED+98ED/98ED\98F9;
                      JSR SetSomeYSpeed__                       ;;98EF|98EF+98EF/98EF\98FB;
                      LDA.B #$10                                ;;98F2|98F2+98F2/98F2\98FE;
                      STA.B !SpriteYSpeed,X                     ;;98F4|98F4+98F4/98F4\9900;
                    + JSR IsTouchingCeiling                     ;;98F6|98F6+98F6/98F6\9902;
                      BEQ +                                     ;;98F9|98F9+98F9/98F9\9905;
                      STZ.B !SpriteYSpeed,X                     ;;98FB|98FB+98FB/98FB\9907; Sprite Y Speed = 0 
                    + LDA.B !TrueFrame                          ;;98FD|98FD+98FD/98FD\9909;
                      AND.B #$01                                ;;98FF|98FF+98FF/98FF\990B;
                      BNE +                                     ;;9901|9901+9901/9901\990D;
                      LDA.W !SpriteOBJAttribute,X               ;;9903|9903+9903/9903\990F;
                      INC A                                     ;;9906|9906+9906/9906\9912;
                      INC A                                     ;;9907|9907+9907/9907\9913;
                      AND.B #$CF                                ;;9908|9908+9908/9908\9914;
                      STA.W !SpriteOBJAttribute,X               ;;990A|990A+990A/990A\9916;
                    + JMP CODE_01998C                           ;;990D|990D+990D/990D\9919;
                                                                ;;                        ;
                                                                ;;                        ;
                      db $F0,$EE,$EC                            ;;9910|9910+9910/9910\991C;
                                                                ;;                        ;
HandleSprKicked:      LDA.W !SpriteMisc187B,X                   ;;9913|9913+9913/9913\991F;
                      BEQ +                                     ;;9916|9916+9916/9916\9922;
                      JMP CODE_0198A9                           ;;9918|9918+9918/9918\9924;
                                                                ;;                        ;
                    + LDA.W !SpriteTweakerD,X                   ;;991B|991B+991B/991B\9927;
                      AND.B #$10                                ;;991E|991E+991E/991E\992A;
                      BEQ +                                     ;;9920|9920+9920/9920\992C;
                      JSR CODE_01AA0B                           ;;9922|9922+9922/9922\992E;
                      JMP CODE_01A187                           ;;9925|9925+9925/9925\9931;
                                                                ;;                        ;
                    + LDA.W !SpriteMisc1528,X                   ;;9928|9928+9928/9928\9934;
                      BNE +                                     ;;992B|992B+992B/992B\9937;
                      LDA.B !SpriteXSpeed,X                     ;;992D|992D+992D/992D\9939;
                      CLC                                       ;;992F|992F+992F/992F\993B;
                      ADC.B #$20                                ;;9930|9930+9930/9930\993C;
                      CMP.B #$40                                ;;9932|9932+9932/9932\993E;
                      BCS +                                     ;;9934|9934+9934/9934\9940;
                      JSR CODE_01AA0B                           ;;9936|9936+9936/9936\9942;
                    + STZ.W !SpriteMisc1528,X                   ;;9939|9939+9939/9939\9945;
                      LDA.B !SpriteLock                         ;;993C|993C+993C/993C\9948;
                      ORA.W !SpriteMisc163E,X                   ;;993E|993E+993E/993E\994A;
                      BEQ +                                     ;;9941|9941+9941/9941\994D;
                      JMP CODE_01998F                           ;;9943|9943+9943/9943\994F;
                                                                ;;                        ;
                    + JSR UpdateDirection                       ;;9946|9946+9946/9946\9952;
                      LDA.W !SpriteSlope,X                      ;;9949|9949+9949/9949\9955;
                      PHA                                       ;;994C|994C+994C/994C\9958;
                      JSR SubUpdateSprPos                       ;;994D|994D+994D/994D\9959;
                      PLA                                       ;;9950|9950+9950/9950\995C;
                      BEQ CODE_019969                           ;;9951|9951+9951/9951\995D;
                      STA.B !_0                                 ;;9953|9953+9953/9953\995F;
                      LDY.W !SpriteInLiquid,X                   ;;9955|9955+9955/9955\9961;
                      BNE CODE_019969                           ;;9958|9958+9958/9958\9964;
                      CMP.W !SpriteSlope,X                      ;;995A|995A+995A/995A\9966;
                      BEQ CODE_019969                           ;;995D|995D+995D/995D\9969;
                      EOR.B !SpriteXSpeed,X                     ;;995F|995F+995F/995F\996B;
                      BMI CODE_019969                           ;;9961|9961+9961/9961\996D;
                      LDA.B #$F8                                ;;9963|9963+9963/9963\996F; \ Set upward speed 
                      STA.B !SpriteYSpeed,X                     ;;9965|9965+9965/9965\9971; / 
                      BRA CODE_019975                           ;;9967|9967+9967/9967\9973;
                                                                ;;                        ;
CODE_019969:          JSR IsOnGround                            ;;9969|9969+9969/9969\9975;
                      BEQ CODE_019984                           ;;996C|996C+996C/996C\9978;
                      JSR SetSomeYSpeed__                       ;;996E|996E+996E/996E\997A;
                      LDA.B #$10                                ;;9971|9971+9971/9971\997D; \ Set downward speed 
                      STA.B !SpriteYSpeed,X                     ;;9973|9973+9973/9973\997F; / 
CODE_019975:          LDA.W !SprMap16TouchHorizLow              ;;9975|9975+9975/9975\9981;
                      CMP.B #$B5                                ;;9978|9978+9978/9978\9984;
                      BEQ CODE_019980                           ;;997A|997A+997A/997A\9986;
                      CMP.B #$B4                                ;;997C|997C+997C/997C\9988;
                      BNE CODE_019984                           ;;997E|997E+997E/997E\998A;
CODE_019980:          LDA.B #$B8                                ;;9980|9980+9980/9980\998C;
                      STA.B !SpriteYSpeed,X                     ;;9982|9982+9982/9982\998E;
CODE_019984:          JSR IsTouchingObjSide                     ;;9984|9984+9984/9984\9990;
                      BEQ CODE_01998C                           ;;9987|9987+9987/9987\9993;
                      JSR CODE_01999E                           ;;9989|9989+9989/9989\9995;
CODE_01998C:          JSR SubSprSpr_MarioSpr                    ;;998C|998C+998C/998C\9998;
CODE_01998F:          JSR SubOffscreen0Bnk1                     ;;998F|998F+998F/998F\999B;
                      LDA.B !SpriteNumber,X                     ;;9992|9992+9992/9992\999E; \ Branch if throw block sprite 
                      CMP.B #$53                                ;;9994|9994+9994/9994\99A0;  | 
                      BEQ +                                     ;;9996|9996+9996/9996\99A2; / 
                      JMP CODE_019A2A                           ;;9998|9998+9998/9998\99A4;
                                                                ;;                        ;
                    + JMP StunThrowBlock                        ;;999B|999B+999B/999B\99A7;
                                                                ;;                        ;
CODE_01999E:          LDA.B #!SFX_BONK                          ;;999E|999E+999E/999E\99AA;
                      STA.W !SPCIO0                             ;;99A0|99A0+99A0/99A0\99AC; / Play sound effect 
                      JSR CODE_0190A2                           ;;99A3|99A3+99A3/99A3\99AF;
                      LDA.W !SpriteOffscreenX,X                 ;;99A6|99A6+99A6/99A6\99B2;
                      BNE +                                     ;;99A9|99A9+99A9/99A9\99B5;
                      LDA.B !SpriteXPosLow,X                    ;;99AB|99AB+99AB/99AB\99B7;
                      SEC                                       ;;99AD|99AD+99AD/99AD\99B9;
                      SBC.B !Layer1XPos                         ;;99AE|99AE+99AE/99AE\99BA;
                      CLC                                       ;;99B0|99B0+99B0/99B0\99BC;
                      ADC.B #$14                                ;;99B1|99B1+99B1/99B1\99BD;
                      CMP.B #$1C                                ;;99B3|99B3+99B3/99B3\99BF;
                      BCC +                                     ;;99B5|99B5+99B5/99B5\99C1;
                      LDA.W !SpriteBlockedDirs,X                ;;99B7|99B7+99B7/99B7\99C3;
                      AND.B #$40                                ;;99BA|99BA+99BA/99BA\99C6;
                      ASL A                                     ;;99BC|99BC+99BC/99BC\99C8;
                      ASL A                                     ;;99BD|99BD+99BD/99BD\99C9;
                      ROL A                                     ;;99BE|99BE+99BE/99BE\99CA;
                      AND.B #$01                                ;;99BF|99BF+99BF/99BF\99CB;
                      STA.W !LayerProcessing                    ;;99C1|99C1+99C1/99C1\99CD;
                      LDY.B #$00                                ;;99C4|99C4+99C4/99C4\99D0;
                      LDA.W !Map16TileDestroy                   ;;99C6|99C6+99C6/99C6\99D2;
                      JSL CODE_00F160                           ;;99C9|99C9+99C9/99C9\99D5;
                      LDA.B #$05                                ;;99CD|99CD+99CD/99CD\99D9;
                      STA.W !SpriteMisc1FE2,X                   ;;99CF|99CF+99CF/99CF\99DB;
                    + LDA.B !SpriteNumber,X                     ;;99D2|99D2+99D2/99D2\99DE; \ If Throw Block, break it 
                      CMP.B #$53                                ;;99D4|99D4+99D4/99D4\99E0;  | 
                      BNE +                                     ;;99D6|99D6+99D6/99D6\99E2;  | 
                      JSR BreakThrowBlock                       ;;99D8|99D8+99D8/99D8\99E4; / 
                    + RTS                                       ;;99DB|99DB+99DB/99DB\99E7; Return 
                                                                ;;                        ;
BreakThrowBlock:      STZ.W !SpriteStatus,X                     ;;99DC|99DC+99DC/99DC\99E8; Free up sprite slot 
                      LDY.B #$FF                                ;;99DF|99DF+99DF/99DF\99EB; Is this for the shatter routine?? 
CODE_0199E1:          JSR IsSprOffScreen                        ;;99E1|99E1+99E1/99E1\99ED; \ Return if off screen 
                      BNE +                                     ;;99E4|99E4+99E4/99E4\99F0; / 
                      LDA.B !SpriteXPosLow,X                    ;;99E6|99E6+99E6/99E6\99F2; \ Store Y position in $9A-$9B 
                      STA.B !TouchBlockXPos                     ;;99E8|99E8+99E8/99E8\99F4;  | 
                      LDA.W !SpriteYPosHigh,X                   ;;99EA|99EA+99EA/99EA\99F6;  | 
                      STA.B !TouchBlockXPos+1                   ;;99ED|99ED+99ED/99ED\99F9; / 
                      LDA.B !SpriteYPosLow,X                    ;;99EF|99EF+99EF/99EF\99FB; \ Store X position in $98-$99 
                      STA.B !TouchBlockYPos                     ;;99F1|99F1+99F1/99F1\99FD;  | 
                      LDA.W !SpriteXPosHigh,X                   ;;99F3|99F3+99F3/99F3\99FF;  | 
                      STA.B !TouchBlockYPos+1                   ;;99F6|99F6+99F6/99F6\9A02; / 
                      PHB                                       ;;99F8|99F8+99F8/99F8\9A04; \ Shatter the brick 
                      LDA.B #$02                                ;;99F9|99F9+99F9/99F9\9A05;  | 
                      PHA                                       ;;99FB|99FB+99FB/99FB\9A07;  | 
                      PLB                                       ;;99FC|99FC+99FC/99FC\9A08;  | 
                      TYA                                       ;;99FD|99FD+99FD/99FD\9A09;  | 
                      JSL ShatterBlock                          ;;99FE|99FE+99FE/99FE\9A0A;  | 
                      PLB                                       ;;9A02|9A02+9A02/9A02\9A0E; / 
                    + RTS                                       ;;9A03|9A03+9A03/9A03\9A0F; Return 
                                                                ;;                        ;
SetSomeYSpeed__:      LDA.W !SpriteBlockedDirs,X                ;;9A04|9A04+9A04/9A04\9A10;
                      BMI CODE_019A10                           ;;9A07|9A07+9A07/9A07\9A13;
                      LDA.B #$00                                ;;9A09|9A09+9A09/9A09\9A15; \ Sprite Y speed = #$00 or #$18 
                      LDY.W !SpriteSlope,X                      ;;9A0B|9A0B+9A0B/9A0B\9A17;  | Depending on 15B8,x ??? 
                      BEQ +                                     ;;9A0E|9A0E+9A0E/9A0E\9A1A;  | 
CODE_019A10:          LDA.B #$18                                ;;9A10|9A10+9A10/9A10\9A1C;  | 
                    + STA.B !SpriteYSpeed,X                     ;;9A12|9A12+9A12/9A12\9A1E; / 
                      RTS                                       ;;9A14|9A14+9A14/9A14\9A20; Return 
                                                                ;;                        ;
UpdateDirection:      LDA.B #$00                                ;;9A15|9A15+9A15/9A15\9A21; \ Subroutine: Set direction from speed value 
                      LDY.B !SpriteXSpeed,X                     ;;9A17|9A17+9A17/9A17\9A23;  | 
                      BEQ Return019A21                          ;;9A19|9A19+9A19/9A19\9A25;  | 
                      BPL +                                     ;;9A1B|9A1B+9A1B/9A1B\9A27;  | 
                      INC A                                     ;;9A1D|9A1D+9A1D/9A1D\9A29;  | 
                    + STA.W !SpriteMisc157C,X                   ;;9A1E|9A1E+9A1E/9A1E\9A2A;  | 
Return019A21:         RTS                                       ;;9A21|9A21+9A21/9A21\9A2D; / 
                                                                ;;                        ;
                                                                ;;                        ;
ShellAniTiles:        db $06,$07,$08,$07                        ;;9A22|9A22+9A22/9A22\9A2E;
                                                                ;;                        ;
ShellGfxProp:         db $00,$00,$00,$40                        ;;9A26|9A26+9A26/9A26\9A32;
                                                                ;;                        ;
CODE_019A2A:          LDA.B !SpriteTableC2,X                    ;;9A2A|9A2A+9A2A/9A2A\9A36;
                      STA.W !SpriteMisc1558,X                   ;;9A2C|9A2C+9A2C/9A2C\9A38;
                      LDA.B !EffFrame                           ;;9A2F|9A2F+9A2F/9A2F\9A3B;
                      LSR A                                     ;;9A31|9A31+9A31/9A31\9A3D;
                      LSR A                                     ;;9A32|9A32+9A32/9A32\9A3E;
                      AND.B #$03                                ;;9A33|9A33+9A33/9A33\9A3F;
                      TAY                                       ;;9A35|9A35+9A35/9A35\9A41;
                      PHY                                       ;;9A36|9A36+9A36/9A36\9A42;
                      LDA.W ShellAniTiles,Y                     ;;9A37|9A37+9A37/9A37\9A43;
                      JSR CODE_01980F                           ;;9A3A|9A3A+9A3A/9A3A\9A46;
                      STZ.W !SpriteMisc1558,X                   ;;9A3D|9A3D+9A3D/9A3D\9A49;
                      PLY                                       ;;9A40|9A40+9A40/9A40\9A4C;
                      LDA.W ShellGfxProp,Y                      ;;9A41|9A41+9A41/9A41\9A4D;
                      LDY.W !SpriteOAMIndex,X                   ;;9A44|9A44+9A44/9A44\9A50; Y = Index into sprite OAM 
                      EOR.W !OAMTileAttr+$108,Y                 ;;9A47|9A47+9A47/9A47\9A53;
                      STA.W !OAMTileAttr+$108,Y                 ;;9A4A|9A4A+9A4A/9A4A\9A56;
                      RTS                                       ;;9A4D|9A4D+9A4D/9A4D\9A59; Return 
                                                                ;;                        ;
                                                                ;;                        ;
SpinJumpSmokeTiles:   db $64,$62,$60,$62                        ;;9A4E|9A4E+9A4E/9A4E\9A5A;
                                                                ;;                        ;
HandleSprSpinJump:    LDA.W !SpriteMisc1540,X                   ;;9A52|9A52+9A52/9A52\9A5E; \ Erase sprite if time up 
                      BEQ SpinJumpEraseSpr                      ;;9A55|9A55+9A55/9A55\9A61; / 
                      JSR SubSprGfx2Entry1                      ;;9A57|9A57+9A57/9A57\9A63; Call generic gfx routine 
                      LDY.W !SpriteOAMIndex,X                   ;;9A5A|9A5A+9A5A/9A5A\9A66; Y = Index into sprite OAM 
                      LDA.W !SpriteMisc1540,X                   ;;9A5D|9A5D+9A5D/9A5D\9A69; \ Load tile based on timer 
                      LSR A                                     ;;9A60|9A60+9A60/9A60\9A6C;  | 
                      LSR A                                     ;;9A61|9A61+9A61/9A61\9A6D;  | 
                      LSR A                                     ;;9A62|9A62+9A62/9A62\9A6E;  | 
                      AND.B #$03                                ;;9A63|9A63+9A63/9A63\9A6F;  | 
                      PHX                                       ;;9A65|9A65+9A65/9A65\9A71;  | 
                      TAX                                       ;;9A66|9A66+9A66/9A66\9A72;  | 
                      LDA.W SpinJumpSmokeTiles,X                ;;9A67|9A67+9A67/9A67\9A73;  | 
                      PLX                                       ;;9A6A|9A6A+9A6A/9A6A\9A76;  / 
                      STA.W !OAMTileNo+$100,Y                   ;;9A6B|9A6B+9A6B/9A6B\9A77; Overwrite tile 
                      STA.W !OAMTileAttr+$100,Y                 ;;9A6E|9A6E+9A6E/9A6E\9A7A; \ Overwrite properties 
                      AND.B #$30                                ;;9A71|9A71+9A71/9A71\9A7D;  | 
                      STA.W !OAMTileAttr+$100,Y                 ;;9A73|9A73+9A73/9A73\9A7F; / 
                      RTS                                       ;;9A76|9A76+9A76/9A76\9A82; Return 
                                                                ;;                        ;
SpinJumpEraseSpr:     JSR OffScrEraseSprite                     ;;9A77|9A77+9A77/9A77\9A83; Permanently kill the sprite 
                      RTS                                       ;;9A7A|9A7A+9A7A/9A7A\9A86; Return 
                                                                ;;                        ;
CODE_019A7B:          LDA.W !SpriteMisc1558,X                   ;;9A7B|9A7B+9A7B/9A7B\9A87;
                      BEQ SpinJumpEraseSpr                      ;;9A7E|9A7E+9A7E/9A7E\9A8A;
                      LDA.B #$04                                ;;9A80|9A80+9A80/9A80\9A8C;
                      STA.B !SpriteYSpeed,X                     ;;9A82|9A82+9A82/9A82\9A8E;
                      ASL.W !SpriteTweakerF,X                   ;;9A84|9A84+9A84/9A84\9A90;
                      LSR.W !SpriteTweakerF,X                   ;;9A87|9A87+9A87/9A87\9A93;
                      LDA.B !SpriteXSpeed,X                     ;;9A8A|9A8A+9A8A/9A8A\9A96;
                      BEQ CODE_019A9D                           ;;9A8C|9A8C+9A8C/9A8C\9A98;
                      BPL CODE_019A94                           ;;9A8E|9A8E+9A8E/9A8E\9A9A;
                      INC.B !SpriteXSpeed,X                     ;;9A90|9A90+9A90/9A90\9A9C;
                      BRA CODE_019A9D                           ;;9A92|9A92+9A92/9A92\9A9E;
                                                                ;;                        ;
CODE_019A94:          DEC.B !SpriteXSpeed,X                     ;;9A94|9A94+9A94/9A94\9AA0;
                      JSR IsTouchingObjSide                     ;;9A96|9A96+9A96/9A96\9AA2;
                      BEQ CODE_019A9D                           ;;9A99|9A99+9A99/9A99\9AA5;
                      STZ.B !SpriteXSpeed,X                     ;;9A9B|9A9B+9A9B/9A9B\9AA7; Sprite X Speed = 0 
CODE_019A9D:          LDA.B #$01                                ;;9A9D|9A9D+9A9D/9A9D\9AA9;
                      STA.W !SpriteBehindScene,X                ;;9A9F|9A9F+9A9F/9A9F\9AAB;
HandleSprKilled:      LDA.B !SpriteNumber,X                     ;;9AA2|9AA2+9AA2/9AA2\9AAE; \ If Wiggler, call main sprite routine 
                      CMP.B #$86                                ;;9AA4|9AA4+9AA4/9AA4\9AB0;  | 
                      BNE +                                     ;;9AA6|9AA6+9AA6/9AA6\9AB2;  | 
                      JMP CallSpriteMain                        ;;9AA8|9AA8+9AA8/9AA8\9AB4; / 
                                                                ;;                        ;
                    + CMP.B #$1E                                ;;9AAB|9AAB+9AAB/9AAB\9AB7; \ If Lakitu, $18E0 = #$FF 
                      BNE +                                     ;;9AAD|9AAD+9AAD/9AAD\9AB9;  | 
                      LDY.B #$FF                                ;;9AAF|9AAF+9AAF/9AAF\9ABB;  | 
                      STY.W !LakituCloudTimer                   ;;9AB1|9AB1+9AB1/9AB1\9ABD; / 
                    + CMP.B #$53                                ;;9AB4|9AB4+9AB4/9AB4\9AC0; \ If Throw Block sprite... 
                      BNE +                                     ;;9AB6|9AB6+9AB6/9AB6\9AC2;  | 
                      JSR BreakThrowBlock                       ;;9AB8|9AB8+9AB8/9AB8\9AC4;  | ...break block... 
                      RTS                                       ;;9ABB|9ABB+9ABB/9ABB\9AC7; / ...and return 
                                                                ;;                        ;
                    + CMP.B #$4C                                ;;9ABC|9ABC+9ABC/9ABC\9AC8; \ If Exploding Block Enemy 
                      BNE +                                     ;;9ABE|9ABE+9ABE/9ABE\9ACA;  | 
                      JSL CODE_02E463                           ;;9AC0|9AC0+9AC0/9AC0\9ACC; / 
                    + LDA.W !SpriteTweakerA,X                   ;;9AC4|9AC4+9AC4/9AC4\9AD0; \ If "disappears in puff of smoke" is set... 
                      AND.B #$80                                ;;9AC7|9AC7+9AC7/9AC7\9AD3;  | 
                      BEQ +                                     ;;9AC9|9AC9+9AC9/9AC9\9AD5;  | 
CODE_019ACB:          LDA.B #$04                                ;;9ACB|9ACB+9ACB/9ACB\9AD7;  | ...Sprite status = Spin Jump Killed... 
                      STA.W !SpriteStatus,X                     ;;9ACD|9ACD+9ACD/9ACD\9AD9;  | 
                      LDA.B #$1F                                ;;9AD0|9AD0+9AD0/9AD0\9ADC;  | ...Set Time to show smoke cloud... 
                      STA.W !SpriteMisc1540,X                   ;;9AD2|9AD2+9AD2/9AD2\9ADE;  | 
                      RTS                                       ;;9AD5|9AD5+9AD5/9AD5\9AE1; / ... and return 
                                                                ;;                        ;
                    + LDA.B !SpriteLock                         ;;9AD6|9AD6+9AD6/9AD6\9AE2; \ Branch if sprites locked 
                      BNE +                                     ;;9AD8|9AD8+9AD8/9AD8\9AE4; / 
                      JSR SubUpdateSprPos                       ;;9ADA|9ADA+9ADA/9ADA\9AE6;
                    + JSR SubOffscreen0Bnk1                     ;;9ADD|9ADD+9ADD/9ADD\9AE9;
                      JSR HandleSpriteDeath                     ;;9AE0|9AE0+9AE0/9AE0\9AEC;
                      RTS                                       ;;9AE3|9AE3+9AE3/9AE3\9AEF; Return 
                                                                ;;                        ;
HandleSprSmushed:     LDA.B !SpriteLock                         ;;9AE4|9AE4+9AE4/9AE4\9AF0; \ Branch if sprites locked 
                      BNE CODE_019AFE                           ;;9AE6|9AE6+9AE6/9AE6\9AF2; / 
                      LDA.W !SpriteMisc1540,X                   ;;9AE8|9AE8+9AE8/9AE8\9AF4; \ Free sprite slot when timer runs out 
                      BNE +                                     ;;9AEB|9AEB+9AEB/9AEB\9AF7;  | 
                      STZ.W !SpriteStatus,X                     ;;9AED|9AED+9AED/9AED\9AF9; / 
                      RTS                                       ;;9AF0|9AF0+9AF0/9AF0\9AFC; Return 
                                                                ;;                        ;
                    + JSR SubUpdateSprPos                       ;;9AF1|9AF1+9AF1/9AF1\9AFD;
                      JSR IsOnGround                            ;;9AF4|9AF4+9AF4/9AF4\9B00;
                      BEQ CODE_019AFE                           ;;9AF7|9AF7+9AF7/9AF7\9B03;
                      JSR SetSomeYSpeed__                       ;;9AF9|9AF9+9AF9/9AF9\9B05;
                      STZ.B !SpriteXSpeed,X                     ;;9AFC|9AFC+9AFC/9AFC\9B08; Sprite X Speed = 0 
CODE_019AFE:          LDA.B !SpriteNumber,X                     ;;9AFE|9AFE+9AFE/9AFE\9B0A; \ If Dino Torch... 
                      CMP.B #$6F                                ;;9B00|9B00+9B00/9B00\9B0C;  | 
                      BNE +                                     ;;9B02|9B02+9B02/9B02\9B0E;  | 
                      JSR SubSprGfx2Entry1                      ;;9B04|9B04+9B04/9B04\9B10;  | ...call standard gfx routine... 
                      LDY.W !SpriteOAMIndex,X                   ;;9B07|9B07+9B07/9B07\9B13;  | 
                      LDA.B #$AC                                ;;9B0A|9B0A+9B0A/9B0A\9B16;  | ...and replace the tile with #$AC 
                      STA.W !OAMTileNo+$100,Y                   ;;9B0C|9B0C+9B0C/9B0C\9B18;  | 
                      RTS                                       ;;9B0F|9B0F+9B0F/9B0F\9B1B; / Return 
                                                                ;;                        ;
                    + JMP SmushedGfxRt                          ;;9B10|9B10+9B10/9B10\9B1C; Call smushed gfx routine 
                                                                ;;                        ;
HandleSpriteDeath:    LDA.W !SpriteTweakerD,X                   ;;9B13|9B13+9B13/9B13\9B1F; \ If the main routine handles the death state... 
                      AND.B #$01                                ;;9B16|9B16+9B16/9B16\9B22;  | 
                      BEQ +                                     ;;9B18|9B18+9B18/9B18\9B24;  | 
                      JMP CallSpriteMain                        ;;9B1A|9B1A+9B1A/9B1A\9B26; / ...jump to the main routine 
                                                                ;;                        ;
                    + STZ.W !SpriteMisc1602,X                   ;;9B1D|9B1D+9B1D/9B1D\9B29;
                      LDA.W !SpriteTweakerF,X                   ;;9B20|9B20+9B20/9B20\9B2C; \ Branch if "Death frame 2 tiles high" 
                      AND.B #$20                                ;;9B23|9B23+9B23/9B23\9B2F;  | is NOT set 
                      BEQ CODE_019B64                           ;;9B25|9B25+9B25/9B25\9B31; / 
                      LDA.W !SpriteTweakerB,X                   ;;9B27|9B27+9B27/9B27\9B33; \ Branch if "Use shell as death frame" 
                      AND.B #$40                                ;;9B2A|9B2A+9B2A/9B2A\9B36;  | is set 
                      BNE CODE_019B5F                           ;;9B2C|9B2C+9B2C/9B2C\9B38; / 
                      LDA.B !SpriteNumber,X                     ;;9B2E|9B2E+9B2E/9B2E\9B3A; \ Branch if Lakitu 
                      CMP.B #$1E                                ;;9B30|9B30+9B30/9B30\9B3C;  | 
                      BEQ CODE_019B3D                           ;;9B32|9B32+9B32/9B32\9B3E; / 
                      CMP.B #$4B                                ;;9B34|9B34+9B34/9B34\9B40; \ If Pipe Lakitu, 
                      BNE CODE_019B44                           ;;9B36|9B36+9B36/9B36\9B42;  | 
                      LDA.B #$01                                ;;9B38|9B38+9B38/9B38\9B44;  | set behind scenery flag 
                      STA.W !SpriteBehindScene,X                ;;9B3A|9B3A+9B3A/9B3A\9B46; / 
CODE_019B3D:          LDA.B #$01                                ;;9B3D|9B3D+9B3D/9B3D\9B49;
                      STA.W !SpriteMisc1602,X                   ;;9B3F|9B3F+9B3F/9B3F\9B4B;
                      BRA +                                     ;;9B42|9B42+9B42/9B42\9B4E;
                                                                ;;                        ;
CODE_019B44:          LDA.W !SpriteOBJAttribute,X               ;;9B44|9B44+9B44/9B44\9B50; \ Set to flip tiles vertically 
                      ORA.B #$80                                ;;9B47|9B47+9B47/9B47\9B53;  | 
                      STA.W !SpriteOBJAttribute,X               ;;9B49|9B49+9B49/9B49\9B55; / 
                    + LDA.B !SpriteProperties                   ;;9B4C|9B4C+9B4C/9B4C\9B58; \ If sprite is behind scenery, 
                      PHA                                       ;;9B4E|9B4E+9B4E/9B4E\9B5A;  | 
                      LDY.W !SpriteBehindScene,X                ;;9B4F|9B4F+9B4F/9B4F\9B5B;  | 
                      BEQ +                                     ;;9B52|9B52+9B52/9B52\9B5E;  | 
                      LDA.B #$10                                ;;9B54|9B54+9B54/9B54\9B60;  | temorarily set layer priority for gfx routine 
                    + STA.B !SpriteProperties                   ;;9B56|9B56+9B56/9B56\9B62;  | 
                      JSR SubSprGfx1                            ;;9B58|9B58+9B58/9B58\9B64;  | Draw sprite 
                      PLA                                       ;;9B5B|9B5B+9B5B/9B5B\9B67;  | 
                      STA.B !SpriteProperties                   ;;9B5C|9B5C+9B5C/9B5C\9B68; / 
                      RTS                                       ;;9B5E|9B5E+9B5E/9B5E\9B6A; Return 
                                                                ;;                        ;
CODE_019B5F:          LDA.B #$06                                ;;9B5F|9B5F+9B5F/9B5F\9B6B;
                      STA.W !SpriteMisc1602,X                   ;;9B61|9B61+9B61/9B61\9B6D;
CODE_019B64:          LDA.B #$00                                ;;9B64|9B64+9B64/9B64\9B70;
                      CPY.B #$1C                                ;;9B66|9B66+9B66/9B66\9B72;
                      BEQ +                                     ;;9B68|9B68+9B68/9B68\9B74;
                      LDA.B #$80                                ;;9B6A|9B6A+9B6A/9B6A\9B76;
                    + STA.B !_0                                 ;;9B6C|9B6C+9B6C/9B6C\9B78;
                      LDA.B !SpriteProperties                   ;;9B6E|9B6E+9B6E/9B6E\9B7A; \ If sprite is behind scenery, 
                      PHA                                       ;;9B70|9B70+9B70/9B70\9B7C;  | 
                      LDY.W !SpriteBehindScene,X                ;;9B71|9B71+9B71/9B71\9B7D;  | 
                      BEQ +                                     ;;9B74|9B74+9B74/9B74\9B80;  | 
                      LDA.B #$10                                ;;9B76|9B76+9B76/9B76\9B82;  | temorarily set layer priority for gfx routine 
                    + STA.B !SpriteProperties                   ;;9B78|9B78+9B78/9B78\9B84;  | 
                      LDA.B !_0                                 ;;9B7A|9B7A+9B7A/9B7A\9B86;
                      JSR SubSprGfx2Entry0                      ;;9B7C|9B7C+9B7C/9B7C\9B88;  | Draw sprite 
                      PLA                                       ;;9B7F|9B7F+9B7F/9B7F\9B8B;  | 
                      STA.B !SpriteProperties                   ;;9B80|9B80+9B80/9B80\9B8C; / 
                      RTS                                       ;;9B82|9B82+9B82/9B82\9B8E; Return 
                                                                ;;                        ;
                                                                ;;                        ;
SprTilemap:           db $82,$A0,$82,$A2,$84,$A4,$8C,$8A        ;;9B83|9B83+9B83/9B83\9B8F;
                      db $8E,$C8,$CA,$CA,$CE,$CC,$86,$4E        ;;9B8B|9B8B+9B8B/9B8B\9B97;
                      db $E0,$E2,$E2,$CE,$E4,$E0,$E0,$A3        ;;9B93|9B93+9B93/9B93\9B9F;
                      db $A3,$B3,$B3,$E9,$E8,$F9,$F8,$E8        ;;9B9B|9B9B+9B9B/9B9B\9BA7;
                      db $E9,$F8,$F9,$E2,$E6,$AA,$A8,$A8        ;;9BA3|9BA3+9BA3/9BA3\9BAF;
                      db $AA,$A2,$A2,$B2,$B2,$C3,$C2,$D3        ;;9BAB|9BAB+9BAB/9BAB\9BB7;
                      db $D2,$C2,$C3,$D2,$D3,$E2,$E6,$CA        ;;9BB3|9BB3+9BB3/9BB3\9BBF;
                      db $CC,$CA,$AC,$CE,$AE,$CE,$83,$83        ;;9BBB|9BBB+9BBB/9BBB\9BC7;
                      db $C4,$C4,$83,$83,$C5,$C5,$8A,$A6        ;;9BC3|9BC3+9BC3/9BC3\9BCF;
                      db $A4,$A6,$A8,$80,$82,$80,$84,$84        ;;9BCB|9BCB+9BCB/9BCB\9BD7;
                      db $84,$84,$94,$94,$94,$94,$A0,$B0        ;;9BD3|9BD3+9BD3/9BD3\9BDF;
                      db $A0,$D0,$82,$80,$82,$00,$00,$00        ;;9BDB|9BDB+9BDB/9BDB\9BE7;
                      db $86,$84,$88,$EC,$8C,$A8,$AA,$8E        ;;9BE3|9BE3+9BE3/9BE3\9BEF;
                      db $AC,$AE,$8E,$EC,$EE,$CE,$EE,$A8        ;;9BEB|9BEB+9BEB/9BEB\9BF7;
                      db $EE,$40,$40,$A0,$C0,$A0,$C0,$A4        ;;9BF3|9BF3+9BF3/9BF3\9BFF;
                      db $C4,$A4,$C4,$A0,$C0,$A0,$C0,$40        ;;9BFB|9BFB+9BFB/9BFB\9C07;
                      db $07,$27,$4C,$29,$4E,$2B,$82,$A0        ;;9C03|9C03+9C03/9C03\9C0F;
                      db $84,$A4,$67,$69,$88,$CE,$8E,$AE        ;;9C0B|9C0B+9C0B/9C0B\9C17;
                      db $A2,$A2,$B2,$B2,$00,$40,$44,$42        ;;9C13|9C13+9C13/9C13\9C1F;
                      db $2C,$42,$28,$28,$28,$28,$4C,$4C        ;;9C1B|9C1B+9C1B/9C1B\9C27;
                      db $4C,$4C,$83,$83,$6F,$6F,$AC,$BC        ;;9C23|9C23+9C23/9C23\9C2F;
                      db $AC,$A6,$8C,$AA,$86,$84,$DC,$EC        ;;9C2B|9C2B+9C2B/9C2B\9C37;
                      db $DE,$EE,$06,$06,$16,$16,$07,$07        ;;9C33|9C33+9C33/9C33\9C3F;
                      db $17,$17,$16,$16,$06,$06,$17,$17        ;;9C3B|9C3B+9C3B/9C3B\9C47;
                      db $07,$07,$84,$86,$00,$00,$00,$0E        ;;9C43|9C43+9C43/9C43\9C4F;
                      db $2A,$24,$02,$06,$0A,$20,$22,$28        ;;9C4B|9C4B+9C4B/9C4B\9C57;
                      db $26,$2E,$40,$42,$0C,$04,$2B,$6A        ;;9C53|9C53+9C53/9C53\9C5F;
                      db $ED,$88,$8C,$A8,$8E,$AA,$AE,$8C        ;;9C5B|9C5B+9C5B/9C5B\9C67;
                      db $88,$A8,$AE,$AC,$8C,$8E,$CE,$EE        ;;9C63|9C63+9C63/9C63\9C6F;
                      db $C4,$C6,$82,$84,$86,$8C,$CE,$CE        ;;9C6B|9C6B+9C6B/9C6B\9C77;
                      db $88,$89,$CE,$CE,$89,$88,$F3,$CE        ;;9C73|9C73+9C73/9C73\9C7F;
                      db $F3,$CE,$A7,$A9                        ;;9C7B|9C7B+9C7B/9C7B\9C87;
                                                                ;;                        ;
SprTilemapOffset:     db $09,$09,$10,$09,$00,$00,$00,$00        ;;9C7F|9C7F+9C7F/9C7F\9C8B;
                      db $00,$00,$00,$00,$00,$37,$00,$25        ;;9C87|9C87+9C87/9C87\9C93;
                      db $25,$5A,$00,$4B,$4E,$8A,$8A,$8A        ;;9C8F|9C8F+9C8F/9C8F\9C9B;
                      db $8A,$56,$3A,$46,$47,$69,$6B,$73        ;;9C97|9C97+9C97/9C97\9CA3;
                      db $00,$00,$80,$80,$80,$80,$8E,$90        ;;9C9F|9C9F+9C9F/9C9F\9CAB;
                      db $00,$00,$3A,$F6,$94,$95,$63,$9A        ;;9CA7|9CA7+9CA7/9CA7\9CB3;
                      db $A6,$AA,$AE,$B2,$C2,$C4,$D5,$D9        ;;9CAF|9CAF+9CAF/9CAF\9CBB;
                      db $D7,$D7,$E6,$E6,$E6,$E2,$99,$17        ;;9CB7|9CB7+9CB7/9CB7\9CC3;
                      db $29,$E6,$E6,$E6,$00,$E8,$00,$8A        ;;9CBF|9CBF+9CBF/9CBF\9CCB;
                      db $E8,$00,$ED,$EA,$7F,$EA,$EA,$3A        ;;9CC7|9CC7+9CC7/9CC7\9CD3;
                      db $3A,$FA,$71,$7F                        ;;9CCF|9CCF+9CCF/9CCF\9CDB;
                                                                ;;                        ;
GeneralSprDispX:      db $00,$08,$00,$08                        ;;9CD3|9CD3+9CD3/9CD3\9CDF;
                                                                ;;                        ;
GeneralSprDispY:      db $00,$00,$08,$08                        ;;9CD7|9CD7+9CD7/9CD7\9CE3;
                                                                ;;                        ;
GeneralSprGfxProp:    db $00,$00,$00,$00,$00,$40,$00,$40        ;;9CDB|9CDB+9CDB/9CDB\9CE7;
                      db $00,$40,$80,$C0,$40,$40,$00,$00        ;;9CE3|9CE3+9CE3/9CE3\9CEF;
                      db $40,$00,$C0,$80,$40,$40,$40,$40        ;;9CEB|9CEB+9CEB/9CEB\9CF7;
                                                                ;;                        ;
SubSprGfx0Entry0:     LDY.B #$00                                ;;9CF3|9CF3+9CF3/9CF3\9CFF;
SubSprGfx0Entry1:     STA.B !_5                                 ;;9CF5|9CF5+9CF5/9CF5\9D01;
                      STY.B !_F                                 ;;9CF7|9CF7+9CF7/9CF7\9D03;
                      JSR GetDrawInfoBnk1                       ;;9CF9|9CF9+9CF9/9CF9\9D05;
                      LDY.B !_F                                 ;;9CFC|9CFC+9CFC/9CFC\9D08;
                      TYA                                       ;;9CFE|9CFE+9CFE/9CFE\9D0A;
                      CLC                                       ;;9CFF|9CFF+9CFF/9CFF\9D0B;
                      ADC.B !_1                                 ;;9D00|9D00+9D00/9D00\9D0C;
                      STA.B !_1                                 ;;9D02|9D02+9D02/9D02\9D0E;
                      LDY.B !SpriteNumber,X                     ;;9D04|9D04+9D04/9D04\9D10;
                      LDA.W !SpriteMisc1602,X                   ;;9D06|9D06+9D06/9D06\9D12;
                      ASL A                                     ;;9D09|9D09+9D09/9D09\9D15;
                      ASL A                                     ;;9D0A|9D0A+9D0A/9D0A\9D16;
                      ADC.W SprTilemapOffset,Y                  ;;9D0B|9D0B+9D0B/9D0B\9D17;
                      STA.B !_2                                 ;;9D0E|9D0E+9D0E/9D0E\9D1A;
                      LDA.W !SpriteOBJAttribute,X               ;;9D10|9D10+9D10/9D10\9D1C;
                      ORA.B !SpriteProperties                   ;;9D13|9D13+9D13/9D13\9D1F;
                      STA.B !_3                                 ;;9D15|9D15+9D15/9D15\9D21;
                      LDY.W !SpriteOAMIndex,X                   ;;9D17|9D17+9D17/9D17\9D23; Y = Index into sprite OAM 
                      LDA.B #$03                                ;;9D1A|9D1A+9D1A/9D1A\9D26;
                      STA.B !_4                                 ;;9D1C|9D1C+9D1C/9D1C\9D28;
                      PHX                                       ;;9D1E|9D1E+9D1E/9D1E\9D2A;
                    - LDX.B !_4                                 ;;9D1F|9D1F+9D1F/9D1F\9D2B;
                      LDA.B !_0                                 ;;9D21|9D21+9D21/9D21\9D2D;
                      CLC                                       ;;9D23|9D23+9D23/9D23\9D2F;
                      ADC.W GeneralSprDispX,X                   ;;9D24|9D24+9D24/9D24\9D30;
                      STA.W !OAMTileXPos+$100,Y                 ;;9D27|9D27+9D27/9D27\9D33;
                      LDA.B !_1                                 ;;9D2A|9D2A+9D2A/9D2A\9D36;
                      CLC                                       ;;9D2C|9D2C+9D2C/9D2C\9D38;
                      ADC.W GeneralSprDispY,X                   ;;9D2D|9D2D+9D2D/9D2D\9D39;
                      STA.W !OAMTileYPos+$100,Y                 ;;9D30|9D30+9D30/9D30\9D3C;
                      LDA.B !_2                                 ;;9D33|9D33+9D33/9D33\9D3F;
                      CLC                                       ;;9D35|9D35+9D35/9D35\9D41;
                      ADC.B !_4                                 ;;9D36|9D36+9D36/9D36\9D42;
                      TAX                                       ;;9D38|9D38+9D38/9D38\9D44;
                      LDA.W SprTilemap,X                        ;;9D39|9D39+9D39/9D39\9D45;
                      STA.W !OAMTileNo+$100,Y                   ;;9D3C|9D3C+9D3C/9D3C\9D48;
                      LDA.B !_5                                 ;;9D3F|9D3F+9D3F/9D3F\9D4B;
                      ASL A                                     ;;9D41|9D41+9D41/9D41\9D4D;
                      ASL A                                     ;;9D42|9D42+9D42/9D42\9D4E;
                      ADC.B !_4                                 ;;9D43|9D43+9D43/9D43\9D4F;
                      TAX                                       ;;9D45|9D45+9D45/9D45\9D51;
                      LDA.W GeneralSprGfxProp,X                 ;;9D46|9D46+9D46/9D46\9D52;
                      ORA.B !_3                                 ;;9D49|9D49+9D49/9D49\9D55;
                      STA.W !OAMTileAttr+$100,Y                 ;;9D4B|9D4B+9D4B/9D4B\9D57;
                      INY                                       ;;9D4E|9D4E+9D4E/9D4E\9D5A;
                      INY                                       ;;9D4F|9D4F+9D4F/9D4F\9D5B;
                      INY                                       ;;9D50|9D50+9D50/9D50\9D5C;
                      INY                                       ;;9D51|9D51+9D51/9D51\9D5D;
                      DEC.B !_4                                 ;;9D52|9D52+9D52/9D52\9D5E;
                      BPL -                                     ;;9D54|9D54+9D54/9D54\9D60;
                      PLX                                       ;;9D56|9D56+9D56/9D56\9D62;
                      LDA.B #$03                                ;;9D57|9D57+9D57/9D57\9D63;
                      LDY.B #$00                                ;;9D59|9D59+9D59/9D59\9D65;
                      JSR FinishOAMWriteRt                      ;;9D5B|9D5B+9D5B/9D5B\9D67;
                      RTS                                       ;;9D5E|9D5E+9D5E/9D5E\9D6A; Return 
                                                                ;;                        ;
GenericSprGfxRt1:     PHB                                       ;;9D5F|9D5F+9D5F/9D5F\9D6B;
                      PHK                                       ;;9D60|9D60+9D60/9D60\9D6C;
                      PLB                                       ;;9D61|9D61+9D61/9D61\9D6D;
                      JSR SubSprGfx1                            ;;9D62|9D62+9D62/9D62\9D6E;
                      PLB                                       ;;9D65|9D65+9D65/9D65\9D71;
                      RTL                                       ;;9D66|9D66+9D66/9D66\9D72; Return 
                                                                ;;                        ;
SubSprGfx1:           LDA.W !SpriteOBJAttribute,X               ;;9D67|9D67+9D67/9D67\9D73;
                      BPL +                                     ;;9D6A|9D6A+9D6A/9D6A\9D76;
                      JSR SubSprGfx1Hlpr1                       ;;9D6C|9D6C+9D6C/9D6C\9D78;
                      RTS                                       ;;9D6F|9D6F+9D6F/9D6F\9D7B; Return 
                                                                ;;                        ;
                    + JSR GetDrawInfoBnk1                       ;;9D70|9D70+9D70/9D70\9D7C;
                      LDA.W !SpriteMisc157C,X                   ;;9D73|9D73+9D73/9D73\9D7F;
                      STA.B !_2                                 ;;9D76|9D76+9D76/9D76\9D82;
                      TYA                                       ;;9D78|9D78+9D78/9D78\9D84;
                      LDY.B !SpriteNumber,X                     ;;9D79|9D79+9D79/9D79\9D85;
                      CPY.B #$0F                                ;;9D7B|9D7B+9D7B/9D7B\9D87;
                      BCS +                                     ;;9D7D|9D7D+9D7D/9D7D\9D89;
                      ADC.B #$04                                ;;9D7F|9D7F+9D7F/9D7F\9D8B;
                    + TAY                                       ;;9D81|9D81+9D81/9D81\9D8D;
                      PHY                                       ;;9D82|9D82+9D82/9D82\9D8E;
                      LDY.B !SpriteNumber,X                     ;;9D83|9D83+9D83/9D83\9D8F;
                      LDA.W !SpriteMisc1602,X                   ;;9D85|9D85+9D85/9D85\9D91;
                      ASL A                                     ;;9D88|9D88+9D88/9D88\9D94;
                      CLC                                       ;;9D89|9D89+9D89/9D89\9D95;
                      ADC.W SprTilemapOffset,Y                  ;;9D8A|9D8A+9D8A/9D8A\9D96;
                      TAX                                       ;;9D8D|9D8D+9D8D/9D8D\9D99;
                      PLY                                       ;;9D8E|9D8E+9D8E/9D8E\9D9A;
                      LDA.W SprTilemap,X                        ;;9D8F|9D8F+9D8F/9D8F\9D9B;
                      STA.W !OAMTileNo+$100,Y                   ;;9D92|9D92+9D92/9D92\9D9E;
                      LDA.W SprTilemap+1,X                      ;;9D95|9D95+9D95/9D95\9DA1;
                      STA.W !OAMTileNo+$104,Y                   ;;9D98|9D98+9D98/9D98\9DA4;
                      LDX.W !CurSpriteProcess                   ;;9D9B|9D9B+9D9B/9D9B\9DA7; X = Sprite index 
                      LDA.B !_1                                 ;;9D9E|9D9E+9D9E/9D9E\9DAA;
                      STA.W !OAMTileYPos+$100,Y                 ;;9DA0|9DA0+9DA0/9DA0\9DAC;
                      CLC                                       ;;9DA3|9DA3+9DA3/9DA3\9DAF;
                      ADC.B #$10                                ;;9DA4|9DA4+9DA4/9DA4\9DB0;
                      STA.W !OAMTileYPos+$104,Y                 ;;9DA6|9DA6+9DA6/9DA6\9DB2;
CODE_019DA9:          LDA.B !_0                                 ;;9DA9|9DA9+9DA9/9DA9\9DB5;
                      STA.W !OAMTileXPos+$100,Y                 ;;9DAB|9DAB+9DAB/9DAB\9DB7;
                      STA.W !OAMTileXPos+$104,Y                 ;;9DAE|9DAE+9DAE/9DAE\9DBA;
                      LDA.W !SpriteMisc157C,X                   ;;9DB1|9DB1+9DB1/9DB1\9DBD;
                      LSR A                                     ;;9DB4|9DB4+9DB4/9DB4\9DC0;
                      LDA.B #$00                                ;;9DB5|9DB5+9DB5/9DB5\9DC1;
                      ORA.W !SpriteOBJAttribute,X               ;;9DB7|9DB7+9DB7/9DB7\9DC3;
                      BCS +                                     ;;9DBA|9DBA+9DBA/9DBA\9DC6;
                      ORA.B #$40                                ;;9DBC|9DBC+9DBC/9DBC\9DC8;
                    + ORA.B !SpriteProperties                   ;;9DBE|9DBE+9DBE/9DBE\9DCA;
                      STA.W !OAMTileAttr+$100,Y                 ;;9DC0|9DC0+9DC0/9DC0\9DCC;
                      STA.W !OAMTileAttr+$104,Y                 ;;9DC3|9DC3+9DC3/9DC3\9DCF;
                      TYA                                       ;;9DC6|9DC6+9DC6/9DC6\9DD2;
                      LSR A                                     ;;9DC7|9DC7+9DC7/9DC7\9DD3;
                      LSR A                                     ;;9DC8|9DC8+9DC8/9DC8\9DD4;
                      TAY                                       ;;9DC9|9DC9+9DC9/9DC9\9DD5;
                      LDA.B #$02                                ;;9DCA|9DCA+9DCA/9DCA\9DD6;
                      ORA.W !SpriteOffscreenX,X                 ;;9DCC|9DCC+9DCC/9DCC\9DD8;
                      STA.W !OAMTileSize+$40,Y                  ;;9DCF|9DCF+9DCF/9DCF\9DDB;
                      STA.W !OAMTileSize+$41,Y                  ;;9DD2|9DD2+9DD2/9DD2\9DDE;
                      JSR CODE_01A3DF                           ;;9DD5|9DD5+9DD5/9DD5\9DE1;
                      RTS                                       ;;9DD8|9DD8+9DD8/9DD8\9DE4; Return 
                                                                ;;                        ;
SubSprGfx1Hlpr1:      JSR GetDrawInfoBnk1                       ;;9DD9|9DD9+9DD9/9DD9\9DE5;
                      LDA.W !SpriteMisc157C,X                   ;;9DDC|9DDC+9DDC/9DDC\9DE8;
                      STA.B !_2                                 ;;9DDF|9DDF+9DDF/9DDF\9DEB;
                      TYA                                       ;;9DE1|9DE1+9DE1/9DE1\9DED;
                      CLC                                       ;;9DE2|9DE2+9DE2/9DE2\9DEE;
                      ADC.B #$08                                ;;9DE3|9DE3+9DE3/9DE3\9DEF;
                      TAY                                       ;;9DE5|9DE5+9DE5/9DE5\9DF1;
                      PHY                                       ;;9DE6|9DE6+9DE6/9DE6\9DF2;
                      LDY.B !SpriteNumber,X                     ;;9DE7|9DE7+9DE7/9DE7\9DF3;
                      LDA.W !SpriteMisc1602,X                   ;;9DE9|9DE9+9DE9/9DE9\9DF5;
                      ASL A                                     ;;9DEC|9DEC+9DEC/9DEC\9DF8;
                      CLC                                       ;;9DED|9DED+9DED/9DED\9DF9;
                      ADC.W SprTilemapOffset,Y                  ;;9DEE|9DEE+9DEE/9DEE\9DFA;
                      TAX                                       ;;9DF1|9DF1+9DF1/9DF1\9DFD;
                      PLY                                       ;;9DF2|9DF2+9DF2/9DF2\9DFE;
                      LDA.W SprTilemap,X                        ;;9DF3|9DF3+9DF3/9DF3\9DFF;
                      STA.W !OAMTileNo+$104,Y                   ;;9DF6|9DF6+9DF6/9DF6\9E02;
                      LDA.W SprTilemap+1,X                      ;;9DF9|9DF9+9DF9/9DF9\9E05;
                      STA.W !OAMTileNo+$100,Y                   ;;9DFC|9DFC+9DFC/9DFC\9E08;
                      LDX.W !CurSpriteProcess                   ;;9DFF|9DFF+9DFF/9DFF\9E0B; X = Sprite index 
                      LDA.B !_1                                 ;;9E02|9E02+9E02/9E02\9E0E;
                      STA.W !OAMTileYPos+$100,Y                 ;;9E04|9E04+9E04/9E04\9E10;
                      CLC                                       ;;9E07|9E07+9E07/9E07\9E13;
                      ADC.B #$10                                ;;9E08|9E08+9E08/9E08\9E14;
                      STA.W !OAMTileYPos+$104,Y                 ;;9E0A|9E0A+9E0A/9E0A\9E16;
                      JMP CODE_019DA9                           ;;9E0D|9E0D+9E0D/9E0D\9E19;
                                                                ;;                        ;
                                                                ;;                        ;
KoopaWingDispXLo:     db $FF,$F7,$09,$09                        ;;9E10|9E10+9E10/9E10\9E1C;
                                                                ;;                        ;
KoopaWingDispXHi:     db $FF,$FF,$00,$00                        ;;9E14|9E14+9E14/9E14\9E20;
                                                                ;;                        ;
KoopaWingDispY:       db $FC,$F4,$FC,$F4                        ;;9E18|9E18+9E18/9E18\9E24;
                                                                ;;                        ;
KoopaWingTiles:       db $5D,$C6,$5D,$C6                        ;;9E1C|9E1C+9E1C/9E1C\9E28;
                                                                ;;                        ;
KoopaWingGfxProp:     db $46,$46,$06,$06                        ;;9E20|9E20+9E20/9E20\9E2C;
                                                                ;;                        ;
KoopaWingTileSize:    db $00,$02,$00,$02                        ;;9E24|9E24+9E24/9E24\9E30;
                                                                ;;                        ;
KoopaWingGfxRt:       LDY.B #$00                                ;;9E28|9E28+9E28/9E28\9E34; \ If not on ground, $02 = animation frame (00 or 01) 
                      JSR IsOnGround                            ;;9E2A|9E2A+9E2A/9E2A\9E36;  | else, $02 = 0 
                      BNE CODE_019E35                           ;;9E2D|9E2D+9E2D/9E2D\9E39;  | 
                      LDA.W !SpriteMisc1602,X                   ;;9E2F|9E2F+9E2F/9E2F\9E3B;  | 
                      AND.B #$01                                ;;9E32|9E32+9E32/9E32\9E3E;  | 
                      TAY                                       ;;9E34|9E34+9E34/9E34\9E40;  | 
CODE_019E35:          STY.B !_2                                 ;;9E35|9E35+9E35/9E35\9E41; / 
CODE_019E37:          LDA.W !SpriteOffscreenVert,X              ;;9E37|9E37+9E37/9E37\9E43; \ Return if offscreen vertically 
                      BNE Return019E94                          ;;9E3A|9E3A+9E3A/9E3A\9E46; / 
                      LDA.B !SpriteXPosLow,X                    ;;9E3C|9E3C+9E3C/9E3C\9E48; \ $00 = X position low 
                      STA.B !_0                                 ;;9E3E|9E3E+9E3E/9E3E\9E4A; / 
                      LDA.W !SpriteYPosHigh,X                   ;;9E40|9E40+9E40/9E40\9E4C; \ $04 = X position high 
                      STA.B !_4                                 ;;9E43|9E43+9E43/9E43\9E4F; / 
                      LDA.B !SpriteYPosLow,X                    ;;9E45|9E45+9E45/9E45\9E51; \ $01 = Y position low 
                      STA.B !_1                                 ;;9E47|9E47+9E47/9E47\9E53; / 
                      LDY.W !SpriteOAMIndex,X                   ;;9E49|9E49+9E49/9E49\9E55; Y = index to OAM 
                      PHX                                       ;;9E4C|9E4C+9E4C/9E4C\9E58;
                      LDA.W !SpriteMisc157C,X                   ;;9E4D|9E4D+9E4D/9E4D\9E59; \ X = index into tables 
                      ASL A                                     ;;9E50|9E50+9E50/9E50\9E5C;  | 
                      ADC.B !_2                                 ;;9E51|9E51+9E51/9E51\9E5D;  | 
                      TAX                                       ;;9E53|9E53+9E53/9E53\9E5F; / 
                      LDA.B !_0                                 ;;9E54|9E54+9E54/9E54\9E60; \ Store X position (relative to screen) 
                      CLC                                       ;;9E56|9E56+9E56/9E56\9E62;  | 
                      ADC.W KoopaWingDispXLo,X                  ;;9E57|9E57+9E57/9E57\9E63;  | 
                      STA.B !_0                                 ;;9E5A|9E5A+9E5A/9E5A\9E66;  | 
                      LDA.B !_4                                 ;;9E5C|9E5C+9E5C/9E5C\9E68;  | 
                      ADC.W KoopaWingDispXHi,X                  ;;9E5E|9E5E+9E5E/9E5E\9E6A;  | 
                      PHA                                       ;;9E61|9E61+9E61/9E61\9E6D;  | 
                      LDA.B !_0                                 ;;9E62|9E62+9E62/9E62\9E6E;  | 
                      SEC                                       ;;9E64|9E64+9E64/9E64\9E70;  | 
                      SBC.B !Layer1XPos                         ;;9E65|9E65+9E65/9E65\9E71;  | 
                      STA.W !OAMTileXPos+$100,Y                 ;;9E67|9E67+9E67/9E67\9E73; / 
                      PLA                                       ;;9E6A|9E6A+9E6A/9E6A\9E76; \ Return if off screen horizontally 
                      SBC.B !Layer1XPos+1                       ;;9E6B|9E6B+9E6B/9E6B\9E77;  | 
                      BNE +                                     ;;9E6D|9E6D+9E6D/9E6D\9E79; / 
                      LDA.B !_1                                 ;;9E6F|9E6F+9E6F/9E6F\9E7B; \ Store Y position (relative to screen) 
                      SEC                                       ;;9E71|9E71+9E71/9E71\9E7D;  | 
                      SBC.B !Layer1YPos                         ;;9E72|9E72+9E72/9E72\9E7E;  | 
                      CLC                                       ;;9E74|9E74+9E74/9E74\9E80;  | 
                      ADC.W KoopaWingDispY,X                    ;;9E75|9E75+9E75/9E75\9E81;  | 
                      STA.W !OAMTileYPos+$100,Y                 ;;9E78|9E78+9E78/9E78\9E84; / 
                      LDA.W KoopaWingTiles,X                    ;;9E7B|9E7B+9E7B/9E7B\9E87; \ Store tile 
                      STA.W !OAMTileNo+$100,Y                   ;;9E7E|9E7E+9E7E/9E7E\9E8A; / 
                      LDA.B !SpriteProperties                   ;;9E81|9E81+9E81/9E81\9E8D; \ Store tile properties 
                      ORA.W KoopaWingGfxProp,X                  ;;9E83|9E83+9E83/9E83\9E8F;  | 
                      STA.W !OAMTileAttr+$100,Y                 ;;9E86|9E86+9E86/9E86\9E92; / 
                      TYA                                       ;;9E89|9E89+9E89/9E89\9E95;
                      LSR A                                     ;;9E8A|9E8A+9E8A/9E8A\9E96;
                      LSR A                                     ;;9E8B|9E8B+9E8B/9E8B\9E97;
                      TAY                                       ;;9E8C|9E8C+9E8C/9E8C\9E98;
                      LDA.W KoopaWingTileSize,X                 ;;9E8D|9E8D+9E8D/9E8D\9E99; \ Store tile size 
                      STA.W !OAMTileSize+$40,Y                  ;;9E90|9E90+9E90/9E90\9E9C; / 
                    + PLX                                       ;;9E93|9E93+9E93/9E93\9E9F;
Return019E94:         RTS                                       ;;9E94|9E94+9E94/9E94\9EA0; Return 
                                                                ;;                        ;
CODE_019E95:          LDA.B !SpriteYPosLow,X                    ;;9E95|9E95+9E95/9E95\9EA1;
                      PHA                                       ;;9E97|9E97+9E97/9E97\9EA3;
                      CLC                                       ;;9E98|9E98+9E98/9E98\9EA4;
                      ADC.B #$02                                ;;9E99|9E99+9E99/9E99\9EA5;
                      STA.B !SpriteYPosLow,X                    ;;9E9B|9E9B+9E9B/9E9B\9EA7;
                      LDA.W !SpriteXPosHigh,X                   ;;9E9D|9E9D+9E9D/9E9D\9EA9;
                      PHA                                       ;;9EA0|9EA0+9EA0/9EA0\9EAC;
                      ADC.B #$00                                ;;9EA1|9EA1+9EA1/9EA1\9EAD;
                      STA.W !SpriteXPosHigh,X                   ;;9EA3|9EA3+9EA3/9EA3\9EAF;
                      LDA.B !SpriteXPosLow,X                    ;;9EA6|9EA6+9EA6/9EA6\9EB2;
                      PHA                                       ;;9EA8|9EA8+9EA8/9EA8\9EB4;
                      SEC                                       ;;9EA9|9EA9+9EA9/9EA9\9EB5;
                      SBC.B #$02                                ;;9EAA|9EAA+9EAA/9EAA\9EB6;
                      STA.B !SpriteXPosLow,X                    ;;9EAC|9EAC+9EAC/9EAC\9EB8;
                      LDA.W !SpriteYPosHigh,X                   ;;9EAE|9EAE+9EAE/9EAE\9EBA;
                      PHA                                       ;;9EB1|9EB1+9EB1/9EB1\9EBD;
                      SBC.B #$00                                ;;9EB2|9EB2+9EB2/9EB2\9EBE;
                      STA.W !SpriteYPosHigh,X                   ;;9EB4|9EB4+9EB4/9EB4\9EC0;
                      LDA.W !SpriteOAMIndex,X                   ;;9EB7|9EB7+9EB7/9EB7\9EC3;
                      PHA                                       ;;9EBA|9EBA+9EBA/9EBA\9EC6;
                      CLC                                       ;;9EBB|9EBB+9EBB/9EBB\9EC7;
                      ADC.B #$04                                ;;9EBC|9EBC+9EBC/9EBC\9EC8;
                      STA.W !SpriteOAMIndex,X                   ;;9EBE|9EBE+9EBE/9EBE\9ECA;
                      LDA.W !SpriteMisc157C,X                   ;;9EC1|9EC1+9EC1/9EC1\9ECD;
                      PHA                                       ;;9EC4|9EC4+9EC4/9EC4\9ED0;
                      STZ.W !SpriteMisc157C,X                   ;;9EC5|9EC5+9EC5/9EC5\9ED1;
                      LDA.W !SpriteMisc1570,X                   ;;9EC8|9EC8+9EC8/9EC8\9ED4;
                      LSR A                                     ;;9ECB|9ECB+9ECB/9ECB\9ED7;
                      LSR A                                     ;;9ECC|9ECC+9ECC/9ECC\9ED8;
                      LSR A                                     ;;9ECD|9ECD+9ECD/9ECD\9ED9;
                      AND.B #$01                                ;;9ECE|9ECE+9ECE/9ECE\9EDA;
                      TAY                                       ;;9ED0|9ED0+9ED0/9ED0\9EDC;
                      JSR CODE_019E35                           ;;9ED1|9ED1+9ED1/9ED1\9EDD;
                      LDA.B !SpriteXPosLow,X                    ;;9ED4|9ED4+9ED4/9ED4\9EE0;
                      CLC                                       ;;9ED6|9ED6+9ED6/9ED6\9EE2;
                      ADC.B #$04                                ;;9ED7|9ED7+9ED7/9ED7\9EE3;
                      STA.B !SpriteXPosLow,X                    ;;9ED9|9ED9+9ED9/9ED9\9EE5;
                      LDA.W !SpriteYPosHigh,X                   ;;9EDB|9EDB+9EDB/9EDB\9EE7;
                      ADC.B #$00                                ;;9EDE|9EDE+9EDE/9EDE\9EEA;
                      STA.W !SpriteYPosHigh,X                   ;;9EE0|9EE0+9EE0/9EE0\9EEC;
                      LDA.W !SpriteOAMIndex,X                   ;;9EE3|9EE3+9EE3/9EE3\9EEF;
                      CLC                                       ;;9EE6|9EE6+9EE6/9EE6\9EF2;
                      ADC.B #$04                                ;;9EE7|9EE7+9EE7/9EE7\9EF3;
                      STA.W !SpriteOAMIndex,X                   ;;9EE9|9EE9+9EE9/9EE9\9EF5;
                      INC.W !SpriteMisc157C,X                   ;;9EEC|9EEC+9EEC/9EEC\9EF8;
                      JSR CODE_019E37                           ;;9EEF|9EEF+9EEF/9EEF\9EFB;
                      PLA                                       ;;9EF2|9EF2+9EF2/9EF2\9EFE;
                      STA.W !SpriteMisc157C,X                   ;;9EF3|9EF3+9EF3/9EF3\9EFF;
                      PLA                                       ;;9EF6|9EF6+9EF6/9EF6\9F02;
                      STA.W !SpriteOAMIndex,X                   ;;9EF7|9EF7+9EF7/9EF7\9F03;
                      PLA                                       ;;9EFA|9EFA+9EFA/9EFA\9F06;
                      STA.W !SpriteYPosHigh,X                   ;;9EFB|9EFB+9EFB/9EFB\9F07;
                      PLA                                       ;;9EFE|9EFE+9EFE/9EFE\9F0A;
                      STA.B !SpriteXPosLow,X                    ;;9EFF|9EFF+9EFF/9EFF\9F0B;
                      PLA                                       ;;9F01|9F01+9F01/9F01\9F0D;
                      STA.W !SpriteXPosHigh,X                   ;;9F02|9F02+9F02/9F02\9F0E;
                      PLA                                       ;;9F05|9F05+9F05/9F05\9F11;
                      STA.B !SpriteYPosLow,X                    ;;9F06|9F06+9F06/9F06\9F12;
                      RTS                                       ;;9F08|9F08+9F08/9F08\9F14; Return 
                                                                ;;                        ;
SubSprGfx2Entry0:     STA.B !_4                                 ;;9F09|9F09+9F09/9F09\9F15;
                      BRA +                                     ;;9F0B|9F0B+9F0B/9F0B\9F17;
                                                                ;;                        ;
SubSprGfx2Entry1:     STZ.B !_4                                 ;;9F0D|9F0D+9F0D/9F0D\9F19;
                    + JSR GetDrawInfoBnk1                       ;;9F0F|9F0F+9F0F/9F0F\9F1B;
                      LDA.W !SpriteMisc157C,X                   ;;9F12|9F12+9F12/9F12\9F1E;
                      STA.B !_2                                 ;;9F15|9F15+9F15/9F15\9F21;
                      LDY.B !SpriteNumber,X                     ;;9F17|9F17+9F17/9F17\9F23;
                      LDA.W !SpriteMisc1602,X                   ;;9F19|9F19+9F19/9F19\9F25;
                      CLC                                       ;;9F1C|9F1C+9F1C/9F1C\9F28;
                      ADC.W SprTilemapOffset,Y                  ;;9F1D|9F1D+9F1D/9F1D\9F29;
                      LDY.W !SpriteOAMIndex,X                   ;;9F20|9F20+9F20/9F20\9F2C; Y = Index into sprite OAM 
                      TAX                                       ;;9F23|9F23+9F23/9F23\9F2F;
                      LDA.W SprTilemap,X                        ;;9F24|9F24+9F24/9F24\9F30;
                      STA.W !OAMTileNo+$100,Y                   ;;9F27|9F27+9F27/9F27\9F33;
                      LDX.W !CurSpriteProcess                   ;;9F2A|9F2A+9F2A/9F2A\9F36; X = Sprite index 
                      LDA.B !_0                                 ;;9F2D|9F2D+9F2D/9F2D\9F39;
                      STA.W !OAMTileXPos+$100,Y                 ;;9F2F|9F2F+9F2F/9F2F\9F3B;
                      LDA.B !_1                                 ;;9F32|9F32+9F32/9F32\9F3E;
                      STA.W !OAMTileYPos+$100,Y                 ;;9F34|9F34+9F34/9F34\9F40;
                      LDA.W !SpriteMisc157C,X                   ;;9F37|9F37+9F37/9F37\9F43;
                      LSR A                                     ;;9F3A|9F3A+9F3A/9F3A\9F46;
                      LDA.B #$00                                ;;9F3B|9F3B+9F3B/9F3B\9F47;
                      ORA.W !SpriteOBJAttribute,X               ;;9F3D|9F3D+9F3D/9F3D\9F49;
                      BCS +                                     ;;9F40|9F40+9F40/9F40\9F4C;
                      EOR.B #$40                                ;;9F42|9F42+9F42/9F42\9F4E;
                    + ORA.B !_4                                 ;;9F44|9F44+9F44/9F44\9F50;
                      ORA.B !SpriteProperties                   ;;9F46|9F46+9F46/9F46\9F52;
                      STA.W !OAMTileAttr+$100,Y                 ;;9F48|9F48+9F48/9F48\9F54;
                      TYA                                       ;;9F4B|9F4B+9F4B/9F4B\9F57;
                      LSR A                                     ;;9F4C|9F4C+9F4C/9F4C\9F58;
                      LSR A                                     ;;9F4D|9F4D+9F4D/9F4D\9F59;
                      TAY                                       ;;9F4E|9F4E+9F4E/9F4E\9F5A;
                      LDA.B #$02                                ;;9F4F|9F4F+9F4F/9F4F\9F5B;
                      ORA.W !SpriteOffscreenX,X                 ;;9F51|9F51+9F51/9F51\9F5D;
                      STA.W !OAMTileSize+$40,Y                  ;;9F54|9F54+9F54/9F54\9F60;
                      JSR CODE_01A3DF                           ;;9F57|9F57+9F57/9F57\9F63;
                      RTS                                       ;;9F5A|9F5A+9F5A/9F5A\9F66; Return 
                                                                ;;                        ;
                                                                ;;                        ;
DATA_019F5B:          db $0B,$F5,$04,$FC,$04,$00                ;;9F5B|9F5B+9F5B/9F5B\9F67;
                                                                ;;                        ;
DATA_019F61:          db $00,$FF,$00,$FF,$00,$00                ;;9F61|9F61+9F61/9F61\9F6D;
                                                                ;;                        ;
DATA_019F67:          db $F3,$0D                                ;;9F67|9F67+9F67/9F67\9F73;
                                                                ;;                        ;
DATA_019F69:          db $FF,$00                                ;;9F69|9F69+9F69/9F69\9F75;
                                                                ;;                        ;
                   if ver_is_ntsc(!_VER)              ;\   IF   ;;++++++++++++++++++++++++; J, U, & SS
ShellSpeedX:          db $D2,$2E,$CC,$34                        ;;9F6B|9F6B+9F6B          ;
                   else                               ;<  ELSE  ;;------------------------; E0 & E1
ShellSpeedX:          db $C9,$37,$C2,$3E                        ;;              /9F6B\9F77;
                   endif                              ;/ ENDIF  ;;++++++++++++++++++++++++;
                                                                ;;                        ;
DATA_019F6F:          db $00,$10                                ;;9F6F|9F6F+9F6F/9F6F\9F7B;
                                                                ;;                        ;
HandleSprCarried:     JSR CODE_019F9B                           ;;9F71|9F71+9F71/9F71\9F7D;
                      LDA.W !PlayerTurningPose                  ;;9F74|9F74+9F74/9F74\9F80;
                      BNE CODE_019F83                           ;;9F77|9F77+9F77/9F77\9F83;
                      LDA.W !YoshiInPipeSetting                 ;;9F79|9F79+9F79/9F79\9F85; \ Branch if Yoshi going down pipe 
                      BNE CODE_019F83                           ;;9F7C|9F7C+9F7C/9F7C\9F88; / 
                      LDA.W !FaceScreenTimer                    ;;9F7E|9F7E+9F7E/9F7E\9F8A; \ Branch if Mario facing camera 
                      BEQ +                                     ;;9F81|9F81+9F81/9F81\9F8D; / 
CODE_019F83:          STZ.W !SpriteOAMIndex,X                   ;;9F83|9F83+9F83/9F83\9F8F;
                    + LDA.B !SpriteProperties                   ;;9F86|9F86+9F86/9F86\9F92;
                      PHA                                       ;;9F88|9F88+9F88/9F88\9F94;
                      LDA.W !YoshiInPipeSetting                 ;;9F89|9F89+9F89/9F89\9F95;
                      BEQ +                                     ;;9F8C|9F8C+9F8C/9F8C\9F98;
                      LDA.B #$10                                ;;9F8E|9F8E+9F8E/9F8E\9F9A;
                      STA.B !SpriteProperties                   ;;9F90|9F90+9F90/9F90\9F9C;
                    + JSR CODE_01A187                           ;;9F92|9F92+9F92/9F92\9F9E;
                      PLA                                       ;;9F95|9F95+9F95/9F95\9FA1;
                      STA.B !SpriteProperties                   ;;9F96|9F96+9F96/9F96\9FA2;
                      RTS                                       ;;9F98|9F98+9F98/9F98\9FA4; Return 
                                                                ;;                        ;
                                                                ;;                        ;
DATA_019F99:          db $FC,$04                                ;;9F99|9F99+9F99/9F99\9FA5;
                                                                ;;                        ;
CODE_019F9B:          LDA.B !SpriteNumber,X                     ;;9F9B|9F9B+9F9B/9F9B\9FA7; \ Branch if not Balloon 
                      CMP.B #$7D                                ;;9F9D|9F9D+9F9D/9F9D\9FA9;  | 
                      BNE CODE_019FE0                           ;;9F9F|9F9F+9F9F/9F9F\9FAB; / 
                      LDA.B !TrueFrame                          ;;9FA1|9FA1+9FA1/9FA1\9FAD;
                      AND.B #$03                                ;;9FA3|9FA3+9FA3/9FA3\9FAF;
                      BNE CODE_019FBE                           ;;9FA5|9FA5+9FA5/9FA5\9FB1;
                      DEC.W !PBalloonTimer                      ;;9FA7|9FA7+9FA7/9FA7\9FB3;
                      BEQ CODE_019FC4                           ;;9FAA|9FAA+9FAA/9FAA\9FB6;
                      LDA.W !PBalloonTimer                      ;;9FAC|9FAC+9FAC/9FAC\9FB8;
                      CMP.B #$30                                ;;9FAF|9FAF+9FAF/9FAF\9FBB;
                      BCS CODE_019FBE                           ;;9FB1|9FB1+9FB1/9FB1\9FBD;
                      LDY.B #$01                                ;;9FB3|9FB3+9FB3/9FB3\9FBF;
                      AND.B #$04                                ;;9FB5|9FB5+9FB5/9FB5\9FC1;
                      BEQ +                                     ;;9FB7|9FB7+9FB7/9FB7\9FC3;
                      LDY.B #$09                                ;;9FB9|9FB9+9FB9/9FB9\9FC5;
                    + STY.W !PBalloonInflating                  ;;9FBB|9FBB+9FBB/9FBB\9FC7;
CODE_019FBE:          LDA.B !PlayerAnimation                    ;;9FBE|9FBE+9FBE/9FBE\9FCA; \ Branch if no Mario animation sequence in progress 
                      CMP.B #$01                                ;;9FC0|9FC0+9FC0/9FC0\9FCC;  | 
                      BCC +                                     ;;9FC2|9FC2+9FC2/9FC2\9FCE; / 
CODE_019FC4:          STZ.W !PBalloonInflating                  ;;9FC4|9FC4+9FC4/9FC4\9FD0;
                      JMP OffScrEraseSprite                     ;;9FC7|9FC7+9FC7/9FC7\9FD3;
                                                                ;;                        ;
                    + PHB                                       ;;9FCA|9FCA+9FCA/9FCA\9FD6;
                      LDA.B #$02                                ;;9FCB|9FCB+9FCB/9FCB\9FD7;
                      PHA                                       ;;9FCD|9FCD+9FCD/9FCD\9FD9;
                      PLB                                       ;;9FCE|9FCE+9FCE/9FCE\9FDA;
                      JSL CODE_02D214                           ;;9FCF|9FCF+9FCF/9FCF\9FDB;
                      PLB                                       ;;9FD3|9FD3+9FD3/9FD3\9FDF;
                      JSR CODE_01A0B1                           ;;9FD4|9FD4+9FD4/9FD4\9FE0;
                      LDY.W !SpriteOAMIndex,X                   ;;9FD7|9FD7+9FD7/9FD7\9FE3; Y = Index into sprite OAM 
                      LDA.B #$F0                                ;;9FDA|9FDA+9FDA/9FDA\9FE6;
                      STA.W !OAMTileYPos+$100,Y                 ;;9FDC|9FDC+9FDC/9FDC\9FE8;
                      RTS                                       ;;9FDF|9FDF+9FDF/9FDF\9FEB; Return 
                                                                ;;                        ;
CODE_019FE0:          JSR CODE_019140                           ;;9FE0|9FE0+9FE0/9FE0\9FEC;
                      LDA.B !PlayerAnimation                    ;;9FE3|9FE3+9FE3/9FE3\9FEF; \ Branch if no Mario animation sequence in progress 
                      CMP.B #$01                                ;;9FE5|9FE5+9FE5/9FE5\9FF1;  | 
                      BCC +                                     ;;9FE7|9FE7+9FE7/9FE7\9FF3; / 
                      LDA.W !YoshiInPipeSetting                 ;;9FE9|9FE9+9FE9/9FE9\9FF5; \ Branch if in pipe 
                      BNE +                                     ;;9FEC|9FEC+9FEC/9FEC\9FF8; / 
                      LDA.B #$09                                ;;9FEE|9FEE+9FEE/9FEE\9FFA; \ Sprite status = Stunned 
                      STA.W !SpriteStatus,X                     ;;9FF0|9FF0+9FF0/9FF0\9FFC; / 
                      RTS                                       ;;9FF3|9FF3+9FF3/9FF3\9FFF; Return 
                                                                ;;                        ;
                    + LDA.W !SpriteStatus,X                     ;;9FF4|9FF4+9FF4/9FF4\A000; \ Return if sprite status == Normal 
                      CMP.B #$08                                ;;9FF7|9FF7+9FF7/9FF7\A003;  | 
                      BEQ Return01A014                          ;;9FF9|9FF9+9FF9/9FF9\A005; / 
                      LDA.B !SpriteLock                         ;;9FFB|9FFB+9FFB/9FFB\A007; \ Jump if sprites locked 
                      BEQ +                                     ;;9FFD|9FFD+9FFD/9FFD\A009;  | 
                      JMP CODE_01A0B1                           ;;9FFF|9FFF+9FFF/9FFF\A00B; / 
                                                                ;;                        ;
                    + JSR CODE_019624                           ;;A002|A002+A002/A002\A00E;
                      JSR SubSprSprInteract                     ;;A005|A005+A005/A005\A011;
                      LDA.W !YoshiInPipeSetting                 ;;A008|A008+A008/A008\A014;
                      BNE CODE_01A011                           ;;A00B|A00B+A00B/A00B\A017;
                      BIT.B !byetudlrHold                       ;;A00D|A00D+A00D/A00D\A019;
                      BVC +                                     ;;A00F|A00F+A00F/A00F\A01B;
CODE_01A011:          JSR CODE_01A0B1                           ;;A011|A011+A011/A011\A01D;
Return01A014:         RTS                                       ;;A014|A014+A014/A014\A020; Return 
                                                                ;;                        ;
                    + STZ.W !SpriteMisc1626,X                   ;;A015|A015+A015/A015\A021;
                      LDY.B #$00                                ;;A018|A018+A018/A018\A024;
                      LDA.B !SpriteNumber,X                     ;;A01A|A01A+A01A/A01A\A026; \ Branch if not Goomba 
                      CMP.B #$0F                                ;;A01C|A01C+A01C/A01C\A028;  | 
                      BNE +                                     ;;A01E|A01E+A01E/A01E\A02A; / 
                      LDA.B !PlayerInAir                        ;;A020|A020+A020/A020\A02C;
                      BNE +                                     ;;A022|A022+A022/A022\A02E;
                      LDY.B #$EC                                ;;A024|A024+A024/A024\A030;
                    + STY.B !SpriteYSpeed,X                     ;;A026|A026+A026/A026\A032;
                      LDA.B #$09                                ;;A028|A028+A028/A028\A034; \ Sprite status = Carryable 
                      STA.W !SpriteStatus,X                     ;;A02A|A02A+A02A/A02A\A036; / 
                      LDA.B !byetudlrHold                       ;;A02D|A02D+A02D/A02D\A039;
                      AND.B #$08                                ;;A02F|A02F+A02F/A02F\A03B;
                      BNE CODE_01A068                           ;;A031|A031+A031/A031\A03D;
                      LDA.B !SpriteNumber,X                     ;;A033|A033+A033/A033\A03F; \ Branch if sprite >= #$15 
                      CMP.B #$15                                ;;A035|A035+A035/A035\A041;  | 
                      BCS CODE_01A041                           ;;A037|A037+A037/A037\A043; / 
                      LDA.B !byetudlrHold                       ;;A039|A039+A039/A039\A045;
                      AND.B #$04                                ;;A03B|A03B+A03B/A03B\A047;
                      BEQ CODE_01A079                           ;;A03D|A03D+A03D/A03D\A049;
                      BRA CODE_01A047                           ;;A03F|A03F+A03F/A03F\A04B;
                                                                ;;                        ;
CODE_01A041:          LDA.B !byetudlrHold                       ;;A041|A041+A041/A041\A04D;
                      AND.B #$03                                ;;A043|A043+A043/A043\A04F;
                      BNE CODE_01A079                           ;;A045|A045+A045/A045\A051;
CODE_01A047:          LDY.B !PlayerDirection                    ;;A047|A047+A047/A047\A053;
                      LDA.B !PlayerXPosNow                      ;;A049|A049+A049/A049\A055;
                      CLC                                       ;;A04B|A04B+A04B/A04B\A057;
                      ADC.W DATA_019F67,Y                       ;;A04C|A04C+A04C/A04C\A058;
                      STA.B !SpriteXPosLow,X                    ;;A04F|A04F+A04F/A04F\A05B;
                      LDA.B !PlayerXPosNow+1                    ;;A051|A051+A051/A051\A05D;
                      ADC.W DATA_019F69,Y                       ;;A053|A053+A053/A053\A05F;
                      STA.W !SpriteYPosHigh,X                   ;;A056|A056+A056/A056\A062;
                      JSR SubHorizPos                           ;;A059|A059+A059/A059\A065;
                      LDA.W DATA_019F99,Y                       ;;A05C|A05C+A05C/A05C\A068;
                      CLC                                       ;;A05F|A05F+A05F/A05F\A06B;
                      ADC.B !PlayerXSpeed                       ;;A060|A060+A060/A060\A06C;
                      STA.B !SpriteXSpeed,X                     ;;A062|A062+A062/A062\A06E;
                      STZ.B !SpriteYSpeed,X                     ;;A064|A064+A064/A064\A070; Sprite Y Speed = 0 
                      BRA CODE_01A0A6                           ;;A066|A066+A066/A066\A072;
                                                                ;;                        ;
CODE_01A068:          JSL CODE_01AB6F                           ;;A068|A068+A068/A068\A074;
                      LDA.B #$90                                ;;A06C|A06C+A06C/A06C\A078;
                      STA.B !SpriteYSpeed,X                     ;;A06E|A06E+A06E/A06E\A07A;
                      LDA.B !PlayerXSpeed                       ;;A070|A070+A070/A070\A07C;
                      STA.B !SpriteXSpeed,X                     ;;A072|A072+A072/A072\A07E;
                      ASL A                                     ;;A074|A074+A074/A074\A080;
                      ROR.B !SpriteXSpeed,X                     ;;A075|A075+A075/A075\A081;
                      BRA CODE_01A0A6                           ;;A077|A077+A077/A077\A083;
                                                                ;;                        ;
CODE_01A079:          JSL CODE_01AB6F                           ;;A079|A079+A079/A079\A085;
                      LDA.W !SpriteMisc1540,X                   ;;A07D|A07D+A07D/A07D\A089;
                      STA.B !SpriteTableC2,X                    ;;A080|A080+A080/A080\A08C;
                      LDA.B #$0A                                ;;A082|A082+A082/A082\A08E; \ Sprite status = Kicked 
                      STA.W !SpriteStatus,X                     ;;A084|A084+A084/A084\A090; / 
                      LDY.B !PlayerDirection                    ;;A087|A087+A087/A087\A093;
                      LDA.W !PlayerRidingYoshi                  ;;A089|A089+A089/A089\A095;
                      BEQ +                                     ;;A08C|A08C+A08C/A08C\A098;
                      INY                                       ;;A08E|A08E+A08E/A08E\A09A;
                      INY                                       ;;A08F|A08F+A08F/A08F\A09B;
                    + LDA.W ShellSpeedX,Y                       ;;A090|A090+A090/A090\A09C;
                      STA.B !SpriteXSpeed,X                     ;;A093|A093+A093/A093\A09F;
                      EOR.B !PlayerXSpeed                       ;;A095|A095+A095/A095\A0A1;
                      BMI CODE_01A0A6                           ;;A097|A097+A097/A097\A0A3;
                      LDA.B !PlayerXSpeed                       ;;A099|A099+A099/A099\A0A5;
                      STA.B !_0                                 ;;A09B|A09B+A09B/A09B\A0A7;
                      ASL.B !_0                                 ;;A09D|A09D+A09D/A09D\A0A9;
                      ROR A                                     ;;A09F|A09F+A09F/A09F\A0AB;
                      CLC                                       ;;A0A0|A0A0+A0A0/A0A0\A0AC;
                      ADC.W ShellSpeedX,Y                       ;;A0A1|A0A1+A0A1/A0A1\A0AD;
                      STA.B !SpriteXSpeed,X                     ;;A0A4|A0A4+A0A4/A0A4\A0B0;
CODE_01A0A6:          LDA.B #$10                                ;;A0A6|A0A6+A0A6/A0A6\A0B2;
                      STA.W !SpriteMisc154C,X                   ;;A0A8|A0A8+A0A8/A0A8\A0B4;
                      LDA.B #$0C                                ;;A0AB|A0AB+A0AB/A0AB\A0B7;
                      STA.W !KickingTimer                       ;;A0AD|A0AD+A0AD/A0AD\A0B9;
                      RTS                                       ;;A0B0|A0B0+A0B0/A0B0\A0BC; Return 
                                                                ;;                        ;
CODE_01A0B1:          LDY.B #$00                                ;;A0B1|A0B1+A0B1/A0B1\A0BD;
                      LDA.B !PlayerDirection                    ;;A0B3|A0B3+A0B3/A0B3\A0BF; \ Y = Mario's direction 
                      BNE +                                     ;;A0B5|A0B5+A0B5/A0B5\A0C1;  | 
                      INY                                       ;;A0B7|A0B7+A0B7/A0B7\A0C3; / 
                    + LDA.W !FaceScreenTimer                    ;;A0B8|A0B8+A0B8/A0B8\A0C4;
                      BEQ +                                     ;;A0BB|A0BB+A0BB/A0BB\A0C7;
                      INY                                       ;;A0BD|A0BD+A0BD/A0BD\A0C9;
                      INY                                       ;;A0BE|A0BE+A0BE/A0BE\A0CA;
                      CMP.B #$05                                ;;A0BF|A0BF+A0BF/A0BF\A0CB;
                      BCC +                                     ;;A0C1|A0C1+A0C1/A0C1\A0CD;
                      INY                                       ;;A0C3|A0C3+A0C3/A0C3\A0CF;
                    + LDA.W !YoshiInPipeSetting                 ;;A0C4|A0C4+A0C4/A0C4\A0D0;
                      BEQ CODE_01A0CD                           ;;A0C7|A0C7+A0C7/A0C7\A0D3;
                      CMP.B #$02                                ;;A0C9|A0C9+A0C9/A0C9\A0D5;
                      BEQ CODE_01A0D4                           ;;A0CB|A0CB+A0CB/A0CB\A0D7;
CODE_01A0CD:          LDA.W !PlayerTurningPose                  ;;A0CD|A0CD+A0CD/A0CD\A0D9;
                      ORA.B !PlayerIsClimbing                   ;;A0D0|A0D0+A0D0/A0D0\A0DC;
                      BEQ +                                     ;;A0D2|A0D2+A0D2/A0D2\A0DE;
CODE_01A0D4:          LDY.B #$05                                ;;A0D4|A0D4+A0D4/A0D4\A0E0;
                    + PHY                                       ;;A0D6|A0D6+A0D6/A0D6\A0E2;
                      LDY.B #$00                                ;;A0D7|A0D7+A0D7/A0D7\A0E3;
                      LDA.W !StandOnSolidSprite                 ;;A0D9|A0D9+A0D9/A0D9\A0E5;
                      CMP.B #$03                                ;;A0DC|A0DC+A0DC/A0DC\A0E8;
                      BEQ +                                     ;;A0DE|A0DE+A0DE/A0DE\A0EA;
                      LDY.B #$3D                                ;;A0E0|A0E0+A0E0/A0E0\A0EC;
                    + LDA.W !PlayerXPosNext,Y                   ;;A0E2|A0E2+A0E2/A0E2\A0EE; \ $00 = Mario's X position 
                      STA.B !_0                                 ;;A0E5|A0E5+A0E5/A0E5\A0F1;  | 
                      LDA.W !PlayerXPosNext+1,Y                 ;;A0E7|A0E7+A0E7/A0E7\A0F3;  | 
                      STA.B !_1                                 ;;A0EA|A0EA+A0EA/A0EA\A0F6; / 
                      LDA.W !PlayerYPosNext,Y                   ;;A0EC|A0EC+A0EC/A0EC\A0F8; \ $02 = Mario's Y position 
                      STA.B !_2                                 ;;A0EF|A0EF+A0EF/A0EF\A0FB;  | 
                      LDA.W !PlayerYPosNext+1,Y                 ;;A0F1|A0F1+A0F1/A0F1\A0FD;  | 
                      STA.B !_3                                 ;;A0F4|A0F4+A0F4/A0F4\A100; / 
                      PLY                                       ;;A0F6|A0F6+A0F6/A0F6\A102;
                      LDA.B !_0                                 ;;A0F7|A0F7+A0F7/A0F7\A103;
                      CLC                                       ;;A0F9|A0F9+A0F9/A0F9\A105;
                      ADC.W DATA_019F5B,Y                       ;;A0FA|A0FA+A0FA/A0FA\A106;
                      STA.B !SpriteXPosLow,X                    ;;A0FD|A0FD+A0FD/A0FD\A109;
                      LDA.B !_1                                 ;;A0FF|A0FF+A0FF/A0FF\A10B;
                      ADC.W DATA_019F61,Y                       ;;A101|A101+A101/A101\A10D;
                      STA.W !SpriteYPosHigh,X                   ;;A104|A104+A104/A104\A110;
                      LDA.B #$0D                                ;;A107|A107+A107/A107\A113;
                      LDY.B !PlayerIsDucking                    ;;A109|A109+A109/A109\A115; \ Branch if ducking 
                      BNE CODE_01A111                           ;;A10B|A10B+A10B/A10B\A117; / 
                      LDY.B !Powerup                            ;;A10D|A10D+A10D/A10D\A119; \ Branch if Mario isn't small 
                      BNE +                                     ;;A10F|A10F+A10F/A10F\A11B; / 
CODE_01A111:          LDA.B #$0F                                ;;A111|A111+A111/A111\A11D;
                    + LDY.W !PickUpItemTimer                    ;;A113|A113+A113/A113\A11F;
                      BEQ +                                     ;;A116|A116+A116/A116\A122;
                      LDA.B #$0F                                ;;A118|A118+A118/A118\A124;
                    + CLC                                       ;;A11A|A11A+A11A/A11A\A126;
                      ADC.B !_2                                 ;;A11B|A11B+A11B/A11B\A127;
                      STA.B !SpriteYPosLow,X                    ;;A11D|A11D+A11D/A11D\A129;
                      LDA.B !_3                                 ;;A11F|A11F+A11F/A11F\A12B;
                      ADC.B #$00                                ;;A121|A121+A121/A121\A12D;
                      STA.W !SpriteXPosHigh,X                   ;;A123|A123+A123/A123\A12F;
                      LDA.B #$01                                ;;A126|A126+A126/A126\A132;
                      STA.W !IsCarryingItem                     ;;A128|A128+A128/A128\A134;
                      STA.W !CarryingFlag                       ;;A12B|A12B+A12B/A12B\A137; Set carrying enemy flag 
                      RTS                                       ;;A12E|A12E+A12E/A12E\A13A; Return 
                                                                ;;                        ;
StunGoomba:           LDA.B !EffFrame                           ;;A12F|A12F+A12F/A12F\A13B;
                      LSR A                                     ;;A131|A131+A131/A131\A13D;
                      LSR A                                     ;;A132|A132+A132/A132\A13E;
                      LDY.W !SpriteMisc1540,X                   ;;A133|A133+A133/A133\A13F;
                      CPY.B #$30                                ;;A136|A136+A136/A136\A142;
                      BCC +                                     ;;A138|A138+A138/A138\A144;
                      LSR A                                     ;;A13A|A13A+A13A/A13A\A146;
                    + AND.B #$01                                ;;A13B|A13B+A13B/A13B\A147;
                      STA.W !SpriteMisc1602,X                   ;;A13D|A13D+A13D/A13D\A149;
                      CPY.B #$08                                ;;A140|A140+A140/A140\A14C;
                      BNE +                                     ;;A142|A142+A142/A142\A14E;
                      JSR IsOnGround                            ;;A144|A144+A144/A144\A150;
                      BEQ +                                     ;;A147|A147+A147/A147\A153;
                      LDA.B #$D8                                ;;A149|A149+A149/A149\A155;
                      STA.B !SpriteYSpeed,X                     ;;A14B|A14B+A14B/A14B\A157;
                    + LDA.B #$80                                ;;A14D|A14D+A14D/A14D\A159;
                      JMP SubSprGfx2Entry0                      ;;A14F|A14F+A14F/A14F\A15B;
                                                                ;;                        ;
StunMechaKoopa:       LDA.B !Layer1XPos                         ;;A152|A152+A152/A152\A15E;
                      PHA                                       ;;A154|A154+A154/A154\A160;
                      LDA.W !SpriteMisc1540,X                   ;;A155|A155+A155/A155\A161;
                      CMP.B #$30                                ;;A158|A158+A158/A158\A164;
                      BCS +                                     ;;A15A|A15A+A15A/A15A\A166;
                      AND.B #$01                                ;;A15C|A15C+A15C/A15C\A168;
                      EOR.B !Layer1XPos                         ;;A15E|A15E+A15E/A15E\A16A;
                      STA.B !Layer1XPos                         ;;A160|A160+A160/A160\A16C;
                    + JSL CODE_03B307                           ;;A162|A162+A162/A162\A16E;
                      PLA                                       ;;A166|A166+A166/A166\A172;
                      STA.B !Layer1XPos                         ;;A167|A167+A167/A167\A173;
CODE_01A169:          LDA.W !SpriteStatus,X                     ;;A169|A169+A169/A169\A175; \ If sprite status == Carried, 
                      CMP.B #$0B                                ;;A16C|A16C+A16C/A16C\A178;  | 
                      BNE +                                     ;;A16E|A16E+A16E/A16E\A17A;  | 
                      LDA.B !PlayerDirection                    ;;A170|A170+A170/A170\A17C;  | Sprite direction = Opposite direction of Mario 
                      EOR.B #$01                                ;;A172|A172+A172/A172\A17E;  | 
                      STA.W !SpriteMisc157C,X                   ;;A174|A174+A174/A174\A180; / 
                    + RTS                                       ;;A177|A177+A177/A177\A183; Return 
                                                                ;;                        ;
StunFish:             JSR SetAnimationFrame                     ;;A178|A178+A178/A178\A184;
                      LDA.W !SpriteOBJAttribute,X               ;;A17B|A17B+A17B/A17B\A187;
                      ORA.B #$80                                ;;A17E|A17E+A17E/A17E\A18A;
                      STA.W !SpriteOBJAttribute,X               ;;A180|A180+A180/A180\A18C;
                      JSR SubSprGfx2Entry1                      ;;A183|A183+A183/A183\A18F;
                      RTS                                       ;;A186|A186+A186/A186\A192; Return 
                                                                ;;                        ;
CODE_01A187:          LDA.W !SpriteTweakerD,X                   ;;A187|A187+A187/A187\A193; \ Branch if sprite changes into a shell 
                      AND.B #$08                                ;;A18A|A18A+A18A/A18A\A196;  | 
                      BEQ CODE_01A1D0                           ;;A18C|A18C+A18C/A18C\A198; / 
                      LDA.B !SpriteNumber,X                     ;;A18E|A18E+A18E/A18E\A19A;
                      CMP.B #$A2                                ;;A190|A190+A190/A190\A19C;
                      BEQ StunMechaKoopa                        ;;A192|A192+A192/A192\A19E;
                      CMP.B #$15                                ;;A194|A194+A194/A194\A1A0;
                      BEQ StunFish                              ;;A196|A196+A196/A196\A1A2;
                      CMP.B #$16                                ;;A198|A198+A198/A198\A1A4;
                      BEQ StunFish                              ;;A19A|A19A+A19A/A19A\A1A6;
                      CMP.B #$0F                                ;;A19C|A19C+A19C/A19C\A1A8;
                      BEQ StunGoomba                            ;;A19E|A19E+A19E/A19E\A1AA;
                      CMP.B #$53                                ;;A1A0|A1A0+A1A0/A1A0\A1AC;
                      BEQ StunThrowBlock                        ;;A1A2|A1A2+A1A2/A1A2\A1AE;
                      CMP.B #$2C                                ;;A1A4|A1A4+A1A4/A1A4\A1B0;
                      BEQ StunYoshiEgg                          ;;A1A6|A1A6+A1A6/A1A6\A1B2;
                      CMP.B #$80                                ;;A1A8|A1A8+A1A8/A1A8\A1B4;
                      BEQ StunKey                               ;;A1AA|A1AA+A1AA/A1AA\A1B6;
                      CMP.B #$7D                                ;;A1AC|A1AC+A1AC/A1AC\A1B8;
                      BEQ Return01A1D3                          ;;A1AE|A1AE+A1AE/A1AE\A1BA;
                      CMP.B #$3E                                ;;A1B0|A1B0+A1B0/A1B0\A1BC;
                      BEQ StunPow                               ;;A1B2|A1B2+A1B2/A1B2\A1BE;
                      CMP.B #$2F                                ;;A1B4|A1B4+A1B4/A1B4\A1C0;
                      BEQ StunSpringBoard                       ;;A1B6|A1B6+A1B6/A1B6\A1C2;
                      CMP.B #$0D                                ;;A1B8|A1B8+A1B8/A1B8\A1C4;
                      BEQ StunBomb                              ;;A1BA|A1BA+A1BA/A1BA\A1C6;
                      CMP.B #$2D                                ;;A1BC|A1BC+A1BC/A1BC\A1C8;
                      BEQ StunBabyYoshi                         ;;A1BE|A1BE+A1BE/A1BE\A1CA;
                      CMP.B #$85                                ;;A1C0|A1C0+A1C0/A1C0\A1CC;
                      BNE CODE_01A1D0                           ;;A1C2|A1C2+A1C2/A1C2\A1CE;
                      JSR SubSprGfx2Entry1                      ;;A1C4|A1C4+A1C4/A1C4\A1D0; \ Handle unused sprite 85 
                      LDY.W !SpriteOAMIndex,X                   ;;A1C7|A1C7+A1C7/A1C7\A1D3;  | 
                      LDA.B #$47                                ;;A1CA|A1CA+A1CA/A1CA\A1D6;  | Set OAM with tile #$47 
                      STA.W !OAMTileNo+$100,Y                   ;;A1CC|A1CC+A1CC/A1CC\A1D8; / 
                      RTS                                       ;;A1CF|A1CF+A1CF/A1CF\A1DB; Return 
                                                                ;;                        ;
CODE_01A1D0:          JSR CODE_019806                           ;;A1D0|A1D0+A1D0/A1D0\A1DC;
Return01A1D3:         RTS                                       ;;A1D3|A1D3+A1D3/A1D3\A1DF; Return 
                                                                ;;                        ;
StunThrowBlock:       LDA.W !SpriteMisc1540,X                   ;;A1D4|A1D4+A1D4/A1D4\A1E0;
                      CMP.B #$40                                ;;A1D7|A1D7+A1D7/A1D7\A1E3;
                      BCS CODE_01A1DE                           ;;A1D9|A1D9+A1D9/A1D9\A1E5;
                      LSR A                                     ;;A1DB|A1DB+A1DB/A1DB\A1E7;
                      BCS StunYoshiEgg                          ;;A1DC|A1DC+A1DC/A1DC\A1E8;
CODE_01A1DE:          LDA.W !SpriteOBJAttribute,X               ;;A1DE|A1DE+A1DE/A1DE\A1EA;
                      INC A                                     ;;A1E1|A1E1+A1E1/A1E1\A1ED;
                      INC A                                     ;;A1E2|A1E2+A1E2/A1E2\A1EE;
                      AND.B #$0F                                ;;A1E3|A1E3+A1E3/A1E3\A1EF;
                      STA.W !SpriteOBJAttribute,X               ;;A1E5|A1E5+A1E5/A1E5\A1F1;
StunYoshiEgg:         JSR SubSprGfx2Entry1                      ;;A1E8|A1E8+A1E8/A1E8\A1F4;
                      RTS                                       ;;A1EB|A1EB+A1EB/A1EB\A1F7; Return 
                                                                ;;                        ;
StunBomb:             JSR SubSprGfx2Entry1                      ;;A1EC|A1EC+A1EC/A1EC\A1F8;
                      LDA.B #$CA                                ;;A1EF|A1EF+A1EF/A1EF\A1FB;
                      BRA CODE_01A222                           ;;A1F1|A1F1+A1F1/A1F1\A1FD;
                                                                ;;                        ;
StunKey:              JSR CODE_01A169                           ;;A1F3|A1F3+A1F3/A1F3\A1FF;
                      JSR SubSprGfx2Entry1                      ;;A1F6|A1F6+A1F6/A1F6\A202;
                      LDA.B #$EC                                ;;A1F9|A1F9+A1F9/A1F9\A205;
                      BRA CODE_01A222                           ;;A1FB|A1FB+A1FB/A1FB\A207;
                                                                ;;                        ;
StunPow:              LDY.W !SpriteMisc163E,X                   ;;A1FD|A1FD+A1FD/A1FD\A209;
                      BEQ CODE_01A218                           ;;A200|A200+A200/A200\A20C;
                      CPY.B #$01                                ;;A202|A202+A202/A202\A20E;
                      BNE +                                     ;;A204|A204+A204/A204\A210;
                      JMP CODE_019ACB                           ;;A206|A206+A206/A206\A212;
                                                                ;;                        ;
                    + JSR SmushedGfxRt                          ;;A209|A209+A209/A209\A215;
                      LDY.W !SpriteOAMIndex,X                   ;;A20C|A20C+A20C/A20C\A218; Y = Index into sprite OAM 
                      LDA.W !OAMTileAttr+$100,Y                 ;;A20F|A20F+A20F/A20F\A21B;
                      AND.B #$FE                                ;;A212|A212+A212/A212\A21E;
                      STA.W !OAMTileAttr+$100,Y                 ;;A214|A214+A214/A214\A220;
                      RTS                                       ;;A217|A217+A217/A217\A223; Return 
                                                                ;;                        ;
CODE_01A218:          LDA.B #$01                                ;;A218|A218+A218/A218\A224;
                      STA.W !SpriteMisc157C,X                   ;;A21A|A21A+A21A/A21A\A226;
                      JSR SubSprGfx2Entry1                      ;;A21D|A21D+A21D/A21D\A229;
                      LDA.B #$42                                ;;A220|A220+A220/A220\A22C;
CODE_01A222:          LDY.W !SpriteOAMIndex,X                   ;;A222|A222+A222/A222\A22E; Y = Index into sprite OAM 
                      STA.W !OAMTileNo+$100,Y                   ;;A225|A225+A225/A225\A231;
                      RTS                                       ;;A228|A228+A228/A228\A234; Return 
                                                                ;;                        ;
StunSpringBoard:      JMP CODE_01E6F0                           ;;A229|A229+A229/A229\A235;
                                                                ;;                        ;
StunBabyYoshi:        LDA.B !SpriteLock                         ;;A22C|A22C+A22C/A22C\A238; \ Branch if sprites locked 
                      BNE CODE_01A27B                           ;;A22E|A22E+A22E/A22E\A23A; / 
                      LDA.B !SpriteXPosLow,X                    ;;A230|A230+A230/A230\A23C;
                      CLC                                       ;;A232|A232+A232/A232\A23E;
                      ADC.B #$08                                ;;A233|A233+A233/A233\A23F;
                      STA.B !_0                                 ;;A235|A235+A235/A235\A241;
                      LDA.W !SpriteYPosHigh,X                   ;;A237|A237+A237/A237\A243;
                      ADC.B #$00                                ;;A23A|A23A+A23A/A23A\A246;
                      STA.B !_8                                 ;;A23C|A23C+A23C/A23C\A248;
                      LDA.B !SpriteYPosLow,X                    ;;A23E|A23E+A23E/A23E\A24A;
                      CLC                                       ;;A240|A240+A240/A240\A24C;
                      ADC.B #$08                                ;;A241|A241+A241/A241\A24D;
                      STA.B !_1                                 ;;A243|A243+A243/A243\A24F;
                      LDA.W !SpriteXPosHigh,X                   ;;A245|A245+A245/A245\A251;
                      ADC.B #$00                                ;;A248|A248+A248/A248\A254;
                      STA.B !_9                                 ;;A24A|A24A+A24A/A24A\A256;
                      JSL CODE_02B9FA                           ;;A24C|A24C+A24C/A24C\A258;
                      JSL CODE_02EA4E                           ;;A250|A250+A250/A250\A25C;
                      LDA.W !SpriteMisc163E,X                   ;;A254|A254+A254/A254\A260;
                      BNE CODE_01A27E                           ;;A257|A257+A257/A257\A263;
                      DEC A                                     ;;A259|A259+A259/A259\A265;
                      STA.W !SpriteMisc160E,X                   ;;A25A|A25A+A25A/A25A\A266;
                      LDA.W !SpriteStatus,X                     ;;A25D|A25D+A25D/A25D\A269; \ Branch if sprite status != Stunned 
                      CMP.B #$09                                ;;A260|A260+A260/A260\A26C;  | 
                      BNE +                                     ;;A262|A262+A262/A262\A26E; / 
                      JSR IsOnGround                            ;;A264|A264+A264/A264\A270;
                      BEQ +                                     ;;A267|A267+A267/A267\A273;
                      LDA.B #$F0                                ;;A269|A269+A269/A269\A275;
                      STA.B !SpriteYSpeed,X                     ;;A26B|A26B+A26B/A26B\A277;
                    + LDY.B #$00                                ;;A26D|A26D+A26D/A26D\A279;
                      LDA.B !EffFrame                           ;;A26F|A26F+A26F/A26F\A27B;
                      AND.B #$18                                ;;A271|A271+A271/A271\A27D;
                      BNE +                                     ;;A273|A273+A273/A273\A27F;
                      LDY.B #$03                                ;;A275|A275+A275/A275\A281;
                    + TYA                                       ;;A277|A277+A277/A277\A283;
                      STA.W !SpriteMisc1602,X                   ;;A278|A278+A278/A278\A284;
CODE_01A27B:          JMP CODE_01A34F                           ;;A27B|A27B+A27B/A27B\A287;
                                                                ;;                        ;
CODE_01A27E:          STZ.W !SpriteOAMIndex,X                   ;;A27E|A27E+A27E/A27E\A28A;
                      CMP.B #$20                                ;;A281|A281+A281/A281\A28D;
                      BEQ +                                     ;;A283|A283+A283/A283\A28F;
                      JMP CODE_01A30A                           ;;A285|A285+A285/A285\A291;
                                                                ;;                        ;
                    + LDY.W !SpriteMisc160E,X                   ;;A288|A288+A288/A288\A294;
                      LDA.B #$00                                ;;A28B|A28B+A28B/A28B\A297; \ Clear sprite status 
                      STA.W !SpriteStatus,Y                     ;;A28D|A28D+A28D/A28D\A299; / 
                      LDA.B #!SFX_GULP                          ;;A290|A290+A290/A290\A29C;
                      STA.W !SPCIO0                             ;;A292|A292+A292/A292\A29E; / Play sound effect 
                      LDA.W !SpriteMisc160E,Y                   ;;A295|A295+A295/A295\A2A1;
                      BNE CODE_01A2F4                           ;;A298|A298+A298/A298\A2A4;
                      LDA.W !SpriteNumber,Y                     ;;A29A|A29A+A29A/A29A\A2A6; \ Branch if not Changing power up 
                      CMP.B #$81                                ;;A29D|A29D+A29D/A29D\A2A9;  | 
                      BNE +                                     ;;A29F|A29F+A29F/A29F\A2AB; / 
                      LDA.B !EffFrame                           ;;A2A1|A2A1+A2A1/A2A1\A2AD;
                      LSR A                                     ;;A2A3|A2A3+A2A3/A2A3\A2AF;
                      LSR A                                     ;;A2A4|A2A4+A2A4/A2A4\A2B0;
                      LSR A                                     ;;A2A5|A2A5+A2A5/A2A5\A2B1;
                      LSR A                                     ;;A2A6|A2A6+A2A6/A2A6\A2B2;
                      AND.B #$03                                ;;A2A7|A2A7+A2A7/A2A7\A2B3;
                      TAY                                       ;;A2A9|A2A9+A2A9/A2A9\A2B5;
                      LDA.W ChangingItemSprite,Y                ;;A2AA|A2AA+A2AA/A2AA\A2B6;
                    + CMP.B #$74                                ;;A2AD|A2AD+A2AD/A2AD\A2B9;
                      BCC CODE_01A2F4                           ;;A2AF|A2AF+A2AF/A2AF\A2BB;
                      CMP.B #$78                                ;;A2B1|A2B1+A2B1/A2B1\A2BD;
                      BCS CODE_01A2F4                           ;;A2B3|A2B3+A2B3/A2B3\A2BF;
CODE_01A2B5:          STZ.W !YoshiSwallowTimer                  ;;A2B5|A2B5+A2B5/A2B5\A2C1;
                      STZ.W !YoshiHasWingsEvt                   ;;A2B8|A2B8+A2B8/A2B8\A2C4; No Yoshi wings 
                      LDA.B #$35                                ;;A2BB|A2BB+A2BB/A2BB\A2C7; \ Sprite = Yoshi 
                      STA.W !SpriteNumber,X                     ;;A2BD|A2BD+A2BD/A2BD\A2C9; / 
                      LDA.B #$08                                ;;A2C0|A2C0+A2C0/A2C0\A2CC; \ Sprite status = Normal 
                      STA.W !SpriteStatus,X                     ;;A2C2|A2C2+A2C2/A2C2\A2CE; / 
                      LDA.B #!SFX_YOSHI                         ;;A2C5|A2C5+A2C5/A2C5\A2D1;
                      STA.W !SPCIO3                             ;;A2C7|A2C7+A2C7/A2C7\A2D3; / Play sound effect 
                      LDA.B !SpriteYPosLow,X                    ;;A2CA|A2CA+A2CA/A2CA\A2D6;
                      SBC.B #$10                                ;;A2CC|A2CC+A2CC/A2CC\A2D8;
                      STA.B !SpriteYPosLow,X                    ;;A2CE|A2CE+A2CE/A2CE\A2DA;
                      LDA.W !SpriteXPosHigh,X                   ;;A2D0|A2D0+A2D0/A2D0\A2DC;
                      SBC.B #$00                                ;;A2D3|A2D3+A2D3/A2D3\A2DF;
                      STA.W !SpriteXPosHigh,X                   ;;A2D5|A2D5+A2D5/A2D5\A2E1;
                      LDA.W !SpriteOBJAttribute,X               ;;A2D8|A2D8+A2D8/A2D8\A2E4;
                      PHA                                       ;;A2DB|A2DB+A2DB/A2DB\A2E7; \ Reset sprite tables 
                      JSL InitSpriteTables                      ;;A2DC|A2DC+A2DC/A2DC\A2E8;  | 
                      PLA                                       ;;A2E0|A2E0+A2E0/A2E0\A2EC; / 
                      AND.B #$FE                                ;;A2E1|A2E1+A2E1/A2E1\A2ED;
                      STA.W !SpriteOBJAttribute,X               ;;A2E3|A2E3+A2E3/A2E3\A2EF;
                      LDA.B #$0C                                ;;A2E6|A2E6+A2E6/A2E6\A2F2;
                      STA.W !SpriteMisc1602,X                   ;;A2E8|A2E8+A2E8/A2E8\A2F4;
                      DEC.W !SpriteMisc160E,X                   ;;A2EB|A2EB+A2EB/A2EB\A2F7;
                      LDA.B #$40                                ;;A2EE|A2EE+A2EE/A2EE\A2FA;
                      STA.W !YoshiGrowingTimer                  ;;A2F0|A2F0+A2F0/A2F0\A2FC;
                      RTS                                       ;;A2F3|A2F3+A2F3/A2F3\A2FF; Return 
                                                                ;;                        ;
CODE_01A2F4:          INC.W !SpriteMisc1570,X                   ;;A2F4|A2F4+A2F4/A2F4\A300;
                      LDA.W !SpriteMisc1570,X                   ;;A2F7|A2F7+A2F7/A2F7\A303;
                      CMP.B #$05                                ;;A2FA|A2FA+A2FA/A2FA\A306;
                      BNE CODE_01A300                           ;;A2FC|A2FC+A2FC/A2FC\A308;
                      BRA CODE_01A2B5                           ;;A2FE|A2FE+A2FE/A2FE\A30A;
                                                                ;;                        ;
CODE_01A300:          JSL CODE_05B34A                           ;;A300|A300+A300/A300\A30C;
                      LDA.B #$01                                ;;A304|A304+A304/A304\A310;
                      JSL GivePoints                            ;;A306|A306+A306/A306\A312;
CODE_01A30A:          LDA.W !SpriteMisc163E,X                   ;;A30A|A30A+A30A/A30A\A316;
                      LSR A                                     ;;A30D|A30D+A30D/A30D\A319;
                      LSR A                                     ;;A30E|A30E+A30E/A30E\A31A;
                      LSR A                                     ;;A30F|A30F+A30F/A30F\A31B;
                      TAY                                       ;;A310|A310+A310/A310\A31C;
                      LDA.W DATA_01A35A,Y                       ;;A311|A311+A311/A311\A31D;
                      STA.W !SpriteMisc1602,X                   ;;A314|A314+A314/A314\A320;
                      STZ.B !_1                                 ;;A317|A317+A317/A317\A323;
                      LDA.W !SpriteMisc163E,X                   ;;A319|A319+A319/A319\A325;
                      CMP.B #$20                                ;;A31C|A31C+A31C/A31C\A328;
                      BCC CODE_01A34F                           ;;A31E|A31E+A31E/A31E\A32A;
                      SBC.B #$10                                ;;A320|A320+A320/A320\A32C;
                      LSR A                                     ;;A322|A322+A322/A322\A32E;
                      LSR A                                     ;;A323|A323+A323/A323\A32F;
                      LDY.W !SpriteMisc157C,X                   ;;A324|A324+A324/A324\A330;
                      BEQ +                                     ;;A327|A327+A327/A327\A333;
                      EOR.B #$FF                                ;;A329|A329+A329/A329\A335;
                      INC A                                     ;;A32B|A32B+A32B/A32B\A337;
                      DEC.B !_1                                 ;;A32C|A32C+A32C/A32C\A338;
                    + LDY.W !SpriteMisc160E,X                   ;;A32E|A32E+A32E/A32E\A33A;
                      CLC                                       ;;A331|A331+A331/A331\A33D;
                      ADC.B !SpriteXPosLow,X                    ;;A332|A332+A332/A332\A33E;
                      STA.W !SpriteXPosLow,Y                    ;;A334|A334+A334/A334\A340;
                      LDA.W !SpriteYPosHigh,X                   ;;A337|A337+A337/A337\A343;
                      ADC.B !_1                                 ;;A33A|A33A+A33A/A33A\A346;
                      STA.W !SpriteYPosHigh,Y                   ;;A33C|A33C+A33C/A33C\A348;
                      LDA.B !SpriteYPosLow,X                    ;;A33F|A33F+A33F/A33F\A34B;
                      SEC                                       ;;A341|A341+A341/A341\A34D;
                      SBC.B #$02                                ;;A342|A342+A342/A342\A34E;
                      STA.W !SpriteYPosLow,Y                    ;;A344|A344+A344/A344\A350;
                      LDA.W !SpriteXPosHigh,X                   ;;A347|A347+A347/A347\A353;
                      SBC.B #$00                                ;;A34A|A34A+A34A/A34A\A356;
                      STA.W !SpriteXPosHigh,Y                   ;;A34C|A34C+A34C/A34C\A358;
CODE_01A34F:          JSR CODE_01A169                           ;;A34F|A34F+A34F/A34F\A35B;
                      JSR SubSprGfx2Entry1                      ;;A352|A352+A352/A352\A35E;
                      JSL CODE_02EA25                           ;;A355|A355+A355/A355\A361;
                      RTS                                       ;;A359|A359+A359/A359\A365; Return 
                                                                ;;                        ;
                                                                ;;                        ;
DATA_01A35A:          db $00,$03,$02,$02,$01,$01,$01            ;;A35A|A35A+A35A/A35A\A366;
                                                                ;;                        ;
DATA_01A361:          db $10,$20                                ;;A361|A361+A361/A361\A36D;
                                                                ;;                        ;
DATA_01A363:          db $01,$02                                ;;A363|A363+A363/A363\A36F;
                                                                ;;                        ;
GetDrawInfoBnk1:      STZ.W !SpriteOffscreenVert,X              ;;A365|A365+A365/A365\A371;
                      STZ.W !SpriteOffscreenX,X                 ;;A368|A368+A368/A368\A374;
                      LDA.B !SpriteXPosLow,X                    ;;A36B|A36B+A36B/A36B\A377;
                      CMP.B !Layer1XPos                         ;;A36D|A36D+A36D/A36D\A379;
                      LDA.W !SpriteYPosHigh,X                   ;;A36F|A36F+A36F/A36F\A37B;
                      SBC.B !Layer1XPos+1                       ;;A372|A372+A372/A372\A37E;
                      BEQ +                                     ;;A374|A374+A374/A374\A380;
                      INC.W !SpriteOffscreenX,X                 ;;A376|A376+A376/A376\A382;
                    + LDA.W !SpriteYPosHigh,X                   ;;A379|A379+A379/A379\A385;
                      XBA                                       ;;A37C|A37C+A37C/A37C\A388;
                      LDA.B !SpriteXPosLow,X                    ;;A37D|A37D+A37D/A37D\A389;
                      REP #$20                                  ;;A37F|A37F+A37F/A37F\A38B; Accum (16 bit) 
                      SEC                                       ;;A381|A381+A381/A381\A38D;
                      SBC.B !Layer1XPos                         ;;A382|A382+A382/A382\A38E;
                      CLC                                       ;;A384|A384+A384/A384\A390;
                      ADC.W #$0040                              ;;A385|A385+A385/A385\A391;
                      CMP.W #$0180                              ;;A388|A388+A388/A388\A394;
                      SEP #$20                                  ;;A38B|A38B+A38B/A38B\A397; Accum (8 bit) 
                      ROL A                                     ;;A38D|A38D+A38D/A38D\A399;
                      AND.B #$01                                ;;A38E|A38E+A38E/A38E\A39A;
                      STA.W !SpriteWayOffscreenX,X              ;;A390|A390+A390/A390\A39C;
                      BNE CODE_01A3CB                           ;;A393|A393+A393/A393\A39F;
                      LDY.B #$00                                ;;A395|A395+A395/A395\A3A1;
                      LDA.W !SpriteStatus,X                     ;;A397|A397+A397/A397\A3A3; \ Branch if sprite status == Stunned 
                      CMP.B #$09                                ;;A39A|A39A+A39A/A39A\A3A6;  | 
                      BEQ CODE_01A3A6                           ;;A39C|A39C+A39C/A39C\A3A8; / 
                      LDA.W !SpriteTweakerF,X                   ;;A39E|A39E+A39E/A39E\A3AA; \ Branch if "Death frame 2 tiles high" 
                      AND.B #$20                                ;;A3A1|A3A1+A3A1/A3A1\A3AD;  | is NOT set 
                      BEQ CODE_01A3A6                           ;;A3A3|A3A3+A3A3/A3A3\A3AF; / 
                      INY                                       ;;A3A5|A3A5+A3A5/A3A5\A3B1;
CODE_01A3A6:          LDA.B !SpriteYPosLow,X                    ;;A3A6|A3A6+A3A6/A3A6\A3B2;
                      CLC                                       ;;A3A8|A3A8+A3A8/A3A8\A3B4;
                      ADC.W DATA_01A361,Y                       ;;A3A9|A3A9+A3A9/A3A9\A3B5;
                      PHP                                       ;;A3AC|A3AC+A3AC/A3AC\A3B8;
                      CMP.B !Layer1YPos                         ;;A3AD|A3AD+A3AD/A3AD\A3B9;
                      ROL.B !_0                                 ;;A3AF|A3AF+A3AF/A3AF\A3BB;
                      PLP                                       ;;A3B1|A3B1+A3B1/A3B1\A3BD;
                      LDA.W !SpriteXPosHigh,X                   ;;A3B2|A3B2+A3B2/A3B2\A3BE;
                      ADC.B #$00                                ;;A3B5|A3B5+A3B5/A3B5\A3C1;
                      LSR.B !_0                                 ;;A3B7|A3B7+A3B7/A3B7\A3C3;
                      SBC.B !Layer1YPos+1                       ;;A3B9|A3B9+A3B9/A3B9\A3C5;
                      BEQ +                                     ;;A3BB|A3BB+A3BB/A3BB\A3C7;
                      LDA.W !SpriteOffscreenVert,X              ;;A3BD|A3BD+A3BD/A3BD\A3C9;
                      ORA.W DATA_01A363,Y                       ;;A3C0|A3C0+A3C0/A3C0\A3CC;
                      STA.W !SpriteOffscreenVert,X              ;;A3C3|A3C3+A3C3/A3C3\A3CF;
                    + DEY                                       ;;A3C6|A3C6+A3C6/A3C6\A3D2;
                      BPL CODE_01A3A6                           ;;A3C7|A3C7+A3C7/A3C7\A3D3;
                      BRA +                                     ;;A3C9|A3C9+A3C9/A3C9\A3D5;
                                                                ;;                        ;
CODE_01A3CB:          PLA                                       ;;A3CB|A3CB+A3CB/A3CB\A3D7;
                      PLA                                       ;;A3CC|A3CC+A3CC/A3CC\A3D8;
                    + LDY.W !SpriteOAMIndex,X                   ;;A3CD|A3CD+A3CD/A3CD\A3D9; Y = Index into sprite OAM 
                      LDA.B !SpriteXPosLow,X                    ;;A3D0|A3D0+A3D0/A3D0\A3DC;
                      SEC                                       ;;A3D2|A3D2+A3D2/A3D2\A3DE;
                      SBC.B !Layer1XPos                         ;;A3D3|A3D3+A3D3/A3D3\A3DF;
                      STA.B !_0                                 ;;A3D5|A3D5+A3D5/A3D5\A3E1;
                      LDA.B !SpriteYPosLow,X                    ;;A3D7|A3D7+A3D7/A3D7\A3E3;
                      SEC                                       ;;A3D9|A3D9+A3D9/A3D9\A3E5;
                      SBC.B !Layer1YPos                         ;;A3DA|A3DA+A3DA/A3DA\A3E6;
                      STA.B !_1                                 ;;A3DC|A3DC+A3DC/A3DC\A3E8;
                      RTS                                       ;;A3DE|A3DE+A3DE/A3DE\A3EA; Return 
                                                                ;;                        ;
CODE_01A3DF:          LDA.W !SpriteOffscreenVert,X              ;;A3DF|A3DF+A3DF/A3DF\A3EB;
                      BEQ Return01A40A                          ;;A3E2|A3E2+A3E2/A3E2\A3EE;
                      PHX                                       ;;A3E4|A3E4+A3E4/A3E4\A3F0;
                      LSR A                                     ;;A3E5|A3E5+A3E5/A3E5\A3F1;
                      BCC +                                     ;;A3E6|A3E6+A3E6/A3E6\A3F2;
                      PHA                                       ;;A3E8|A3E8+A3E8/A3E8\A3F4;
                      LDA.B #$01                                ;;A3E9|A3E9+A3E9/A3E9\A3F5;
                      STA.W !OAMTileSize+$40,Y                  ;;A3EB|A3EB+A3EB/A3EB\A3F7;
                      TYA                                       ;;A3EE|A3EE+A3EE/A3EE\A3FA;
                      ASL A                                     ;;A3EF|A3EF+A3EF/A3EF\A3FB;
                      ASL A                                     ;;A3F0|A3F0+A3F0/A3F0\A3FC;
                      TAX                                       ;;A3F1|A3F1+A3F1/A3F1\A3FD;
                      LDA.B #$80                                ;;A3F2|A3F2+A3F2/A3F2\A3FE;
                      STA.W !OAMTileXPos+$100,X                 ;;A3F4|A3F4+A3F4/A3F4\A400;
                      PLA                                       ;;A3F7|A3F7+A3F7/A3F7\A403;
                    + LSR A                                     ;;A3F8|A3F8+A3F8/A3F8\A404;
                      BCC +                                     ;;A3F9|A3F9+A3F9/A3F9\A405;
                      LDA.B #$01                                ;;A3FB|A3FB+A3FB/A3FB\A407;
                      STA.W !OAMTileSize+$41,Y                  ;;A3FD|A3FD+A3FD/A3FD\A409;
                      TYA                                       ;;A400|A400+A400/A400\A40C;
                      ASL A                                     ;;A401|A401+A401/A401\A40D;
                      ASL A                                     ;;A402|A402+A402/A402\A40E;
                      TAX                                       ;;A403|A403+A403/A403\A40F;
                      LDA.B #$80                                ;;A404|A404+A404/A404\A410;
                      STA.W !OAMTileXPos+$104,X                 ;;A406|A406+A406/A406\A412;
                    + PLX                                       ;;A409|A409+A409/A409\A415;
Return01A40A:         RTS                                       ;;A40A|A40A+A40A/A40A\A416; Return 
                                                                ;;                        ;
                                                                ;;                        ;
DATA_01A40B:          db $02,$0A                                ;;A40B|A40B+A40B/A40B\A417;
                                                                ;;                        ;
SubSprSprInteract:    TXA                                       ;;A40D|A40D+A40D/A40D\A419;
                      BEQ Return01A40A                          ;;A40E|A40E+A40E/A40E\A41A;
                      TAY                                       ;;A410|A410+A410/A410\A41C;
                      EOR.B !TrueFrame                          ;;A411|A411+A411/A411\A41D; \ Return every other frame 
                      LSR A                                     ;;A413|A413+A413/A413\A41F;  | 
                      BCC Return01A40A                          ;;A414|A414+A414/A414\A420; / 
                      DEX                                       ;;A416|A416+A416/A416\A422;
CODE_01A417:          LDA.W !SpriteStatus,X                     ;;A417|A417+A417/A417\A423; \ Jump to $01A4B0 if 
                      CMP.B #$08                                ;;A41A|A41A+A41A/A41A\A426;  | sprite status < 8 
                      BCS +                                     ;;A41C|A41C+A41C/A41C\A428;  | 
                      JMP CODE_01A4B0                           ;;A41E|A41E+A41E/A41E\A42A; / 
                                                                ;;                        ;
                    + LDA.W !SpriteTweakerE,X                   ;;A421|A421+A421/A421\A42D;
                      ORA.W !SpriteTweakerE,Y                   ;;A424|A424+A424/A424\A430;
                      AND.B #$08                                ;;A427|A427+A427/A427\A433;
                      ORA.W !SpriteMisc1564,X                   ;;A429|A429+A429/A429\A435;
                      ORA.W !SpriteMisc1564,Y                   ;;A42C|A42C+A42C/A42C\A438;
                      ORA.W !SpriteOnYoshiTongue,X              ;;A42F|A42F+A42F/A42F\A43B;
                      ORA.W !SpriteBehindScene,X                ;;A432|A432+A432/A432\A43E;
                      EOR.W !SpriteBehindScene,Y                ;;A435|A435+A435/A435\A441;
                      BNE CODE_01A4B0                           ;;A438|A438+A438/A438\A444;
                      STX.W !SpriteInterIndex                   ;;A43A|A43A+A43A/A43A\A446;
                      LDA.B !SpriteXPosLow,X                    ;;A43D|A43D+A43D/A43D\A449;
                      STA.B !_0                                 ;;A43F|A43F+A43F/A43F\A44B;
                      LDA.W !SpriteYPosHigh,X                   ;;A441|A441+A441/A441\A44D;
                      STA.B !_1                                 ;;A444|A444+A444/A444\A450;
                      LDA.W !SpriteXPosLow,Y                    ;;A446|A446+A446/A446\A452;
                      STA.B !_2                                 ;;A449|A449+A449/A449\A455;
                      LDA.W !SpriteYPosHigh,Y                   ;;A44B|A44B+A44B/A44B\A457;
                      STA.B !_3                                 ;;A44E|A44E+A44E/A44E\A45A;
                      REP #$20                                  ;;A450|A450+A450/A450\A45C; Accum (16 bit) 
                      LDA.B !_0                                 ;;A452|A452+A452/A452\A45E;
                      SEC                                       ;;A454|A454+A454/A454\A460;
                      SBC.B !_2                                 ;;A455|A455+A455/A455\A461;
                      CLC                                       ;;A457|A457+A457/A457\A463;
                      ADC.W #$0010                              ;;A458|A458+A458/A458\A464;
                      CMP.W #$0020                              ;;A45B|A45B+A45B/A45B\A467;
                      SEP #$20                                  ;;A45E|A45E+A45E/A45E\A46A; Accum (8 bit) 
                      BCS CODE_01A4B0                           ;;A460|A460+A460/A460\A46C;
                      LDY.B #$00                                ;;A462|A462+A462/A462\A46E;
                      LDA.W !SpriteTweakerB,X                   ;;A464|A464+A464/A464\A470;
                      AND.B #$0F                                ;;A467|A467+A467/A467\A473;
                      BEQ +                                     ;;A469|A469+A469/A469\A475;
                      INY                                       ;;A46B|A46B+A46B/A46B\A477;
                    + LDA.B !SpriteYPosLow,X                    ;;A46C|A46C+A46C/A46C\A478;
                      CLC                                       ;;A46E|A46E+A46E/A46E\A47A;
                      ADC.W DATA_01A40B,Y                       ;;A46F|A46F+A46F/A46F\A47B;
                      STA.B !_0                                 ;;A472|A472+A472/A472\A47E;
                      LDA.W !SpriteXPosHigh,X                   ;;A474|A474+A474/A474\A480;
                      ADC.B #$00                                ;;A477|A477+A477/A477\A483;
                      STA.B !_1                                 ;;A479|A479+A479/A479\A485;
                      LDY.W !CurSpriteProcess                   ;;A47B|A47B+A47B/A47B\A487; Y = Sprite index 
                      LDX.B #$00                                ;;A47E|A47E+A47E/A47E\A48A;
                      LDA.W !SpriteTweakerB,Y                   ;;A480|A480+A480/A480\A48C;
                      AND.B #$0F                                ;;A483|A483+A483/A483\A48F;
                      BEQ +                                     ;;A485|A485+A485/A485\A491;
                      INX                                       ;;A487|A487+A487/A487\A493;
                    + LDA.W !SpriteYPosLow,Y                    ;;A488|A488+A488/A488\A494;
                      CLC                                       ;;A48B|A48B+A48B/A48B\A497;
                      %LorW_X(ADC,DATA_01A40B)                  ;;A48C|A48C+A48C/A48C\A498;
                      STA.B !_2                                 ;;A490|A48F+A48F/A48F\A49B;
                      LDA.W !SpriteXPosHigh,Y                   ;;A492|A491+A491/A491\A49D;
                      ADC.B #$00                                ;;A495|A494+A494/A494\A4A0;
                      STA.B !_3                                 ;;A497|A496+A496/A496\A4A2;
                      LDX.W !SpriteInterIndex                   ;;A499|A498+A498/A498\A4A4;
                      REP #$20                                  ;;A49C|A49B+A49B/A49B\A4A7; Accum (16 bit) 
                      LDA.B !_0                                 ;;A49E|A49D+A49D/A49D\A4A9;
                      SEC                                       ;;A4A0|A49F+A49F/A49F\A4AB;
                      SBC.B !_2                                 ;;A4A1|A4A0+A4A0/A4A0\A4AC;
                      CLC                                       ;;A4A3|A4A2+A4A2/A4A2\A4AE;
                      ADC.W #$000C                              ;;A4A4|A4A3+A4A3/A4A3\A4AF;
                      CMP.W #$0018                              ;;A4A7|A4A6+A4A6/A4A6\A4B2;
                      SEP #$20                                  ;;A4AA|A4A9+A4A9/A4A9\A4B5; Accum (8 bit) 
                      BCS CODE_01A4B0                           ;;A4AC|A4AB+A4AB/A4AB\A4B7;
                      JSR CODE_01A4BA                           ;;A4AE|A4AD+A4AD/A4AD\A4B9;
CODE_01A4B0:          DEX                                       ;;A4B1|A4B0+A4B0/A4B0\A4BC;
                      BMI +                                     ;;A4B2|A4B1+A4B1/A4B1\A4BD;
                      JMP CODE_01A417                           ;;A4B4|A4B3+A4B3/A4B3\A4BF;
                                                                ;;                        ;
                    + LDX.W !CurSpriteProcess                   ;;A4B7|A4B6+A4B6/A4B6\A4C2; X = Sprite index 
                      RTS                                       ;;A4BA|A4B9+A4B9/A4B9\A4C5; Return 
                                                                ;;                        ;
CODE_01A4BA:          LDA.W !SpriteStatus,Y                     ;;A4BB|A4BA+A4BA/A4BA\A4C6; \ Branch if sprite 2 status == Normal 
                      CMP.B #$08                                ;;A4BE|A4BD+A4BD/A4BD\A4C9;  | 
                      BEQ CODE_01A4CE                           ;;A4C0|A4BF+A4BF/A4BF\A4CB; / 
                      CMP.B #$09                                ;;A4C2|A4C1+A4C1/A4C1\A4CD; \ Branch if sprite 2 status == Carryable 
                      BEQ CODE_01A4E2                           ;;A4C4|A4C3+A4C3/A4C3\A4CF; / 
                      CMP.B #$0A                                ;;A4C6|A4C5+A4C5/A4C5\A4D1; \ Branch if sprite 2 status == Kicked 
                      BEQ CODE_01A506                           ;;A4C8|A4C7+A4C7/A4C7\A4D3; / 
                      CMP.B #$0B                                ;;A4CA|A4C9+A4C9/A4C9\A4D5; \ Branch if sprite 2 status == Carried 
                      BEQ CODE_01A51A                           ;;A4CC|A4CB+A4CB/A4CB\A4D7; / 
                      RTS                                       ;;A4CE|A4CD+A4CD/A4CD\A4D9; Return 
                                                                ;;                        ;
CODE_01A4CE:          LDA.W !SpriteStatus,X                     ;;A4CF|A4CE+A4CE/A4CE\A4DA; \ Branch if sprite status == Normal 
                      CMP.B #$08                                ;;A4D2|A4D1+A4D1/A4D1\A4DD;  | 
                      BEQ CODE_01A53D                           ;;A4D4|A4D3+A4D3/A4D3\A4DF; / 
                      CMP.B #$09                                ;;A4D6|A4D5+A4D5/A4D5\A4E1; \ Branch if sprite status == Carryable 
                      BEQ CODE_01A540                           ;;A4D8|A4D7+A4D7/A4D7\A4E3; / 
                      CMP.B #$0A                                ;;A4DA|A4D9+A4D9/A4D9\A4E5; \ Branch if sprite status == Kicked 
                      BEQ CODE_01A537                           ;;A4DC|A4DB+A4DB/A4DB\A4E7; / 
                      CMP.B #$0B                                ;;A4DE|A4DD+A4DD/A4DD\A4E9; \ Branch if sprite status == Carried 
                      BEQ CODE_01A534                           ;;A4E0|A4DF+A4DF/A4DF\A4EB; / 
                      RTS                                       ;;A4E2|A4E1+A4E1/A4E1\A4ED; Return 
                                                                ;;                        ;
CODE_01A4E2:          LDA.W !SpriteBlockedDirs,Y                ;;A4E3|A4E2+A4E2/A4E2\A4EE; \ Branch if on ground 
                      AND.B #$04                                ;;A4E6|A4E5+A4E5/A4E5\A4F1;  | 
                      BNE CODE_01A4F2                           ;;A4E8|A4E7+A4E7/A4E7\A4F3; / 
                      LDA.W !SpriteNumber,Y                     ;;A4EA|A4E9+A4E9/A4E9\A4F5; \ Branch if Goomba 
                      CMP.B #$0F                                ;;A4ED|A4EC+A4EC/A4EC\A4F8;  | 
                      BEQ CODE_01A534                           ;;A4EF|A4EE+A4EE/A4EE\A4FA; / 
                      BRA CODE_01A506                           ;;A4F1|A4F0+A4F0/A4F0\A4FC;
                                                                ;;                        ;
CODE_01A4F2:          LDA.W !SpriteStatus,X                     ;;A4F3|A4F2+A4F2/A4F2\A4FE; \ Branch if sprite status == Normal 
                      CMP.B #$08                                ;;A4F6|A4F5+A4F5/A4F5\A501;  | 
                      BEQ CODE_01A540                           ;;A4F8|A4F7+A4F7/A4F7\A503; / 
                      CMP.B #$09                                ;;A4FA|A4F9+A4F9/A4F9\A505; \ Branch if sprite status == Carryable 
                      BEQ CODE_01A555                           ;;A4FC|A4FB+A4FB/A4FB\A507; / 
                      CMP.B #$0A                                ;;A4FE|A4FD+A4FD/A4FD\A509; \ Branch if sprite status == Kicked 
                      BEQ ADDR_01A53A                           ;;A500|A4FF+A4FF/A4FF\A50B; / 
                      CMP.B #$0B                                ;;A502|A501+A501/A501\A50D; \ Branch if sprite status == Carried 
                      BEQ CODE_01A534                           ;;A504|A503+A503/A503\A50F; / 
                      RTS                                       ;;A506|A505+A505/A505\A511; Return 
                                                                ;;                        ;
CODE_01A506:          LDA.W !SpriteStatus,X                     ;;A507|A506+A506/A506\A512; \ Branch if sprite status == Normal 
                      CMP.B #$08                                ;;A50A|A509+A509/A509\A515;  | 
                      BEQ CODE_01A52E                           ;;A50C|A50B+A50B/A50B\A517; / 
                      CMP.B #$09                                ;;A50E|A50D+A50D/A50D\A519; \ Branch if sprite status == Carryable 
                      BEQ CODE_01A531                           ;;A510|A50F+A50F/A50F\A51B; / 
                      CMP.B #$0A                                ;;A512|A511+A511/A511\A51D; \ Branch if sprite status == Kicked 
                      BEQ CODE_01A534                           ;;A514|A513+A513/A513\A51F; / 
                      CMP.B #$0B                                ;;A516|A515+A515/A515\A521; \ Branch if sprite status == Carried 
                      BEQ CODE_01A534                           ;;A518|A517+A517/A517\A523; / 
                      RTS                                       ;;A51A|A519+A519/A519\A525; Return 
                                                                ;;                        ;
CODE_01A51A:          LDA.W !SpriteStatus,X                     ;;A51B|A51A+A51A/A51A\A526; \ Branch if sprite status == Normal 
                      CMP.B #$08                                ;;A51E|A51D+A51D/A51D\A529;  | 
                      BEQ CODE_01A534                           ;;A520|A51F+A51F/A51F\A52B; / 
                      CMP.B #$09                                ;;A522|A521+A521/A521\A52D; \ Branch if sprite status == Carryable 
                      BEQ CODE_01A534                           ;;A524|A523+A523/A523\A52F; / 
                      CMP.B #$0A                                ;;A526|A525+A525/A525\A531; \ Branch if sprite status == Kicked 
                      BEQ CODE_01A534                           ;;A528|A527+A527/A527\A533; / 
                      CMP.B #$0B                                ;;A52A|A529+A529/A529\A535; \ Branch if sprite status == Carried 
                      BEQ CODE_01A534                           ;;A52C|A52B+A52B/A52B\A537; / 
                      RTS                                       ;;A52E|A52D+A52D/A52D\A539; Return 
                                                                ;;                        ;
CODE_01A52E:          JMP CODE_01A625                           ;;A52F|A52E+A52E/A52E\A53A;
                                                                ;;                        ;
CODE_01A531:          JMP CODE_01A642                           ;;A532|A531+A531/A531\A53D;
                                                                ;;                        ;
CODE_01A534:          JMP CODE_01A685                           ;;A535|A534+A534/A534\A540;
                                                                ;;                        ;
CODE_01A537:          JMP CODE_01A5C4                           ;;A538|A537+A537/A537\A543;
                                                                ;;                        ;
ADDR_01A53A:          JMP CODE_01A5C4                           ;;A53B|A53A+A53A/A53A\A546;
                                                                ;;                        ;
CODE_01A53D:          JMP CODE_01A56D                           ;;A53E|A53D+A53D/A53D\A549;
                                                                ;;                        ;
CODE_01A540:          JSR CODE_01A6D9                           ;;A541|A540+A540/A540\A54C;
                      PHX                                       ;;A544|A543+A543/A543\A54F;
                      PHY                                       ;;A545|A544+A544/A544\A550;
                      TYA                                       ;;A546|A545+A545/A545\A551;
                      TXY                                       ;;A547|A546+A546/A546\A552;
                      TAX                                       ;;A548|A547+A547/A547\A553;
                      JSR CODE_01A6D9                           ;;A549|A548+A548/A548\A554;
                      PLY                                       ;;A54C|A54B+A54B/A54B\A557;
                      PLX                                       ;;A54D|A54C+A54C/A54C\A558;
                      LDA.W !SpriteMisc1558,X                   ;;A54E|A54D+A54D/A54D\A559;
                      ORA.W !SpriteMisc1558,Y                   ;;A551|A550+A550/A550\A55C;
                      BNE Return01A5C3                          ;;A554|A553+A553/A553\A55F;
CODE_01A555:          LDA.W !SpriteStatus,X                     ;;A556|A555+A555/A555\A561;
                      CMP.B #$09                                ;;A559|A558+A558/A558\A564;
                      BNE CODE_01A56D                           ;;A55B|A55A+A55A/A55A\A566;
                      JSR IsOnGround                            ;;A55D|A55C+A55C/A55C\A568;
                      BNE CODE_01A56D                           ;;A560|A55F+A55F/A55F\A56B;
                      LDA.B !SpriteNumber,X                     ;;A562|A561+A561/A561\A56D; \ Branch if not Goomba 
                      CMP.B #$0F                                ;;A564|A563+A563/A563\A56F;  | 
                      BNE +                                     ;;A566|A565+A565/A565\A571; / 
                      JMP CODE_01A685                           ;;A568|A567+A567/A567\A573;
                                                                ;;                        ;
                    + JMP CODE_01A5C4                           ;;A56B|A56A+A56A/A56A\A576;
                                                                ;;                        ;
CODE_01A56D:          LDA.B !SpriteXPosLow,X                    ;;A56E|A56D+A56D/A56D\A579;
                      SEC                                       ;;A570|A56F+A56F/A56F\A57B;
                      SBC.W !SpriteXPosLow,Y                    ;;A571|A570+A570/A570\A57C;
                      LDA.W !SpriteYPosHigh,X                   ;;A574|A573+A573/A573\A57F;
                      SBC.W !SpriteYPosHigh,Y                   ;;A577|A576+A576/A576\A582;
                      ROL A                                     ;;A57A|A579+A579/A579\A585;
                      AND.B #$01                                ;;A57B|A57A+A57A/A57A\A586;
                      STA.B !_0                                 ;;A57D|A57C+A57C/A57C\A588;
                      LDA.W !SpriteTweakerE,Y                   ;;A57F|A57E+A57E/A57E\A58A;
                      AND.B #$10                                ;;A582|A581+A581/A581\A58D;
                      BNE +                                     ;;A584|A583+A583/A583\A58F;
                      LDY.W !CurSpriteProcess                   ;;A586|A585+A585/A585\A591; Y = Sprite index 
                      LDA.W !SpriteMisc157C,Y                   ;;A589|A588+A588/A588\A594;
                      PHA                                       ;;A58C|A58B+A58B/A58B\A597;
                      LDA.B !_0                                 ;;A58D|A58C+A58C/A58C\A598;
                      STA.W !SpriteMisc157C,Y                   ;;A58F|A58E+A58E/A58E\A59A;
                      PLA                                       ;;A592|A591+A591/A591\A59D;
                      CMP.W !SpriteMisc157C,Y                   ;;A593|A592+A592/A592\A59E;
                      BEQ +                                     ;;A596|A595+A595/A595\A5A1;
                      LDA.W !SpriteMisc15AC,Y                   ;;A598|A597+A597/A597\A5A3;
                      BNE +                                     ;;A59B|A59A+A59A/A59A\A5A6;
                      LDA.B #$08                                ;;A59D|A59C+A59C/A59C\A5A8; \ Set turning timer 
                      STA.W !SpriteMisc15AC,Y                   ;;A59F|A59E+A59E/A59E\A5AA; / 
                    + LDA.W !SpriteTweakerE,X                   ;;A5A2|A5A1+A5A1/A5A1\A5AD;
                      AND.B #$10                                ;;A5A5|A5A4+A5A4/A5A4\A5B0;
                      BNE Return01A5C3                          ;;A5A7|A5A6+A5A6/A5A6\A5B2;
                      LDA.W !SpriteMisc157C,X                   ;;A5A9|A5A8+A5A8/A5A8\A5B4;
                      PHA                                       ;;A5AC|A5AB+A5AB/A5AB\A5B7;
                      LDA.B !_0                                 ;;A5AD|A5AC+A5AC/A5AC\A5B8;
                      EOR.B #$01                                ;;A5AF|A5AE+A5AE/A5AE\A5BA;
                      STA.W !SpriteMisc157C,X                   ;;A5B1|A5B0+A5B0/A5B0\A5BC;
                      PLA                                       ;;A5B4|A5B3+A5B3/A5B3\A5BF;
                      CMP.W !SpriteMisc157C,X                   ;;A5B5|A5B4+A5B4/A5B4\A5C0;
                      BEQ Return01A5C3                          ;;A5B8|A5B7+A5B7/A5B7\A5C3;
                      LDA.W !SpriteMisc15AC,X                   ;;A5BA|A5B9+A5B9/A5B9\A5C5;
                      BNE Return01A5C3                          ;;A5BD|A5BC+A5BC/A5BC\A5C8;
                      LDA.B #$08                                ;;A5BF|A5BE+A5BE/A5BE\A5CA; \ Set turning timer 
                      STA.W !SpriteMisc15AC,X                   ;;A5C1|A5C0+A5C0/A5C0\A5CC; / 
Return01A5C3:         RTS                                       ;;A5C4|A5C3+A5C3/A5C3\A5CF; Return 
                                                                ;;                        ;
CODE_01A5C4:          LDA.W !SpriteNumber,Y                     ;;A5C5|A5C4+A5C4/A5C4\A5D0;
                      SEC                                       ;;A5C8|A5C7+A5C7/A5C7\A5D3;
                      SBC.B #$83                                ;;A5C9|A5C8+A5C8/A5C8\A5D4;
                      CMP.B #$02                                ;;A5CB|A5CA+A5CA/A5CA\A5D6;
                      BCS +                                     ;;A5CD|A5CC+A5CC/A5CC\A5D8;
                      JSR FlipSpriteDir                         ;;A5CF|A5CE+A5CE/A5CE\A5DA;
                      STZ.B !SpriteYSpeed,X                     ;;A5D2|A5D1+A5D1/A5D1\A5DD; Sprite Y Speed = 0 
CODE_01A5D3:          PHX                                       ;;A5D4|A5D3+A5D3/A5D3\A5DF;
                      TYX                                       ;;A5D5|A5D4+A5D4/A5D4\A5E0;
                      JSR CODE_01B4E2                           ;;A5D6|A5D5+A5D5/A5D5\A5E1;
                      PLX                                       ;;A5D9|A5D8+A5D8/A5D8\A5E4;
                      RTS                                       ;;A5DA|A5D9+A5D9/A5D9\A5E5; Return 
                                                                ;;                        ;
                    + LDX.W !CurSpriteProcess                   ;;A5DB|A5DA+A5DA/A5DA\A5E6; X = Sprite index 
                      LDY.W !SpriteInterIndex                   ;;A5DE|A5DD+A5DD/A5DD\A5E9;
                      JSR CODE_01A77C                           ;;A5E1|A5E0+A5E0/A5E0\A5EC;
                      LDA.B #$02                                ;;A5E4|A5E3+A5E3/A5E3\A5EF; \ Sprite status = Killed 
                      STA.W !SpriteStatus,Y                     ;;A5E6|A5E5+A5E5/A5E5\A5F1; / 
                      PHX                                       ;;A5E9|A5E8+A5E8/A5E8\A5F4;
                      TYX                                       ;;A5EA|A5E9+A5E9/A5E9\A5F5;
                      JSL CODE_01AB72                           ;;A5EB|A5EA+A5EA/A5EA\A5F6;
                      PLX                                       ;;A5EF|A5EE+A5EE/A5EE\A5FA;
                      LDA.B !SpriteXSpeed,X                     ;;A5F0|A5EF+A5EF/A5EF\A5FB;
                      ASL A                                     ;;A5F2|A5F1+A5F1/A5F1\A5FD;
                      LDA.B #$10                                ;;A5F3|A5F2+A5F2/A5F2\A5FE;
                      BCC +                                     ;;A5F5|A5F4+A5F4/A5F4\A600;
                      LDA.B #$F0                                ;;A5F7|A5F6+A5F6/A5F6\A602;
                    + STA.W !SpriteXSpeed,Y                     ;;A5F9|A5F8+A5F8/A5F8\A604;
                      LDA.B #$D0                                ;;A5FC|A5FB+A5FB/A5FB\A607;
                      STA.W !SpriteYSpeed,Y                     ;;A5FE|A5FD+A5FD/A5FD\A609;
                      PHY                                       ;;A601|A600+A600/A600\A60C;
                      INC.W !SpriteMisc1626,X                   ;;A602|A601+A601/A601\A60D;
                      LDY.W !SpriteMisc1626,X                   ;;A605|A604+A604/A604\A610;
                      CPY.B #$08                                ;;A608|A607+A607/A607\A613;
                      BCS +                                     ;;A60A|A609+A609/A609\A615;
                      LDA.W StompSFX-1,Y                        ;;A60C|A60B+A60B/A60B\A617;
                      STA.W !SPCIO0                             ;;A60F|A60E+A60E/A60E\A61A; / Play sound effect 
                    + TYA                                       ;;A612|A611+A611/A611\A61D;
                      CMP.B #$08                                ;;A613|A612+A612/A612\A61E;
                      BCC +                                     ;;A615|A614+A614/A614\A620;
                      LDA.B #$08                                ;;A617|A616+A616/A616\A622;
                    + PLY                                       ;;A619|A618+A618/A618\A624;
                      JSL CODE_02ACE1                           ;;A61A|A619+A619/A619\A625;
Return01A61D:         RTS                                       ;;A61E|A61D+A61D/A61D\A629; Return 
                                                                ;;                        ;
StompSFX:             db !SFX_STOMP1                            ;;A61F|A61E+A61E/A61E\A62A;
                      db !SFX_STOMP2                            ;;A620|A61F+A61F/A61F\A62B;
                      db !SFX_STOMP3                            ;;A621|A620+A620/A620\A62C;
                      db !SFX_STOMP4                            ;;A622|A621+A621/A621\A62D;
                      db !SFX_STOMP5                            ;;A623|A622+A622/A622\A62E;
                      db !SFX_STOMP6                            ;;A624|A623+A623/A623\A62F;
                      db !SFX_STOMP7                            ;;A625|A624+A624/A624\A630;
                                                                ;;                        ;
CODE_01A625:          LDA.B !SpriteNumber,X                     ;;A626|A625+A625/A625\A631;
                      SEC                                       ;;A628|A627+A627/A627\A633;
                      SBC.B #$83                                ;;A629|A628+A628/A628\A634;
                      CMP.B #$02                                ;;A62B|A62A+A62A/A62A\A636;
                      BCS +                                     ;;A62D|A62C+A62C/A62C\A638;
                      PHX                                       ;;A62F|A62E+A62E/A62E\A63A;
                      TYX                                       ;;A630|A62F+A62F/A62F\A63B;
                      JSR FlipSpriteDir                         ;;A631|A630+A630/A630\A63C;
                      PLX                                       ;;A634|A633+A633/A633\A63F;
                      LDA.B #$00                                ;;A635|A634+A634/A634\A640;
                      STA.W !SpriteYSpeed,Y                     ;;A637|A636+A636/A636\A642;
                      JSR CODE_01B4E2                           ;;A63A|A639+A639/A639\A645;
                      RTS                                       ;;A63D|A63C+A63C/A63C\A648; Return 
                                                                ;;                        ;
                    + JSR CODE_01A77C                           ;;A63E|A63D+A63D/A63D\A649;
                      BRA +                                     ;;A641|A640+A640/A640\A64C;
                                                                ;;                        ;
CODE_01A642:          JSR IsOnGround                            ;;A643|A642+A642/A642\A64E;
                      BNE +                                     ;;A646|A645+A645/A645\A651;
                      JMP CODE_01A685                           ;;A648|A647+A647/A647\A653;
                                                                ;;                        ;
                    + PHX                                       ;;A64B|A64A+A64A/A64A\A656;
                      LDA.W !SpriteMisc1626,Y                   ;;A64C|A64B+A64B/A64B\A657;
                      INC A                                     ;;A64F|A64E+A64E/A64E\A65A;
                      STA.W !SpriteMisc1626,Y                   ;;A650|A64F+A64F/A64F\A65B;
                      LDX.W !SpriteMisc1626,Y                   ;;A653|A652+A652/A652\A65E;
                      CPX.B #$08                                ;;A656|A655+A655/A655\A661;
                      BCS +                                     ;;A658|A657+A657/A657\A663;
                      %LorW_X(LDA,StompSFX-1)                   ;;A65A|A659+A659/A659\A665;
                      STA.W !SPCIO0                             ;;A65E|A65C+A65C/A65C\A668; / Play sound effect 
                    + TXA                                       ;;A661|A65F+A65F/A65F\A66B;
                      CMP.B #$08                                ;;A662|A660+A660/A660\A66C;
                      BCC +                                     ;;A664|A662+A662/A662\A66E;
                      LDA.B #$08                                ;;A666|A664+A664/A664\A670;
                    + PLX                                       ;;A668|A666+A666/A666\A672;
                      JSL GivePoints                            ;;A669|A667+A667/A667\A673;
                      LDA.B #$02                                ;;A66D|A66B+A66B/A66B\A677; \ Sprite status = Killed 
                      STA.W !SpriteStatus,X                     ;;A66F|A66D+A66D/A66D\A679; / 
                      JSL CODE_01AB72                           ;;A672|A670+A670/A670\A67C;
                      LDA.W !SpriteXSpeed,Y                     ;;A676|A674+A674/A674\A680;
                      ASL A                                     ;;A679|A677+A677/A677\A683;
                      LDA.B #$10                                ;;A67A|A678+A678/A678\A684;
                      BCC +                                     ;;A67C|A67A+A67A/A67A\A686;
                      LDA.B #$F0                                ;;A67E|A67C+A67C/A67C\A688;
                    + STA.B !SpriteXSpeed,X                     ;;A680|A67E+A67E/A67E\A68A;
                      LDA.B #$D0                                ;;A682|A680+A680/A680\A68C;
                      STA.B !SpriteYSpeed,X                     ;;A684|A682+A682/A682\A68E;
                      RTS                                       ;;A686|A684+A684/A684\A690; Return 
                                                                ;;                        ;
CODE_01A685:          LDA.B !SpriteNumber,X                     ;;A687|A685+A685/A685\A691; \ Branch if Flying Question Block 
                      CMP.B #$83                                ;;A689|A687+A687/A687\A693;  | 
                      BEQ ADDR_01A69A                           ;;A68B|A689+A689/A689\A695;  | 
                      CMP.B #$84                                ;;A68D|A68B+A68B/A68B\A697;  | 
                      BEQ ADDR_01A69A                           ;;A68F|A68D+A68D/A68D\A699; / 
                      LDA.B #$02                                ;;A691|A68F+A68F/A68F\A69B; \ Sprite status = Killed 
                      STA.W !SpriteStatus,X                     ;;A693|A691+A691/A691\A69D; / 
                      LDA.B #$D0                                ;;A696|A694+A694/A694\A6A0;
                      STA.B !SpriteYSpeed,X                     ;;A698|A696+A696/A696\A6A2;
                      BRA +                                     ;;A69A|A698+A698/A698\A6A4;
                                                                ;;                        ;
ADDR_01A69A:          JSR CODE_01B4E2                           ;;A69C|A69A+A69A/A69A\A6A6;
                    + LDA.W !SpriteNumber,Y                     ;;A69F|A69D+A69D/A69D\A6A9; \ Branch if Flying Question Block or Key 
                      CMP.B #$80                                ;;A6A2|A6A0+A6A0/A6A0\A6AC;  | 
                      BEQ CODE_01A6BB                           ;;A6A4|A6A2+A6A2/A6A2\A6AE;  | 
                      CMP.B #$83                                ;;A6A6|A6A4+A6A4/A6A4\A6B0;  | 
                      BEQ ADDR_01A6B8                           ;;A6A8|A6A6+A6A6/A6A6\A6B2;  | 
                      CMP.B #$84                                ;;A6AA|A6A8+A6A8/A6A8\A6B4;  | 
                      BEQ ADDR_01A6B8                           ;;A6AC|A6AA+A6AA/A6AA\A6B6; / 
                      LDA.B #$02                                ;;A6AE|A6AC+A6AC/A6AC\A6B8; \ Sprite status = Killed 
                      STA.W !SpriteStatus,Y                     ;;A6B0|A6AE+A6AE/A6AE\A6BA; / 
                      LDA.B #$D0                                ;;A6B3|A6B1+A6B1/A6B1\A6BD;
                      STA.W !SpriteYSpeed,Y                     ;;A6B5|A6B3+A6B3/A6B3\A6BF;
                      BRA CODE_01A6BB                           ;;A6B8|A6B6+A6B6/A6B6\A6C2;
                                                                ;;                        ;
ADDR_01A6B8:          JSR CODE_01A5D3                           ;;A6BA|A6B8+A6B8/A6B8\A6C4;
CODE_01A6BB:          JSL CODE_01AB6F                           ;;A6BD|A6BB+A6BB/A6BB\A6C7;
                      LDA.B #$04                                ;;A6C1|A6BF+A6BF/A6BF\A6CB;
                      JSL GivePoints                            ;;A6C3|A6C1+A6C1/A6C1\A6CD;
                      LDA.B !SpriteXSpeed,X                     ;;A6C7|A6C5+A6C5/A6C5\A6D1;
                      ASL A                                     ;;A6C9|A6C7+A6C7/A6C7\A6D3;
                      LDA.B #$10                                ;;A6CA|A6C8+A6C8/A6C8\A6D4;
                      BCS +                                     ;;A6CC|A6CA+A6CA/A6CA\A6D6;
                      LDA.B #$F0                                ;;A6CE|A6CC+A6CC/A6CC\A6D8;
                    + STA.B !SpriteXSpeed,X                     ;;A6D0|A6CE+A6CE/A6CE\A6DA;
                      EOR.B #$FF                                ;;A6D2|A6D0+A6D0/A6D0\A6DC;
                      INC A                                     ;;A6D4|A6D2+A6D2/A6D2\A6DE;
                      STA.W !SpriteXSpeed,Y                     ;;A6D5|A6D3+A6D3/A6D3\A6DF;
                      RTS                                       ;;A6D8|A6D6+A6D6/A6D6\A6E2; Return 
                                                                ;;                        ;
                                                                ;;                        ;
DATA_01A6D7:          db $30,$D0                                ;;A6D9|A6D7+A6D7/A6D7\A6E3;
                                                                ;;                        ;
CODE_01A6D9:          STY.B !_0                                 ;;A6DB|A6D9+A6D9/A6D9\A6E5;
                      JSR IsOnGround                            ;;A6DD|A6DB+A6DB/A6DB\A6E7;
                      BEQ Return01A72D                          ;;A6E0|A6DE+A6DE/A6DE\A6EA;
                      LDA.W !SpriteBlockedDirs,Y                ;;A6E2|A6E0+A6E0/A6E0\A6EC; \ Branch if not on ground 
                      AND.B #$04                                ;;A6E5|A6E3+A6E3/A6E3\A6EF;  | 
                      BEQ Return01A72D                          ;;A6E7|A6E5+A6E5/A6E5\A6F1; / 
                      LDA.W !SpriteTweakerA,X                   ;;A6E9|A6E7+A6E7/A6E7\A6F3; \ Return if doesn't kick/hop into shells 
                      AND.B #$40                                ;;A6EC|A6EA+A6EA/A6EA\A6F6;  | 
                      BEQ Return01A72D                          ;;A6EE|A6EC+A6EC/A6EC\A6F8; / 
                      LDA.W !SpriteMisc1558,Y                   ;;A6F0|A6EE+A6EE/A6EE\A6FA;
                      ORA.W !SpriteMisc1558,X                   ;;A6F3|A6F1+A6F1/A6F1\A6FD;
                      BNE Return01A72D                          ;;A6F6|A6F4+A6F4/A6F4\A700;
                      STZ.B !_2                                 ;;A6F8|A6F6+A6F6/A6F6\A702;
                      LDA.B !SpriteXPosLow,X                    ;;A6FA|A6F8+A6F8/A6F8\A704;
                      SEC                                       ;;A6FC|A6FA+A6FA/A6FA\A706;
                      SBC.W !SpriteXPosLow,Y                    ;;A6FD|A6FB+A6FB/A6FB\A707;
                      BMI +                                     ;;A700|A6FE+A6FE/A6FE\A70A;
                      INC.B !_2                                 ;;A702|A700+A700/A700\A70C;
                    + CLC                                       ;;A704|A702+A702/A702\A70E;
                      ADC.B #$08                                ;;A705|A703+A703/A703\A70F;
                      CMP.B #$10                                ;;A707|A705+A705/A705\A711;
                      BCC Return01A72D                          ;;A709|A707+A707/A707\A713;
                      LDA.W !SpriteMisc157C,X                   ;;A70B|A709+A709/A709\A715;
                      CMP.B !_2                                 ;;A70E|A70C+A70C/A70C\A718;
                      BNE Return01A72D                          ;;A710|A70E+A70E/A70E\A71A;
                      LDA.B !SpriteNumber,X                     ;;A712|A710+A710/A710\A71C; \ Branch if not Blue Shelless 
                      CMP.B #$02                                ;;A714|A712+A712/A712\A71E;  | 
                      BNE +                                     ;;A716|A714+A714/A714\A720; / 
                      LDA.B #$20                                ;;A718|A716+A716/A716\A722;
                      STA.W !SpriteMisc163E,X                   ;;A71A|A718+A718/A718\A724;
                      STA.W !SpriteMisc1558,X                   ;;A71D|A71B+A71B/A71B\A727;
                      LDA.B #$23                                ;;A720|A71E+A71E/A71E\A72A;
                      STA.W !SpriteMisc1564,X                   ;;A722|A720+A720/A720\A72C;
                      TYA                                       ;;A725|A723+A723/A723\A72F;
                      STA.W !SpriteMisc160E,X                   ;;A726|A724+A724/A724\A730;
                      RTS                                       ;;A729|A727+A727/A727\A733; Return 
                                                                ;;                        ;
PlayKickSfx:          LDA.B #!SFX_KICK                          ;;A72A|A728+A728/A728\A734; \ Play sound effect 
                      STA.W !SPCIO0                             ;;A72C|A72A+A72A/A72A\A736; / 
Return01A72D:         RTS                                       ;;A72F|A72D+A72D/A72D\A739; Return 
                                                                ;;                        ;
                    + LDA.W !SpriteMisc1540,Y                   ;;A730|A72E+A72E/A72E\A73A; \ Return if timer is set 
                      BNE Return01A777                          ;;A733|A731+A731/A731\A73D; / 
                      LDA.W !SpriteNumber,Y                     ;;A735|A733+A733/A733\A73F; \ Return if sprite >= #$0F 
                      CMP.B #$0F                                ;;A738|A736+A736/A736\A742;  | 
                      BCS Return01A777                          ;;A73A|A738+A738/A738\A744; / 
                      LDA.W !SpriteBlockedDirs,Y                ;;A73C|A73A+A73A/A73A\A746; \ Return if not on ground 
                      AND.B #$04                                ;;A73F|A73D+A73D/A73D\A749;  | 
                      BEQ Return01A777                          ;;A741|A73F+A73F/A73F\A74B; / 
                      LDA.W !SpriteOBJAttribute,Y               ;;A743|A741+A741/A741\A74D; \ Branch if $15F6,y positive... 
                      BPL +                                     ;;A746|A744+A744/A744\A750; / 
                      AND.B #$7F                                ;;A748|A746+A746/A746\A752; \ ...otherwise make it positive 
                      STA.W !SpriteOBJAttribute,Y               ;;A74A|A748+A748/A748\A754; / 
                      LDA.B #$E0                                ;;A74D|A74B+A74B/A74B\A757; \ Set upward speed 
                      STA.W !SpriteYSpeed,Y                     ;;A74F|A74D+A74D/A74D\A759; / 
                      LDA.B #$20                                ;;A752|A750+A750/A750\A75C; \ $1564,y = #$20 
                      STA.W !SpriteMisc1564,Y                   ;;A754|A752+A752/A752\A75E; / 
CODE_01A755:          LDA.B #$20                                ;;A757|A755+A755/A755\A761; \ C2,x and 1558,x = #$20 
                      STA.B !SpriteTableC2,X                    ;;A759|A757+A757/A757\A763;  | (These are for the shell sprite) 
                      STA.W !SpriteMisc1558,X                   ;;A75B|A759+A759/A759\A765; / 
                      RTS                                       ;;A75E|A75C+A75C/A75C\A768; Return 
                                                                ;;                        ;
                    + LDA.B #$E0                                ;;A75F|A75D+A75D/A75D\A769; \ Set upward speed 
                      STA.B !SpriteYSpeed,X                     ;;A761|A75F+A75F/A75F\A76B; / 
                      LDA.W !SpriteInLiquid,X                   ;;A763|A761+A761/A761\A76D;
                      CMP.B #$01                                ;;A766|A764+A764/A764\A770;
                      LDA.B #$18                                ;;A768|A766+A766/A766\A772;
                      BCC +                                     ;;A76A|A768+A768/A768\A774;
                      LDA.B #$2C                                ;;A76C|A76A+A76A/A76A\A776;
                    + STA.W !SpriteMisc1558,X                   ;;A76E|A76C+A76C/A76C\A778;
                      TXA                                       ;;A771|A76F+A76F/A76F\A77B;
                      STA.W !SpriteMisc1594,Y                   ;;A772|A770+A770/A770\A77C;
                      TYA                                       ;;A775|A773+A773/A773\A77F;
                      STA.W !SpriteMisc1594,X                   ;;A776|A774+A774/A774\A780;
Return01A777:         RTS                                       ;;A779|A777+A777/A777\A783; Return 
                                                                ;;                        ;
                                                                ;;                        ;
DATA_01A778:          db $10,$F0                                ;;A77A|A778+A778/A778\A784;
                                                                ;;                        ;
DATA_01A77A:          db $00,$FF                                ;;A77C|A77A+A77A/A77A\A786;
                                                                ;;                        ;
CODE_01A77C:          LDA.B !SpriteNumber,X                     ;;A77E|A77C+A77C/A77C\A788;
                      CMP.B #$02                                ;;A780|A77E+A77E/A77E\A78A;
                      BNE CODE_01A7C2                           ;;A782|A780+A780/A780\A78C;
                      LDA.W !SpriteMisc187B,Y                   ;;A784|A782+A782/A782\A78E;
                      BNE CODE_01A7C2                           ;;A787|A785+A785/A785\A791;
                      LDA.W !SpriteMisc157C,X                   ;;A789|A787+A787/A787\A793;
                      CMP.W !SpriteMisc157C,Y                   ;;A78C|A78A+A78A/A78A\A796;
                      BEQ CODE_01A7C2                           ;;A78F|A78D+A78D/A78D\A799;
                      STY.B !_1                                 ;;A791|A78F+A78F/A78F\A79B;
                      LDY.W !SpriteMisc1534,X                   ;;A793|A791+A791/A791\A79D;
                      BNE +                                     ;;A796|A794+A794/A794\A7A0;
                      STZ.W !SpriteMisc1528,X                   ;;A798|A796+A796/A796\A7A2;
                      STZ.W !SpriteMisc163E,X                   ;;A79B|A799+A799/A799\A7A5;
                      TAY                                       ;;A79E|A79C+A79C/A79C\A7A8;
                      STY.B !_0                                 ;;A79F|A79D+A79D/A79D\A7A9;
                      LDA.B !SpriteXPosLow,X                    ;;A7A1|A79F+A79F/A79F\A7AB;
                      CLC                                       ;;A7A3|A7A1+A7A1/A7A1\A7AD;
                      ADC.W DATA_01A778,Y                       ;;A7A4|A7A2+A7A2/A7A2\A7AE;
                      LDY.B !_1                                 ;;A7A7|A7A5+A7A5/A7A5\A7B1;
                      STA.W !SpriteXPosLow,Y                    ;;A7A9|A7A7+A7A7/A7A7\A7B3;
                      LDA.W !SpriteYPosHigh,X                   ;;A7AC|A7AA+A7AA/A7AA\A7B6;
                      LDY.B !_0                                 ;;A7AF|A7AD+A7AD/A7AD\A7B9;
                      ADC.W DATA_01A77A,Y                       ;;A7B1|A7AF+A7AF/A7AF\A7BB;
                      LDY.B !_1                                 ;;A7B4|A7B2+A7B2/A7B2\A7BE;
                      STA.W !SpriteYPosHigh,Y                   ;;A7B6|A7B4+A7B4/A7B4\A7C0;
                      TYA                                       ;;A7B9|A7B7+A7B7/A7B7\A7C3;
                      STA.W !SpriteMisc160E,X                   ;;A7BA|A7B8+A7B8/A7B8\A7C4;
                      LDA.B #$01                                ;;A7BD|A7BB+A7BB/A7BB\A7C7;
                      STA.W !SpriteMisc1534,X                   ;;A7BF|A7BD+A7BD/A7BD\A7C9;
                    + PLA                                       ;;A7C2|A7C0+A7C0/A7C0\A7CC;
                      PLA                                       ;;A7C3|A7C1+A7C1/A7C1\A7CD;
CODE_01A7C2:          LDX.W !SpriteInterIndex                   ;;A7C4|A7C2+A7C2/A7C2\A7CE;
                      LDY.W !CurSpriteProcess                   ;;A7C7|A7C5+A7C5/A7C5\A7D1; Y = Sprite index 
                      RTS                                       ;;A7CA|A7C8+A7C8/A7C8\A7D4; Return 
                                                                ;;                        ;
                                                                ;;                        ;
SpriteToSpawn:        db $00,$01,$02,$03,$04,$05,$06,$07        ;;A7CB|A7C9+A7C9/A7C9\A7D5;
                      db $04,$04,$05,$05,$07,$00,$00,$0F        ;;A7D3|A7D1+A7D1/A7D1\A7DD;
                      db $0F,$0F                                ;;A7DB|A7D9+A7D9/A7D9\A7E5;
                                                                ;;                        ;
SpriteToSpawn2:       db $0D                                    ;;A7DD|A7DB+A7DB/A7DB\A7E7;
                                                                ;;                        ;
MarioSprInteract:     PHB                                       ;;A7DE|A7DC+A7DC/A7DC\A7E8;
                      PHK                                       ;;A7DF|A7DD+A7DD/A7DD\A7E9;
                      PLB                                       ;;A7E0|A7DE+A7DE/A7DE\A7EA;
                      JSR MarioSprInteractRt                    ;;A7E1|A7DF+A7DF/A7DF\A7EB;
                      PLB                                       ;;A7E4|A7E2+A7E2/A7E2\A7EE;
                      RTL                                       ;;A7E5|A7E3+A7E3/A7E3\A7EF; Return 
                                                                ;;                        ;
MarioSprInteractRt:   LDA.W !SpriteTweakerD,X                   ;;A7E6|A7E4+A7E4/A7E4\A7F0; \ Branch if "Process interaction every frame" is set 
                      AND.B #$20                                ;;A7E9|A7E7+A7E7/A7E7\A7F3;  | 
                      BNE ProcessInteract                       ;;A7EB|A7E9+A7E9/A7E9\A7F5; / 
                      TXA                                       ;;A7ED|A7EB+A7EB/A7EB\A7F7; \ Otherwise, return every other frame 
                      EOR.B !TrueFrame                          ;;A7EE|A7EC+A7EC/A7EC\A7F8;  | 
                      AND.B #$01                                ;;A7F0|A7EE+A7EE/A7EE\A7FA;  | 
                      ORA.W !SpriteOffscreenX,X                 ;;A7F2|A7F0+A7F0/A7F0\A7FC;  | 
                      BEQ ProcessInteract                       ;;A7F5|A7F3+A7F3/A7F3\A7FF;  | 
                    - CLC                                       ;;A7F7|A7F5+A7F5/A7F5\A801;  | 
                      RTS                                       ;;A7F8|A7F6+A7F6/A7F6\A802; / 
                                                                ;;                        ;
ProcessInteract:      JSR SubHorizPos                           ;;A7F9|A7F7+A7F7/A7F7\A803;
                      LDA.B !_F                                 ;;A7FC|A7FA+A7FA/A7FA\A806;
                      CLC                                       ;;A7FE|A7FC+A7FC/A7FC\A808;
                      ADC.B #$50                                ;;A7FF|A7FD+A7FD/A7FD\A809;
                      CMP.B #$A0                                ;;A801|A7FF+A7FF/A7FF\A80B;
                      BCS -                                     ;;A803|A801+A801/A801\A80D; No contact, return 
                      JSR CODE_01AD42                           ;;A805|A803+A803/A803\A80F;
                      LDA.B !_E                                 ;;A808|A806+A806/A806\A812;
                      CLC                                       ;;A80A|A808+A808/A808\A814;
                      ADC.B #$60                                ;;A80B|A809+A809/A809\A815;
                      CMP.B #$C0                                ;;A80D|A80B+A80B/A80B\A817;
                      BCS -                                     ;;A80F|A80D+A80D/A80D\A819; No contact, return 
CODE_01A80F:          LDA.B !PlayerAnimation                    ;;A811|A80F+A80F/A80F\A81B; \ If animation sequence activated... 
                      CMP.B #$01                                ;;A813|A811+A811/A811\A81D;  | 
                      BCS -                                     ;;A815|A813+A813/A813\A81F; / ...no contact, return 
                      LDA.B #$00                                ;;A817|A815+A815/A815\A821; \ Branch if bit 6 of $0D9B set? 
                      BIT.W !IRQNMICommand                      ;;A819|A817+A817/A817\A823;  | 
                      BVS +                                     ;;A81C|A81A+A81A/A81A\A826; / 
                      LDA.W !PlayerBehindNet                    ;;A81E|A81C+A81C/A81C\A828; \ If Mario and Sprite not on same side of scenery... 
                      EOR.W !SpriteBehindScene,X                ;;A821|A81F+A81F/A81F\A82B;  | 
                    + BNE ReturnNoContact2                      ;;A824|A822+A822/A822\A82E; / ...no contact, return 
                      JSL GetMarioClipping                      ;;A826|A824+A824/A824\A830;
                      JSL GetSpriteClippingA                    ;;A82A|A828+A828/A828\A834;
                      JSL CheckForContact                       ;;A82E|A82C+A82C/A82C\A838;
                      BCC ReturnNoContact2                      ;;A832|A830+A830/A830\A83C; No contact, return 
                      LDA.W !SpriteTweakerD,X                   ;;A834|A832+A832/A832\A83E; \ Branch if sprite uses default Mario interaction 
                      BPL +                                     ;;A837|A835+A835/A835\A841; / 
                      SEC                                       ;;A839|A837+A837/A837\A843; Contact, return 
                      RTS                                       ;;A83A|A838+A838/A838\A844; Return 
                                                                ;;                        ;
                                                                ;;                        ;
DATA_01A839:          db $F0,$10                                ;;A83B|A839+A839/A839\A845;
                                                                ;;                        ;
                    + LDA.W !InvinsibilityTimer                 ;;A83D|A83B+A83B/A83B\A847; \ Branch if Mario doesn't have star 
                      BEQ CODE_01A87E                           ;;A840|A83E+A83E/A83E\A84A; / 
                      LDA.W !SpriteTweakerD,X                   ;;A842|A840+A840/A840\A84C; \ Branch if "Process interaction every frame" is set 
                      AND.B #$02                                ;;A845|A843+A843/A843\A84F;  | 
                      BNE CODE_01A87E                           ;;A847|A845+A845/A845\A851; / 
CODE_01A847:          JSL CODE_01AB6F                           ;;A849|A847+A847/A847\A853;
                      INC.W !StarKillCounter                    ;;A84D|A84B+A84B/A84B\A857;
                      LDA.W !StarKillCounter                    ;;A850|A84E+A84E/A84E\A85A;
                      CMP.B #$08                                ;;A853|A851+A851/A851\A85D;
                      BCC +                                     ;;A855|A853+A853/A853\A85F;
                      LDA.B #$08                                ;;A857|A855+A855/A855\A861;
                      STA.W !StarKillCounter                    ;;A859|A857+A857/A857\A863;
                    + JSL GivePoints                            ;;A85C|A85A+A85A/A85A\A866;
                      LDY.W !StarKillCounter                    ;;A860|A85E+A85E/A85E\A86A;
                      CPY.B #$08                                ;;A863|A861+A861/A861\A86D;
                      BCS +                                     ;;A865|A863+A863/A863\A86F;
                      LDA.W StompSFX-1,Y                        ;;A867|A865+A865/A865\A871;
                      STA.W !SPCIO0                             ;;A86A|A868+A868/A868\A874; / Play sound effect 
                    + LDA.B #$02                                ;;A86D|A86B+A86B/A86B\A877; \ Sprite status = Killed 
                      STA.W !SpriteStatus,X                     ;;A86F|A86D+A86D/A86D\A879; / 
                      LDA.B #$D0                                ;;A872|A870+A870/A870\A87C;
                      STA.B !SpriteYSpeed,X                     ;;A874|A872+A872/A872\A87E;
                      JSR SubHorizPos                           ;;A876|A874+A874/A874\A880;
                      LDA.W DATA_01A839,Y                       ;;A879|A877+A877/A877\A883;
                      STA.B !SpriteXSpeed,X                     ;;A87C|A87A+A87A/A87A\A886;
ReturnNoContact2:     CLC                                       ;;A87E|A87C+A87C/A87C\A888;
                      RTS                                       ;;A87F|A87D+A87D/A87D\A889; Return 
                                                                ;;                        ;
CODE_01A87E:          STZ.W !StarKillCounter                    ;;A880|A87E+A87E/A87E\A88A;
                      LDA.W !SpriteMisc154C,X                   ;;A883|A881+A881/A881\A88D;
                      BNE CODE_01A895                           ;;A886|A884+A884/A884\A890;
                      LDA.B #$08                                ;;A888|A886+A886/A886\A892;
                      STA.W !SpriteMisc154C,X                   ;;A88A|A888+A888/A888\A894;
                      LDA.W !SpriteStatus,X                     ;;A88D|A88B+A88B/A88B\A897;
                      CMP.B #$09                                ;;A890|A88E+A88E/A88E\A89A;
                      BNE +                                     ;;A892|A890+A890/A890\A89C;
                      JSR CODE_01AA42                           ;;A894|A892+A892/A892\A89E;
CODE_01A895:          CLC                                       ;;A897|A895+A895/A895\A8A1;
                      RTS                                       ;;A898|A896+A896/A896\A8A2; Return 
                                                                ;;                        ;
                    + LDA.B #$14                                ;;A899|A897+A897/A897\A8A3;
                      STA.B !_1                                 ;;A89B|A899+A899/A899\A8A5;
                      LDA.B !_5                                 ;;A89D|A89B+A89B/A89B\A8A7;
                      SEC                                       ;;A89F|A89D+A89D/A89D\A8A9;
                      SBC.B !_1                                 ;;A8A0|A89E+A89E/A89E\A8AA;
                      ROL.B !_0                                 ;;A8A2|A8A0+A8A0/A8A0\A8AC;
                      CMP.B !PlayerYPosNow                      ;;A8A4|A8A2+A8A2/A8A2\A8AE;
                      PHP                                       ;;A8A6|A8A4+A8A4/A8A4\A8B0;
                      LSR.B !_0                                 ;;A8A7|A8A5+A8A5/A8A5\A8B1;
                      LDA.B !_B                                 ;;A8A9|A8A7+A8A7/A8A7\A8B3;
                      SBC.B #$00                                ;;A8AB|A8A9+A8A9/A8A9\A8B5;
                      PLP                                       ;;A8AD|A8AB+A8AB/A8AB\A8B7;
                      SBC.B !PlayerYPosNow+1                    ;;A8AE|A8AC+A8AC/A8AC\A8B8;
                      BMI CODE_01A8E6                           ;;A8B0|A8AE+A8AE/A8AE\A8BA;
                      LDA.B !PlayerYSpeed                       ;;A8B2|A8B0+A8B0/A8B0\A8BC;
                      BPL CODE_01A8C0                           ;;A8B4|A8B2+A8B2/A8B2\A8BE;
                      LDA.W !SpriteTweakerF,X                   ;;A8B6|A8B4+A8B4/A8B4\A8C0; \ TODO: Branch if Unknown Bit 11 is set 
                      AND.B #$10                                ;;A8B9|A8B7+A8B7/A8B7\A8C3;  | 
                      BNE CODE_01A8C0                           ;;A8BB|A8B9+A8B9/A8B9\A8C5; / 
                      LDA.W !SpriteStompCounter                 ;;A8BD|A8BB+A8BB/A8BB\A8C7;
                      BEQ CODE_01A8E6                           ;;A8C0|A8BE+A8BE/A8BE\A8CA;
CODE_01A8C0:          JSR IsOnGround                            ;;A8C2|A8C0+A8C0/A8C0\A8CC;
                      BEQ CODE_01A8C9                           ;;A8C5|A8C3+A8C3/A8C3\A8CF;
                      LDA.B !PlayerInAir                        ;;A8C7|A8C5+A8C5/A8C5\A8D1;
                      BEQ CODE_01A8E6                           ;;A8C9|A8C7+A8C7/A8C7\A8D3;
CODE_01A8C9:          LDA.W !SpriteTweakerA,X                   ;;A8CB|A8C9+A8C9/A8C9\A8D5; \ Branch if can be jumped on 
                      AND.B #$10                                ;;A8CE|A8CC+A8CC/A8CC\A8D8;  | 
                      BNE CODE_01A91C                           ;;A8D0|A8CE+A8CE/A8CE\A8DA; / 
                      LDA.W !SpinJumpFlag                       ;;A8D2|A8D0+A8D0/A8D0\A8DC;
                      ORA.W !PlayerRidingYoshi                  ;;A8D5|A8D3+A8D3/A8D3\A8DF;
                      BEQ CODE_01A8E6                           ;;A8D8|A8D6+A8D6/A8D6\A8E2;
CODE_01A8D8:          LDA.B #!SFX_SPLAT                         ;;A8DA|A8D8+A8D8/A8D8\A8E4;
                      STA.W !SPCIO0                             ;;A8DC|A8DA+A8DA/A8DA\A8E6; / Play sound effect 
                      JSL BoostMarioSpeed                       ;;A8DF|A8DD+A8DD/A8DD\A8E9;
                      JSL DisplayContactGfx                     ;;A8E3|A8E1+A8E1/A8E1\A8ED;
                      RTS                                       ;;A8E7|A8E5+A8E5/A8E5\A8F1; Return 
                                                                ;;                        ;
CODE_01A8E6:          LDA.W !PlayerSlopePose                    ;;A8E8|A8E6+A8E6/A8E6\A8F2;
                      BEQ +                                     ;;A8EB|A8E9+A8E9/A8E9\A8F5;
                      LDA.W !SpriteTweakerF,X                   ;;A8ED|A8EB+A8EB/A8EB\A8F7; \ Branch if "Takes 5 fireballs to kill"... 
                      AND.B #$04                                ;;A8F0|A8EE+A8EE/A8EE\A8FA;  | ...is set 
                      BNE +                                     ;;A8F2|A8F0+A8F0/A8F0\A8FC; / 
                      JSR PlayKickSfx                           ;;A8F4|A8F2+A8F2/A8F2\A8FE;
                      JSR CODE_01A847                           ;;A8F7|A8F5+A8F5/A8F5\A901;
                      RTS                                       ;;A8FA|A8F8+A8F8/A8F8\A904; Return 
                                                                ;;                        ;
                    + LDA.W !IFrameTimer                        ;;A8FB|A8F9+A8F9/A8F9\A905; \ Return if Mario is invincible 
                      BNE Return01A91B                          ;;A8FE|A8FC+A8FC/A8FC\A908; / 
                      LDA.W !PlayerRidingYoshi                  ;;A900|A8FE+A8FE/A8FE\A90A;
                      BNE Return01A91B                          ;;A903|A901+A901/A901\A90D;
                      LDA.W !SpriteTweakerE,X                   ;;A905|A903+A903/A903\A90F;
                      AND.B #$10                                ;;A908|A906+A906/A906\A912;
                      BNE +                                     ;;A90A|A908+A908/A908\A914;
                      JSR SubHorizPos                           ;;A90C|A90A+A90A/A90A\A916;
                      TYA                                       ;;A90F|A90D+A90D/A90D\A919;
                      STA.W !SpriteMisc157C,X                   ;;A910|A90E+A90E/A90E\A91A;
                    + LDA.B !SpriteNumber,X                     ;;A913|A911+A911/A911\A91D;
                      CMP.B #$53                                ;;A915|A913+A913/A913\A91F;
                      BEQ Return01A91B                          ;;A917|A915+A915/A915\A921;
                      JSL HurtMario                             ;;A919|A917+A917/A917\A923;
Return01A91B:         RTS                                       ;;A91D|A91B+A91B/A91B\A927; Return 
                                                                ;;                        ;
CODE_01A91C:          LDA.W !SpinJumpFlag                       ;;A91E|A91C+A91C/A91C\A928;
                      ORA.W !PlayerRidingYoshi                  ;;A921|A91F+A91F/A91F\A92B;
                      BEQ CODE_01A947                           ;;A924|A922+A922/A922\A92E;
CODE_01A924:          JSL DisplayContactGfx                     ;;A926|A924+A924/A924\A930;
                      LDA.B #$F8                                ;;A92A|A928+A928/A928\A934;
                      STA.B !PlayerYSpeed                       ;;A92C|A92A+A92A/A92A\A936;
                      LDA.W !PlayerRidingYoshi                  ;;A92E|A92C+A92C/A92C\A938;
                      BEQ +                                     ;;A931|A92F+A92F/A92F\A93B;
                      JSL BoostMarioSpeed                       ;;A933|A931+A931/A931\A93D;
                    + JSR CODE_019ACB                           ;;A937|A935+A935/A935\A941;
                      JSL CODE_07FC3B                           ;;A93A|A938+A938/A938\A944;
                      JSR CODE_01AB46                           ;;A93E|A93C+A93C/A93C\A948;
                      LDA.B #!SFX_SPINKILL                      ;;A941|A93F+A93F/A93F\A94B;
                      STA.W !SPCIO0                             ;;A943|A941+A941/A941\A94D; / Play sound effect 
                      JMP CODE_01A9F2                           ;;A946|A944+A944/A944\A950;
                                                                ;;                        ;
CODE_01A947:          JSR CODE_01A8D8                           ;;A949|A947+A947/A947\A953;
                      LDA.W !SpriteMisc187B,X                   ;;A94C|A94A+A94A/A94A\A956;
                      BEQ CODE_01A95D                           ;;A94F|A94D+A94D/A94D\A959;
                      JSR SubHorizPos                           ;;A951|A94F+A94F/A94F\A95B;
                      LDA.B #$18                                ;;A954|A952+A952/A952\A95E;
                      CPY.B #$00                                ;;A956|A954+A954/A954\A960;
                      BEQ +                                     ;;A958|A956+A956/A956\A962;
                      LDA.B #$E8                                ;;A95A|A958+A958/A958\A964;
                    + STA.B !PlayerXSpeed                       ;;A95C|A95A+A95A/A95A\A966;
                      RTS                                       ;;A95E|A95C+A95C/A95C\A968; Return 
                                                                ;;                        ;
CODE_01A95D:          JSR CODE_01AB46                           ;;A95F|A95D+A95D/A95D\A969;
                      LDY.B !SpriteNumber,X                     ;;A962|A960+A960/A960\A96C;
                      LDA.W !SpriteTweakerE,X                   ;;A964|A962+A962/A962\A96E;
                      AND.B #$40                                ;;A967|A965+A965/A965\A971;
                      BEQ CODE_01A9BE                           ;;A969|A967+A967/A967\A973;
                      CPY.B #$72                                ;;A96B|A969+A969/A969\A975;
                      BCC CODE_01A979                           ;;A96D|A96B+A96B/A96B\A977;
                      PHX                                       ;;A96F|A96D+A96D/A96D\A979;
                      PHY                                       ;;A970|A96E+A96E/A96E\A97A;
                      JSL CODE_02EAF2                           ;;A971|A96F+A96F/A96F\A97B;
                      PLY                                       ;;A975|A973+A973/A973\A97F;
                      PLX                                       ;;A976|A974+A974/A974\A980;
                      LDA.B #$02                                ;;A977|A975+A975/A975\A981;
                      BRA CODE_01A99B                           ;;A979|A977+A977/A977\A983;
                                                                ;;                        ;
CODE_01A979:          CPY.B #$6E                                ;;A97B|A979+A979/A979\A985;
                      BNE CODE_01A98A                           ;;A97D|A97B+A97B/A97B\A987;
                      LDA.B #$02                                ;;A97F|A97D+A97D/A97D\A989;
                      STA.B !SpriteTableC2,X                    ;;A981|A97F+A97F/A97F\A98B;
                      LDA.B #$FF                                ;;A983|A981+A981/A981\A98D;
                      STA.W !SpriteMisc1540,X                   ;;A985|A983+A983/A983\A98F;
                      LDA.B #$6F                                ;;A988|A986+A986/A986\A992;DINO TORCH SPRITE NUM                
                      BRA CODE_01A99B                           ;;A98A|A988+A988/A988\A994;
                                                                ;;                        ;
CODE_01A98A:          CPY.B #$3F                                ;;A98C|A98A+A98A/A98A\A996;
                      BCC CODE_01A998                           ;;A98E|A98C+A98C/A98C\A998;
                      LDA.B #$80                                ;;A990|A98E+A98E/A98E\A99A;
                      STA.W !SpriteMisc1540,X                   ;;A992|A990+A990/A990\A99C;
                      LDA.W SpriteToSpawn2-$40,Y                ;;A995|A993+A993/A993\A99F; Hey, this label might be wrong!
                      BRA CODE_01A99B                           ;;A998|A996+A996/A996\A9A2;
                                                                ;;                        ;
CODE_01A998:          LDA.W SpriteToSpawn,Y                     ;;A99A|A998+A998/A998\A9A4;
CODE_01A99B:          STA.B !SpriteNumber,X                     ;;A99D|A99B+A99B/A99B\A9A7;
                      LDA.W !SpriteOBJAttribute,X               ;;A99F|A99D+A99D/A99D\A9A9;
                      AND.B #$0E                                ;;A9A2|A9A0+A9A0/A9A0\A9AC;
                      STA.B !_F                                 ;;A9A4|A9A2+A9A2/A9A2\A9AE;
                      JSL LoadSpriteTables                      ;;A9A6|A9A4+A9A4/A9A4\A9B0;
                      LDA.W !SpriteOBJAttribute,X               ;;A9AA|A9A8+A9A8/A9A8\A9B4;
                      AND.B #$F1                                ;;A9AD|A9AB+A9AB/A9AB\A9B7;
                      ORA.B !_F                                 ;;A9AF|A9AD+A9AD/A9AD\A9B9;
                      STA.W !SpriteOBJAttribute,X               ;;A9B1|A9AF+A9AF/A9AF\A9BB;
                      STZ.B !SpriteYSpeed,X                     ;;A9B4|A9B2+A9B2/A9B2\A9BE; Sprite Y Speed = 0 
                      LDA.B !SpriteNumber,X                     ;;A9B6|A9B4+A9B4/A9B4\A9C0;
                      CMP.B #$02                                ;;A9B8|A9B6+A9B6/A9B6\A9C2;
                      BNE +                                     ;;A9BA|A9B8+A9B8/A9B8\A9C4;
                      INC.W !SpriteMisc151C,X                   ;;A9BC|A9BA+A9BA/A9BA\A9C6;
                    + RTS                                       ;;A9BF|A9BD+A9BD/A9BD\A9C9; Return 
                                                                ;;                        ;
CODE_01A9BE:          LDA.B !SpriteNumber,X                     ;;A9C0|A9BE+A9BE/A9BE\A9CA;
                      SEC                                       ;;A9C2|A9C0+A9C0/A9C0\A9CC;
                      SBC.B #$04                                ;;A9C3|A9C1+A9C1/A9C1\A9CD;
                      CMP.B #$0D                                ;;A9C5|A9C3+A9C3/A9C3\A9CF;
                      BCS CODE_01A9CC                           ;;A9C7|A9C5+A9C5/A9C5\A9D1;
                      LDA.W !FlightPhase                        ;;A9C9|A9C7+A9C7/A9C7\A9D3;
                      BNE CODE_01A9D3                           ;;A9CC|A9CA+A9CA/A9CA\A9D6;
CODE_01A9CC:          LDA.W !SpriteTweakerA,X                   ;;A9CE|A9CC+A9CC/A9CC\A9D8; \ Branch if doesn't die when jumped on 
                      AND.B #$20                                ;;A9D1|A9CF+A9CF/A9CF\A9DB;  | 
                      BEQ +                                     ;;A9D3|A9D1+A9D1/A9D1\A9DD; / 
CODE_01A9D3:          LDA.B #$03                                ;;A9D5|A9D3+A9D3/A9D3\A9DF; \ Sprite status = Smushed 
                      STA.W !SpriteStatus,X                     ;;A9D7|A9D5+A9D5/A9D5\A9E1; / 
                      LDA.B #$20                                ;;A9DA|A9D8+A9D8/A9D8\A9E4;
                      STA.W !SpriteMisc1540,X                   ;;A9DC|A9DA+A9DA/A9DA\A9E6;
                      STZ.B !SpriteXSpeed,X                     ;;A9DF|A9DD+A9DD/A9DD\A9E9; \ Sprite Speed = 0 
                      STZ.B !SpriteYSpeed,X                     ;;A9E1|A9DF+A9DF/A9DF\A9EB; / 
                      RTS                                       ;;A9E3|A9E1+A9E1/A9E1\A9ED; Return 
                                                                ;;                        ;
                    + LDA.W !SpriteTweakerB,X                   ;;A9E4|A9E2+A9E2/A9E2\A9EE; \ Branch if Tweaker bit... 
                      AND.B #$80                                ;;A9E7|A9E5+A9E5/A9E5\A9F1;  | ..."Falls straight down when killed"... 
                      BEQ CODE_01AA01                           ;;A9E9|A9E7+A9E7/A9E7\A9F3; / ...is NOT set. 
                      LDA.B #$02                                ;;A9EB|A9E9+A9E9/A9E9\A9F5; \ Sprite status = Falling off screen 
                      STA.W !SpriteStatus,X                     ;;A9ED|A9EB+A9EB/A9EB\A9F7; / 
                      STZ.B !SpriteXSpeed,X                     ;;A9F0|A9EE+A9EE/A9EE\A9FA; \ Sprite Speed = 0 
                      STZ.B !SpriteYSpeed,X                     ;;A9F2|A9F0+A9F0/A9F0\A9FC; / 
CODE_01A9F2:          LDA.B !SpriteNumber,X                     ;;A9F4|A9F2+A9F2/A9F2\A9FE; \ Return if NOT Lakitu 
                      CMP.B #$1E                                ;;A9F6|A9F4+A9F4/A9F4\AA00;  | 
                      BNE +                                     ;;A9F8|A9F6+A9F6/A9F6\AA02; / 
                      LDY.W !LakituCloudSlot                    ;;A9FA|A9F8+A9F8/A9F8\AA04;
                      LDA.B #$1F                                ;;A9FD|A9FB+A9FB/A9FB\AA07;
                      STA.W !SpriteMisc1540,Y                   ;;A9FF|A9FD+A9FD/A9FD\AA09;
                    + RTS                                       ;;AA02|AA00+AA00/AA00\AA0C; Return 
                                                                ;;                        ;
CODE_01AA01:          LDY.W !SpriteStatus,X                     ;;AA03|AA01+AA01/AA01\AA0D;
                      STZ.W !SpriteMisc1626,X                   ;;AA06|AA04+AA04/AA04\AA10;
                      CPY.B #$08                                ;;AA09|AA07+AA07/AA07\AA13;
                      BEQ SetStunnedTimer                       ;;AA0B|AA09+AA09/AA09\AA15;
CODE_01AA0B:          LDA.B !SpriteTableC2,X                    ;;AA0D|AA0B+AA0B/AA0B\AA17;
                      BNE SetStunnedTimer                       ;;AA0F|AA0D+AA0D/AA0D\AA19;
                      STZ.W !SpriteMisc1540,X                   ;;AA11|AA0F+AA0F/AA0F\AA1B;
                      BRA SetAsStunned                          ;;AA14|AA12+AA12/AA12\AA1E;
                                                                ;;                        ;
SetStunnedTimer:      LDA.B #$02                                ;;AA16|AA14+AA14/AA14\AA20; \ 
                      LDY.B !SpriteNumber,X                     ;;AA18|AA16+AA16/AA16\AA22;  | 
                      CPY.B #$0F                                ;;AA1A|AA18+AA18/AA18\AA24;  | Set stunnned timer with: 
                      BEQ CODE_01AA28                           ;;AA1C|AA1A+AA1A/AA1A\AA26;  | 
                      CPY.B #$11                                ;;AA1E|AA1C+AA1C/AA1C\AA28;  | #$FF for Goomba, Buzzy Beetle, Mechakoopa, or Bob-omb... 
                      BEQ CODE_01AA28                           ;;AA20|AA1E+AA1E/AA1E\AA2A;  | #$02 for others 
                      CPY.B #$A2                                ;;AA22|AA20+AA20/AA20\AA2C;  | 
                      BEQ CODE_01AA28                           ;;AA24|AA22+AA22/AA22\AA2E;  | 
                      CPY.B #$0D                                ;;AA26|AA24+AA24/AA24\AA30;  | 
                      BNE +                                     ;;AA28|AA26+AA26/AA26\AA32;  | 
CODE_01AA28:          LDA.B #$FF                                ;;AA2A|AA28+AA28/AA28\AA34;  | 
                    + STA.W !SpriteMisc1540,X                   ;;AA2C|AA2A+AA2A/AA2A\AA36; / 
SetAsStunned:         LDA.B #$09                                ;;AA2F|AA2D+AA2D/AA2D\AA39; \ Status = stunned 
                      STA.W !SpriteStatus,X                     ;;AA31|AA2F+AA2F/AA2F\AA3B; / 
                      RTS                                       ;;AA34|AA32+AA32/AA32\AA3E; Return 
                                                                ;;                        ;
BoostMarioSpeed:      LDA.B !PlayerIsClimbing                   ;;AA35|AA33+AA33/AA33\AA3F; \ Return if climbing 
                      BNE Return01AA41                          ;;AA37|AA35+AA35/AA35\AA41; / 
                      LDA.B #$D0                                ;;AA39|AA37+AA37/AA37\AA43;
                      BIT.B !byetudlrHold                       ;;AA3B|AA39+AA39/AA39\AA45;
                      BPL +                                     ;;AA3D|AA3B+AA3B/AA3B\AA47;
                      LDA.B #$A8                                ;;AA3F|AA3D+AA3D/AA3D\AA49;
                    + STA.B !PlayerYSpeed                       ;;AA41|AA3F+AA3F/AA3F\AA4B;
Return01AA41:         RTL                                       ;;AA43|AA41+AA41/AA41\AA4D; Return 
                                                                ;;                        ;
CODE_01AA42:          LDA.W !SpinJumpFlag                       ;;AA44|AA42+AA42/AA42\AA4E;
                      ORA.W !PlayerRidingYoshi                  ;;AA47|AA45+AA45/AA45\AA51;
                      BEQ +                                     ;;AA4A|AA48+AA48/AA48\AA54;
                      LDA.B !PlayerYSpeed                       ;;AA4C|AA4A+AA4A/AA4A\AA56;
                      BMI +                                     ;;AA4E|AA4C+AA4C/AA4C\AA58;
                      LDA.W !SpriteTweakerA,X                   ;;AA50|AA4E+AA4E/AA4E\AA5A; \ Branch if can't be jumped on 
                      AND.B #$10                                ;;AA53|AA51+AA51/AA51\AA5D;  | 
                      BEQ +                                     ;;AA55|AA53+AA53/AA53\AA5F; / 
                      JMP CODE_01A924                           ;;AA57|AA55+AA55/AA55\AA61;
                                                                ;;                        ;
                    + %WorB(LDA,!byetudlrHold)                  ;;AA5A|AA58+AA58/AA58\AA64;
                      AND.B #$40                                ;;AA5D|AA5A+AA5A/AA5A\AA66;
                      BEQ +                                     ;;AA5F|AA5C+AA5C/AA5C\AA68;
                      LDA.W !CarryingFlag                       ;;AA61|AA5E+AA5E/AA5E\AA6A; \ Branch if carrying an enemy... 
                      ORA.W !PlayerRidingYoshi                  ;;AA64|AA61+AA61/AA61\AA6D;  | ...or on Yoshi 
                      BNE +                                     ;;AA67|AA64+AA64/AA64\AA70; / 
                      LDA.B #$0B                                ;;AA69|AA66+AA66/AA66\AA72; \ Sprite status = Being carried 
                      STA.W !SpriteStatus,X                     ;;AA6B|AA68+AA68/AA68\AA74; / 
                      INC.W !CarryingFlag                       ;;AA6E|AA6B+AA6B/AA6B\AA77; Set carrying enemy flag 
                      LDA.B #$08                                ;;AA71|AA6E+AA6E/AA6E\AA7A;
                      STA.W !PickUpItemTimer                    ;;AA73|AA70+AA70/AA70\AA7C;
                      RTS                                       ;;AA76|AA73+AA73/AA73\AA7F; Return 
                                                                ;;                        ;
                    + LDA.B !SpriteNumber,X                     ;;AA77|AA74+AA74/AA74\AA80; \ Branch if Key 
                      CMP.B #$80                                ;;AA79|AA76+AA76/AA76\AA82;  | 
                      BEQ CODE_01AAB7                           ;;AA7B|AA78+AA78/AA78\AA84; / 
                      CMP.B #$3E                                ;;AA7D|AA7A+AA7A/AA7A\AA86; \ Branch if P Switch 
                      BEQ CODE_01AAB2                           ;;AA7F|AA7C+AA7C/AA7C\AA88; / 
                      CMP.B #$0D                                ;;AA81|AA7E+AA7E/AA7E\AA8A; \ Branch if Bobomb 
                      BEQ CODE_01AA97                           ;;AA83|AA80+AA80/AA80\AA8C; / 
                      CMP.B #$2D                                ;;AA85|AA82+AA82/AA82\AA8E; \ Branch if Baby Yoshi 
                      BEQ CODE_01AA97                           ;;AA87|AA84+AA84/AA84\AA90; / 
                      CMP.B #$A2                                ;;AA89|AA86+AA86/AA86\AA92; \ Branch if MechaKoopa 
                      BEQ CODE_01AA97                           ;;AA8B|AA88+AA88/AA88\AA94; / 
                      CMP.B #$0F                                ;;AA8D|AA8A+AA8A/AA8A\AA96; \ Branch if not Goomba 
                      BNE CODE_01AA94                           ;;AA8F|AA8C+AA8C/AA8C\AA98; / 
                      LDA.B #$F0                                ;;AA91|AA8E+AA8E/AA8E\AA9A;
                      STA.B !SpriteYSpeed,X                     ;;AA93|AA90+AA90/AA90\AA9C;
                      BRA CODE_01AA97                           ;;AA95|AA92+AA92/AA92\AA9E;
                                                                ;;                        ;
CODE_01AA94:          JSR CODE_01AB46                           ;;AA97|AA94+AA94/AA94\AAA0;
CODE_01AA97:          JSR PlayKickSfx                           ;;AA9A|AA97+AA97/AA97\AAA3;
                      LDA.W !SpriteMisc1540,X                   ;;AA9D|AA9A+AA9A/AA9A\AAA6;
                      STA.B !SpriteTableC2,X                    ;;AAA0|AA9D+AA9D/AA9D\AAA9;
                      LDA.B #$0A                                ;;AAA2|AA9F+AA9F/AA9F\AAAB; \ Sprite status = Kicked 
                      STA.W !SpriteStatus,X                     ;;AAA4|AAA1+AAA1/AAA1\AAAD; / 
                      LDA.B #$10                                ;;AAA7|AAA4+AAA4/AAA4\AAB0;
                      STA.W !SpriteMisc154C,X                   ;;AAA9|AAA6+AAA6/AAA6\AAB2;
                      JSR SubHorizPos                           ;;AAAC|AAA9+AAA9/AAA9\AAB5;
                      LDA.W ShellSpeedX,Y                       ;;AAAF|AAAC+AAAC/AAAC\AAB8;
                      STA.B !SpriteXSpeed,X                     ;;AAB2|AAAF+AAAF/AAAF\AABB;
                      RTS                                       ;;AAB4|AAB1+AAB1/AAB1\AABD; Return 
                                                                ;;                        ;
CODE_01AAB2:          LDA.W !SpriteMisc163E,X                   ;;AAB5|AAB2+AAB2/AAB2\AABE;
                      BNE Return01AB2C                          ;;AAB8|AAB5+AAB5/AAB5\AAC1;
CODE_01AAB7:          STZ.W !SpriteMisc154C,X                   ;;AABA|AAB7+AAB7/AAB7\AAC3;
                      LDA.B !SpriteYPosLow,X                    ;;AABD|AABA+AABA/AABA\AAC6;
                      SEC                                       ;;AABF|AABC+AABC/AABC\AAC8;
                      SBC.B !PlayerYPosNow                      ;;AAC0|AABD+AABD/AABD\AAC9;
                      CLC                                       ;;AAC2|AABF+AABF/AABF\AACB;
                      ADC.B #$08                                ;;AAC3|AAC0+AAC0/AAC0\AACC;
                      CMP.B #$20                                ;;AAC5|AAC2+AAC2/AAC2\AACE;
                      BCC CODE_01AB31                           ;;AAC7|AAC4+AAC4/AAC4\AAD0;
                      BPL +                                     ;;AAC9|AAC6+AAC6/AAC6\AAD2;
                      LDA.B #$10                                ;;AACB|AAC8+AAC8/AAC8\AAD4;
                      STA.B !PlayerYSpeed                       ;;AACD|AACA+AACA/AACA\AAD6;
                      RTS                                       ;;AACF|AACC+AACC/AACC\AAD8; Return 
                                                                ;;                        ;
                    + LDA.B !PlayerYSpeed                       ;;AAD0|AACD+AACD/AACD\AAD9;
                      BMI Return01AB2C                          ;;AAD2|AACF+AACF/AACF\AADB;
                      STZ.B !PlayerYSpeed                       ;;AAD4|AAD1+AAD1/AAD1\AADD;
                      STZ.B !PlayerInAir                        ;;AAD6|AAD3+AAD3/AAD3\AADF;
                      INC.W !StandOnSolidSprite                 ;;AAD8|AAD5+AAD5/AAD5\AAE1;
                      LDA.B #$1F                                ;;AADB|AAD8+AAD8/AAD8\AAE4;
                      LDY.W !PlayerRidingYoshi                  ;;AADD|AADA+AADA/AADA\AAE6;
                      BEQ +                                     ;;AAE0|AADD+AADD/AADD\AAE9;
                      LDA.B #$2F                                ;;AAE2|AADF+AADF/AADF\AAEB;
                    + STA.B !_0                                 ;;AAE4|AAE1+AAE1/AAE1\AAED;
                      LDA.B !SpriteYPosLow,X                    ;;AAE6|AAE3+AAE3/AAE3\AAEF;
                      SEC                                       ;;AAE8|AAE5+AAE5/AAE5\AAF1;
                      SBC.B !_0                                 ;;AAE9|AAE6+AAE6/AAE6\AAF2;
                      STA.B !PlayerYPosNext                     ;;AAEB|AAE8+AAE8/AAE8\AAF4;
                      LDA.W !SpriteXPosHigh,X                   ;;AAED|AAEA+AAEA/AAEA\AAF6;
                      SBC.B #$00                                ;;AAF0|AAED+AAED/AAED\AAF9;
                      STA.B !PlayerYPosNext+1                   ;;AAF2|AAEF+AAEF/AAEF\AAFB;
                      LDA.B !SpriteNumber,X                     ;;AAF4|AAF1+AAF1/AAF1\AAFD;
                      CMP.B #$3E                                ;;AAF6|AAF3+AAF3/AAF3\AAFF;
                      BNE Return01AB2C                          ;;AAF8|AAF5+AAF5/AAF5\AB01;
                      ASL.W !SpriteTweakerD,X                   ;;AAFA|AAF7+AAF7/AAF7\AB03;
                      LSR.W !SpriteTweakerD,X                   ;;AAFD|AAFA+AAFA/AAFA\AB06;
                      LDA.B #!SFX_SWITCH                        ;;AB00|AAFD+AAFD/AAFD\AB09;
                      STA.W !SPCIO0                             ;;AB02|AAFF+AAFF/AAFF\AB0B; / Play sound effect 
                      LDA.W !MusicBackup                        ;;AB05|AB02+AB02/AB02\AB0E;
                      BMI +                                     ;;AB08|AB05+AB05/AB05\AB11;
                      LDA.B #!BGM_PSWITCH                       ;;AB0A|AB07+AB07/AB07\AB13;
                      STA.W !SPCIO2                             ;;AB0C|AB09+AB09/AB09\AB15; / Change music 
                    + LDA.B #$20                                ;;AB0F|AB0C+AB0C/AB0C\AB18;
                      STA.W !SpriteMisc163E,X                   ;;AB11|AB0E+AB0E/AB0E\AB1A;
                      LSR.W !SpriteOBJAttribute,X               ;;AB14|AB11+AB11/AB11\AB1D;
                      ASL.W !SpriteOBJAttribute,X               ;;AB17|AB14+AB14/AB14\AB20;
                      LDY.W !SpriteMisc151C,X                   ;;AB1A|AB17+AB17/AB17\AB23;
                      LDA.B #$B0                                ;;AB1D|AB1A+AB1A/AB1A\AB26;
                      STA.W !BluePSwitchTimer,Y                 ;;AB1F|AB1C+AB1C/AB1C\AB28;
                      LDA.B #$20                                ;;AB22|AB1F+AB1F/AB1F\AB2B; \ Set ground shake timer 
                      STA.W !ScreenShakeTimer                   ;;AB24|AB21+AB21/AB21\AB2D; / 
                      CPY.B #$01                                ;;AB27|AB24+AB24/AB24\AB30;
                      BNE Return01AB2C                          ;;AB29|AB26+AB26/AB26\AB32;
                      JSL CODE_02B9BD                           ;;AB2B|AB28+AB28/AB28\AB34;
Return01AB2C:         RTS                                       ;;AB2F|AB2C+AB2C/AB2C\AB38; Return 
                                                                ;;                        ;
                                                                ;;                        ;
DATA_01AB2D:          db $01,$00,$FF,$FF                        ;;AB30|AB2D+AB2D/AB2D\AB39;
                                                                ;;                        ;
CODE_01AB31:          STZ.B !PlayerXSpeed                       ;;AB34|AB31+AB31/AB31\AB3D;
                      JSR SubHorizPos                           ;;AB36|AB33+AB33/AB33\AB3F;
                      TYA                                       ;;AB39|AB36+AB36/AB36\AB42;
                      ASL A                                     ;;AB3A|AB37+AB37/AB37\AB43;
                      TAY                                       ;;AB3B|AB38+AB38/AB38\AB44;
                      REP #$20                                  ;;AB3C|AB39+AB39/AB39\AB45; Accum (16 bit) 
                      LDA.B !PlayerXPosNext                     ;;AB3E|AB3B+AB3B/AB3B\AB47;
                      CLC                                       ;;AB40|AB3D+AB3D/AB3D\AB49;
                      ADC.W DATA_01AB2D,Y                       ;;AB41|AB3E+AB3E/AB3E\AB4A;
                      STA.B !PlayerXPosNext                     ;;AB44|AB41+AB41/AB41\AB4D;
                      SEP #$20                                  ;;AB46|AB43+AB43/AB43\AB4F; Accum (8 bit) 
                      RTS                                       ;;AB48|AB45+AB45/AB45\AB51; Return 
                                                                ;;                        ;
CODE_01AB46:          PHY                                       ;;AB49|AB46+AB46/AB46\AB52;
                      LDA.W !SpriteStompCounter                 ;;AB4A|AB47+AB47/AB47\AB53;
                      CLC                                       ;;AB4D|AB4A+AB4A/AB4A\AB56;
                      ADC.W !SpriteMisc1626,X                   ;;AB4E|AB4B+AB4B/AB4B\AB57;
                      INC.W !SpriteStompCounter                 ;;AB51|AB4E+AB4E/AB4E\AB5A;
                      TAY                                       ;;AB54|AB51+AB51/AB51\AB5D;
                      INY                                       ;;AB55|AB52+AB52/AB52\AB5E;
                      CPY.B #$08                                ;;AB56|AB53+AB53/AB53\AB5F;
                      BCS +                                     ;;AB58|AB55+AB55/AB55\AB61;
                      LDA.W StompSFX-1,Y                        ;;AB5A|AB57+AB57/AB57\AB63;
                      STA.W !SPCIO0                             ;;AB5D|AB5A+AB5A/AB5A\AB66; / Play sound effect 
                    + TYA                                       ;;AB60|AB5D+AB5D/AB5D\AB69;
                      CMP.B #$08                                ;;AB61|AB5E+AB5E/AB5E\AB6A;
                      BCC +                                     ;;AB63|AB60+AB60/AB60\AB6C;
                      LDA.B #$08                                ;;AB65|AB62+AB62/AB62\AB6E;
                    + JSL GivePoints                            ;;AB67|AB64+AB64/AB64\AB70;
                      PLY                                       ;;AB6B|AB68+AB68/AB68\AB74;
                      RTS                                       ;;AB6C|AB69+AB69/AB69\AB75; Return 
                                                                ;;                        ;
                                                                ;;                        ;
                      db $0C,$FC,$EC,$DC,$CC                    ;;AB6D|AB6A+AB6A/AB6A\AB76;
                                                                ;;                        ;
CODE_01AB6F:          JSR PlayKickSfx                           ;;AB72|AB6F+AB6F/AB6F\AB7B;
CODE_01AB72:          JSR IsSprOffScreen                        ;;AB75|AB72+AB72/AB72\AB7E;
                      BNE Return01AB98                          ;;AB78|AB75+AB75/AB75\AB81;
                      PHY                                       ;;AB7A|AB77+AB77/AB77\AB83;
                      LDY.B #$03                                ;;AB7B|AB78+AB78/AB78\AB84;
CODE_01AB7A:          LDA.W !SmokeSpriteNumber,Y                ;;AB7D|AB7A+AB7A/AB7A\AB86;
                      BEQ CODE_01AB83                           ;;AB80|AB7D+AB7D/AB7D\AB89;
                      DEY                                       ;;AB82|AB7F+AB7F/AB7F\AB8B;
                      BPL CODE_01AB7A                           ;;AB83|AB80+AB80/AB80\AB8C;
                      INY                                       ;;AB85|AB82+AB82/AB82\AB8E;
CODE_01AB83:          LDA.B #$02                                ;;AB86|AB83+AB83/AB83\AB8F;
                      STA.W !SmokeSpriteNumber,Y                ;;AB88|AB85+AB85/AB85\AB91;
                      LDA.B !SpriteXPosLow,X                    ;;AB8B|AB88+AB88/AB88\AB94;
                      STA.W !SmokeSpriteXPos,Y                  ;;AB8D|AB8A+AB8A/AB8A\AB96;
                      LDA.B !SpriteYPosLow,X                    ;;AB90|AB8D+AB8D/AB8D\AB99;
                      STA.W !SmokeSpriteYPos,Y                  ;;AB92|AB8F+AB8F/AB8F\AB9B;
                      LDA.B #$08                                ;;AB95|AB92+AB92/AB92\AB9E;
                      STA.W !SmokeSpriteTimer,Y                 ;;AB97|AB94+AB94/AB94\ABA0;
                      PLY                                       ;;AB9A|AB97+AB97/AB97\ABA3;
Return01AB98:         RTL                                       ;;AB9B|AB98+AB98/AB98\ABA4; Return 
                                                                ;;                        ;
DisplayContactGfx:    JSR IsSprOffScreen                        ;;AB9C|AB99+AB99/AB99\ABA5;
                      BNE Return01ABCB                          ;;AB9F|AB9C+AB9C/AB9C\ABA8;
                      PHY                                       ;;ABA1|AB9E+AB9E/AB9E\ABAA;
                      LDY.B #$03                                ;;ABA2|AB9F+AB9F/AB9F\ABAB;
CODE_01ABA1:          LDA.W !SmokeSpriteNumber,Y                ;;ABA4|ABA1+ABA1/ABA1\ABAD;
                      BEQ CODE_01ABAA                           ;;ABA7|ABA4+ABA4/ABA4\ABB0;
                      DEY                                       ;;ABA9|ABA6+ABA6/ABA6\ABB2;
                      BPL CODE_01ABA1                           ;;ABAA|ABA7+ABA7/ABA7\ABB3;
                      INY                                       ;;ABAC|ABA9+ABA9/ABA9\ABB5;
CODE_01ABAA:          LDA.B #$02                                ;;ABAD|ABAA+ABAA/ABAA\ABB6;
                      STA.W !SmokeSpriteNumber,Y                ;;ABAF|ABAC+ABAC/ABAC\ABB8;
                      LDA.B !PlayerXPosNext                     ;;ABB2|ABAF+ABAF/ABAF\ABBB;
                      STA.W !SmokeSpriteXPos,Y                  ;;ABB4|ABB1+ABB1/ABB1\ABBD;
                      LDA.W !PlayerRidingYoshi                  ;;ABB7|ABB4+ABB4/ABB4\ABC0;
                      CMP.B #$01                                ;;ABBA|ABB7+ABB7/ABB7\ABC3;
                      LDA.B #$14                                ;;ABBC|ABB9+ABB9/ABB9\ABC5;
                      BCC +                                     ;;ABBE|ABBB+ABBB/ABBB\ABC7;
                      LDA.B #$1E                                ;;ABC0|ABBD+ABBD/ABBD\ABC9;
                    + CLC                                       ;;ABC2|ABBF+ABBF/ABBF\ABCB;
                      ADC.B !PlayerYPosNext                     ;;ABC3|ABC0+ABC0/ABC0\ABCC;
                      STA.W !SmokeSpriteYPos,Y                  ;;ABC5|ABC2+ABC2/ABC2\ABCE;
                      LDA.B #$08                                ;;ABC8|ABC5+ABC5/ABC5\ABD1;
                      STA.W !SmokeSpriteTimer,Y                 ;;ABCA|ABC7+ABC7/ABC7\ABD3;
                      PLY                                       ;;ABCD|ABCA+ABCA/ABCA\ABD6;
Return01ABCB:         RTL                                       ;;ABCE|ABCB+ABCB/ABCB\ABD7; Return 
                                                                ;;                        ;
SubSprXPosNoGrvty:    TXA                                       ;;ABCF|ABCC+ABCC/ABCC\ABD8;
                      CLC                                       ;;ABD0|ABCD+ABCD/ABCD\ABD9;
                      ADC.B #$0C                                ;;ABD1|ABCE+ABCE/ABCE\ABDA;
                      TAX                                       ;;ABD3|ABD0+ABD0/ABD0\ABDC;
                      JSR SubSprYPosNoGrvty                     ;;ABD4|ABD1+ABD1/ABD1\ABDD;
                      LDX.W !CurSpriteProcess                   ;;ABD7|ABD4+ABD4/ABD4\ABE0; X = Sprite index 
                      RTS                                       ;;ABDA|ABD7+ABD7/ABD7\ABE3; Return 
                                                                ;;                        ;
SubSprYPosNoGrvty:    LDA.B !SpriteYSpeed,X                     ;;ABDB|ABD8+ABD8/ABD8\ABE4; Load current sprite's Y speed 
                      BEQ CODE_01AC09                           ;;ABDD|ABDA+ABDA/ABDA\ABE6; If speed is 0, branch to $AC09 
                      ASL A                                     ;;ABDF|ABDC+ABDC/ABDC\ABE8; \  
                      ASL A                                     ;;ABE0|ABDD+ABDD/ABDD\ABE9;  |Multiply speed by 16 
                      ASL A                                     ;;ABE1|ABDE+ABDE/ABDE\ABEA;  | 
                      ASL A                                     ;;ABE2|ABDF+ABDF/ABDF\ABEB; /  
                      CLC                                       ;;ABE3|ABE0+ABE0/ABE0\ABEC; \  
                      ADC.W !SpriteYPosSpx,X                    ;;ABE4|ABE1+ABE1/ABE1\ABED;  |Increase (unknown sprite table) by that value 
                      STA.W !SpriteYPosSpx,X                    ;;ABE7|ABE4+ABE4/ABE4\ABF0; /  
                      PHP                                       ;;ABEA|ABE7+ABE7/ABE7\ABF3;
                      PHP                                       ;;ABEB|ABE8+ABE8/ABE8\ABF4;
                      LDY.B #$00                                ;;ABEC|ABE9+ABE9/ABE9\ABF5;
                      LDA.B !SpriteYSpeed,X                     ;;ABEE|ABEB+ABEB/ABEB\ABF7; Load current sprite's Y speed 
                      LSR A                                     ;;ABF0|ABED+ABED/ABED\ABF9; \  
                      LSR A                                     ;;ABF1|ABEE+ABEE/ABEE\ABFA;  |Multiply speed by 16 
                      LSR A                                     ;;ABF2|ABEF+ABEF/ABEF\ABFB;  | 
                      LSR A                                     ;;ABF3|ABF0+ABF0/ABF0\ABFC; /  
                      CMP.B #$08                                ;;ABF4|ABF1+ABF1/ABF1\ABFD;
                      BCC +                                     ;;ABF6|ABF3+ABF3/ABF3\ABFF;
                      ORA.B #$F0                                ;;ABF8|ABF5+ABF5/ABF5\AC01;
                      DEY                                       ;;ABFA|ABF7+ABF7/ABF7\AC03;
                    + PLP                                       ;;ABFB|ABF8+ABF8/ABF8\AC04;
                      PHA                                       ;;ABFC|ABF9+ABF9/ABF9\AC05;
                      ADC.B !SpriteYPosLow,X                    ;;ABFD|ABFA+ABFA/ABFA\AC06; \ Add value to current sprite's Y position 
                      STA.B !SpriteYPosLow,X                    ;;ABFF|ABFC+ABFC/ABFC\AC08; /  
                      TYA                                       ;;AC01|ABFE+ABFE/ABFE\AC0A;
                      ADC.W !SpriteXPosHigh,X                   ;;AC02|ABFF+ABFF/ABFF\AC0B;
                      STA.W !SpriteXPosHigh,X                   ;;AC05|AC02+AC02/AC02\AC0E;
                      PLA                                       ;;AC08|AC05+AC05/AC05\AC11;
                      PLP                                       ;;AC09|AC06+AC06/AC06\AC12;
                      ADC.B #$00                                ;;AC0A|AC07+AC07/AC07\AC13;
CODE_01AC09:          STA.W !SpriteXMovement                    ;;AC0C|AC09+AC09/AC09\AC15;
                      RTS                                       ;;AC0F|AC0C+AC0C/AC0C\AC18; Return 
                                                                ;;                        ;
                                                                ;;                        ;
SpriteOffScreen1:     db $40,$B0                                ;;AC10|AC0D+AC0D/AC0D\AC19;
                                                                ;;                        ;
SpriteOffScreen2:     db $01,$FF                                ;;AC12|AC0F+AC0F/AC0F\AC1B;
                                                                ;;                        ;
SpriteOffScreen3:     db $30,$C0,$A0,$C0,$A0,$F0,$60,$90        ;;AC14|AC11+AC11/AC11\AC1D;
SpriteOffScreen4:     db $01,$FF,$01,$FF,$01,$FF,$01,$FF        ;;AC1C|AC19+AC19/AC19\AC25;
                                                                ;;                        ;
SubOffscreen3Bnk1:    LDA.B #$06                                ;;AC24|AC21+AC21/AC21\AC2D; \ Entry point of routine determines value of $03 
                      STA.B !_3                                 ;;AC26|AC23+AC23/AC23\AC2F;  | 
                      BRA +                                     ;;AC28|AC25+AC25/AC25\AC31;  | 
                                                                ;;                        ;
SubOffscreen2Bnk1:    LDA.B #$04                                ;;AC2A|AC27+AC27/AC27\AC33;  | 
                      BRA +                                     ;;AC2C|AC29+AC29/AC29\AC35;  | 
                                                                ;;                        ;
SubOffscreen1Bnk1:    LDA.B #$02                                ;;AC2E|AC2B+AC2B/AC2B\AC37;  | 
                    + STA.B !_3                                 ;;AC30|AC2D+AC2D/AC2D\AC39;  | 
                      BRA +                                     ;;AC32|AC2F+AC2F/AC2F\AC3B;  | 
                                                                ;;                        ;
SubOffscreen0Bnk1:    STZ.B !_3                                 ;;AC34|AC31+AC31/AC31\AC3D; / 
                    + JSR IsSprOffScreen                        ;;AC36|AC33+AC33/AC33\AC3F; \ if sprite is not off screen, return                                       
                      BEQ Return01ACA4                          ;;AC39|AC36+AC36/AC36\AC42; /                                                                           
                      LDA.B !ScreenMode                         ;;AC3B|AC38+AC38/AC38\AC44; \  vertical level                                    
                      AND.B #$01                                ;;AC3D|AC3A+AC3A/AC3A\AC46;  | 
                      BNE VerticalLevel                         ;;AC3F|AC3C+AC3C/AC3C\AC48; /                                                                           
                      LDA.B !SpriteYPosLow,X                    ;;AC41|AC3E+AC3E/AC3E\AC4A; \                                                                           
                      CLC                                       ;;AC43|AC40+AC40/AC40\AC4C;  | 
                      ADC.B #$50                                ;;AC44|AC41+AC41/AC41\AC4D;  | if the sprite has gone off the bottom of the level... 
                      LDA.W !SpriteXPosHigh,X                   ;;AC46|AC43+AC43/AC43\AC4F;  | (if adding 0x50 to the sprite y position would make the high byte >= 2) 
                      ADC.B #$00                                ;;AC49|AC46+AC46/AC46\AC52;  | 
                      CMP.B #$02                                ;;AC4B|AC48+AC48/AC48\AC54;  | 
                      BPL OffScrEraseSprite                     ;;AC4D|AC4A+AC4A/AC4A\AC56; /    ...erase the sprite                                                    
                      LDA.W !SpriteTweakerD,X                   ;;AC4F|AC4C+AC4C/AC4C\AC58; \ if "process offscreen" flag is set, return                                
                      AND.B #$04                                ;;AC52|AC4F+AC4F/AC4F\AC5B;  | 
                      BNE Return01ACA4                          ;;AC54|AC51+AC51/AC51\AC5D; /                                                                           
                      LDA.B !TrueFrame                          ;;AC56|AC53+AC53/AC53\AC5F;
                      AND.B #$01                                ;;AC58|AC55+AC55/AC55\AC61;
                      ORA.B !_3                                 ;;AC5A|AC57+AC57/AC57\AC63;
                      STA.B !_1                                 ;;AC5C|AC59+AC59/AC59\AC65;
                      TAY                                       ;;AC5E|AC5B+AC5B/AC5B\AC67;
                      LDA.B !Layer1XPos                         ;;AC5F|AC5C+AC5C/AC5C\AC68;
                      CLC                                       ;;AC61|AC5E+AC5E/AC5E\AC6A;
                      ADC.W SpriteOffScreen3,Y                  ;;AC62|AC5F+AC5F/AC5F\AC6B;
                      ROL.B !_0                                 ;;AC65|AC62+AC62/AC62\AC6E;
                      CMP.B !SpriteXPosLow,X                    ;;AC67|AC64+AC64/AC64\AC70;
                      PHP                                       ;;AC69|AC66+AC66/AC66\AC72;
                      LDA.B !Layer1XPos+1                       ;;AC6A|AC67+AC67/AC67\AC73;
                      LSR.B !_0                                 ;;AC6C|AC69+AC69/AC69\AC75;
                      ADC.W SpriteOffScreen4,Y                  ;;AC6E|AC6B+AC6B/AC6B\AC77;
                      PLP                                       ;;AC71|AC6E+AC6E/AC6E\AC7A;
                      SBC.W !SpriteYPosHigh,X                   ;;AC72|AC6F+AC6F/AC6F\AC7B;
                      STA.B !_0                                 ;;AC75|AC72+AC72/AC72\AC7E;
                      LSR.B !_1                                 ;;AC77|AC74+AC74/AC74\AC80;
                      BCC +                                     ;;AC79|AC76+AC76/AC76\AC82;
                      EOR.B #$80                                ;;AC7B|AC78+AC78/AC78\AC84;
                      STA.B !_0                                 ;;AC7D|AC7A+AC7A/AC7A\AC86;
                    + LDA.B !_0                                 ;;AC7F|AC7C+AC7C/AC7C\AC88;
                      BPL Return01ACA4                          ;;AC81|AC7E+AC7E/AC7E\AC8A;
OffScrEraseSprite:    LDA.B !SpriteNumber,X                     ;;AC83|AC80+AC80/AC80\AC8C; \ If MagiKoopa... 
                      CMP.B #$1F                                ;;AC85|AC82+AC82/AC82\AC8E;  | 
                      BNE +                                     ;;AC87|AC84+AC84/AC84\AC90;  | Sprite to respawn = MagiKoopa 
                      STA.W !SpriteRespawnNumber                ;;AC89|AC86+AC86/AC86\AC92;  | 
                      LDA.B #$FF                                ;;AC8C|AC89+AC89/AC89\AC95;  | Set timer until respawn 
                      STA.W !SpriteRespawnTimer                 ;;AC8E|AC8B+AC8B/AC8B\AC97; / 
                    + LDA.W !SpriteStatus,X                     ;;AC91|AC8E+AC8E/AC8E\AC9A; \ If sprite status < 8, permanently erase sprite 
                      CMP.B #$08                                ;;AC94|AC91+AC91/AC91\AC9D;  | 
                      BCC +                                     ;;AC96|AC93+AC93/AC93\AC9F; / 
                      LDY.W !SpriteLoadIndex,X                  ;;AC98|AC95+AC95/AC95\ACA1; \ Branch if should permanently erase sprite 
                      CPY.B #$FF                                ;;AC9B|AC98+AC98/AC98\ACA4;  | 
                      BEQ +                                     ;;AC9D|AC9A+AC9A/AC9A\ACA6; / 
                      LDA.B #$00                                ;;AC9F|AC9C+AC9C/AC9C\ACA8; \ Allow sprite to be reloaded by level loading routine 
                      STA.W !SpriteLoadStatus,Y                 ;;ACA1|AC9E+AC9E/AC9E\ACAA; / 
                    + STZ.W !SpriteStatus,X                     ;;ACA4|ACA1+ACA1/ACA1\ACAD; Erase sprite 
Return01ACA4:         RTS                                       ;;ACA7|ACA4+ACA4/ACA4\ACB0;
                                                                ;;                        ;
VerticalLevel:        LDA.W !SpriteTweakerD,X                   ;;ACA8|ACA5+ACA5/ACA5\ACB1; \ If "process offscreen" flag is set, return                
                      AND.B #$04                                ;;ACAB|ACA8+ACA8/ACA8\ACB4;  | 
                      BNE Return01ACA4                          ;;ACAD|ACAA+ACAA/ACAA\ACB6; /                                                           
                      LDA.B !TrueFrame                          ;;ACAF|ACAC+ACAC/ACAC\ACB8; \ Return every other frame 
                      LSR A                                     ;;ACB1|ACAE+ACAE/ACAE\ACBA;  | 
                      BCS Return01ACA4                          ;;ACB2|ACAF+ACAF/ACAF\ACBB; /                                                           
                      LDA.B !SpriteXPosLow,X                    ;;ACB4|ACB1+ACB1/ACB1\ACBD; \                                                           
                      CMP.B #$00                                ;;ACB6|ACB3+ACB3/ACB3\ACBF;  | If the sprite has gone off the side of the level...      
                      LDA.W !SpriteYPosHigh,X                   ;;ACB8|ACB5+ACB5/ACB5\ACC1;  |                                                          
                      SBC.B #$00                                ;;ACBB|ACB8+ACB8/ACB8\ACC4;  |                                                          
                      CMP.B #$02                                ;;ACBD|ACBA+ACBA/ACBA\ACC6;  |                                                          
                      BCS OffScrEraseSprite                     ;;ACBF|ACBC+ACBC/ACBC\ACC8; /  ...erase the sprite      
                      LDA.B !TrueFrame                          ;;ACC1|ACBE+ACBE/ACBE\ACCA;
                      LSR A                                     ;;ACC3|ACC0+ACC0/ACC0\ACCC;
                      AND.B #$01                                ;;ACC4|ACC1+ACC1/ACC1\ACCD;
                      STA.B !_1                                 ;;ACC6|ACC3+ACC3/ACC3\ACCF;
                      TAY                                       ;;ACC8|ACC5+ACC5/ACC5\ACD1;
                      BEQ CODE_01ACD2                           ;;ACC9|ACC6+ACC6/ACC6\ACD2;
                      LDA.B !SpriteNumber,X                     ;;ACCB|ACC8+ACC8/ACC8\ACD4; \ Return if Green Net Koopa 
                      CMP.B #$22                                ;;ACCD|ACCA+ACCA/ACCA\ACD6;  | 
                      BEQ Return01ACA4                          ;;ACCF|ACCC+ACCC/ACCC\ACD8;  | 
                      CMP.B #$24                                ;;ACD1|ACCE+ACCE/ACCE\ACDA;  | 
                      BEQ Return01ACA4                          ;;ACD3|ACD0+ACD0/ACD0\ACDC; / 
CODE_01ACD2:          LDA.B !Layer1YPos                         ;;ACD5|ACD2+ACD2/ACD2\ACDE;
                      CLC                                       ;;ACD7|ACD4+ACD4/ACD4\ACE0;
                      ADC.W SpriteOffScreen1,Y                  ;;ACD8|ACD5+ACD5/ACD5\ACE1;
                      ROL.B !_0                                 ;;ACDB|ACD8+ACD8/ACD8\ACE4;
                      CMP.B !SpriteYPosLow,X                    ;;ACDD|ACDA+ACDA/ACDA\ACE6;
                      PHP                                       ;;ACDF|ACDC+ACDC/ACDC\ACE8;
                      LDA.W !Layer1YPos+1                       ;;ACE0|ACDD+ACDD/ACDD\ACE9;
                      LSR.B !_0                                 ;;ACE3|ACE0+ACE0/ACE0\ACEC;
                      ADC.W SpriteOffScreen2,Y                  ;;ACE5|ACE2+ACE2/ACE2\ACEE;
                      PLP                                       ;;ACE8|ACE5+ACE5/ACE5\ACF1;
                      SBC.W !SpriteXPosHigh,X                   ;;ACE9|ACE6+ACE6/ACE6\ACF2;
                      STA.B !_0                                 ;;ACEC|ACE9+ACE9/ACE9\ACF5;
                      LDY.B !_1                                 ;;ACEE|ACEB+ACEB/ACEB\ACF7;
                      BEQ +                                     ;;ACF0|ACED+ACED/ACED\ACF9;
                      EOR.B #$80                                ;;ACF2|ACEF+ACEF/ACEF\ACFB;
                      STA.B !_0                                 ;;ACF4|ACF1+ACF1/ACF1\ACFD;
                    + LDA.B !_0                                 ;;ACF6|ACF3+ACF3/ACF3\ACFF;
                      BPL Return01ACA4                          ;;ACF8|ACF5+ACF5/ACF5\AD01;
                      BMI OffScrEraseSprite                     ;;ACFA|ACF7+ACF7/ACF7\AD03;
GetRand:              PHY                                       ;;ACFC|ACF9+ACF9/ACF9\AD05;
                      LDY.B #$01                                ;;ACFD|ACFA+ACFA/ACFA\AD06;
                      JSL CODE_01AD07                           ;;ACFF|ACFC+ACFC/ACFC\AD08;
                      DEY                                       ;;AD03|AD00+AD00/AD00\AD0C;
                      JSL CODE_01AD07                           ;;AD04|AD01+AD01/AD01\AD0D;
                      PLY                                       ;;AD08|AD05+AD05/AD05\AD11;
                      RTL                                       ;;AD09|AD06+AD06/AD06\AD12; Return 
                                                                ;;                        ;
CODE_01AD07:          LDA.W !RNGCalc                            ;;AD0A|AD07+AD07/AD07\AD13;
                      ASL A                                     ;;AD0D|AD0A+AD0A/AD0A\AD16;
                      ASL A                                     ;;AD0E|AD0B+AD0B/AD0B\AD17;
                      SEC                                       ;;AD0F|AD0C+AD0C/AD0C\AD18;
                      ADC.W !RNGCalc                            ;;AD10|AD0D+AD0D/AD0D\AD19;
                      STA.W !RNGCalc                            ;;AD13|AD10+AD10/AD10\AD1C;
                      ASL.W !RNGCalc+1                          ;;AD16|AD13+AD13/AD13\AD1F;
                      LDA.B #$20                                ;;AD19|AD16+AD16/AD16\AD22;
                      BIT.W !RNGCalc+1                          ;;AD1B|AD18+AD18/AD18\AD24;
                      BCC CODE_01AD21                           ;;AD1E|AD1B+AD1B/AD1B\AD27;
                      BEQ CODE_01AD26                           ;;AD20|AD1D+AD1D/AD1D\AD29;
                      BNE CODE_01AD23                           ;;AD22|AD1F+AD1F/AD1F\AD2B;
CODE_01AD21:          BNE CODE_01AD26                           ;;AD24|AD21+AD21/AD21\AD2D;
CODE_01AD23:          INC.W !RNGCalc+1                          ;;AD26|AD23+AD23/AD23\AD2F;
CODE_01AD26:          LDA.W !RNGCalc+1                          ;;AD29|AD26+AD26/AD26\AD32;
                      EOR.W !RNGCalc                            ;;AD2C|AD29+AD29/AD29\AD35;
                      STA.W !RandomNumber,Y                     ;;AD2F|AD2C+AD2C/AD2C\AD38;
                      RTL                                       ;;AD32|AD2F+AD2F/AD2F\AD3B; Return 
                                                                ;;                        ;
SubHorizPos:          LDY.B #$00                                ;;AD33|AD30+AD30/AD30\AD3C;
                      LDA.B !PlayerXPosNow                      ;;AD35|AD32+AD32/AD32\AD3E;
                      SEC                                       ;;AD37|AD34+AD34/AD34\AD40;
                      SBC.B !SpriteXPosLow,X                    ;;AD38|AD35+AD35/AD35\AD41;
                      STA.B !_F                                 ;;AD3A|AD37+AD37/AD37\AD43;
                      LDA.B !PlayerXPosNow+1                    ;;AD3C|AD39+AD39/AD39\AD45;
                      SBC.W !SpriteYPosHigh,X                   ;;AD3E|AD3B+AD3B/AD3B\AD47;
                      BPL +                                     ;;AD41|AD3E+AD3E/AD3E\AD4A;
                      INY                                       ;;AD43|AD40+AD40/AD40\AD4C;
                    + RTS                                       ;;AD44|AD41+AD41/AD41\AD4D; Return 
                                                                ;;                        ;
CODE_01AD42:          LDY.B #$00                                ;;AD45|AD42+AD42/AD42\AD4E;
                      LDA.B !PlayerYPosNow                      ;;AD47|AD44+AD44/AD44\AD50;
                      SEC                                       ;;AD49|AD46+AD46/AD46\AD52;
                      SBC.B !SpriteYPosLow,X                    ;;AD4A|AD47+AD47/AD47\AD53;
                      STA.B !_E                                 ;;AD4C|AD49+AD49/AD49\AD55;
                      LDA.B !PlayerYPosNow+1                    ;;AD4E|AD4B+AD4B/AD4B\AD57;
                      SBC.W !SpriteXPosHigh,X                   ;;AD50|AD4D+AD4D/AD4D\AD59;
                      BPL +                                     ;;AD53|AD50+AD50/AD50\AD5C;
                      INY                                       ;;AD55|AD52+AD52/AD52\AD5E;
                    + RTS                                       ;;AD56|AD53+AD53/AD53\AD5F; Return 
                                                                ;;                        ;
                      %insert_empty($02,$05,$05,$05,$00)        ;;AD57|AD54+AD54/AD54\AD60;
                                                                ;;                        ;
InitFlying_Block:     LDA.B !SpriteXPosLow,X                    ;;AD59|AD59+AD59/AD59\AD60;
                      LSR A                                     ;;AD5B|AD5B+AD5B/AD5B\AD62;
                      LSR A                                     ;;AD5C|AD5C+AD5C/AD5C\AD63;
                      LSR A                                     ;;AD5D|AD5D+AD5D/AD5D\AD64;
                      LSR A                                     ;;AD5E|AD5E+AD5E/AD5E\AD65;
                      AND.B #$03                                ;;AD5F|AD5F+AD5F/AD5F\AD66;
                      STA.W !SpriteMisc151C,X                   ;;AD61|AD61+AD61/AD61\AD68;
                      INC.W !SpriteMisc157C,X                   ;;AD64|AD64+AD64/AD64\AD6B;
                      RTS                                       ;;AD67|AD67+AD67/AD67\AD6E; Return 
                                                                ;;                        ;
                                                                ;;                        ;
DATA_01AD68:          db $FF,$01                                ;;AD68|AD68+AD68/AD68\AD6F;
                                                                ;;                        ;
DATA_01AD6A:          db $F4,$0C                                ;;AD6A|AD6A+AD6A/AD6A\AD71;
                                                                ;;                        ;
DATA_01AD6C:          db $F0,$10                                ;;AD6C|AD6C+AD6C/AD6C\AD73;
                                                                ;;                        ;
Flying_Block:         LDA.W !SpriteMisc163E,X                   ;;AD6E|AD6E+AD6E/AD6E\AD75;
                      BEQ +                                     ;;AD71|AD71+AD71/AD71\AD78;
                      STZ.W !SpriteOAMIndex,X                   ;;AD73|AD73+AD73/AD73\AD7A;
                      LDA.W !PlayerRidingYoshi                  ;;AD76|AD76+AD76/AD76\AD7D;
                      BNE +                                     ;;AD79|AD79+AD79/AD79\AD80;
                      LDA.B #$04                                ;;AD7B|AD7B+AD7B/AD7B\AD82;
                      STA.W !SpriteOAMIndex,X                   ;;AD7D|AD7D+AD7D/AD7D\AD84;
                    + JSR SubSprGfx2Entry1                      ;;AD80|AD80+AD80/AD80\AD87;
                      LDY.W !SpriteOAMIndex,X                   ;;AD83|AD83+AD83/AD83\AD8A; Y = Index into sprite OAM 
                      LDA.W !OAMTileYPos+$100,Y                 ;;AD86|AD86+AD86/AD86\AD8D;
                      DEC A                                     ;;AD89|AD89+AD89/AD89\AD90;
                      STA.W !OAMTileYPos+$100,Y                 ;;AD8A|AD8A+AD8A/AD8A\AD91;
                      STZ.W !SpriteMisc1528,X                   ;;AD8D|AD8D+AD8D/AD8D\AD94;
                      LDA.B !SpriteTableC2,X                    ;;AD90|AD90+AD90/AD90\AD97;
                      BNE CODE_01ADF8                           ;;AD92|AD92+AD92/AD92\AD99;
                      JSR CODE_019E95                           ;;AD94|AD94+AD94/AD94\AD9B;
                      LDA.B !SpriteLock                         ;;AD97|AD97+AD97/AD97\AD9E; \ Branch if sprites locked 
                      BNE CODE_01ADF8                           ;;AD99|AD99+AD99/AD99\ADA0; / 
                      LDA.B !TrueFrame                          ;;AD9B|AD9B+AD9B/AD9B\ADA2;
                      AND.B #$01                                ;;AD9D|AD9D+AD9D/AD9D\ADA4;
                      BNE +                                     ;;AD9F|AD9F+AD9F/AD9F\ADA6;
                      LDA.W !SpriteMisc1594,X                   ;;ADA1|ADA1+ADA1/ADA1\ADA8;
                      AND.B #$01                                ;;ADA4|ADA4+ADA4/ADA4\ADAB;
                      TAY                                       ;;ADA6|ADA6+ADA6/ADA6\ADAD;
                      LDA.B !SpriteYSpeed,X                     ;;ADA7|ADA7+ADA7/ADA7\ADAE;
                      CLC                                       ;;ADA9|ADA9+ADA9/ADA9\ADB0;
                      ADC.W DATA_01AD68,Y                       ;;ADAA|ADAA+ADAA/ADAA\ADB1;
                      STA.B !SpriteYSpeed,X                     ;;ADAD|ADAD+ADAD/ADAD\ADB4;
                      CMP.W DATA_01AD6A,Y                       ;;ADAF|ADAF+ADAF/ADAF\ADB6;
                      BNE +                                     ;;ADB2|ADB2+ADB2/ADB2\ADB9;
                      INC.W !SpriteMisc1594,X                   ;;ADB4|ADB4+ADB4/ADB4\ADBB;
                    + JSR SubSprYPosNoGrvty                     ;;ADB7|ADB7+ADB7/ADB7\ADBE;
                      LDA.B !SpriteNumber,X                     ;;ADBA|ADBA+ADBA/ADBA\ADC1;
                      CMP.B #$83                                ;;ADBC|ADBC+ADBC/ADBC\ADC3;
                      BEQ CODE_01ADE8                           ;;ADBE|ADBE+ADBE/ADBE\ADC5;
                      LDA.W !SpriteMisc1540,X                   ;;ADC0|ADC0+ADC0/ADC0\ADC7;
                      BNE +                                     ;;ADC3|ADC3+ADC3/ADC3\ADCA;
                      LDA.B !TrueFrame                          ;;ADC5|ADC5+ADC5/ADC5\ADCC;
                      AND.B #$03                                ;;ADC7|ADC7+ADC7/ADC7\ADCE;
                      BNE +                                     ;;ADC9|ADC9+ADC9/ADC9\ADD0;
                      LDA.W !SpriteMisc1534,X                   ;;ADCB|ADCB+ADCB/ADCB\ADD2;
                      AND.B #$01                                ;;ADCE|ADCE+ADCE/ADCE\ADD5;
                      TAY                                       ;;ADD0|ADD0+ADD0/ADD0\ADD7;
                      LDA.B !SpriteXSpeed,X                     ;;ADD1|ADD1+ADD1/ADD1\ADD8;
                      CLC                                       ;;ADD3|ADD3+ADD3/ADD3\ADDA;
                      ADC.W DATA_01AD68,Y                       ;;ADD4|ADD4+ADD4/ADD4\ADDB;
                      STA.B !SpriteXSpeed,X                     ;;ADD7|ADD7+ADD7/ADD7\ADDE;
                      CMP.W DATA_01AD6C,Y                       ;;ADD9|ADD9+ADD9/ADD9\ADE0;
                      BNE +                                     ;;ADDC|ADDC+ADDC/ADDC\ADE3;
                      INC.W !SpriteMisc1534,X                   ;;ADDE|ADDE+ADDE/ADDE\ADE5;
                      LDA.B #$20                                ;;ADE1|ADE1+ADE1/ADE1\ADE8;
                      STA.W !SpriteMisc1540,X                   ;;ADE3|ADE3+ADE3/ADE3\ADEA;
                    + BRA +                                     ;;ADE6|ADE6+ADE6/ADE6\ADED;
                                                                ;;                        ;
CODE_01ADE8:          LDA.B #$F4                                ;;ADE8|ADE8+ADE8/ADE8\ADEF;
                      STA.B !SpriteXSpeed,X                     ;;ADEA|ADEA+ADEA/ADEA\ADF1;
                    + JSR SubSprXPosNoGrvty                     ;;ADEC|ADEC+ADEC/ADEC\ADF3;
                      LDA.W !SpriteXMovement                    ;;ADEF|ADEF+ADEF/ADEF\ADF6;
                      STA.W !SpriteMisc1528,X                   ;;ADF2|ADF2+ADF2/ADF2\ADF9;
                      INC.W !SpriteMisc1570,X                   ;;ADF5|ADF5+ADF5/ADF5\ADFC;
CODE_01ADF8:          JSR SubSprSprInteract                     ;;ADF8|ADF8+ADF8/ADF8\ADFF;
                      JSR CODE_01B457                           ;;ADFB|ADFB+ADFB/ADFB\AE02;
                      JSR SubOffscreen0Bnk1                     ;;ADFE|ADFE+ADFE/ADFE\AE05;
                      LDA.W !SpriteMisc1558,X                   ;;AE01|AE01+AE01/AE01\AE08;
                      CMP.B #$08                                ;;AE04|AE04+AE04/AE04\AE0B;
                      BNE CODE_01AE5E                           ;;AE06|AE06+AE06/AE06\AE0D;
                      LDY.B !SpriteTableC2,X                    ;;AE08|AE08+AE08/AE08\AE0F;
                      CPY.B #$02                                ;;AE0A|AE0A+AE0A/AE0A\AE11;
                      BEQ CODE_01AE5E                           ;;AE0C|AE0C+AE0C/AE0C\AE13;
                      PHA                                       ;;AE0E|AE0E+AE0E/AE0E\AE15;
                      INC.B !SpriteTableC2,X                    ;;AE0F|AE0F+AE0F/AE0F\AE16;
                      LDA.B #$50                                ;;AE11|AE11+AE11/AE11\AE18;
                      STA.W !SpriteMisc163E,X                   ;;AE13|AE13+AE13/AE13\AE1A;
                      LDA.B !SpriteXPosLow,X                    ;;AE16|AE16+AE16/AE16\AE1D;
                      STA.B !TouchBlockXPos                     ;;AE18|AE18+AE18/AE18\AE1F;
                      LDA.W !SpriteYPosHigh,X                   ;;AE1A|AE1A+AE1A/AE1A\AE21;
                      STA.B !TouchBlockXPos+1                   ;;AE1D|AE1D+AE1D/AE1D\AE24;
                      LDA.B !SpriteYPosLow,X                    ;;AE1F|AE1F+AE1F/AE1F\AE26;
                      STA.B !TouchBlockYPos                     ;;AE21|AE21+AE21/AE21\AE28;
                      LDA.W !SpriteXPosHigh,X                   ;;AE23|AE23+AE23/AE23\AE2A;
                      STA.B !TouchBlockYPos+1                   ;;AE26|AE26+AE26/AE26\AE2D;
                      LDA.B #$FF                                ;;AE28|AE28+AE28/AE28\AE2F; \ Set to permanently erase sprite 
                      STA.W !SpriteLoadIndex,X                  ;;AE2A|AE2A+AE2A/AE2A\AE31; / 
                      LDY.W !SpriteMisc151C,X                   ;;AE2D|AE2D+AE2D/AE2D\AE34;
                      LDA.B !Powerup                            ;;AE30|AE30+AE30/AE30\AE37;
                      BNE +                                     ;;AE32|AE32+AE32/AE32\AE39;
                      INY                                       ;;AE34|AE34+AE34/AE34\AE3B;
                      INY                                       ;;AE35|AE35+AE35/AE35\AE3C;
                      INY                                       ;;AE36|AE36+AE36/AE36\AE3D;
                      INY                                       ;;AE37|AE37+AE37/AE37\AE3E;
                    + LDA.W DATA_01AE88,Y                       ;;AE38|AE38+AE38/AE38\AE3F;
                      STA.B !_5                                 ;;AE3B|AE3B+AE3B/AE3B\AE42;
                      PHB                                       ;;AE3D|AE3D+AE3D/AE3D\AE44;
                      LDA.B #$02                                ;;AE3E|AE3E+AE3E/AE3E\AE45;
                      PHA                                       ;;AE40|AE40+AE40/AE40\AE47;
                      PLB                                       ;;AE41|AE41+AE41/AE41\AE48;
                      PHX                                       ;;AE42|AE42+AE42/AE42\AE49;
                      JSL CODE_02887D                           ;;AE43|AE43+AE43/AE43\AE4A;
                      PLX                                       ;;AE47|AE47+AE47/AE47\AE4E;
                      LDY.W !TileGenerateTrackA                 ;;AE48|AE48+AE48/AE48\AE4F;
                      LDA.B #$01                                ;;AE4B|AE4B+AE4B/AE4B\AE52;
                      STA.W !SpriteMisc1528,Y                   ;;AE4D|AE4D+AE4D/AE4D\AE54;
                      LDA.W !SpriteNumber,Y                     ;;AE50|AE50+AE50/AE50\AE57;
                      CMP.B #$75                                ;;AE53|AE53+AE53/AE53\AE5A;
                      BNE +                                     ;;AE55|AE55+AE55/AE55\AE5C;
                      LDA.B #$FF                                ;;AE57|AE57+AE57/AE57\AE5E;
                      STA.W !SpriteTableC2,Y                    ;;AE59|AE59+AE59/AE59\AE60;
                    + PLB                                       ;;AE5C|AE5C+AE5C/AE5C\AE63;
                      PLA                                       ;;AE5D|AE5D+AE5D/AE5D\AE64;
CODE_01AE5E:          LSR A                                     ;;AE5E|AE5E+AE5E/AE5E\AE65;
                      TAY                                       ;;AE5F|AE5F+AE5F/AE5F\AE66;
                      LDA.W DATA_01AE7F,Y                       ;;AE60|AE60+AE60/AE60\AE67;
                      STA.B !_0                                 ;;AE63|AE63+AE63/AE63\AE6A;
                      LDY.W !SpriteOAMIndex,X                   ;;AE65|AE65+AE65/AE65\AE6C; Y = Index into sprite OAM 
                      LDA.W !OAMTileYPos+$100,Y                 ;;AE68|AE68+AE68/AE68\AE6F;
                      SEC                                       ;;AE6B|AE6B+AE6B/AE6B\AE72;
                      SBC.B !_0                                 ;;AE6C|AE6C+AE6C/AE6C\AE73;
                      STA.W !OAMTileYPos+$100,Y                 ;;AE6E|AE6E+AE6E/AE6E\AE75;
                      LDA.B !SpriteTableC2,X                    ;;AE71|AE71+AE71/AE71\AE78;
                      CMP.B #$01                                ;;AE73|AE73+AE73/AE73\AE7A;
                      LDA.B #$2A                                ;;AE75|AE75+AE75/AE75\AE7C;
                      BCC +                                     ;;AE77|AE77+AE77/AE77\AE7E;
                      LDA.B #$2E                                ;;AE79|AE79+AE79/AE79\AE80;
                    + STA.W !OAMTileNo+$100,Y                   ;;AE7B|AE7B+AE7B/AE7B\AE82;
                      RTS                                       ;;AE7E|AE7E+AE7E/AE7E\AE85; Return 
                                                                ;;                        ;
                                                                ;;                        ;
DATA_01AE7F:          db $00,$03,$05,$07,$08,$08,$07,$05        ;;AE7F|AE7F+AE7F/AE7F\AE86;
                      db $03                                    ;;AE87|AE87+AE87/AE87\AE8E;
                                                                ;;                        ;
DATA_01AE88:          db $06,$02,$04,$05,$06,$01,$01,$05        ;;AE88|AE88+AE88/AE88\AE8F;
                                                                ;;                        ;
Return01AE90:         RTS                                       ;;AE90|AE90+AE90/AE90\AE97;
                                                                ;;                        ;
PalaceSwitch:         JSL CODE_02CD2D                           ;;AE91|AE91+AE91/AE91\AE98;
                      RTS                                       ;;AE95|AE95+AE95/AE95\AE9C; Return 
                                                                ;;                        ;
InitThwomp:           LDA.B !SpriteYPosLow,X                    ;;AE96|AE96+AE96/AE96\AE9D;
                      STA.W !SpriteMisc151C,X                   ;;AE98|AE98+AE98/AE98\AE9F;
                      LDA.B !SpriteXPosLow,X                    ;;AE9B|AE9B+AE9B/AE9B\AEA2;
                      CLC                                       ;;AE9D|AE9D+AE9D/AE9D\AEA4;
                      ADC.B #$08                                ;;AE9E|AE9E+AE9E/AE9E\AEA5;
                      STA.B !SpriteXPosLow,X                    ;;AEA0|AEA0+AEA0/AEA0\AEA7;
Return01AEA2:         RTS                                       ;;AEA2|AEA2+AEA2/AEA2\AEA9;
                                                                ;;                        ;
Thwomp:               JSR ThwompGfx                             ;;AEA3|AEA3+AEA3/AEA3\AEAA;
                      LDA.W !SpriteStatus,X                     ;;AEA6|AEA6+AEA6/AEA6\AEAD;
                      CMP.B #$08                                ;;AEA9|AEA9+AEA9/AEA9\AEB0;
                      BNE Return01AEA2                          ;;AEAB|AEAB+AEAB/AEAB\AEB2;
                      LDA.B !SpriteLock                         ;;AEAD|AEAD+AEAD/AEAD\AEB4; \ Branch if sprites locked 
                      BNE Return01AEA2                          ;;AEAF|AEAF+AEAF/AEAF\AEB6; / 
                      JSR SubOffscreen0Bnk1                     ;;AEB1|AEB1+AEB1/AEB1\AEB8;
                      JSR MarioSprInteractRt                    ;;AEB4|AEB4+AEB4/AEB4\AEBB;
                      LDA.B !SpriteTableC2,X                    ;;AEB7|AEB7+AEB7/AEB7\AEBE;
                      JSL ExecutePtr                            ;;AEB9|AEB9+AEB9/AEB9\AEC0;
                                                                ;;                        ;
                      dw CODE_01AEC3                            ;;AEBD|AEBD+AEBD/AEBD\AEC4;
                      dw CODE_01AEFA                            ;;AEBF|AEBF+AEBF/AEBF\AEC6;
                      dw CODE_01AF24                            ;;AEC1|AEC1+AEC1/AEC1\AEC8;
                                                                ;;                        ;
CODE_01AEC3:          LDA.W !SpriteOffscreenVert,X              ;;AEC3|AEC3+AEC3/AEC3\AECA;
                      BNE CODE_01AEEE                           ;;AEC6|AEC6+AEC6/AEC6\AECD;
                      LDA.W !SpriteOffscreenX,X                 ;;AEC8|AEC8+AEC8/AEC8\AECF;
                      BNE Return01AEF9                          ;;AECB|AECB+AECB/AECB\AED2;
                      JSR SubHorizPos                           ;;AECD|AECD+AECD/AECD\AED4;
                      TYA                                       ;;AED0|AED0+AED0/AED0\AED7;
                      STA.W !SpriteMisc157C,X                   ;;AED1|AED1+AED1/AED1\AED8;
                      STZ.W !SpriteMisc1528,X                   ;;AED4|AED4+AED4/AED4\AEDB;
                      LDA.B !_F                                 ;;AED7|AED7+AED7/AED7\AEDE;
                      CLC                                       ;;AED9|AED9+AED9/AED9\AEE0;
                      ADC.B #$40                                ;;AEDA|AEDA+AEDA/AEDA\AEE1;
                      CMP.B #$80                                ;;AEDC|AEDC+AEDC/AEDC\AEE3;
                      BCS +                                     ;;AEDE|AEDE+AEDE/AEDE\AEE5;
                      LDA.B #$01                                ;;AEE0|AEE0+AEE0/AEE0\AEE7;
                      STA.W !SpriteMisc1528,X                   ;;AEE2|AEE2+AEE2/AEE2\AEE9;
                    + LDA.B !_F                                 ;;AEE5|AEE5+AEE5/AEE5\AEEC;
                      CLC                                       ;;AEE7|AEE7+AEE7/AEE7\AEEE;
                      ADC.B #$24                                ;;AEE8|AEE8+AEE8/AEE8\AEEF;
                      CMP.B #$50                                ;;AEEA|AEEA+AEEA/AEEA\AEF1;
                      BCS Return01AEF9                          ;;AEEC|AEEC+AEEC/AEEC\AEF3;
CODE_01AEEE:          LDA.B #$02                                ;;AEEE|AEEE+AEEE/AEEE\AEF5;
                      STA.W !SpriteMisc1528,X                   ;;AEF0|AEF0+AEF0/AEF0\AEF7;
                      INC.B !SpriteTableC2,X                    ;;AEF3|AEF3+AEF3/AEF3\AEFA;
                      LDA.B #$00                                ;;AEF5|AEF5+AEF5/AEF5\AEFC;
                      STA.B !SpriteYSpeed,X                     ;;AEF7|AEF7+AEF7/AEF7\AEFE;
Return01AEF9:         RTS                                       ;;AEF9|AEF9+AEF9/AEF9\AF00; Return 
                                                                ;;                        ;
CODE_01AEFA:          JSR SubSprYPosNoGrvty                     ;;AEFA|AEFA+AEFA/AEFA\AF01;
                      LDA.B !SpriteYSpeed,X                     ;;AEFD|AEFD+AEFD/AEFD\AF04;
                      CMP.B #$3E                                ;;AEFF|AEFF+AEFF/AEFF\AF06;
                      BCS +                                     ;;AF01|AF01+AF01/AF01\AF08;
                      ADC.B #$04                                ;;AF03|AF03+AF03/AF03\AF0A;
                      STA.B !SpriteYSpeed,X                     ;;AF05|AF05+AF05/AF05\AF0C;
                    + JSR CODE_019140                           ;;AF07|AF07+AF07/AF07\AF0E;
                      JSR IsOnGround                            ;;AF0A|AF0A+AF0A/AF0A\AF11;
                      BEQ +                                     ;;AF0D|AF0D+AF0D/AF0D\AF14;
                      JSR SetSomeYSpeed__                       ;;AF0F|AF0F+AF0F/AF0F\AF16;
                      LDA.B #$18                                ;;AF12|AF12+AF12/AF12\AF19; \ Set ground shake timer 
                      STA.W !ScreenShakeTimer                   ;;AF14|AF14+AF14/AF14\AF1B; / 
                      LDA.B #!SFX_KAPOW                         ;;AF17|AF17+AF17/AF17\AF1E;
                      STA.W !SPCIO3                             ;;AF19|AF19+AF19/AF19\AF20; / Play sound effect 
                      LDA.B #$40                                ;;AF1C|AF1C+AF1C/AF1C\AF23;
                      STA.W !SpriteMisc1540,X                   ;;AF1E|AF1E+AF1E/AF1E\AF25;
                      INC.B !SpriteTableC2,X                    ;;AF21|AF21+AF21/AF21\AF28;
                    + RTS                                       ;;AF23|AF23+AF23/AF23\AF2A; Return 
                                                                ;;                        ;
CODE_01AF24:          LDA.W !SpriteMisc1540,X                   ;;AF24|AF24+AF24/AF24\AF2B;
                      BNE Return01AF3F                          ;;AF27|AF27+AF27/AF27\AF2E;
                      STZ.W !SpriteMisc1528,X                   ;;AF29|AF29+AF29/AF29\AF30;
                      LDA.B !SpriteYPosLow,X                    ;;AF2C|AF2C+AF2C/AF2C\AF33;
                      CMP.W !SpriteMisc151C,X                   ;;AF2E|AF2E+AF2E/AF2E\AF35;
                      BNE +                                     ;;AF31|AF31+AF31/AF31\AF38;
                      LDA.B #$00                                ;;AF33|AF33+AF33/AF33\AF3A;
                      STA.B !SpriteTableC2,X                    ;;AF35|AF35+AF35/AF35\AF3C;
                      RTS                                       ;;AF37|AF37+AF37/AF37\AF3E; Return 
                                                                ;;                        ;
                    + LDA.B #$F0                                ;;AF38|AF38+AF38/AF38\AF3F;
                      STA.B !SpriteYSpeed,X                     ;;AF3A|AF3A+AF3A/AF3A\AF41;
                      JSR SubSprYPosNoGrvty                     ;;AF3C|AF3C+AF3C/AF3C\AF43;
Return01AF3F:         RTS                                       ;;AF3F|AF3F+AF3F/AF3F\AF46; Return 
                                                                ;;                        ;
                                                                ;;                        ;
ThwompDispX:          db $FC,$04,$FC,$04,$00                    ;;AF40|AF40+AF40/AF40\AF47;
                                                                ;;                        ;
ThwompDispY:          db $00,$00,$10,$10,$08                    ;;AF45|AF45+AF45/AF45\AF4C;
                                                                ;;                        ;
ThwompTiles:          db $8E,$8E,$AE,$AE,$C8                    ;;AF4A|AF4A+AF4A/AF4A\AF51;
                                                                ;;                        ;
ThwompGfxProp:        db $03,$43,$03,$43,$03                    ;;AF4F|AF4F+AF4F/AF4F\AF56;
                                                                ;;                        ;
ThwompGfx:            JSR GetDrawInfoBnk1                       ;;AF54|AF54+AF54/AF54\AF5B;
                      LDA.W !SpriteMisc1528,X                   ;;AF57|AF57+AF57/AF57\AF5E;
                      STA.B !_2                                 ;;AF5A|AF5A+AF5A/AF5A\AF61;
                      PHX                                       ;;AF5C|AF5C+AF5C/AF5C\AF63;
                      LDX.B #$03                                ;;AF5D|AF5D+AF5D/AF5D\AF64;
                      CMP.B #$00                                ;;AF5F|AF5F+AF5F/AF5F\AF66;
                      BEQ CODE_01AF64                           ;;AF61|AF61+AF61/AF61\AF68;
                      INX                                       ;;AF63|AF63+AF63/AF63\AF6A;
CODE_01AF64:          LDA.B !_0                                 ;;AF64|AF64+AF64/AF64\AF6B;
                      CLC                                       ;;AF66|AF66+AF66/AF66\AF6D;
                      ADC.W ThwompDispX,X                       ;;AF67|AF67+AF67/AF67\AF6E;
                      STA.W !OAMTileXPos+$100,Y                 ;;AF6A|AF6A+AF6A/AF6A\AF71;
                      LDA.B !_1                                 ;;AF6D|AF6D+AF6D/AF6D\AF74;
                      CLC                                       ;;AF6F|AF6F+AF6F/AF6F\AF76;
                      ADC.W ThwompDispY,X                       ;;AF70|AF70+AF70/AF70\AF77;
                      STA.W !OAMTileYPos+$100,Y                 ;;AF73|AF73+AF73/AF73\AF7A;
                      LDA.W ThwompGfxProp,X                     ;;AF76|AF76+AF76/AF76\AF7D;
                      ORA.B !SpriteProperties                   ;;AF79|AF79+AF79/AF79\AF80;
                      STA.W !OAMTileAttr+$100,Y                 ;;AF7B|AF7B+AF7B/AF7B\AF82;
                      LDA.W ThwompTiles,X                       ;;AF7E|AF7E+AF7E/AF7E\AF85;
                      CPX.B #$04                                ;;AF81|AF81+AF81/AF81\AF88;
                      BNE CODE_01AF8F                           ;;AF83|AF83+AF83/AF83\AF8A;
                      PHX                                       ;;AF85|AF85+AF85/AF85\AF8C;
                      LDX.B !_2                                 ;;AF86|AF86+AF86/AF86\AF8D;
                      CPX.B #$02                                ;;AF88|AF88+AF88/AF88\AF8F;
                      BNE +                                     ;;AF8A|AF8A+AF8A/AF8A\AF91;
                      LDA.B #$CA                                ;;AF8C|AF8C+AF8C/AF8C\AF93;
                    + PLX                                       ;;AF8E|AF8E+AF8E/AF8E\AF95;
CODE_01AF8F:          STA.W !OAMTileNo+$100,Y                   ;;AF8F|AF8F+AF8F/AF8F\AF96;
                      INY                                       ;;AF92|AF92+AF92/AF92\AF99;
                      INY                                       ;;AF93|AF93+AF93/AF93\AF9A;
                      INY                                       ;;AF94|AF94+AF94/AF94\AF9B;
                      INY                                       ;;AF95|AF95+AF95/AF95\AF9C;
                      DEX                                       ;;AF96|AF96+AF96/AF96\AF9D;
                      BPL CODE_01AF64                           ;;AF97|AF97+AF97/AF97\AF9E;
                      PLX                                       ;;AF99|AF99+AF99/AF99\AFA0;
                      LDA.B #$04                                ;;AF9A|AF9A+AF9A/AF9A\AFA1;
                      JMP CODE_01B37E                           ;;AF9C|AF9C+AF9C/AF9C\AFA3;
                                                                ;;                        ;
Thwimp:               LDA.W !SpriteStatus,X                     ;;AF9F|AF9F+AF9F/AF9F\AFA6;
                      CMP.B #$08                                ;;AFA2|AFA2+AFA2/AFA2\AFA9;
                      BNE CODE_01B006                           ;;AFA4|AFA4+AFA4/AFA4\AFAB;
                      LDA.B !SpriteLock                         ;;AFA6|AFA6+AFA6/AFA6\AFAD; \ Branch if sprites locked 
                      BNE CODE_01B006                           ;;AFA8|AFA8+AFA8/AFA8\AFAF; / 
                      JSR SubOffscreen0Bnk1                     ;;AFAA|AFAA+AFAA/AFAA\AFB1;
                      JSR MarioSprInteractRt                    ;;AFAD|AFAD+AFAD/AFAD\AFB4;
                      JSR SubSprXPosNoGrvty                     ;;AFB0|AFB0+AFB0/AFB0\AFB7;
                      JSR SubSprYPosNoGrvty                     ;;AFB3|AFB3+AFB3/AFB3\AFBA;
                      JSR CODE_019140                           ;;AFB6|AFB6+AFB6/AFB6\AFBD;
                      LDA.B !SpriteYSpeed,X                     ;;AFB9|AFB9+AFB9/AFB9\AFC0;
                      BMI CODE_01AFC3                           ;;AFBB|AFBB+AFBB/AFBB\AFC2;
                      CMP.B #$40                                ;;AFBD|AFBD+AFBD/AFBD\AFC4;
                      BCS CODE_01AFC8                           ;;AFBF|AFBF+AFBF/AFBF\AFC6;
                      ADC.B #$05                                ;;AFC1|AFC1+AFC1/AFC1\AFC8;
CODE_01AFC3:          CLC                                       ;;AFC3|AFC3+AFC3/AFC3\AFCA;
                      ADC.B #$03                                ;;AFC4|AFC4+AFC4/AFC4\AFCB;
                      BRA +                                     ;;AFC6|AFC6+AFC6/AFC6\AFCD;
                                                                ;;                        ;
CODE_01AFC8:          LDA.B #$40                                ;;AFC8|AFC8+AFC8/AFC8\AFCF;
                    + STA.B !SpriteYSpeed,X                     ;;AFCA|AFCA+AFCA/AFCA\AFD1;
                      JSR IsTouchingCeiling                     ;;AFCC|AFCC+AFCC/AFCC\AFD3; \ If touching ceiling, 
                      BEQ +                                     ;;AFCF|AFCF+AFCF/AFCF\AFD6;  | 
                      LDA.B #$10                                ;;AFD1|AFD1+AFD1/AFD1\AFD8;  | Y speed = #$10 
                      STA.B !SpriteYSpeed,X                     ;;AFD3|AFD3+AFD3/AFD3\AFDA; / 
                    + JSR IsOnGround                            ;;AFD5|AFD5+AFD5/AFD5\AFDC;
                      BEQ CODE_01B006                           ;;AFD8|AFD8+AFD8/AFD8\AFDF;
                      JSR SetSomeYSpeed__                       ;;AFDA|AFDA+AFDA/AFDA\AFE1;
                      STZ.B !SpriteXSpeed,X                     ;;AFDD|AFDD+AFDD/AFDD\AFE4; \ Sprite Speed = 0 
                      STZ.B !SpriteYSpeed,X                     ;;AFDF|AFDF+AFDF/AFDF\AFE6; / 
                      LDA.W !SpriteMisc1540,X                   ;;AFE1|AFE1+AFE1/AFE1\AFE8;
                      BEQ CODE_01AFFC                           ;;AFE4|AFE4+AFE4/AFE4\AFEB;
                      DEC A                                     ;;AFE6|AFE6+AFE6/AFE6\AFED;
                      BNE CODE_01B006                           ;;AFE7|AFE7+AFE7/AFE7\AFEE;
                      LDA.B #$A0                                ;;AFE9|AFE9+AFE9/AFE9\AFF0;
                      STA.B !SpriteYSpeed,X                     ;;AFEB|AFEB+AFEB/AFEB\AFF2;
                      INC.B !SpriteTableC2,X                    ;;AFED|AFED+AFED/AFED\AFF4;
                      LDA.B !SpriteTableC2,X                    ;;AFEF|AFEF+AFEF/AFEF\AFF6;
                      LSR A                                     ;;AFF1|AFF1+AFF1/AFF1\AFF8;
                      LDA.B #$10                                ;;AFF2|AFF2+AFF2/AFF2\AFF9;
                      BCC +                                     ;;AFF4|AFF4+AFF4/AFF4\AFFB;
                      LDA.B #$F0                                ;;AFF6|AFF6+AFF6/AFF6\AFFD;
                    + STA.B !SpriteXSpeed,X                     ;;AFF8|AFF8+AFF8/AFF8\AFFF;
                      BRA CODE_01B006                           ;;AFFA|AFFA+AFFA/AFFA\B001;
                                                                ;;                        ;
CODE_01AFFC:          LDA.B #!SFX_BONK                          ;;AFFC|AFFC+AFFC/AFFC\B003;
                      STA.W !SPCIO0                             ;;AFFE|AFFE+AFFE/AFFE\B005; / Play sound effect 
                      LDA.B #$40                                ;;B001|B001+B001/B001\B008;
                      STA.W !SpriteMisc1540,X                   ;;B003|B003+B003/B003\B00A;
CODE_01B006:          LDA.B #$01                                ;;B006|B006+B006/B006\B00D;
                      JMP SubSprGfx0Entry0                      ;;B008|B008+B008/B008\B00F;
                                                                ;;                        ;
InitVerticalFish:     JSR FaceMario                             ;;B00B|B00B+B00B/B00B\B012;
                      INC.W !SpriteMisc151C,X                   ;;B00E|B00E+B00E/B00E\B015;
Return01B011:         RTS                                       ;;B011|B011+B011/B011\B018;
                                                                ;;                        ;
                                                                ;;                        ;
DATA_01B012:          db $10,$F0                                ;;B012|B012+B012/B012\B019;
                                                                ;;                        ;
InitFish:             JSR SubHorizPos                           ;;B014|B014+B014/B014\B01B;
                      LDA.W DATA_01B012,Y                       ;;B017|B017+B017/B017\B01E;
                      STA.B !SpriteXSpeed,X                     ;;B01A|B01A+B01A/B01A\B021;
                      RTS                                       ;;B01C|B01C+B01C/B01C\B023; Return 
                                                                ;;                        ;
                                                                ;;                        ;
DATA_01B01D:          db $08,$F8                                ;;B01D|B01D+B01D/B01D\B024;
                                                                ;;                        ;
DATA_01B01F:          db $00,$00,$08,$F8                        ;;B01F|B01F+B01F/B01F\B026;
                                                                ;;                        ;
DATA_01B023:          db $F0,$10                                ;;B023|B023+B023/B023\B02A;
                                                                ;;                        ;
DATA_01B025:          db $E0,$E8,$D0,$D8                        ;;B025|B025+B025/B025\B02C;
                                                                ;;                        ;
DATA_01B029:          db $08,$F8,$10,$F0,$04,$FC,$14,$EC        ;;B029|B029+B029/B029\B030;
DATA_01B031:          db $03,$0C                                ;;B031|B031+B031/B031\B038;
                                                                ;;                        ;
Fish:                 LDA.W !SpriteStatus,X                     ;;B033|B033+B033/B033\B03A;
                      CMP.B #$08                                ;;B036|B036+B036/B036\B03D;
                      BNE CODE_01B03E                           ;;B038|B038+B038/B038\B03F;
                      LDA.B !SpriteLock                         ;;B03A|B03A+B03A/B03A\B041;
                      BEQ +                                     ;;B03C|B03C+B03C/B03C\B043;
CODE_01B03E:          JMP CODE_01B10A                           ;;B03E|B03E+B03E/B03E\B045;
                                                                ;;                        ;
                    + JSR SetAnimationFrame                     ;;B041|B041+B041/B041\B048;
                      LDA.W !SpriteInLiquid,X                   ;;B044|B044+B044/B044\B04B;
                      BNE CODE_01B0A7                           ;;B047|B047+B047/B047\B04E;
                      JSR SubUpdateSprPos                       ;;B049|B049+B049/B049\B050;
                      JSR IsTouchingObjSide                     ;;B04C|B04C+B04C/B04C\B053;
                      BEQ +                                     ;;B04F|B04F+B04F/B04F\B056;
                      JSR FlipSpriteDir                         ;;B051|B051+B051/B051\B058;
                    + JSR IsOnGround                            ;;B054|B054+B054/B054\B05B;
                      BEQ CODE_01B09C                           ;;B057|B057+B057/B057\B05E;
                      LDA.W !SpriteBuoyancy                     ;;B059|B059+B059/B059\B060;
                      BEQ +                                     ;;B05C|B05C+B05C/B05C\B063;
                      JSL CODE_0284BC                           ;;B05E|B05E+B05E/B05E\B065;
                    + JSL GetRand                               ;;B062|B062+B062/B062\B069;
                      ADC.B !TrueFrame                          ;;B066|B066+B066/B066\B06D;
                      AND.B #$07                                ;;B068|B068+B068/B068\B06F;
                      TAY                                       ;;B06A|B06A+B06A/B06A\B071;
                      LDA.W DATA_01B029,Y                       ;;B06B|B06B+B06B/B06B\B072;
                      STA.B !SpriteXSpeed,X                     ;;B06E|B06E+B06E/B06E\B075;
                      JSL GetRand                               ;;B070|B070+B070/B070\B077;
                      LDA.W !RandomNumber+1                     ;;B074|B074+B074/B074\B07B;
                      AND.B #$03                                ;;B077|B077+B077/B077\B07E;
                      TAY                                       ;;B079|B079+B079/B079\B080;
                      LDA.W DATA_01B025,Y                       ;;B07A|B07A+B07A/B07A\B081;
                      STA.B !SpriteYSpeed,X                     ;;B07D|B07D+B07D/B07D\B084;
                      LDA.W !RandomNumber                       ;;B07F|B07F+B07F/B07F\B086;
                      AND.B #$40                                ;;B082|B082+B082/B082\B089;
                      BNE +                                     ;;B084|B084+B084/B084\B08B;
                      LDA.W !SpriteOBJAttribute,X               ;;B086|B086+B086/B086\B08D;
                      EOR.B #$80                                ;;B089|B089+B089/B089\B090;
                      STA.W !SpriteOBJAttribute,X               ;;B08B|B08B+B08B/B08B\B092;
                    + JSL GetRand                               ;;B08E|B08E+B08E/B08E\B095;
                      LDA.W !RandomNumber                       ;;B092|B092+B092/B092\B099;
                      AND.B #$80                                ;;B095|B095+B095/B095\B09C;
                      BNE CODE_01B09C                           ;;B097|B097+B097/B097\B09E;
                      JSR UpdateDirection                       ;;B099|B099+B099/B099\B0A0;
CODE_01B09C:          LDA.W !SpriteMisc1602,X                   ;;B09C|B09C+B09C/B09C\B0A3;
                      CLC                                       ;;B09F|B09F+B09F/B09F\B0A6;
                      ADC.B #$02                                ;;B0A0|B0A0+B0A0/B0A0\B0A7;
                      STA.W !SpriteMisc1602,X                   ;;B0A2|B0A2+B0A2/B0A2\B0A9;
                      BRA CODE_01B0EA                           ;;B0A5|B0A5+B0A5/B0A5\B0AC;
                                                                ;;                        ;
CODE_01B0A7:          JSR CODE_019140                           ;;B0A7|B0A7+B0A7/B0A7\B0AE;
                      JSR UpdateDirection                       ;;B0AA|B0AA+B0AA/B0AA\B0B1;
                      ASL.W !SpriteOBJAttribute,X               ;;B0AD|B0AD+B0AD/B0AD\B0B4;
                      LSR.W !SpriteOBJAttribute,X               ;;B0B0|B0B0+B0B0/B0B0\B0B7;
                      LDA.W !SpriteBlockedDirs,X                ;;B0B3|B0B3+B0B3/B0B3\B0BA;
                      LDY.W !SpriteMisc151C,X                   ;;B0B6|B0B6+B0B6/B0B6\B0BD;
                      AND.W DATA_01B031,Y                       ;;B0B9|B0B9+B0B9/B0B9\B0C0;
                      BNE CODE_01B0C3                           ;;B0BC|B0BC+B0BC/B0BC\B0C3;
                      LDA.W !SpriteMisc1540,X                   ;;B0BE|B0BE+B0BE/B0BE\B0C5;
                      BNE +                                     ;;B0C1|B0C1+B0C1/B0C1\B0C8;
CODE_01B0C3:          LDA.B #$80                                ;;B0C3|B0C3+B0C3/B0C3\B0CA;
                      STA.W !SpriteMisc1540,X                   ;;B0C5|B0C5+B0C5/B0C5\B0CC;
                      INC.B !SpriteTableC2,X                    ;;B0C8|B0C8+B0C8/B0C8\B0CF;
                    + LDA.B !SpriteTableC2,X                    ;;B0CA|B0CA+B0CA/B0CA\B0D1;
                      AND.B #$01                                ;;B0CC|B0CC+B0CC/B0CC\B0D3;
                      TAY                                       ;;B0CE|B0CE+B0CE/B0CE\B0D5;
                      LDA.W !SpriteMisc151C,X                   ;;B0CF|B0CF+B0CF/B0CF\B0D6;
                      BEQ +                                     ;;B0D2|B0D2+B0D2/B0D2\B0D9;
                      INY                                       ;;B0D4|B0D4+B0D4/B0D4\B0DB;
                      INY                                       ;;B0D5|B0D5+B0D5/B0D5\B0DC;
                    + LDA.W DATA_01B01D,Y                       ;;B0D6|B0D6+B0D6/B0D6\B0DD;
                      STA.B !SpriteXSpeed,X                     ;;B0D9|B0D9+B0D9/B0D9\B0E0;
                      LDA.W DATA_01B01F,Y                       ;;B0DB|B0DB+B0DB/B0DB\B0E2;
                      STA.B !SpriteYSpeed,X                     ;;B0DE|B0DE+B0DE/B0DE\B0E5;
                      JSR SubSprXPosNoGrvty                     ;;B0E0|B0E0+B0E0/B0E0\B0E7;
                      AND.B #$0C                                ;;B0E3|B0E3+B0E3/B0E3\B0EA;
                      BNE CODE_01B0EA                           ;;B0E5|B0E5+B0E5/B0E5\B0EC;
                      JSR SubSprYPosNoGrvty                     ;;B0E7|B0E7+B0E7/B0E7\B0EE;
CODE_01B0EA:          JSR SubSprSprInteract                     ;;B0EA|B0EA+B0EA/B0EA\B0F1;
                      JSR MarioSprInteractRt                    ;;B0ED|B0ED+B0ED/B0ED\B0F4;
                      BCC CODE_01B10A                           ;;B0F0|B0F0+B0F0/B0F0\B0F7;
                      LDA.W !SpriteInLiquid,X                   ;;B0F2|B0F2+B0F2/B0F2\B0F9;
                      BEQ CODE_01B107                           ;;B0F5|B0F5+B0F5/B0F5\B0FC;
                      LDA.W !InvinsibilityTimer                 ;;B0F7|B0F7+B0F7/B0F7\B0FE; \ Branch if Mario has star 
                      BNE CODE_01B107                           ;;B0FA|B0FA+B0FA/B0FA\B101; / 
                      LDA.W !PlayerRidingYoshi                  ;;B0FC|B0FC+B0FC/B0FC\B103;
                      BNE CODE_01B10A                           ;;B0FF|B0FF+B0FF/B0FF\B106;
                      JSL HurtMario                             ;;B101|B101+B101/B101\B108;
                      BRA CODE_01B10A                           ;;B105|B105+B105/B105\B10C;
                                                                ;;                        ;
CODE_01B107:          JSR CODE_01B12A                           ;;B107|B107+B107/B107\B10E;
CODE_01B10A:          LDA.W !SpriteMisc1602,X                   ;;B10A|B10A+B10A/B10A\B111;
                      LSR A                                     ;;B10D|B10D+B10D/B10D\B114;
                      EOR.B #$01                                ;;B10E|B10E+B10E/B10E\B115;
                      STA.B !_0                                 ;;B110|B110+B110/B110\B117;
                      LDA.W !SpriteOBJAttribute,X               ;;B112|B112+B112/B112\B119;
                      AND.B #$FE                                ;;B115|B115+B115/B115\B11C;
                      ORA.B !_0                                 ;;B117|B117+B117/B117\B11E;
                      STA.W !SpriteOBJAttribute,X               ;;B119|B119+B119/B119\B120;
                      JSR SubSprGfx2Entry1                      ;;B11C|B11C+B11C/B11C\B123;
                      JSR SubOffscreen0Bnk1                     ;;B11F|B11F+B11F/B11F\B126;
                      LSR.W !SpriteOBJAttribute,X               ;;B122|B122+B122/B122\B129;
                      SEC                                       ;;B125|B125+B125/B125\B12C;
                      ROL.W !SpriteOBJAttribute,X               ;;B126|B126+B126/B126\B12D;
                      RTS                                       ;;B129|B129+B129/B129\B130; Return 
                                                                ;;                        ;
CODE_01B12A:          LDA.B #$10                                ;;B12A|B12A+B12A/B12A\B131;
                      STA.W !KickingTimer                       ;;B12C|B12C+B12C/B12C\B133;
                      LDA.B #!SFX_KICK                          ;;B12F|B12F+B12F/B12F\B136;
                      STA.W !SPCIO0                             ;;B131|B131+B131/B131\B138; / Play sound effect 
                      JSR SubHorizPos                           ;;B134|B134+B134/B134\B13B;
                      LDA.W DATA_01B023,Y                       ;;B137|B137+B137/B137\B13E;
                      STA.B !SpriteXSpeed,X                     ;;B13A|B13A+B13A/B13A\B141;
                      LDA.B #$E0                                ;;B13C|B13C+B13C/B13C\B143;
                      STA.B !SpriteYSpeed,X                     ;;B13E|B13E+B13E/B13E\B145;
                      LDA.B #$02                                ;;B140|B140+B140/B140\B147; \ Sprite status = Killed 
                      STA.W !SpriteStatus,X                     ;;B142|B142+B142/B142\B149; / 
                      STY.B !PlayerDirection                    ;;B145|B145+B145/B145\B14C;
                      LDA.B #$01                                ;;B147|B147+B147/B147\B14E;
                      JSL GivePoints                            ;;B149|B149+B149/B149\B150;
                      RTS                                       ;;B14D|B14D+B14D/B14D\B154; Return 
                                                                ;;                        ;
CODE_01B14E:          LDA.B !TrueFrame                          ;;B14E|B14E+B14E/B14E\B155;
                      AND.B #$03                                ;;B150|B150+B150/B150\B157;
CODE_01B152:          ORA.W !SpriteOffscreenVert,X              ;;B152|B152+B152/B152\B159;
                      ORA.B !SpriteLock                         ;;B155|B155+B155/B155\B15C;
                      BNE Return01B191                          ;;B157|B157+B157/B157\B15E;
                      JSL GetRand                               ;;B159|B159+B159/B159\B160;
                      AND.B #$0F                                ;;B15D|B15D+B15D/B15D\B164;
                      CLC                                       ;;B15F|B15F+B15F/B15F\B166;
                      LDY.B #$00                                ;;B160|B160+B160/B160\B167;
                      ADC.B #$FC                                ;;B162|B162+B162/B162\B169;
                      BPL +                                     ;;B164|B164+B164/B164\B16B;
                      DEY                                       ;;B166|B166+B166/B166\B16D;
                    + CLC                                       ;;B167|B167+B167/B167\B16E;
                      ADC.B !SpriteXPosLow,X                    ;;B168|B168+B168/B168\B16F;
                      STA.B !_2                                 ;;B16A|B16A+B16A/B16A\B171;
                      TYA                                       ;;B16C|B16C+B16C/B16C\B173;
                      ADC.W !SpriteYPosHigh,X                   ;;B16D|B16D+B16D/B16D\B174;
                      PHA                                       ;;B170|B170+B170/B170\B177;
                      LDA.B !_2                                 ;;B171|B171+B171/B171\B178;
                      CMP.B !Layer1XPos                         ;;B173|B173+B173/B173\B17A;
                      PLA                                       ;;B175|B175+B175/B175\B17C;
                      SBC.B !Layer1XPos+1                       ;;B176|B176+B176/B176\B17D;
                      BNE Return01B191                          ;;B178|B178+B178/B178\B17F;
                      LDA.W !RandomNumber+1                     ;;B17A|B17A+B17A/B17A\B181;
                      AND.B #$0F                                ;;B17D|B17D+B17D/B17D\B184;
                      CLC                                       ;;B17F|B17F+B17F/B17F\B186;
                      ADC.B #$FE                                ;;B180|B180+B180/B180\B187;
                      ADC.B !SpriteYPosLow,X                    ;;B182|B182+B182/B182\B189;
                      STA.B !_0                                 ;;B184|B184+B184/B184\B18B;
                      LDA.W !SpriteXPosHigh,X                   ;;B186|B186+B186/B186\B18D;
                      ADC.B #$00                                ;;B189|B189+B189/B189\B190;
                      STA.B !_1                                 ;;B18B|B18B+B18B/B18B\B192;
                      JSL CODE_0285BA                           ;;B18D|B18D+B18D/B18D\B194;
Return01B191:         RTS                                       ;;B191|B191+B191/B191\B198; Return 
                                                                ;;                        ;
GeneratedFish:        JSR CODE_01B209                           ;;B192|B192+B192/B192\B199;
                      LDA.B !SpriteLock                         ;;B195|B195+B195/B195\B19C; \ Branch if sprites locked 
                      BNE Return01B1B0                          ;;B197|B197+B197/B197\B19E; / 
                      JSR SetAnimationFrame                     ;;B199|B199+B199/B199\B1A0;
                      JSR SubSprXPosNoGrvty                     ;;B19C|B19C+B19C/B19C\B1A3;
                      JSR SubSprYPosNoGrvty                     ;;B19F|B19F+B19F/B19F\B1A6;
                      JSR CODE_019140                           ;;B1A2|B1A2+B1A2/B1A2\B1A9;
                      LDA.B !SpriteYSpeed,X                     ;;B1A5|B1A5+B1A5/B1A5\B1AC;
                      CMP.B #$20                                ;;B1A7|B1A7+B1A7/B1A7\B1AE;
                      BPL +                                     ;;B1A9|B1A9+B1A9/B1A9\B1B0;
                      CLC                                       ;;B1AB|B1AB+B1AB/B1AB\B1B2;
                      ADC.B #$01                                ;;B1AC|B1AC+B1AC/B1AC\B1B3;
                    + STA.B !SpriteYSpeed,X                     ;;B1AE|B1AE+B1AE/B1AE\B1B5;
Return01B1B0:         RTS                                       ;;B1B0|B1B0+B1B0/B1B0\B1B7; Return 
                                                                ;;                        ;
                                                                ;;                        ;
DATA_01B1B1:          db $D0,$D0,$B0                            ;;B1B1|B1B1+B1B1/B1B1\B1B8;
                                                                ;;                        ;
JumpingFish:          LDA.B !SpriteLock                         ;;B1B4|B1B4+B1B4/B1B4\B1BB; \ Branch if sprites locked 
                      BNE CODE_01B209                           ;;B1B6|B1B6+B1B6/B1B6\B1BD; / 
                      LDA.W !SpriteInLiquid,X                   ;;B1B8|B1B8+B1B8/B1B8\B1BF;
                      STA.W !SpriteMisc151C,X                   ;;B1BB|B1BB+B1BB/B1BB\B1C2;
                      JSR SubUpdateSprPos                       ;;B1BE|B1BE+B1BE/B1BE\B1C5;
                      LDA.W !SpriteInLiquid,X                   ;;B1C1|B1C1+B1C1/B1C1\B1C8;
                      BEQ CODE_01B1EA                           ;;B1C4|B1C4+B1C4/B1C4\B1CB;
                      LDA.B !SpriteTableC2,X                    ;;B1C6|B1C6+B1C6/B1C6\B1CD;
                      CMP.B #$03                                ;;B1C8|B1C8+B1C8/B1C8\B1CF;
                      BEQ CODE_01B1DE                           ;;B1CA|B1CA+B1CA/B1CA\B1D1;
                      INC.B !SpriteTableC2,X                    ;;B1CC|B1CC+B1CC/B1CC\B1D3;
                      TAY                                       ;;B1CE|B1CE+B1CE/B1CE\B1D5;
                      LDA.W DATA_01B1B1,Y                       ;;B1CF|B1CF+B1CF/B1CF\B1D6;
                      STA.B !SpriteYSpeed,X                     ;;B1D2|B1D2+B1D2/B1D2\B1D9;
                      LDA.B #$10                                ;;B1D4|B1D4+B1D4/B1D4\B1DB;
                      STA.W !SpriteMisc1540,X                   ;;B1D6|B1D6+B1D6/B1D6\B1DD;
                      STZ.W !SpriteInLiquid,X                   ;;B1D9|B1D9+B1D9/B1D9\B1E0;
                      BRA CODE_01B206                           ;;B1DC|B1DC+B1DC/B1DC\B1E3;
                                                                ;;                        ;
CODE_01B1DE:          DEC.B !SpriteYSpeed,X                     ;;B1DE|B1DE+B1DE/B1DE\B1E5;
                      LDA.B !TrueFrame                          ;;B1E0|B1E0+B1E0/B1E0\B1E7;
                      AND.B #$03                                ;;B1E2|B1E2+B1E2/B1E2\B1E9;
                      BNE +                                     ;;B1E4|B1E4+B1E4/B1E4\B1EB;
                      DEC.B !SpriteYSpeed,X                     ;;B1E6|B1E6+B1E6/B1E6\B1ED;
                    + BRA CODE_01B206                           ;;B1E8|B1E8+B1E8/B1E8\B1EF;
                                                                ;;                        ;
CODE_01B1EA:          INC.W !SpriteMisc1570,X                   ;;B1EA|B1EA+B1EA/B1EA\B1F1;
                      INC.W !SpriteMisc1570,X                   ;;B1ED|B1ED+B1ED/B1ED\B1F4;
                      CMP.W !SpriteMisc151C,X                   ;;B1F0|B1F0+B1F0/B1F0\B1F7;
                      BEQ CODE_01B206                           ;;B1F3|B1F3+B1F3/B1F3\B1FA;
                      LDA.B #$10                                ;;B1F5|B1F5+B1F5/B1F5\B1FC;
                      STA.W !SpriteMisc1540,X                   ;;B1F7|B1F7+B1F7/B1F7\B1FE;
                      LDA.B !SpriteTableC2,X                    ;;B1FA|B1FA+B1FA/B1FA\B201;
                      CMP.B #$03                                ;;B1FC|B1FC+B1FC/B1FC\B203;
                      BNE CODE_01B206                           ;;B1FE|B1FE+B1FE/B1FE\B205;
                      STZ.B !SpriteTableC2,X                    ;;B200|B200+B200/B200\B207;
                      LDA.B #$D0                                ;;B202|B202+B202/B202\B209;
                      STA.B !SpriteYSpeed,X                     ;;B204|B204+B204/B204\B20B;
CODE_01B206:          JSR SetAnimationFrame                     ;;B206|B206+B206/B206\B20D;
CODE_01B209:          JSR SubSprSpr_MarioSpr                    ;;B209|B209+B209/B209\B210;
                      JSR UpdateDirection                       ;;B20C|B20C+B20C/B20C\B213;
                      JMP CODE_01B10A                           ;;B20F|B20F+B20F/B20F\B216;
                                                                ;;                        ;
                                                                ;;                        ;
DATA_01B212:          db $08,$F8,$10,$F0                        ;;B212|B212+B212/B212\B219;
                                                                ;;                        ;
InitFloatSpkBall:     JSR FaceMario                             ;;B216|B216+B216/B216\B21D;
                      LDY.W !SpriteMisc157C,X                   ;;B219|B219+B219/B219\B220;
                      LDA.B !SpriteXPosLow,X                    ;;B21C|B21C+B21C/B21C\B223;
                      AND.B #$10                                ;;B21E|B21E+B21E/B21E\B225;
                      BEQ +                                     ;;B220|B220+B220/B220\B227;
                      INY                                       ;;B222|B222+B222/B222\B229;
                      INY                                       ;;B223|B223+B223/B223\B22A;
                    + LDA.W DATA_01B212,Y                       ;;B224|B224+B224/B224\B22B;
                      STA.B !SpriteXSpeed,X                     ;;B227|B227+B227/B227\B22E;
                      BRA InitFloatingPlat                      ;;B229|B229+B229/B229\B230;
                                                                ;;                        ;
InitFallingPlat:      INC.W !SpriteMisc1602,X                   ;;B22B|B22B+B22B/B22B\B232;
InitOrangePlat:       LDA.W !SpriteBuoyancy                     ;;B22E|B22E+B22E/B22E\B235;
                      BNE InitFloatingPlat                      ;;B231|B231+B231/B231\B238;
                      INC.B !SpriteTableC2,X                    ;;B233|B233+B233/B233\B23A;
                      RTS                                       ;;B235|B235+B235/B235\B23C; Return 
                                                                ;;                        ;
InitFloatingPlat:     LDA.B #$03                                ;;B236|B236+B236/B236\B23D;
                      STA.W !SpriteMisc151C,X                   ;;B238|B238+B238/B238\B23F;
CODE_01B23B:          JSR CODE_019140                           ;;B23B|B23B+B23B/B23B\B242;
                      LDA.W !SpriteInLiquid,X                   ;;B23E|B23E+B23E/B23E\B245;
                      BNE Return01B25D                          ;;B241|B241+B241/B241\B248;
                      DEC.W !SpriteMisc151C,X                   ;;B243|B243+B243/B243\B24A;
                      BMI CODE_01B262                           ;;B246|B246+B246/B246\B24D;
                      LDA.B !SpriteYPosLow,X                    ;;B248|B248+B248/B248\B24F;
                      CLC                                       ;;B24A|B24A+B24A/B24A\B251;
                      ADC.B #$08                                ;;B24B|B24B+B24B/B24B\B252;
                      STA.B !SpriteYPosLow,X                    ;;B24D|B24D+B24D/B24D\B254;
                      LDA.W !SpriteXPosHigh,X                   ;;B24F|B24F+B24F/B24F\B256;
                      ADC.B #$00                                ;;B252|B252+B252/B252\B259;
                      STA.W !SpriteXPosHigh,X                   ;;B254|B254+B254/B254\B25B;
                      CMP.B #$02                                ;;B257|B257+B257/B257\B25E;
                      BCS Return01B25D                          ;;B259|B259+B259/B259\B260;
                      BRA CODE_01B23B                           ;;B25B|B25B+B25B/B25B\B262;
                                                                ;;                        ;
Return01B25D:         RTS                                       ;;B25D|B25D+B25D/B25D\B264;
                                                                ;;                        ;
InitChckbrdPlat:      INC.W !SpriteMisc1602,X                   ;;B25E|B25E+B25E/B25E\B265;
                      RTS                                       ;;B261|B261+B261/B261\B268; Return 
                                                                ;;                        ;
CODE_01B262:          LDA.B #$01                                ;;B262|B262+B262/B262\B269; \ Sprite status = Initialization 
                      STA.W !SpriteStatus,X                     ;;B264|B264+B264/B264\B26B; / 
Return01B267:         RTS                                       ;;B267|B267+B267/B267\B26E;
                                                                ;;                        ;
                                                                ;;                        ;
DATA_01B268:          db $FF,$01                                ;;B268|B268+B268/B268\B26F;
                                                                ;;                        ;
DATA_01B26A:          db $F0,$10                                ;;B26A|B26A+B26A/B26A\B271;
                                                                ;;                        ;
Platforms:            JSR CODE_01B2D1                           ;;B26C|B26C+B26C/B26C\B273;
                      LDA.B !SpriteLock                         ;;B26F|B26F+B26F/B26F\B276; \ Branch if sprites locked 
                      BNE Return01B2C2                          ;;B271|B271+B271/B271\B278; / 
                      LDA.W !SpriteMisc1540,X                   ;;B273|B273+B273/B273\B27A;
                      BNE CODE_01B2A5                           ;;B276|B276+B276/B276\B27D;
                      INC.B !SpriteTableC2,X                    ;;B278|B278+B278/B278\B27F;
                      LDA.B !SpriteTableC2,X                    ;;B27A|B27A+B27A/B27A\B281;
                      AND.B #$03                                ;;B27C|B27C+B27C/B27C\B283;
                      BNE CODE_01B2A5                           ;;B27E|B27E+B27E/B27E\B285;
                      LDA.W !SpriteMisc151C,X                   ;;B280|B280+B280/B280\B287;
                      AND.B #$01                                ;;B283|B283+B283/B283\B28A;
                      TAY                                       ;;B285|B285+B285/B285\B28C;
                      LDA.B !SpriteYSpeed,X                     ;;B286|B286+B286/B286\B28D;
                      CLC                                       ;;B288|B288+B288/B288\B28F;
                      ADC.W DATA_01B268,Y                       ;;B289|B289+B289/B289\B290;
                      STA.B !SpriteYSpeed,X                     ;;B28C|B28C+B28C/B28C\B293;
                      STA.B !SpriteXSpeed,X                     ;;B28E|B28E+B28E/B28E\B295;
                      CMP.W DATA_01B26A,Y                       ;;B290|B290+B290/B290\B297;
                      BNE CODE_01B2A5                           ;;B293|B293+B293/B293\B29A;
                      INC.W !SpriteMisc151C,X                   ;;B295|B295+B295/B295\B29C;
                      LDA.B #$18                                ;;B298|B298+B298/B298\B29F;
                      LDY.B !SpriteNumber,X                     ;;B29A|B29A+B29A/B29A\B2A1;
                      CPY.B #$55                                ;;B29C|B29C+B29C/B29C\B2A3;
                      BNE +                                     ;;B29E|B29E+B29E/B29E\B2A5;
                      LDA.B #$08                                ;;B2A0|B2A0+B2A0/B2A0\B2A7;
                    + STA.W !SpriteMisc1540,X                   ;;B2A2|B2A2+B2A2/B2A2\B2A9;
CODE_01B2A5:          LDA.B !SpriteNumber,X                     ;;B2A5|B2A5+B2A5/B2A5\B2AC;
                      CMP.B #$57                                ;;B2A7|B2A7+B2A7/B2A7\B2AE;
                      BCS CODE_01B2B0                           ;;B2A9|B2A9+B2A9/B2A9\B2B0;
                      JSR SubSprXPosNoGrvty                     ;;B2AB|B2AB+B2AB/B2AB\B2B2;
                      BRA +                                     ;;B2AE|B2AE+B2AE/B2AE\B2B5;
                                                                ;;                        ;
CODE_01B2B0:          JSR SubSprYPosNoGrvty                     ;;B2B0|B2B0+B2B0/B2B0\B2B7;
                      STZ.W !SpriteXMovement                    ;;B2B3|B2B3+B2B3/B2B3\B2BA;
                    + LDA.W !SpriteXMovement                    ;;B2B6|B2B6+B2B6/B2B6\B2BD;
                      STA.W !SpriteMisc1528,X                   ;;B2B9|B2B9+B2B9/B2B9\B2C0;
                      JSR CODE_01B457                           ;;B2BC|B2BC+B2BC/B2BC\B2C3;
                      JSR SubOffscreen1Bnk1                     ;;B2BF|B2BF+B2BF/B2BF\B2C6;
Return01B2C2:         RTS                                       ;;B2C2|B2C2+B2C2/B2C2\B2C9; Return 
                                                                ;;                        ;
                                                                ;;                        ;
DATA_01B2C3:          db $00,$01,$00,$01,$00,$00,$00,$00        ;;B2C3|B2C3+B2C3/B2C3\B2CA;
                      db $01,$01,$00,$00,$00,$00                ;;B2CB|B2CB+B2CB/B2CB\B2D2;
                                                                ;;                        ;
CODE_01B2D1:          LDA.B !SpriteNumber,X                     ;;B2D1|B2D1+B2D1/B2D1\B2D8;
                      SEC                                       ;;B2D3|B2D3+B2D3/B2D3\B2DA;
                      SBC.B #$55                                ;;B2D4|B2D4+B2D4/B2D4\B2DB;
                      TAY                                       ;;B2D6|B2D6+B2D6/B2D6\B2DD;
                      LDA.W DATA_01B2C3,Y                       ;;B2D7|B2D7+B2D7/B2D7\B2DE;
                      BEQ CODE_01B2DF                           ;;B2DA|B2DA+B2DA/B2DA\B2E1;
                      JMP CODE_01B395                           ;;B2DC|B2DC+B2DC/B2DC\B2E3;
                                                                ;;                        ;
CODE_01B2DF:          JSR GetDrawInfoBnk1                       ;;B2DF|B2DF+B2DF/B2DF\B2E6;
                      LDA.W !SpriteMisc1602,X                   ;;B2E2|B2E2+B2E2/B2E2\B2E9;
                      STA.B !_1                                 ;;B2E5|B2E5+B2E5/B2E5\B2EC;
                      LDA.B !SpriteYPosLow,X                    ;;B2E7|B2E7+B2E7/B2E7\B2EE;
                      SEC                                       ;;B2E9|B2E9+B2E9/B2E9\B2F0;
                      SBC.B !Layer1YPos                         ;;B2EA|B2EA+B2EA/B2EA\B2F1;
                      STA.W !OAMTileYPos+$100,Y                 ;;B2EC|B2EC+B2EC/B2EC\B2F3;
                      STA.W !OAMTileYPos+$104,Y                 ;;B2EF|B2EF+B2EF/B2EF\B2F6;
                      STA.W !OAMTileYPos+$108,Y                 ;;B2F2|B2F2+B2F2/B2F2\B2F9;
                      LDX.B !_1                                 ;;B2F5|B2F5+B2F5/B2F5\B2FC;
                      BEQ +                                     ;;B2F7|B2F7+B2F7/B2F7\B2FE;
                      STA.W !OAMTileYPos+$10C,Y                 ;;B2F9|B2F9+B2F9/B2F9\B300;
                      STA.W !OAMTileYPos+$110,Y                 ;;B2FC|B2FC+B2FC/B2FC\B303;
                    + LDX.W !CurSpriteProcess                   ;;B2FF|B2FF+B2FF/B2FF\B306; X = Sprite index 
                      LDA.B !SpriteXPosLow,X                    ;;B302|B302+B302/B302\B309;
                      SEC                                       ;;B304|B304+B304/B304\B30B;
                      SBC.B !Layer1XPos                         ;;B305|B305+B305/B305\B30C;
                      STA.W !OAMTileXPos+$100,Y                 ;;B307|B307+B307/B307\B30E;
                      CLC                                       ;;B30A|B30A+B30A/B30A\B311;
                      ADC.B #$10                                ;;B30B|B30B+B30B/B30B\B312;
                      STA.W !OAMTileXPos+$104,Y                 ;;B30D|B30D+B30D/B30D\B314;
                      CLC                                       ;;B310|B310+B310/B310\B317;
                      ADC.B #$10                                ;;B311|B311+B311/B311\B318;
                      STA.W !OAMTileXPos+$108,Y                 ;;B313|B313+B313/B313\B31A;
                      LDX.B !_1                                 ;;B316|B316+B316/B316\B31D;
                      BEQ +                                     ;;B318|B318+B318/B318\B31F;
                      CLC                                       ;;B31A|B31A+B31A/B31A\B321;
                      ADC.B #$10                                ;;B31B|B31B+B31B/B31B\B322;
                      STA.W !OAMTileXPos+$10C,Y                 ;;B31D|B31D+B31D/B31D\B324;
                      CLC                                       ;;B320|B320+B320/B320\B327;
                      ADC.B #$10                                ;;B321|B321+B321/B321\B328;
                      STA.W !OAMTileXPos+$110,Y                 ;;B323|B323+B323/B323\B32A;
                    + LDX.W !CurSpriteProcess                   ;;B326|B326+B326/B326\B32D; X = Sprite index 
                      LDA.B !_1                                 ;;B329|B329+B329/B329\B330;
                      BEQ CODE_01B344                           ;;B32B|B32B+B32B/B32B\B332;
                      LDA.B #$EA                                ;;B32D|B32D+B32D/B32D\B334;
                      STA.W !OAMTileNo+$100,Y                   ;;B32F|B32F+B32F/B32F\B336;
                      LDA.B #$EB                                ;;B332|B332+B332/B332\B339;
                      STA.W !OAMTileNo+$104,Y                   ;;B334|B334+B334/B334\B33B;
                      STA.W !OAMTileNo+$108,Y                   ;;B337|B337+B337/B337\B33E;
                      STA.W !OAMTileNo+$10C,Y                   ;;B33A|B33A+B33A/B33A\B341;
                      LDA.B #$EC                                ;;B33D|B33D+B33D/B33D\B344;
                      STA.W !OAMTileNo+$110,Y                   ;;B33F|B33F+B33F/B33F\B346;
                      BRA +                                     ;;B342|B342+B342/B342\B349;
                                                                ;;                        ;
CODE_01B344:          LDA.B #$60                                ;;B344|B344+B344/B344\B34B;
                      STA.W !OAMTileNo+$100,Y                   ;;B346|B346+B346/B346\B34D;
                      LDA.B #$61                                ;;B349|B349+B349/B349\B350;
                      STA.W !OAMTileNo+$104,Y                   ;;B34B|B34B+B34B/B34B\B352;
                      STA.W !OAMTileNo+$108,Y                   ;;B34E|B34E+B34E/B34E\B355;
                      STA.W !OAMTileNo+$10C,Y                   ;;B351|B351+B351/B351\B358;
                      LDA.B #$62                                ;;B354|B354+B354/B354\B35B;
                      STA.W !OAMTileNo+$110,Y                   ;;B356|B356+B356/B356\B35D;
                    + LDA.B !SpriteProperties                   ;;B359|B359+B359/B359\B360;
                      ORA.W !SpriteOBJAttribute,X               ;;B35B|B35B+B35B/B35B\B362;
                      STA.W !OAMTileAttr+$100,Y                 ;;B35E|B35E+B35E/B35E\B365;
                      STA.W !OAMTileAttr+$104,Y                 ;;B361|B361+B361/B361\B368;
                      STA.W !OAMTileAttr+$108,Y                 ;;B364|B364+B364/B364\B36B;
                      STA.W !OAMTileAttr+$10C,Y                 ;;B367|B367+B367/B367\B36E;
                      STA.W !OAMTileAttr+$110,Y                 ;;B36A|B36A+B36A/B36A\B371;
                      LDA.B !_1                                 ;;B36D|B36D+B36D/B36D\B374;
                      BNE +                                     ;;B36F|B36F+B36F/B36F\B376;
                      LDA.B #$62                                ;;B371|B371+B371/B371\B378;
                      STA.W !OAMTileNo+$108,Y                   ;;B373|B373+B373/B373\B37A;
                    + LDA.B #$04                                ;;B376|B376+B376/B376\B37D;
                      LDY.B !_1                                 ;;B378|B378+B378/B378\B37F;
                      BNE CODE_01B37E                           ;;B37A|B37A+B37A/B37A\B381;
                      LDA.B #$02                                ;;B37C|B37C+B37C/B37C\B383;
CODE_01B37E:          LDY.B #$02                                ;;B37E|B37E+B37E/B37E\B385;
                      JMP FinishOAMWriteRt                      ;;B380|B380+B380/B380\B387;
                                                                ;;                        ;
                                                                ;;                        ;
DiagPlatTiles:        db $CB,$E4,$CC,$E5,$CC,$E5,$CC,$E4        ;;B383|B383+B383/B383\B38A;
                      db $CB                                    ;;B38B|B38B+B38B/B38B\B392;
                                                                ;;                        ;
                      db $85,$88,$86,$89,$86,$89,$86,$88        ;;B38C|B38C+B38C/B38C\B393;
                      db $85                                    ;;B394|B394+B394/B394\B39B;
                                                                ;;                        ;
CODE_01B395:          JSR GetDrawInfoBnk1                       ;;B395|B395+B395/B395\B39C;
                      PHY                                       ;;B398|B398+B398/B398\B39F;
                      LDY.B #$00                                ;;B399|B399+B399/B399\B3A0;
                      LDA.B !SpriteNumber,X                     ;;B39B|B39B+B39B/B39B\B3A2;
                      CMP.B #$5E                                ;;B39D|B39D+B39D/B39D\B3A4;
                      BNE +                                     ;;B39F|B39F+B39F/B39F\B3A6;
                      INY                                       ;;B3A1|B3A1+B3A1/B3A1\B3A8;
                    + STY.B !_0                                 ;;B3A2|B3A2+B3A2/B3A2\B3A9;
                      PLY                                       ;;B3A4|B3A4+B3A4/B3A4\B3AB;
                      LDA.B !SpriteYPosLow,X                    ;;B3A5|B3A5+B3A5/B3A5\B3AC;
                      SEC                                       ;;B3A7|B3A7+B3A7/B3A7\B3AE;
                      SBC.B !Layer1YPos                         ;;B3A8|B3A8+B3A8/B3A8\B3AF;
                      STA.W !OAMTileYPos+$100,Y                 ;;B3AA|B3AA+B3AA/B3AA\B3B1;
                      STA.W !OAMTileYPos+$108,Y                 ;;B3AD|B3AD+B3AD/B3AD\B3B4;
                      STA.W !OAMTileYPos+$110,Y                 ;;B3B0|B3B0+B3B0/B3B0\B3B7;
                      LDX.B !_0                                 ;;B3B3|B3B3+B3B3/B3B3\B3BA;
                      BEQ +                                     ;;B3B5|B3B5+B3B5/B3B5\B3BC;
                      STA.W !OAMTileYPos+$118,Y                 ;;B3B7|B3B7+B3B7/B3B7\B3BE;
                      STA.W !OAMTileYPos+$120,Y                 ;;B3BA|B3BA+B3BA/B3BA\B3C1;
                    + CLC                                       ;;B3BD|B3BD+B3BD/B3BD\B3C4;
                      ADC.B #$10                                ;;B3BE|B3BE+B3BE/B3BE\B3C5;
                      STA.W !OAMTileYPos+$104,Y                 ;;B3C0|B3C0+B3C0/B3C0\B3C7;
                      STA.W !OAMTileYPos+$10C,Y                 ;;B3C3|B3C3+B3C3/B3C3\B3CA;
                      LDX.B !_0                                 ;;B3C6|B3C6+B3C6/B3C6\B3CD;
                      BEQ +                                     ;;B3C8|B3C8+B3C8/B3C8\B3CF;
                      STA.W !OAMTileYPos+$114,Y                 ;;B3CA|B3CA+B3CA/B3CA\B3D1;
                      STA.W !OAMTileYPos+$11C,Y                 ;;B3CD|B3CD+B3CD/B3CD\B3D4;
                    + LDA.B #$08                                ;;B3D0|B3D0+B3D0/B3D0\B3D7;
                      LDX.B !_0                                 ;;B3D2|B3D2+B3D2/B3D2\B3D9;
                      BNE +                                     ;;B3D4|B3D4+B3D4/B3D4\B3DB;
                      LDA.B #$04                                ;;B3D6|B3D6+B3D6/B3D6\B3DD;
                    + STA.B !_1                                 ;;B3D8|B3D8+B3D8/B3D8\B3DF;
                      DEC A                                     ;;B3DA|B3DA+B3DA/B3DA\B3E1;
                      STA.B !_2                                 ;;B3DB|B3DB+B3DB/B3DB\B3E2;
                      LDX.W !CurSpriteProcess                   ;;B3DD|B3DD+B3DD/B3DD\B3E4; X = Sprite index 
                      LDA.W !SpriteOBJAttribute,X               ;;B3E0|B3E0+B3E0/B3E0\B3E7;
                      STA.B !_3                                 ;;B3E3|B3E3+B3E3/B3E3\B3EA;
                      LDA.B !SpriteNumber,X                     ;;B3E5|B3E5+B3E5/B3E5\B3EC;
                      CMP.B #$5B                                ;;B3E7|B3E7+B3E7/B3E7\B3EE;
                      LDA.B #$00                                ;;B3E9|B3E9+B3E9/B3E9\B3F0;
                      BCS +                                     ;;B3EB|B3EB+B3EB/B3EB\B3F2;
                      LDA.B #$09                                ;;B3ED|B3ED+B3ED/B3ED\B3F4;
                    + PHA                                       ;;B3EF|B3EF+B3EF/B3EF\B3F6;
                      LDA.B !SpriteXPosLow,X                    ;;B3F0|B3F0+B3F0/B3F0\B3F7;
                      SEC                                       ;;B3F2|B3F2+B3F2/B3F2\B3F9;
                      SBC.B !Layer1XPos                         ;;B3F3|B3F3+B3F3/B3F3\B3FA;
                      PLX                                       ;;B3F5|B3F5+B3F5/B3F5\B3FC;
CODE_01B3F6:          STA.W !OAMTileXPos+$100,Y                 ;;B3F6|B3F6+B3F6/B3F6\B3FD;
                      CLC                                       ;;B3F9|B3F9+B3F9/B3F9\B400;
                      ADC.B #$08                                ;;B3FA|B3FA+B3FA/B3FA\B401;
                      PHA                                       ;;B3FC|B3FC+B3FC/B3FC\B403;
                      %LorW_X(LDA,DiagPlatTiles)                ;;B3FD|B3FD+B3FD/B3FD\B404;
                      STA.W !OAMTileNo+$100,Y                   ;;B401|B400+B400/B400\B407;
                      LDA.B !SpriteProperties                   ;;B404|B403+B403/B403\B40A;
                      ORA.B !_3                                 ;;B406|B405+B405/B405\B40C;
                      PHX                                       ;;B408|B407+B407/B407\B40E;
                      LDX.B !_1                                 ;;B409|B408+B408/B408\B40F;
                      CPX.B !_2                                 ;;B40B|B40A+B40A/B40A\B411;
                      PLX                                       ;;B40D|B40C+B40C/B40C\B413;
                      BCS +                                     ;;B40E|B40D+B40D/B40D\B414;
                      ORA.B #$40                                ;;B410|B40F+B40F/B40F\B416;
                    + STA.W !OAMTileAttr+$100,Y                 ;;B412|B411+B411/B411\B418;
                      PLA                                       ;;B415|B414+B414/B414\B41B;
                      INY                                       ;;B416|B415+B415/B415\B41C;
                      INY                                       ;;B417|B416+B416/B416\B41D;
                      INY                                       ;;B418|B417+B417/B417\B41E;
                      INY                                       ;;B419|B418+B418/B418\B41F;
                      INX                                       ;;B41A|B419+B419/B419\B420;
                      DEC.B !_1                                 ;;B41B|B41A+B41A/B41A\B421;
                      BPL CODE_01B3F6                           ;;B41D|B41C+B41C/B41C\B423;
                      LDX.W !CurSpriteProcess                   ;;B41F|B41E+B41E/B41E\B425; X = Sprite index 
                      LDY.W !SpriteOAMIndex,X                   ;;B422|B421+B421/B421\B428; Y = Index into sprite OAM 
                      LDA.B !_0                                 ;;B425|B424+B424/B424\B42B;
                      BNE CODE_01B444                           ;;B427|B426+B426/B426\B42D;
                      LDA.B !SpriteNumber,X                     ;;B429|B428+B428/B428\B42F;
                      CMP.B #$5B                                ;;B42B|B42A+B42A/B42A\B431;
                      BCS CODE_01B43A                           ;;B42D|B42C+B42C/B42C\B433;
                      LDA.B #$85                                ;;B42F|B42E+B42E/B42E\B435;
                      STA.W !OAMTileNo+$110,Y                   ;;B431|B430+B430/B430\B437;
                      LDA.B #$88                                ;;B434|B433+B433/B433\B43A;
                      STA.W !OAMTileNo+$10C,Y                   ;;B436|B435+B435/B435\B43C;
                      BRA CODE_01B444                           ;;B439|B438+B438/B438\B43F;
                                                                ;;                        ;
CODE_01B43A:          LDA.B #$CB                                ;;B43B|B43A+B43A/B43A\B441;
                      STA.W !OAMTileNo+$110,Y                   ;;B43D|B43C+B43C/B43C\B443;
                      LDA.B #$E4                                ;;B440|B43F+B43F/B43F\B446;
                      STA.W !OAMTileNo+$10C,Y                   ;;B442|B441+B441/B441\B448;
CODE_01B444:          LDA.B #$08                                ;;B445|B444+B444/B444\B44B;
                      LDY.B !_0                                 ;;B447|B446+B446/B446\B44D;
                      BNE +                                     ;;B449|B448+B448/B448\B44F;
                      LDA.B #$04                                ;;B44B|B44A+B44A/B44A\B451;
                    + JMP CODE_01B37E                           ;;B44D|B44C+B44C/B44C\B453;
                                                                ;;                        ;
InvisBlkMainRt:       PHB                                       ;;B450|B44F+B44F/B44F\B456;
                      PHK                                       ;;B451|B450+B450/B450\B457;
                      PLB                                       ;;B452|B451+B451/B451\B458;
                      JSR CODE_01B457                           ;;B453|B452+B452/B452\B459;
                      PLB                                       ;;B456|B455+B455/B455\B45C;
                      RTL                                       ;;B457|B456+B456/B456\B45D; Return 
                                                                ;;                        ;
CODE_01B457:          JSR ProcessInteract                       ;;B458|B457+B457/B457\B45E;
                      BCC CODE_01B4B2                           ;;B45B|B45A+B45A/B45A\B461;
                      LDA.B !SpriteYPosLow,X                    ;;B45D|B45C+B45C/B45C\B463;
                      SEC                                       ;;B45F|B45E+B45E/B45E\B465;
                      SBC.B !Layer1YPos                         ;;B460|B45F+B45F/B45F\B466;
                      STA.B !_0                                 ;;B462|B461+B461/B461\B468;
                      LDA.B !PlayerYPosScrRel                   ;;B464|B463+B463/B463\B46A;
                      CLC                                       ;;B466|B465+B465/B465\B46C;
                      ADC.B #$18                                ;;B467|B466+B466/B466\B46D;
                      CMP.B !_0                                 ;;B469|B468+B468/B468\B46F;
                      BPL CODE_01B4B4                           ;;B46B|B46A+B46A/B46A\B471;
                      LDA.B !PlayerYSpeed                       ;;B46D|B46C+B46C/B46C\B473;
                      BMI CODE_01B4B2                           ;;B46F|B46E+B46E/B46E\B475;
                      LDA.B !PlayerBlockedDir                   ;;B471|B470+B470/B470\B477;
                      AND.B #$08                                ;;B473|B472+B472/B472\B479;
                      BNE CODE_01B4B2                           ;;B475|B474+B474/B474\B47B;
                      LDA.B #$10                                ;;B477|B476+B476/B476\B47D;
                      STA.B !PlayerYSpeed                       ;;B479|B478+B478/B478\B47F;
                      LDA.B #$01                                ;;B47B|B47A+B47A/B47A\B481;
                      STA.W !StandOnSolidSprite                 ;;B47D|B47C+B47C/B47C\B483;
                      LDA.B #$1F                                ;;B480|B47F+B47F/B47F\B486;
                      LDY.W !PlayerRidingYoshi                  ;;B482|B481+B481/B481\B488;
                      BEQ +                                     ;;B485|B484+B484/B484\B48B;
                      LDA.B #$2F                                ;;B487|B486+B486/B486\B48D;
                    + STA.B !_1                                 ;;B489|B488+B488/B488\B48F;
                      LDA.B !SpriteYPosLow,X                    ;;B48B|B48A+B48A/B48A\B491;
                      SEC                                       ;;B48D|B48C+B48C/B48C\B493;
                      SBC.B !_1                                 ;;B48E|B48D+B48D/B48D\B494;
                      STA.B !PlayerYPosNext                     ;;B490|B48F+B48F/B48F\B496;
                      LDA.W !SpriteXPosHigh,X                   ;;B492|B491+B491/B491\B498;
                      SBC.B #$00                                ;;B495|B494+B494/B494\B49B;
                      STA.B !PlayerYPosNext+1                   ;;B497|B496+B496/B496\B49D;
                      LDA.B !PlayerBlockedDir                   ;;B499|B498+B498/B498\B49F;
                      AND.B #$03                                ;;B49B|B49A+B49A/B49A\B4A1;
                      BNE CODE_01B4B0                           ;;B49D|B49C+B49C/B49C\B4A3;
                      LDY.B #$00                                ;;B49F|B49E+B49E/B49E\B4A5;
                      LDA.W !SpriteMisc1528,X                   ;;B4A1|B4A0+B4A0/B4A0\B4A7;
                      BPL +                                     ;;B4A4|B4A3+B4A3/B4A3\B4AA;
                      DEY                                       ;;B4A6|B4A5+B4A5/B4A5\B4AC;
                    + CLC                                       ;;B4A7|B4A6+B4A6/B4A6\B4AD;
                      ADC.B !PlayerXPosNext                     ;;B4A8|B4A7+B4A7/B4A7\B4AE;
                      STA.B !PlayerXPosNext                     ;;B4AA|B4A9+B4A9/B4A9\B4B0;
                      TYA                                       ;;B4AC|B4AB+B4AB/B4AB\B4B2;
                      ADC.B !PlayerXPosNext+1                   ;;B4AD|B4AC+B4AC/B4AC\B4B3;
                      STA.B !PlayerXPosNext+1                   ;;B4AF|B4AE+B4AE/B4AE\B4B5;
CODE_01B4B0:          SEC                                       ;;B4B1|B4B0+B4B0/B4B0\B4B7;
                      RTS                                       ;;B4B2|B4B1+B4B1/B4B1\B4B8; Return 
                                                                ;;                        ;
CODE_01B4B2:          CLC                                       ;;B4B3|B4B2+B4B2/B4B2\B4B9;
                      RTS                                       ;;B4B4|B4B3+B4B3/B4B3\B4BA; Return 
                                                                ;;                        ;
CODE_01B4B4:          LDA.W !SpriteTweakerF,X                   ;;B4B5|B4B4+B4B4/B4B4\B4BB; \ Branch if "Make Platform Passable" is set 
                      LSR A                                     ;;B4B8|B4B7+B4B7/B4B7\B4BE;  | 
                      BCS CODE_01B4B2                           ;;B4B9|B4B8+B4B8/B4B8\B4BF; / 
                      LDA.B #$00                                ;;B4BB|B4BA+B4BA/B4BA\B4C1;
                      LDY.B !PlayerIsDucking                    ;;B4BD|B4BC+B4BC/B4BC\B4C3;
                      BNE CODE_01B4C4                           ;;B4BF|B4BE+B4BE/B4BE\B4C5;
                      LDY.B !Powerup                            ;;B4C1|B4C0+B4C0/B4C0\B4C7;
                      BNE +                                     ;;B4C3|B4C2+B4C2/B4C2\B4C9;
CODE_01B4C4:          LDA.B #$08                                ;;B4C5|B4C4+B4C4/B4C4\B4CB;
                    + LDY.W !PlayerRidingYoshi                  ;;B4C7|B4C6+B4C6/B4C6\B4CD;
                      BEQ +                                     ;;B4CA|B4C9+B4C9/B4C9\B4D0;
                      ADC.B #$08                                ;;B4CC|B4CB+B4CB/B4CB\B4D2;
                    + CLC                                       ;;B4CE|B4CD+B4CD/B4CD\B4D4;
                      ADC.B !PlayerYPosScrRel                   ;;B4CF|B4CE+B4CE/B4CE\B4D5;
                      CMP.B !_0                                 ;;B4D1|B4D0+B4D0/B4D0\B4D7;
                      BCC CODE_01B505                           ;;B4D3|B4D2+B4D2/B4D2\B4D9;
                      LDA.B !PlayerYSpeed                       ;;B4D5|B4D4+B4D4/B4D4\B4DB;
                      BPL CODE_01B4F7                           ;;B4D7|B4D6+B4D6/B4D6\B4DD;
                      LDA.B #$10                                ;;B4D9|B4D8+B4D8/B4D8\B4DF;
                      STA.B !PlayerYSpeed                       ;;B4DB|B4DA+B4DA/B4DA\B4E1;
                      LDA.B !SpriteNumber,X                     ;;B4DD|B4DC+B4DC/B4DC\B4E3;
                      CMP.B #$83                                ;;B4DF|B4DE+B4DE/B4DE\B4E5;
                      BCC +                                     ;;B4E1|B4E0+B4E0/B4E0\B4E7;
CODE_01B4E2:          LDA.B #$0F                                ;;B4E3|B4E2+B4E2/B4E2\B4E9;
                      STA.W !SpriteMisc1564,X                   ;;B4E5|B4E4+B4E4/B4E4\B4EB;
                      LDA.B !SpriteTableC2,X                    ;;B4E8|B4E7+B4E7/B4E7\B4EE;
                      BNE +                                     ;;B4EA|B4E9+B4E9/B4E9\B4F0;
                      INC.B !SpriteTableC2,X                    ;;B4EC|B4EB+B4EB/B4EB\B4F2;
                      LDA.B #$10                                ;;B4EE|B4ED+B4ED/B4ED\B4F4;
                      STA.W !SpriteMisc1558,X                   ;;B4F0|B4EF+B4EF/B4EF\B4F6;
                    + LDA.B #!SFX_BONK                          ;;B4F3|B4F2+B4F2/B4F2\B4F9;
                      STA.W !SPCIO0                             ;;B4F5|B4F4+B4F4/B4F4\B4FB; / Play sound effect 
CODE_01B4F7:          CLC                                       ;;B4F8|B4F7+B4F7/B4F7\B4FE;
                      RTS                                       ;;B4F9|B4F8+B4F8/B4F8\B4FF; Return 
                                                                ;;                        ;
                                                                ;;                        ;
DATA_01B4F9:          db $0E,$F1,$10,$E0,$1F,$F1                ;;B4FA|B4F9+B4F9/B4F9\B500;
                                                                ;;                        ;
DATA_01B4FF:          db $00,$FF,$00,$FF,$00,$FF                ;;B500|B4FF+B4FF/B4FF\B506;
                                                                ;;                        ;
CODE_01B505:          JSR SubHorizPos                           ;;B506|B505+B505/B505\B50C;
                      LDA.B !SpriteNumber,X                     ;;B509|B508+B508/B508\B50F;
                      CMP.B #$A9                                ;;B50B|B50A+B50A/B50A\B511;
                      BEQ CODE_01B520                           ;;B50D|B50C+B50C/B50C\B513;
                      CMP.B #$9C                                ;;B50F|B50E+B50E/B50E\B515;
                      BEQ CODE_01B51E                           ;;B511|B510+B510/B510\B517;
                      CMP.B #$BB                                ;;B513|B512+B512/B512\B519;
                      BEQ CODE_01B51E                           ;;B515|B514+B514/B514\B51B;
                      CMP.B #$60                                ;;B517|B516+B516/B516\B51D;
                      BEQ CODE_01B51E                           ;;B519|B518+B518/B518\B51F;
                      CMP.B #$49                                ;;B51B|B51A+B51A/B51A\B521;
                      BNE +                                     ;;B51D|B51C+B51C/B51C\B523;
CODE_01B51E:          INY                                       ;;B51F|B51E+B51E/B51E\B525;
                      INY                                       ;;B520|B51F+B51F/B51F\B526;
CODE_01B520:          INY                                       ;;B521|B520+B520/B520\B527;
                      INY                                       ;;B522|B521+B521/B521\B528;
                    + LDA.W DATA_01B4F9,Y                       ;;B523|B522+B522/B522\B529;
                      CLC                                       ;;B526|B525+B525/B525\B52C;
                      ADC.B !SpriteXPosLow,X                    ;;B527|B526+B526/B526\B52D;
                      STA.B !PlayerXPosNext                     ;;B529|B528+B528/B528\B52F;
                      LDA.W DATA_01B4FF,Y                       ;;B52B|B52A+B52A/B52A\B531;
                      ADC.W !SpriteYPosHigh,X                   ;;B52E|B52D+B52D/B52D\B534;
                      STA.B !PlayerXPosNext+1                   ;;B531|B530+B530/B530\B537;
                      STZ.B !PlayerXSpeed                       ;;B533|B532+B532/B532\B539;
                      CLC                                       ;;B535|B534+B534/B534\B53B;
                      RTS                                       ;;B536|B535+B535/B535\B53C; Return 
                                                                ;;                        ;
OrangePlatform:       LDA.B !SpriteTableC2,X                    ;;B537|B536+B536/B536\B53D;
                      BEQ Platforms2                            ;;B539|B538+B538/B538\B53F;
                      JSR CODE_01B2D1                           ;;B53B|B53A+B53A/B53A\B541;
                      LDA.B !SpriteLock                         ;;B53E|B53D+B53D/B53D\B544; \ Branch if sprites locked 
                      BNE +                                     ;;B540|B53F+B53F/B53F\B546; / 
                      JSR SubSprXPosNoGrvty                     ;;B542|B541+B541/B541\B548;
                      LDA.W !SpriteXMovement                    ;;B545|B544+B544/B544\B54B;
                      STA.W !SpriteMisc1528,X                   ;;B548|B547+B547/B547\B54E;
                      JSR CODE_01B457                           ;;B54B|B54A+B54A/B54A\B551;
                      BCC +                                     ;;B54E|B54D+B54D/B54D\B554;
                      LDA.B #$01                                ;;B550|B54F+B54F/B54F\B556;
                      STA.W !BGFastScrollActive                 ;;B552|B551+B551/B551\B558;
                      LDA.B #$08                                ;;B555|B554+B554/B554\B55B;
                      STA.B !SpriteXSpeed,X                     ;;B557|B556+B556/B556\B55D;
                    + RTS                                       ;;B559|B558+B558/B558\B55F; Return 
                                                                ;;                        ;
FloatingSpikeBall:    LDA.W !SpriteStatus,X                     ;;B55A|B559+B559/B559\B560;
                      CMP.B #$08                                ;;B55D|B55C+B55C/B55C\B563;
                      BEQ Platforms2                            ;;B55F|B55E+B55E/B55E\B565;
                      JMP CODE_01B666                           ;;B561|B560+B560/B560\B567;
                                                                ;;                        ;
Platforms2:           LDA.B !SpriteLock                         ;;B564|B563+B563/B563\B56A;
                      BEQ +                                     ;;B566|B565+B565/B565\B56C;
                      JMP CODE_01B64E                           ;;B568|B567+B567/B567\B56E;
                                                                ;;                        ;
                    + LDA.W !SpriteBlockedDirs,X                ;;B56B|B56A+B56A/B56A\B571;
                      AND.B #$0C                                ;;B56E|B56D+B56D/B56D\B574;
                      BNE +                                     ;;B570|B56F+B56F/B56F\B576;
                      JSR SubSprYPosNoGrvty                     ;;B572|B571+B571/B571\B578;
                    + STZ.W !SpriteXMovement                    ;;B575|B574+B574/B574\B57B;
                      LDA.B !SpriteNumber,X                     ;;B578|B577+B577/B577\B57E;
                      CMP.B #$A4                                ;;B57A|B579+B579/B579\B580;
                      BNE +                                     ;;B57C|B57B+B57B/B57B\B582;
                      JSR SubSprXPosNoGrvty                     ;;B57E|B57D+B57D/B57D\B584;
                    + LDA.B !SpriteYSpeed,X                     ;;B581|B580+B580/B580\B587;
                      CMP.B #$40                                ;;B583|B582+B582/B582\B589;
                      BPL +                                     ;;B585|B584+B584/B584\B58B;
                      INC.B !SpriteYSpeed,X                     ;;B587|B586+B586/B586\B58D;
                    + LDA.W !SpriteInLiquid,X                   ;;B589|B588+B588/B588\B58F;
                      BEQ CODE_01B5A6                           ;;B58C|B58B+B58B/B58B\B592;
                      LDY.B #$F8                                ;;B58E|B58D+B58D/B58D\B594;
                      LDA.B !SpriteNumber,X                     ;;B590|B58F+B58F/B58F\B596;
                      CMP.B #$5D                                ;;B592|B591+B591/B591\B598;
                      BCC +                                     ;;B594|B593+B593/B593\B59A;
                      LDY.B #$FC                                ;;B596|B595+B595/B595\B59C;
                    + STY.B !_0                                 ;;B598|B597+B597/B597\B59E;
                      LDA.B !SpriteYSpeed,X                     ;;B59A|B599+B599/B599\B5A0;
                      BPL CODE_01B5A1                           ;;B59C|B59B+B59B/B59B\B5A2;
                      CMP.B !_0                                 ;;B59E|B59D+B59D/B59D\B5A4;
                      BCC CODE_01B5A6                           ;;B5A0|B59F+B59F/B59F\B5A6;
CODE_01B5A1:          SEC                                       ;;B5A2|B5A1+B5A1/B5A1\B5A8;
                      SBC.B #$02                                ;;B5A3|B5A2+B5A2/B5A2\B5A9;
                      STA.B !SpriteYSpeed,X                     ;;B5A5|B5A4+B5A4/B5A4\B5AB;
CODE_01B5A6:          LDA.B !PlayerYSpeed                       ;;B5A7|B5A6+B5A6/B5A6\B5AD;
                      PHA                                       ;;B5A9|B5A8+B5A8/B5A8\B5AF;
                      LDA.B !SpriteNumber,X                     ;;B5AA|B5A9+B5A9/B5A9\B5B0;
                      CMP.B #$A4                                ;;B5AC|B5AB+B5AB/B5AB\B5B2;
                      BNE CODE_01B5B5                           ;;B5AE|B5AD+B5AD/B5AD\B5B4;
                      JSR MarioSprInteractRt                    ;;B5B0|B5AF+B5AF/B5AF\B5B6;
                      CLC                                       ;;B5B3|B5B2+B5B2/B5B2\B5B9;
                      BRA +                                     ;;B5B4|B5B3+B5B3/B5B3\B5BA;
                                                                ;;                        ;
CODE_01B5B5:          JSR CODE_01B457                           ;;B5B6|B5B5+B5B5/B5B5\B5BC;
                    + PLA                                       ;;B5B9|B5B8+B5B8/B5B8\B5BF;
                      STA.B !_0                                 ;;B5BA|B5B9+B5B9/B5B9\B5C0;
                      STZ.W !TileGenerateTrackA                 ;;B5BC|B5BB+B5BB/B5BB\B5C2;
                      BCC CODE_01B5E7                           ;;B5BF|B5BE+B5BE/B5BE\B5C5;
                      LDA.B !SpriteNumber,X                     ;;B5C1|B5C0+B5C0/B5C0\B5C7;
                      CMP.B #$5D                                ;;B5C3|B5C2+B5C2/B5C2\B5C9;
                      BCC CODE_01B5DA                           ;;B5C5|B5C4+B5C4/B5C4\B5CB;
                      LDY.B #$03                                ;;B5C7|B5C6+B5C6/B5C6\B5CD;
                      LDA.B !Powerup                            ;;B5C9|B5C8+B5C8/B5C8\B5CF;
                      BNE +                                     ;;B5CB|B5CA+B5CA/B5CA\B5D1;
                      DEY                                       ;;B5CD|B5CC+B5CC/B5CC\B5D3;
                    + STY.B !_0                                 ;;B5CE|B5CD+B5CD/B5CD\B5D4;
                      LDA.B !SpriteYSpeed,X                     ;;B5D0|B5CF+B5CF/B5CF\B5D6;
                      CMP.B !_0                                 ;;B5D2|B5D1+B5D1/B5D1\B5D8;
                      BPL CODE_01B5DA                           ;;B5D4|B5D3+B5D3/B5D3\B5DA;
                      CLC                                       ;;B5D6|B5D5+B5D5/B5D5\B5DC;
                      ADC.B #$02                                ;;B5D7|B5D6+B5D6/B5D6\B5DD;
                      STA.B !SpriteYSpeed,X                     ;;B5D9|B5D8+B5D8/B5D8\B5DF;
CODE_01B5DA:          INC.W !TileGenerateTrackA                 ;;B5DB|B5DA+B5DA/B5DA\B5E1;
                      LDA.B !_0                                 ;;B5DE|B5DD+B5DD/B5DD\B5E4;
                      CMP.B #$20                                ;;B5E0|B5DF+B5DF/B5DF\B5E6;
                      BCC CODE_01B5E7                           ;;B5E2|B5E1+B5E1/B5E1\B5E8;
                      LSR A                                     ;;B5E4|B5E3+B5E3/B5E3\B5EA;
                      LSR A                                     ;;B5E5|B5E4+B5E4/B5E4\B5EB;
                      STA.B !SpriteYSpeed,X                     ;;B5E6|B5E5+B5E5/B5E5\B5EC;
CODE_01B5E7:          LDA.W !TileGenerateTrackA                 ;;B5E8|B5E7+B5E7/B5E7\B5EE;
                      CMP.W !SpriteMisc151C,X                   ;;B5EB|B5EA+B5EA/B5EA\B5F1;
                      STA.W !SpriteMisc151C,X                   ;;B5EE|B5ED+B5ED/B5ED\B5F4;
                      BEQ CODE_01B610                           ;;B5F1|B5F0+B5F0/B5F0\B5F7;
                      LDA.W !TileGenerateTrackA                 ;;B5F3|B5F2+B5F2/B5F2\B5F9;
                      BNE CODE_01B610                           ;;B5F6|B5F5+B5F5/B5F5\B5FC;
                      LDA.B !PlayerYSpeed                       ;;B5F8|B5F7+B5F7/B5F7\B5FE;
                      BPL CODE_01B610                           ;;B5FA|B5F9+B5F9/B5F9\B600;
                      LDY.B #$08                                ;;B5FC|B5FB+B5FB/B5FB\B602;
                      LDA.B !Powerup                            ;;B5FE|B5FD+B5FD/B5FD\B604;
                      BNE +                                     ;;B600|B5FF+B5FF/B5FF\B606;
                      LDY.B #$06                                ;;B602|B601+B601/B601\B608;
                    + STY.B !_0                                 ;;B604|B603+B603/B603\B60A;
                      LDA.B !SpriteYSpeed,X                     ;;B606|B605+B605/B605\B60C;
                      CMP.B #$20                                ;;B608|B607+B607/B607\B60E;
                      BPL CODE_01B610                           ;;B60A|B609+B609/B609\B610;
                      CLC                                       ;;B60C|B60B+B60B/B60B\B612;
                      ADC.B !_0                                 ;;B60D|B60C+B60C/B60C\B613;
                      STA.B !SpriteYSpeed,X                     ;;B60F|B60E+B60E/B60E\B615;
CODE_01B610:          LDA.B #$01                                ;;B611|B610+B610/B610\B617;
                      AND.B !TrueFrame                          ;;B613|B612+B612/B612\B619;
                      BNE CODE_01B64E                           ;;B615|B614+B614/B614\B61B;
                      LDA.B !SpriteYSpeed,X                     ;;B617|B616+B616/B616\B61D;
                      BEQ CODE_01B624                           ;;B619|B618+B618/B618\B61F;
                      BPL +                                     ;;B61B|B61A+B61A/B61A\B621;
                      CLC                                       ;;B61D|B61C+B61C/B61C\B623;
                      ADC.B #$02                                ;;B61E|B61D+B61D/B61D\B624;
                    + SEC                                       ;;B620|B61F+B61F/B61F\B626;
                      SBC.B #$01                                ;;B621|B620+B620/B620\B627;
                      STA.B !SpriteYSpeed,X                     ;;B623|B622+B622/B622\B629;
CODE_01B624:          LDY.W !TileGenerateTrackA                 ;;B625|B624+B624/B624\B62B;
                      BEQ +                                     ;;B628|B627+B627/B627\B62E;
                      LDY.B #$05                                ;;B62A|B629+B629/B629\B630;
                      LDA.B !Powerup                            ;;B62C|B62B+B62B/B62B\B632;
                      BNE +                                     ;;B62E|B62D+B62D/B62D\B634;
                      LDY.B #$02                                ;;B630|B62F+B62F/B62F\B636;
                    + STY.B !_0                                 ;;B632|B631+B631/B631\B638;
                      LDA.B !SpriteYPosLow,X                    ;;B634|B633+B633/B633\B63A;
                      PHA                                       ;;B636|B635+B635/B635\B63C;
                      SEC                                       ;;B637|B636+B636/B636\B63D;
                      SBC.B !_0                                 ;;B638|B637+B637/B637\B63E;
                      STA.B !SpriteYPosLow,X                    ;;B63A|B639+B639/B639\B640;
                      LDA.W !SpriteXPosHigh,X                   ;;B63C|B63B+B63B/B63B\B642;
                      PHA                                       ;;B63F|B63E+B63E/B63E\B645;
                      SBC.B #$00                                ;;B640|B63F+B63F/B63F\B646;
                      STA.W !SpriteXPosHigh,X                   ;;B642|B641+B641/B641\B648;
                      JSR CODE_019140                           ;;B645|B644+B644/B644\B64B;
                      PLA                                       ;;B648|B647+B647/B647\B64E;
                      STA.W !SpriteXPosHigh,X                   ;;B649|B648+B648/B648\B64F;
                      PLA                                       ;;B64C|B64B+B64B/B64B\B652;
                      STA.B !SpriteYPosLow,X                    ;;B64D|B64C+B64C/B64C\B653;
CODE_01B64E:          JSR SubOffscreen0Bnk1                     ;;B64F|B64E+B64E/B64E\B655;
                      LDA.B !SpriteNumber,X                     ;;B652|B651+B651/B651\B658;
                      CMP.B #$A4                                ;;B654|B653+B653/B653\B65A;
                      BEQ CODE_01B666                           ;;B656|B655+B655/B655\B65C;
                      JMP CODE_01B2D1                           ;;B658|B657+B657/B657\B65E;
                                                                ;;                        ;
                                                                ;;                        ;
DATA_01B65A:          db $F8,$08,$F8,$08                        ;;B65B|B65A+B65A/B65A\B661;
                                                                ;;                        ;
DATA_01B65E:          db $F8,$F8,$08,$08                        ;;B65F|B65E+B65E/B65E\B665;
                                                                ;;                        ;
FloatMineGfxProp:     db $31,$71,$A1,$F1                        ;;B663|B662+B662/B662\B669;
                                                                ;;                        ;
CODE_01B666:          JSR GetDrawInfoBnk1                       ;;B667|B666+B666/B666\B66D;
                      PHX                                       ;;B66A|B669+B669/B669\B670;
                      LDX.B #$03                                ;;B66B|B66A+B66A/B66A\B671;
                    - LDA.B !_0                                 ;;B66D|B66C+B66C/B66C\B673;
                      CLC                                       ;;B66F|B66E+B66E/B66E\B675;
                      ADC.W DATA_01B65A,X                       ;;B670|B66F+B66F/B66F\B676;
                      STA.W !OAMTileXPos+$100,Y                 ;;B673|B672+B672/B672\B679;
                      LDA.B !_1                                 ;;B676|B675+B675/B675\B67C;
                      CLC                                       ;;B678|B677+B677/B677\B67E;
                      ADC.W DATA_01B65E,X                       ;;B679|B678+B678/B678\B67F;
                      STA.W !OAMTileYPos+$100,Y                 ;;B67C|B67B+B67B/B67B\B682;
                      LDA.B !EffFrame                           ;;B67F|B67E+B67E/B67E\B685;
                      LSR A                                     ;;B681|B680+B680/B680\B687;
                      LSR A                                     ;;B682|B681+B681/B681\B688;
                      AND.B #$04                                ;;B683|B682+B682/B682\B689;
                      LSR A                                     ;;B685|B684+B684/B684\B68B;
                      ADC.B #$AA                                ;;B686|B685+B685/B685\B68C;
                      STA.W !OAMTileNo+$100,Y                   ;;B688|B687+B687/B687\B68E;
                      LDA.W FloatMineGfxProp,X                  ;;B68B|B68A+B68A/B68A\B691;
                      STA.W !OAMTileAttr+$100,Y                 ;;B68E|B68D+B68D/B68D\B694;
                      INY                                       ;;B691|B690+B690/B690\B697;
                      INY                                       ;;B692|B691+B691/B691\B698;
                      INY                                       ;;B693|B692+B692/B692\B699;
                      INY                                       ;;B694|B693+B693/B693\B69A;
                      DEX                                       ;;B695|B694+B694/B694\B69B;
                      BPL -                                     ;;B696|B695+B695/B695\B69C;
                      PLX                                       ;;B698|B697+B697/B697\B69E;
                      LDY.B #$02                                ;;B699|B698+B698/B698\B69F;
                      LDA.B #$03                                ;;B69B|B69A+B69A/B69A\B6A1;
                      JMP FinishOAMWriteRt                      ;;B69D|B69C+B69C/B69C\B6A3;
                                                                ;;                        ;
                                                                ;;                        ;
BlkBridgeLength:      db $20,$00                                ;;B6A0|B69F+B69F/B69F\B6A6;
                                                                ;;                        ;
TurnBlkBridgeSpeed:   db $01,$FF                                ;;B6A2|B6A1+B6A1/B6A1\B6A8;
                                                                ;;                        ;
BlkBridgeTiming:      db $40,$40                                ;;B6A4|B6A3+B6A3/B6A3\B6AA;
                                                                ;;                        ;
TurnBlockBridge:      JSR SubOffscreen0Bnk1                     ;;B6A6|B6A5+B6A5/B6A5\B6AC;
                      JSR CODE_01B710                           ;;B6A9|B6A8+B6A8/B6A8\B6AF;
                      JSR CODE_01B852                           ;;B6AC|B6AB+B6AB/B6AB\B6B2;
                      JSR CODE_01B6B2                           ;;B6AF|B6AE+B6AE/B6AE\B6B5;
                      RTS                                       ;;B6B2|B6B1+B6B1/B6B1\B6B8; Return 
                                                                ;;                        ;
CODE_01B6B2:          LDA.B !SpriteTableC2,X                    ;;B6B3|B6B2+B6B2/B6B2\B6B9;
                      AND.B #$01                                ;;B6B5|B6B4+B6B4/B6B4\B6BB;
                      TAY                                       ;;B6B7|B6B6+B6B6/B6B6\B6BD;
                      LDA.W !SpriteMisc151C,X                   ;;B6B8|B6B7+B6B7/B6B7\B6BE;
                      CMP.W BlkBridgeLength,Y                   ;;B6BB|B6BA+B6BA/B6BA\B6C1;
                      BEQ CODE_01B6D1                           ;;B6BE|B6BD+B6BD/B6BD\B6C4;
                      LDA.W !SpriteMisc1540,X                   ;;B6C0|B6BF+B6BF/B6BF\B6C6;
                      ORA.B !SpriteLock                         ;;B6C3|B6C2+B6C2/B6C2\B6C9;
                      BNE +                                     ;;B6C5|B6C4+B6C4/B6C4\B6CB;
                      LDA.W !SpriteMisc151C,X                   ;;B6C7|B6C6+B6C6/B6C6\B6CD;
                      CLC                                       ;;B6CA|B6C9+B6C9/B6C9\B6D0;
                      ADC.W TurnBlkBridgeSpeed,Y                ;;B6CB|B6CA+B6CA/B6CA\B6D1;
                      STA.W !SpriteMisc151C,X                   ;;B6CE|B6CD+B6CD/B6CD\B6D4;
                    + RTS                                       ;;B6D1|B6D0+B6D0/B6D0\B6D7; Return 
                                                                ;;                        ;
CODE_01B6D1:          LDA.W BlkBridgeTiming,Y                   ;;B6D2|B6D1+B6D1/B6D1\B6D8;
                      STA.W !SpriteMisc1540,X                   ;;B6D5|B6D4+B6D4/B6D4\B6DB;
                      INC.B !SpriteTableC2,X                    ;;B6D8|B6D7+B6D7/B6D7\B6DE;
                      RTS                                       ;;B6DA|B6D9+B6D9/B6D9\B6E0; Return 
                                                                ;;                        ;
HorzTurnBlkBridge:    JSR SubOffscreen0Bnk1                     ;;B6DB|B6DA+B6DA/B6DA\B6E1;
                      JSR CODE_01B710                           ;;B6DE|B6DD+B6DD/B6DD\B6E4;
                      JSR CODE_01B852                           ;;B6E1|B6E0+B6E0/B6E0\B6E7;
                      JSR CODE_01B6E7                           ;;B6E4|B6E3+B6E3/B6E3\B6EA;
                      RTS                                       ;;B6E7|B6E6+B6E6/B6E6\B6ED; Return 
                                                                ;;                        ;
CODE_01B6E7:          LDY.B !SpriteTableC2,X                    ;;B6E8|B6E7+B6E7/B6E7\B6EE;
                      LDA.W !SpriteMisc151C,X                   ;;B6EA|B6E9+B6E9/B6E9\B6F0;
                      CMP.W BlkBridgeLength,Y                   ;;B6ED|B6EC+B6EC/B6EC\B6F3;
                      BEQ CODE_01B703                           ;;B6F0|B6EF+B6EF/B6EF\B6F6;
                      LDA.W !SpriteMisc1540,X                   ;;B6F2|B6F1+B6F1/B6F1\B6F8;
                      ORA.B !SpriteLock                         ;;B6F5|B6F4+B6F4/B6F4\B6FB;
                      BNE +                                     ;;B6F7|B6F6+B6F6/B6F6\B6FD;
                      LDA.W !SpriteMisc151C,X                   ;;B6F9|B6F8+B6F8/B6F8\B6FF;
                      CLC                                       ;;B6FC|B6FB+B6FB/B6FB\B702;
                      ADC.W TurnBlkBridgeSpeed,Y                ;;B6FD|B6FC+B6FC/B6FC\B703;
                      STA.W !SpriteMisc151C,X                   ;;B700|B6FF+B6FF/B6FF\B706;
                    + RTS                                       ;;B703|B702+B702/B702\B709; Return 
                                                                ;;                        ;
CODE_01B703:          LDA.W BlkBridgeTiming,Y                   ;;B704|B703+B703/B703\B70A;
                      STA.W !SpriteMisc1540,X                   ;;B707|B706+B706/B706\B70D;
                      LDA.B !SpriteTableC2,X                    ;;B70A|B709+B709/B709\B710;
                      EOR.B #$01                                ;;B70C|B70B+B70B/B70B\B712;
                      STA.B !SpriteTableC2,X                    ;;B70E|B70D+B70D/B70D\B714;
                      RTS                                       ;;B710|B70F+B70F/B70F\B716; Return 
                                                                ;;                        ;
CODE_01B710:          JSR GetDrawInfoBnk1                       ;;B711|B710+B710/B710\B717;
                      STZ.B !_0                                 ;;B714|B713+B713/B713\B71A;
                      STZ.B !_1                                 ;;B716|B715+B715/B715\B71C;
                      STZ.B !_2                                 ;;B718|B717+B717/B717\B71E;
                      STZ.B !_3                                 ;;B71A|B719+B719/B719\B720;
                      LDA.B !SpriteTableC2,X                    ;;B71C|B71B+B71B/B71B\B722;
                      AND.B #$02                                ;;B71E|B71D+B71D/B71D\B724;
                      TAY                                       ;;B720|B71F+B71F/B71F\B726;
                      LDA.W !SpriteMisc151C,X                   ;;B721|B720+B720/B720\B727;
                      STA.W !_0,Y                               ;;B724|B723+B723/B723\B72A;
                      LSR A                                     ;;B727|B726+B726/B726\B72D;
                      STA.W !_1,Y                               ;;B728|B727+B727/B727\B72E;
                      LDY.W !SpriteOAMIndex,X                   ;;B72B|B72A+B72A/B72A\B731; Y = Index into sprite OAM 
                      LDA.B !SpriteYPosLow,X                    ;;B72E|B72D+B72D/B72D\B734;
                      SEC                                       ;;B730|B72F+B72F/B72F\B736;
                      SBC.B !Layer1YPos                         ;;B731|B730+B730/B730\B737;
                      STA.W !OAMTileYPos+$110,Y                 ;;B733|B732+B732/B732\B739;
                      PHA                                       ;;B736|B735+B735/B735\B73C;
                      PHA                                       ;;B737|B736+B736/B736\B73D;
                      PHA                                       ;;B738|B737+B737/B737\B73E;
                      SEC                                       ;;B739|B738+B738/B738\B73F;
                      SBC.B !_2                                 ;;B73A|B739+B739/B739\B740;
                      STA.W !OAMTileYPos+$108,Y                 ;;B73C|B73B+B73B/B73B\B742;
                      PLA                                       ;;B73F|B73E+B73E/B73E\B745;
                      SEC                                       ;;B740|B73F+B73F/B73F\B746;
                      SBC.B !_3                                 ;;B741|B740+B740/B740\B747;
                      STA.W !OAMTileYPos+$10C,Y                 ;;B743|B742+B742/B742\B749;
                      PLA                                       ;;B746|B745+B745/B745\B74C;
                      CLC                                       ;;B747|B746+B746/B746\B74D;
                      ADC.B !_2                                 ;;B748|B747+B747/B747\B74E;
                      STA.W !OAMTileYPos+$100,Y                 ;;B74A|B749+B749/B749\B750;
                      PLA                                       ;;B74D|B74C+B74C/B74C\B753;
                      CLC                                       ;;B74E|B74D+B74D/B74D\B754;
                      ADC.B !_3                                 ;;B74F|B74E+B74E/B74E\B755;
                      STA.W !OAMTileYPos+$104,Y                 ;;B751|B750+B750/B750\B757;
                      LDA.B !SpriteXPosLow,X                    ;;B754|B753+B753/B753\B75A;
                      SEC                                       ;;B756|B755+B755/B755\B75C;
                      SBC.B !Layer1XPos                         ;;B757|B756+B756/B756\B75D;
                      STA.W !OAMTileXPos+$110,Y                 ;;B759|B758+B758/B758\B75F;
                      PHA                                       ;;B75C|B75B+B75B/B75B\B762;
                      PHA                                       ;;B75D|B75C+B75C/B75C\B763;
                      PHA                                       ;;B75E|B75D+B75D/B75D\B764;
                      SEC                                       ;;B75F|B75E+B75E/B75E\B765;
                      SBC.B !_0                                 ;;B760|B75F+B75F/B75F\B766;
                      STA.W !OAMTileXPos+$108,Y                 ;;B762|B761+B761/B761\B768;
                      PLA                                       ;;B765|B764+B764/B764\B76B;
                      SEC                                       ;;B766|B765+B765/B765\B76C;
                      SBC.B !_1                                 ;;B767|B766+B766/B766\B76D;
                      STA.W !OAMTileXPos+$10C,Y                 ;;B769|B768+B768/B768\B76F;
                      PLA                                       ;;B76C|B76B+B76B/B76B\B772;
                      CLC                                       ;;B76D|B76C+B76C/B76C\B773;
                      ADC.B !_0                                 ;;B76E|B76D+B76D/B76D\B774;
                      STA.W !OAMTileXPos+$100,Y                 ;;B770|B76F+B76F/B76F\B776;
                      PLA                                       ;;B773|B772+B772/B772\B779;
                      CLC                                       ;;B774|B773+B773/B773\B77A;
                      ADC.B !_1                                 ;;B775|B774+B774/B774\B77B;
                      STA.W !OAMTileXPos+$104,Y                 ;;B777|B776+B776/B776\B77D;
                      LDA.B !SpriteTableC2,X                    ;;B77A|B779+B779/B779\B780;
                      LSR A                                     ;;B77C|B77B+B77B/B77B\B782;
                      LSR A                                     ;;B77D|B77C+B77C/B77C\B783;
                      LDA.B #$40                                ;;B77E|B77D+B77D/B77D\B784;
                      STA.W !OAMTileNo+$104,Y                   ;;B780|B77F+B77F/B77F\B786;
                      STA.W !OAMTileNo+$10C,Y                   ;;B783|B782+B782/B782\B789;
                      STA.W !OAMTileNo+$110,Y                   ;;B786|B785+B785/B785\B78C;
                      STA.W !OAMTileNo+$108,Y                   ;;B789|B788+B788/B788\B78F;
                      STA.W !OAMTileNo+$100,Y                   ;;B78C|B78B+B78B/B78B\B792;
                      LDA.B !SpriteProperties                   ;;B78F|B78E+B78E/B78E\B795;
                      STA.W !OAMTileAttr+$10C,Y                 ;;B791|B790+B790/B790\B797;
                      STA.W !OAMTileAttr+$104,Y                 ;;B794|B793+B793/B793\B79A;
                      STA.W !OAMTileAttr+$108,Y                 ;;B797|B796+B796/B796\B79D;
                      STA.W !OAMTileAttr+$110,Y                 ;;B79A|B799+B799/B799\B7A0;
                      ORA.B #$60                                ;;B79D|B79C+B79C/B79C\B7A3;
                      STA.W !OAMTileAttr+$100,Y                 ;;B79F|B79E+B79E/B79E\B7A5;
                      LDA.B !_0                                 ;;B7A2|B7A1+B7A1/B7A1\B7A8;
                      PHA                                       ;;B7A4|B7A3+B7A3/B7A3\B7AA;
                      LDA.B !_2                                 ;;B7A5|B7A4+B7A4/B7A4\B7AB;
                      PHA                                       ;;B7A7|B7A6+B7A6/B7A6\B7AD;
                      LDA.B #$04                                ;;B7A8|B7A7+B7A7/B7A7\B7AE;
                      JSR CODE_01B37E                           ;;B7AA|B7A9+B7A9/B7A9\B7B0;
                      PLA                                       ;;B7AD|B7AC+B7AC/B7AC\B7B3;
                      STA.B !_2                                 ;;B7AE|B7AD+B7AD/B7AD\B7B4;
                      PLA                                       ;;B7B0|B7AF+B7AF/B7AF\B7B6;
                      STA.B !_0                                 ;;B7B1|B7B0+B7B0/B7B0\B7B7;
                      RTS                                       ;;B7B3|B7B2+B7B2/B7B2\B7B9; Return 
                                                                ;;                        ;
FinishOAMWrite:       PHB                                       ;;B7B4|B7B3+B7B3/B7B3\B7BA; Wrapper 
                      PHK                                       ;;B7B5|B7B4+B7B4/B7B4\B7BB;
                      PLB                                       ;;B7B6|B7B5+B7B5/B7B5\B7BC;
                      JSR FinishOAMWriteRt                      ;;B7B7|B7B6+B7B6/B7B6\B7BD;
                      PLB                                       ;;B7BA|B7B9+B7B9/B7B9\B7C0;
                      RTL                                       ;;B7BB|B7BA+B7BA/B7BA\B7C1; Return 
                                                                ;;                        ;
FinishOAMWriteRt:     STY.B !_B                                 ;;B7BC|B7BB+B7BB/B7BB\B7C2;
                      STA.B !_8                                 ;;B7BE|B7BD+B7BD/B7BD\B7C4;
                      LDY.W !SpriteOAMIndex,X                   ;;B7C0|B7BF+B7BF/B7BF\B7C6; Y = Index into sprite OAM 
                      LDA.B !SpriteYPosLow,X                    ;;B7C3|B7C2+B7C2/B7C2\B7C9;
                      STA.B !_0                                 ;;B7C5|B7C4+B7C4/B7C4\B7CB;
                      SEC                                       ;;B7C7|B7C6+B7C6/B7C6\B7CD;
                      SBC.B !Layer1YPos                         ;;B7C8|B7C7+B7C7/B7C7\B7CE;
                      STA.B !_6                                 ;;B7CA|B7C9+B7C9/B7C9\B7D0;
                      LDA.W !SpriteXPosHigh,X                   ;;B7CC|B7CB+B7CB/B7CB\B7D2;
                      STA.B !_1                                 ;;B7CF|B7CE+B7CE/B7CE\B7D5;
                      LDA.B !SpriteXPosLow,X                    ;;B7D1|B7D0+B7D0/B7D0\B7D7;
                      STA.B !_2                                 ;;B7D3|B7D2+B7D2/B7D2\B7D9;
                      SEC                                       ;;B7D5|B7D4+B7D4/B7D4\B7DB;
                      SBC.B !Layer1XPos                         ;;B7D6|B7D5+B7D5/B7D5\B7DC;
                      STA.B !_7                                 ;;B7D8|B7D7+B7D7/B7D7\B7DE;
                      LDA.W !SpriteYPosHigh,X                   ;;B7DA|B7D9+B7D9/B7D9\B7E0;
                      STA.B !_3                                 ;;B7DD|B7DC+B7DC/B7DC\B7E3;
CODE_01B7DE:          TYA                                       ;;B7DF|B7DE+B7DE/B7DE\B7E5;
                      LSR A                                     ;;B7E0|B7DF+B7DF/B7DF\B7E6;
                      LSR A                                     ;;B7E1|B7E0+B7E0/B7E0\B7E7;
                      TAX                                       ;;B7E2|B7E1+B7E1/B7E1\B7E8;
                      LDA.B !_B                                 ;;B7E3|B7E2+B7E2/B7E2\B7E9;
                      BPL CODE_01B7F0                           ;;B7E5|B7E4+B7E4/B7E4\B7EB;
                      LDA.W !OAMTileSize+$40,X                  ;;B7E7|B7E6+B7E6/B7E6\B7ED;
                      AND.B #$02                                ;;B7EA|B7E9+B7E9/B7E9\B7F0;
                      STA.W !OAMTileSize+$40,X                  ;;B7EC|B7EB+B7EB/B7EB\B7F2;
                      BRA +                                     ;;B7EF|B7EE+B7EE/B7EE\B7F5;
                                                                ;;                        ;
CODE_01B7F0:          STA.W !OAMTileSize+$40,X                  ;;B7F1|B7F0+B7F0/B7F0\B7F7;
                    + LDX.B #$00                                ;;B7F4|B7F3+B7F3/B7F3\B7FA;
                      LDA.W !OAMTileXPos+$100,Y                 ;;B7F6|B7F5+B7F5/B7F5\B7FC;
                      SEC                                       ;;B7F9|B7F8+B7F8/B7F8\B7FF;
                      SBC.B !_7                                 ;;B7FA|B7F9+B7F9/B7F9\B800;
                      BPL +                                     ;;B7FC|B7FB+B7FB/B7FB\B802;
                      DEX                                       ;;B7FE|B7FD+B7FD/B7FD\B804;
                    + CLC                                       ;;B7FF|B7FE+B7FE/B7FE\B805;
                      ADC.B !_2                                 ;;B800|B7FF+B7FF/B7FF\B806;
                      STA.B !_4                                 ;;B802|B801+B801/B801\B808;
                      TXA                                       ;;B804|B803+B803/B803\B80A;
                      ADC.B !_3                                 ;;B805|B804+B804/B804\B80B;
                      STA.B !_5                                 ;;B807|B806+B806/B806\B80D;
                      JSR CODE_01B844                           ;;B809|B808+B808/B808\B80F;
                      BCC +                                     ;;B80C|B80B+B80B/B80B\B812;
                      TYA                                       ;;B80E|B80D+B80D/B80D\B814;
                      LSR A                                     ;;B80F|B80E+B80E/B80E\B815;
                      LSR A                                     ;;B810|B80F+B80F/B80F\B816;
                      TAX                                       ;;B811|B810+B810/B810\B817;
                      LDA.W !OAMTileSize+$40,X                  ;;B812|B811+B811/B811\B818;
                      ORA.B #$01                                ;;B815|B814+B814/B814\B81B;
                      STA.W !OAMTileSize+$40,X                  ;;B817|B816+B816/B816\B81D;
                    + LDX.B #$00                                ;;B81A|B819+B819/B819\B820;
                      LDA.W !OAMTileYPos+$100,Y                 ;;B81C|B81B+B81B/B81B\B822;
                      SEC                                       ;;B81F|B81E+B81E/B81E\B825;
                      SBC.B !_6                                 ;;B820|B81F+B81F/B81F\B826;
                      BPL +                                     ;;B822|B821+B821/B821\B828;
                      DEX                                       ;;B824|B823+B823/B823\B82A;
                    + CLC                                       ;;B825|B824+B824/B824\B82B;
                      ADC.B !_0                                 ;;B826|B825+B825/B825\B82C;
                      STA.B !_9                                 ;;B828|B827+B827/B827\B82E;
                      TXA                                       ;;B82A|B829+B829/B829\B830;
                      ADC.B !_1                                 ;;B82B|B82A+B82A/B82A\B831;
                      STA.B !_A                                 ;;B82D|B82C+B82C/B82C\B833;
                      JSR CODE_01C9BF                           ;;B82F|B82E+B82E/B82E\B835;
                      BCC +                                     ;;B832|B831+B831/B831\B838;
                      LDA.B #$F0                                ;;B834|B833+B833/B833\B83A;
                      STA.W !OAMTileYPos+$100,Y                 ;;B836|B835+B835/B835\B83C;
                    + INY                                       ;;B839|B838+B838/B838\B83F;
                      INY                                       ;;B83A|B839+B839/B839\B840;
                      INY                                       ;;B83B|B83A+B83A/B83A\B841;
                      INY                                       ;;B83C|B83B+B83B/B83B\B842;
                      DEC.B !_8                                 ;;B83D|B83C+B83C/B83C\B843;
                      BPL CODE_01B7DE                           ;;B83F|B83E+B83E/B83E\B845;
                      LDX.W !CurSpriteProcess                   ;;B841|B840+B840/B840\B847; X = Sprite index 
                      RTS                                       ;;B844|B843+B843/B843\B84A; Return 
                                                                ;;                        ;
CODE_01B844:          REP #$20                                  ;;B845|B844+B844/B844\B84B; Accum (16 bit) 
                      LDA.B !_4                                 ;;B847|B846+B846/B846\B84D;
                      SEC                                       ;;B849|B848+B848/B848\B84F;
                      SBC.B !Layer1XPos                         ;;B84A|B849+B849/B849\B850;
                      CMP.W #$0100                              ;;B84C|B84B+B84B/B84B\B852;
                      SEP #$20                                  ;;B84F|B84E+B84E/B84E\B855; Accum (8 bit) 
                      RTS                                       ;;B851|B850+B850/B850\B857; Return 
                                                                ;;                        ;
                      RTS                                       ;;B852|B851+B851/B851\B858;
                                                                ;;                        ;
CODE_01B852:          LDA.W !SpriteWayOffscreenX,X              ;;B853|B852+B852/B852\B859;
                      BNE Return01B8B1                          ;;B856|B855+B855/B855\B85C;
                      LDA.B !PlayerAnimation                    ;;B858|B857+B857/B857\B85E;
                      CMP.B #$01                                ;;B85A|B859+B859/B859\B860;
                      BCS Return01B8B1                          ;;B85C|B85B+B85B/B85B\B862;
                      JSR CODE_01B8FF                           ;;B85E|B85D+B85D/B85D\B864;
                      BCC Return01B8B1                          ;;B861|B860+B860/B860\B867;
                      LDA.B !SpriteYPosLow,X                    ;;B863|B862+B862/B862\B869;
                      SEC                                       ;;B865|B864+B864/B864\B86B;
                      SBC.B !Layer1YPos                         ;;B866|B865+B865/B865\B86C;
                      STA.B !_2                                 ;;B868|B867+B867/B867\B86E;
                      SEC                                       ;;B86A|B869+B869/B869\B870;
                      SBC.B !_D                                 ;;B86B|B86A+B86A/B86A\B871;
                      STA.B !_9                                 ;;B86D|B86C+B86C/B86C\B873;
                      LDA.B !PlayerYPosScrRel                   ;;B86F|B86E+B86E/B86E\B875;
                      CLC                                       ;;B871|B870+B870/B870\B877;
                      ADC.B #$18                                ;;B872|B871+B871/B871\B878;
                      CMP.B !_9                                 ;;B874|B873+B873/B873\B87A;
                      BCS ADDR_01B8B2                           ;;B876|B875+B875/B875\B87C;
                      LDA.B !PlayerYSpeed                       ;;B878|B877+B877/B877\B87E;
                      BMI Return01B8B1                          ;;B87A|B879+B879/B879\B880;
                      STZ.B !PlayerYSpeed                       ;;B87C|B87B+B87B/B87B\B882;
                      LDA.B #$01                                ;;B87E|B87D+B87D/B87D\B884;
                      STA.W !StandOnSolidSprite                 ;;B880|B87F+B87F/B87F\B886;
                      LDA.B !_D                                 ;;B883|B882+B882/B882\B889;
                      CLC                                       ;;B885|B884+B884/B884\B88B;
                      ADC.B #$1F                                ;;B886|B885+B885/B885\B88C;
                      LDY.W !PlayerRidingYoshi                  ;;B888|B887+B887/B887\B88E;
                      BEQ +                                     ;;B88B|B88A+B88A/B88A\B891;
                      CLC                                       ;;B88D|B88C+B88C/B88C\B893;
                      ADC.B #$10                                ;;B88E|B88D+B88D/B88D\B894;
                    + STA.B !_0                                 ;;B890|B88F+B88F/B88F\B896;
                      LDA.B !SpriteYPosLow,X                    ;;B892|B891+B891/B891\B898;
                      SEC                                       ;;B894|B893+B893/B893\B89A;
                      SBC.B !_0                                 ;;B895|B894+B894/B894\B89B;
                      STA.B !PlayerYPosNext                     ;;B897|B896+B896/B896\B89D;
                      LDA.W !SpriteXPosHigh,X                   ;;B899|B898+B898/B898\B89F;
                      SBC.B #$00                                ;;B89C|B89B+B89B/B89B\B8A2;
                      STA.B !PlayerYPosNext+1                   ;;B89E|B89D+B89D/B89D\B8A4;
                      LDY.B #$00                                ;;B8A0|B89F+B89F/B89F\B8A6;
                      LDA.W !SpriteXMovement                    ;;B8A2|B8A1+B8A1/B8A1\B8A8;
                      BPL +                                     ;;B8A5|B8A4+B8A4/B8A4\B8AB;
                      DEY                                       ;;B8A7|B8A6+B8A6/B8A6\B8AD;
                    + CLC                                       ;;B8A8|B8A7+B8A7/B8A7\B8AE;
                      ADC.B !PlayerXPosNext                     ;;B8A9|B8A8+B8A8/B8A8\B8AF;
                      STA.B !PlayerXPosNext                     ;;B8AB|B8AA+B8AA/B8AA\B8B1;
                      TYA                                       ;;B8AD|B8AC+B8AC/B8AC\B8B3;
                      ADC.B !PlayerXPosNext+1                   ;;B8AE|B8AD+B8AD/B8AD\B8B4;
                      STA.B !PlayerXPosNext+1                   ;;B8B0|B8AF+B8AF/B8AF\B8B6;
Return01B8B1:         RTS                                       ;;B8B2|B8B1+B8B1/B8B1\B8B8; Return 
                                                                ;;                        ;
ADDR_01B8B2:          LDA.B !_2                                 ;;B8B3|B8B2+B8B2/B8B2\B8B9;
                      CLC                                       ;;B8B5|B8B4+B8B4/B8B4\B8BB;
                      ADC.B !_D                                 ;;B8B6|B8B5+B8B5/B8B5\B8BC;
                      STA.B !_2                                 ;;B8B8|B8B7+B8B7/B8B7\B8BE;
                      LDA.B #$FF                                ;;B8BA|B8B9+B8B9/B8B9\B8C0;
                      LDY.B !PlayerIsDucking                    ;;B8BC|B8BB+B8BB/B8BB\B8C2;
                      BNE ADDR_01B8C3                           ;;B8BE|B8BD+B8BD/B8BD\B8C4;
                      LDY.B !Powerup                            ;;B8C0|B8BF+B8BF/B8BF\B8C6;
                      BNE +                                     ;;B8C2|B8C1+B8C1/B8C1\B8C8;
ADDR_01B8C3:          LDA.B #$08                                ;;B8C4|B8C3+B8C3/B8C3\B8CA;
                    + CLC                                       ;;B8C6|B8C5+B8C5/B8C5\B8CC;
                      ADC.B !PlayerYPosScrRel                   ;;B8C7|B8C6+B8C6/B8C6\B8CD;
                      CMP.B !_2                                 ;;B8C9|B8C8+B8C8/B8C8\B8CF;
                      BCC ADDR_01B8D5                           ;;B8CB|B8CA+B8CA/B8CA\B8D1;
                      LDA.B !PlayerYSpeed                       ;;B8CD|B8CC+B8CC/B8CC\B8D3;
                      BPL +                                     ;;B8CF|B8CE+B8CE/B8CE\B8D5;
                      LDA.B #$10                                ;;B8D1|B8D0+B8D0/B8D0\B8D7;
                      STA.B !PlayerYSpeed                       ;;B8D3|B8D2+B8D2/B8D2\B8D9;
                    + RTS                                       ;;B8D5|B8D4+B8D4/B8D4\B8DB; Return 
                                                                ;;                        ;
ADDR_01B8D5:          LDA.B !_E                                 ;;B8D6|B8D5+B8D5/B8D5\B8DC;
                      CLC                                       ;;B8D8|B8D7+B8D7/B8D7\B8DE;
                      ADC.B #$10                                ;;B8D9|B8D8+B8D8/B8D8\B8DF;
                      STA.B !_0                                 ;;B8DB|B8DA+B8DA/B8DA\B8E1;
                      LDY.B #$00                                ;;B8DD|B8DC+B8DC/B8DC\B8E3;
                      LDA.B !SpriteXPosLow,X                    ;;B8DF|B8DE+B8DE/B8DE\B8E5;
                      SEC                                       ;;B8E1|B8E0+B8E0/B8E0\B8E7;
                      SBC.B !Layer1XPos                         ;;B8E2|B8E1+B8E1/B8E1\B8E8;
                      CMP.B !PlayerXPosScrRel                   ;;B8E4|B8E3+B8E3/B8E3\B8EA;
                      BCC +                                     ;;B8E6|B8E5+B8E5/B8E5\B8EC;
                      LDA.B !_0                                 ;;B8E8|B8E7+B8E7/B8E7\B8EE;
                      EOR.B #$FF                                ;;B8EA|B8E9+B8E9/B8E9\B8F0;
                      INC A                                     ;;B8EC|B8EB+B8EB/B8EB\B8F2;
                      STA.B !_0                                 ;;B8ED|B8EC+B8EC/B8EC\B8F3;
                      DEY                                       ;;B8EF|B8EE+B8EE/B8EE\B8F5;
                    + LDA.B !SpriteXPosLow,X                    ;;B8F0|B8EF+B8EF/B8EF\B8F6;
                      CLC                                       ;;B8F2|B8F1+B8F1/B8F1\B8F8;
                      ADC.B !_0                                 ;;B8F3|B8F2+B8F2/B8F2\B8F9;
                      STA.B !PlayerXPosNext                     ;;B8F5|B8F4+B8F4/B8F4\B8FB;
                      TYA                                       ;;B8F7|B8F6+B8F6/B8F6\B8FD;
                      ADC.W !SpriteYPosHigh,X                   ;;B8F8|B8F7+B8F7/B8F7\B8FE;
                      STA.B !PlayerXPosNext+1                   ;;B8FB|B8FA+B8FA/B8FA\B901;
                      STZ.B !PlayerXSpeed                       ;;B8FD|B8FC+B8FC/B8FC\B903;
                      RTS                                       ;;B8FF|B8FE+B8FE/B8FE\B905; Return 
                                                                ;;                        ;
CODE_01B8FF:          LDA.B !_0                                 ;;B900|B8FF+B8FF/B8FF\B906;
                      STA.B !_E                                 ;;B902|B901+B901/B901\B908;
                      LDA.B !_2                                 ;;B904|B903+B903/B903\B90A;
                      STA.B !_D                                 ;;B906|B905+B905/B905\B90C;
                      LDA.B !SpriteXPosLow,X                    ;;B908|B907+B907/B907\B90E;
                      SEC                                       ;;B90A|B909+B909/B909\B910;
                      SBC.B !_0                                 ;;B90B|B90A+B90A/B90A\B911;
                      STA.B !_4                                 ;;B90D|B90C+B90C/B90C\B913;
                      LDA.W !SpriteYPosHigh,X                   ;;B90F|B90E+B90E/B90E\B915;
                      SBC.B #$00                                ;;B912|B911+B911/B911\B918;
                      STA.B !_A                                 ;;B914|B913+B913/B913\B91A;
                      LDA.B !_0                                 ;;B916|B915+B915/B915\B91C;
                      ASL A                                     ;;B918|B917+B917/B917\B91E;
                      CLC                                       ;;B919|B918+B918/B918\B91F;
                      ADC.B #$10                                ;;B91A|B919+B919/B919\B920;
                      STA.B !_6                                 ;;B91C|B91B+B91B/B91B\B922;
                      LDA.B !SpriteYPosLow,X                    ;;B91E|B91D+B91D/B91D\B924;
                      SEC                                       ;;B920|B91F+B91F/B91F\B926;
                      SBC.B !_2                                 ;;B921|B920+B920/B920\B927;
                      STA.B !_5                                 ;;B923|B922+B922/B922\B929;
                      LDA.W !SpriteXPosHigh,X                   ;;B925|B924+B924/B924\B92B;
                      SBC.B #$00                                ;;B928|B927+B927/B927\B92E;
                      STA.B !_B                                 ;;B92A|B929+B929/B929\B930;
                      LDA.B !_2                                 ;;B92C|B92B+B92B/B92B\B932;
                      ASL A                                     ;;B92E|B92D+B92D/B92D\B934;
                      CLC                                       ;;B92F|B92E+B92E/B92E\B935;
                      ADC.B #$10                                ;;B930|B92F+B92F/B92F\B936;
                      STA.B !_7                                 ;;B932|B931+B931/B931\B938;
                      JSL GetMarioClipping                      ;;B934|B933+B933/B933\B93A;
                      JSL CheckForContact                       ;;B938|B937+B937/B937\B93E;
                      RTS                                       ;;B93C|B93B+B93B/B93B\B942; Return 
                                                                ;;                        ;
                                                                ;;                        ;
HorzNetKoopaSpeed:    db $08,$F8                                ;;B93D|B93C+B93C/B93C\B943;
                                                                ;;                        ;
InitHorzNetKoopa:     JSR SubHorizPos                           ;;B93F|B93E+B93E/B93E\B945;
                      LDA.W HorzNetKoopaSpeed,Y                 ;;B942|B941+B941/B941\B948;
                      STA.B !SpriteXSpeed,X                     ;;B945|B944+B944/B944\B94B;
                      BRA +                                     ;;B947|B946+B946/B946\B94D;
                                                                ;;                        ;
InitVertNetKoopa:     INC.B !SpriteTableC2,X                    ;;B949|B948+B948/B948\B94F;
                      INC.B !SpriteXSpeed,X                     ;;B94B|B94A+B94A/B94A\B951;
                      LDA.B #$F8                                ;;B94D|B94C+B94C/B94C\B953;
                      STA.B !SpriteYSpeed,X                     ;;B94F|B94E+B94E/B94E\B955;
                    + LDA.B !SpriteXPosLow,X                    ;;B951|B950+B950/B950\B957;
                      LDY.B #$00                                ;;B953|B952+B952/B952\B959;
                      AND.B #$10                                ;;B955|B954+B954/B954\B95B;
                      BNE +                                     ;;B957|B956+B956/B956\B95D;
                      INY                                       ;;B959|B958+B958/B958\B95F;
                    + TYA                                       ;;B95A|B959+B959/B959\B960;
                      STA.W !SpriteBehindScene,X                ;;B95B|B95A+B95A/B95A\B961;
                      LDA.W !SpriteOBJAttribute,X               ;;B95E|B95D+B95D/B95D\B964;
                      AND.B #$02                                ;;B961|B960+B960/B960\B967;
                      BNE +                                     ;;B963|B962+B962/B962\B969;
                      ASL.B !SpriteXSpeed,X                     ;;B965|B964+B964/B964\B96B;
                      ASL.B !SpriteYSpeed,X                     ;;B967|B966+B966/B966\B96D;
                    + RTS                                       ;;B969|B968+B968/B968\B96F; Return 
                                                                ;;                        ;
                                                                ;;                        ;
DATA_01B969:          db $02,$02,$03,$04,$03,$02,$02,$02        ;;B96A|B969+B969/B969\B970;
                      db $01,$02                                ;;B972|B971+B971/B971\B978;
                                                                ;;                        ;
DATA_01B973:          db $01,$01,$00,$00,$00,$01,$01,$01        ;;B974|B973+B973/B973\B97A;
                      db $01,$01                                ;;B97C|B97B+B97B/B97B\B982;
                                                                ;;                        ;
DATA_01B97D:          db $03,$0C                                ;;B97E|B97D+B97D/B97D\B984;
                                                                ;;                        ;
ClimbingKoopa:        LDA.W !SpriteMisc1540,X                   ;;B980|B97F+B97F/B97F\B986;
                      BEQ CODE_01B9FB                           ;;B983|B982+B982/B982\B989;
                      CMP.B #$30                                ;;B985|B984+B984/B984\B98B;
                      BCC CODE_01B9A0                           ;;B987|B986+B986/B986\B98D;
                      CMP.B #$40                                ;;B989|B988+B988/B988\B98F;
                      BCC CODE_01B9A3                           ;;B98B|B98A+B98A/B98A\B991;
                      BNE CODE_01B9A0                           ;;B98D|B98C+B98C/B98C\B993;
                      LDY.B !SpriteLock                         ;;B98F|B98E+B98E/B98E\B995;
                      BNE CODE_01B9A0                           ;;B991|B990+B990/B990\B997;
                      LDA.W !SpriteBehindScene,X                ;;B993|B992+B992/B992\B999;
                      EOR.B #$01                                ;;B996|B995+B995/B995\B99C;
                      STA.W !SpriteBehindScene,X                ;;B998|B997+B997/B997\B99E;
                      JSR FlipSpriteDir                         ;;B99B|B99A+B99A/B99A\B9A1;
                      JSR CODE_01BA7F                           ;;B99E|B99D+B99D/B99D\B9A4;
CODE_01B9A0:          JMP CODE_01BA37                           ;;B9A1|B9A0+B9A0/B9A0\B9A7;
                                                                ;;                        ;
CODE_01B9A3:          LDY.B !SpriteYPosLow,X                    ;;B9A4|B9A3+B9A3/B9A3\B9AA;
                      PHY                                       ;;B9A6|B9A5+B9A5/B9A5\B9AC;
                      LDY.W !SpriteXPosHigh,X                   ;;B9A7|B9A6+B9A6/B9A6\B9AD;
                      PHY                                       ;;B9AA|B9A9+B9A9/B9A9\B9B0;
                      LDY.B #$00                                ;;B9AB|B9AA+B9AA/B9AA\B9B1;
                      CMP.B #$38                                ;;B9AD|B9AC+B9AC/B9AC\B9B3;
                      BCC +                                     ;;B9AF|B9AE+B9AE/B9AE\B9B5;
                      INY                                       ;;B9B1|B9B0+B9B0/B9B0\B9B7;
                    + LDA.B !SpriteTableC2,X                    ;;B9B2|B9B1+B9B1/B9B1\B9B8;
                      BEQ +                                     ;;B9B4|B9B3+B9B3/B9B3\B9BA;
                      INY                                       ;;B9B6|B9B5+B9B5/B9B5\B9BC;
                      INY                                       ;;B9B7|B9B6+B9B6/B9B6\B9BD;
                      LDA.B !SpriteYPosLow,X                    ;;B9B8|B9B7+B9B7/B9B7\B9BE;
                      SEC                                       ;;B9BA|B9B9+B9B9/B9B9\B9C0;
                      SBC.B #$0C                                ;;B9BB|B9BA+B9BA/B9BA\B9C1;
                      STA.B !SpriteYPosLow,X                    ;;B9BD|B9BC+B9BC/B9BC\B9C3;
                      LDA.W !SpriteXPosHigh,X                   ;;B9BF|B9BE+B9BE/B9BE\B9C5;
                      SBC.B #$00                                ;;B9C2|B9C1+B9C1/B9C1\B9C8;
                      STA.W !SpriteXPosHigh,X                   ;;B9C4|B9C3+B9C3/B9C3\B9CA;
                      LDA.W !SpriteBehindScene,X                ;;B9C7|B9C6+B9C6/B9C6\B9CD;
                      BEQ +                                     ;;B9CA|B9C9+B9C9/B9C9\B9D0;
                      INY                                       ;;B9CC|B9CB+B9CB/B9CB\B9D2;
                    + LDA.W !OWLevelTileSettings+$49            ;;B9CD|B9CC+B9CC/B9CC\B9D3;
                      BPL +                                     ;;B9D0|B9CF+B9CF/B9CF\B9D6;
                      INY                                       ;;B9D2|B9D1+B9D1/B9D1\B9D8;
                      INY                                       ;;B9D3|B9D2+B9D2/B9D2\B9D9;
                      INY                                       ;;B9D4|B9D3+B9D3/B9D3\B9DA;
                      INY                                       ;;B9D5|B9D4+B9D4/B9D4\B9DB;
                      INY                                       ;;B9D6|B9D5+B9D5/B9D5\B9DC;
                    + LDA.W DATA_01B969,Y                       ;;B9D7|B9D6+B9D6/B9D6\B9DD;
                      STA.W !SpriteMisc1602,X                   ;;B9DA|B9D9+B9D9/B9D9\B9E0;
                      LDA.W DATA_01B973,Y                       ;;B9DD|B9DC+B9DC/B9DC\B9E3;
                      STA.B !_0                                 ;;B9E0|B9DF+B9DF/B9DF\B9E6;
                      LDA.W !SpriteOBJAttribute,X               ;;B9E2|B9E1+B9E1/B9E1\B9E8;
                      PHA                                       ;;B9E5|B9E4+B9E4/B9E4\B9EB;
                      AND.B #$FE                                ;;B9E6|B9E5+B9E5/B9E5\B9EC;
                      ORA.B !_0                                 ;;B9E8|B9E7+B9E7/B9E7\B9EE;
                      STA.W !SpriteOBJAttribute,X               ;;B9EA|B9E9+B9E9/B9E9\B9F0;
                      JSR SubSprGfx1                            ;;B9ED|B9EC+B9EC/B9EC\B9F3;
                      PLA                                       ;;B9F0|B9EF+B9EF/B9EF\B9F6;
                      STA.W !SpriteOBJAttribute,X               ;;B9F1|B9F0+B9F0/B9F0\B9F7;
                      PLA                                       ;;B9F4|B9F3+B9F3/B9F3\B9FA;
                      STA.W !SpriteXPosHigh,X                   ;;B9F5|B9F4+B9F4/B9F4\B9FB;
                      PLA                                       ;;B9F8|B9F7+B9F7/B9F7\B9FE;
                      STA.B !SpriteYPosLow,X                    ;;B9F9|B9F8+B9F8/B9F8\B9FF;
                      RTS                                       ;;B9FB|B9FA+B9FA/B9FA\BA01; Return 
                                                                ;;                        ;
CODE_01B9FB:          LDA.B !SpriteLock                         ;;B9FC|B9FB+B9FB/B9FB\BA02; \ Branch if sprites locked 
                      BNE CODE_01BA53                           ;;B9FE|B9FD+B9FD/B9FD\BA04; / 
                      JSR CODE_019140                           ;;BA00|B9FF+B9FF/B9FF\BA06;
                      LDY.B !SpriteTableC2,X                    ;;BA03|BA02+BA02/BA02\BA09;
                      LDA.W !SpriteBlockedDirs,X                ;;BA05|BA04+BA04/BA04\BA0B;
                      AND.W DATA_01B97D,Y                       ;;BA08|BA07+BA07/BA07\BA0E;
                      BEQ CODE_01BA14                           ;;BA0B|BA0A+BA0A/BA0A\BA11;
CODE_01BA0C:          JSR FlipSpriteDir                         ;;BA0D|BA0C+BA0C/BA0C\BA13;
                      JSR CODE_01BA7F                           ;;BA10|BA0F+BA0F/BA0F\BA16;
                      BRA CODE_01BA37                           ;;BA13|BA12+BA12/BA12\BA19;
                                                                ;;                        ;
CODE_01BA14:          LDA.W !SprMap16TouchVertLow               ;;BA15|BA14+BA14/BA14\BA1B;
                      LDY.B !SpriteYSpeed,X                     ;;BA18|BA17+BA17/BA17\BA1E;
                      BEQ CODE_01BA27                           ;;BA1A|BA19+BA19/BA19\BA20;
                      BPL CODE_01BA1F                           ;;BA1C|BA1B+BA1B/BA1B\BA22;
                      BMI CODE_01BA2A                           ;;BA1E|BA1D+BA1D/BA1D\BA24;
CODE_01BA1F:          CMP.B #$07                                ;;BA20|BA1F+BA1F/BA1F\BA26;
                      BCC CODE_01BA0C                           ;;BA22|BA21+BA21/BA21\BA28;
                      CMP.B #$1D                                ;;BA24|BA23+BA23/BA23\BA2A;
                      BCS CODE_01BA0C                           ;;BA26|BA25+BA25/BA25\BA2C;
CODE_01BA27:          LDA.W !SprMap16TouchHorizLow              ;;BA28|BA27+BA27/BA27\BA2E;
CODE_01BA2A:          CMP.B #$07                                ;;BA2B|BA2A+BA2A/BA2A\BA31;
                      BCC CODE_01BA32                           ;;BA2D|BA2C+BA2C/BA2C\BA33;
                      CMP.B #$1D                                ;;BA2F|BA2E+BA2E/BA2E\BA35;
                      BCC CODE_01BA37                           ;;BA31|BA30+BA30/BA30\BA37;
CODE_01BA32:          LDA.B #$50                                ;;BA33|BA32+BA32/BA32\BA39;
                      STA.W !SpriteMisc1540,X                   ;;BA35|BA34+BA34/BA34\BA3B;
CODE_01BA37:          LDA.B !SpriteLock                         ;;BA38|BA37+BA37/BA37\BA3E; \ Branch if sprites locked 
                      BNE CODE_01BA53                           ;;BA3A|BA39+BA39/BA39\BA40; / 
                      INC.W !SpriteMisc1570,X                   ;;BA3C|BA3B+BA3B/BA3B\BA42;
                      JSR UpdateDirection                       ;;BA3F|BA3E+BA3E/BA3E\BA45;
                      LDA.B !SpriteTableC2,X                    ;;BA42|BA41+BA41/BA41\BA48;
                      BNE CODE_01BA4A                           ;;BA44|BA43+BA43/BA43\BA4A;
                      JSR SubSprXPosNoGrvty                     ;;BA46|BA45+BA45/BA45\BA4C;
                      BRA +                                     ;;BA49|BA48+BA48/BA48\BA4F;
                                                                ;;                        ;
CODE_01BA4A:          JSR SubSprYPosNoGrvty                     ;;BA4B|BA4A+BA4A/BA4A\BA51;
                    + JSR MarioSprInteractRt                    ;;BA4E|BA4D+BA4D/BA4D\BA54;
                      JSR SubOffscreen0Bnk1                     ;;BA51|BA50+BA50/BA50\BA57;
CODE_01BA53:          LDA.W !SpriteMisc157C,X                   ;;BA54|BA53+BA53/BA53\BA5A;
                      PHA                                       ;;BA57|BA56+BA56/BA56\BA5D;
                      LDA.W !SpriteMisc1570,X                   ;;BA58|BA57+BA57/BA57\BA5E;
                      AND.B #$08                                ;;BA5B|BA5A+BA5A/BA5A\BA61;
                      LSR A                                     ;;BA5D|BA5C+BA5C/BA5C\BA63;
                      LSR A                                     ;;BA5E|BA5D+BA5D/BA5D\BA64;
                      LSR A                                     ;;BA5F|BA5E+BA5E/BA5E\BA65;
                      STA.W !SpriteMisc157C,X                   ;;BA60|BA5F+BA5F/BA5F\BA66;
                      LDA.B !SpriteProperties                   ;;BA63|BA62+BA62/BA62\BA69;
                      PHA                                       ;;BA65|BA64+BA64/BA64\BA6B;
                      LDA.W !SpriteBehindScene,X                ;;BA66|BA65+BA65/BA65\BA6C;
                      STA.W !SpriteMisc1602,X                   ;;BA69|BA68+BA68/BA68\BA6F;
                      LDA.W !SpriteBehindScene,X                ;;BA6C|BA6B+BA6B/BA6B\BA72;
                      BEQ +                                     ;;BA6F|BA6E+BA6E/BA6E\BA75;
                      LDA.B #$10                                ;;BA71|BA70+BA70/BA70\BA77;
                      STA.B !SpriteProperties                   ;;BA73|BA72+BA72/BA72\BA79;
                    + JSR SubSprGfx1                            ;;BA75|BA74+BA74/BA74\BA7B;
                      PLA                                       ;;BA78|BA77+BA77/BA77\BA7E;
                      STA.B !SpriteProperties                   ;;BA79|BA78+BA78/BA78\BA7F;
                      PLA                                       ;;BA7B|BA7A+BA7A/BA7A\BA81;
                      STA.W !SpriteMisc157C,X                   ;;BA7C|BA7B+BA7B/BA7B\BA82;
                      RTS                                       ;;BA7F|BA7E+BA7E/BA7E\BA85; Return 
                                                                ;;                        ;
CODE_01BA7F:          LDA.B !SpriteYSpeed,X                     ;;BA80|BA7F+BA7F/BA7F\BA86;
                      EOR.B #$FF                                ;;BA82|BA81+BA81/BA81\BA88;
                      INC A                                     ;;BA84|BA83+BA83/BA83\BA8A;
                      STA.B !SpriteYSpeed,X                     ;;BA85|BA84+BA84/BA84\BA8B;
                      RTS                                       ;;BA87|BA86+BA86/BA86\BA8D; Return 
                                                                ;;                        ;
InitClimbingDoor:     LDA.B !SpriteXPosLow,X                    ;;BA88|BA87+BA87/BA87\BA8E;
                      CLC                                       ;;BA8A|BA89+BA89/BA89\BA90;
                      ADC.B #$08                                ;;BA8B|BA8A+BA8A/BA8A\BA91;
                      STA.B !SpriteXPosLow,X                    ;;BA8D|BA8C+BA8C/BA8C\BA93;
                      LDA.B !SpriteYPosLow,X                    ;;BA8F|BA8E+BA8E/BA8E\BA95;
                      ADC.B #$07                                ;;BA91|BA90+BA90/BA90\BA97;
                      STA.B !SpriteYPosLow,X                    ;;BA93|BA92+BA92/BA92\BA99;
                      RTS                                       ;;BA95|BA94+BA94/BA94\BA9B; Return 
                                                                ;;                        ;
                                                                ;;                        ;
                      db $30,$54                                ;;BA96|BA95+BA95/BA95\BA9C;
                                                                ;;                        ;
DATA_01BA97:          db $00,$01,$02,$04,$06,$09,$0C,$0D        ;;BA98|BA97+BA97/BA97\BA9E;
                      db $14,$0D,$0C,$09,$06,$04,$02,$01        ;;BAA0|BA9F+BA9F/BA9F\BAA6;
DATA_01BAA7:          db $00,$00,$00,$00,$00,$01,$01,$01        ;;BAA8|BAA7+BAA7/BAA7\BAAE;
                      db $02,$01,$01,$01,$00,$00,$00,$00        ;;BAB0|BAAF+BAAF/BAAF\BAB6;
DATA_01BAB7:          db $00,$10,$00,$00,$10,$00,$01,$11        ;;BAB8|BAB7+BAB7/BAB7\BABE;
                      db $01,$05,$15,$05,$05,$15,$05,$00        ;;BAC0|BABF+BABF/BABF\BAC6;
                      db $00,$00,$03,$13,$03                    ;;BAC8|BAC7+BAC7/BAC7\BACE;
                                                                ;;                        ;
Return01BACC:         RTS                                       ;;BACD|BACC+BACC/BACC\BAD3; Return 
                                                                ;;                        ;
ClimbingDoor:         JSR SubOffscreen0Bnk1                     ;;BACE|BACD+BACD/BACD\BAD4;
                      LDA.W !SpriteMisc154C,X                   ;;BAD1|BAD0+BAD0/BAD0\BAD7;
                      CMP.B #$01                                ;;BAD4|BAD3+BAD3/BAD3\BADA;
                      BNE +                                     ;;BAD6|BAD5+BAD5/BAD5\BADC;
                      LDA.B #!SFX_FLYHIT                        ;;BAD8|BAD7+BAD7/BAD7\BADE; \ Play sound effect 
                      STA.W !SPCIO0                             ;;BADA|BAD9+BAD9/BAD9\BAE0; / 
                      LDA.B #$19                                ;;BADD|BADC+BADC/BADC\BAE3;
                      JSL GenTileFromSpr2                       ;;BADF|BADE+BADE/BADE\BAE5;
                      LDA.B #$1F                                ;;BAE3|BAE2+BAE2/BAE2\BAE9;
                      STA.W !SpriteMisc1540,X                   ;;BAE5|BAE4+BAE4/BAE4\BAEB;
                      STA.W !NetDoorTimer                       ;;BAE8|BAE7+BAE7/BAE7\BAEE;
                      LDA.B !PlayerXPosNext                     ;;BAEB|BAEA+BAEA/BAEA\BAF1;
                      SEC                                       ;;BAED|BAEC+BAEC/BAEC\BAF3;
                      SBC.B #$10                                ;;BAEE|BAED+BAED/BAED\BAF4;
                      SEC                                       ;;BAF0|BAEF+BAEF/BAEF\BAF6;
                      SBC.B !SpriteXPosLow,X                    ;;BAF1|BAF0+BAF0/BAF0\BAF7;
                      STA.W !NetDoorPlayerXOffset               ;;BAF3|BAF2+BAF2/BAF2\BAF9;
                    + LDA.W !SpriteMisc1540,X                   ;;BAF6|BAF5+BAF5/BAF5\BAFC;
                      ORA.W !SpriteMisc154C,X                   ;;BAF9|BAF8+BAF8/BAF8\BAFF;
                      BNE +                                     ;;BAFC|BAFB+BAFB/BAFB\BB02;
                      JSL GetSpriteClippingA                    ;;BAFE|BAFD+BAFD/BAFD\BB04;
                      JSR CODE_01BC1D                           ;;BB02|BB01+BB01/BB01\BB08;
                      JSL CheckForContact                       ;;BB05|BB04+BB04/BB04\BB0B;
                      BCC +                                     ;;BB09|BB08+BB08/BB08\BB0F;
                      LDA.W !PunchNetTimer                      ;;BB0B|BB0A+BB0A/BB0A\BB11;
                      CMP.B #$01                                ;;BB0E|BB0D+BB0D/BB0D\BB14;
                      BNE +                                     ;;BB10|BB0F+BB0F/BB0F\BB16;
                      LDA.B #$06                                ;;BB12|BB11+BB11/BB11\BB18;
                      STA.W !SpriteMisc154C,X                   ;;BB14|BB13+BB13/BB13\BB1A;
                    + LDA.W !SpriteMisc1540,X                   ;;BB17|BB16+BB16/BB16\BB1D;
                      BEQ Return01BACC                          ;;BB1A|BB19+BB19/BB19\BB20;
                      CMP.B #$01                                ;;BB1C|BB1B+BB1B/BB1B\BB22;
                      BNE +                                     ;;BB1E|BB1D+BB1D/BB1D\BB24;
                      PHA                                       ;;BB20|BB1F+BB1F/BB1F\BB26;
                      LDA.B #$1A                                ;;BB21|BB20+BB20/BB20\BB27;
                      JSL GenTileFromSpr2                       ;;BB23|BB22+BB22/BB22\BB29;
                      PLA                                       ;;BB27|BB26+BB26/BB26\BB2D;
                    + CMP.B #$10                                ;;BB28|BB27+BB27/BB27\BB2E;
                      BNE +                                     ;;BB2A|BB29+BB29/BB29\BB30;
                      LDA.W !PlayerBehindNet                    ;;BB2C|BB2B+BB2B/BB2B\BB32;
                      EOR.B #$01                                ;;BB2F|BB2E+BB2E/BB2E\BB35;
                      STA.W !PlayerBehindNet                    ;;BB31|BB30+BB30/BB30\BB37;
                    + LDA.B #$30                                ;;BB34|BB33+BB33/BB33\BB3A;
                      STA.W !SpriteOAMIndex,X                   ;;BB36|BB35+BB35/BB35\BB3C;
                      STA.B !_3                                 ;;BB39|BB38+BB38/BB38\BB3F;
                      TAY                                       ;;BB3B|BB3A+BB3A/BB3A\BB41;
                      LDA.B !SpriteXPosLow,X                    ;;BB3C|BB3B+BB3B/BB3B\BB42;
                      SEC                                       ;;BB3E|BB3D+BB3D/BB3D\BB44;
                      SBC.B !Layer1XPos                         ;;BB3F|BB3E+BB3E/BB3E\BB45;
                      STA.B !_0                                 ;;BB41|BB40+BB40/BB40\BB47;
                      LDA.B !SpriteYPosLow,X                    ;;BB43|BB42+BB42/BB42\BB49;
                      SEC                                       ;;BB45|BB44+BB44/BB44\BB4B;
                      SBC.B !Layer1YPos                         ;;BB46|BB45+BB45/BB45\BB4C;
                      STA.B !_1                                 ;;BB48|BB47+BB47/BB47\BB4E;
                      LDA.W !SpriteMisc1540,X                   ;;BB4A|BB49+BB49/BB49\BB50;
                      LSR A                                     ;;BB4D|BB4C+BB4C/BB4C\BB53;
                      STA.B !_2                                 ;;BB4E|BB4D+BB4D/BB4D\BB54;
                      TAX                                       ;;BB50|BB4F+BB4F/BB4F\BB56;
                      %LorW_X(LDA,DATA_01BAA7)                  ;;BB51|BB50+BB50/BB50\BB57;
                      STA.B !_6                                 ;;BB55|BB53+BB53/BB53\BB5A;
                      LDA.B !_0                                 ;;BB57|BB55+BB55/BB55\BB5C;
                      CLC                                       ;;BB59|BB57+BB57/BB57\BB5E;
                      %LorW_X(ADC,DATA_01BA97)                  ;;BB5A|BB58+BB58/BB58\BB5F;
                      STA.W !OAMTileXPos+$100,Y                 ;;BB5E|BB5B+BB5B/BB5B\BB62;
                      STA.W !OAMTileXPos+$104,Y                 ;;BB61|BB5E+BB5E/BB5E\BB65;
                      STA.W !OAMTileXPos+$108,Y                 ;;BB64|BB61+BB61/BB61\BB68;
                      LDA.B !_6                                 ;;BB67|BB64+BB64/BB64\BB6B;
                      CMP.B #$02                                ;;BB69|BB66+BB66/BB66\BB6D;
                      BEQ +                                     ;;BB6B|BB68+BB68/BB68\BB6F;
                      LDA.B !_0                                 ;;BB6D|BB6A+BB6A/BB6A\BB71;
                      CLC                                       ;;BB6F|BB6C+BB6C/BB6C\BB73;
                      ADC.B #$20                                ;;BB70|BB6D+BB6D/BB6D\BB74;
                      SEC                                       ;;BB72|BB6F+BB6F/BB6F\BB76;
                      %LorW_X(SBC,DATA_01BA97)                  ;;BB73|BB70+BB70/BB70\BB77;
                      STA.W !OAMTileXPos+$10C,Y                 ;;BB77|BB73+BB73/BB73\BB7A;
                      STA.W !OAMTileXPos+$110,Y                 ;;BB7A|BB76+BB76/BB76\BB7D;
                      STA.W !OAMTileXPos+$114,Y                 ;;BB7D|BB79+BB79/BB79\BB80;
                      LDA.B !_6                                 ;;BB80|BB7C+BB7C/BB7C\BB83;
                      BNE +                                     ;;BB82|BB7E+BB7E/BB7E\BB85;
                      LDA.B !_0                                 ;;BB84|BB80+BB80/BB80\BB87;
                      CLC                                       ;;BB86|BB82+BB82/BB82\BB89;
                      ADC.B #$10                                ;;BB87|BB83+BB83/BB83\BB8A;
                      STA.W !OAMTileXPos+$118,Y                 ;;BB89|BB85+BB85/BB85\BB8C;
                      STA.W !OAMTileXPos+$11C,Y                 ;;BB8C|BB88+BB88/BB88\BB8F;
                      STA.W !OAMTileXPos+$120,Y                 ;;BB8F|BB8B+BB8B/BB8B\BB92;
                    + LDA.B !_1                                 ;;BB92|BB8E+BB8E/BB8E\BB95;
                      STA.W !OAMTileYPos+$100,Y                 ;;BB94|BB90+BB90/BB90\BB97;
                      STA.W !OAMTileYPos+$10C,Y                 ;;BB97|BB93+BB93/BB93\BB9A;
                      STA.W !OAMTileYPos+$118,Y                 ;;BB9A|BB96+BB96/BB96\BB9D;
                      CLC                                       ;;BB9D|BB99+BB99/BB99\BBA0;
                      ADC.B #$10                                ;;BB9E|BB9A+BB9A/BB9A\BBA1;
                      STA.W !OAMTileYPos+$104,Y                 ;;BBA0|BB9C+BB9C/BB9C\BBA3;
                      STA.W !OAMTileYPos+$110,Y                 ;;BBA3|BB9F+BB9F/BB9F\BBA6;
                      STA.W !OAMTileYPos+$11C,Y                 ;;BBA6|BBA2+BBA2/BBA2\BBA9;
                      CLC                                       ;;BBA9|BBA5+BBA5/BBA5\BBAC;
                      ADC.B #$10                                ;;BBAA|BBA6+BBA6/BBA6\BBAD;
                      STA.W !OAMTileYPos+$108,Y                 ;;BBAC|BBA8+BBA8/BBA8\BBAF;
                      STA.W !OAMTileYPos+$114,Y                 ;;BBAF|BBAB+BBAB/BBAB\BBB2;
                      STA.W !OAMTileYPos+$120,Y                 ;;BBB2|BBAE+BBAE/BBAE\BBB5;
                      LDA.B #$08                                ;;BBB5|BBB1+BBB1/BBB1\BBB8;
                      STA.B !_7                                 ;;BBB7|BBB3+BBB3/BBB3\BBBA;
                      LDA.B !_6                                 ;;BBB9|BBB5+BBB5/BBB5\BBBC;
                      ASL A                                     ;;BBBB|BBB7+BBB7/BBB7\BBBE;
                      ASL A                                     ;;BBBC|BBB8+BBB8/BBB8\BBBF;
                      ASL A                                     ;;BBBD|BBB9+BBB9/BBB9\BBC0;
                      ADC.B !_6                                 ;;BBBE|BBBA+BBBA/BBBA\BBC1;
                      TAX                                       ;;BBC0|BBBC+BBBC/BBBC\BBC3;
                    - %LorW_X(LDA,DATA_01BAB7)                  ;;BBC1|BBBD+BBBD/BBBD\BBC4;
                      STA.W !OAMTileNo+$100,Y                   ;;BBC5|BBC0+BBC0/BBC0\BBC7;
                      INY                                       ;;BBC8|BBC3+BBC3/BBC3\BBCA;
                      INY                                       ;;BBC9|BBC4+BBC4/BBC4\BBCB;
                      INY                                       ;;BBCA|BBC5+BBC5/BBC5\BBCC;
                      INY                                       ;;BBCB|BBC6+BBC6/BBC6\BBCD;
                      INX                                       ;;BBCC|BBC7+BBC7/BBC7\BBCE;
                      DEC.B !_7                                 ;;BBCD|BBC8+BBC8/BBC8\BBCF;
                      BPL -                                     ;;BBCF|BBCA+BBCA/BBCA\BBD1;
                      LDY.B !_3                                 ;;BBD1|BBCC+BBCC/BBCC\BBD3;
                      LDX.B #$08                                ;;BBD3|BBCE+BBCE/BBCE\BBD5;
CODE_01BBD0:          LDA.B !SpriteProperties                   ;;BBD5|BBD0+BBD0/BBD0\BBD7;
                      ORA.B #$09                                ;;BBD7|BBD2+BBD2/BBD2\BBD9;
                      CPX.B #$06                                ;;BBD9|BBD4+BBD4/BBD4\BBDB;
                      BCS +                                     ;;BBDB|BBD6+BBD6/BBD6\BBDD;
                      ORA.B #$40                                ;;BBDD|BBD8+BBD8/BBD8\BBDF;
                    + CPX.B #$00                                ;;BBDF|BBDA+BBDA/BBDA\BBE1;
                      BEQ CODE_01BBE6                           ;;BBE1|BBDC+BBDC/BBDC\BBE3;
                      CPX.B #$03                                ;;BBE3|BBDE+BBDE/BBDE\BBE5;
                      BEQ CODE_01BBE6                           ;;BBE5|BBE0+BBE0/BBE0\BBE7;
                      CPX.B #$06                                ;;BBE7|BBE2+BBE2/BBE2\BBE9;
                      BNE +                                     ;;BBE9|BBE4+BBE4/BBE4\BBEB;
CODE_01BBE6:          ORA.B #$80                                ;;BBEB|BBE6+BBE6/BBE6\BBED;
                    + STA.W !OAMTileAttr+$100,Y                 ;;BBED|BBE8+BBE8/BBE8\BBEF;
                      INY                                       ;;BBF0|BBEB+BBEB/BBEB\BBF2;
                      INY                                       ;;BBF1|BBEC+BBEC/BBEC\BBF3;
                      INY                                       ;;BBF2|BBED+BBED/BBED\BBF4;
                      INY                                       ;;BBF3|BBEE+BBEE/BBEE\BBF5;
                      DEX                                       ;;BBF4|BBEF+BBEF/BBEF\BBF6;
                      BPL CODE_01BBD0                           ;;BBF5|BBF0+BBF0/BBF0\BBF7;
                      LDA.B !_6                                 ;;BBF7|BBF2+BBF2/BBF2\BBF9;
                      PHA                                       ;;BBF9|BBF4+BBF4/BBF4\BBFB;
                      LDX.W !CurSpriteProcess                   ;;BBFA|BBF5+BBF5/BBF5\BBFC; X = Sprite index 
                      LDA.B #$08                                ;;BBFD|BBF8+BBF8/BBF8\BBFF;
                      JSR CODE_01B37E                           ;;BBFF|BBFA+BBFA/BBFA\BC01;
                      LDY.B #$0C                                ;;BC02|BBFD+BBFD/BBFD\BC04;
                      PLA                                       ;;BC04|BBFF+BBFF/BBFF\BC06;
                      BEQ Return01BC1C                          ;;BC05|BC00+BC00/BC00\BC07;
                      CMP.B #$02                                ;;BC07|BC02+BC02/BC02\BC09;
                      BNE +                                     ;;BC09|BC04+BC04/BC04\BC0B;
                      LDA.B #$03                                ;;BC0B|BC06+BC06/BC06\BC0D;
                      STA.W !OAMTileSize+$43,Y                  ;;BC0D|BC08+BC08/BC08\BC0F;
                      STA.W !OAMTileSize+$44,Y                  ;;BC10|BC0B+BC0B/BC0B\BC12;
                      STA.W !OAMTileSize+$45,Y                  ;;BC13|BC0E+BC0E/BC0E\BC15;
                    + LDA.B #$03                                ;;BC16|BC11+BC11/BC11\BC18;
                      STA.W !OAMTileSize+$46,Y                  ;;BC18|BC13+BC13/BC13\BC1A;
                      STA.W !OAMTileSize+$47,Y                  ;;BC1B|BC16+BC16/BC16\BC1D;
                      STA.W !OAMTileSize+$48,Y                  ;;BC1E|BC19+BC19/BC19\BC20;
Return01BC1C:         RTS                                       ;;BC21|BC1C+BC1C/BC1C\BC23; Return 
                                                                ;;                        ;
CODE_01BC1D:          LDA.B !PlayerXPosNext                     ;;BC22|BC1D+BC1D/BC1D\BC24; \ $00 = Mario X Low 
                      STA.B !_0                                 ;;BC24|BC1F+BC1F/BC1F\BC26; / 
                      LDA.B !PlayerYPosNext                     ;;BC26|BC21+BC21/BC21\BC28; \ $01 = Mario Y Low 
                      STA.B !_1                                 ;;BC28|BC23+BC23/BC23\BC2A; / 
                      LDA.B #$10                                ;;BC2A|BC25+BC25/BC25\BC2C; \ $02 = $03 = #$10 
                      STA.B !_2                                 ;;BC2C|BC27+BC27/BC27\BC2E;  | 
                      STA.B !_3                                 ;;BC2E|BC29+BC29/BC29\BC30; / 
                      LDA.B !PlayerXPosNext+1                   ;;BC30|BC2B+BC2B/BC2B\BC32; \ $08 = Mario X High 
                      STA.B !_8                                 ;;BC32|BC2D+BC2D/BC2D\BC34; / 
                      LDA.B !PlayerYPosNext+1                   ;;BC34|BC2F+BC2F/BC2F\BC36; \ $09 = Mario Y High 
                      STA.B !_9                                 ;;BC36|BC31+BC31/BC31\BC38; / 
                      RTS                                       ;;BC38|BC33+BC33/BC33\BC3A; Return 
                                                                ;;                        ;
                                                                ;;                        ;
MagiKoopasMagicPals:  db $05,$07,$09,$0B                        ;;BC39|BC34+BC34/BC34\BC3B;
                                                                ;;                        ;
MagikoopasMagic:      LDA.B !SpriteLock                         ;;BC3D|BC38+BC38/BC38\BC3F;
                      BEQ +                                     ;;BC3F|BC3A+BC3A/BC3A\BC41;
                      JMP CODE_01BCBD                           ;;BC41|BC3C+BC3C/BC3C\BC43;
                                                                ;;                        ;
                    + JSR CODE_01B14E                           ;;BC44|BC3F+BC3F/BC3F\BC46;
                      JSR SubSprYPosNoGrvty                     ;;BC47|BC42+BC42/BC42\BC49;
                      JSR SubSprXPosNoGrvty                     ;;BC4A|BC45+BC45/BC45\BC4C;
                      LDA.B !SpriteYSpeed,X                     ;;BC4D|BC48+BC48/BC48\BC4F;
                      PHA                                       ;;BC4F|BC4A+BC4A/BC4A\BC51;
                      LDA.B #$FF                                ;;BC50|BC4B+BC4B/BC4B\BC52;
                      STA.B !SpriteYSpeed,X                     ;;BC52|BC4D+BC4D/BC4D\BC54;
                      JSR CODE_019140                           ;;BC54|BC4F+BC4F/BC4F\BC56;
                      PLA                                       ;;BC57|BC52+BC52/BC52\BC59;
                      STA.B !SpriteYSpeed,X                     ;;BC58|BC53+BC53/BC53\BC5A;
                      JSR IsTouchingCeiling                     ;;BC5A|BC55+BC55/BC55\BC5C;
                      BEQ CODE_01BCBD                           ;;BC5D|BC58+BC58/BC58\BC5F;
                      LDA.W !SpriteOffscreenX,X                 ;;BC5F|BC5A+BC5A/BC5A\BC61;
                      BNE CODE_01BCBD                           ;;BC62|BC5D+BC5D/BC5D\BC64;
                      LDA.B #!SFX_BONK                          ;;BC64|BC5F+BC5F/BC5F\BC66; \ Play sound effect 
                      STA.W !SPCIO0                             ;;BC66|BC61+BC61/BC61\BC68; / 
                      STZ.W !SpriteStatus,X                     ;;BC69|BC64+BC64/BC64\BC6B;
                      LDA.W !SprMap16TouchVertLow               ;;BC6C|BC67+BC67/BC67\BC6E;
                      SEC                                       ;;BC6F|BC6A+BC6A/BC6A\BC71;
                      SBC.B #$11                                ;;BC70|BC6B+BC6B/BC6B\BC72;
                      CMP.B #$1D                                ;;BC72|BC6D+BC6D/BC6D\BC74;
                      BCS CODE_01BCB9                           ;;BC74|BC6F+BC6F/BC6F\BC76;
                      JSL GetRand                               ;;BC76|BC71+BC71/BC71\BC78;
                      ADC.W !RandomNumber+1                     ;;BC7A|BC75+BC75/BC75\BC7C;
                      ADC.B !PlayerXSpeed                       ;;BC7D|BC78+BC78/BC78\BC7F;
                      ADC.B !TrueFrame                          ;;BC7F|BC7A+BC7A/BC7A\BC81;
                      LDY.B #$78                                ;;BC81|BC7C+BC7C/BC7C\BC83;
                      CMP.B #$35                                ;;BC83|BC7E+BC7E/BC7E\BC85;
                      BEQ +                                     ;;BC85|BC80+BC80/BC80\BC87;
                      LDY.B #$21                                ;;BC87|BC82+BC82/BC82\BC89;
                      CMP.B #$08                                ;;BC89|BC84+BC84/BC84\BC8B;
                      BCC +                                     ;;BC8B|BC86+BC86/BC86\BC8D;
                      LDY.B #$27                                ;;BC8D|BC88+BC88/BC88\BC8F;
                      CMP.B #$F7                                ;;BC8F|BC8A+BC8A/BC8A\BC91;
                      BCS +                                     ;;BC91|BC8C+BC8C/BC8C\BC93;
                      LDY.B #$07                                ;;BC93|BC8E+BC8E/BC8E\BC95;
                    + STY.B !SpriteNumber,X                     ;;BC95|BC90+BC90/BC90\BC97;
                      LDA.B #$08                                ;;BC97|BC92+BC92/BC92\BC99; \ Sprite status = Normal 
                      STA.W !SpriteStatus,X                     ;;BC99|BC94+BC94/BC94\BC9B; / 
                      JSL InitSpriteTables                      ;;BC9C|BC97+BC97/BC97\BC9E;
                      LDA.B !TouchBlockXPos+1                   ;;BCA0|BC9B+BC9B/BC9B\BCA2; \ Sprite X position = block X position 
                      STA.W !SpriteYPosHigh,X                   ;;BCA2|BC9D+BC9D/BC9D\BCA4;  | 
                      LDA.B !TouchBlockXPos                     ;;BCA5|BCA0+BCA0/BCA0\BCA7;  | 
                      AND.B #$F0                                ;;BCA7|BCA2+BCA2/BCA2\BCA9;  | 
                      STA.B !SpriteXPosLow,X                    ;;BCA9|BCA4+BCA4/BCA4\BCAB;  | 
                      LDA.B !TouchBlockYPos+1                   ;;BCAB|BCA6+BCA6/BCA6\BCAD; / 
                      STA.W !SpriteXPosHigh,X                   ;;BCAD|BCA8+BCA8/BCA8\BCAF; \ Sprite Y position = block Y position 
                      LDA.B !TouchBlockYPos                     ;;BCB0|BCAB+BCAB/BCAB\BCB2;  | 
                      AND.B #$F0                                ;;BCB2|BCAD+BCAD/BCAD\BCB4;  | 
                      STA.B !SpriteYPosLow,X                    ;;BCB4|BCAF+BCAF/BCAF\BCB6; / 
                      LDA.B #$02                                ;;BCB6|BCB1+BCB1/BCB1\BCB8; \ Block to generate = #$02 
                      STA.B !Map16TileGenerate                  ;;BCB8|BCB3+BCB3/BCB3\BCBA; / 
                      JSL GenerateTile                          ;;BCBA|BCB5+BCB5/BCB5\BCBC;
CODE_01BCB9:          JSR CODE_01BD98                           ;;BCBE|BCB9+BCB9/BCB9\BCC0;
                      RTS                                       ;;BCC1|BCBC+BCBC/BCBC\BCC3; Return 
                                                                ;;                        ;
CODE_01BCBD:          JSR SubSprSpr_MarioSpr                    ;;BCC2|BCBD+BCBD/BCBD\BCC4;
                      LDA.B !TrueFrame                          ;;BCC5|BCC0+BCC0/BCC0\BCC7;
                      LSR A                                     ;;BCC7|BCC2+BCC2/BCC2\BCC9;
                      LSR A                                     ;;BCC8|BCC3+BCC3/BCC3\BCCA;
                      AND.B #$03                                ;;BCC9|BCC4+BCC4/BCC4\BCCB;
                      TAY                                       ;;BCCB|BCC6+BCC6/BCC6\BCCD;
                      LDA.W MagiKoopasMagicPals,Y               ;;BCCC|BCC7+BCC7/BCC7\BCCE;
                      STA.W !SpriteOBJAttribute,X               ;;BCCF|BCCA+BCCA/BCCA\BCD1;
                      JSR MagiKoopasMagicGfx                    ;;BCD2|BCCD+BCCD/BCCD\BCD4;
                      JSR SubOffscreen0Bnk1                     ;;BCD5|BCD0+BCD0/BCD0\BCD7;
                      LDA.B !SpriteYPosLow,X                    ;;BCD8|BCD3+BCD3/BCD3\BCDA;
                      SEC                                       ;;BCDA|BCD5+BCD5/BCD5\BCDC;
                      SBC.B !Layer1YPos                         ;;BCDB|BCD6+BCD6/BCD6\BCDD;
                      CMP.B #$E0                                ;;BCDD|BCD8+BCD8/BCD8\BCDF;
                      BCC +                                     ;;BCDF|BCDA+BCDA/BCDA\BCE1;
                      STZ.W !SpriteStatus,X                     ;;BCE1|BCDC+BCDC/BCDC\BCE3;
                    + RTS                                       ;;BCE4|BCDF+BCDF/BCDF\BCE6; Return 
                                                                ;;                        ;
                                                                ;;                        ;
MagiKoopasMagicDisp:  db $00,$01,$02,$05,$08,$0B,$0E,$0F        ;;BCE5|BCE0+BCE0/BCE0\BCE7;
                      db $10,$0F,$0E,$0B,$08,$05,$02,$01        ;;BCED|BCE8+BCE8/BCE8\BCEF;
                                                                ;;                        ;
MagiKoopasMagicGfx:   JSR GetDrawInfoBnk1                       ;;BCF5|BCF0+BCF0/BCF0\BCF7;
                      LDA.B !EffFrame                           ;;BCF8|BCF3+BCF3/BCF3\BCFA;
                      LSR A                                     ;;BCFA|BCF5+BCF5/BCF5\BCFC;
                      AND.B #$0F                                ;;BCFB|BCF6+BCF6/BCF6\BCFD;
                      STA.B !_3                                 ;;BCFD|BCF8+BCF8/BCF8\BCFF;
                      CLC                                       ;;BCFF|BCFA+BCFA/BCFA\BD01;
                      ADC.B #$0C                                ;;BD00|BCFB+BCFB/BCFB\BD02;
                      AND.B #$0F                                ;;BD02|BCFD+BCFD/BCFD\BD04;
                      STA.B !_2                                 ;;BD04|BCFF+BCFF/BCFF\BD06;
                      LDA.B !_1                                 ;;BD06|BD01+BD01/BD01\BD08;
                      SEC                                       ;;BD08|BD03+BD03/BD03\BD0A;
                      SBC.B #$04                                ;;BD09|BD04+BD04/BD04\BD0B;
                      STA.B !_1                                 ;;BD0B|BD06+BD06/BD06\BD0D;
                      LDA.B !_0                                 ;;BD0D|BD08+BD08/BD08\BD0F;
                      SEC                                       ;;BD0F|BD0A+BD0A/BD0A\BD11;
                      SBC.B #$04                                ;;BD10|BD0B+BD0B/BD0B\BD12;
                      STA.B !_0                                 ;;BD12|BD0D+BD0D/BD0D\BD14;
                      LDX.B !_2                                 ;;BD14|BD0F+BD0F/BD0F\BD16;
                      LDA.B !_1                                 ;;BD16|BD11+BD11/BD11\BD18;
                      CLC                                       ;;BD18|BD13+BD13/BD13\BD1A;
                      %LorW_X(ADC,MagiKoopasMagicDisp)          ;;BD19|BD14+BD14/BD14\BD1B;
                      STA.W !OAMTileYPos+$100,Y                 ;;BD1D|BD17+BD17/BD17\BD1E;
                      LDX.B !_3                                 ;;BD20|BD1A+BD1A/BD1A\BD21;
                      LDA.B !_0                                 ;;BD22|BD1C+BD1C/BD1C\BD23;
                      CLC                                       ;;BD24|BD1E+BD1E/BD1E\BD25;
                      %LorW_X(ADC,MagiKoopasMagicDisp)          ;;BD25|BD1F+BD1F/BD1F\BD26;
                      STA.W !OAMTileXPos+$100,Y                 ;;BD29|BD22+BD22/BD22\BD29;
                      LDA.B !_2                                 ;;BD2C|BD25+BD25/BD25\BD2C;
                      CLC                                       ;;BD2E|BD27+BD27/BD27\BD2E;
                      ADC.B #$05                                ;;BD2F|BD28+BD28/BD28\BD2F;
                      AND.B #$0F                                ;;BD31|BD2A+BD2A/BD2A\BD31;
                      STA.B !_2                                 ;;BD33|BD2C+BD2C/BD2C\BD33;
                      TAX                                       ;;BD35|BD2E+BD2E/BD2E\BD35;
                      LDA.B !_1                                 ;;BD36|BD2F+BD2F/BD2F\BD36;
                      CLC                                       ;;BD38|BD31+BD31/BD31\BD38;
                      %LorW_X(ADC,MagiKoopasMagicDisp)          ;;BD39|BD32+BD32/BD32\BD39;
                      STA.W !OAMTileYPos+$104,Y                 ;;BD3D|BD35+BD35/BD35\BD3C;
                      LDA.B !_3                                 ;;BD40|BD38+BD38/BD38\BD3F;
                      CLC                                       ;;BD42|BD3A+BD3A/BD3A\BD41;
                      ADC.B #$05                                ;;BD43|BD3B+BD3B/BD3B\BD42;
                      AND.B #$0F                                ;;BD45|BD3D+BD3D/BD3D\BD44;
                      STA.B !_3                                 ;;BD47|BD3F+BD3F/BD3F\BD46;
                      TAX                                       ;;BD49|BD41+BD41/BD41\BD48;
                      LDA.B !_0                                 ;;BD4A|BD42+BD42/BD42\BD49;
                      CLC                                       ;;BD4C|BD44+BD44/BD44\BD4B;
                      %LorW_X(ADC,MagiKoopasMagicDisp)          ;;BD4D|BD45+BD45/BD45\BD4C;
                      STA.W !OAMTileXPos+$104,Y                 ;;BD51|BD48+BD48/BD48\BD4F;
                      LDA.B !_2                                 ;;BD54|BD4B+BD4B/BD4B\BD52;
                      CLC                                       ;;BD56|BD4D+BD4D/BD4D\BD54;
                      ADC.B #$05                                ;;BD57|BD4E+BD4E/BD4E\BD55;
                      AND.B #$0F                                ;;BD59|BD50+BD50/BD50\BD57;
                      STA.B !_2                                 ;;BD5B|BD52+BD52/BD52\BD59;
                      TAX                                       ;;BD5D|BD54+BD54/BD54\BD5B;
                      LDA.B !_1                                 ;;BD5E|BD55+BD55/BD55\BD5C;
                      CLC                                       ;;BD60|BD57+BD57/BD57\BD5E;
                      %LorW_X(ADC,MagiKoopasMagicDisp)          ;;BD61|BD58+BD58/BD58\BD5F;
                      STA.W !OAMTileYPos+$108,Y                 ;;BD65|BD5B+BD5B/BD5B\BD62;
                      LDA.B !_3                                 ;;BD68|BD5E+BD5E/BD5E\BD65;
                      CLC                                       ;;BD6A|BD60+BD60/BD60\BD67;
                      ADC.B #$05                                ;;BD6B|BD61+BD61/BD61\BD68;
                      AND.B #$0F                                ;;BD6D|BD63+BD63/BD63\BD6A;
                      STA.B !_3                                 ;;BD6F|BD65+BD65/BD65\BD6C;
                      TAX                                       ;;BD71|BD67+BD67/BD67\BD6E;
                      LDA.B !_0                                 ;;BD72|BD68+BD68/BD68\BD6F;
                      CLC                                       ;;BD74|BD6A+BD6A/BD6A\BD71;
                      %LorW_X(ADC,MagiKoopasMagicDisp)          ;;BD75|BD6B+BD6B/BD6B\BD72;
                      STA.W !OAMTileXPos+$108,Y                 ;;BD79|BD6E+BD6E/BD6E\BD75;
                      LDX.W !CurSpriteProcess                   ;;BD7C|BD71+BD71/BD71\BD78; X = Sprite index 
                      LDA.W !SpriteOBJAttribute,X               ;;BD7F|BD74+BD74/BD74\BD7B;
                      ORA.B !SpriteProperties                   ;;BD82|BD77+BD77/BD77\BD7E;
                      STA.W !OAMTileAttr+$100,Y                 ;;BD84|BD79+BD79/BD79\BD80;
                      STA.W !OAMTileAttr+$104,Y                 ;;BD87|BD7C+BD7C/BD7C\BD83;
                      STA.W !OAMTileAttr+$108,Y                 ;;BD8A|BD7F+BD7F/BD7F\BD86;
                      LDA.B #$88                                ;;BD8D|BD82+BD82/BD82\BD89;
                      STA.W !OAMTileNo+$100,Y                   ;;BD8F|BD84+BD84/BD84\BD8B;
                      LDA.B #$89                                ;;BD92|BD87+BD87/BD87\BD8E;
                      STA.W !OAMTileNo+$104,Y                   ;;BD94|BD89+BD89/BD89\BD90;
                      LDA.B #$98                                ;;BD97|BD8C+BD8C/BD8C\BD93;
                      STA.W !OAMTileNo+$108,Y                   ;;BD99|BD8E+BD8E/BD8E\BD95;
                      LDY.B #$00                                ;;BD9C|BD91+BD91/BD91\BD98; \ 3 8x8 tiles 
                      LDA.B #$02                                ;;BD9E|BD93+BD93/BD93\BD9A;  | 
                      JMP FinishOAMWriteRt                      ;;BDA0|BD95+BD95/BD95\BD9C;
                                                                ;;                        ;
CODE_01BD98:          LDY.B #$03                                ;;BDA3|BD98+BD98/BD98\BD9F;
CODE_01BD9A:          LDA.W !SmokeSpriteNumber,Y                ;;BDA5|BD9A+BD9A/BD9A\BDA1;
                      BEQ CODE_01BDA3                           ;;BDA8|BD9D+BD9D/BD9D\BDA4;
                      DEY                                       ;;BDAA|BD9F+BD9F/BD9F\BDA6;
                      BPL CODE_01BD9A                           ;;BDAB|BDA0+BDA0/BDA0\BDA7;
                      RTS                                       ;;BDAD|BDA2+BDA2/BDA2\BDA9; Return 
                                                                ;;                        ;
CODE_01BDA3:          LDA.B #$01                                ;;BDAE|BDA3+BDA3/BDA3\BDAA;
                      STA.W !SmokeSpriteNumber,Y                ;;BDB0|BDA5+BDA5/BDA5\BDAC;
                      LDA.B !SpriteXPosLow,X                    ;;BDB3|BDA8+BDA8/BDA8\BDAF;
                      STA.W !SmokeSpriteXPos,Y                  ;;BDB5|BDAA+BDAA/BDAA\BDB1;
                      LDA.B !SpriteYPosLow,X                    ;;BDB8|BDAD+BDAD/BDAD\BDB4;
                      STA.W !SmokeSpriteYPos,Y                  ;;BDBA|BDAF+BDAF/BDAF\BDB6;
                      LDA.B #$1B                                ;;BDBD|BDB2+BDB2/BDB2\BDB9;
                      STA.W !SmokeSpriteTimer,Y                 ;;BDBF|BDB4+BDB4/BDB4\BDBB;
                      RTS                                       ;;BDC2|BDB7+BDB7/BDB7\BDBE; Return 
                                                                ;;                        ;
InitMagikoopa:        LDY.B #$09                                ;;BDC3|BDB8+BDB8/BDB8\BDBF;
CODE_01BDBA:          CPY.W !CurSpriteProcess                   ;;BDC5|BDBA+BDBA/BDBA\BDC1;
                      BEQ +                                     ;;BDC8|BDBD+BDBD/BDBD\BDC4;
                      LDA.W !SpriteStatus,Y                     ;;BDCA|BDBF+BDBF/BDBF\BDC6;
                      BEQ +                                     ;;BDCD|BDC2+BDC2/BDC2\BDC9;
                      LDA.W !SpriteNumber,Y                     ;;BDCF|BDC4+BDC4/BDC4\BDCB;
                      CMP.B #$1F                                ;;BDD2|BDC7+BDC7/BDC7\BDCE;
                      BNE +                                     ;;BDD4|BDC9+BDC9/BDC9\BDD0;
                      STZ.W !SpriteStatus,X                     ;;BDD6|BDCB+BDCB/BDCB\BDD2;
                      RTS                                       ;;BDD9|BDCE+BDCE/BDCE\BDD5; Return 
                                                                ;;                        ;
                    + DEY                                       ;;BDDA|BDCF+BDCF/BDCF\BDD6;
                      BPL CODE_01BDBA                           ;;BDDB|BDD0+BDD0/BDD0\BDD7;
                      STZ.W !SpriteWillAppear                   ;;BDDD|BDD2+BDD2/BDD2\BDD9;
                      RTS                                       ;;BDE0|BDD5+BDD5/BDD5\BDDC; Return 
                                                                ;;                        ;
Magikoopa:            LDA.B #$01                                ;;BDE1|BDD6+BDD6/BDD6\BDDD;
                      STA.W !SpriteOnYoshiTongue,X              ;;BDE3|BDD8+BDD8/BDD8\BDDF;
                      LDA.W !SpriteOffscreenX,X                 ;;BDE6|BDDB+BDDB/BDDB\BDE2;
                      BEQ +                                     ;;BDE9|BDDE+BDDE/BDDE\BDE5;
                      STZ.B !SpriteTableC2,X                    ;;BDEB|BDE0+BDE0/BDE0\BDE7;
                    + LDA.B !SpriteTableC2,X                    ;;BDED|BDE2+BDE2/BDE2\BDE9;
                      AND.B #$03                                ;;BDEF|BDE4+BDE4/BDE4\BDEB;
                      JSL ExecutePtr                            ;;BDF1|BDE6+BDE6/BDE6\BDED;
                                                                ;;                        ;
                      dw CODE_01BDF2                            ;;BDF5|BDEA+BDEA/BDEA\BDF1;
                      dw CODE_01BE5F                            ;;BDF7|BDEC+BDEC/BDEC\BDF3;
                      dw CODE_01BE6E                            ;;BDF9|BDEE+BDEE/BDEE\BDF5;
                      dw CODE_01BF16                            ;;BDFB|BDF0+BDF0/BDF0\BDF7;
                                                                ;;                        ;
CODE_01BDF2:          LDA.W !SpriteWillAppear                   ;;BDFD|BDF2+BDF2/BDF2\BDF9;
                      BEQ +                                     ;;BE00|BDF5+BDF5/BDF5\BDFC;
                      STZ.W !SpriteStatus,X                     ;;BE02|BDF7+BDF7/BDF7\BDFE;
                      RTS                                       ;;BE05|BDFA+BDFA/BDFA\BE01; Return 
                                                                ;;                        ;
                    + LDA.B !SpriteLock                         ;;BE06|BDFB+BDFB/BDFB\BE02; \ Branch if sprites locked 
                      BNE +                                     ;;BE08|BDFD+BDFD/BDFD\BE04; / 
                      LDY.B #$24                                ;;BE0A|BDFF+BDFF/BDFF\BE06;
                      STY.B !ColorSettings                      ;;BE0C|BE01+BE01/BE01\BE08;
                      LDA.W !SpriteMisc1540,X                   ;;BE0E|BE03+BE03/BE03\BE0A;
                      BNE +                                     ;;BE11|BE06+BE06/BE06\BE0D;
                      JSL GetRand                               ;;BE13|BE08+BE08/BE08\BE0F;
                      CMP.B #$D1                                ;;BE17|BE0C+BE0C/BE0C\BE13;
                      BCS +                                     ;;BE19|BE0E+BE0E/BE0E\BE15;
                      CLC                                       ;;BE1B|BE10+BE10/BE10\BE17;
                      ADC.B !Layer1YPos                         ;;BE1C|BE11+BE11/BE11\BE18;
                      AND.B #$F0                                ;;BE1E|BE13+BE13/BE13\BE1A;
                      STA.B !SpriteYPosLow,X                    ;;BE20|BE15+BE15/BE15\BE1C;
                      LDA.B !Layer1YPos+1                       ;;BE22|BE17+BE17/BE17\BE1E;
                      ADC.B #$00                                ;;BE24|BE19+BE19/BE19\BE20;
                      STA.W !SpriteXPosHigh,X                   ;;BE26|BE1B+BE1B/BE1B\BE22;
                      JSL GetRand                               ;;BE29|BE1E+BE1E/BE1E\BE25;
                      CLC                                       ;;BE2D|BE22+BE22/BE22\BE29;
                      ADC.B !Layer1XPos                         ;;BE2E|BE23+BE23/BE23\BE2A;
                      AND.B #$F0                                ;;BE30|BE25+BE25/BE25\BE2C;
                      STA.B !SpriteXPosLow,X                    ;;BE32|BE27+BE27/BE27\BE2E;
                      LDA.B !Layer1XPos+1                       ;;BE34|BE29+BE29/BE29\BE30;
                      ADC.B #$00                                ;;BE36|BE2B+BE2B/BE2B\BE32;
                      STA.W !SpriteYPosHigh,X                   ;;BE38|BE2D+BE2D/BE2D\BE34;
                      JSR SubHorizPos                           ;;BE3B|BE30+BE30/BE30\BE37;
                      LDA.B !_F                                 ;;BE3E|BE33+BE33/BE33\BE3A;
                      CLC                                       ;;BE40|BE35+BE35/BE35\BE3C;
                      ADC.B #$20                                ;;BE41|BE36+BE36/BE36\BE3D;
                      CMP.B #$40                                ;;BE43|BE38+BE38/BE38\BE3F;
                      BCC +                                     ;;BE45|BE3A+BE3A/BE3A\BE41;
                      STZ.B !SpriteYSpeed,X                     ;;BE47|BE3C+BE3C/BE3C\BE43; Sprite Y Speed = 0 
                      LDA.B #$01                                ;;BE49|BE3E+BE3E/BE3E\BE45;
                      STA.B !SpriteXSpeed,X                     ;;BE4B|BE40+BE40/BE40\BE47;
                      JSR CODE_019140                           ;;BE4D|BE42+BE42/BE42\BE49;
                      JSR IsOnGround                            ;;BE50|BE45+BE45/BE45\BE4C;
                      BEQ +                                     ;;BE53|BE48+BE48/BE48\BE4F;
                      LDA.W !SprMap16TouchHorizHigh             ;;BE55|BE4A+BE4A/BE4A\BE51;
                      BNE +                                     ;;BE58|BE4D+BE4D/BE4D\BE54;
                      INC.B !SpriteTableC2,X                    ;;BE5A|BE4F+BE4F/BE4F\BE56;
                      STZ.W !SpriteMisc1570,X                   ;;BE5C|BE51+BE51/BE51\BE58;
                      JSR CODE_01BE82                           ;;BE5F|BE54+BE54/BE54\BE5B;
                      JSR SubHorizPos                           ;;BE62|BE57+BE57/BE57\BE5E;
                      TYA                                       ;;BE65|BE5A+BE5A/BE5A\BE61;
                      STA.W !SpriteMisc157C,X                   ;;BE66|BE5B+BE5B/BE5B\BE62;
                    + RTS                                       ;;BE69|BE5E+BE5E/BE5E\BE65; Return 
                                                                ;;                        ;
CODE_01BE5F:          JSR CODE_01C004                           ;;BE6A|BE5F+BE5F/BE5F\BE66;
                      STZ.W !SpriteMisc1602,X                   ;;BE6D|BE62+BE62/BE62\BE69;
                      JSR SubSprGfx1                            ;;BE70|BE65+BE65/BE65\BE6C;
                      RTS                                       ;;BE73|BE68+BE68/BE68\BE6F; Return 
                                                                ;;                        ;
                                                                ;;                        ;
DATA_01BE69:          db $04,$02,$00                            ;;BE74|BE69+BE69/BE69\BE70;
                                                                ;;                        ;
DATA_01BE6C:          db $10,$F8                                ;;BE77|BE6C+BE6C/BE6C\BE73;
                                                                ;;                        ;
CODE_01BE6E:          STZ.W !SpriteOnYoshiTongue,X              ;;BE79|BE6E+BE6E/BE6E\BE75;
                      JSR SubSprSpr_MarioSpr                    ;;BE7C|BE71+BE71/BE71\BE78;
                      JSR SubHorizPos                           ;;BE7F|BE74+BE74/BE74\BE7B;
                      TYA                                       ;;BE82|BE77+BE77/BE77\BE7E;
                      STA.W !SpriteMisc157C,X                   ;;BE83|BE78+BE78/BE78\BE7F;
                      LDA.W !SpriteMisc1540,X                   ;;BE86|BE7B+BE7B/BE7B\BE82;
                      BNE +                                     ;;BE89|BE7E+BE7E/BE7E\BE85;
                      INC.B !SpriteTableC2,X                    ;;BE8B|BE80+BE80/BE80\BE87;
CODE_01BE82:          LDY.B #$34                                ;;BE8D|BE82+BE82/BE82\BE89;
                      STY.B !ColorSettings                      ;;BE8F|BE84+BE84/BE84\BE8B;
                    + CMP.B #$40                                ;;BE91|BE86+BE86/BE86\BE8D;
                      BNE CODE_01BE96                           ;;BE93|BE88+BE88/BE88\BE8F;
                      PHA                                       ;;BE95|BE8A+BE8A/BE8A\BE91;
                      LDA.B !SpriteLock                         ;;BE96|BE8B+BE8B/BE8B\BE92;
                      ORA.W !SpriteOffscreenX,X                 ;;BE98|BE8D+BE8D/BE8D\BE94;
                      BNE +                                     ;;BE9B|BE90+BE90/BE90\BE97;
                      JSR CODE_01BF1D                           ;;BE9D|BE92+BE92/BE92\BE99;JUMP TO GENERATE MAGIC         
                    + PLA                                       ;;BEA0|BE95+BE95/BE95\BE9C;
CODE_01BE96:          LSR A                                     ;;BEA1|BE96+BE96/BE96\BE9D;
                      LSR A                                     ;;BEA2|BE97+BE97/BE97\BE9E;
                      LSR A                                     ;;BEA3|BE98+BE98/BE98\BE9F;
                      LSR A                                     ;;BEA4|BE99+BE99/BE99\BEA0;
                      LSR A                                     ;;BEA5|BE9A+BE9A/BE9A\BEA1;
                      LSR A                                     ;;BEA6|BE9B+BE9B/BE9B\BEA2;
                      TAY                                       ;;BEA7|BE9C+BE9C/BE9C\BEA3;
                      PHY                                       ;;BEA8|BE9D+BE9D/BE9D\BEA4;
                      LDA.W !SpriteMisc1540,X                   ;;BEA9|BE9E+BE9E/BE9E\BEA5;
                      LSR A                                     ;;BEAC|BEA1+BEA1/BEA1\BEA8;
                      LSR A                                     ;;BEAD|BEA2+BEA2/BEA2\BEA9;
                      LSR A                                     ;;BEAE|BEA3+BEA3/BEA3\BEAA;
                      AND.B #$01                                ;;BEAF|BEA4+BEA4/BEA4\BEAB;
                      ORA.W DATA_01BE69,Y                       ;;BEB1|BEA6+BEA6/BEA6\BEAD;
                      STA.W !SpriteMisc1602,X                   ;;BEB4|BEA9+BEA9/BEA9\BEB0;
                      JSR SubSprGfx1                            ;;BEB7|BEAC+BEAC/BEAC\BEB3;
                      LDA.W !SpriteMisc1602,X                   ;;BEBA|BEAF+BEAF/BEAF\BEB6;
                      SEC                                       ;;BEBD|BEB2+BEB2/BEB2\BEB9;
                      SBC.B #$02                                ;;BEBE|BEB3+BEB3/BEB3\BEBA;
                      CMP.B #$02                                ;;BEC0|BEB5+BEB5/BEB5\BEBC;
                      BCC +                                     ;;BEC2|BEB7+BEB7/BEB7\BEBE;
                      LSR A                                     ;;BEC4|BEB9+BEB9/BEB9\BEC0;
                      BCC +                                     ;;BEC5|BEBA+BEBA/BEBA\BEC1;
                      LDA.W !SpriteOAMIndex,X                   ;;BEC7|BEBC+BEBC/BEBC\BEC3;
                      TAX                                       ;;BECA|BEBF+BEBF/BEBF\BEC6;
                      INC.W !OAMTileYPos+$100,X                 ;;BECB|BEC0+BEC0/BEC0\BEC7;
                      LDX.W !CurSpriteProcess                   ;;BECE|BEC3+BEC3/BEC3\BECA; X = Sprite index 
                    + PLY                                       ;;BED1|BEC6+BEC6/BEC6\BECD;
                      CPY.B #$01                                ;;BED2|BEC7+BEC7/BEC7\BECE;
                      BNE +                                     ;;BED4|BEC9+BEC9/BEC9\BED0;
                      JSR CODE_01B14E                           ;;BED6|BECB+BECB/BECB\BED2;
                    + LDA.W !SpriteMisc1602,X                   ;;BED9|BECE+BECE/BECE\BED5;
                      CMP.B #$04                                ;;BEDC|BED1+BED1/BED1\BED8;
                      BCC Return01BF15                          ;;BEDE|BED3+BED3/BED3\BEDA;
                      LDY.W !SpriteMisc157C,X                   ;;BEE0|BED5+BED5/BED5\BEDC;
                      LDA.B !SpriteXPosLow,X                    ;;BEE3|BED8+BED8/BED8\BEDF;
                      CLC                                       ;;BEE5|BEDA+BEDA/BEDA\BEE1;
                      ADC.W DATA_01BE6C,Y                       ;;BEE6|BEDB+BEDB/BEDB\BEE2;
                      SEC                                       ;;BEE9|BEDE+BEDE/BEDE\BEE5;
                      SBC.B !Layer1XPos                         ;;BEEA|BEDF+BEDF/BEDF\BEE6;
                      LDY.W !SpriteOAMIndex,X                   ;;BEEC|BEE1+BEE1/BEE1\BEE8; Y = Index into sprite OAM 
                      STA.W !OAMTileXPos+$108,Y                 ;;BEEF|BEE4+BEE4/BEE4\BEEB;
                      LDA.B !SpriteYPosLow,X                    ;;BEF2|BEE7+BEE7/BEE7\BEEE;
                      SEC                                       ;;BEF4|BEE9+BEE9/BEE9\BEF0;
                      SBC.B !Layer1YPos                         ;;BEF5|BEEA+BEEA/BEEA\BEF1;
                      CLC                                       ;;BEF7|BEEC+BEEC/BEEC\BEF3;
                      ADC.B #$10                                ;;BEF8|BEED+BEED/BEED\BEF4;
                      STA.W !OAMTileYPos+$108,Y                 ;;BEFA|BEEF+BEEF/BEEF\BEF6;
                      LDA.W !SpriteMisc157C,X                   ;;BEFD|BEF2+BEF2/BEF2\BEF9;
                      LSR A                                     ;;BF00|BEF5+BEF5/BEF5\BEFC;
                      LDA.B #$00                                ;;BF01|BEF6+BEF6/BEF6\BEFD;
                      BCS +                                     ;;BF03|BEF8+BEF8/BEF8\BEFF;
                      ORA.B #$40                                ;;BF05|BEFA+BEFA/BEFA\BF01;
                    + ORA.B !SpriteProperties                   ;;BF07|BEFC+BEFC/BEFC\BF03;
                      ORA.W !SpriteOBJAttribute,X               ;;BF09|BEFE+BEFE/BEFE\BF05;
                      STA.W !OAMTileAttr+$108,Y                 ;;BF0C|BF01+BF01/BF01\BF08;
                      LDA.B #$99                                ;;BF0F|BF04+BF04/BF04\BF0B;
                      STA.W !OAMTileNo+$108,Y                   ;;BF11|BF06+BF06/BF06\BF0D;
                      TYA                                       ;;BF14|BF09+BF09/BF09\BF10;
                      LSR A                                     ;;BF15|BF0A+BF0A/BF0A\BF11;
                      LSR A                                     ;;BF16|BF0B+BF0B/BF0B\BF12;
                      TAY                                       ;;BF17|BF0C+BF0C/BF0C\BF13;
                      LDA.B #$00                                ;;BF18|BF0D+BF0D/BF0D\BF14;
                      ORA.W !SpriteOffscreenX,X                 ;;BF1A|BF0F+BF0F/BF0F\BF16;
                      STA.W !OAMTileSize+$42,Y                  ;;BF1D|BF12+BF12/BF12\BF19;
Return01BF15:         RTS                                       ;;BF20|BF15+BF15/BF15\BF1C; Return 
                                                                ;;                        ;
CODE_01BF16:          JSR CODE_01BFE3                           ;;BF21|BF16+BF16/BF16\BF1D;
                      JSR SubSprGfx1                            ;;BF24|BF19+BF19/BF19\BF20;
                      RTS                                       ;;BF27|BF1C+BF1C/BF1C\BF23; Return 
                                                                ;;                        ;
CODE_01BF1D:          LDY.B #$09                                ;;BF28|BF1D+BF1D/BF1D\BF24;
CODE_01BF1F:          LDA.W !SpriteStatus,Y                     ;;BF2A|BF1F+BF1F/BF1F\BF26;
                      BEQ CODE_01BF28                           ;;BF2D|BF22+BF22/BF22\BF29;
                      DEY                                       ;;BF2F|BF24+BF24/BF24\BF2B;
                      BPL CODE_01BF1F                           ;;BF30|BF25+BF25/BF25\BF2C;
                      RTS                                       ;;BF32|BF27+BF27/BF27\BF2E; Return 
                                                                ;;                        ;
CODE_01BF28:          LDA.B #!SFX_MAGIC                         ;;BF33|BF28+BF28/BF28\BF2F; \ Play sound effect 
                      STA.W !SPCIO0                             ;;BF35|BF2A+BF2A/BF2A\BF31; / 
                      LDA.B #$08                                ;;BF38|BF2D+BF2D/BF2D\BF34; \ Sprite status = Normal 
                      STA.W !SpriteStatus,Y                     ;;BF3A|BF2F+BF2F/BF2F\BF36; / 
                      LDA.B #$20                                ;;BF3D|BF32+BF32/BF32\BF39;GENERATES MAGIC HERE!   !@#            
                      STA.W !SpriteNumber,Y                     ;;BF3F|BF34+BF34/BF34\BF3B;
                      LDA.B !SpriteXPosLow,X                    ;;BF42|BF37+BF37/BF37\BF3E;
                      STA.W !SpriteXPosLow,Y                    ;;BF44|BF39+BF39/BF39\BF40;
                      LDA.W !SpriteYPosHigh,X                   ;;BF47|BF3C+BF3C/BF3C\BF43;
                      STA.W !SpriteYPosHigh,Y                   ;;BF4A|BF3F+BF3F/BF3F\BF46;
                      LDA.B !SpriteYPosLow,X                    ;;BF4D|BF42+BF42/BF42\BF49;
                      CLC                                       ;;BF4F|BF44+BF44/BF44\BF4B;
                      ADC.B #$0A                                ;;BF50|BF45+BF45/BF45\BF4C;
                      STA.W !SpriteYPosLow,Y                    ;;BF52|BF47+BF47/BF47\BF4E;
                      LDA.W !SpriteXPosHigh,X                   ;;BF55|BF4A+BF4A/BF4A\BF51;
                      ADC.B #$00                                ;;BF58|BF4D+BF4D/BF4D\BF54;
                      STA.W !SpriteXPosHigh,Y                   ;;BF5A|BF4F+BF4F/BF4F\BF56;
                      TYX                                       ;;BF5D|BF52+BF52/BF52\BF59;
                      JSL InitSpriteTables                      ;;BF5E|BF53+BF53/BF53\BF5A;
                      LDA.B #$20                                ;;BF62|BF57+BF57/BF57\BF5E;
                      JSR CODE_01BF6A                           ;;BF64|BF59+BF59/BF59\BF60;
                      LDX.W !CurSpriteProcess                   ;;BF67|BF5C+BF5C/BF5C\BF63; X = Sprite index 
                      LDA.B !_0                                 ;;BF6A|BF5F+BF5F/BF5F\BF66;PULLS SPEED FROM RAM HERE?                   
                      STA.W !SpriteYSpeed,Y                     ;;BF6C|BF61+BF61/BF61\BF68;
                      LDA.B !_1                                 ;;BF6F|BF64+BF64/BF64\BF6B;
                      STA.W !SpriteXSpeed,Y                     ;;BF71|BF66+BF66/BF66\BF6D;
                      RTS                                       ;;BF74|BF69+BF69/BF69\BF70; Return 
                                                                ;;                        ;
CODE_01BF6A:          STA.B !_1                                 ;;BF75|BF6A+BF6A/BF6A\BF71;FILLS OUT RAM TO USE FOR SPEED?                   
                      PHX                                       ;;BF77|BF6C+BF6C/BF6C\BF73;
                      PHY                                       ;;BF78|BF6D+BF6D/BF6D\BF74;
                      JSR CODE_01AD42                           ;;BF79|BF6E+BF6E/BF6E\BF75;
                      STY.B !_2                                 ;;BF7C|BF71+BF71/BF71\BF78;
                      LDA.B !_E                                 ;;BF7E|BF73+BF73/BF73\BF7A;
                      BPL +                                     ;;BF80|BF75+BF75/BF75\BF7C;
                      EOR.B #$FF                                ;;BF82|BF77+BF77/BF77\BF7E;
                      CLC                                       ;;BF84|BF79+BF79/BF79\BF80;
                      ADC.B #$01                                ;;BF85|BF7A+BF7A/BF7A\BF81;
                    + STA.B !_C                                 ;;BF87|BF7C+BF7C/BF7C\BF83;
                      JSR SubHorizPos                           ;;BF89|BF7E+BF7E/BF7E\BF85;
                      STY.B !_3                                 ;;BF8C|BF81+BF81/BF81\BF88;
                      LDA.B !_F                                 ;;BF8E|BF83+BF83/BF83\BF8A;
                      BPL +                                     ;;BF90|BF85+BF85/BF85\BF8C;
                      EOR.B #$FF                                ;;BF92|BF87+BF87/BF87\BF8E;
                      CLC                                       ;;BF94|BF89+BF89/BF89\BF90;
                      ADC.B #$01                                ;;BF95|BF8A+BF8A/BF8A\BF91;
                    + STA.B !_D                                 ;;BF97|BF8C+BF8C/BF8C\BF93;
                      LDY.B #$00                                ;;BF99|BF8E+BF8E/BF8E\BF95;
                      LDA.B !_D                                 ;;BF9B|BF90+BF90/BF90\BF97;
                      CMP.B !_C                                 ;;BF9D|BF92+BF92/BF92\BF99;
                      BCS +                                     ;;BF9F|BF94+BF94/BF94\BF9B;
                      INY                                       ;;BFA1|BF96+BF96/BF96\BF9D;
                      PHA                                       ;;BFA2|BF97+BF97/BF97\BF9E;
                      LDA.B !_C                                 ;;BFA3|BF98+BF98/BF98\BF9F;
                      STA.B !_D                                 ;;BFA5|BF9A+BF9A/BF9A\BFA1;
                      PLA                                       ;;BFA7|BF9C+BF9C/BF9C\BFA3;
                      STA.B !_C                                 ;;BFA8|BF9D+BF9D/BF9D\BFA4;
                    + LDA.B #$00                                ;;BFAA|BF9F+BF9F/BF9F\BFA6;
                      STA.B !_B                                 ;;BFAC|BFA1+BFA1/BFA1\BFA8;
                      STA.B !_0                                 ;;BFAE|BFA3+BFA3/BFA3\BFAA;
                      LDX.B !_1                                 ;;BFB0|BFA5+BFA5/BFA5\BFAC;
CODE_01BFA7:          LDA.B !_B                                 ;;BFB2|BFA7+BFA7/BFA7\BFAE;
                      CLC                                       ;;BFB4|BFA9+BFA9/BFA9\BFB0;
                      ADC.B !_C                                 ;;BFB5|BFAA+BFAA/BFAA\BFB1;
                      CMP.B !_D                                 ;;BFB7|BFAC+BFAC/BFAC\BFB3;
                      BCC +                                     ;;BFB9|BFAE+BFAE/BFAE\BFB5;
                      SBC.B !_D                                 ;;BFBB|BFB0+BFB0/BFB0\BFB7;
                      INC.B !_0                                 ;;BFBD|BFB2+BFB2/BFB2\BFB9;
                    + STA.B !_B                                 ;;BFBF|BFB4+BFB4/BFB4\BFBB;
                      DEX                                       ;;BFC1|BFB6+BFB6/BFB6\BFBD;
                      BNE CODE_01BFA7                           ;;BFC2|BFB7+BFB7/BFB7\BFBE;
                      TYA                                       ;;BFC4|BFB9+BFB9/BFB9\BFC0;
                      BEQ +                                     ;;BFC5|BFBA+BFBA/BFBA\BFC1;
                      LDA.B !_0                                 ;;BFC7|BFBC+BFBC/BFBC\BFC3;
                      PHA                                       ;;BFC9|BFBE+BFBE/BFBE\BFC5;
                      LDA.B !_1                                 ;;BFCA|BFBF+BFBF/BFBF\BFC6;
                      STA.B !_0                                 ;;BFCC|BFC1+BFC1/BFC1\BFC8;
                      PLA                                       ;;BFCE|BFC3+BFC3/BFC3\BFCA;
                      STA.B !_1                                 ;;BFCF|BFC4+BFC4/BFC4\BFCB;
                    + LDA.B !_0                                 ;;BFD1|BFC6+BFC6/BFC6\BFCD;
                      LDY.B !_2                                 ;;BFD3|BFC8+BFC8/BFC8\BFCF;
                      BEQ +                                     ;;BFD5|BFCA+BFCA/BFCA\BFD1;
                      EOR.B #$FF                                ;;BFD7|BFCC+BFCC/BFCC\BFD3;
                      CLC                                       ;;BFD9|BFCE+BFCE/BFCE\BFD5;
                      ADC.B #$01                                ;;BFDA|BFCF+BFCF/BFCF\BFD6;
                      STA.B !_0                                 ;;BFDC|BFD1+BFD1/BFD1\BFD8;
                    + LDA.B !_1                                 ;;BFDE|BFD3+BFD3/BFD3\BFDA;
                      LDY.B !_3                                 ;;BFE0|BFD5+BFD5/BFD5\BFDC;
                      BEQ +                                     ;;BFE2|BFD7+BFD7/BFD7\BFDE;
                      EOR.B #$FF                                ;;BFE4|BFD9+BFD9/BFD9\BFE0;
                      CLC                                       ;;BFE6|BFDB+BFDB/BFDB\BFE2;
                      ADC.B #$01                                ;;BFE7|BFDC+BFDC/BFDC\BFE3;
                      STA.B !_1                                 ;;BFE9|BFDE+BFDE/BFDE\BFE5;
                    + PLY                                       ;;BFEB|BFE0+BFE0/BFE0\BFE7;
                      PLX                                       ;;BFEC|BFE1+BFE1/BFE1\BFE8;
                      RTS                                       ;;BFED|BFE2+BFE2/BFE2\BFE9; Return 
                                                                ;;                        ;
CODE_01BFE3:          LDA.W !SpriteMisc1540,X                   ;;BFEE|BFE3+BFE3/BFE3\BFEA;
                      BNE Return01C000                          ;;BFF1|BFE6+BFE6/BFE6\BFED;
                      LDA.B #$02                                ;;BFF3|BFE8+BFE8/BFE8\BFEF;
                      STA.W !SpriteMisc1540,X                   ;;BFF5|BFEA+BFEA/BFEA\BFF1;
                      DEC.W !SpriteMisc1570,X                   ;;BFF8|BFED+BFED/BFED\BFF4;
                      LDA.W !SpriteMisc1570,X                   ;;BFFB|BFF0+BFF0/BFF0\BFF7;
                      CMP.B #$00                                ;;BFFE|BFF3+BFF3/BFF3\BFFA;
                      BNE +                                     ;;C000|BFF5+BFF5/BFF5\BFFC;
                      INC.B !SpriteTableC2,X                    ;;C002|BFF7+BFF7/BFF7\BFFE;
                      LDA.B #$10                                ;;C004|BFF9+BFF9/BFF9\C000;
                      STA.W !SpriteMisc1540,X                   ;;C006|BFFB+BFFB/BFFB\C002;
                      PLA                                       ;;C009|BFFE+BFFE/BFFE\C005;
                      PLA                                       ;;C00A|BFFF+BFFF/BFFF\C006;
Return01C000:         RTS                                       ;;C00B|C000+C000/C000\C007; Return 
                                                                ;;                        ;
                    + JMP CODE_01C028                           ;;C00C|C001+C001/C001\C008;
                                                                ;;                        ;
CODE_01C004:          LDA.W !SpriteMisc1540,X                   ;;C00F|C004+C004/C004\C00B;
                      BNE CODE_01C05E                           ;;C012|C007+C007/C007\C00E;
                      LDA.B #$04                                ;;C014|C009+C009/C009\C010;
                      STA.W !SpriteMisc1540,X                   ;;C016|C00B+C00B/C00B\C012;
                      INC.W !SpriteMisc1570,X                   ;;C019|C00E+C00E/C00E\C015;
                      LDA.W !SpriteMisc1570,X                   ;;C01C|C011+C011/C011\C018;
                      CMP.B #$09                                ;;C01F|C014+C014/C014\C01B;
                      BNE +                                     ;;C021|C016+C016/C016\C01D;
                      LDY.B #$24                                ;;C023|C018+C018/C018\C01F;
                      STY.B !ColorSettings                      ;;C025|C01A+C01A/C01A\C021;
                    + CMP.B #$09                                ;;C027|C01C+C01C/C01C\C023;
                      BNE CODE_01C028                           ;;C029|C01E+C01E/C01E\C025;
                      INC.B !SpriteTableC2,X                    ;;C02B|C020+C020/C020\C027;
                      LDA.B #$70                                ;;C02D|C022+C022/C022\C029;
                      STA.W !SpriteMisc1540,X                   ;;C02F|C024+C024/C024\C02B;
                      RTS                                       ;;C032|C027+C027/C027\C02E; Return 
                                                                ;;                        ;
CODE_01C028:          LDA.W !SpriteMisc1570,X                   ;;C033|C028+C028/C028\C02F;
                      DEC A                                     ;;C036|C02B+C02B/C02B\C032;
                      ASL A                                     ;;C037|C02C+C02C/C02C\C033;
                      ASL A                                     ;;C038|C02D+C02D/C02D\C034;
                      ASL A                                     ;;C039|C02E+C02E/C02E\C035;
                      ASL A                                     ;;C03A|C02F+C02F/C02F\C036;
                      TAX                                       ;;C03B|C030+C030/C030\C037;
                      STZ.B !_0                                 ;;C03C|C031+C031/C031\C038;
                      LDY.W !DynPaletteIndex                    ;;C03E|C033+C033/C033\C03A;
                    - LDA.L MagiKoopaPals,X                     ;;C041|C036+C036/C036\C03D;
                      STA.W !DynPaletteTable+2,Y                ;;C045|C03A+C03A/C03A\C041;
                      INY                                       ;;C048|C03D+C03D/C03D\C044;
                      INX                                       ;;C049|C03E+C03E/C03E\C045;
                      INC.B !_0                                 ;;C04A|C03F+C03F/C03F\C046;
                      LDA.B !_0                                 ;;C04C|C041+C041/C041\C048;
                      CMP.B #$10                                ;;C04E|C043+C043/C043\C04A;
                      BNE -                                     ;;C050|C045+C045/C045\C04C;
                      LDX.W !DynPaletteIndex                    ;;C052|C047+C047/C047\C04E;
                      LDA.B #$10                                ;;C055|C04A+C04A/C04A\C051;
                      STA.W !DynPaletteTable,X                  ;;C057|C04C+C04C/C04C\C053;
                      LDA.B #$F0                                ;;C05A|C04F+C04F/C04F\C056;
                      STA.W !DynPaletteTable+1,X                ;;C05C|C051+C051/C051\C058;
                      STZ.W !DynPaletteTable+$12,X              ;;C05F|C054+C054/C054\C05B;
                      TXA                                       ;;C062|C057+C057/C057\C05E;
                      CLC                                       ;;C063|C058+C058/C058\C05F;
                      ADC.B #$12                                ;;C064|C059+C059/C059\C060;
                      STA.W !DynPaletteIndex                    ;;C066|C05B+C05B/C05B\C062;
CODE_01C05E:          LDX.W !CurSpriteProcess                   ;;C069|C05E+C05E/C05E\C065; X = Sprite index 
                      RTS                                       ;;C06C|C061+C061/C061\C068; Return 
                                                                ;;                        ;
                      JSR InitGoalTape                          ;;C06D|C062+C062/C062\C069; \ Unreachable 
                      LDA.B !SpriteYPosLow,X                    ;;C070|C065+C065/C065\C06C;  | Call Goal Tape INIT, then 
                      SEC                                       ;;C072|C067+C067/C067\C06E;  | Sprite Y position -= #$4C 
                      SBC.B #$4C                                ;;C073|C068+C068/C068\C06F;  | 
                      STA.B !SpriteYPosLow,X                    ;;C075|C06A+C06A/C06A\C071;  | 
                      LDA.W !SpriteXPosHigh,X                   ;;C077|C06C+C06C/C06C\C073;  | 
                      SBC.B #$00                                ;;C07A|C06F+C06F/C06F\C076;  | 
                      STA.W !SpriteXPosHigh,X                   ;;C07C|C071+C071/C071\C078;  | 
                      RTS                                       ;;C07F|C074+C074/C074\C07B; / 
                                                                ;;                        ;
InitGoalTape:         LDA.B !SpriteXPosLow,X                    ;;C080|C075+C075/C075\C07C;
                      SEC                                       ;;C082|C077+C077/C077\C07E;
                      SBC.B #$08                                ;;C083|C078+C078/C078\C07F;
                      STA.B !SpriteTableC2,X                    ;;C085|C07A+C07A/C07A\C081;
                      LDA.W !SpriteYPosHigh,X                   ;;C087|C07C+C07C/C07C\C083;
                      SBC.B #$00                                ;;C08A|C07F+C07F/C07F\C086;
                      STA.W !SpriteMisc151C,X                   ;;C08C|C081+C081/C081\C088;
                      LDA.B !SpriteYPosLow,X                    ;;C08F|C084+C084/C084\C08B;
                      STA.W !SpriteMisc1528,X                   ;;C091|C086+C086/C086\C08D;
                      LDA.W !SpriteXPosHigh,X                   ;;C094|C089+C089/C089\C090; \ Save extra bits into $187B,x 
                      STA.W !SpriteMisc187B,X                   ;;C097|C08C+C08C/C08C\C093; / 
                      AND.B #$01                                ;;C09A|C08F+C08F/C08F\C096; \ Clear extra bits out of position 
                      STA.W !SpriteXPosHigh,X                   ;;C09C|C091+C091/C091\C098; / 
                      STA.W !SpriteMisc1534,X                   ;;C09F|C094+C094/C094\C09B;
                      RTS                                       ;;C0A2|C097+C097/C097\C09E; Return 
                                                                ;;                        ;
GoalTape:             JSR GoalTapeGFX                           ;;C0A3|C098+C098/C098\C09F;
                      LDA.B !SpriteLock                         ;;C0A6|C09B+C09B/C09B\C0A2; \ Branch if sprites locked 
                      BNE Return01C0A4                          ;;C0A8|C09D+C09D/C09D\C0A4; / 
                      LDA.W !SpriteMisc1602,X                   ;;C0AA|C09F+C09F/C09F\C0A6;
                      BEQ +                                     ;;C0AD|C0A2+C0A2/C0A2\C0A9;
Return01C0A4:         RTS                                       ;;C0AF|C0A4+C0A4/C0A4\C0AB; Return 
                                                                ;;                        ;
                                                                ;;                        ;
DATA_01C0A5:          db $10,$F0                                ;;C0B0|C0A5+C0A5/C0A5\C0AC;
                                                                ;;                        ;
                    + LDA.W !SpriteMisc1540,X                   ;;C0B2|C0A7+C0A7/C0A7\C0AE;
                      BNE +                                     ;;C0B5|C0AA+C0AA/C0AA\C0B1;
                      LDA.B #$7C                                ;;C0B7|C0AC+C0AC/C0AC\C0B3;
                      STA.W !SpriteMisc1540,X                   ;;C0B9|C0AE+C0AE/C0AE\C0B5;
                      INC.W !SpriteBlockedDirs,X                ;;C0BC|C0B1+C0B1/C0B1\C0B8;
                    + LDA.W !SpriteBlockedDirs,X                ;;C0BF|C0B4+C0B4/C0B4\C0BB;
                      AND.B #$01                                ;;C0C2|C0B7+C0B7/C0B7\C0BE;
                      TAY                                       ;;C0C4|C0B9+C0B9/C0B9\C0C0;
                      LDA.W DATA_01C0A5,Y                       ;;C0C5|C0BA+C0BA/C0BA\C0C1;
                      STA.B !SpriteYSpeed,X                     ;;C0C8|C0BD+C0BD/C0BD\C0C4;
                      JSR SubSprYPosNoGrvty                     ;;C0CA|C0BF+C0BF/C0BF\C0C6;
                      LDA.B !SpriteTableC2,X                    ;;C0CD|C0C2+C0C2/C0C2\C0C9;
                      STA.B !_0                                 ;;C0CF|C0C4+C0C4/C0C4\C0CB;
                      LDA.W !SpriteMisc151C,X                   ;;C0D1|C0C6+C0C6/C0C6\C0CD;
                      STA.B !_1                                 ;;C0D4|C0C9+C0C9/C0C9\C0D0;
                      REP #$20                                  ;;C0D6|C0CB+C0CB/C0CB\C0D2; Accum (16 bit) 
                      LDA.B !PlayerXPosNext                     ;;C0D8|C0CD+C0CD/C0CD\C0D4;
                      SEC                                       ;;C0DA|C0CF+C0CF/C0CF\C0D6;
                      SBC.B !_0                                 ;;C0DB|C0D0+C0D0/C0D0\C0D7;
                      CMP.W #$0010                              ;;C0DD|C0D2+C0D2/C0D2\C0D9;
                      SEP #$20                                  ;;C0E0|C0D5+C0D5/C0D5\C0DC; Accum (8 bit) 
                      BCS Return01C12C                          ;;C0E2|C0D7+C0D7/C0D7\C0DE;
                      LDA.W !SpriteMisc1528,X                   ;;C0E4|C0D9+C0D9/C0D9\C0E0;
                      CMP.B !PlayerYPosNext                     ;;C0E7|C0DC+C0DC/C0DC\C0E3;
                      LDA.W !SpriteMisc1534,X                   ;;C0E9|C0DE+C0DE/C0DE\C0E5;
                      AND.B #$01                                ;;C0EC|C0E1+C0E1/C0E1\C0E8;
                      SBC.B !PlayerYPosNext+1                   ;;C0EE|C0E3+C0E3/C0E3\C0EA;
                      BCC Return01C12C                          ;;C0F0|C0E5+C0E5/C0E5\C0EC;
                      LDA.W !SpriteMisc187B,X                   ;;C0F2|C0E7+C0E7/C0E7\C0EE; \ $141C = #01 if Goal Tape triggers secret exit 
                      LSR A                                     ;;C0F5|C0EA+C0EA/C0EA\C0F1;  | 
                      LSR A                                     ;;C0F6|C0EB+C0EB/C0EB\C0F2;  | 
                      STA.W !SecretGoalTape                     ;;C0F7|C0EC+C0EC/C0EC\C0F3; / 
                      LDA.B #!BGM_LEVELCLEAR                    ;;C0FA|C0EF+C0EF/C0EF\C0F6;
                      STA.W !SPCIO2                             ;;C0FC|C0F1+C0F1/C0F1\C0F8; / Change music 
                      LDA.B #$FF                                ;;C0FF|C0F4+C0F4/C0F4\C0FB;
                      STA.W !MusicBackup                        ;;C101|C0F6+C0F6/C0F6\C0FD;
                      LDA.B #$FF                                ;;C104|C0F9+C0F9/C0F9\C100;
                      STA.W !EndLevelTimer                      ;;C106|C0FB+C0FB/C0FB\C102;
                      STZ.W !InvinsibilityTimer                 ;;C109|C0FE+C0FE/C0FE\C105; Zero out star timer 
                      INC.W !SpriteMisc1602,X                   ;;C10C|C101+C101/C101\C108;
                      JSR MarioSprInteractRt                    ;;C10F|C104+C104/C104\C10B;
                      BCC CODE_01C125                           ;;C112|C107+C107/C107\C10E;
                      LDA.B #!SFX_KAPOW                         ;;C114|C109+C109/C109\C110; \ Play sound effect 
                      STA.W !SPCIO3                             ;;C116|C10B+C10B/C10B\C112; / 
                      INC.W !SpriteMisc160E,X                   ;;C119|C10E+C10E/C10E\C115;
                      LDA.W !SpriteMisc1528,X                   ;;C11C|C111+C111/C111\C118;
                      SEC                                       ;;C11F|C114+C114/C114\C11B;
                      SBC.B !SpriteYPosLow,X                    ;;C120|C115+C115/C115\C11C;
                      STA.W !SpriteMisc1594,X                   ;;C122|C117+C117/C117\C11E;
                      LDA.B #$80                                ;;C125|C11A+C11A/C11A\C121;
                      STA.W !SpriteMisc1540,X                   ;;C127|C11C+C11C/C11C\C123;
                      JSL CODE_07F252                           ;;C12A|C11F+C11F/C11F\C126;
                      BRA +                                     ;;C12E|C123+C123/C123\C12A;
                                                                ;;                        ;
CODE_01C125:          STZ.W !SpriteTweakerE,X                   ;;C130|C125+C125/C125\C12C;
                    + JSL TriggerGoalTape                       ;;C133|C128+C128/C128\C12F;
Return01C12C:         RTS                                       ;;C137|C12C+C12C/C12C\C133; Return 
                                                                ;;                        ;
GoalTapeGFX:          LDA.W !SpriteMisc160E,X                   ;;C138|C12D+C12D/C12D\C134;
                      BNE +                                     ;;C13B|C130+C130/C130\C137;
                      JSR GetDrawInfoBnk1                       ;;C13D|C132+C132/C132\C139;
                      LDA.B !_0                                 ;;C140|C135+C135/C135\C13C;
                      SEC                                       ;;C142|C137+C137/C137\C13E;
                      SBC.B #$08                                ;;C143|C138+C138/C138\C13F;
                      STA.W !OAMTileXPos+$100,Y                 ;;C145|C13A+C13A/C13A\C141;
                      CLC                                       ;;C148|C13D+C13D/C13D\C144;
                      ADC.B #$08                                ;;C149|C13E+C13E/C13E\C145;
                      STA.W !OAMTileXPos+$104,Y                 ;;C14B|C140+C140/C140\C147;
                      CLC                                       ;;C14E|C143+C143/C143\C14A;
                      ADC.B #$08                                ;;C14F|C144+C144/C144\C14B;
                      STA.W !OAMTileXPos+$108,Y                 ;;C151|C146+C146/C146\C14D;
                      LDA.B !_1                                 ;;C154|C149+C149/C149\C150;
                      CLC                                       ;;C156|C14B+C14B/C14B\C152;
                      ADC.B #$08                                ;;C157|C14C+C14C/C14C\C153;
                      STA.W !OAMTileYPos+$100,Y                 ;;C159|C14E+C14E/C14E\C155;
                      STA.W !OAMTileYPos+$104,Y                 ;;C15C|C151+C151/C151\C158;
                      STA.W !OAMTileYPos+$108,Y                 ;;C15F|C154+C154/C154\C15B;
                      LDA.B #$D4                                ;;C162|C157+C157/C157\C15E;
                      STA.W !OAMTileNo+$100,Y                   ;;C164|C159+C159/C159\C160;
                      INC A                                     ;;C167|C15C+C15C/C15C\C163;
                      STA.W !OAMTileNo+$104,Y                   ;;C168|C15D+C15D/C15D\C164;
                      STA.W !OAMTileNo+$108,Y                   ;;C16B|C160+C160/C160\C167;
                      LDA.B #$32                                ;;C16E|C163+C163/C163\C16A;
                      STA.W !OAMTileAttr+$100,Y                 ;;C170|C165+C165/C165\C16C;
                      STA.W !OAMTileAttr+$104,Y                 ;;C173|C168+C168/C168\C16F;
                      STA.W !OAMTileAttr+$108,Y                 ;;C176|C16B+C16B/C16B\C172;
                      LDY.B #$00                                ;;C179|C16E+C16E/C16E\C175;
                      LDA.B #$02                                ;;C17B|C170+C170/C170\C177;
                      JMP FinishOAMWriteRt                      ;;C17D|C172+C172/C172\C179;
                                                                ;;                        ;
                    + LDA.W !SpriteMisc1540,X                   ;;C180|C175+C175/C175\C17C;
                      BEQ +                                     ;;C183|C178+C178/C178\C17F;
                      JSL CODE_07F1CA                           ;;C185|C17A+C17A/C17A\C181;
                      RTS                                       ;;C189|C17E+C17E/C17E\C185; Return 
                                                                ;;                        ;
                    + STZ.W !SpriteStatus,X                     ;;C18A|C17F+C17F/C17F\C186;
                      RTS                                       ;;C18D|C182+C182/C182\C189; Return 
                                                                ;;                        ;
GrowingVine:          LDA.B !SpriteProperties                   ;;C18E|C183+C183/C183\C18A;
                      PHA                                       ;;C190|C185+C185/C185\C18C;
                      LDA.W !SpriteMisc1540,X                   ;;C191|C186+C186/C186\C18D;
                      CMP.B #$20                                ;;C194|C189+C189/C189\C190;
                      BCC +                                     ;;C196|C18B+C18B/C18B\C192;
                      LDA.B #$10                                ;;C198|C18D+C18D/C18D\C194;
                      STA.B !SpriteProperties                   ;;C19A|C18F+C18F/C18F\C196;
                    + JSR SubSprGfx2Entry1                      ;;C19C|C191+C191/C191\C198;
                      LDY.W !SpriteOAMIndex,X                   ;;C19F|C194+C194/C194\C19B; Y = Index into sprite OAM 
                      LDA.B !EffFrame                           ;;C1A2|C197+C197/C197\C19E;
                      LSR A                                     ;;C1A4|C199+C199/C199\C1A0;
                      LSR A                                     ;;C1A5|C19A+C19A/C19A\C1A1;
                      LSR A                                     ;;C1A6|C19B+C19B/C19B\C1A2;
                      LSR A                                     ;;C1A7|C19C+C19C/C19C\C1A3;
                      LDA.B #$AC                                ;;C1A8|C19D+C19D/C19D\C1A4;
                      BCC +                                     ;;C1AA|C19F+C19F/C19F\C1A6;
                      LDA.B #$AE                                ;;C1AC|C1A1+C1A1/C1A1\C1A8;
                    + STA.W !OAMTileNo+$100,Y                   ;;C1AE|C1A3+C1A3/C1A3\C1AA;
                      PLA                                       ;;C1B1|C1A6+C1A6/C1A6\C1AD;
                      STA.B !SpriteProperties                   ;;C1B2|C1A7+C1A7/C1A7\C1AE;
                      LDA.B !SpriteLock                         ;;C1B4|C1A9+C1A9/C1A9\C1B0; \ Branch if sprites locked 
                      BNE Return01C1ED                          ;;C1B6|C1AB+C1AB/C1AB\C1B2; / 
                      LDA.B #$F0                                ;;C1B8|C1AD+C1AD/C1AD\C1B4;
                      STA.B !SpriteYSpeed,X                     ;;C1BA|C1AF+C1AF/C1AF\C1B6;
                      JSR SubSprYPosNoGrvty                     ;;C1BC|C1B1+C1B1/C1B1\C1B8;
                      LDA.W !SpriteMisc1540,X                   ;;C1BF|C1B4+C1B4/C1B4\C1BB;
                      CMP.B #$20                                ;;C1C2|C1B7+C1B7/C1B7\C1BE;
                      BCS CODE_01C1CB                           ;;C1C4|C1B9+C1B9/C1B9\C1C0;
                      JSR CODE_019140                           ;;C1C6|C1BB+C1BB/C1BB\C1C2;
                      LDA.W !SpriteBlockedDirs,X                ;;C1C9|C1BE+C1BE/C1BE\C1C5;
                      BNE CODE_01C1C8                           ;;C1CC|C1C1+C1C1/C1C1\C1C8;
                      LDA.W !SpriteXPosHigh,X                   ;;C1CE|C1C3+C1C3/C1C3\C1CA;
                      BPL CODE_01C1CB                           ;;C1D1|C1C6+C1C6/C1C6\C1CD;
CODE_01C1C8:          JMP OffScrEraseSprite                     ;;C1D3|C1C8+C1C8/C1C8\C1CF;
                                                                ;;                        ;
CODE_01C1CB:          LDA.B !SpriteYPosLow,X                    ;;C1D6|C1CB+C1CB/C1CB\C1D2;
                      AND.B #$0F                                ;;C1D8|C1CD+C1CD/C1CD\C1D4;
                      CMP.B #$00                                ;;C1DA|C1CF+C1CF/C1CF\C1D6;
                      BNE Return01C1ED                          ;;C1DC|C1D1+C1D1/C1D1\C1D8;
                      LDA.B !SpriteXPosLow,X                    ;;C1DE|C1D3+C1D3/C1D3\C1DA; \ $9A = Sprite X position 
                      STA.B !TouchBlockXPos                     ;;C1E0|C1D5+C1D5/C1D5\C1DC;  | for block creation 
                      LDA.W !SpriteYPosHigh,X                   ;;C1E2|C1D7+C1D7/C1D7\C1DE;  | 
                      STA.B !TouchBlockXPos+1                   ;;C1E5|C1DA+C1DA/C1DA\C1E1; / 
                      LDA.B !SpriteYPosLow,X                    ;;C1E7|C1DC+C1DC/C1DC\C1E3; \ $98 = Sprite Y position 
                      STA.B !TouchBlockYPos                     ;;C1E9|C1DE+C1DE/C1DE\C1E5;  | for block creation 
                      LDA.W !SpriteXPosHigh,X                   ;;C1EB|C1E0+C1E0/C1E0\C1E7;  | 
                      STA.B !TouchBlockYPos+1                   ;;C1EE|C1E3+C1E3/C1E3\C1EA; / 
                      LDA.B #$03                                ;;C1F0|C1E5+C1E5/C1E5\C1EC; \ Block to generate = Vine 
                      STA.B !Map16TileGenerate                  ;;C1F2|C1E7+C1E7/C1E7\C1EE; / 
                      JSL GenerateTile                          ;;C1F4|C1E9+C1E9/C1E9\C1F0; Generate the tile 
Return01C1ED:         RTS                                       ;;C1F8|C1ED+C1ED/C1ED\C1F4; Return 
                                                                ;;                        ;
                                                                ;;                        ;
DATA_01C1EE:          db $FF,$01                                ;;C1F9|C1EE+C1EE/C1EE\C1F5;
                                                                ;;                        ;
DATA_01C1F0:          db $F0,$10                                ;;C1FB|C1F0+C1F0/C1F0\C1F7;
                                                                ;;                        ;
BalloonKeyFlyObjs:    LDA.W !SpriteStatus,X                     ;;C1FD|C1F2+C1F2/C1F2\C1F9;
                      CMP.B #$0C                                ;;C200|C1F5+C1F5/C1F5\C1FC;
                      BEQ CODE_01C255                           ;;C202|C1F7+C1F7/C1F7\C1FE;
                      LDA.B !SpriteLock                         ;;C204|C1F9+C1F9/C1F9\C200; \ Branch if sprites locked 
                      BNE CODE_01C255                           ;;C206|C1FB+C1FB/C1FB\C202; / 
                      LDA.B !SpriteNumber,X                     ;;C208|C1FD+C1FD/C1FD\C204;
                      CMP.B #$7D                                ;;C20A|C1FF+C1FF/C1FF\C206;
                      BNE +                                     ;;C20C|C201+C201/C201\C208;
                      LDA.W !SpriteMisc1540,X                   ;;C20E|C203+C203/C203\C20A;
                      BEQ +                                     ;;C211|C206+C206/C206\C20D;
                      LDA.B !SpriteProperties                   ;;C213|C208+C208/C208\C20F;
                      PHA                                       ;;C215|C20A+C20A/C20A\C211;
                      LDA.B #$10                                ;;C216|C20B+C20B/C20B\C212;
                      STA.B !SpriteProperties                   ;;C218|C20D+C20D/C20D\C214;
                      JSR CODE_01C61A                           ;;C21A|C20F+C20F/C20F\C216;
                      PLA                                       ;;C21D|C212+C212/C212\C219;
                      STA.B !SpriteProperties                   ;;C21E|C213+C213/C213\C21A;
                      LDA.B #$F8                                ;;C220|C215+C215/C215\C21C;
                      STA.B !SpriteYSpeed,X                     ;;C222|C217+C217/C217\C21E;
                      JSR SubSprYPosNoGrvty                     ;;C224|C219+C219/C219\C220;
                      RTS                                       ;;C227|C21C+C21C/C21C\C223; Return 
                                                                ;;                        ;
                    + LDA.B !TrueFrame                          ;;C228|C21D+C21D/C21D\C224;
                      AND.B #$01                                ;;C22A|C21F+C21F/C21F\C226;
                      BNE +                                     ;;C22C|C221+C221/C221\C228;
                      LDA.W !SpriteMisc151C,X                   ;;C22E|C223+C223/C223\C22A;
                      AND.B #$01                                ;;C231|C226+C226/C226\C22D;
                      TAY                                       ;;C233|C228+C228/C228\C22F;
                      LDA.B !SpriteYSpeed,X                     ;;C234|C229+C229/C229\C230;
                      CLC                                       ;;C236|C22B+C22B/C22B\C232;
                      ADC.W DATA_01C1EE,Y                       ;;C237|C22C+C22C/C22C\C233;
                      STA.B !SpriteYSpeed,X                     ;;C23A|C22F+C22F/C22F\C236;
                      CMP.W DATA_01C1F0,Y                       ;;C23C|C231+C231/C231\C238;
                      BNE +                                     ;;C23F|C234+C234/C234\C23B;
                      INC.W !SpriteMisc151C,X                   ;;C241|C236+C236/C236\C23D;
                    + LDA.B #$0C                                ;;C244|C239+C239/C239\C240;
                      STA.B !SpriteXSpeed,X                     ;;C246|C23B+C23B/C23B\C242;
                      JSR SubSprXPosNoGrvty                     ;;C248|C23D+C23D/C23D\C244;
                      LDA.B !SpriteYSpeed,X                     ;;C24B|C240+C240/C240\C247;
                      PHA                                       ;;C24D|C242+C242/C242\C249;
                      CLC                                       ;;C24E|C243+C243/C243\C24A;
                      SEC                                       ;;C24F|C244+C244/C244\C24B;
                      SBC.B #$02                                ;;C250|C245+C245/C245\C24C;
                      STA.B !SpriteYSpeed,X                     ;;C252|C247+C247/C247\C24E;
                      JSR SubSprYPosNoGrvty                     ;;C254|C249+C249/C249\C250;
                      PLA                                       ;;C257|C24C+C24C/C24C\C253;
                      STA.B !SpriteYSpeed,X                     ;;C258|C24D+C24D/C24D\C254;
                      JSR SubOffscreen0Bnk1                     ;;C25A|C24F+C24F/C24F\C256;
                      INC.W !SpriteMisc1570,X                   ;;C25D|C252+C252/C252\C259;
CODE_01C255:          LDA.B !SpriteNumber,X                     ;;C260|C255+C255/C255\C25C;
                      CMP.B #$7D                                ;;C262|C257+C257/C257\C25E;
                      BNE CODE_01C262                           ;;C264|C259+C259/C259\C260;
                      LDA.B #$01                                ;;C266|C25B+C25B/C25B\C262;
                      STA.W !SpriteMisc157C,X                   ;;C268|C25D+C25D/C25D\C264;
                      BRA CODE_01C27F                           ;;C26B|C260+C260/C260\C267;
                                                                ;;                        ;
CODE_01C262:          LDA.B !SpriteTableC2,X                    ;;C26D|C262+C262/C262\C269;
                      CMP.B #$02                                ;;C26F|C264+C264/C264\C26B;
                      BNE CODE_01C27C                           ;;C271|C266+C266/C266\C26D;
                      LDA.B !TrueFrame                          ;;C273|C268+C268/C268\C26F;
                      AND.B #$03                                ;;C275|C26A+C26A/C26A\C271;
                      BNE +                                     ;;C277|C26C+C26C/C26C\C273;
                      JSR CODE_01B14E                           ;;C279|C26E+C26E/C26E\C275;
                    + LDA.B !EffFrame                           ;;C27C|C271+C271/C271\C278;
                      LSR A                                     ;;C27E|C273+C273/C273\C27A;
                      AND.B #$0E                                ;;C27F|C274+C274/C274\C27B;
                      EOR.W !SpriteOBJAttribute,X               ;;C281|C276+C276/C276\C27D;
                      STA.W !SpriteOBJAttribute,X               ;;C284|C279+C279/C279\C280;
CODE_01C27C:          JSR CODE_019E95                           ;;C287|C27C+C27C/C27C\C283;
CODE_01C27F:          LDA.B !SpriteTableC2,X                    ;;C28A|C27F+C27F/C27F\C286;
                      BEQ +                                     ;;C28C|C281+C281/C281\C288;
                      JSR GetDrawInfoBnk1                       ;;C28E|C283+C283/C283\C28A;
                      RTS                                       ;;C291|C286+C286/C286\C28D; Return 
                                                                ;;                        ;
                    + JSR CODE_01C61A                           ;;C292|C287+C287/C287\C28E;
                      JSR MarioSprInteractRt                    ;;C295|C28A+C28A/C28A\C291;
                      BCC Return01C2D2                          ;;C298|C28D+C28D/C28D\C294;
                      LDA.B !SpriteNumber,X                     ;;C29A|C28F+C28F/C28F\C296;
                      CMP.B #$7E                                ;;C29C|C291+C291/C291\C298;
                      BNE CODE_01C2A6                           ;;C29E|C293+C293/C293\C29A;
                      JSR CODE_01C4F0                           ;;C2A0|C295+C295/C295\C29C;
                      LDA.B #$05                                ;;C2A3|C298+C298/C298\C29F;
                      JSL ADDR_05B329                           ;;C2A5|C29A+C29A/C29A\C2A1;
                      LDA.B #$03                                ;;C2A9|C29E+C29E/C29E\C2A5;
                      JSL GivePoints                            ;;C2AB|C2A0+C2A0/C2A0\C2A7;
                      BRA ADDR_01C30F                           ;;C2AF|C2A4+C2A4/C2A4\C2AB;
                                                                ;;                        ;
CODE_01C2A6:          CMP.B #$7F                                ;;C2B1|C2A6+C2A6/C2A6\C2AD;
                      BNE CODE_01C2AF                           ;;C2B3|C2A8+C2A8/C2A8\C2AF;
                      JSR GiveMario1Up                          ;;C2B5|C2AA+C2AA/C2AA\C2B1;
                      BRA ADDR_01C30F                           ;;C2B8|C2AD+C2AD/C2AD\C2B4;
                                                                ;;                        ;
CODE_01C2AF:          CMP.B #$80                                ;;C2BA|C2AF+C2AF/C2AF\C2B6;
                      BNE CODE_01C2CE                           ;;C2BC|C2B1+C2B1/C2B1\C2B8;
                      LDA.B !PlayerYSpeed                       ;;C2BE|C2B3+C2B3/C2B3\C2BA;
                      BMI Return01C2D2                          ;;C2C0|C2B5+C2B5/C2B5\C2BC;
                      LDA.B #$09                                ;;C2C2|C2B7+C2B7/C2B7\C2BE; \ Sprite status = Carryable 
                      STA.W !SpriteStatus,X                     ;;C2C4|C2B9+C2B9/C2B9\C2C0; / 
                      LDA.B #$D0                                ;;C2C7|C2BC+C2BC/C2BC\C2C3;
                      STA.B !PlayerYSpeed                       ;;C2C9|C2BE+C2BE/C2BE\C2C5;
                      STZ.B !SpriteYSpeed,X                     ;;C2CB|C2C0+C2C0/C2C0\C2C7; Sprite Y Speed = 0 
                      STZ.W !SpriteMisc1540,X                   ;;C2CD|C2C2+C2C2/C2C2\C2C9;
                      LDA.W !SpriteTweakerD,X                   ;;C2D0|C2C5+C2C5/C2C5\C2CC; \ Use default interation with Mario 
                      AND.B #$7F                                ;;C2D3|C2C8+C2C8/C2C8\C2CF;  | 
                      STA.W !SpriteTweakerD,X                   ;;C2D5|C2CA+C2CA/C2CA\C2D1; / 
                      RTS                                       ;;C2D8|C2CD+C2CD/C2CD\C2D4; Return 
                                                                ;;                        ;
CODE_01C2CE:          CMP.B #$7D                                ;;C2D9|C2CE+C2CE/C2CE\C2D5;
                      BEQ +                                     ;;C2DB|C2D0+C2D0/C2D0\C2D7;
Return01C2D2:         RTS                                       ;;C2DD|C2D2+C2D2/C2D2\C2D9; Return 
                                                                ;;                        ;
                    + LDY.B #$0B                                ;;C2DE|C2D3+C2D3/C2D3\C2DA;
CODE_01C2D5:          LDA.W !SpriteStatus,Y                     ;;C2E0|C2D5+C2D5/C2D5\C2DC;
                      CMP.B #$0B                                ;;C2E3|C2D8+C2D8/C2D8\C2DF;
                      BNE +                                     ;;C2E5|C2DA+C2DA/C2DA\C2E1;
                      LDA.W !SpriteNumber,Y                     ;;C2E7|C2DC+C2DC/C2DC\C2E3;
                      CMP.B #$7D                                ;;C2EA|C2DF+C2DF/C2DF\C2E6;
                      BEQ +                                     ;;C2EC|C2E1+C2E1/C2E1\C2E8;
                      LDA.B #$09                                ;;C2EE|C2E3+C2E3/C2E3\C2EA; \ Sprite status = Carryable 
                      STA.W !SpriteStatus,Y                     ;;C2F0|C2E5+C2E5/C2E5\C2EC; / 
                    + DEY                                       ;;C2F3|C2E8+C2E8/C2E8\C2EF;
                      BPL CODE_01C2D5                           ;;C2F4|C2E9+C2E9/C2E9\C2F0;
                      LDA.B #$00                                ;;C2F6|C2EB+C2EB/C2EB\C2F2;
                      LDY.W !PBalloonInflating                  ;;C2F8|C2ED+C2ED/C2ED\C2F4;
                      BNE +                                     ;;C2FB|C2F0+C2F0/C2F0\C2F7;
                      LDA.B #$0B                                ;;C2FD|C2F2+C2F2/C2F2\C2F9; \ Sprite status = Being carried 
                    + STA.W !SpriteStatus,X                     ;;C2FF|C2F4+C2F4/C2F4\C2FB; / 
                      LDA.B !PlayerYSpeed                       ;;C302|C2F7+C2F7/C2F7\C2FE;
                      STA.B !SpriteYSpeed,X                     ;;C304|C2F9+C2F9/C2F9\C300;
                      LDA.B !PlayerXSpeed                       ;;C306|C2FB+C2FB/C2FB\C302;
                      STA.B !SpriteXSpeed,X                     ;;C308|C2FD+C2FD/C2FD\C304;
                      LDA.B #$09                                ;;C30A|C2FF+C2FF/C2FF\C306;
                      STA.W !PBalloonInflating                  ;;C30C|C301+C301/C301\C308;
                      LDA.B #$FF                                ;;C30F|C304+C304/C304\C30B;
                      STA.W !PBalloonTimer                      ;;C311|C306+C306/C306\C30D;
                      LDA.B #!SFX_PBALLOON                      ;;C314|C309+C309/C309\C310; \ Play sound effect 
                      STA.W !SPCIO0                             ;;C316|C30B+C30B/C30B\C312; / 
                      RTS                                       ;;C319|C30E+C30E/C30E\C315; Return 
                                                                ;;                        ;
ADDR_01C30F:          STZ.W !SpriteStatus,X                     ;;C31A|C30F+C30F/C30F\C316;
                      RTS                                       ;;C31D|C312+C312/C312\C319; Return 
                                                                ;;                        ;
                                                                ;;                        ;
ChangingItemSprite:   db $74,$75,$77,$76                        ;;C31E|C313+C313/C313\C31A;
                                                                ;;                        ;
ChangingItem:         LDA.B #$01                                ;;C322|C317+C317/C317\C31E;
                      STA.W !SpriteMisc151C,X                   ;;C324|C319+C319/C319\C320;
                      LDA.W !SpriteOnYoshiTongue,X              ;;C327|C31C+C31C/C31C\C323;
                      BNE +                                     ;;C32A|C31F+C31F/C31F\C326;
                   if ver_is_pal(!_VER)               ;\   IF   ;;++++++++++++++++++++++++; E0 & E1
                      INC.W !SpriteMisc187B,X                   ;;              /C321\C328;
                   endif                              ;/ ENDIF  ;;++++++++++++++++++++++++;
                      INC.W !SpriteMisc187B,X                   ;;C32C|C321+C321/C324\C32B;
                    + LDA.W !SpriteMisc187B,X                   ;;C32F|C324+C324/C327\C32E; \ Determine which power-up to act like 
                      LSR A                                     ;;C332|C327+C327/C32A\C331;  | 
                      LSR A                                     ;;C333|C328+C328/C32B\C332;  | 
                      LSR A                                     ;;C334|C329+C329/C32C\C333;  | 
                      LSR A                                     ;;C335|C32A+C32A/C32D\C334;  | 
                      LSR A                                     ;;C336|C32B+C32B/C32E\C335;  | 
                      LSR A                                     ;;C337|C32C+C32C/C32F\C336;  | 
                      AND.B #$03                                ;;C338|C32D+C32D/C330\C337;  | 
                      TAY                                       ;;C33A|C32F+C32F/C332\C339;  | 
                      LDA.W ChangingItemSprite,Y                ;;C33B|C330+C330/C333\C33A;  / 
                      STA.B !SpriteNumber,X                     ;;C33E|C333+C333/C336\C33D; \ Change into the appropriate power up 
                      JSL LoadSpriteTables                      ;;C340|C335+C335/C338\C33F; / 
                      JSR PowerUpRt                             ;;C344|C339+C339/C33C\C343; Run the power up code 
                      LDA.B #$81                                ;;C347|C33C+C33C/C33F\C346; \ Change it back to the turning item 
                      STA.B !SpriteNumber,X                     ;;C349|C33E+C33E/C341\C348;  | 
                      JSL LoadSpriteTables                      ;;C34B|C340+C340/C343\C34A; / 
                      RTS                                       ;;C34F|C344+C344/C347\C34E; Return 
                                                                ;;                        ;
                                                                ;;                        ;
EatenBerryGfxProp:    db $02,$02,$04,$06                        ;;C350|C345+C345/C348\C34F;
                                                                ;;                        ;
FireFlower:           LDA.B !EffFrame                           ;;C354|C349+C349/C34C\C353; \ Flip flower every 8 frames 
                      AND.B #$08                                ;;C356|C34B+C34B/C34E\C355;  | 
                      LSR A                                     ;;C358|C34D+C34D/C350\C357;  | 
                      LSR A                                     ;;C359|C34E+C34E/C351\C358;  | 
                      LSR A                                     ;;C35A|C34F+C34F/C352\C359;  | ($157C,x = 0 or 1) 
                      STA.W !SpriteMisc157C,X                   ;;C35B|C350+C350/C353\C35A; / 
PowerUpRt:            LDA.W !SpriteMisc160E,X                   ;;C35E|C353+C353/C356\C35D;
                      BEQ +                                     ;;C361|C356+C356/C359\C360;
                      JSR SubSprGfx2Entry1                      ;;C363|C358+C358/C35B\C362;
                      LDY.W !SpriteOAMIndex,X                   ;;C366|C35B+C35B/C35E\C365; Y = Index into sprite OAM 
                      LDA.B #$80                                ;;C369|C35E+C35E/C361\C368; \ Set berry tile to OAM 
                      STA.W !OAMTileNo+$100,Y                   ;;C36B|C360+C360/C363\C36A; / 
                      PHX                                       ;;C36E|C363+C363/C366\C36D; \ Set gfx properties of berry 
                      LDX.W !EatenBerryType                     ;;C36F|C364+C364/C367\C36E;  | X = type of berry being eaten 
                      %LorW_X(LDA,EatenBerryGfxProp)            ;;C372|C367+C367/C36A\C371;  | 
                      ORA.B !SpriteProperties                   ;;C376|C36A+C36A/C36D\C374;  | 
                      STA.W !OAMTileAttr+$100,Y                 ;;C378|C36C+C36C/C36F\C376; / 
                      PLX                                       ;;C37B|C36F+C36F/C372\C379; X = sprite index 
                      RTS                                       ;;C37C|C370+C370/C373\C37A; Return 
                                                                ;;                        ;
                    + LDA.B !SpriteProperties                   ;;C37D|C371+C371/C374\C37B;
                      PHA                                       ;;C37F|C373+C373/C376\C37D;
                      JSR CODE_01C4AC                           ;;C380|C374+C374/C377\C37E;
                      LDA.W !SpriteMisc1534,X                   ;;C383|C377+C377/C37A\C381;
                      BEQ CODE_01C38F                           ;;C386|C37A+C37A/C37D\C384;
                      LDA.B !SpriteLock                         ;;C388|C37C+C37C/C37F\C386; \ Branch if sprites locked 
                      BNE +                                     ;;C38A|C37E+C37E/C381\C388; / 
                      LDA.B #$10                                ;;C38C|C380+C380/C383\C38A;
                      STA.B !SpriteYSpeed,X                     ;;C38E|C382+C382/C385\C38C;
                      JSR SubSprYPosNoGrvty                     ;;C390|C384+C384/C387\C38E;
                    + LDA.B !EffFrame                           ;;C393|C387+C387/C38A\C391;
                      AND.B #$0C                                ;;C395|C389+C389/C38C\C393;
                      BNE CODE_01C3AB                           ;;C397|C38B+C38B/C38E\C395;
                      PLA                                       ;;C399|C38D+C38D/C390\C397;
                      RTS                                       ;;C39A|C38E+C38E/C391\C398; Return 
                                                                ;;                        ;
CODE_01C38F:          LDA.W !SpriteMisc1540,X                   ;;C39B|C38F+C38F/C392\C399;
                      BEQ CODE_01C3AE                           ;;C39E|C392+C392/C395\C39C;
                      JSR CODE_019140                           ;;C3A0|C394+C394/C397\C39E;
                      LDA.W !SpriteMisc1528,X                   ;;C3A3|C397+C397/C39A\C3A1;
                      BNE +                                     ;;C3A6|C39A+C39A/C39D\C3A4;
                      LDA.B #$10                                ;;C3A8|C39C+C39C/C39F\C3A6;
                      STA.B !SpriteProperties                   ;;C3AA|C39E+C39E/C3A1\C3A8;
                    + LDA.B !SpriteLock                         ;;C3AC|C3A0+C3A0/C3A3\C3AA; \ Branch if sprites locked 
                      BNE CODE_01C3AB                           ;;C3AE|C3A2+C3A2/C3A5\C3AC; / 
                      LDA.B #$FC                                ;;C3B0|C3A4+C3A4/C3A7\C3AE;
                      STA.B !SpriteYSpeed,X                     ;;C3B2|C3A6+C3A6/C3A9\C3B0;
                      JSR SubSprYPosNoGrvty                     ;;C3B4|C3A8+C3A8/C3AB\C3B2;
CODE_01C3AB:          JMP CODE_01C48D                           ;;C3B7|C3AB+C3AB/C3AE\C3B5;
                                                                ;;                        ;
CODE_01C3AE:          LDA.B !SpriteLock                         ;;C3BA|C3AE+C3AE/C3B1\C3B8; \ Branch if sprites locked 
                      BNE CODE_01C3AB                           ;;C3BC|C3B0+C3B0/C3B3\C3BA; / 
                      LDA.W !SpriteStatus,X                     ;;C3BE|C3B2+C3B2/C3B5\C3BC;
                      CMP.B #$0C                                ;;C3C1|C3B5+C3B5/C3B8\C3BF;
                      BEQ CODE_01C3AB                           ;;C3C3|C3B7+C3B7/C3BA\C3C1;
                      LDA.B !SpriteNumber,X                     ;;C3C5|C3B9+C3B9/C3BC\C3C3;
                      CMP.B #$76                                ;;C3C7|C3BB+C3BB/C3BE\C3C5; \ Useless code, branch nowhere if not a star 
                      BNE +                                     ;;C3C9|C3BD+C3BD/C3C0\C3C7; / 
                    + INC.W !SpriteMisc1570,X                   ;;C3CB|C3BF+C3BF/C3C2\C3C9;
                      JSR CODE_018DBB                           ;;C3CE|C3C2+C3C2/C3C5\C3CC;
                      LDA.B !SpriteNumber,X                     ;;C3D1|C3C5+C3C5/C3C8\C3CF;
                      CMP.B #$75                                ;;C3D3|C3C7+C3C7/C3CA\C3D1; flower 
                      BNE +                                     ;;C3D5|C3C9+C3C9/C3CC\C3D3;
                      LDA.W !SpriteMisc151C,X                   ;;C3D7|C3CB+C3CB/C3CE\C3D5;
                      BNE +                                     ;;C3DA|C3CE+C3CE/C3D1\C3D8;
                      STZ.B !SpriteXSpeed,X                     ;;C3DC|C3D0+C3D0/C3D3\C3DA; Sprite X Speed = 0 
                    + CMP.B #$76                                ;;C3DE|C3D2+C3D2/C3D5\C3DC; star 
                      BEQ +                                     ;;C3E0|C3D4+C3D4/C3D7\C3DE;
                      CMP.B #$21                                ;;C3E2|C3D6+C3D6/C3D9\C3E0; sprite coin 
                      BEQ +                                     ;;C3E4|C3D8+C3D8/C3DB\C3E2;
                      LDA.W !SpriteMisc151C,X                   ;;C3E6|C3DA+C3DA/C3DD\C3E4;
                      BNE +                                     ;;C3E9|C3DD+C3DD/C3E0\C3E7;
                      ASL.B !SpriteXSpeed,X                     ;;C3EB|C3DF+C3DF/C3E2\C3E9;
                    + LDA.B !SpriteTableC2,X                    ;;C3ED|C3E1+C3E1/C3E4\C3EB;
                      BEQ CODE_01C3F3                           ;;C3EF|C3E3+C3E3/C3E6\C3ED;
                      BMI +                                     ;;C3F1|C3E5+C3E5/C3E8\C3EF;
                      JSR CODE_019140                           ;;C3F3|C3E7+C3E7/C3EA\C3F1;
                      LDA.W !SpriteBlockedDirs,X                ;;C3F6|C3EA+C3EA/C3ED\C3F4;
                      BNE +                                     ;;C3F9|C3ED+C3ED/C3F0\C3F7;
                      STZ.B !SpriteTableC2,X                    ;;C3FB|C3EF+C3EF/C3F2\C3F9;
                    + BRA CODE_01C437                           ;;C3FD|C3F1+C3F1/C3F4\C3FB;
                                                                ;;                        ;
CODE_01C3F3:          LDA.W !IRQNMICommand                      ;;C3FF|C3F3+C3F3/C3F6\C3FD;
                      CMP.B #$C1                                ;;C402|C3F6+C3F6/C3F9\C400;
                      BEQ CODE_01C42C                           ;;C404|C3F8+C3F8/C3FB\C402;
                      BIT.W !IRQNMICommand                      ;;C406|C3FA+C3FA/C3FD\C404;
                      BVC CODE_01C42C                           ;;C409|C3FD+C3FD/C400\C407;
                      STZ.W !SpriteBlockedDirs,X                ;;C40B|C3FF+C3FF/C402\C409;
                      STZ.B !SpriteXSpeed,X                     ;;C40E|C402+C402/C405\C40C; Sprite X Speed = 0 
                      LDA.W !SpriteXPosHigh,X                   ;;C410|C404+C404/C407\C40E;
                      BNE +                                     ;;C413|C407+C407/C40A\C411;
                      LDA.B !SpriteYPosLow,X                    ;;C415|C409+C409/C40C\C413;
                      CMP.B #$A0                                ;;C417|C40B+C40B/C40E\C415;
                      BCC +                                     ;;C419|C40D+C40D/C410\C417;
                      AND.B #$F0                                ;;C41B|C40F+C40F/C412\C419;
                      STA.B !SpriteYPosLow,X                    ;;C41D|C411+C411/C414\C41B;
                      LDA.W !SpriteBlockedDirs,X                ;;C41F|C413+C413/C416\C41D;
                      ORA.B #$04                                ;;C422|C416+C416/C419\C420;
                      STA.W !SpriteBlockedDirs,X                ;;C424|C418+C418/C41B\C422;
                      JSR CODE_018DBB                           ;;C427|C41B+C41B/C41E\C425;
                    + JSR SubSprXPosNoGrvty                     ;;C42A|C41E+C41E/C421\C428;
                      JSR SubSprYPosNoGrvty                     ;;C42D|C421+C421/C424\C42B;
                      INC.B !SpriteYSpeed,X                     ;;C430|C424+C424/C427\C42E;
                      INC.B !SpriteYSpeed,X                     ;;C432|C426+C426/C429\C430;
                      INC.B !SpriteYSpeed,X                     ;;C434|C428+C428/C42B\C432;
                      BRA +                                     ;;C436|C42A+C42A/C42D\C434;
                                                                ;;                        ;
CODE_01C42C:          JSR SubUpdateSprPos                       ;;C438|C42C+C42C/C42F\C436;
                    + LDA.B !TrueFrame                          ;;C43B|C42F+C42F/C432\C439;
                      AND.B #$03                                ;;C43D|C431+C431/C434\C43B;
                      BEQ CODE_01C437                           ;;C43F|C433+C433/C436\C43D;
                      DEC.B !SpriteYSpeed,X                     ;;C441|C435+C435/C438\C43F;
CODE_01C437:          JSR SubOffscreen0Bnk1                     ;;C443|C437+C437/C43A\C441;
                      JSR IsTouchingCeiling                     ;;C446|C43A+C43A/C43D\C444;
                      BEQ +                                     ;;C449|C43D+C43D/C440\C447;
                      LDA.B #$00                                ;;C44B|C43F+C43F/C442\C449;
                      STA.B !SpriteYSpeed,X                     ;;C44D|C441+C441/C444\C44B;
                    + JSR IsOnGround                            ;;C44F|C443+C443/C446\C44D;
                      BNE CODE_01C44A                           ;;C452|C446+C446/C449\C450;
                      BRA CODE_01C47E                           ;;C454|C448+C448/C44B\C452;
                                                                ;;                        ;
CODE_01C44A:          LDA.B !SpriteNumber,X                     ;;C456|C44A+C44A/C44D\C454;
                      CMP.B #$21                                ;;C458|C44C+C44C/C44F\C456; sprite coin 
                      BNE CODE_01C46C                           ;;C45A|C44E+C44E/C451\C458;
                      JSR CODE_018DBB                           ;;C45C|C450+C450/C453\C45A;
                      LDA.B !SpriteYSpeed,X                     ;;C45F|C453+C453/C456\C45D;
                      INC A                                     ;;C461|C455+C455/C458\C45F;
                      PHA                                       ;;C462|C456+C456/C459\C460;
                      JSR SetSomeYSpeed__                       ;;C463|C457+C457/C45A\C461;
                      PLA                                       ;;C466|C45A+C45A/C45D\C464;
                      LSR A                                     ;;C467|C45B+C45B/C45E\C465;
                      JSR CODE_01CCEC                           ;;C468|C45C+C45C/C45F\C466;
                      CMP.B #$FC                                ;;C46B|C45F+C45F/C462\C469;
                      BCS +                                     ;;C46D|C461+C461/C464\C46B;
                      LDY.W !SpriteBlockedDirs,X                ;;C46F|C463+C463/C466\C46D;
                      BMI +                                     ;;C472|C466+C466/C469\C470;
                      STA.B !SpriteYSpeed,X                     ;;C474|C468+C468/C46B\C472;
                    + BRA CODE_01C47E                           ;;C476|C46A+C46A/C46D\C474;
                                                                ;;                        ;
CODE_01C46C:          JSR SetSomeYSpeed__                       ;;C478|C46C+C46C/C46F\C476;
                      LDA.W !SpriteMisc151C,X                   ;;C47B|C46F+C46F/C472\C479;
                      BNE CODE_01C47A                           ;;C47E|C472+C472/C475\C47C;
                      LDA.B !SpriteNumber,X                     ;;C480|C474+C474/C477\C47E;
                      CMP.B #$76                                ;;C482|C476+C476/C479\C480; star 
                      BNE CODE_01C47E                           ;;C484|C478+C478/C47B\C482;
CODE_01C47A:          LDA.B #$C8                                ;;C486|C47A+C47A/C47D\C484;
                      STA.B !SpriteYSpeed,X                     ;;C488|C47C+C47C/C47F\C486;
CODE_01C47E:          LDA.W !SpriteMisc1558,X                   ;;C48A|C47E+C47E/C481\C488;
                      ORA.B !SpriteTableC2,X                    ;;C48D|C481+C481/C484\C48B;
                      BNE CODE_01C48D                           ;;C48F|C483+C483/C486\C48D;
                      JSR IsTouchingObjSide                     ;;C491|C485+C485/C488\C48F;
                      BEQ CODE_01C48D                           ;;C494|C488+C488/C48B\C492;
                      JSR FlipSpriteDir                         ;;C496|C48A+C48A/C48D\C494;
CODE_01C48D:          LDA.W !SpriteMisc1540,X                   ;;C499|C48D+C48D/C490\C497;
                      CMP.B #$36                                ;;C49C|C490+C490/C493\C49A;
                      BCS CODE_01C4A8                           ;;C49E|C492+C492/C495\C49C;
                      LDA.B !SpriteTableC2,X                    ;;C4A0|C494+C494/C497\C49E;
                      BEQ CODE_01C49C                           ;;C4A2|C496+C496/C499\C4A0;
                      CMP.B #$FF                                ;;C4A4|C498+C498/C49B\C4A2;
                      BNE CODE_01C4A1                           ;;C4A6|C49A+C49A/C49D\C4A4;
CODE_01C49C:          LDA.W !SpriteBehindScene,X                ;;C4A8|C49C+C49C/C49F\C4A6;
                      BEQ +                                     ;;C4AB|C49F+C49F/C4A2\C4A9;
CODE_01C4A1:          LDA.B #$10                                ;;C4AD|C4A1+C4A1/C4A4\C4AB;
                      STA.B !SpriteProperties                   ;;C4AF|C4A3+C4A3/C4A6\C4AD;
                    + JSR CODE_01C61A                           ;;C4B1|C4A5+C4A5/C4A8\C4AF;
CODE_01C4A8:          PLA                                       ;;C4B4|C4A8+C4A8/C4AB\C4B2;
                      STA.B !SpriteProperties                   ;;C4B5|C4A9+C4A9/C4AC\C4B3;
                    - RTS                                       ;;C4B7|C4AB+C4AB/C4AE\C4B5; Return 
                                                                ;;                        ;
CODE_01C4AC:          JSR CODE_01A80F                           ;;C4B8|C4AC+C4AC/C4AF\C4B6;
                      BCC -                                     ;;C4BB|C4AF+C4AF/C4B2\C4B9;
                      LDA.W !SpriteMisc151C,X                   ;;C4BD|C4B1+C4B1/C4B4\C4BB;
                      BEQ CODE_01C4BA                           ;;C4C0|C4B4+C4B4/C4B7\C4BE;
                      LDA.B !SpriteTableC2,X                    ;;C4C2|C4B6+C4B6/C4B9\C4C0;
                      BNE Return01C4FA                          ;;C4C4|C4B8+C4B8/C4BB\C4C2;
CODE_01C4BA:          LDA.W !SpriteMisc154C,X                   ;;C4C6|C4BA+C4BA/C4BD\C4C4;
                      BNE Return01C4FA                          ;;C4C9|C4BD+C4BD/C4C0\C4C7;
CODE_01C4BF:          LDA.W !SpriteMisc1540,X                   ;;C4CB|C4BF+C4BF/C4C2\C4C9;
                      CMP.B #$18                                ;;C4CE|C4C2+C4C2/C4C5\C4CC;
                      BCS Return01C4FA                          ;;C4D0|C4C4+C4C4/C4C7\C4CE;
                      STZ.W !SpriteStatus,X                     ;;C4D2|C4C6+C4C6/C4C9\C4D0;
                      LDA.B !SpriteNumber,X                     ;;C4D5|C4C9+C4C9/C4CC\C4D3;
                      CMP.B #$21                                ;;C4D7|C4CB+C4CB/C4CE\C4D5;
                      BNE TouchedPowerUp                        ;;C4D9|C4CD+C4CD/C4D0\C4D7;
                      JSL CODE_05B34A                           ;;C4DB|C4CF+C4CF/C4D2\C4D9;
                      LDA.W !SpriteOBJAttribute,X               ;;C4DF|C4D3+C4D3/C4D6\C4DD;
                      AND.B #$0E                                ;;C4E2|C4D6+C4D6/C4D9\C4E0;
                      CMP.B #$02                                ;;C4E4|C4D8+C4D8/C4DB\C4E2;
                      BEQ CODE_01C4E0                           ;;C4E6|C4DA+C4DA/C4DD\C4E4;
                      LDA.B #$01                                ;;C4E8|C4DC+C4DC/C4DF\C4E6;
                      BRA +                                     ;;C4EA|C4DE+C4DE/C4E1\C4E8;
                                                                ;;                        ;
CODE_01C4E0:          LDA.W !SilverCoinsCollected               ;;C4EC|C4E0+C4E0/C4E3\C4EA;
                      INC.W !SilverCoinsCollected               ;;C4EF|C4E3+C4E3/C4E6\C4ED;
                      CMP.B #$0A                                ;;C4F2|C4E6+C4E6/C4E9\C4F0;
                      BCC +                                     ;;C4F4|C4E8+C4E8/C4EB\C4F2;
                      LDA.B #$0A                                ;;C4F6|C4EA+C4EA/C4ED\C4F4;
                    + JSL GivePoints                            ;;C4F8|C4EC+C4EC/C4EF\C4F6;
CODE_01C4F0:          LDY.B #$03                                ;;C4FC|C4F0+C4F0/C4F3\C4FA;
CODE_01C4F2:          LDA.W !SmokeSpriteNumber,Y                ;;C4FE|C4F2+C4F2/C4F5\C4FC;
                      BEQ CODE_01C4FB                           ;;C501|C4F5+C4F5/C4F8\C4FF;
                      DEY                                       ;;C503|C4F7+C4F7/C4FA\C501;
                      BPL CODE_01C4F2                           ;;C504|C4F8+C4F8/C4FB\C502;
Return01C4FA:         RTS                                       ;;C506|C4FA+C4FA/C4FD\C504; Return 
                                                                ;;                        ;
CODE_01C4FB:          LDA.B #$05                                ;;C507|C4FB+C4FB/C4FE\C505;
                      STA.W !SmokeSpriteNumber,Y                ;;C509|C4FD+C4FD/C500\C507;
                      LDA.B !SpriteXPosLow,X                    ;;C50C|C500+C500/C503\C50A;
                      STA.W !SmokeSpriteXPos,Y                  ;;C50E|C502+C502/C505\C50C;
                      LDA.B !SpriteYPosLow,X                    ;;C511|C505+C505/C508\C50F;
                      STA.W !SmokeSpriteYPos,Y                  ;;C513|C507+C507/C50A\C511;
                      LDA.B #$10                                ;;C516|C50A+C50A/C50D\C514;
                      STA.W !SmokeSpriteTimer,Y                 ;;C518|C50C+C50C/C50F\C516;
                      RTS                                       ;;C51B|C50F+C50F/C512\C519; Return 
                                                                ;;                        ;
                                                                ;;                        ;
ItemBoxSprite:        db $00,$01,$01,$01,$00,$01,$04,$02        ;;C51C|C510+C510/C513\C51A;
                      db $00,$00,$00,$00,$00,$01,$04,$02        ;;C524|C518+C518/C51B\C522;
                      db $00,$00,$00,$00                        ;;C52C|C520+C520/C523\C52A;
                                                                ;;                        ;
GivePowerPtrIndex:    db $00,$01,$01,$01,$04,$04,$04,$01        ;;C530|C524+C524/C527\C52E;
                      db $02,$02,$02,$02,$03,$03,$01,$03        ;;C538|C52C+C52C/C52F\C536;
                      db $05,$05,$05,$05                        ;;C540|C534+C534/C537\C53E;
                                                                ;;                        ;
TouchedPowerUp:       SEC                                       ;;C544|C538+C538/C53B\C542; \ Index created from... 
                      SBC.B #$74                                ;;C545|C539+C539/C53C\C543;  | ... powerup touched (upper 2 bits)  
                      ASL A                                     ;;C547|C53B+C53B/C53E\C545;  | 
                      ASL A                                     ;;C548|C53C+C53C/C53F\C546;  | 
                      ORA.B !Powerup                            ;;C549|C53D+C53D/C540\C547;  | ... Mario's status (lower 3 bits) 
                      TAY                                       ;;C54B|C53F+C53F/C542\C549; / 
                      LDA.W ItemBoxSprite,Y                     ;;C54C|C540+C540/C543\C54A; \ Put appropriate item in item box 
                      BEQ +                                     ;;C54F|C543+C543/C546\C54D;  | 
                      STA.W !PlayerItembox                      ;;C551|C545+C545/C548\C54F; / 
                      LDA.B #!SFX_ITEMRESERVED                  ;;C554|C548+C548/C54B\C552; \  
                      STA.W !SPCIO3                             ;;C556|C54A+C54A/C54D\C554; / Play sound effect 
                    + LDA.W GivePowerPtrIndex,Y                 ;;C559|C54D+C54D/C550\C557; \ Call routine to change Mario's status 
                      JSL ExecutePtr                            ;;C55C|C550+C550/C553\C55A; / 
                                                                ;;                        ;
                      dw GiveMarioMushroom                      ;;C560|C554+C554/C557\C55E; 0 - Big 
                      dw CODE_01C56F                            ;;C562|C556+C556/C559\C560; 1 - No change 
                      dw GiveMarioStar                          ;;C564|C558+C558/C55B\C562; 2 - Star 
                      dw GiveMarioCape                          ;;C566|C55A+C55A/C55D\C564; 3 - Cape 
                      dw GiveMarioFire                          ;;C568|C55C+C55C/C55F\C566; 4 - Fire 
                      dw GiveMario1Up                           ;;C56A|C55E+C55E/C561\C568; 5 - 1Up 13
                                                                ;;                        ;
                      RTS                                       ;;C56C|C560+C560/C563\C56A;
                                                                ;;                        ;
GiveMarioMushroom:    LDA.B #$02                                ;;C56D|C561+C561/C564\C56B; \ Set growing action 
                      STA.B !PlayerAnimation                    ;;C56F|C563+C563/C566\C56D; / 
                      LDA.B #$2F                                ;;C571|C565+C565/C568\C56F; \  
                   if ver_is_japanese(!_VER)          ;\   IF   ;;++++++++++++++++++++++++; J
                      STA.W !PlayerAniTimer                     ;;C573                    ;  | Set animation timer 
                   else                               ;<  ELSE  ;;------------------------; U, SS, E0, & E1
                      STA.W !PlayerAniTimer,Y                   ;;    |C567+C567/C56A\C571;  | Set animation timer 
                   endif                              ;/ ENDIF  ;;++++++++++++++++++++++++;
                      STA.B !SpriteLock                         ;;C576|C56A+C56A/C56D\C574; / Set lock sprites timer 
                      JMP CODE_01C56F                           ;;C578|C56C+C56C/C56F\C576; JMP to next instruction? 
                                                                ;;                        ;
CODE_01C56F:          LDA.B #$04                                ;;C57B|C56F+C56F/C572\C579;
                      LDY.W !SpriteMisc1534,X                   ;;C57D|C571+C571/C574\C57B;
                      BNE +                                     ;;C580|C574+C574/C577\C57E;
                      JSL GivePoints                            ;;C582|C576+C576/C579\C580;
                    + LDA.B #!SFX_MUSHROOM                      ;;C586|C57A+C57A/C57D\C584; \ 
                      STA.W !SPCIO0                             ;;C588|C57C+C57C/C57F\C586; / 
                      RTS                                       ;;C58B|C57F+C57F/C582\C589; Return 
                                                                ;;                        ;
CODE_01C580:          LDA.B #$FF                                ;;C58C|C580+C580/C583\C58A; \ Set star timer 
                      STA.W !InvinsibilityTimer                 ;;C58E|C582+C582/C585\C58C; / 
                      LDA.B #!BGM_STARPOWER                     ;;C591|C585+C585/C588\C58F;
                      STA.W !SPCIO2                             ;;C593|C587+C587/C58A\C591; / Change music 
                      ASL.W !MusicBackup                        ;;C596|C58A+C58A/C58D\C594;
                      SEC                                       ;;C599|C58D+C58D/C590\C597;
                      ROR.W !MusicBackup                        ;;C59A|C58E+C58E/C591\C598;
                      RTL                                       ;;C59D|C591+C591/C594\C59B; Return 
                                                                ;;                        ;
GiveMarioStar:        JSL CODE_01C580                           ;;C59E|C592+C592/C595\C59C;
                      BRA CODE_01C56F                           ;;C5A2|C596+C596/C599\C5A0;
                                                                ;;                        ;
GiveMarioCape:        LDA.B #$02                                ;;C5A4|C598+C598/C59B\C5A2;
                      STA.B !Powerup                            ;;C5A6|C59A+C59A/C59D\C5A4;
                      LDA.B #!SFX_FEATHER                       ;;C5A8|C59C+C59C/C59F\C5A6; \ Play sound effect 
                      STA.W !SPCIO0                             ;;C5AA|C59E+C59E/C5A1\C5A8; / 
                      LDA.B #$04                                ;;C5AD|C5A1+C5A1/C5A4\C5AB;
                      JSL GivePoints                            ;;C5AF|C5A3+C5A3/C5A6\C5AD;
                      JSL CODE_01C5AE                           ;;C5B3|C5A7+C5A7/C5AA\C5B1;
                      INC.B !SpriteLock                         ;;C5B7|C5AB+C5AB/C5AE\C5B5;
                      RTS                                       ;;C5B9|C5AD+C5AD/C5B0\C5B7; Return 
                                                                ;;                        ;
CODE_01C5AE:          LDA.B !PlayerYPosScrRel+1                 ;;C5BA|C5AE+C5AE/C5B1\C5B8;
                      ORA.B !PlayerXPosScrRel+1                 ;;C5BC|C5B0+C5B0/C5B3\C5BA;
                      BNE Return01C5EB                          ;;C5BE|C5B2+C5B2/C5B5\C5BC;
                      LDA.B #$03                                ;;C5C0|C5B4+C5B4/C5B7\C5BE;
                      STA.B !PlayerAnimation                    ;;C5C2|C5B6+C5B6/C5B9\C5C0;
                      LDA.B #$18                                ;;C5C4|C5B8+C5B8/C5BB\C5C2;
                      STA.W !PlayerAniTimer                     ;;C5C6|C5BA+C5BA/C5BD\C5C4;
                      LDY.B #$03                                ;;C5C9|C5BD+C5BD/C5C0\C5C7;
CODE_01C5BF:          LDA.W !SmokeSpriteNumber,Y                ;;C5CB|C5BF+C5BF/C5C2\C5C9;
                      BEQ CODE_01C5D4                           ;;C5CE|C5C2+C5C2/C5C5\C5CC;
                      DEY                                       ;;C5D0|C5C4+C5C4/C5C7\C5CE;
                      BPL CODE_01C5BF                           ;;C5D1|C5C5+C5C5/C5C8\C5CF;
                      DEC.W !SmokeSpriteSlotIdx                 ;;C5D3|C5C7+C5C7/C5CA\C5D1;
                      BPL +                                     ;;C5D6|C5CA+C5CA/C5CD\C5D4;
                      LDA.B #$03                                ;;C5D8|C5CC+C5CC/C5CF\C5D6;
                      STA.W !SmokeSpriteSlotIdx                 ;;C5DA|C5CE+C5CE/C5D1\C5D8;
                    + LDY.W !SmokeSpriteSlotIdx                 ;;C5DD|C5D1+C5D1/C5D4\C5DB;
CODE_01C5D4:          LDA.B #$81                                ;;C5E0|C5D4+C5D4/C5D7\C5DE;
                      STA.W !SmokeSpriteNumber,Y                ;;C5E2|C5D6+C5D6/C5D9\C5E0;
                      LDA.B #$1B                                ;;C5E5|C5D9+C5D9/C5DC\C5E3;
                      STA.W !SmokeSpriteTimer,Y                 ;;C5E7|C5DB+C5DB/C5DE\C5E5;
                      LDA.B !PlayerYPosNext                     ;;C5EA|C5DE+C5DE/C5E1\C5E8;
                      CLC                                       ;;C5EC|C5E0+C5E0/C5E3\C5EA;
                      ADC.B #$08                                ;;C5ED|C5E1+C5E1/C5E4\C5EB;
                      STA.W !SmokeSpriteYPos,Y                  ;;C5EF|C5E3+C5E3/C5E6\C5ED;
                      LDA.B !PlayerXPosNext                     ;;C5F2|C5E6+C5E6/C5E9\C5F0;
                      STA.W !SmokeSpriteXPos,Y                  ;;C5F4|C5E8+C5E8/C5EB\C5F2;
Return01C5EB:         RTL                                       ;;C5F7|C5EB+C5EB/C5EE\C5F5; Return 
                                                                ;;                        ;
GiveMarioFire:        LDA.B #$20                                ;;C5F8|C5EC+C5EC/C5EF\C5F6;
                      STA.W !CyclePaletteTimer                  ;;C5FA|C5EE+C5EE/C5F1\C5F8;
                      STA.B !SpriteLock                         ;;C5FD|C5F1+C5F1/C5F4\C5FB;
                      LDA.B #$04                                ;;C5FF|C5F3+C5F3/C5F6\C5FD;
                      STA.B !PlayerAnimation                    ;;C601|C5F5+C5F5/C5F8\C5FF;
                      LDA.B #$03                                ;;C603|C5F7+C5F7/C5FA\C601;
                      STA.B !Powerup                            ;;C605|C5F9+C5F9/C5FC\C603;
                      JMP CODE_01C56F                           ;;C607|C5FB+C5FB/C5FE\C605;
                                                                ;;                        ;
GiveMario1Up:         LDA.B #$08                                ;;C60A|C5FE+C5FE/C601\C608;
                      CLC                                       ;;C60C|C600+C600/C603\C60A;
                      ADC.W !SpriteMisc1594,X                   ;;C60D|C601+C601/C604\C60B;
                      JSL GivePoints                            ;;C610|C604+C604/C607\C60E;
                      RTS                                       ;;C614|C608+C608/C60B\C612; Return 
                                                                ;;                        ;
                                                                ;;                        ;
PowerUpTiles:         db $24,$26,$48,$0E,$24,$00,$00,$00        ;;C615|C609+C609/C60C\C613;
                      db $00,$E4,$E8,$24,$EC                    ;;C61D|C611+C611/C614\C61B;
                                                                ;;                        ;
StarPalValues:        db $00,$04,$08,$04                        ;;C622|C616+C616/C619\C620;
                                                                ;;                        ;
CODE_01C61A:          JSR GetDrawInfoBnk1                       ;;C626|C61A+C61A/C61D\C624;
                      STZ.B !_A                                 ;;C629|C61D+C61D/C620\C627;
                      LDA.W !ReznorOAMIndex                     ;;C62B|C61F+C61F/C622\C629;
                      BNE +                                     ;;C62E|C622+C622/C625\C62C;
                      LDA.W !IRQNMICommand                      ;;C630|C624+C624/C627\C62E;
                      CMP.B #$C1                                ;;C633|C627+C627/C62A\C631;
                      BEQ +                                     ;;C635|C629+C629/C62C\C633;
                      BIT.W !IRQNMICommand                      ;;C637|C62B+C62B/C62E\C635;
                      BVC +                                     ;;C63A|C62E+C62E/C631\C638;
                      LDA.B #$D8                                ;;C63C|C630+C630/C633\C63A;
                      STA.W !SpriteOAMIndex,X                   ;;C63E|C632+C632/C635\C63C;
                      TAY                                       ;;C641|C635+C635/C638\C63F;
                    + LDA.B !SpriteNumber,X                     ;;C642|C636+C636/C639\C640;
                      CMP.B #$21                                ;;C644|C638+C638/C63B\C642; sprite coin 
                      BNE PowerUpGfxRt                          ;;C646|C63A+C63A/C63D\C644;
                      JSL CoinSprGfx                            ;;C648|C63C+C63C/C63F\C646;
                      RTS                                       ;;C64C|C640+C640/C643\C64A; Return 
                                                                ;;                        ;
CoinSprGfx:           JSR CoinSprGfxSub                         ;;C64D|C641+C641/C644\C64B;
                      RTL                                       ;;C650|C644+C644/C647\C64E; Return 
                                                                ;;                        ;
CoinSprGfxSub:        JSR GetDrawInfoBnk1                       ;;C651|C645+C645/C648\C64F;
                      LDA.B !_0                                 ;;C654|C648+C648/C64B\C652;
                      STA.W !OAMTileXPos+$100,Y                 ;;C656|C64A+C64A/C64D\C654;
                      LDA.B !_1                                 ;;C659|C64D+C64D/C650\C657;
                      STA.W !OAMTileYPos+$100,Y                 ;;C65B|C64F+C64F/C652\C659;
                      LDA.B #$E8                                ;;C65E|C652+C652/C655\C65C;
                      STA.W !OAMTileNo+$100,Y                   ;;C660|C654+C654/C657\C65E;
                      LDA.W !SpriteOBJAttribute,X               ;;C663|C657+C657/C65A\C661;
                      ORA.B !SpriteProperties                   ;;C666|C65A+C65A/C65D\C664;
                      STA.W !OAMTileAttr+$100,Y                 ;;C668|C65C+C65C/C65F\C666;
                      TXA                                       ;;C66B|C65F+C65F/C662\C669;
                      CLC                                       ;;C66C|C660+C660/C663\C66A;
                      ADC.B !EffFrame                           ;;C66D|C661+C661/C664\C66B;
                      LSR A                                     ;;C66F|C663+C663/C666\C66D;
                      LSR A                                     ;;C670|C664+C664/C667\C66E;
                      AND.B #$03                                ;;C671|C665+C665/C668\C66F;
                      BNE CODE_01C670                           ;;C673|C667+C667/C66A\C671;
                      LDY.B #$02                                ;;C675|C669+C669/C66C\C673;
                      BRA +                                     ;;C677|C66B+C66B/C66E\C675;
                                                                ;;                        ;
                                                                ;;                        ;
MovingCoinTiles:      db $EA,$FA,$EA                            ;;C679|C66D+C66D/C670\C677;
                                                                ;;                        ;
CODE_01C670:          PHX                                       ;;C67C|C670+C670/C673\C67A;
                      TAX                                       ;;C67D|C671+C671/C674\C67B;
                      LDA.B !_0                                 ;;C67E|C672+C672/C675\C67C;
                      CLC                                       ;;C680|C674+C674/C677\C67E;
                      ADC.B #$04                                ;;C681|C675+C675/C678\C67F;
                      STA.W !OAMTileXPos+$100,Y                 ;;C683|C677+C677/C67A\C681;
                      STA.W !OAMTileXPos+$104,Y                 ;;C686|C67A+C67A/C67D\C684;
                      LDA.B !_1                                 ;;C689|C67D+C67D/C680\C687;
                      CLC                                       ;;C68B|C67F+C67F/C682\C689;
                      ADC.B #$08                                ;;C68C|C680+C680/C683\C68A;
                      STA.W !OAMTileYPos+$104,Y                 ;;C68E|C682+C682/C685\C68C;
                      LDA.L MovingCoinTiles-1,X                 ;;C691|C685+C685/C688\C68F;
                      STA.W !OAMTileNo+$100,Y                   ;;C695|C689+C689/C68C\C693;
                      STA.W !OAMTileNo+$104,Y                   ;;C698|C68C+C68C/C68F\C696;
                      LDA.W !OAMTileAttr+$100,Y                 ;;C69B|C68F+C68F/C692\C699;
                      ORA.B #$80                                ;;C69E|C692+C692/C695\C69C;
                      STA.W !OAMTileAttr+$104,Y                 ;;C6A0|C694+C694/C697\C69E;
                      PLX                                       ;;C6A3|C697+C697/C69A\C6A1;
                      LDY.B #$00                                ;;C6A4|C698+C698/C69B\C6A2;
                    + LDA.B #$01                                ;;C6A6|C69A+C69A/C69D\C6A4;
                      JSL FinishOAMWrite                        ;;C6A8|C69C+C69C/C69F\C6A6;
                      RTS                                       ;;C6AC|C6A0+C6A0/C6A3\C6AA; Return 
                                                                ;;                        ;
PowerUpGfxRt:         CMP.B #$76                                ;;C6AD|C6A1+C6A1/C6A4\C6AB; \ Setup flashing palette for star 
                      BNE +                                     ;;C6AF|C6A3+C6A3/C6A6\C6AD;  | 
                      LDA.B !TrueFrame                          ;;C6B1|C6A5+C6A5/C6A8\C6AF;  |  
                      LSR A                                     ;;C6B3|C6A7+C6A7/C6AA\C6B1;  | 
                      AND.B #$03                                ;;C6B4|C6A8+C6A8/C6AB\C6B2;  | 
                      PHY                                       ;;C6B6|C6AA+C6AA/C6AD\C6B4;  | 
                      TAY                                       ;;C6B7|C6AB+C6AB/C6AE\C6B5;  | 
                      LDA.W StarPalValues,Y                     ;;C6B8|C6AC+C6AC/C6AF\C6B6;  | 
                      PLY                                       ;;C6BB|C6AF+C6AF/C6B2\C6B9;  | 
                      STA.B !_A                                 ;;C6BC|C6B0+C6B0/C6B3\C6BA; / $0A contains palette info, will be applied later 
                    + LDA.B !_0                                 ;;C6BE|C6B2+C6B2/C6B5\C6BC; \ Set tile x position 
                      STA.W !OAMTileXPos+$100,Y                 ;;C6C0|C6B4+C6B4/C6B7\C6BE; / 
                      LDA.B !_1                                 ;;C6C3|C6B7+C6B7/C6BA\C6C1; \ Set tile y position 
                      DEC A                                     ;;C6C5|C6B9+C6B9/C6BC\C6C3;  | 
                      STA.W !OAMTileYPos+$100,Y                 ;;C6C6|C6BA+C6BA/C6BD\C6C4; / 
                      LDA.W !SpriteMisc157C,X                   ;;C6C9|C6BD+C6BD/C6C0\C6C7; \ Flip flower/cape if 157C,x is set 
                      LSR A                                     ;;C6CC|C6C0+C6C0/C6C3\C6CA;  | 
                      LDA.B #$00                                ;;C6CD|C6C1+C6C1/C6C4\C6CB;  | 
                      BCS +                                     ;;C6CF|C6C3+C6C3/C6C6\C6CD;  | 
                      ORA.B #$40                                ;;C6D1|C6C5+C6C5/C6C8\C6CF; / 
                    + ORA.B !SpriteProperties                   ;;C6D3|C6C7+C6C7/C6CA\C6D1; \ Add in level priority information 
                      ORA.W !SpriteOBJAttribute,X               ;;C6D5|C6C9+C6C9/C6CC\C6D3;  | Add in palette/gfx page 
                      EOR.B !_A                                 ;;C6D8|C6CC+C6CC/C6CF\C6D6;  | Adjust palette for star 
                      STA.W !OAMTileAttr+$100,Y                 ;;C6DA|C6CE+C6CE/C6D1\C6D8; / Set property byte 
                      LDA.B !SpriteNumber,X                     ;;C6DD|C6D1+C6D1/C6D4\C6DB; \ Set powerup tile 
                      SEC                                       ;;C6DF|C6D3+C6D3/C6D6\C6DD;  | 
                      SBC.B #$74                                ;;C6E0|C6D4+C6D4/C6D7\C6DE;  | 
                      TAX                                       ;;C6E2|C6D6+C6D6/C6D9\C6E0;  | X = Sprite number - #$74 
                      LDA.W PowerUpTiles,X                      ;;C6E3|C6D7+C6D7/C6DA\C6E1;  | 
                      STA.W !OAMTileNo+$100,Y                   ;;C6E6|C6DA+C6DA/C6DD\C6E4; / 
                      LDX.W !CurSpriteProcess                   ;;C6E9|C6DD+C6DD/C6E0\C6E7; X = sprite index 
                      LDA.B #$00                                ;;C6EC|C6E0+C6E0/C6E3\C6EA;
                      JSR CODE_01B37E                           ;;C6EE|C6E2+C6E2/C6E5\C6EC;
                      RTS                                       ;;C6F1|C6E5+C6E5/C6E8\C6EF; Return 
                                                                ;;                        ;
                                                                ;;                        ;
DATA_01C6E6:          db $02,$FE                                ;;C6F2|C6E6+C6E6/C6E9\C6F0;
                                                                ;;                        ;
DATA_01C6E8:          db $20,$E0                                ;;C6F4|C6E8+C6E8/C6EB\C6F2;
                                                                ;;                        ;
DATA_01C6EA:          db $0A,$F6,$08                            ;;C6F6|C6EA+C6EA/C6ED\C6F4;
                                                                ;;                        ;
Feather:              LDA.B !SpriteLock                         ;;C6F9|C6ED+C6ED/C6F0\C6F7; \ Branch if sprites locked 
                      BNE CODE_01C744                           ;;C6FB|C6EF+C6EF/C6F2\C6F9; / 
                      LDA.B !SpriteTableC2,X                    ;;C6FD|C6F1+C6F1/C6F4\C6FB;
                      BEQ CODE_01C701                           ;;C6FF|C6F3+C6F3/C6F6\C6FD;
                      JSR CODE_019140                           ;;C701|C6F5+C6F5/C6F8\C6FF;
                      LDA.W !SpriteBlockedDirs,X                ;;C704|C6F8+C6F8/C6FB\C702;
                      BNE +                                     ;;C707|C6FB+C6FB/C6FE\C705;
                      STZ.B !SpriteTableC2,X                    ;;C709|C6FD+C6FD/C700\C707;
                    + BRA CODE_01C741                           ;;C70B|C6FF+C6FF/C702\C709;
                                                                ;;                        ;
CODE_01C701:          LDA.W !SpriteStatus,X                     ;;C70D|C701+C701/C704\C70B;
                      CMP.B #$0C                                ;;C710|C704+C704/C707\C70E;
                      BEQ CODE_01C744                           ;;C712|C706+C706/C709\C710;
                      LDA.W !SpriteMisc154C,X                   ;;C714|C708+C708/C70B\C712;
                      BEQ +                                     ;;C717|C70B+C70B/C70E\C715;
                      JSR SubSprYPosNoGrvty                     ;;C719|C70D+C70D/C710\C717;
                      INC.B !SpriteYSpeed,X                     ;;C71C|C710+C710/C713\C71A;
                      JMP CODE_01C741                           ;;C71E|C712+C712/C715\C71C;
                                                                ;;                        ;
                    + LDA.W !SpriteMisc1528,X                   ;;C721|C715+C715/C718\C71F;
                      AND.B #$01                                ;;C724|C718+C718/C71B\C722;
                      TAY                                       ;;C726|C71A+C71A/C71D\C724;
                      LDA.B !SpriteXSpeed,X                     ;;C727|C71B+C71B/C71E\C725;
                      CLC                                       ;;C729|C71D+C71D/C720\C727;
                      ADC.W DATA_01C6E6,Y                       ;;C72A|C71E+C71E/C721\C728;
                      STA.B !SpriteXSpeed,X                     ;;C72D|C721+C721/C724\C72B;
                      CMP.W DATA_01C6E8,Y                       ;;C72F|C723+C723/C726\C72D;
                      BNE +                                     ;;C732|C726+C726/C729\C730;
                      INC.W !SpriteMisc1528,X                   ;;C734|C728+C728/C72B\C732;
                    + LDA.B !SpriteXSpeed,X                     ;;C737|C72B+C72B/C72E\C735;
                      BPL +                                     ;;C739|C72D+C72D/C730\C737;
                      INY                                       ;;C73B|C72F+C72F/C732\C739;
                    + LDA.W DATA_01C6EA,Y                       ;;C73C|C730+C730/C733\C73A;
                      CLC                                       ;;C73F|C733+C733/C736\C73D;
                      ADC.B #$06                                ;;C740|C734+C734/C737\C73E;
                      STA.B !SpriteYSpeed,X                     ;;C742|C736+C736/C739\C740;
                      JSR SubOffscreen0Bnk1                     ;;C744|C738+C738/C73B\C742;
                      JSR SubSprXPosNoGrvty                     ;;C747|C73B+C73B/C73E\C745;
                      JSR SubSprYPosNoGrvty                     ;;C74A|C73E+C73E/C741\C748;
CODE_01C741:          JSR UpdateDirection                       ;;C74D|C741+C741/C744\C74B;
CODE_01C744:          JSR CODE_01C4AC                           ;;C750|C744+C744/C747\C74E;
                      JMP CODE_01C61A                           ;;C753|C747+C747/C74A\C751;
                                                                ;;                        ;
InitBrwnChainPlat:    LDA.B #$80                                ;;C756|C74A+C74A/C74D\C754;
                      STA.W !SpriteMisc151C,X                   ;;C758|C74C+C74C/C74F\C756;
                      LDA.B #$01                                ;;C75B|C74F+C74F/C752\C759;
                      STA.W !SpriteMisc1528,X                   ;;C75D|C751+C751/C754\C75B;
                      LDA.B !SpriteXPosLow,X                    ;;C760|C754+C754/C757\C75E;
                      CLC                                       ;;C762|C756+C756/C759\C760;
                      ADC.B #$78                                ;;C763|C757+C757/C75A\C761;
                      STA.B !SpriteXPosLow,X                    ;;C765|C759+C759/C75C\C763;
                      LDA.W !SpriteYPosHigh,X                   ;;C767|C75B+C75B/C75E\C765;
                      ADC.B #$00                                ;;C76A|C75E+C75E/C761\C768;
                      STA.W !SpriteYPosHigh,X                   ;;C76C|C760+C760/C763\C76A;
                      LDA.B !SpriteYPosLow,X                    ;;C76F|C763+C763/C766\C76D;
                      CLC                                       ;;C771|C765+C765/C768\C76F;
                      ADC.B #$68                                ;;C772|C766+C766/C769\C770;
                      STA.B !SpriteYPosLow,X                    ;;C774|C768+C768/C76B\C772;
                      LDA.W !SpriteXPosHigh,X                   ;;C776|C76A+C76A/C76D\C774;
                      ADC.B #$00                                ;;C779|C76D+C76D/C770\C777;
                      STA.W !SpriteXPosHigh,X                   ;;C77B|C76F+C76F/C772\C779;
                      RTS                                       ;;C77E|C772+C772/C775\C77C; Return 
                                                                ;;                        ;
BrownChainedPlat:     JSR SubOffscreen2Bnk1                     ;;C77F|C773+C773/C776\C77D;
                      LDA.B !SpriteLock                         ;;C782|C776+C776/C779\C780; \ Branch if sprites locked 
                      BNE CODE_01C795                           ;;C784|C778+C778/C77B\C782; / 
                      LDA.B !TrueFrame                          ;;C786|C77A+C77A/C77D\C784;
                      AND.B #$03                                ;;C788|C77C+C77C/C77F\C786;
                      ORA.W !SpriteMisc1602,X                   ;;C78A|C77E+C77E/C781\C788;
                      BNE CODE_01C795                           ;;C78D|C781+C781/C784\C78B;
                      LDA.B #$01                                ;;C78F|C783+C783/C786\C78D;
                      LDY.W !SpriteMisc1504,X                   ;;C791|C785+C785/C788\C78F;
                      BEQ CODE_01C795                           ;;C794|C788+C788/C78B\C792;
                      BMI +                                     ;;C796|C78A+C78A/C78D\C794;
                      LDA.B #$FF                                ;;C798|C78C+C78C/C78F\C796;
                    + CLC                                       ;;C79A|C78E+C78E/C791\C798;
                      ADC.W !SpriteMisc1504,X                   ;;C79B|C78F+C78F/C792\C799;
                      STA.W !SpriteMisc1504,X                   ;;C79E|C792+C792/C795\C79C;
CODE_01C795:          LDA.W !SpriteMisc151C,X                   ;;C7A1|C795+C795/C798\C79F;
                      PHA                                       ;;C7A4|C798+C798/C79B\C7A2;
                      LDA.W !SpriteMisc1528,X                   ;;C7A5|C799+C799/C79C\C7A3;
                      PHA                                       ;;C7A8|C79C+C79C/C79F\C7A6;
                      LDA.B #$00                                ;;C7A9|C79D+C79D/C7A0\C7A7;
                      SEC                                       ;;C7AB|C79F+C79F/C7A2\C7A9;
                      SBC.W !SpriteMisc151C,X                   ;;C7AC|C7A0+C7A0/C7A3\C7AA;
                      STA.W !SpriteMisc151C,X                   ;;C7AF|C7A3+C7A3/C7A6\C7AD;
                      LDA.B #$02                                ;;C7B2|C7A6+C7A6/C7A9\C7B0;
                      SBC.W !SpriteMisc1528,X                   ;;C7B4|C7A8+C7A8/C7AB\C7B2;
                      AND.B #$01                                ;;C7B7|C7AB+C7AB/C7AE\C7B5;
                      STA.W !SpriteMisc1528,X                   ;;C7B9|C7AD+C7AD/C7B0\C7B7;
                      JSR CODE_01CACB                           ;;C7BC|C7B0+C7B0/C7B3\C7BA;
                      JSR CODE_01CB20                           ;;C7BF|C7B3+C7B3/C7B6\C7BD;
                      JSR CODE_01CB53                           ;;C7C2|C7B6+C7B6/C7B9\C7C0;
                      PLA                                       ;;C7C5|C7B9+C7B9/C7BC\C7C3;
                      STA.W !SpriteMisc1528,X                   ;;C7C6|C7BA+C7BA/C7BD\C7C4;
                      PLA                                       ;;C7C9|C7BD+C7BD/C7C0\C7C7;
                      STA.W !SpriteMisc151C,X                   ;;C7CA|C7BE+C7BE/C7C1\C7C8;
                      LDA.W !BrSwingPlatXPos                    ;;C7CD|C7C1+C7C1/C7C4\C7CB;
                      PHA                                       ;;C7D0|C7C4+C7C4/C7C7\C7CE;
                      SEC                                       ;;C7D1|C7C5+C7C5/C7C8\C7CF;
                      SBC.B !SpriteTableC2,X                    ;;C7D2|C7C6+C7C6/C7C9\C7D0;
                      STA.W !SpriteXMovement                    ;;C7D4|C7C8+C7C8/C7CB\C7D2;
                      PLA                                       ;;C7D7|C7CB+C7CB/C7CE\C7D5;
                      STA.B !SpriteTableC2,X                    ;;C7D8|C7CC+C7CC/C7CF\C7D6;
                      LDY.W !SpriteOAMIndex,X                   ;;C7DA|C7CE+C7CE/C7D1\C7D8; Y = Index into sprite OAM 
                      LDA.W !BrSwingPlatYPos                    ;;C7DD|C7D1+C7D1/C7D4\C7DB;
                      SEC                                       ;;C7E0|C7D4+C7D4/C7D7\C7DE;
                      SBC.B !Layer1YPos                         ;;C7E1|C7D5+C7D5/C7D8\C7DF;
                      SEC                                       ;;C7E3|C7D7+C7D7/C7DA\C7E1;
                      SBC.B #$08                                ;;C7E4|C7D8+C7D8/C7DB\C7E2;
                      STA.W !OAMTileYPos+$100,Y                 ;;C7E6|C7DA+C7DA/C7DD\C7E4;
                      LDA.W !BrSwingPlatXPos                    ;;C7E9|C7DD+C7DD/C7E0\C7E7;
                      SEC                                       ;;C7EC|C7E0+C7E0/C7E3\C7EA;
                      SBC.B !Layer1XPos                         ;;C7ED|C7E1+C7E1/C7E4\C7EB;
                      SEC                                       ;;C7EF|C7E3+C7E3/C7E6\C7ED;
                      SBC.B #$08                                ;;C7F0|C7E4+C7E4/C7E7\C7EE;
                      STA.W !OAMTileXPos+$100,Y                 ;;C7F2|C7E6+C7E6/C7E9\C7F0;
                      LDA.B #$A2                                ;;C7F5|C7E9+C7E9/C7EC\C7F3;
                      STA.W !OAMTileNo+$100,Y                   ;;C7F7|C7EB+C7EB/C7EE\C7F5;
                      LDA.B #$31                                ;;C7FA|C7EE+C7EE/C7F1\C7F8;
                      STA.W !OAMTileAttr+$100,Y                 ;;C7FC|C7F0+C7F0/C7F3\C7FA;
                      LDY.B #$00                                ;;C7FF|C7F3+C7F3/C7F6\C7FD;
                      LDA.W !BrSwingPlatYPos                    ;;C801|C7F5+C7F5/C7F8\C7FF;
                      SEC                                       ;;C804|C7F8+C7F8/C7FB\C802;
                      SBC.W !BrSwingCenterYPos                  ;;C805|C7F9+C7F9/C7FC\C803;
                      BPL +                                     ;;C808|C7FC+C7FC/C7FF\C806;
                      EOR.B #$FF                                ;;C80A|C7FE+C7FE/C801\C808;
                      INC A                                     ;;C80C|C800+C800/C803\C80A;
                      INY                                       ;;C80D|C801+C801/C804\C80B;
                    + STY.B !_0                                 ;;C80E|C802+C802/C805\C80C;
                      STA.W !HW_WRDIV+1                         ;;C810|C804+C804/C807\C80E; Dividend (High-Byte)
                      STZ.W !HW_WRDIV                           ;;C813|C807+C807/C80A\C811; Dividend (Low Byte)
                      LDA.B #$05                                ;;C816|C80A+C80A/C80D\C814;
                      STA.W !HW_WRDIV+2                         ;;C818|C80C+C80C/C80F\C816; Divisor B
                      JSR DoNothing                             ;;C81B|C80F+C80F/C812\C819;
                      LDA.W !HW_RDDIV                           ;;C81E|C812+C812/C815\C81C; Quotient of Divide Result (Low Byte)
                      STA.B !_2                                 ;;C821|C815+C815/C818\C81F;
                      STA.B !_6                                 ;;C823|C817+C817/C81A\C821;
                      LDA.W !HW_RDDIV+1                         ;;C825|C819+C819/C81C\C823; Quotient of Divide Result (High Byte)
                      STA.B !_3                                 ;;C828|C81C+C81C/C81F\C826;
                      STA.B !_7                                 ;;C82A|C81E+C81E/C821\C828;
                      LDY.B #$00                                ;;C82C|C820+C820/C823\C82A;
                      LDA.W !BrSwingPlatXPos                    ;;C82E|C822+C822/C825\C82C;
                      SEC                                       ;;C831|C825+C825/C828\C82F;
                      SBC.W !BrSwingCenterXPos                  ;;C832|C826+C826/C829\C830;
                      BPL +                                     ;;C835|C829+C829/C82C\C833;
                      EOR.B #$FF                                ;;C837|C82B+C82B/C82E\C835;
                      INC A                                     ;;C839|C82D+C82D/C830\C837;
                      INY                                       ;;C83A|C82E+C82E/C831\C838;
                    + STY.B !_1                                 ;;C83B|C82F+C82F/C832\C839;
                      STA.W !HW_WRDIV+1                         ;;C83D|C831+C831/C834\C83B; Dividend (High-Byte)
                      STZ.W !HW_WRDIV                           ;;C840|C834+C834/C837\C83E; Dividend (Low Byte)
                      LDA.B #$05                                ;;C843|C837+C837/C83A\C841;
                      STA.W !HW_WRDIV+2                         ;;C845|C839+C839/C83C\C843; Divisor B
                      JSR DoNothing                             ;;C848|C83C+C83C/C83F\C846;
                      LDA.W !HW_RDDIV                           ;;C84B|C83F+C83F/C842\C849; Quotient of Divide Result (Low Byte)
                      STA.B !_4                                 ;;C84E|C842+C842/C845\C84C;
                      STA.B !_8                                 ;;C850|C844+C844/C847\C84E;
                      LDA.W !HW_RDDIV+1                         ;;C852|C846+C846/C849\C850; Quotient of Divide Result (High Byte)
                      STA.B !_5                                 ;;C855|C849+C849/C84C\C853;
                      STA.B !_9                                 ;;C857|C84B+C84B/C84E\C855;
                      LDY.W !SpriteOAMIndex,X                   ;;C859|C84D+C84D/C850\C857; Y = Index into sprite OAM 
                      INY                                       ;;C85C|C850+C850/C853\C85A;
                      INY                                       ;;C85D|C851+C851/C854\C85B;
                      INY                                       ;;C85E|C852+C852/C855\C85C;
                      INY                                       ;;C85F|C853+C853/C856\C85D;
                      LDA.W !BrSwingCenterYPos                  ;;C860|C854+C854/C857\C85E;
                      SEC                                       ;;C863|C857+C857/C85A\C861;
                      SBC.B !Layer1YPos                         ;;C864|C858+C858/C85B\C862;
                      SEC                                       ;;C866|C85A+C85A/C85D\C864;
                      SBC.B #$08                                ;;C867|C85B+C85B/C85E\C865;
                      STA.B !_A                                 ;;C869|C85D+C85D/C860\C867;
                      STA.W !OAMTileYPos+$100,Y                 ;;C86B|C85F+C85F/C862\C869;
                      LDA.W !BrSwingCenterXPos                  ;;C86E|C862+C862/C865\C86C;
                      SEC                                       ;;C871|C865+C865/C868\C86F;
                      SBC.B !Layer1XPos                         ;;C872|C866+C866/C869\C870;
                      SEC                                       ;;C874|C868+C868/C86B\C872;
                      SBC.B #$08                                ;;C875|C869+C869/C86C\C873;
                      STA.B !_B                                 ;;C877|C86B+C86B/C86E\C875;
                      STA.W !OAMTileXPos+$100,Y                 ;;C879|C86D+C86D/C870\C877;
                      LDA.B #$A2                                ;;C87C|C870+C870/C873\C87A;
                      STA.W !OAMTileNo+$100,Y                   ;;C87E|C872+C872/C875\C87C;
                      LDA.B #$31                                ;;C881|C875+C875/C878\C87F;
                      STA.W !OAMTileAttr+$100,Y                 ;;C883|C877+C877/C87A\C881;
                      LDX.B #$03                                ;;C886|C87A+C87A/C87D\C884;
CODE_01C87C:          INY                                       ;;C888|C87C+C87C/C87F\C886;
                      INY                                       ;;C889|C87D+C87D/C880\C887;
                      INY                                       ;;C88A|C87E+C87E/C881\C888;
                      INY                                       ;;C88B|C87F+C87F/C882\C889;
                      LDA.B !_0                                 ;;C88C|C880+C880/C883\C88A;
                      BNE CODE_01C88E                           ;;C88E|C882+C882/C885\C88C;
                      LDA.B !_A                                 ;;C890|C884+C884/C887\C88E;
                      CLC                                       ;;C892|C886+C886/C889\C890;
                      ADC.B !_7                                 ;;C893|C887+C887/C88A\C891;
                      STA.W !OAMTileYPos+$100,Y                 ;;C895|C889+C889/C88C\C893;
                      BRA +                                     ;;C898|C88C+C88C/C88F\C896;
                                                                ;;                        ;
CODE_01C88E:          LDA.B !_A                                 ;;C89A|C88E+C88E/C891\C898;
                      SEC                                       ;;C89C|C890+C890/C893\C89A;
                      SBC.B !_7                                 ;;C89D|C891+C891/C894\C89B;
                      STA.W !OAMTileYPos+$100,Y                 ;;C89F|C893+C893/C896\C89D;
                    + LDA.B !_6                                 ;;C8A2|C896+C896/C899\C8A0;
                      CLC                                       ;;C8A4|C898+C898/C89B\C8A2;
                      ADC.B !_2                                 ;;C8A5|C899+C899/C89C\C8A3;
                      STA.B !_6                                 ;;C8A7|C89B+C89B/C89E\C8A5;
                      LDA.B !_7                                 ;;C8A9|C89D+C89D/C8A0\C8A7;
                      ADC.B !_3                                 ;;C8AB|C89F+C89F/C8A2\C8A9;
                      STA.B !_7                                 ;;C8AD|C8A1+C8A1/C8A4\C8AB;
                      LDA.B !_1                                 ;;C8AF|C8A3+C8A3/C8A6\C8AD;
                      BNE CODE_01C8B1                           ;;C8B1|C8A5+C8A5/C8A8\C8AF;
                      LDA.B !_B                                 ;;C8B3|C8A7+C8A7/C8AA\C8B1;
                      CLC                                       ;;C8B5|C8A9+C8A9/C8AC\C8B3;
                      ADC.B !_9                                 ;;C8B6|C8AA+C8AA/C8AD\C8B4;
                      STA.W !OAMTileXPos+$100,Y                 ;;C8B8|C8AC+C8AC/C8AF\C8B6;
                      BRA +                                     ;;C8BB|C8AF+C8AF/C8B2\C8B9;
                                                                ;;                        ;
CODE_01C8B1:          LDA.B !_B                                 ;;C8BD|C8B1+C8B1/C8B4\C8BB;
                      SEC                                       ;;C8BF|C8B3+C8B3/C8B6\C8BD;
                      SBC.B !_9                                 ;;C8C0|C8B4+C8B4/C8B7\C8BE;
                      STA.W !OAMTileXPos+$100,Y                 ;;C8C2|C8B6+C8B6/C8B9\C8C0;
                    + LDA.B !_8                                 ;;C8C5|C8B9+C8B9/C8BC\C8C3;
                      CLC                                       ;;C8C7|C8BB+C8BB/C8BE\C8C5;
                      ADC.B !_4                                 ;;C8C8|C8BC+C8BC/C8BF\C8C6;
                      STA.B !_8                                 ;;C8CA|C8BE+C8BE/C8C1\C8C8;
                      LDA.B !_9                                 ;;C8CC|C8C0+C8C0/C8C3\C8CA;
                      ADC.B !_5                                 ;;C8CE|C8C2+C8C2/C8C5\C8CC;
                      STA.B !_9                                 ;;C8D0|C8C4+C8C4/C8C7\C8CE;
                      LDA.B #$A2                                ;;C8D2|C8C6+C8C6/C8C9\C8D0;
                      STA.W !OAMTileNo+$100,Y                   ;;C8D4|C8C8+C8C8/C8CB\C8D2;
                      LDA.B #$31                                ;;C8D7|C8CB+C8CB/C8CE\C8D5;
                      STA.W !OAMTileAttr+$100,Y                 ;;C8D9|C8CD+C8CD/C8D0\C8D7;
                      DEX                                       ;;C8DC|C8D0+C8D0/C8D3\C8DA;
                      BPL CODE_01C87C                           ;;C8DD|C8D1+C8D1/C8D4\C8DB;
                      LDX.B #$03                                ;;C8DF|C8D3+C8D3/C8D6\C8DD;
                    - STX.B !_2                                 ;;C8E1|C8D5+C8D5/C8D8\C8DF;
                      INY                                       ;;C8E3|C8D7+C8D7/C8DA\C8E1;
                      INY                                       ;;C8E4|C8D8+C8D8/C8DB\C8E2;
                      INY                                       ;;C8E5|C8D9+C8D9/C8DC\C8E3;
                      INY                                       ;;C8E6|C8DA+C8DA/C8DD\C8E4;
                      LDA.W !BrSwingPlatYPos                    ;;C8E7|C8DB+C8DB/C8DE\C8E5;
                      SEC                                       ;;C8EA|C8DE+C8DE/C8E1\C8E8;
                      SBC.B !Layer1YPos                         ;;C8EB|C8DF+C8DF/C8E2\C8E9;
                      SEC                                       ;;C8ED|C8E1+C8E1/C8E4\C8EB;
                      SBC.B #$10                                ;;C8EE|C8E2+C8E2/C8E5\C8EC;
                      STA.W !OAMTileYPos+$100,Y                 ;;C8F0|C8E4+C8E4/C8E7\C8EE;
                      LDA.W !BrSwingPlatXPos                    ;;C8F3|C8E7+C8E7/C8EA\C8F1;
                      SEC                                       ;;C8F6|C8EA+C8EA/C8ED\C8F4;
                      SBC.B !Layer1XPos                         ;;C8F7|C8EB+C8EB/C8EE\C8F5;
                      CLC                                       ;;C8F9|C8ED+C8ED/C8F0\C8F7;
                      ADC.W DATA_01C9B7,X                       ;;C8FA|C8EE+C8EE/C8F1\C8F8;
                      STA.W !OAMTileXPos+$100,Y                 ;;C8FD|C8F1+C8F1/C8F4\C8FB;
                      LDA.W BrwnChainPlatTiles,X                ;;C900|C8F4+C8F4/C8F7\C8FE;
                      STA.W !OAMTileNo+$100,Y                   ;;C903|C8F7+C8F7/C8FA\C901;
                      LDA.B #$31                                ;;C906|C8FA+C8FA/C8FD\C904;
                      STA.W !OAMTileAttr+$100,Y                 ;;C908|C8FC+C8FC/C8FF\C906;
                      DEX                                       ;;C90B|C8FF+C8FF/C902\C909;
                      BPL -                                     ;;C90C|C900+C900/C903\C90A;
                      LDX.W !CurSpriteProcess                   ;;C90E|C902+C902/C905\C90C; X = Sprite index 
                      LDA.B #$09                                ;;C911|C905+C905/C908\C90F;
                      STA.B !_8                                 ;;C913|C907+C907/C90A\C911;
                      LDA.W !BrSwingCenterYPos                  ;;C915|C909+C909/C90C\C913;
                      SEC                                       ;;C918|C90C+C90C/C90F\C916;
                      SBC.B #$08                                ;;C919|C90D+C90D/C910\C917;
                      STA.B !_0                                 ;;C91B|C90F+C90F/C912\C919;
                      LDA.W !BrSwingCenterYPos+1                ;;C91D|C911+C911/C914\C91B;
                      SBC.B #$00                                ;;C920|C914+C914/C917\C91E;
                      STA.B !_1                                 ;;C922|C916+C916/C919\C920;
                      LDA.W !BrSwingCenterXPos                  ;;C924|C918+C918/C91B\C922;
                      SEC                                       ;;C927|C91B+C91B/C91E\C925;
                      SBC.B #$08                                ;;C928|C91C+C91C/C91F\C926;
                      STA.B !_2                                 ;;C92A|C91E+C91E/C921\C928;
                      LDA.W !BrSwingCenterXPos+1                ;;C92C|C920+C920/C923\C92A;
                      SBC.B #$00                                ;;C92F|C923+C923/C926\C92D;
                      STA.B !_3                                 ;;C931|C925+C925/C928\C92F;
                      LDY.W !SpriteOAMIndex,X                   ;;C933|C927+C927/C92A\C931; Y = Index into sprite OAM 
                      LDA.W !OAMTileYPos+$104,Y                 ;;C936|C92A+C92A/C92D\C934;
                      STA.B !_6                                 ;;C939|C92D+C92D/C930\C937;
                      LDA.W !OAMTileXPos+$104,Y                 ;;C93B|C92F+C92F/C932\C939;
                      STA.B !_7                                 ;;C93E|C932+C932/C935\C93C;
CODE_01C934:          TYA                                       ;;C940|C934+C934/C937\C93E;
                      LSR A                                     ;;C941|C935+C935/C938\C93F;
                      LSR A                                     ;;C942|C936+C936/C939\C940;
                      TAX                                       ;;C943|C937+C937/C93A\C941;
                      LDA.B #$02                                ;;C944|C938+C938/C93B\C942;
                      STA.W !OAMTileSize+$40,X                  ;;C946|C93A+C93A/C93D\C944;
                      LDX.B #$00                                ;;C949|C93D+C93D/C940\C947;
                      LDA.W !OAMTileXPos+$100,Y                 ;;C94B|C93F+C93F/C942\C949;
                      SEC                                       ;;C94E|C942+C942/C945\C94C;
                      SBC.B !_7                                 ;;C94F|C943+C943/C946\C94D;
                      BPL +                                     ;;C951|C945+C945/C948\C94F;
                      DEX                                       ;;C953|C947+C947/C94A\C951;
                    + CLC                                       ;;C954|C948+C948/C94B\C952;
                      ADC.B !_2                                 ;;C955|C949+C949/C94C\C953;
                      STA.B !_4                                 ;;C957|C94B+C94B/C94E\C955;
                      TXA                                       ;;C959|C94D+C94D/C950\C957;
                      ADC.B !_3                                 ;;C95A|C94E+C94E/C951\C958;
                      STA.B !_5                                 ;;C95C|C950+C950/C953\C95A;
                      JSR CODE_01B844                           ;;C95E|C952+C952/C955\C95C;
                      BCC +                                     ;;C961|C955+C955/C958\C95F;
                      TYA                                       ;;C963|C957+C957/C95A\C961;
                      LSR A                                     ;;C964|C958+C958/C95B\C962;
                      LSR A                                     ;;C965|C959+C959/C95C\C963;
                      TAX                                       ;;C966|C95A+C95A/C95D\C964;
                      LDA.B #$03                                ;;C967|C95B+C95B/C95E\C965;
                      STA.W !OAMTileSize+$40,X                  ;;C969|C95D+C95D/C960\C967;
                    + LDX.B #$00                                ;;C96C|C960+C960/C963\C96A;
                      LDA.W !OAMTileYPos+$100,Y                 ;;C96E|C962+C962/C965\C96C;
                      SEC                                       ;;C971|C965+C965/C968\C96F;
                      SBC.B !_6                                 ;;C972|C966+C966/C969\C970;
                      BPL +                                     ;;C974|C968+C968/C96B\C972;
                      DEX                                       ;;C976|C96A+C96A/C96D\C974;
                    + CLC                                       ;;C977|C96B+C96B/C96E\C975;
                      ADC.B !_0                                 ;;C978|C96C+C96C/C96F\C976;
                      STA.B !_9                                 ;;C97A|C96E+C96E/C971\C978;
                      TXA                                       ;;C97C|C970+C970/C973\C97A;
                      ADC.B !_1                                 ;;C97D|C971+C971/C974\C97B;
                      STA.B !_A                                 ;;C97F|C973+C973/C976\C97D;
                      JSR CODE_01C9BF                           ;;C981|C975+C975/C978\C97F;
                      BCC +                                     ;;C984|C978+C978/C97B\C982;
                      LDA.B #$F0                                ;;C986|C97A+C97A/C97D\C984;
                      STA.W !OAMTileYPos+$100,Y                 ;;C988|C97C+C97C/C97F\C986;
                    + LDA.B !_8                                 ;;C98B|C97F+C97F/C982\C989;
                      CMP.B #$09                                ;;C98D|C981+C981/C984\C98B;
                      BNE +                                     ;;C98F|C983+C983/C986\C98D;
                      LDA.B !_4                                 ;;C991|C985+C985/C988\C98F;
                      STA.W !BrSwingPlatXPos                    ;;C993|C987+C987/C98A\C991;
                      LDA.B !_5                                 ;;C996|C98A+C98A/C98D\C994;
                      STA.W !BrSwingPlatXPos+1                  ;;C998|C98C+C98C/C98F\C996;
                      LDA.B !_9                                 ;;C99B|C98F+C98F/C992\C999;
                      STA.W !BrSwingPlatYPos                    ;;C99D|C991+C991/C994\C99B;
                      LDA.B !_A                                 ;;C9A0|C994+C994/C997\C99E;
                      STA.W !BrSwingPlatYPos+1                  ;;C9A2|C996+C996/C999\C9A0;
                    + INY                                       ;;C9A5|C999+C999/C99C\C9A3;
                      INY                                       ;;C9A6|C99A+C99A/C99D\C9A4;
                      INY                                       ;;C9A7|C99B+C99B/C99E\C9A5;
                      INY                                       ;;C9A8|C99C+C99C/C99F\C9A6;
                      DEC.B !_8                                 ;;C9A9|C99D+C99D/C9A0\C9A7;
                      BPL CODE_01C934                           ;;C9AB|C99F+C99F/C9A2\C9A9;
                      LDX.W !CurSpriteProcess                   ;;C9AD|C9A1+C9A1/C9A4\C9AB; X = Sprite index 
                      LDY.W !SpriteOAMIndex,X                   ;;C9B0|C9A4+C9A4/C9A7\C9AE; Y = Index into sprite OAM 
                      LDA.B #$F0                                ;;C9B3|C9A7+C9A7/C9AA\C9B1;
                      STA.W !OAMTileYPos+$104,Y                 ;;C9B5|C9A9+C9A9/C9AC\C9B3;
                      LDA.B !SpriteLock                         ;;C9B8|C9AC+C9AC/C9AF\C9B6; \ Branch if sprites locked 
                      BNE +                                     ;;C9BA|C9AE+C9AE/C9B1\C9B8; / 
                      JSR CODE_01CCF0                           ;;C9BC|C9B0+C9B0/C9B3\C9BA;
                      JMP CODE_01C9EC                           ;;C9BF|C9B3+C9B3/C9B6\C9BD;
                                                                ;;                        ;
                    + RTS                                       ;;C9C2|C9B6+C9B6/C9B9\C9C0; Return 
                                                                ;;                        ;
                                                                ;;                        ;
DATA_01C9B7:          db $E0,$F0,$00,$10                        ;;C9C3|C9B7+C9B7/C9BA\C9C1;
                                                                ;;                        ;
BrwnChainPlatTiles:   db $60,$61,$61,$62                        ;;C9C7|C9BB+C9BB/C9BE\C9C5;
                                                                ;;                        ;
CODE_01C9BF:          REP #$20                                  ;;C9CB|C9BF+C9BF/C9C2\C9C9; Accum (16 bit) 
                      LDA.B !_9                                 ;;C9CD|C9C1+C9C1/C9C4\C9CB;
                      PHA                                       ;;C9CF|C9C3+C9C3/C9C6\C9CD;
                      CLC                                       ;;C9D0|C9C4+C9C4/C9C7\C9CE;
                      ADC.W #$0010                              ;;C9D1|C9C5+C9C5/C9C8\C9CF;
                      STA.B !_9                                 ;;C9D4|C9C8+C9C8/C9CB\C9D2;
                      SEC                                       ;;C9D6|C9CA+C9CA/C9CD\C9D4;
                      SBC.B !Layer1YPos                         ;;C9D7|C9CB+C9CB/C9CE\C9D5;
                      CMP.W #$0100                              ;;C9D9|C9CD+C9CD/C9D0\C9D7;
                      PLA                                       ;;C9DC|C9D0+C9D0/C9D3\C9DA;
                      STA.B !_9                                 ;;C9DD|C9D1+C9D1/C9D4\C9DB;
                      SEP #$20                                  ;;C9DF|C9D3+C9D3/C9D6\C9DD; Accum (8 bit) 
Return01C9D5:         RTS                                       ;;C9E1|C9D5+C9D5/C9D8\C9DF; Return 
                                                                ;;                        ;
                                                                ;;                        ;
DATA_01C9D6:          db $01,$FF                                ;;C9E2|C9D6+C9D6/C9D9\C9E0;
                                                                ;;                        ;
DATA_01C9D8:          db $40,$C0                                ;;C9E4|C9D8+C9D8/C9DB\C9E2;
                                                                ;;                        ;
CODE_01C9DA:          LDA.W !SpriteMisc160E,X                   ;;C9E6|C9DA+C9DA/C9DD\C9E4;
                      BEQ +                                     ;;C9E9|C9DD+C9DD/C9E0\C9E7;
                      STZ.W !SpriteMisc160E,X                   ;;C9EB|C9DF+C9DF/C9E2\C9E9;
CODE_01C9E2:          PHX                                       ;;C9EE|C9E2+C9E2/C9E5\C9EC;
                      JSL CODE_00E2BD                           ;;C9EF|C9E3+C9E3/C9E6\C9ED;
                      PLX                                       ;;C9F3|C9E7+C9E7/C9EA\C9F1;
                      STX.W !CurSpriteProcess                   ;;C9F4|C9E8+C9E8/C9EB\C9F2;
                    + RTS                                       ;;C9F7|C9EB+C9EB/C9EE\C9F5; Return 
                                                                ;;                        ;
CODE_01C9EC:          LDA.W !BrSwingPlatXPos+1                  ;;C9F8|C9EC+C9EC/C9EF\C9F6;
                      XBA                                       ;;C9FB|C9EF+C9EF/C9F2\C9F9;
                      LDA.W !BrSwingPlatXPos                    ;;C9FC|C9F0+C9F0/C9F3\C9FA;
                      REP #$20                                  ;;C9FF|C9F3+C9F3/C9F6\C9FD; Accum (16 bit) 
                      SEC                                       ;;CA01|C9F5+C9F5/C9F8\C9FF;
                      SBC.B !Layer1XPos                         ;;CA02|C9F6+C9F6/C9F9\CA00;
                      CLC                                       ;;CA04|C9F8+C9F8/C9FB\CA02;
                      ADC.W #$0010                              ;;CA05|C9F9+C9F9/C9FC\CA03;
                      CMP.W #$0120                              ;;CA08|C9FC+C9FC/C9FF\CA06;
                      SEP #$20                                  ;;CA0B|C9FF+C9FF/CA02\CA09; Accum (8 bit) 
                      ROL A                                     ;;CA0D|CA01+CA01/CA04\CA0B;
                      AND.B #$01                                ;;CA0E|CA02+CA02/CA05\CA0C;
                      ORA.B !SpriteLock                         ;;CA10|CA04+CA04/CA07\CA0E;
                      STA.W !SpriteWayOffscreenX,X              ;;CA12|CA06+CA06/CA09\CA10;
                      BNE Return01C9D5                          ;;CA15|CA09+CA09/CA0C\CA13;
                      JSR CODE_01CA9C                           ;;CA17|CA0B+CA0B/CA0E\CA15;
                      STZ.W !SpriteMisc1602,X                   ;;CA1A|CA0E+CA0E/CA11\CA18;
                      BCC CODE_01C9DA                           ;;CA1D|CA11+CA11/CA14\CA1B;
                      LDA.B #$01                                ;;CA1F|CA13+CA13/CA16\CA1D;
                      STA.W !SpriteMisc160E,X                   ;;CA21|CA15+CA15/CA18\CA1F;
                      LDA.W !BrSwingPlatYPos                    ;;CA24|CA18+CA18/CA1B\CA22;
                      SEC                                       ;;CA27|CA1B+CA1B/CA1E\CA25;
                      SBC.B !Layer1YPos                         ;;CA28|CA1C+CA1C/CA1F\CA26;
                      STA.B !_3                                 ;;CA2A|CA1E+CA1E/CA21\CA28;
                      SEC                                       ;;CA2C|CA20+CA20/CA23\CA2A;
                      SBC.B #$08                                ;;CA2D|CA21+CA21/CA24\CA2B;
                      STA.B !_E                                 ;;CA2F|CA23+CA23/CA26\CA2D;
                      LDA.B !PlayerYPosScrRel                   ;;CA31|CA25+CA25/CA28\CA2F;
                      CLC                                       ;;CA33|CA27+CA27/CA2A\CA31;
                      ADC.B #$18                                ;;CA34|CA28+CA28/CA2B\CA32;
                      CMP.B !_E                                 ;;CA36|CA2A+CA2A/CA2D\CA34;
                      BCS Return01CA9B                          ;;CA38|CA2C+CA2C/CA2F\CA36;
                      LDA.B !PlayerYSpeed                       ;;CA3A|CA2E+CA2E/CA31\CA38;
                      BMI CODE_01C9E2                           ;;CA3C|CA30+CA30/CA33\CA3A;
                      STZ.B !PlayerYSpeed                       ;;CA3E|CA32+CA32/CA35\CA3C;
                      LDA.B #$03                                ;;CA40|CA34+CA34/CA37\CA3E;
                      STA.W !StandOnSolidSprite                 ;;CA42|CA36+CA36/CA39\CA40;
                      STA.W !SpriteMisc1602,X                   ;;CA45|CA39+CA39/CA3C\CA43;
                      LDA.B #$28                                ;;CA48|CA3C+CA3C/CA3F\CA46;
                      LDY.W !PlayerRidingYoshi                  ;;CA4A|CA3E+CA3E/CA41\CA48;
                      BEQ +                                     ;;CA4D|CA41+CA41/CA44\CA4B;
                      LDA.B #$38                                ;;CA4F|CA43+CA43/CA46\CA4D;
                    + STA.B !_F                                 ;;CA51|CA45+CA45/CA48\CA4F;
                      LDA.W !BrSwingPlatYPos                    ;;CA53|CA47+CA47/CA4A\CA51;
                      SEC                                       ;;CA56|CA4A+CA4A/CA4D\CA54;
                      SBC.B !_F                                 ;;CA57|CA4B+CA4B/CA4E\CA55;
                      STA.B !PlayerYPosNext                     ;;CA59|CA4D+CA4D/CA50\CA57;
                      LDA.W !BrSwingPlatYPos+1                  ;;CA5B|CA4F+CA4F/CA52\CA59;
                      SBC.B #$00                                ;;CA5E|CA52+CA52/CA55\CA5C;
                      STA.B !PlayerYPosNext+1                   ;;CA60|CA54+CA54/CA57\CA5E;
                      LDA.B !PlayerBlockedDir                   ;;CA62|CA56+CA56/CA59\CA60;
                      AND.B #$03                                ;;CA64|CA58+CA58/CA5B\CA62;
                      BNE CODE_01CA6E                           ;;CA66|CA5A+CA5A/CA5D\CA64;
                      LDY.B #$00                                ;;CA68|CA5C+CA5C/CA5F\CA66;
                      LDA.W !SpriteXMovement                    ;;CA6A|CA5E+CA5E/CA61\CA68;
                      BPL +                                     ;;CA6D|CA61+CA61/CA64\CA6B;
                      DEY                                       ;;CA6F|CA63+CA63/CA66\CA6D;
                    + CLC                                       ;;CA70|CA64+CA64/CA67\CA6E;
                      ADC.B !PlayerXPosNext                     ;;CA71|CA65+CA65/CA68\CA6F;
                      STA.B !PlayerXPosNext                     ;;CA73|CA67+CA67/CA6A\CA71;
                      TYA                                       ;;CA75|CA69+CA69/CA6C\CA73;
                      ADC.B !PlayerXPosNext+1                   ;;CA76|CA6A+CA6A/CA6D\CA74;
                      STA.B !PlayerXPosNext+1                   ;;CA78|CA6C+CA6C/CA6F\CA76;
CODE_01CA6E:          JSR CODE_01C9E2                           ;;CA7A|CA6E+CA6E/CA71\CA78;
                      LDA.B !byetudlrFrame                      ;;CA7D|CA71+CA71/CA74\CA7B;
                      BMI +                                     ;;CA7F|CA73+CA73/CA76\CA7D;
                      LDA.B #$FF                                ;;CA81|CA75+CA75/CA78\CA7F;
                      STA.B !PlayerHiddenTiles                  ;;CA83|CA77+CA77/CA7A\CA81;
                   if ver_is_ntsc(!_VER)              ;\   IF   ;;++++++++++++++++++++++++; J, U, & SS
                    + LDA.B !TrueFrame                          ;;CA85|CA79+CA79          ;
                      LSR A                                     ;;CA87|CA7B+CA7B          ;
                      BCC Return01CA9B                          ;;CA88|CA7C+CA7C          ;
                      LDA.W !SpriteMisc151C,X                   ;;CA8A|CA7E+CA7E          ;
                      CLC                                       ;;CA8D|CA81+CA81          ;
                      ADC.B #$80                                ;;CA8E|CA82+CA82          ;
                      LDA.W !SpriteMisc1528,X                   ;;CA90|CA84+CA84          ;
                      ADC.B #$00                                ;;CA93|CA87+CA87          ;
                      AND.B #$01                                ;;CA95|CA89+CA89          ;
                      TAY                                       ;;CA97|CA8B+CA8B          ;
                   else                               ;<  ELSE  ;;------------------------; E0 & E1
                    + LDA.W !SpriteMisc151C,X                   ;;              /CA7C\CA83;
                      CLC                                       ;;              /CA7F\CA86;
                      ADC.B #$80                                ;;              /CA80\CA87;
                      LDA.W !SpriteMisc1528,X                   ;;              /CA82\CA89;
                      ADC.B #$00                                ;;              /CA85\CA8C;
                      AND.B #$01                                ;;              /CA87\CA8E;
                      TAY                                       ;;              /CA89\CA90;
                      LDA.W !SpriteMisc1504,X                   ;;              /CA8A\CA91;
                      BEQ +                                     ;;              /CA8D\CA94;
                      EOR.W DATA_01C9D8,Y                       ;;              /CA8F\CA96;
                      BPL +                                     ;;              /CA92\CA99;
                      LDA.B !TrueFrame                          ;;              /CA94\CA9B;
                      LSR A                                     ;;              /CA96\CA9D;
                      BCC Return01CA9B                          ;;              /CA97\CA9E;
                   endif                              ;/ ENDIF  ;;++++++++++++++++++++++++;
                    + LDA.W !SpriteMisc1504,X                   ;;CA98|CA8C+CA8C/CA99\CAA0;
                      CMP.W DATA_01C9D8,Y                       ;;CA9B|CA8F+CA8F/CA9C\CAA3;
                      BEQ Return01CA9B                          ;;CA9E|CA92+CA92/CA9F\CAA6;
                      CLC                                       ;;CAA0|CA94+CA94/CAA1\CAA8;
                      ADC.W DATA_01C9D6,Y                       ;;CAA1|CA95+CA95/CAA2\CAA9;
                      STA.W !SpriteMisc1504,X                   ;;CAA4|CA98+CA98/CAA5\CAAC;
Return01CA9B:         RTS                                       ;;CAA7|CA9B+CA9B/CAA8\CAAF; Return 
                                                                ;;                        ;
CODE_01CA9C:          LDA.W !BrSwingPlatXPos                    ;;CAA8|CA9C+CA9C/CAA9\CAB0;
                      SEC                                       ;;CAAB|CA9F+CA9F/CAAC\CAB3;
                      SBC.B #$18                                ;;CAAC|CAA0+CAA0/CAAD\CAB4;
                      STA.B !_4                                 ;;CAAE|CAA2+CAA2/CAAF\CAB6;
                      LDA.W !BrSwingPlatXPos+1                  ;;CAB0|CAA4+CAA4/CAB1\CAB8;
                      SBC.B #$00                                ;;CAB3|CAA7+CAA7/CAB4\CABB;
                      STA.B !_A                                 ;;CAB5|CAA9+CAA9/CAB6\CABD;
                      LDA.B #$40                                ;;CAB7|CAAB+CAAB/CAB8\CABF;
                      STA.B !_6                                 ;;CAB9|CAAD+CAAD/CABA\CAC1;
                      LDA.W !BrSwingPlatYPos                    ;;CABB|CAAF+CAAF/CABC\CAC3;
                      SEC                                       ;;CABE|CAB2+CAB2/CABF\CAC6;
                      SBC.B #$0C                                ;;CABF|CAB3+CAB3/CAC0\CAC7;
                      STA.B !_5                                 ;;CAC1|CAB5+CAB5/CAC2\CAC9;
                      LDA.W !BrSwingPlatYPos+1                  ;;CAC3|CAB7+CAB7/CAC4\CACB;
                      SBC.B #$00                                ;;CAC6|CABA+CABA/CAC7\CACE;
                      STA.B !_B                                 ;;CAC8|CABC+CABC/CAC9\CAD0;
                      LDA.B #$13                                ;;CACA|CABE+CABE/CACB\CAD2;
                      STA.B !_7                                 ;;CACC|CAC0+CAC0/CACD\CAD4;
                      JSL GetMarioClipping                      ;;CACE|CAC2+CAC2/CACF\CAD6;
                      JSL CheckForContact                       ;;CAD2|CAC6+CAC6/CAD3\CADA;
                      RTS                                       ;;CAD6|CACA+CACA/CAD7\CADE; Return 
                                                                ;;                        ;
CODE_01CACB:          LDA.B #$50                                ;;CAD7|CACB+CACB/CAD8\CADF;
                      STA.W !BrSwingRadiusX                     ;;CAD9|CACD+CACD/CADA\CAE1;
                      STZ.W !BrSwingRadiusY                     ;;CADC|CAD0+CAD0/CADD\CAE4;
                      STZ.W !BrSwingRadiusX+1                   ;;CADF|CAD3+CAD3/CAE0\CAE7;
                      STZ.W !BrSwingRadiusY+1                   ;;CAE2|CAD6+CAD6/CAE3\CAEA;
                      LDA.B !SpriteXPosLow,X                    ;;CAE5|CAD9+CAD9/CAE6\CAED;
                      STA.W !BrSwingXDist                       ;;CAE7|CADB+CADB/CAE8\CAEF;
                      LDA.W !SpriteYPosHigh,X                   ;;CAEA|CADE+CADE/CAEB\CAF2;
                      STA.W !BrSwingXDist+1                     ;;CAED|CAE1+CAE1/CAEE\CAF5;
                      LDA.W !BrSwingXDist                       ;;CAF0|CAE4+CAE4/CAF1\CAF8;
                      SEC                                       ;;CAF3|CAE7+CAE7/CAF4\CAFB;
                      SBC.W !BrSwingRadiusX                     ;;CAF4|CAE8+CAE8/CAF5\CAFC;
                      STA.W !BrSwingCenterXPos                  ;;CAF7|CAEB+CAEB/CAF8\CAFF;
                      LDA.W !BrSwingXDist+1                     ;;CAFA|CAEE+CAEE/CAFB\CB02;
                      SBC.W !BrSwingRadiusX+1                   ;;CAFD|CAF1+CAF1/CAFE\CB05;
                      STA.W !BrSwingCenterXPos+1                ;;CB00|CAF4+CAF4/CB01\CB08;
                      LDA.B !SpriteYPosLow,X                    ;;CB03|CAF7+CAF7/CB04\CB0B;
                      STA.W !BrSwingYDist                       ;;CB05|CAF9+CAF9/CB06\CB0D;
                      LDA.W !SpriteXPosHigh,X                   ;;CB08|CAFC+CAFC/CB09\CB10;
                      STA.W !BrSwingYDist+1                     ;;CB0B|CAFF+CAFF/CB0C\CB13;
                      LDA.W !BrSwingYDist                       ;;CB0E|CB02+CB02/CB0F\CB16;
                      SEC                                       ;;CB11|CB05+CB05/CB12\CB19;
                      SBC.W !BrSwingRadiusY                     ;;CB12|CB06+CB06/CB13\CB1A;
                      STA.W !BrSwingCenterYPos                  ;;CB15|CB09+CB09/CB16\CB1D;
                      LDA.W !BrSwingYDist+1                     ;;CB18|CB0C+CB0C/CB19\CB20;
                      SBC.W !BrSwingRadiusY+1                   ;;CB1B|CB0F+CB0F/CB1C\CB23;
                      STA.W !BrSwingCenterYPos+1                ;;CB1E|CB12+CB12/CB1F\CB26;
                      LDA.W !SpriteMisc151C,X                   ;;CB21|CB15+CB15/CB22\CB29;
                      STA.B !Mode7Angle                         ;;CB24|CB18+CB18/CB25\CB2C;
                      LDA.W !SpriteMisc1528,X                   ;;CB26|CB1A+CB1A/CB27\CB2E;
                      STA.B !Mode7Angle+1                       ;;CB29|CB1D+CB1D/CB2A\CB31;
                      RTS                                       ;;CB2B|CB1F+CB1F/CB2C\CB33; Return 
                                                                ;;                        ;
CODE_01CB20:          LDA.B !Mode7Angle+1                       ;;CB2C|CB20+CB20/CB2D\CB34;
                      STA.W !BrSwingAngleParity                 ;;CB2E|CB22+CB22/CB2F\CB36;
                      PHX                                       ;;CB31|CB25+CB25/CB32\CB39;
                      REP #$30                                  ;;CB32|CB26+CB26/CB33\CB3A; Index (16 bit) Accum (16 bit) 
                      LDA.B !Mode7Angle                         ;;CB34|CB28+CB28/CB35\CB3C;
                      ASL A                                     ;;CB36|CB2A+CB2A/CB37\CB3E;
                      AND.W #$01FF                              ;;CB37|CB2B+CB2B/CB38\CB3F;
                      TAX                                       ;;CB3A|CB2E+CB2E/CB3B\CB42;
                      LDA.L CircleCoords,X                      ;;CB3B|CB2F+CB2F/CB3C\CB43;
                      STA.W !BrSwingSine                        ;;CB3F|CB33+CB33/CB40\CB47;
                      LDA.B !Mode7Angle                         ;;CB42|CB36+CB36/CB43\CB4A;
                      CLC                                       ;;CB44|CB38+CB38/CB45\CB4C;
                      ADC.W #$0080                              ;;CB45|CB39+CB39/CB46\CB4D;
                      STA.B !_0                                 ;;CB48|CB3C+CB3C/CB49\CB50;
                      ASL A                                     ;;CB4A|CB3E+CB3E/CB4B\CB52;
                      AND.W #$01FF                              ;;CB4B|CB3F+CB3F/CB4C\CB53;
                      TAX                                       ;;CB4E|CB42+CB42/CB4F\CB56;
                      LDA.L CircleCoords,X                      ;;CB4F|CB43+CB43/CB50\CB57;
                      STA.W !BrSwingCosine                      ;;CB53|CB47+CB47/CB54\CB5B;
                      SEP #$30                                  ;;CB56|CB4A+CB4A/CB57\CB5E; Index (8 bit) Accum (8 bit) 
                      LDA.B !_1                                 ;;CB58|CB4C+CB4C/CB59\CB60;
                      STA.W !BrSwingAngleParity+1               ;;CB5A|CB4E+CB4E/CB5B\CB62;
                      PLX                                       ;;CB5D|CB51+CB51/CB5E\CB65;
                      RTS                                       ;;CB5E|CB52+CB52/CB5F\CB66; Return 
                                                                ;;                        ;
CODE_01CB53:          REP #$20                                  ;;CB5F|CB53+CB53/CB60\CB67; Accum (16 bit) 
                      LDA.W !BrSwingCosine                      ;;CB61|CB55+CB55/CB62\CB69;
                      STA.B !_2                                 ;;CB64|CB58+CB58/CB65\CB6C;
                      LDA.W !BrSwingRadiusX                     ;;CB66|CB5A+CB5A/CB67\CB6E;
                      STA.B !_0                                 ;;CB69|CB5D+CB5D/CB6A\CB71;
                      SEP #$20                                  ;;CB6B|CB5F+CB5F/CB6C\CB73; Accum (8 bit) 
                      JSR CODE_01CC28                           ;;CB6D|CB61+CB61/CB6E\CB75;
                      LDA.W !BrSwingAngleParity+1               ;;CB70|CB64+CB64/CB71\CB78;
                      LSR A                                     ;;CB73|CB67+CB67/CB74\CB7B;
                      REP #$20                                  ;;CB74|CB68+CB68/CB75\CB7C; Accum (16 bit) 
                      LDA.B !_4                                 ;;CB76|CB6A+CB6A/CB77\CB7E;
                      BCC +                                     ;;CB78|CB6C+CB6C/CB79\CB80;
                      EOR.W #$FFFF                              ;;CB7A|CB6E+CB6E/CB7B\CB82;
                      INC A                                     ;;CB7D|CB71+CB71/CB7E\CB85;
                    + STA.B !_8                                 ;;CB7E|CB72+CB72/CB7F\CB86;
                      LDA.B !_6                                 ;;CB80|CB74+CB74/CB81\CB88;
                      BCC +                                     ;;CB82|CB76+CB76/CB83\CB8A;
                      EOR.W #$FFFF                              ;;CB84|CB78+CB78/CB85\CB8C;
                      INC A                                     ;;CB87|CB7B+CB7B/CB88\CB8F;
                    + STA.B !_A                                 ;;CB88|CB7C+CB7C/CB89\CB90;
                      LDA.W !BrSwingSine                        ;;CB8A|CB7E+CB7E/CB8B\CB92;
                      STA.B !_2                                 ;;CB8D|CB81+CB81/CB8E\CB95;
                      LDA.W !BrSwingRadiusY                     ;;CB8F|CB83+CB83/CB90\CB97;
                      STA.B !_0                                 ;;CB92|CB86+CB86/CB93\CB9A;
                      SEP #$20                                  ;;CB94|CB88+CB88/CB95\CB9C; Accum (8 bit) 
                      JSR CODE_01CC28                           ;;CB96|CB8A+CB8A/CB97\CB9E;
                      LDA.W !BrSwingAngleParity                 ;;CB99|CB8D+CB8D/CB9A\CBA1;
                      LSR A                                     ;;CB9C|CB90+CB90/CB9D\CBA4;
                      REP #$20                                  ;;CB9D|CB91+CB91/CB9E\CBA5; Accum (16 bit) 
                      LDA.B !_4                                 ;;CB9F|CB93+CB93/CBA0\CBA7;
                      BCC +                                     ;;CBA1|CB95+CB95/CBA2\CBA9;
                      EOR.W #$FFFF                              ;;CBA3|CB97+CB97/CBA4\CBAB;
                      INC A                                     ;;CBA6|CB9A+CB9A/CBA7\CBAE;
                    + STA.B !_4                                 ;;CBA7|CB9B+CB9B/CBA8\CBAF;
                      LDA.B !_6                                 ;;CBA9|CB9D+CB9D/CBAA\CBB1;
                      BCC +                                     ;;CBAB|CB9F+CB9F/CBAC\CBB3;
                      EOR.W #$FFFF                              ;;CBAD|CBA1+CBA1/CBAE\CBB5;
                      INC A                                     ;;CBB0|CBA4+CBA4/CBB1\CBB8;
                    + STA.B !_6                                 ;;CBB1|CBA5+CBA5/CBB2\CBB9;
                      LDA.B !_4                                 ;;CBB3|CBA7+CBA7/CBB4\CBBB;
                      CLC                                       ;;CBB5|CBA9+CBA9/CBB6\CBBD;
                      ADC.B !_8                                 ;;CBB6|CBAA+CBAA/CBB7\CBBE;
                      STA.B !_4                                 ;;CBB8|CBAC+CBAC/CBB9\CBC0;
                      LDA.B !_6                                 ;;CBBA|CBAE+CBAE/CBBB\CBC2;
                      ADC.B !_A                                 ;;CBBC|CBB0+CBB0/CBBD\CBC4;
                      STA.B !_6                                 ;;CBBE|CBB2+CBB2/CBBF\CBC6;
                      LDA.B !_5                                 ;;CBC0|CBB4+CBB4/CBC1\CBC8;
                      CLC                                       ;;CBC2|CBB6+CBB6/CBC3\CBCA;
                      ADC.W !BrSwingCenterXPos                  ;;CBC3|CBB7+CBB7/CBC4\CBCB;
                      STA.W !BrSwingPlatXPos                    ;;CBC6|CBBA+CBBA/CBC7\CBCE;
                      LDA.W !BrSwingCosine                      ;;CBC9|CBBD+CBBD/CBCA\CBD1;
                      STA.B !_2                                 ;;CBCC|CBC0+CBC0/CBCD\CBD4;
                      LDA.W !BrSwingRadiusY                     ;;CBCE|CBC2+CBC2/CBCF\CBD6;
                      STA.B !_0                                 ;;CBD1|CBC5+CBC5/CBD2\CBD9;
                      SEP #$20                                  ;;CBD3|CBC7+CBC7/CBD4\CBDB; Accum (8 bit) 
                      JSR CODE_01CC28                           ;;CBD5|CBC9+CBC9/CBD6\CBDD;
                      LDA.W !BrSwingAngleParity+1               ;;CBD8|CBCC+CBCC/CBD9\CBE0;
                      LSR A                                     ;;CBDB|CBCF+CBCF/CBDC\CBE3;
                      REP #$20                                  ;;CBDC|CBD0+CBD0/CBDD\CBE4; Accum (16 bit) 
                      LDA.B !_4                                 ;;CBDE|CBD2+CBD2/CBDF\CBE6;
                      BCC +                                     ;;CBE0|CBD4+CBD4/CBE1\CBE8;
                      EOR.W #$FFFF                              ;;CBE2|CBD6+CBD6/CBE3\CBEA;
                      INC A                                     ;;CBE5|CBD9+CBD9/CBE6\CBED;
                    + STA.B !_8                                 ;;CBE6|CBDA+CBDA/CBE7\CBEE;
                      LDA.B !_6                                 ;;CBE8|CBDC+CBDC/CBE9\CBF0;
                      BCC +                                     ;;CBEA|CBDE+CBDE/CBEB\CBF2;
                      EOR.W #$FFFF                              ;;CBEC|CBE0+CBE0/CBED\CBF4;
                      INC A                                     ;;CBEF|CBE3+CBE3/CBF0\CBF7;
                    + STA.B !_A                                 ;;CBF0|CBE4+CBE4/CBF1\CBF8;
                      LDA.W !BrSwingSine                        ;;CBF2|CBE6+CBE6/CBF3\CBFA;
                      STA.B !_2                                 ;;CBF5|CBE9+CBE9/CBF6\CBFD;
                      LDA.W !BrSwingRadiusX                     ;;CBF7|CBEB+CBEB/CBF8\CBFF;
                      STA.B !_0                                 ;;CBFA|CBEE+CBEE/CBFB\CC02;
                      SEP #$20                                  ;;CBFC|CBF0+CBF0/CBFD\CC04; Accum (8 bit) 
                      JSR CODE_01CC28                           ;;CBFE|CBF2+CBF2/CBFF\CC06;
                      LDA.W !BrSwingAngleParity                 ;;CC01|CBF5+CBF5/CC02\CC09;
                      LSR A                                     ;;CC04|CBF8+CBF8/CC05\CC0C;
                      REP #$20                                  ;;CC05|CBF9+CBF9/CC06\CC0D; Accum (16 bit) 
                      LDA.B !_4                                 ;;CC07|CBFB+CBFB/CC08\CC0F;
                      BCC +                                     ;;CC09|CBFD+CBFD/CC0A\CC11;
                      EOR.W #$FFFF                              ;;CC0B|CBFF+CBFF/CC0C\CC13;
                      INC A                                     ;;CC0E|CC02+CC02/CC0F\CC16;
                    + STA.B !_4                                 ;;CC0F|CC03+CC03/CC10\CC17;
                      LDA.B !_6                                 ;;CC11|CC05+CC05/CC12\CC19;
                      BCC +                                     ;;CC13|CC07+CC07/CC14\CC1B;
                      EOR.W #$FFFF                              ;;CC15|CC09+CC09/CC16\CC1D;
                      INC A                                     ;;CC18|CC0C+CC0C/CC19\CC20;
                    + STA.B !_6                                 ;;CC19|CC0D+CC0D/CC1A\CC21;
                      LDA.B !_4                                 ;;CC1B|CC0F+CC0F/CC1C\CC23;
                      SEC                                       ;;CC1D|CC11+CC11/CC1E\CC25;
                      SBC.B !_8                                 ;;CC1E|CC12+CC12/CC1F\CC26;
                      STA.B !_4                                 ;;CC20|CC14+CC14/CC21\CC28;
                      LDA.B !_6                                 ;;CC22|CC16+CC16/CC23\CC2A;
                      SBC.B !_A                                 ;;CC24|CC18+CC18/CC25\CC2C;
                      STA.B !_6                                 ;;CC26|CC1A+CC1A/CC27\CC2E;
                      LDA.W !BrSwingCenterYPos                  ;;CC28|CC1C+CC1C/CC29\CC30;
                      SEC                                       ;;CC2B|CC1F+CC1F/CC2C\CC33;
                      SBC.B !_5                                 ;;CC2C|CC20+CC20/CC2D\CC34;
                      STA.W !BrSwingPlatYPos                    ;;CC2E|CC22+CC22/CC2F\CC36;
                      SEP #$20                                  ;;CC31|CC25+CC25/CC32\CC39; Accum (8 bit) 
                      RTS                                       ;;CC33|CC27+CC27/CC34\CC3B; Return 
                                                                ;;                        ;
CODE_01CC28:          LDA.B !_0                                 ;;CC34|CC28+CC28/CC35\CC3C;
                      STA.W !HW_WRMPYA                          ;;CC36|CC2A+CC2A/CC37\CC3E; Multiplicand A
                      LDA.B !_2                                 ;;CC39|CC2D+CC2D/CC3A\CC41;
                      STA.W !HW_WRMPYB                          ;;CC3B|CC2F+CC2F/CC3C\CC43; Multplier B
                      JSR DoNothing                             ;;CC3E|CC32+CC32/CC3F\CC46;
                      LDA.W !HW_RDMPY                           ;;CC41|CC35+CC35/CC42\CC49; Product/Remainder Result (Low Byte)
                      STA.B !_4                                 ;;CC44|CC38+CC38/CC45\CC4C;
                      LDA.W !HW_RDMPY+1                         ;;CC46|CC3A+CC3A/CC47\CC4E; Product/Remainder Result (High Byte)
                      STA.B !_5                                 ;;CC49|CC3D+CC3D/CC4A\CC51;
                      LDA.B !_0                                 ;;CC4B|CC3F+CC3F/CC4C\CC53;
                      STA.W !HW_WRMPYA                          ;;CC4D|CC41+CC41/CC4E\CC55; Multiplicand A
                      LDA.B !_3                                 ;;CC50|CC44+CC44/CC51\CC58;
                      STA.W !HW_WRMPYB                          ;;CC52|CC46+CC46/CC53\CC5A; Multplier B
                      JSR DoNothing                             ;;CC55|CC49+CC49/CC56\CC5D;
                      LDA.W !HW_RDMPY                           ;;CC58|CC4C+CC4C/CC59\CC60; Product/Remainder Result (Low Byte)
                      CLC                                       ;;CC5B|CC4F+CC4F/CC5C\CC63;
                      ADC.B !_5                                 ;;CC5C|CC50+CC50/CC5D\CC64;
                      STA.B !_5                                 ;;CC5E|CC52+CC52/CC5F\CC66;
                      LDA.W !HW_RDMPY+1                         ;;CC60|CC54+CC54/CC61\CC68; Product/Remainder Result (High Byte)
                      ADC.B #$00                                ;;CC63|CC57+CC57/CC64\CC6B;
                      STA.B !_6                                 ;;CC65|CC59+CC59/CC66\CC6D;
                      LDA.B !_1                                 ;;CC67|CC5B+CC5B/CC68\CC6F;
                      STA.W !HW_WRMPYA                          ;;CC69|CC5D+CC5D/CC6A\CC71; Multiplicand A
                      LDA.B !_2                                 ;;CC6C|CC60+CC60/CC6D\CC74;
                      STA.W !HW_WRMPYB                          ;;CC6E|CC62+CC62/CC6F\CC76; Multplier B
                      JSR DoNothing                             ;;CC71|CC65+CC65/CC72\CC79;
                      LDA.W !HW_RDMPY                           ;;CC74|CC68+CC68/CC75\CC7C; Product/Remainder Result (Low Byte)
                      CLC                                       ;;CC77|CC6B+CC6B/CC78\CC7F;
                      ADC.B !_5                                 ;;CC78|CC6C+CC6C/CC79\CC80;
                      STA.B !_5                                 ;;CC7A|CC6E+CC6E/CC7B\CC82;
                      LDA.W !HW_RDMPY+1                         ;;CC7C|CC70+CC70/CC7D\CC84; Product/Remainder Result (High Byte)
                      ADC.B !_6                                 ;;CC7F|CC73+CC73/CC80\CC87;
                      STA.B !_6                                 ;;CC81|CC75+CC75/CC82\CC89;
                      LDA.B !_1                                 ;;CC83|CC77+CC77/CC84\CC8B;
                      STA.W !HW_WRMPYA                          ;;CC85|CC79+CC79/CC86\CC8D; Multiplicand A
                      LDA.B !_3                                 ;;CC88|CC7C+CC7C/CC89\CC90;
                      STA.W !HW_WRMPYB                          ;;CC8A|CC7E+CC7E/CC8B\CC92; Multplier B
                      JSR DoNothing                             ;;CC8D|CC81+CC81/CC8E\CC95;
                      LDA.W !HW_RDMPY                           ;;CC90|CC84+CC84/CC91\CC98; Product/Remainder Result (Low Byte)
                      CLC                                       ;;CC93|CC87+CC87/CC94\CC9B;
                      ADC.B !_6                                 ;;CC94|CC88+CC88/CC95\CC9C;
                      STA.B !_6                                 ;;CC96|CC8A+CC8A/CC97\CC9E;
                      LDA.W !HW_RDMPY+1                         ;;CC98|CC8C+CC8C/CC99\CCA0; Product/Remainder Result (High Byte)
                      ADC.B #$00                                ;;CC9B|CC8F+CC8F/CC9C\CCA3;
                      STA.B !_7                                 ;;CC9D|CC91+CC91/CC9E\CCA5;
                      RTS                                       ;;CC9F|CC93+CC93/CCA0\CCA7; Return 
                                                                ;;                        ;
DoNothing:            NOP                                       ;;CCA0|CC94+CC94/CCA1\CCA8; \ Do nothing at all 
                      NOP                                       ;;CCA1|CC95+CC95/CCA2\CCA9;  | 
                      NOP                                       ;;CCA2|CC96+CC96/CCA3\CCAA;  | 
                      NOP                                       ;;CCA3|CC97+CC97/CCA4\CCAB;  | 
                      NOP                                       ;;CCA4|CC98+CC98/CCA5\CCAC;  | 
                      NOP                                       ;;CCA5|CC99+CC99/CCA6\CCAD;  | 
                      NOP                                       ;;CCA6|CC9A+CC9A/CCA7\CCAE;  | 
                      NOP                                       ;;CCA7|CC9B+CC9B/CCA8\CCAF;  | 
                      RTS                                       ;;CCA8|CC9C+CC9C/CCA9\CCB0; / 
                                                                ;;                        ;
CODE_01CC9D:          LDA.W !BrSwingXDist+1                     ;;CCA9|CC9D+CC9D/CCAA\CCB1;
                      ORA.W !BrSwingYDist+1                     ;;CCAC|CCA0+CCA0/CCAD\CCB4;
                      BNE +                                     ;;CCAF|CCA3+CCA3/CCB0\CCB7;
                      JSR CODE_01CCC7                           ;;CCB1|CCA5+CCA5/CCB2\CCB9;
                      JSR CODE_01CB20                           ;;CCB4|CCA8+CCA8/CCB5\CCBC;
                      JSR CODE_01CB53                           ;;CCB7|CCAB+CCAB/CCB8\CCBF;
                      LDA.W !BrSwingPlatYPos                    ;;CCBA|CCAE+CCAE/CCBB\CCC2;
                      AND.B #$F0                                ;;CCBD|CCB1+CCB1/CCBE\CCC5;
                      STA.B !_0                                 ;;CCBF|CCB3+CCB3/CCC0\CCC7;
                      LDA.W !BrSwingPlatXPos                    ;;CCC1|CCB5+CCB5/CCC2\CCC9;
                      LSR A                                     ;;CCC4|CCB8+CCB8/CCC5\CCCC;
                      LSR A                                     ;;CCC5|CCB9+CCB9/CCC6\CCCD;
                      LSR A                                     ;;CCC6|CCBA+CCBA/CCC7\CCCE;
                      LSR A                                     ;;CCC7|CCBB+CCBB/CCC8\CCCF;
                      ORA.B !_0                                 ;;CCC8|CCBC+CCBC/CCC9\CCD0;
                      TAY                                       ;;CCCA|CCBE+CCBE/CCCB\CCD2;
                      LDA.W !GfxDecompOWAni,Y                   ;;CCCB|CCBF+CCBF/CCCC\CCD3;
                      CMP.B #$15                                ;;CCCE|CCC2+CCC2/CCCF\CCD6;
                      RTL                                       ;;CCD0|CCC4+CCC4/CCD1\CCD8; Return 
                                                                ;;                        ;
                    + CLC                                       ;;CCD1|CCC5+CCC5/CCD2\CCD9;
                      RTL                                       ;;CCD2|CCC6+CCC6/CCD3\CCDA; Return 
                                                                ;;                        ;
CODE_01CCC7:          REP #$20                                  ;;CCD3|CCC7+CCC7/CCD4\CCDB; Accum (16 bit) 
                      LDA.B !Mode7CenterX                       ;;CCD5|CCC9+CCC9/CCD6\CCDD;
                      STA.W !BrSwingCenterXPos                  ;;CCD7|CCCB+CCCB/CCD8\CCDF;
                      LDA.B !Mode7CenterY                       ;;CCDA|CCCE+CCCE/CCDB\CCE2;
                      STA.W !BrSwingCenterYPos                  ;;CCDC|CCD0+CCD0/CCDD\CCE4;
                      LDA.W !BrSwingXDist                       ;;CCDF|CCD3+CCD3/CCE0\CCE7;
                      SEC                                       ;;CCE2|CCD6+CCD6/CCE3\CCEA;
                      SBC.W !BrSwingCenterXPos                  ;;CCE3|CCD7+CCD7/CCE4\CCEB;
                      STA.W !BrSwingRadiusX                     ;;CCE6|CCDA+CCDA/CCE7\CCEE;
                      LDA.W !BrSwingYDist                       ;;CCE9|CCDD+CCDD/CCEA\CCF1;
                      SEC                                       ;;CCEC|CCE0+CCE0/CCED\CCF4;
                      SBC.W !BrSwingCenterYPos                  ;;CCED|CCE1+CCE1/CCEE\CCF5;
                      STA.W !BrSwingRadiusY                     ;;CCF0|CCE4+CCE4/CCF1\CCF8;
                      SEP #$20                                  ;;CCF3|CCE7+CCE7/CCF4\CCFB; Accum (8 bit) 
                      RTS                                       ;;CCF5|CCE9+CCE9/CCF6\CCFD; Return 
                                                                ;;                        ;
                      RTS                                       ;;CCF6|CCEA+CCEA/CCF7\CCFE;
                                                                ;;                        ;
                      RTS                                       ;;CCF7|CCEB+CCEB/CCF8\CCFF;
                                                                ;;                        ;
CODE_01CCEC:          EOR.B #$FF                                ;;CCF8|CCEC+CCEC/CCF9\CD00;
                      INC A                                     ;;CCFA|CCEE+CCEE/CCFB\CD02;
                      RTS                                       ;;CCFB|CCEF+CCEF/CCFC\CD03; Return 
                                                                ;;                        ;
CODE_01CCF0:          LDA.W !SpriteMisc1504,X                   ;;CCFC|CCF0+CCF0/CCFD\CD04;
                      ASL A                                     ;;CCFF|CCF3+CCF3/CD00\CD07;
                      ASL A                                     ;;CD00|CCF4+CCF4/CD01\CD08;
                      ASL A                                     ;;CD01|CCF5+CCF5/CD02\CD09;
                      ASL A                                     ;;CD02|CCF6+CCF6/CD03\CD0A;
                      CLC                                       ;;CD03|CCF7+CCF7/CD04\CD0B;
                      ADC.W !SpriteMisc1510,X                   ;;CD04|CCF8+CCF8/CD05\CD0C;
                      STA.W !SpriteMisc1510,X                   ;;CD07|CCFB+CCFB/CD08\CD0F;
                      PHP                                       ;;CD0A|CCFE+CCFE/CD0B\CD12;
                      LDY.B #$00                                ;;CD0B|CCFF+CCFF/CD0C\CD13;
                      LDA.W !SpriteMisc1504,X                   ;;CD0D|CD01+CD01/CD0E\CD15;
                      LSR A                                     ;;CD10|CD04+CD04/CD11\CD18;
                      LSR A                                     ;;CD11|CD05+CD05/CD12\CD19;
                      LSR A                                     ;;CD12|CD06+CD06/CD13\CD1A;
                      LSR A                                     ;;CD13|CD07+CD07/CD14\CD1B;
                      CMP.B #$08                                ;;CD14|CD08+CD08/CD15\CD1C;
                      BCC +                                     ;;CD16|CD0A+CD0A/CD17\CD1E;
                      ORA.B #$F0                                ;;CD18|CD0C+CD0C/CD19\CD20;
                      DEY                                       ;;CD1A|CD0E+CD0E/CD1B\CD22;
                    + PLP                                       ;;CD1B|CD0F+CD0F/CD1C\CD23;
                      ADC.W !SpriteMisc151C,X                   ;;CD1C|CD10+CD10/CD1D\CD24;
                      STA.W !SpriteMisc151C,X                   ;;CD1F|CD13+CD13/CD20\CD27;
                      TYA                                       ;;CD22|CD16+CD16/CD23\CD2A;
                      ADC.W !SpriteMisc1528,X                   ;;CD23|CD17+CD17/CD24\CD2B;
                      STA.W !SpriteMisc1528,X                   ;;CD26|CD1A+CD1A/CD27\CD2E;
                      RTS                                       ;;CD29|CD1D+CD1D/CD2A\CD31; Return 
                                                                ;;                        ;
                      %insert_empty($00,$0C,$0C,$06,$06)        ;;CD2A|CD1E+CD1E/CD2B\CD32;
                                                                ;;                        ;
PipeKoopaKids:        JSL CODE_03CC09                           ;;CD2A|CD2A+CD2A/CD31\CD38;
                      RTS                                       ;;CD2E|CD2E+CD2E/CD35\CD3C; Return 
                                                                ;;                        ;
InitKoopaKid:         LDA.B !SpriteYPosLow,X                    ;;CD2F|CD2F+CD2F/CD36\CD3D;
                      LSR A                                     ;;CD31|CD31+CD31/CD38\CD3F;
                      LSR A                                     ;;CD32|CD32+CD32/CD39\CD40;
                      LSR A                                     ;;CD33|CD33+CD33/CD3A\CD41;
                      LSR A                                     ;;CD34|CD34+CD34/CD3B\CD42;
                      STA.B !SpriteTableC2,X                    ;;CD35|CD35+CD35/CD3C\CD43;
                      CMP.B #$05                                ;;CD37|CD37+CD37/CD3E\CD45;
                      BCC +                                     ;;CD39|CD39+CD39/CD40\CD47;
                      LDA.B #$78                                ;;CD3B|CD3B+CD3B/CD42\CD49;
                      STA.B !SpriteXPosLow,X                    ;;CD3D|CD3D+CD3D/CD44\CD4B;
                      LDA.B #$40                                ;;CD3F|CD3F+CD3F/CD46\CD4D;
                      STA.B !SpriteYPosLow,X                    ;;CD41|CD41+CD41/CD48\CD4F;
                      LDA.B #$01                                ;;CD43|CD43+CD43/CD4A\CD51;
                      STA.W !SpriteXPosHigh,X                   ;;CD45|CD45+CD45/CD4C\CD53;
                      LDA.B #$80                                ;;CD48|CD48+CD48/CD4F\CD56;
                      STA.W !SpriteMisc1540,X                   ;;CD4A|CD4A+CD4A/CD51\CD58;
                      RTS                                       ;;CD4D|CD4D+CD4D/CD54\CD5B; Return 
                                                                ;;                        ;
                    + LDY.B #$90                                ;;CD4E|CD4E+CD4E/CD55\CD5C;
                      STY.B !SpriteYPosLow,X                    ;;CD50|CD50+CD50/CD57\CD5E;
                      CMP.B #$03                                ;;CD52|CD52+CD52/CD59\CD60;
                      BCC +                                     ;;CD54|CD54+CD54/CD5B\CD62;
                      JSL CODE_00FCF5                           ;;CD56|CD56+CD56/CD5D\CD64;
                      JSR FaceMario                             ;;CD5A|CD5A+CD5A/CD61\CD68;
                      RTS                                       ;;CD5D|CD5D+CD5D/CD64\CD6B; Return 
                                                                ;;                        ;
                    + LDA.B #$01                                ;;CD5E|CD5E+CD5E/CD65\CD6C;
                      STA.W !SpriteMisc157C,X                   ;;CD60|CD60+CD60/CD67\CD6E;
                      LDA.B #$20                                ;;CD63|CD63+CD63/CD6A\CD71;
                      STA.B !Mode7XScale                        ;;CD65|CD65+CD65/CD6C\CD73;
                      STA.B !Mode7YScale                        ;;CD67|CD67+CD67/CD6E\CD75;
                      JSL CODE_03DD7D                           ;;CD69|CD69+CD69/CD70\CD77;
                      LDY.B !SpriteTableC2,X                    ;;CD6D|CD6D+CD6D/CD74\CD7B;
                      LDA.W DATA_01CD92,Y                       ;;CD6F|CD6F+CD6F/CD76\CD7D;
                      STA.W !SpriteMisc187B,X                   ;;CD72|CD72+CD72/CD79\CD80;
                      CMP.B #$01                                ;;CD75|CD75+CD75/CD7C\CD83;
                      BEQ CODE_01CD87                           ;;CD77|CD77+CD77/CD7E\CD85;
                      CMP.B #$00                                ;;CD79|CD79+CD79/CD80\CD87;
                      BNE +                                     ;;CD7B|CD7B+CD7B/CD82\CD89;
                      LDA.B #$70                                ;;CD7D|CD7D+CD7D/CD84\CD8B;
                      STA.B !SpriteXPosLow,X                    ;;CD7F|CD7F+CD7F/CD86\CD8D;
                    + LDA.B #$01                                ;;CD81|CD81+CD81/CD88\CD8F;
                      STA.W !SpriteYPosHigh,X                   ;;CD83|CD83+CD83/CD8A\CD91;
                      RTS                                       ;;CD86|CD86+CD86/CD8D\CD94; Return 
                                                                ;;                        ;
CODE_01CD87:          LDA.B #$26                                ;;CD87|CD87+CD87/CD8E\CD95;
                      STA.W !SpriteMisc1534,X                   ;;CD89|CD89+CD89/CD90\CD97;
                      LDA.B #$D8                                ;;CD8C|CD8C+CD8C/CD93\CD9A;
                      STA.W !SpriteMisc160E,X                   ;;CD8E|CD8E+CD8E/CD95\CD9C;
                      RTS                                       ;;CD91|CD91+CD91/CD98\CD9F; Return 
                                                                ;;                        ;
                                                                ;;                        ;
DATA_01CD92:          db $01,$01,$00,$02,$02,$03,$03            ;;CD92|CD92+CD92/CD99\CDA0;
                                                                ;;                        ;
DATA_01CD99:          db $00,$09,$12                            ;;CD99|CD99+CD99/CDA0\CDA7;
                                                                ;;                        ;
DATA_01CD9C:          db $00,$01,$02,$03,$04,$05,$06,$07        ;;CD9C|CD9C+CD9C/CDA3\CDAA;
                      db $08                                    ;;CDA4|CDA4+CDA4/CDAB\CDB2;
                                                                ;;                        ;
DATA_01CDA5:          db $00,$80                                ;;CDA5|CDA5+CDA5/CDAC\CDB3;
                                                                ;;                        ;
CODE_01CDA7:          JSR GetDrawInfoBnk1                       ;;CDA7|CDA7+CDA7/CDAE\CDB5;
                      RTS                                       ;;CDAA|CDAA+CDAA/CDB1\CDB8; Return 
                                                                ;;                        ;
WallKoopaKids:        STZ.W !PlayerIsFrozen                     ;;CDAB|CDAB+CDAB/CDB2\CDB9;
                      LDA.W !SpriteMisc1602,X                   ;;CDAE|CDAE+CDAE/CDB5\CDBC;
                      CMP.B #$1B                                ;;CDB1|CDB1+CDB1/CDB8\CDBF;
                      BCS CODE_01CDD5                           ;;CDB3|CDB3+CDB3/CDBA\CDC1;
                      LDA.W !SpriteMisc15AC,X                   ;;CDB5|CDB5+CDB5/CDBC\CDC3;
                      CMP.B #$08                                ;;CDB8|CDB8+CDB8/CDBF\CDC6;
                      LDY.W !SpriteMisc157C,X                   ;;CDBA|CDBA+CDBA/CDC1\CDC8;
                      LDA.W DATA_01CDA5,Y                       ;;CDBD|CDBD+CDBD/CDC4\CDCB;
                      BCS +                                     ;;CDC0|CDC0+CDC0/CDC7\CDCE;
                      EOR.B #$80                                ;;CDC2|CDC2+CDC2/CDC9\CDD0;
                    + STA.B !_0                                 ;;CDC4|CDC4+CDC4/CDCB\CDD2;
                      LDY.B !SpriteTableC2,X                    ;;CDC6|CDC6+CDC6/CDCD\CDD4;
                      LDA.W DATA_01CD99,Y                       ;;CDC8|CDC8+CDC8/CDCF\CDD6;
                      LDY.W !SpriteMisc1602,X                   ;;CDCB|CDCB+CDCB/CDD2\CDD9;
                      CLC                                       ;;CDCE|CDCE+CDCE/CDD5\CDDC;
                      ADC.W DATA_01CD9C,Y                       ;;CDCF|CDCF+CDCF/CDD6\CDDD;
                      CLC                                       ;;CDD2|CDD2+CDD2/CDD9\CDE0;
                      ADC.B !_0                                 ;;CDD3|CDD3+CDD3/CDDA\CDE1;
CODE_01CDD5:          STA.W !Mode7TileIndex                     ;;CDD5|CDD5+CDD5/CDDC\CDE3;
                      JSL CODE_03DEDF                           ;;CDD8|CDD8+CDD8/CDDF\CDE6;
                      JSR CODE_01CDA7                           ;;CDDC|CDDC+CDDC/CDE3\CDEA;
                      LDA.B !SpriteLock                         ;;CDDF|CDDF+CDDF/CDE6\CDED; \ Branch if sprites locked 
                      BNE Return01CE3D                          ;;CDE1|CDE1+CDE1/CDE8\CDEF; / 
                      JSR CODE_01D2A8                           ;;CDE3|CDE3+CDE3/CDEA\CDF1;
                      JSR CODE_01D3B1                           ;;CDE6|CDE6+CDE6/CDED\CDF4;
                      LDA.W !SpriteMisc187B,X                   ;;CDE9|CDE9+CDE9/CDF0\CDF7;
                      CMP.B #$01                                ;;CDEC|CDEC+CDEC/CDF3\CDFA;
                      BEQ +                                     ;;CDEE|CDEE+CDEE/CDF5\CDFC;
                      LDA.W !SpriteMisc163E,X                   ;;CDF0|CDF0+CDF0/CDF7\CDFE;
                      BNE +                                     ;;CDF3|CDF3+CDF3/CDFA\CE01;
                      LDA.W !SpriteMisc157C,X                   ;;CDF5|CDF5+CDF5/CDFC\CE03;
                      PHA                                       ;;CDF8|CDF8+CDF8/CDFF\CE06;
                      JSR SubHorizPos                           ;;CDF9|CDF9+CDF9/CE00\CE07;
                      TYA                                       ;;CDFC|CDFC+CDFC/CE03\CE0A;
                      STA.W !SpriteMisc157C,X                   ;;CDFD|CDFD+CDFD/CE04\CE0B;
                      PLA                                       ;;CE00|CE00+CE00/CE07\CE0E;
                      CMP.W !SpriteMisc157C,X                   ;;CE01|CE01+CE01/CE08\CE0F;
                      BEQ +                                     ;;CE04|CE04+CE04/CE0B\CE12;
                      LDA.B #$10                                ;;CE06|CE06+CE06/CE0D\CE14; \ Set turning timer 
                      STA.W !SpriteMisc15AC,X                   ;;CE08|CE08+CE08/CE0F\CE16; / 
                    + LDA.W !SpriteMisc151C,X                   ;;CE0B|CE0B+CE0B/CE12\CE19;
                      JSL ExecutePtr                            ;;CE0E|CE0E+CE0E/CE15\CE1C;
                                                                ;;                        ;
                      dw CODE_01CE1E                            ;;CE12|CE12+CE12/CE19\CE20;
                      dw CODE_01CE3E                            ;;CE14|CE14+CE14/CE1B\CE22;
                      dw CODE_01CE5F                            ;;CE16|CE16+CE16/CE1D\CE24;
                      dw CODE_01CF7D                            ;;CE18|CE18+CE18/CE1F\CE26;
                      dw CODE_01CFE0                            ;;CE1A|CE1A+CE1A/CE21\CE28;
                      dw CODE_01D043                            ;;CE1C|CE1C+CE1C/CE23\CE2A;
                                                                ;;                        ;
CODE_01CE1E:          LDA.W !SpriteMisc187B,X                   ;;CE1E|CE1E+CE1E/CE25\CE2C;
                      CMP.B #$01                                ;;CE21|CE21+CE21/CE28\CE2F;
                      BNE +                                     ;;CE23|CE23+CE23/CE2A\CE31;
                      STZ.W !HorizLayer1Setting                 ;;CE25|CE25+CE25/CE2C\CE33;
                      INC.W !BossPillarFalling                  ;;CE28|CE28+CE28/CE2F\CE36;
                      STZ.W !BossPillarYPos                     ;;CE2B|CE2B+CE2B/CE32\CE39;
                      INC.B !SpriteLock                         ;;CE2E|CE2E+CE2E/CE35\CE3C;
                      INC.W !SpriteMisc151C,X                   ;;CE30|CE30+CE30/CE37\CE3E;
                      RTS                                       ;;CE33|CE33+CE33/CE3A\CE41; Return 
                                                                ;;                        ;
                    + LDA.B !Layer1XPos                         ;;CE34|CE34+CE34/CE3B\CE42;
                      CMP.B #$7E                                ;;CE36|CE36+CE36/CE3D\CE44;
                      BCC Return01CE3D                          ;;CE38|CE38+CE38/CE3F\CE46;
                      INC.W !SpriteMisc151C,X                   ;;CE3A|CE3A+CE3A/CE41\CE48;
Return01CE3D:         RTS                                       ;;CE3D|CE3D+CE3D/CE44\CE4B; Return 
                                                                ;;                        ;
CODE_01CE3E:          STZ.B !PlayerXSpeed                       ;;CE3E|CE3E+CE3E/CE45\CE4C;
                      JSR SubSprYPosNoGrvty                     ;;CE40|CE40+CE40/CE47\CE4E;
                      LDA.B !SpriteYSpeed,X                     ;;CE43|CE43+CE43/CE4A\CE51;
                      CMP.B #$40                                ;;CE45|CE45+CE45/CE4C\CE53;
                      BPL +                                     ;;CE47|CE47+CE47/CE4E\CE55;
                      CLC                                       ;;CE49|CE49+CE49/CE50\CE57;
                      ADC.B #$03                                ;;CE4A|CE4A+CE4A/CE51\CE58;
                    + STA.B !SpriteYSpeed,X                     ;;CE4C|CE4C+CE4C/CE53\CE5A;
                      JSR CODE_01D0C0                           ;;CE4E|CE4E+CE4E/CE55\CE5C;
                      BCC Return01CE3D                          ;;CE51|CE51+CE51/CE58\CE5F;
                      INC.W !SpriteMisc151C,X                   ;;CE53|CE53+CE53/CE5A\CE61;
                      LDA.B !SpriteTableC2,X                    ;;CE56|CE56+CE56/CE5D\CE64;
                      CMP.B #$02                                ;;CE58|CE58+CE58/CE5F\CE66;
                      BCC Return01CE3D                          ;;CE5A|CE5A+CE5A/CE61\CE68;
                      JMP CODE_01CEA8                           ;;CE5C|CE5C+CE5C/CE63\CE6A;
                                                                ;;                        ;
CODE_01CE5F:          LDA.B !SpriteTableC2,X                    ;;CE5F|CE5F+CE5F/CE66\CE6D;
                      JSL ExecutePtr                            ;;CE61|CE61+CE61/CE68\CE6F;
                                                                ;;                        ;
                      dw CODE_01D116                            ;;CE65|CE65+CE65/CE6C\CE73;
                      dw CODE_01D116                            ;;CE67|CE67+CE67/CE6E\CE75;
                      dw CODE_01CE6B                            ;;CE69|CE69+CE69/CE70\CE77;
                                                                ;;                        ;
CODE_01CE6B:          LDA.W !SpriteMisc1528,X                   ;;CE6B|CE6B+CE6B/CE72\CE79;
                      JSL ExecutePtr                            ;;CE6E|CE6E+CE6E/CE75\CE7C;
                                                                ;;                        ;
                      dw CODE_01CE78                            ;;CE72|CE72+CE72/CE79\CE80;
                      dw CODE_01CEB6                            ;;CE74|CE74+CE74/CE7B\CE82;
                      dw CODE_01CEFD                            ;;CE76|CE76+CE76/CE7D\CE84;
                                                                ;;                        ;
CODE_01CE78:          STZ.B !Mode7Angle                         ;;CE78|CE78+CE78/CE7F\CE86;
                      STZ.B !Mode7Angle+1                       ;;CE7A|CE7A+CE7A/CE81\CE88;
                      LDA.W !SpriteMisc1540,X                   ;;CE7C|CE7C+CE7C/CE83\CE8A;
                      BEQ CODE_01CEA5                           ;;CE7F|CE7F+CE7F/CE86\CE8D;
                      LDY.B #$03                                ;;CE81|CE81+CE81/CE88\CE8F;
                      AND.B #$30                                ;;CE83|CE83+CE83/CE8A\CE91;
                      BNE +                                     ;;CE85|CE85+CE85/CE8C\CE93;
                      INY                                       ;;CE87|CE87+CE87/CE8E\CE95;
                    + TYA                                       ;;CE88|CE88+CE88/CE8F\CE96;
                      LDY.W !SpriteMisc15AC,X                   ;;CE89|CE89+CE89/CE90\CE97;
                      BEQ +                                     ;;CE8C|CE8C+CE8C/CE93\CE9A;
                      LDA.B #$05                                ;;CE8E|CE8E+CE8E/CE95\CE9C;
                    + STA.W !SpriteMisc1602,X                   ;;CE90|CE90+CE90/CE97\CE9E;
                      LDA.W !SpriteMisc1540,X                   ;;CE93|CE93+CE93/CE9A\CEA1;
                      AND.B #$3F                                ;;CE96|CE96+CE96/CE9D\CEA4;
                      CMP.B #$2E                                ;;CE98|CE98+CE98/CE9F\CEA6;
                      BNE +                                     ;;CE9A|CE9A+CE9A/CEA1\CEA8;
                      LDA.B #$30                                ;;CE9C|CE9C+CE9C/CEA3\CEAA;
                      STA.W !SpriteMisc163E,X                   ;;CE9E|CE9E+CE9E/CEA5\CEAC;
                      JSR CODE_01D059                           ;;CEA1|CEA1+CEA1/CEA8\CEAF;
                    + RTS                                       ;;CEA4|CEA4+CEA4/CEAB\CEB2; Return 
                                                                ;;                        ;
CODE_01CEA5:          INC.W !SpriteMisc1528,X                   ;;CEA5|CEA5+CEA5/CEAC\CEB3;
CODE_01CEA8:          LDA.B #$FF                                ;;CEA8|CEA8+CEA8/CEAF\CEB6;
                      STA.W !SpriteMisc1540,X                   ;;CEAA|CEAA+CEAA/CEB1\CEB8;
                      RTS                                       ;;CEAD|CEAD+CEAD/CEB4\CEBB; Return 
                                                                ;;                        ;
                                                                ;;                        ;
DATA_01CEAE:          db $30,$D0                                ;;CEAE|CEAE+CEAE/CEB5\CEBC;
                                                                ;;                        ;
DATA_01CEB0:          db $1B,$1C,$1D,$1B                        ;;CEB0|CEB0+CEB0/CEB7\CEBE;
                                                                ;;                        ;
DATA_01CEB4:          db $14,$EC                                ;;CEB4|CEB4+CEB4/CEBB\CEC2;
                                                                ;;                        ;
CODE_01CEB6:          LDA.W !SpriteMisc1540,X                   ;;CEB6|CEB6+CEB6/CEBD\CEC4;
                      BNE +                                     ;;CEB9|CEB9+CEB9/CEC0\CEC7;
                      JSR SubHorizPos                           ;;CEBB|CEBB+CEBB/CEC2\CEC9;
                      TYA                                       ;;CEBE|CEBE+CEBE/CEC5\CECC;
                      CMP.W !SpriteYPosHigh,X                   ;;CEBF|CEBF+CEBF/CEC6\CECD;
                      BNE +                                     ;;CEC2|CEC2+CEC2/CEC9\CED0;
                      INC.W !SpriteMisc1528,X                   ;;CEC4|CEC4+CEC4/CECB\CED2;
                      LDA.W DATA_01CEB4,Y                       ;;CEC7|CEC7+CEC7/CECE\CED5;
                      STA.W !SpriteMisc160E,X                   ;;CECA|CECA+CECA/CED1\CED8;
                      LDA.B #$30                                ;;CECD|CECD+CECD/CED4\CEDB;
                      STA.W !SpriteMisc1540,X                   ;;CECF|CECF+CECF/CED6\CEDD;
                      LDA.B #$60                                ;;CED2|CED2+CED2/CED9\CEE0;
                      STA.W !SpriteMisc1558,X                   ;;CED4|CED4+CED4/CEDB\CEE2;
                      LDA.B #$D8                                ;;CED7|CED7+CED7/CEDE\CEE5;
                      STA.B !SpriteYSpeed,X                     ;;CED9|CED9+CED9/CEE0\CEE7;
                      RTS                                       ;;CEDB|CEDB+CEDB/CEE2\CEE9; Return 
                                                                ;;                        ;
                    + JSR SubHorizPos                           ;;CEDC|CEDC+CEDC/CEE3\CEEA;
                      LDA.B !SpriteXSpeed,X                     ;;CEDF|CEDF+CEDF/CEE6\CEED;
                      CMP.W DATA_01CEAE,Y                       ;;CEE1|CEE1+CEE1/CEE8\CEEF;
                      BEQ +                                     ;;CEE4|CEE4+CEE4/CEEB\CEF2;
                      CLC                                       ;;CEE6|CEE6+CEE6/CEED\CEF4;
                      ADC.W DATA_01D4E7,Y                       ;;CEE7|CEE7+CEE7/CEEE\CEF5;
                      STA.B !SpriteXSpeed,X                     ;;CEEA|CEEA+CEEA/CEF1\CEF8;
                    + JSR SubSprXPosNoGrvty                     ;;CEEC|CEEC+CEEC/CEF3\CEFA;
                      LDA.B !EffFrame                           ;;CEEF|CEEF+CEEF/CEF6\CEFD;
                      LSR A                                     ;;CEF1|CEF1+CEF1/CEF8\CEFF;
                      LSR A                                     ;;CEF2|CEF2+CEF2/CEF9\CF00;
                      AND.B #$03                                ;;CEF3|CEF3+CEF3/CEFA\CF01;
                      TAY                                       ;;CEF5|CEF5+CEF5/CEFC\CF03;
                      LDA.W DATA_01CEB0,Y                       ;;CEF6|CEF6+CEF6/CEFD\CF04;
                      STA.W !SpriteMisc1602,X                   ;;CEF9|CEF9+CEF9/CF00\CF07;
                      RTS                                       ;;CEFC|CEFC+CEFC/CF03\CF0A; Return 
                                                                ;;                        ;
CODE_01CEFD:          LDA.W !SpriteMisc1540,X                   ;;CEFD|CEFD+CEFD/CF04\CF0B;
                      BEQ CODE_01CF1C                           ;;CF00|CF00+CF00/CF07\CF0E;
                      DEC A                                     ;;CF02|CF02+CF02/CF09\CF10;
                      BNE +                                     ;;CF03|CF03+CF03/CF0A\CF11;
                      LDA.W !SpriteMisc160E,X                   ;;CF05|CF05+CF05/CF0C\CF13;
                      STA.B !SpriteXSpeed,X                     ;;CF08|CF08+CF08/CF0F\CF16;
                      LDA.B #!SFX_SPRING                        ;;CF0A|CF0A+CF0A/CF11\CF18; \ Play sound effect 
                      STA.W !SPCIO3                             ;;CF0C|CF0C+CF0C/CF13\CF1A; / 
                    + LDA.B !SpriteXSpeed,X                     ;;CF0F|CF0F+CF0F/CF16\CF1D;
                      BEQ Return01CF1B                          ;;CF11|CF11+CF11/CF18\CF1F;
                      BPL +                                     ;;CF13|CF13+CF13/CF1A\CF21;
                      INC.B !SpriteXSpeed,X                     ;;CF15|CF15+CF15/CF1C\CF23;
                      INC.B !SpriteXSpeed,X                     ;;CF17|CF17+CF17/CF1E\CF25;
                    + DEC.B !SpriteXSpeed,X                     ;;CF19|CF19+CF19/CF20\CF27;
Return01CF1B:         RTS                                       ;;CF1B|CF1B+CF1B/CF22\CF29; Return 
                                                                ;;                        ;
CODE_01CF1C:          JSR CODE_01D0C0                           ;;CF1C|CF1C+CF1C/CF23\CF2A;
                      BCC +                                     ;;CF1F|CF1F+CF1F/CF26\CF2D;
                      LDA.B !SpriteYSpeed,X                     ;;CF21|CF21+CF21/CF28\CF2F;
                      BMI +                                     ;;CF23|CF23+CF23/CF2A\CF31;
                      STZ.B !SpriteXSpeed,X                     ;;CF25|CF25+CF25/CF2C\CF33; \ Sprite Speed = 0 
                      STZ.B !SpriteYSpeed,X                     ;;CF27|CF27+CF27/CF2E\CF35; / 
                      STZ.W !SpriteMisc1528,X                   ;;CF29|CF29+CF29/CF30\CF37;
                      JMP CODE_01CEA8                           ;;CF2C|CF2C+CF2C/CF33\CF3A;
                                                                ;;                        ;
                    + JSR SubSprXPosNoGrvty                     ;;CF2F|CF2F+CF2F/CF36\CF3D;
                      JSR SubSprYPosNoGrvty                     ;;CF32|CF32+CF32/CF39\CF40;
                      LDA.B !TrueFrame                          ;;CF35|CF35+CF35/CF3C\CF43;
                      LSR A                                     ;;CF37|CF37+CF37/CF3E\CF45;
                      BCS CODE_01CF44                           ;;CF38|CF38+CF38/CF3F\CF46;
                      LDA.B !SpriteYSpeed,X                     ;;CF3A|CF3A+CF3A/CF41\CF48;
                      BMI CODE_01CF42                           ;;CF3C|CF3C+CF3C/CF43\CF4A;
                      CMP.B #$70                                ;;CF3E|CF3E+CF3E/CF45\CF4C;
                      BCS CODE_01CF44                           ;;CF40|CF40+CF40/CF47\CF4E;
CODE_01CF42:          INC.B !SpriteYSpeed,X                     ;;CF42|CF42+CF42/CF49\CF50;
CODE_01CF44:          LDA.W !SpriteMisc1558,X                   ;;CF44|CF44+CF44/CF4B\CF52;
                      BNE CODE_01CF4F                           ;;CF47|CF47+CF47/CF4E\CF55;
                      LDA.B !Mode7Angle                         ;;CF49|CF49+CF49/CF50\CF57;
                      ORA.B !Mode7Angle+1                       ;;CF4B|CF4B+CF4B/CF52\CF59;
                      BEQ CODE_01CF67                           ;;CF4D|CF4D+CF4D/CF54\CF5B;
CODE_01CF4F:          LDA.B !SpriteXSpeed,X                     ;;CF4F|CF4F+CF4F/CF56\CF5D;
                      ASL A                                     ;;CF51|CF51+CF51/CF58\CF5F;
                      LDA.B #$04                                ;;CF52|CF52+CF52/CF59\CF60;
                      LDY.B #$00                                ;;CF54|CF54+CF54/CF5B\CF62;
                      BCC +                                     ;;CF56|CF56+CF56/CF5D\CF64;
                      LDA.B #$FC                                ;;CF58|CF58+CF58/CF5F\CF66;
                      DEY                                       ;;CF5A|CF5A+CF5A/CF61\CF68;
                    + CLC                                       ;;CF5B|CF5B+CF5B/CF62\CF69;
                      ADC.B !Mode7Angle                         ;;CF5C|CF5C+CF5C/CF63\CF6A;
                      STA.B !Mode7Angle                         ;;CF5E|CF5E+CF5E/CF65\CF6C;
                      TYA                                       ;;CF60|CF60+CF60/CF67\CF6E;
                      ADC.B !Mode7Angle+1                       ;;CF61|CF61+CF61/CF68\CF6F;
                      AND.B #$01                                ;;CF63|CF63+CF63/CF6A\CF71;
                      STA.B !Mode7Angle+1                       ;;CF65|CF65+CF65/CF6C\CF73;
CODE_01CF67:          LDA.B #$06                                ;;CF67|CF67+CF67/CF6E\CF75;
                      LDY.B !SpriteYSpeed,X                     ;;CF69|CF69+CF69/CF70\CF77;
                      BMI +                                     ;;CF6B|CF6B+CF6B/CF72\CF79;
                      CPY.B #$08                                ;;CF6D|CF6D+CF6D/CF74\CF7B;
                      BCC +                                     ;;CF6F|CF6F+CF6F/CF76\CF7D;
                      LDA.B #$05                                ;;CF71|CF71+CF71/CF78\CF7F;
                      CPY.B #$10                                ;;CF73|CF73+CF73/CF7A\CF81;
                      BCC +                                     ;;CF75|CF75+CF75/CF7C\CF83;
                      LDA.B #$02                                ;;CF77|CF77+CF77/CF7E\CF85;
                    + STA.W !SpriteMisc1602,X                   ;;CF79|CF79+CF79/CF80\CF87;
                      RTS                                       ;;CF7C|CF7C+CF7C/CF83\CF8A; Return 
                                                                ;;                        ;
CODE_01CF7D:          JSR SubSprYPosNoGrvty                     ;;CF7D|CF7D+CF7D/CF84\CF8B;
                      INC.B !SpriteYSpeed,X                     ;;CF80|CF80+CF80/CF87\CF8E;
                      JSR CODE_01D0C0                           ;;CF82|CF82+CF82/CF89\CF90;
                      LDA.W !SpriteMisc1540,X                   ;;CF85|CF85+CF85/CF8C\CF93;
                      BEQ CODE_01CFB7                           ;;CF88|CF88+CF88/CF8F\CF96;
                      CMP.B #$40                                ;;CF8A|CF8A+CF8A/CF91\CF98;
                      BCC CODE_01CF9E                           ;;CF8C|CF8C+CF8C/CF93\CF9A;
                      BEQ CODE_01CFC6                           ;;CF8E|CF8E+CF8E/CF95\CF9C;
                      LDY.B #$06                                ;;CF90|CF90+CF90/CF97\CF9E;
                      LDA.B !EffFrame                           ;;CF92|CF92+CF92/CF99\CFA0;
                      AND.B #$04                                ;;CF94|CF94+CF94/CF9B\CFA2;
                      BEQ +                                     ;;CF96|CF96+CF96/CF9D\CFA4;
                      INY                                       ;;CF98|CF98+CF98/CF9F\CFA6;
                    + TYA                                       ;;CF99|CF99+CF99/CFA0\CFA7;
                      STA.W !SpriteMisc1602,X                   ;;CF9A|CF9A+CF9A/CFA1\CFA8;
                      RTS                                       ;;CF9D|CF9D+CF9D/CFA4\CFAB; Return 
                                                                ;;                        ;
CODE_01CF9E:          LDY.W !Empty18A6                          ;;CF9E|CF9E+CF9E/CFA5\CFAC;
                      LDA.B !Mode7XScale                        ;;CFA1|CFA1+CFA1/CFA8\CFAF;
                      CMP.B #$20                                ;;CFA3|CFA3+CFA3/CFAA\CFB1;
                      BEQ +                                     ;;CFA5|CFA5+CFA5/CFAC\CFB3;
                      INC.B !Mode7XScale                        ;;CFA7|CFA7+CFA7/CFAE\CFB5;
                    + LDA.B !Mode7YScale                        ;;CFA9|CFA9+CFA9/CFB0\CFB7;
                      CMP.B #$20                                ;;CFAB|CFAB+CFAB/CFB2\CFB9;
                      BEQ +                                     ;;CFAD|CFAD+CFAD/CFB4\CFBB;
                      DEC.B !Mode7YScale                        ;;CFAF|CFAF+CFAF/CFB6\CFBD;
                    + LDA.B #$07                                ;;CFB1|CFB1+CFB1/CFB8\CFBF;
                      STA.W !SpriteMisc1602,X                   ;;CFB3|CFB3+CFB3/CFBA\CFC1;
                      RTS                                       ;;CFB6|CFB6+CFB6/CFBD\CFC4; Return 
                                                                ;;                        ;
CODE_01CFB7:          LDA.B #$02                                ;;CFB7|CFB7+CFB7/CFBE\CFC5;
                      STA.W !SpriteMisc151C,X                   ;;CFB9|CFB9+CFB9/CFC0\CFC7;
                      LDA.B !SpriteTableC2,X                    ;;CFBC|CFBC+CFBC/CFC3\CFCA;
                      BEQ +                                     ;;CFBE|CFBE+CFBE/CFC5\CFCC;
                      LDA.B #$20                                ;;CFC0|CFC0+CFC0/CFC7\CFCE;
                      STA.W !SpriteInLiquid,X                   ;;CFC2|CFC2+CFC2/CFC9\CFD0;
                    + RTS                                       ;;CFC5|CFC5+CFC5/CFCC\CFD3; Return 
                                                                ;;                        ;
CODE_01CFC6:          INC.W !SpriteMisc1626,X                   ;;CFC6|CFC6+CFC6/CFCD\CFD4;
                      LDA.W !SpriteMisc1626,X                   ;;CFC9|CFC9+CFC9/CFD0\CFD7;
                      CMP.B #$03                                ;;CFCC|CFCC+CFCC/CFD3\CFDA;
                      BCC +                                     ;;CFCE|CFCE+CFCE/CFD5\CFDC;
CODE_01CFD0:          LDA.B #!SFX_BOSSDEAD                      ;;CFD0|CFD0+CFD0/CFD7\CFDE; \ Play sound effect 
                      STA.W !SPCIO0                             ;;CFD2|CFD2+CFD2/CFD9\CFE0; / 
                      LDA.B #$04                                ;;CFD5|CFD5+CFD5/CFDC\CFE3;
                      STA.W !SpriteMisc151C,X                   ;;CFD7|CFD7+CFD7/CFDE\CFE5;
                      LDA.B #$13                                ;;CFDA|CFDA+CFDA/CFE1\CFE8;
                      STA.W !SpriteMisc1540,X                   ;;CFDC|CFDC+CFDC/CFE3\CFEA;
                    + RTS                                       ;;CFDF|CFDF+CFDF/CFE6\CFED; Return 
                                                                ;;                        ;
CODE_01CFE0:          LDY.W !SpriteMisc1540,X                   ;;CFE0|CFE0+CFE0/CFE7\CFEE;
                      BEQ CODE_01CFFC                           ;;CFE3|CFE3+CFE3/CFEA\CFF1;
                      LDA.B !SpriteYPosLow,X                    ;;CFE5|CFE5+CFE5/CFEC\CFF3;
                      SEC                                       ;;CFE7|CFE7+CFE7/CFEE\CFF5;
                      SBC.B #$01                                ;;CFE8|CFE8+CFE8/CFEF\CFF6;
                      STA.B !SpriteYPosLow,X                    ;;CFEA|CFEA+CFEA/CFF1\CFF8;
                      BCS +                                     ;;CFEC|CFEC+CFEC/CFF3\CFFA;
                      DEC.W !SpriteXPosHigh,X                   ;;CFEE|CFEE+CFEE/CFF5\CFFC;
                    + DEC.B !Mode7YScale                        ;;CFF1|CFF1+CFF1/CFF8\CFFF;
                      TYA                                       ;;CFF3|CFF3+CFF3/CFFA\D001;
                      AND.B #$03                                ;;CFF4|CFF4+CFF4/CFFB\D002;
                      BEQ +                                     ;;CFF6|CFF6+CFF6/CFFD\D004;
                      DEC.B !Mode7XScale                        ;;CFF8|CFF8+CFF8/CFFF\D006;
                    + BRA +                                     ;;CFFA|CFFA+CFFA/D001\D008;
                                                                ;;                        ;
CODE_01CFFC:          LDA.B !Mode7Angle                         ;;CFFC|CFFC+CFFC/D003\D00A;
                      CLC                                       ;;CFFE|CFFE+CFFE/D005\D00C;
                      ADC.B #$06                                ;;CFFF|CFFF+CFFF/D006\D00D;
                      STA.B !Mode7Angle                         ;;D001|D001+D001/D008\D00F;
                      LDA.B !Mode7Angle+1                       ;;D003|D003+D003/D00A\D011;
                      ADC.B #$00                                ;;D005|D005+D005/D00C\D013;
                      AND.B #$01                                ;;D007|D007+D007/D00E\D015;
                      STA.B !Mode7Angle+1                       ;;D009|D009+D009/D010\D017;
                      INC.B !Mode7XScale                        ;;D00B|D00B+D00B/D012\D019;
                      INC.B !Mode7YScale                        ;;D00D|D00D+D00D/D014\D01B;
                    + LDA.B !Mode7YScale                        ;;D00F|D00F+D00F/D016\D01D;
                      CMP.B #con($A0,$A0,$A0,$80,$80)           ;;D011|D011+D011/D018\D01F;
                      BCC Return01D042                          ;;D013|D013+D013/D01A\D021;
                      LDA.W !SpriteOffscreenX,X                 ;;D015|D015+D015/D01C\D023;
                      BNE +                                     ;;D018|D018+D018/D01F\D026;
                      LDA.B #$01                                ;;D01A|D01A+D01A/D021\D028;
                      STA.W !SmokeSpriteNumber                  ;;D01C|D01C+D01C/D023\D02A;
                      LDA.B !SpriteXPosLow,X                    ;;D01F|D01F+D01F/D026\D02D;
                      SBC.B #$08                                ;;D021|D021+D021/D028\D02F;
                      STA.W !SmokeSpriteXPos                    ;;D023|D023+D023/D02A\D031;
                      LDA.B !SpriteYPosLow,X                    ;;D026|D026+D026/D02D\D034;
                      ADC.B #$08                                ;;D028|D028+D028/D02F\D036;
                      STA.W !SmokeSpriteYPos                    ;;D02A|D02A+D02A/D031\D038;
                      LDA.B #$1B                                ;;D02D|D02D+D02D/D034\D03B;
                      STA.W !SmokeSpriteTimer                   ;;D02F|D02F+D02F/D036\D03D;
                    + LDA.B #$D0                                ;;D032|D032+D032/D039\D040;
                      STA.B !SpriteYPosLow,X                    ;;D034|D034+D034/D03B\D042;
                      JSL CODE_03DEDF                           ;;D036|D036+D036/D03D\D044;
                      INC.W !SpriteMisc151C,X                   ;;D03A|D03A+D03A/D041\D048;
                      LDA.B #$30                                ;;D03D|D03D+D03D/D044\D04B;
                      STA.W !SpriteMisc1540,X                   ;;D03F|D03F+D03F/D046\D04D;
Return01D042:         RTS                                       ;;D042|D042+D042/D049\D050; Return 
                                                                ;;                        ;
CODE_01D043:          LDA.W !SpriteMisc1540,X                   ;;D043|D043+D043/D04A\D051;
                      BNE +                                     ;;D046|D046+D046/D04D\D054;
                      INC.W !CutsceneID                         ;;D048|D048+D048/D04F\D056;
                      DEC.W !EndLevelTimer                      ;;D04B|D04B+D04B/D052\D059;
                      LDA.B #!BGM_BOSSCLEAR                     ;;D04E|D04E+D04E/D055\D05C;
                      STA.W !SPCIO2                             ;;D050|D050+D050/D057\D05E; / Change music 
                      STZ.W !SpriteStatus,X                     ;;D053|D053+D053/D05A\D061;
                    + RTS                                       ;;D056|D056+D056/D05D\D064; Return 
                                                                ;;                        ;
                                                                ;;                        ;
DATA_01D057:          db $FF,$F1                                ;;D057|D057+D057/D05E\D065;
                                                                ;;                        ;
CODE_01D059:          LDA.B #!SFX_FIRESPIT                      ;;D059|D059+D059/D060\D067; \ Play sound effect 
                      STA.W !SPCIO3                             ;;D05B|D05B+D05B/D062\D069; / 
                      LDY.B #$04                                ;;D05E|D05E+D05E/D065\D06C;
CODE_01D060:          LDA.W !SpriteStatus,Y                     ;;D060|D060+D060/D067\D06E;
                      BEQ CODE_01D069                           ;;D063|D063+D063/D06A\D071;
                      DEY                                       ;;D065|D065+D065/D06C\D073;
                      BPL CODE_01D060                           ;;D066|D066+D066/D06D\D074;
                      RTS                                       ;;D068|D068+D068/D06F\D076; Return 
                                                                ;;                        ;
CODE_01D069:          LDA.B #$08                                ;;D069|D069+D069/D070\D077; \ Sprite status = Normal 
                      STA.W !SpriteStatus,Y                     ;;D06B|D06B+D06B/D072\D079; / 
                      LDA.B #$34                                ;;D06E|D06E+D06E/D075\D07C;
                      STA.W !SpriteNumber,Y                     ;;D070|D070+D070/D077\D07E;
                      LDA.B !SpriteXPosLow,X                    ;;D073|D073+D073/D07A\D081;
                      STA.B !_0                                 ;;D075|D075+D075/D07C\D083;
                      LDA.W !SpriteYPosHigh,X                   ;;D077|D077+D077/D07E\D085;
                      STA.B !_1                                 ;;D07A|D07A+D07A/D081\D088;
                      LDA.B !SpriteYPosLow,X                    ;;D07C|D07C+D07C/D083\D08A;
                      CLC                                       ;;D07E|D07E+D07E/D085\D08C;
                      ADC.B #$03                                ;;D07F|D07F+D07F/D086\D08D;
                      STA.W !SpriteYPosLow,Y                    ;;D081|D081+D081/D088\D08F;
                      LDA.W !SpriteXPosHigh,X                   ;;D084|D084+D084/D08B\D092;
                      ADC.B #$00                                ;;D087|D087+D087/D08E\D095;
                      STA.W !SpriteXPosHigh,Y                   ;;D089|D089+D089/D090\D097;
                      LDA.W !SpriteMisc157C,X                   ;;D08C|D08C+D08C/D093\D09A;
                      PHX                                       ;;D08F|D08F+D08F/D096\D09D;
                      TAX                                       ;;D090|D090+D090/D097\D09E;
                      LDA.B !_0                                 ;;D091|D091+D091/D098\D09F;
                      CLC                                       ;;D093|D093+D093/D09A\D0A1;
                      ADC.W DATA_01D057,X                       ;;D094|D094+D094/D09B\D0A2;
                      STA.W !SpriteXPosLow,Y                    ;;D097|D097+D097/D09E\D0A5;
                      LDA.B !_1                                 ;;D09A|D09A+D09A/D0A1\D0A8;
                      ADC.B #$FF                                ;;D09C|D09C+D09C/D0A3\D0AA;
                      STA.W !SpriteYPosHigh,Y                   ;;D09E|D09E+D09E/D0A5\D0AC;
                      PLX                                       ;;D0A1|D0A1+D0A1/D0A8\D0AF;
                      PHX                                       ;;D0A2|D0A2+D0A2/D0A9\D0B0;
                      TYX                                       ;;D0A3|D0A3+D0A3/D0AA\D0B1;
                      JSL InitSpriteTables                      ;;D0A4|D0A4+D0A4/D0AB\D0B2;
                      PLX                                       ;;D0A8|D0A8+D0A8/D0AF\D0B6;
                      PHX                                       ;;D0A9|D0A9+D0A9/D0B0\D0B7;
                      LDA.W !SpriteMisc157C,X                   ;;D0AA|D0AA+D0AA/D0B1\D0B8;
                      STA.W !SpriteMisc157C,Y                   ;;D0AD|D0AD+D0AD/D0B4\D0BB;
                      TAX                                       ;;D0B0|D0B0+D0B0/D0B7\D0BE;
                      LDA.W DATA_01D0BE,X                       ;;D0B1|D0B1+D0B1/D0B8\D0BF;
                      STA.W !SpriteXSpeed,Y                     ;;D0B4|D0B4+D0B4/D0BB\D0C2;
                      LDA.B #$30                                ;;D0B7|D0B7+D0B7/D0BE\D0C5;
                      STA.W !SpriteMisc1540,Y                   ;;D0B9|D0B9+D0B9/D0C0\D0C7;
                      PLX                                       ;;D0BC|D0BC+D0BC/D0C3\D0CA;
                      RTS                                       ;;D0BD|D0BD+D0BD/D0C4\D0CB; Return 
                                                                ;;                        ;
                                                                ;;                        ;
DATA_01D0BE:          db $20,$E0                                ;;D0BE|D0BE+D0BE/D0C5\D0CC;
                                                                ;;                        ;
CODE_01D0C0:          LDA.B !SpriteYSpeed,X                     ;;D0C0|D0C0+D0C0/D0C7\D0CE;
                      BMI +                                     ;;D0C2|D0C2+D0C2/D0C9\D0D0;
                      LDA.W !SpriteXPosHigh,X                   ;;D0C4|D0C4+D0C4/D0CB\D0D2;
                      BNE +                                     ;;D0C7|D0C7+D0C7/D0CE\D0D5;
                      LDA.B !Mode7YScale                        ;;D0C9|D0C9+D0C9/D0D0\D0D7;
                      LSR A                                     ;;D0CB|D0CB+D0CB/D0D2\D0D9;
                      TAY                                       ;;D0CC|D0CC+D0CC/D0D3\D0DA;
                      LDA.B !SpriteYPosLow,X                    ;;D0CD|D0CD+D0CD/D0D4\D0DB;
                      CMP.W DATA_01D0DE-8,Y                     ;;D0CF|D0CF+D0CF/D0D6\D0DD;
                      BCC +                                     ;;D0D2|D0D2+D0D2/D0D9\D0E0;
                      LDA.W DATA_01D0DE-8,Y                     ;;D0D4|D0D4+D0D4/D0DB\D0E2;
                      STA.B !SpriteYPosLow,X                    ;;D0D7|D0D7+D0D7/D0DE\D0E5;
                      STZ.B !SpriteYSpeed,X                     ;;D0D9|D0D9+D0D9/D0E0\D0E7; Sprite Y Speed = 0 
                      RTS                                       ;;D0DB|D0DB+D0DB/D0E2\D0E9; Return 
                                                                ;;                        ;
                    + CLC                                       ;;D0DC|D0DC+D0DC/D0E3\D0EA;
                      RTS                                       ;;D0DD|D0DD+D0DD/D0E4\D0EB; Return 
                                                                ;;                        ;
                                                                ;;                        ;
DATA_01D0DE:          db $80,$83,$85,$88,$8A,$8B,$8D,$8F        ;;D0DE|D0DE+D0DE/D0E5\D0EC;
                      db $90,$91,$91,$92,$92,$93,$93,$94        ;;D0E6|D0E6+D0E6/D0ED\D0F4;
                      db $94,$95,$95,$96,$96,$97,$97,$98        ;;D0EE|D0EE+D0EE/D0F5\D0FC;
                      db $98,$98,$99,$99,$9A,$9A,$9B,$9B        ;;D0F6|D0F6+D0F6/D0FD\D104;
                      db $9C,$9C,$9C,$9C,$9D,$9D,$9D,$9D        ;;D0FE|D0FE+D0FE/D105\D10C;
                      db $9E,$9E,$9E,$9E,$9E,$9F,$9F,$9F        ;;D106|D106+D106/D10D\D114;
                      db $9F,$9F,$9F,$9F,$9F,$9F,$9F,$9F        ;;D10E|D10E+D10E/D115\D11C;
                                                                ;;                        ;
CODE_01D116:          LDA.W !SpriteMisc1528,X                   ;;D116|D116+D116/D11D\D124;
                      JSL ExecutePtr                            ;;D119|D119+D119/D120\D127;
                                                                ;;                        ;
                      dw CODE_01D146                            ;;D11D|D11D+D11D/D124\D12B;
                      dw CODE_01D23F                            ;;D11F|D11F+D11F/D126\D12D;
                                                                ;;                        ;
                      RTS                                       ;;D121|D121+D121/D128\D12F;
                                                                ;;                        ;
                                                                ;;                        ;
DATA_01D122:          db $F0,$00,$10,$00,$F0,$00,$10,$00        ;;D122|D122+D122/D129\D130;
                      db $E8,$00,$18,$00                        ;;D12A|D12A+D12A/D131\D138;
                                                                ;;                        ;
DATA_01D12E:          db $00,$F0,$00,$10,$00,$F0,$00,$10        ;;D12E|D12E+D12E/D135\D13C;
                      db $00,$E8,$00,$18,$26,$26,$D8,$D8        ;;D136|D136+D136/D13D\D144;
DATA_01D13E:          db $90,$30,$30,$90                        ;;D13E|D13E+D13E/D145\D14C;
                                                                ;;                        ;
DATA_01D142:          db $00,$01,$02,$01                        ;;D142|D142+D142/D149\D150;
                                                                ;;                        ;
CODE_01D146:          LDA.B !EffFrame                           ;;D146|D146+D146/D14D\D154;
                      LSR A                                     ;;D148|D148+D148/D14F\D156;
                      LDY.W !SpriteMisc1626,X                   ;;D149|D149+D149/D150\D157;
                      CPY.B #$02                                ;;D14C|D14C+D14C/D153\D15A;
                      BCS +                                     ;;D14E|D14E+D14E/D155\D15C;
                      LSR A                                     ;;D150|D150+D150/D157\D15E;
                    + AND.B #$03                                ;;D151|D151+D151/D158\D15F;
                      TAY                                       ;;D153|D153+D153/D15A\D161;
                      LDA.W DATA_01D142,Y                       ;;D154|D154+D154/D15B\D162;
                      LDY.W !SpriteMisc15AC,X                   ;;D157|D157+D157/D15E\D165;
                      BEQ +                                     ;;D15A|D15A+D15A/D161\D168;
                      LDA.B #$05                                ;;D15C|D15C+D15C/D163\D16A;
                    + STA.W !SpriteMisc1602,X                   ;;D15E|D15E+D15E/D165\D16C;
                      LDA.W !SpriteInLiquid,X                   ;;D161|D161+D161/D168\D16F;
                      BEQ +                                     ;;D164|D164+D164/D16B\D172;
                      LDY.B !SpriteXPosLow,X                    ;;D166|D166+D166/D16D\D174;
                      CPY.B #$50                                ;;D168|D168+D168/D16F\D176;
                      BCC +                                     ;;D16A|D16A+D16A/D171\D178;
                      CPY.B #$80                                ;;D16C|D16C+D16C/D173\D17A;
                      BCS +                                     ;;D16E|D16E+D16E/D175\D17C;
                      DEC.W !SpriteInLiquid,X                   ;;D170|D170+D170/D177\D17E;
                      LSR A                                     ;;D173|D173+D173/D17A\D181;
                      BCS +                                     ;;D174|D174+D174/D17B\D182;
                      INC.W !SpriteMisc1534,X                   ;;D176|D176+D176/D17D\D184;
                      DEC.W !SpriteMisc160E,X                   ;;D179|D179+D179/D180\D187;
                    + LDA.W !SpriteMisc1534,X                   ;;D17C|D17C+D17C/D183\D18A;
                      STA.B !_5                                 ;;D17F|D17F+D17F/D186\D18D;
                      STA.B !_6                                 ;;D181|D181+D181/D188\D18F;
                      STA.B !_B                                 ;;D183|D183+D183/D18A\D191;
                      STA.B !_C                                 ;;D185|D185+D185/D18C\D193;
                      LDA.W !SpriteMisc160E,X                   ;;D187|D187+D187/D18E\D195;
                      STA.B !_7                                 ;;D18A|D18A+D18A/D191\D198;
                      STA.B !_8                                 ;;D18C|D18C+D18C/D193\D19A;
                      STA.B !_9                                 ;;D18E|D18E+D18E/D195\D19C;
                      STA.B !_A                                 ;;D190|D190+D190/D197\D19E;
                      LDA.B !Mode7Angle                         ;;D192|D192+D192/D199\D1A0;
                      ASL A                                     ;;D194|D194+D194/D19B\D1A2;
                      BEQ +                                     ;;D195|D195+D195/D19C\D1A3;
                      JMP CODE_01D224                           ;;D197|D197+D197/D19E\D1A5;
                                                                ;;                        ;
                    + LDY.W !SpriteMisc1594,X                   ;;D19A|D19A+D19A/D1A1\D1A8;
                      TYA                                       ;;D19D|D19D+D19D/D1A4\D1AB;
                      LSR A                                     ;;D19E|D19E+D19E/D1A5\D1AC;
                      BCS CODE_01D1B5                           ;;D19F|D19F+D19F/D1A6\D1AD;
                      LDA.B !SpriteXPosLow,X                    ;;D1A1|D1A1+D1A1/D1A8\D1AF;
                      CPY.B #$00                                ;;D1A3|D1A3+D1A3/D1AA\D1B1;
                      BNE CODE_01D1AE                           ;;D1A5|D1A5+D1A5/D1AC\D1B3;
                      CMP.W !SpriteMisc1534,X                   ;;D1A7|D1A7+D1A7/D1AE\D1B5;
                      BCC CODE_01D215                           ;;D1AA|D1AA+D1AA/D1B1\D1B8;
                      BRA CODE_01D1D8                           ;;D1AC|D1AC+D1AC/D1B3\D1BA;
                                                                ;;                        ;
CODE_01D1AE:          CMP.W !SpriteMisc160E,X                   ;;D1AE|D1AE+D1AE/D1B5\D1BC;
                      BCS CODE_01D215                           ;;D1B1|D1B1+D1B1/D1B8\D1BF;
                      BRA CODE_01D1D8                           ;;D1B3|D1B3+D1B3/D1BA\D1C1;
                                                                ;;                        ;
CODE_01D1B5:          LDA.W !SpriteMisc157C,X                   ;;D1B5|D1B5+D1B5/D1BC\D1C3;
                      BNE +                                     ;;D1B8|D1B8+D1B8/D1BF\D1C6;
                      INY                                       ;;D1BA|D1BA+D1BA/D1C1\D1C8;
                      INY                                       ;;D1BB|D1BB+D1BB/D1C2\D1C9;
                      INY                                       ;;D1BC|D1BC+D1BC/D1C3\D1CA;
                      INY                                       ;;D1BD|D1BD+D1BD/D1C4\D1CB;
                    + LDA.W !_5,Y                               ;;D1BE|D1BE+D1BE/D1C5\D1CC;
                      STA.B !SpriteXPosLow,X                    ;;D1C1|D1C1+D1C1/D1C8\D1CF;
                      LDY.W !SpriteMisc1594,X                   ;;D1C3|D1C3+D1C3/D1CA\D1D1;
                      LDA.B !SpriteYPosLow,X                    ;;D1C6|D1C6+D1C6/D1CD\D1D4;
                      CPY.B #$03                                ;;D1C8|D1C8+D1C8/D1CF\D1D6;
                      BEQ ADDR_01D1D3                           ;;D1CA|D1CA+D1CA/D1D1\D1D8;
                      CMP.W DATA_01D13E,Y                       ;;D1CC|D1CC+D1CC/D1D3\D1DA;
                      BCC CODE_01D215                           ;;D1CF|D1CF+D1CF/D1D6\D1DD;
                      BRA CODE_01D1D8                           ;;D1D1|D1D1+D1D1/D1D8\D1DF;
                                                                ;;                        ;
ADDR_01D1D3:          CMP.W DATA_01D13E,Y                       ;;D1D3|D1D3+D1D3/D1DA\D1E1;
                      BCS CODE_01D215                           ;;D1D6|D1D6+D1D6/D1DD\D1E4;
CODE_01D1D8:          LDA.W !SpriteMisc1626,X                   ;;D1D8|D1D8+D1D8/D1DF\D1E6;
                      CMP.B #$02                                ;;D1DB|D1DB+D1DB/D1E2\D1E9;
                      BCC +                                     ;;D1DD|D1DD+D1DD/D1E4\D1EB;
                      LDA.B #$02                                ;;D1DF|D1DF+D1DF/D1E6\D1ED;
                    + ASL A                                     ;;D1E1|D1E1+D1E1/D1E8\D1EF;
                      ASL A                                     ;;D1E2|D1E2+D1E2/D1E9\D1F0;
                      ADC.W !SpriteMisc1594,X                   ;;D1E3|D1E3+D1E3/D1EA\D1F1;
                      TAY                                       ;;D1E6|D1E6+D1E6/D1ED\D1F4;
                      LDA.W DATA_01D122,Y                       ;;D1E7|D1E7+D1E7/D1EE\D1F5;
                      STA.B !SpriteXSpeed,X                     ;;D1EA|D1EA+D1EA/D1F1\D1F8;
                      LDA.W DATA_01D12E,Y                       ;;D1EC|D1EC+D1EC/D1F3\D1FA;
                      STA.B !SpriteYSpeed,X                     ;;D1EF|D1EF+D1EF/D1F6\D1FD;
                      JSR SubSprXPosNoGrvty                     ;;D1F1|D1F1+D1F1/D1F8\D1FF;
                      JSR SubSprYPosNoGrvty                     ;;D1F4|D1F4+D1F4/D1FB\D202;
                      LDA.W !SpriteMisc1594,X                   ;;D1F7|D1F7+D1F7/D1FE\D205;
                      LDY.W !SpriteMisc157C,X                   ;;D1FA|D1FA+D1FA/D201\D208;
                      BNE +                                     ;;D1FD|D1FD+D1FD/D204\D20B;
                      EOR.B #$02                                ;;D1FF|D1FF+D1FF/D206\D20D;
                    + CMP.B #$02                                ;;D201|D201+D201/D208\D20F;
                      BNE +                                     ;;D203|D203+D203/D20A\D211;
                      JSR SubHorizPos                           ;;D205|D205+D205/D20C\D213;
                      LDA.B !_F                                 ;;D208|D208+D208/D20F\D216;
                      CLC                                       ;;D20A|D20A+D20A/D211\D218;
                      ADC.B #$10                                ;;D20B|D20B+D20B/D212\D219;
                      CMP.B #$20                                ;;D20D|D20D+D20D/D214\D21B;
                      BCS +                                     ;;D20F|D20F+D20F/D216\D21D;
                      INC.W !SpriteMisc1528,X                   ;;D211|D211+D211/D218\D21F;
                    + RTS                                       ;;D214|D214+D214/D21B\D222; Return 
                                                                ;;                        ;
CODE_01D215:          LDY.W !SpriteMisc157C,X                   ;;D215|D215+D215/D21C\D223;
                      LDA.W !SpriteMisc1594,X                   ;;D218|D218+D218/D21F\D226;
                      CLC                                       ;;D21B|D21B+D21B/D222\D229;
                      ADC.W DATA_01D23D,Y                       ;;D21C|D21C+D21C/D223\D22A;
                      AND.B #$03                                ;;D21F|D21F+D21F/D226\D22D;
                      STA.W !SpriteMisc1594,X                   ;;D221|D221+D221/D228\D22F;
CODE_01D224:          LDY.W !SpriteMisc157C,X                   ;;D224|D224+D224/D22B\D232;
                      LDA.B !Mode7Angle                         ;;D227|D227+D227/D22E\D235;
                      CLC                                       ;;D229|D229+D229/D230\D237;
                      ADC.W DATA_01D239,Y                       ;;D22A|D22A+D22A/D231\D238;
                      STA.B !Mode7Angle                         ;;D22D|D22D+D22D/D234\D23B;
                      LDA.B !Mode7Angle+1                       ;;D22F|D22F+D22F/D236\D23D;
                      ADC.W DATA_01D23B,Y                       ;;D231|D231+D231/D238\D23F;
                      AND.B #$01                                ;;D234|D234+D234/D23B\D242;
                      STA.B !Mode7Angle+1                       ;;D236|D236+D236/D23D\D244;
                      RTS                                       ;;D238|D238+D238/D23F\D246; Return 
                                                                ;;                        ;
                                                                ;;                        ;
DATA_01D239:          db $FC,$04                                ;;D239|D239+D239/D240\D247;
                                                                ;;                        ;
DATA_01D23B:          db $FF,$00                                ;;D23B|D23B+D23B/D242\D249;
                                                                ;;                        ;
DATA_01D23D:          db $FF,$01                                ;;D23D|D23D+D23D/D244\D24B;
                                                                ;;                        ;
CODE_01D23F:          LDA.W !SpriteMisc1540,X                   ;;D23F|D23F+D23F/D246\D24D;
                      BEQ CODE_01D25E                           ;;D242|D242+D242/D249\D250;
                      CMP.B #$01                                ;;D244|D244+D244/D24B\D252;
                      BNE Return01D2A7                          ;;D246|D246+D246/D24D\D254;
                      STZ.W !SpriteMisc1528,X                   ;;D248|D248+D248/D24F\D256;
                      JSR SubHorizPos                           ;;D24B|D24B+D24B/D252\D259;
                      TYA                                       ;;D24E|D24E+D24E/D255\D25C;
                      STA.W !SpriteMisc157C,X                   ;;D24F|D24F+D24F/D256\D25D;
                      ASL A                                     ;;D252|D252+D252/D259\D260;
                      EOR.B #$02                                ;;D253|D253+D253/D25A\D261;
                      STA.W !SpriteMisc1594,X                   ;;D255|D255+D255/D25C\D263;
                      LDA.B #$0A                                ;;D258|D258+D258/D25F\D266; \ Set turning timer 
                      STA.W !SpriteMisc15AC,X                   ;;D25A|D25A+D25A/D261\D268; / 
                      RTS                                       ;;D25D|D25D+D25D/D264\D26B; Return 
                                                                ;;                        ;
CODE_01D25E:          LDA.B #$06                                ;;D25E|D25E+D25E/D265\D26C;
                      STA.W !SpriteMisc1602,X                   ;;D260|D260+D260/D267\D26E;
                      JSR SubSprYPosNoGrvty                     ;;D263|D263+D263/D26A\D271;
                      LDA.B !SpriteYSpeed,X                     ;;D266|D266+D266/D26D\D274;
                      CMP.B #$70                                ;;D268|D268+D268/D26F\D276;
                      BCS +                                     ;;D26A|D26A+D26A/D271\D278;
                      CLC                                       ;;D26C|D26C+D26C/D273\D27A;
                      ADC.B #$04                                ;;D26D|D26D+D26D/D274\D27B;
                      STA.B !SpriteYSpeed,X                     ;;D26F|D26F+D26F/D276\D27D;
                    + LDA.B !Mode7Angle                         ;;D271|D271+D271/D278\D27F;
                      ORA.B !Mode7Angle+1                       ;;D273|D273+D273/D27A\D281;
                      BEQ +                                     ;;D275|D275+D275/D27C\D283;
                      LDA.B !Mode7Angle                         ;;D277|D277+D277/D27E\D285;
                      CLC                                       ;;D279|D279+D279/D280\D287;
                      ADC.B #$08                                ;;D27A|D27A+D27A/D281\D288;
                      STA.B !Mode7Angle                         ;;D27C|D27C+D27C/D283\D28A;
                      LDA.B !Mode7Angle+1                       ;;D27E|D27E+D27E/D285\D28C;
                      ADC.B #$00                                ;;D280|D280+D280/D287\D28E;
                      AND.B #$01                                ;;D282|D282+D282/D289\D290;
                      STA.B !Mode7Angle+1                       ;;D284|D284+D284/D28B\D292;
                    + JSR CODE_01D0C0                           ;;D286|D286+D286/D28D\D294;
                      BCC Return01D2A7                          ;;D289|D289+D289/D290\D297;
                      LDA.B #$20                                ;;D28B|D28B+D28B/D292\D299; \ Set ground shake timer 
                      STA.W !ScreenShakeTimer                   ;;D28D|D28D+D28D/D294\D29B; / 
                      LDA.B !PlayerInAir                        ;;D290|D290+D290/D297\D29E;
                      BNE +                                     ;;D292|D292+D292/D299\D2A0;
                      LDA.B #$28                                ;;D294|D294+D294/D29B\D2A2; \ Lock Mario in place 
                      STA.W !PlayerStunnedTimer                 ;;D296|D296+D296/D29D\D2A4; / 
                    + LDA.B #!SFX_KAPOW                         ;;D299|D299+D299/D2A0\D2A7; \ Play sound effect 
                      STA.W !SPCIO3                             ;;D29B|D29B+D29B/D2A2\D2A9; / 
                      LDA.B #$28                                ;;D29E|D29E+D29E/D2A5\D2AC;
                      STA.W !SpriteMisc1540,X                   ;;D2A0|D2A0+D2A0/D2A7\D2AE;
                      STZ.B !Mode7Angle                         ;;D2A3|D2A3+D2A3/D2AA\D2B1;
                      STZ.B !Mode7Angle+1                       ;;D2A5|D2A5+D2A5/D2AC\D2B3;
Return01D2A7:         RTS                                       ;;D2A7|D2A7+D2A7/D2AE\D2B5; Return 
                                                                ;;                        ;
CODE_01D2A8:          LDA.W !SpriteMisc151C,X                   ;;D2A8|D2A8+D2A8/D2AF\D2B6;
                      CMP.B #$03                                ;;D2AB|D2AB+D2AB/D2B2\D2B9;
                      BCS Return01D318                          ;;D2AD|D2AD+D2AD/D2B4\D2BB;
                      LDA.W !SpriteMisc187B,X                   ;;D2AF|D2AF+D2AF/D2B6\D2BD;
                      CMP.B #$03                                ;;D2B2|D2B2+D2B2/D2B9\D2C0;
                      BNE CODE_01D2BD                           ;;D2B4|D2B4+D2B4/D2BB\D2C2;
                      LDA.W !SpriteMisc1528,X                   ;;D2B6|D2B6+D2B6/D2BD\D2C4;
                      CMP.B #$03                                ;;D2B9|D2B9+D2B9/D2C0\D2C7;
                      BCS Return01D318                          ;;D2BB|D2BB+D2BB/D2C2\D2C9;
CODE_01D2BD:          JSL GetMarioClipping                      ;;D2BD|D2BD+D2BD/D2C4\D2CB;
                      JSR CODE_01D40B                           ;;D2C1|D2C1+D2C1/D2C8\D2CF;
                      JSL CheckForContact                       ;;D2C4|D2C4+D2C4/D2CB\D2D2;
                      BCC Return01D318                          ;;D2C8|D2C8+D2C8/D2CF\D2D6;
                      LDA.W !SpriteMisc1FE2,X                   ;;D2CA|D2CA+D2CA/D2D1\D2D8;
                      BNE Return01D318                          ;;D2CD|D2CD+D2CD/D2D4\D2DB;
                      LDA.B #$08                                ;;D2CF|D2CF+D2CF/D2D6\D2DD;
                      STA.W !SpriteMisc1FE2,X                   ;;D2D1|D2D1+D2D1/D2D8\D2DF;
                      LDA.B !PlayerInAir                        ;;D2D4|D2D4+D2D4/D2DB\D2E2;
                      BEQ CODE_01D319                           ;;D2D6|D2D6+D2D6/D2DD\D2E4;
                      LDA.W !SpriteMisc1602,X                   ;;D2D8|D2D8+D2D8/D2DF\D2E6;
                      CMP.B #$10                                ;;D2DB|D2DB+D2DB/D2E2\D2E9;
                      BCS CODE_01D2E3                           ;;D2DD|D2DD+D2DD/D2E4\D2EB;
                      CMP.B #$06                                ;;D2DF|D2DF+D2DF/D2E6\D2ED;
                      BCS ADDR_01D31E                           ;;D2E1|D2E1+D2E1/D2E8\D2EF;
CODE_01D2E3:          LDA.B !PlayerYPosNext                     ;;D2E3|D2E3+D2E3/D2EA\D2F1;
                      CLC                                       ;;D2E5|D2E5+D2E5/D2EC\D2F3;
                      ADC.B #$08                                ;;D2E6|D2E6+D2E6/D2ED\D2F4;
                      CMP.B !SpriteYPosLow,X                    ;;D2E8|D2E8+D2E8/D2EF\D2F6;
                      BCS ADDR_01D31E                           ;;D2EA|D2EA+D2EA/D2F1\D2F8;
                      LDA.W !SpriteMisc1594,X                   ;;D2EC|D2EC+D2EC/D2F3\D2FA;
                      LSR A                                     ;;D2EF|D2EF+D2EF/D2F6\D2FD;
                      BCS CODE_01D334                           ;;D2F0|D2F0+D2F0/D2F7\D2FE;
                      LDA.B !PlayerYSpeed                       ;;D2F2|D2F2+D2F2/D2F9\D300;
                      BMI Return01D31D                          ;;D2F4|D2F4+D2F4/D2FB\D302;
                      JSR CODE_01D351                           ;;D2F6|D2F6+D2F6/D2FD\D304;
                      LDA.B #$D0                                ;;D2F9|D2F9+D2F9/D300\D307;
                      STA.B !PlayerYSpeed                       ;;D2FB|D2FB+D2FB/D302\D309;
                      LDA.B #!SFX_SPLAT                         ;;D2FD|D2FD+D2FD/D304\D30B; \ Play sound effect 
                      STA.W !SPCIO0                             ;;D2FF|D2FF+D2FF/D306\D30D; / 
                      LDA.W !SpriteMisc1602,X                   ;;D302|D302+D302/D309\D310;
                      CMP.B #$1B                                ;;D305|D305+D305/D30C\D313;
                      BCC CODE_01D379                           ;;D307|D307+D307/D30E\D315;
ADDR_01D309:          LDY.B #$20                                ;;D309|D309+D309/D310\D317;
                      LDA.B !SpriteXPosLow,X                    ;;D30B|D30B+D30B/D312\D319;
                      SEC                                       ;;D30D|D30D+D30D/D314\D31B;
                      SBC.B #$08                                ;;D30E|D30E+D30E/D315\D31C;
                      CMP.B !PlayerXPosNext                     ;;D310|D310+D310/D317\D31E;
                      BMI +                                     ;;D312|D312+D312/D319\D320;
                      LDY.B #$E0                                ;;D314|D314+D314/D31B\D322;
                    + STY.B !PlayerXSpeed                       ;;D316|D316+D316/D31D\D324;
Return01D318:         RTS                                       ;;D318|D318+D318/D31F\D326; Return 
                                                                ;;                        ;
CODE_01D319:          JSL HurtMario                             ;;D319|D319+D319/D320\D327;
Return01D31D:         RTS                                       ;;D31D|D31D+D31D/D324\D32B; Return 
                                                                ;;                        ;
ADDR_01D31E:          LDA.B #!SFX_BONK                          ;;D31E|D31E+D31E/D325\D32C; \ Play sound effect 
                      STA.W !SPCIO0                             ;;D320|D320+D320/D327\D32E; / 
                      LDA.B !PlayerYSpeed                       ;;D323|D323+D323/D32A\D331;
                      BPL +                                     ;;D325|D325+D325/D32C\D333;
                      LDA.B #$10                                ;;D327|D327+D327/D32E\D335;
                      STA.B !PlayerYSpeed                       ;;D329|D329+D329/D330\D337;
                      RTS                                       ;;D32B|D32B+D32B/D332\D339; Return 
                                                                ;;                        ;
                    + JSR ADDR_01D309                           ;;D32C|D32C+D32C/D333\D33A;
                      LDA.B #$D0                                ;;D32F|D32F+D32F/D336\D33D;
                      STA.B !PlayerYSpeed                       ;;D331|D331+D331/D338\D33F;
                      RTS                                       ;;D333|D333+D333/D33A\D341; Return 
                                                                ;;                        ;
CODE_01D334:          LDA.B #!SFX_BONK                          ;;D334|D334+D334/D33B\D342; \ Play sound effect 
                      STA.W !SPCIO0                             ;;D336|D336+D336/D33D\D344; / 
                      LDA.B !PlayerYSpeed                       ;;D339|D339+D339/D340\D347;
                      BPL +                                     ;;D33B|D33B+D33B/D342\D349;
                      LDA.B #$20                                ;;D33D|D33D+D33D/D344\D34B;
                      STA.B !PlayerYSpeed                       ;;D33F|D33F+D33F/D346\D34D;
                      RTS                                       ;;D341|D341+D341/D348\D34F; Return 
                                                                ;;                        ;
                    + LDY.B #$20                                ;;D342|D342+D342/D349\D350;
                      LDA.B !SpriteXPosLow,X                    ;;D344|D344+D344/D34B\D352;
                      BPL +                                     ;;D346|D346+D346/D34D\D354;
                      LDY.B #$E0                                ;;D348|D348+D348/D34F\D356;
                    + STY.B !PlayerXSpeed                       ;;D34A|D34A+D34A/D351\D358;
                      LDA.B #$B0                                ;;D34C|D34C+D34C/D353\D35A;
                      STA.B !PlayerYSpeed                       ;;D34E|D34E+D34E/D355\D35C;
                      RTS                                       ;;D350|D350+D350/D357\D35E; Return 
                                                                ;;                        ;
CODE_01D351:          LDA.B !SpriteXPosLow,X                    ;;D351|D351+D351/D358\D35F;
                      PHA                                       ;;D353|D353+D353/D35A\D361;
                      SEC                                       ;;D354|D354+D354/D35B\D362;
                      SBC.B #$08                                ;;D355|D355+D355/D35C\D363;
                      STA.B !SpriteXPosLow,X                    ;;D357|D357+D357/D35E\D365;
                      LDA.W !SpriteYPosHigh,X                   ;;D359|D359+D359/D360\D367;
                      PHA                                       ;;D35C|D35C+D35C/D363\D36A;
                      SBC.B #$00                                ;;D35D|D35D+D35D/D364\D36B;
                      STA.W !SpriteYPosHigh,X                   ;;D35F|D35F+D35F/D366\D36D;
                      LDA.B !SpriteYPosLow,X                    ;;D362|D362+D362/D369\D370;
                      PHA                                       ;;D364|D364+D364/D36B\D372;
                      CLC                                       ;;D365|D365+D365/D36C\D373;
                      ADC.B #$08                                ;;D366|D366+D366/D36D\D374;
                      STA.B !SpriteYPosLow,X                    ;;D368|D368+D368/D36F\D376;
                      JSL DisplayContactGfx                     ;;D36A|D36A+D36A/D371\D378;
                      PLA                                       ;;D36E|D36E+D36E/D375\D37C;
                      STA.B !SpriteYPosLow,X                    ;;D36F|D36F+D36F/D376\D37D;
                      PLA                                       ;;D371|D371+D371/D378\D37F;
                      STA.W !SpriteYPosHigh,X                   ;;D372|D372+D372/D379\D380;
                      PLA                                       ;;D375|D375+D375/D37C\D383;
                      STA.B !SpriteXPosLow,X                    ;;D376|D376+D376/D37D\D384;
                      RTS                                       ;;D378|D378+D378/D37F\D386; Return 
                                                                ;;                        ;
CODE_01D379:          LDA.B #$18                                ;;D379|D379+D379/D380\D387;
                      STA.B !Mode7XScale                        ;;D37B|D37B+D37B/D382\D389;
                      PHX                                       ;;D37D|D37D+D37D/D384\D38B;
                      LDA.B !Mode7YScale                        ;;D37E|D37E+D37E/D385\D38C;
                      LSR A                                     ;;D380|D380+D380/D387\D38E;
                      TAX                                       ;;D381|D381+D381/D388\D38F;
                      LDA.B #$28                                ;;D382|D382+D382/D389\D390;
                      STA.B !Mode7YScale                        ;;D384|D384+D384/D38B\D392;
                      LSR A                                     ;;D386|D386+D386/D38D\D394;
                      TAY                                       ;;D387|D387+D387/D38E\D395;
                      LDA.W DATA_01D0DE-8,Y                     ;;D388|D388+D388/D38F\D396;
                      SEC                                       ;;D38B|D38B+D38B/D392\D399;
                      SBC.W DATA_01D0DE-8,X                     ;;D38C|D38C+D38C/D393\D39A;
                      PLX                                       ;;D38F|D38F+D38F/D396\D39D;
                      CLC                                       ;;D390|D390+D390/D397\D39E;
                      ADC.B !SpriteYPosLow,X                    ;;D391|D391+D391/D398\D39F;
                      STA.B !SpriteYPosLow,X                    ;;D393|D393+D393/D39A\D3A1;
                      LDA.W !SpriteXPosHigh,X                   ;;D395|D395+D395/D39C\D3A3;
                      ADC.B #$00                                ;;D398|D398+D398/D39F\D3A6;
                      STA.W !SpriteXPosHigh,X                   ;;D39A|D39A+D39A/D3A1\D3A8;
                      STZ.B !SpriteXSpeed,X                     ;;D39D|D39D+D39D/D3A4\D3AB; \ Sprite Speed = 0 
                      STZ.B !SpriteYSpeed,X                     ;;D39F|D39F+D39F/D3A6\D3AD; / 
                      LDA.B #$80                                ;;D3A1|D3A1+D3A1/D3A8\D3AF;
                      STA.W !SpriteMisc1540,X                   ;;D3A3|D3A3+D3A3/D3AA\D3B1;
                      LDA.B #$03                                ;;D3A6|D3A6+D3A6/D3AD\D3B4;
                      STA.W !SpriteMisc151C,X                   ;;D3A8|D3A8+D3A8/D3AF\D3B6;
                      LDA.B #!SFX_ENEMYHURT                     ;;D3AB|D3AB+D3AB/D3B2\D3B9; \ Play sound effect 
                      STA.W !SPCIO3                             ;;D3AD|D3AD+D3AD/D3B4\D3BB; / 
                      RTS                                       ;;D3B0|D3B0+D3B0/D3B7\D3BE; Return 
                                                                ;;                        ;
CODE_01D3B1:          LDA.W !SpriteMisc151C,X                   ;;D3B1|D3B1+D3B1/D3B8\D3BF;
                      CMP.B #$03                                ;;D3B4|D3B4+D3B4/D3BB\D3C2;
                      BCS Return01D40A                          ;;D3B6|D3B6+D3B6/D3BD\D3C4;
                      LDY.B #$0A                                ;;D3B8|D3B8+D3B8/D3BF\D3C6;
CODE_01D3BA:          STY.W !SpriteInterIndex                   ;;D3BA|D3BA+D3BA/D3C1\D3C8;
                      LDA.W !ExtSpriteNumber,Y                  ;;D3BD|D3BD+D3BD/D3C4\D3CB;
                      CMP.B #$05                                ;;D3C0|D3C0+D3C0/D3C7\D3CE;
                      BNE +                                     ;;D3C2|D3C2+D3C2/D3C9\D3D0;
                      LDA.W !ExtSpriteXPosLow,Y                 ;;D3C4|D3C4+D3C4/D3CB\D3D2;
                      STA.B !_0                                 ;;D3C7|D3C7+D3C7/D3CE\D3D5;
                      LDA.W !ExtSpriteXPosHigh,Y                ;;D3C9|D3C9+D3C9/D3D0\D3D7;
                      STA.B !_8                                 ;;D3CC|D3CC+D3CC/D3D3\D3DA;
                      LDA.W !ExtSpriteYPosLow,Y                 ;;D3CE|D3CE+D3CE/D3D5\D3DC;
                      STA.B !_1                                 ;;D3D1|D3D1+D3D1/D3D8\D3DF;
                      LDA.W !ExtSpriteYPosHigh,Y                ;;D3D3|D3D3+D3D3/D3DA\D3E1;
                      STA.B !_9                                 ;;D3D6|D3D6+D3D6/D3DD\D3E4;
                      LDA.B #$08                                ;;D3D8|D3D8+D3D8/D3DF\D3E6;
                      STA.B !_2                                 ;;D3DA|D3DA+D3DA/D3E1\D3E8;
                      STA.B !_3                                 ;;D3DC|D3DC+D3DC/D3E3\D3EA;
                      PHY                                       ;;D3DE|D3DE+D3DE/D3E5\D3EC;
                      JSR CODE_01D40B                           ;;D3DF|D3DF+D3DF/D3E6\D3ED;
                      PLY                                       ;;D3E2|D3E2+D3E2/D3E9\D3F0;
                      JSL CheckForContact                       ;;D3E3|D3E3+D3E3/D3EA\D3F1;
                      BCC +                                     ;;D3E7|D3E7+D3E7/D3EE\D3F5;
                      LDA.B #$01                                ;;D3E9|D3E9+D3E9/D3F0\D3F7; \ Extended sprite = Smoke puff 
                      STA.W !ExtSpriteNumber,Y                  ;;D3EB|D3EB+D3EB/D3F2\D3F9; / 
                      LDA.B #$0F                                ;;D3EE|D3EE+D3EE/D3F5\D3FC;
                      STA.W !ExtSpriteMisc176F,Y                ;;D3F0|D3F0+D3F0/D3F7\D3FE;
                      LDA.B #!SFX_BONK                          ;;D3F3|D3F3+D3F3/D3FA\D401; \ Play sound effect 
                      STA.W !SPCIO0                             ;;D3F5|D3F5+D3F5/D3FC\D403; / 
                      INC.W !SpriteMisc1626,X                   ;;D3F8|D3F8+D3F8/D3FF\D406;
                      LDA.W !SpriteMisc1626,X                   ;;D3FB|D3FB+D3FB/D402\D409;
                      CMP.B #$0C                                ;;D3FE|D3FE+D3FE/D405\D40C;
                      BCC +                                     ;;D400|D400+D400/D407\D40E;
                      JSR CODE_01CFD0                           ;;D402|D402+D402/D409\D410;
                    + DEY                                       ;;D405|D405+D405/D40C\D413;
                      CPY.B #$07                                ;;D406|D406+D406/D40D\D414;
                      BNE CODE_01D3BA                           ;;D408|D408+D408/D40F\D416;
Return01D40A:         RTS                                       ;;D40A|D40A+D40A/D411\D418; Return 
                                                                ;;                        ;
CODE_01D40B:          LDA.B !SpriteXPosLow,X                    ;;D40B|D40B+D40B/D412\D419;
                      SEC                                       ;;D40D|D40D+D40D/D414\D41B;
                      SBC.B #$08                                ;;D40E|D40E+D40E/D415\D41C;
                      STA.B !_4                                 ;;D410|D410+D410/D417\D41E;
                      LDA.W !SpriteYPosHigh,X                   ;;D412|D412+D412/D419\D420;
                      SBC.B #$00                                ;;D415|D415+D415/D41C\D423;
                      STA.B !_A                                 ;;D417|D417+D417/D41E\D425;
                      LDA.B #$10                                ;;D419|D419+D419/D420\D427;
                      STA.B !_6                                 ;;D41B|D41B+D41B/D422\D429;
                      LDA.B #$10                                ;;D41D|D41D+D41D/D424\D42B;
                      STA.B !_7                                 ;;D41F|D41F+D41F/D426\D42D;
                      LDA.W !SpriteMisc1602,X                   ;;D421|D421+D421/D428\D42F;
                      CMP.B #$69                                ;;D424|D424+D424/D42B\D432;
                      LDA.B #$08                                ;;D426|D426+D426/D42D\D434;
                      BCC +                                     ;;D428|D428+D428/D42F\D436;
                      ADC.B #$0A                                ;;D42A|D42A+D42A/D431\D438;
                    + CLC                                       ;;D42C|D42C+D42C/D433\D43A;
                      ADC.B !SpriteYPosLow,X                    ;;D42D|D42D+D42D/D434\D43B;
                      STA.B !_5                                 ;;D42F|D42F+D42F/D436\D43D;
                      LDA.W !SpriteXPosHigh,X                   ;;D431|D431+D431/D438\D43F;
                      ADC.B #$00                                ;;D434|D434+D434/D43B\D442;
                      STA.B !_B                                 ;;D436|D436+D436/D43D\D444;
                      RTS                                       ;;D438|D438+D438/D43F\D446; Return 
                                                                ;;                        ;
                                                                ;;                        ;
DATA_01D439:          db $A8,$B0,$B8,$C0,$C8                    ;;D439|D439+D439/D440\D447;
                                                                ;;                        ;
                      STZ.W !SpriteStatus,X                     ;;D43E|D43E+D43E/D445\D44C; \ Unreachable 
                      RTS                                       ;;D441|D441+D441/D448\D44F; / Erase sprite 
                                                                ;;                        ;
                                                                ;;                        ;
DATA_01D442:          db $00,$F0,$00,$10                        ;;D442|D442+D442/D449\D450;
                                                                ;;                        ;
LudwigFireTiles:      db $4A,$4C,$6A,$6C                        ;;D446|D446+D446/D44D\D454;
                                                                ;;                        ;
DATA_01D44A:          db $45,$45,$05,$05                        ;;D44A|D44A+D44A/D451\D458;
                                                                ;;                        ;
BossFireball:         LDA.B !SpriteLock                         ;;D44E|D44E+D44E/D455\D45C;
                      ORA.W !PlayerIsFrozen                     ;;D450|D450+D450/D457\D45E;
                      BNE CODE_01D487                           ;;D453|D453+D453/D45A\D461;
                      LDA.W !SpriteMisc1540,X                   ;;D455|D455+D455/D45C\D463;
                      CMP.B #$10                                ;;D458|D458+D458/D45F\D466;
                      BCS CODE_01D487                           ;;D45A|D45A+D45A/D461\D468;
                      TAY                                       ;;D45C|D45C+D45C/D463\D46A;
                      BNE +                                     ;;D45D|D45D+D45D/D464\D46B;
                      JSR SetAnimationFrame                     ;;D45F|D45F+D45F/D466\D46D;
                      JSR SetAnimationFrame                     ;;D462|D462+D462/D469\D470;
                      JSR MarioSprInteractRt                    ;;D465|D465+D465/D46C\D473;
                    + JSR SubSprXPosNoGrvty                     ;;D468|D468+D468/D46F\D476;
                      LDA.B !SpriteXPosLow,X                    ;;D46B|D46B+D46B/D472\D479;
                      CLC                                       ;;D46D|D46D+D46D/D474\D47B;
                      ADC.B #$20                                ;;D46E|D46E+D46E/D475\D47C;
                      STA.B !_0                                 ;;D470|D470+D470/D477\D47E;
                      LDA.W !SpriteYPosHigh,X                   ;;D472|D472+D472/D479\D480;
                      ADC.B #$00                                ;;D475|D475+D475/D47C\D483;
                      STA.B !_1                                 ;;D477|D477+D477/D47E\D485;
                      REP #$20                                  ;;D479|D479+D479/D480\D487; Accum (16 bit) 
                      LDA.B !_0                                 ;;D47B|D47B+D47B/D482\D489;
                      CMP.W #$0230                              ;;D47D|D47D+D47D/D484\D48B;
                      SEP #$20                                  ;;D480|D480+D480/D487\D48E; Accum (8 bit) 
                      BCC CODE_01D487                           ;;D482|D482+D482/D489\D490;
                      STZ.W !SpriteStatus,X                     ;;D484|D484+D484/D48B\D492;
CODE_01D487:          JSR GetDrawInfoBnk1                       ;;D487|D487+D487/D48E\D495;
                      LDA.W !SpriteMisc1602,X                   ;;D48A|D48A+D48A/D491\D498;
                      ASL A                                     ;;D48D|D48D+D48D/D494\D49B;
                      STA.B !_3                                 ;;D48E|D48E+D48E/D495\D49C;
                      LDA.W !SpriteMisc157C,X                   ;;D490|D490+D490/D497\D49E;
                      ASL A                                     ;;D493|D493+D493/D49A\D4A1;
                      STA.B !_2                                 ;;D494|D494+D494/D49B\D4A2;
                      %LorW_X(LDA,DATA_01D439)                  ;;D496|D496+D496/D49D\D4A4;
                      STA.W !SpriteOAMIndex,X                   ;;D49A|D499+D499/D4A0\D4A7;
                      TAY                                       ;;D49D|D49C+D49C/D4A3\D4AA;
                      PHX                                       ;;D49E|D49D+D49D/D4A4\D4AB;
                      LDA.W !SpriteMisc1540,X                   ;;D49F|D49E+D49E/D4A5\D4AC;
                      LDX.B #$01                                ;;D4A2|D4A1+D4A1/D4A8\D4AF;
                      CMP.B #$08                                ;;D4A4|D4A3+D4A3/D4AA\D4B1;
                      BCC CODE_01D4A8                           ;;D4A6|D4A5+D4A5/D4AC\D4B3;
                      DEX                                       ;;D4A8|D4A7+D4A7/D4AE\D4B5;
CODE_01D4A8:          PHX                                       ;;D4A9|D4A8+D4A8/D4AF\D4B6;
                      PHX                                       ;;D4AA|D4A9+D4A9/D4B0\D4B7;
                      TXA                                       ;;D4AB|D4AA+D4AA/D4B1\D4B8;
                      CLC                                       ;;D4AC|D4AB+D4AB/D4B2\D4B9;
                      ADC.B !_2                                 ;;D4AD|D4AC+D4AC/D4B3\D4BA;
                      TAX                                       ;;D4AF|D4AE+D4AE/D4B5\D4BC;
                      LDA.B !_0                                 ;;D4B0|D4AF+D4AF/D4B6\D4BD;
                      CLC                                       ;;D4B2|D4B1+D4B1/D4B8\D4BF;
                      ADC.W DATA_01D442,X                       ;;D4B3|D4B2+D4B2/D4B9\D4C0;
                      STA.W !OAMTileXPos+$100,Y                 ;;D4B6|D4B5+D4B5/D4BC\D4C3;
                      LDA.B !EffFrame                           ;;D4B9|D4B8+D4B8/D4BF\D4C6;
                      LSR A                                     ;;D4BB|D4BA+D4BA/D4C1\D4C8;
                      LSR A                                     ;;D4BC|D4BB+D4BB/D4C2\D4C9;
                      ROR A                                     ;;D4BD|D4BC+D4BC/D4C3\D4CA;
                      AND.B #$80                                ;;D4BE|D4BD+D4BD/D4C4\D4CB;
                      ORA.W DATA_01D44A,X                       ;;D4C0|D4BF+D4BF/D4C6\D4CD;
                      STA.W !OAMTileAttr+$100,Y                 ;;D4C3|D4C2+D4C2/D4C9\D4D0;
                      LDA.B !_1                                 ;;D4C6|D4C5+D4C5/D4CC\D4D3;
                      INC A                                     ;;D4C8|D4C7+D4C7/D4CE\D4D5;
                      INC A                                     ;;D4C9|D4C8+D4C8/D4CF\D4D6;
                      STA.W !OAMTileYPos+$100,Y                 ;;D4CA|D4C9+D4C9/D4D0\D4D7;
                      PLA                                       ;;D4CD|D4CC+D4CC/D4D3\D4DA;
                      CLC                                       ;;D4CE|D4CD+D4CD/D4D4\D4DB;
                      ADC.B !_3                                 ;;D4CF|D4CE+D4CE/D4D5\D4DC;
                      TAX                                       ;;D4D1|D4D0+D4D0/D4D7\D4DE;
                      LDA.W LudwigFireTiles,X                   ;;D4D2|D4D1+D4D1/D4D8\D4DF;
                      STA.W !OAMTileNo+$100,Y                   ;;D4D5|D4D4+D4D4/D4DB\D4E2;
                      PLX                                       ;;D4D8|D4D7+D4D7/D4DE\D4E5;
                      INY                                       ;;D4D9|D4D8+D4D8/D4DF\D4E6;
                      INY                                       ;;D4DA|D4D9+D4D9/D4E0\D4E7;
                      INY                                       ;;D4DB|D4DA+D4DA/D4E1\D4E8;
                      INY                                       ;;D4DC|D4DB+D4DB/D4E2\D4E9;
                      DEX                                       ;;D4DD|D4DC+D4DC/D4E3\D4EA;
                      BPL CODE_01D4A8                           ;;D4DE|D4DD+D4DD/D4E4\D4EB;
                      PLX                                       ;;D4E0|D4DF+D4DF/D4E6\D4ED;
                      LDY.B #$02                                ;;D4E1|D4E0+D4E0/D4E7\D4EE;
                      LDA.B #$01                                ;;D4E3|D4E2+D4E2/D4E9\D4F0;
                      JMP FinishOAMWriteRt                      ;;D4E5|D4E4+D4E4/D4EB\D4F2;
                                                                ;;                        ;
                                                                ;;                        ;
DATA_01D4E7:          db $01,$FF                                ;;D4E8|D4E7+D4E7/D4EE\D4F5;
                                                                ;;                        ;
DATA_01D4E9:          db $0F,$00                                ;;D4EA|D4E9+D4E9/D4F0\D4F7;
                                                                ;;                        ;
DATA_01D4EB:          db $00,$02,$04,$06,$08,$0A,$0C,$0E        ;;D4EC|D4EB+D4EB/D4F2\D4F9;
                      db $0E,$0C,$0A,$08,$06,$04,$02,$00        ;;D4F4|D4F3+D4F3/D4FA\D501;
                                                                ;;                        ;
ParachuteSprites:     LDA.W !SpriteStatus,X                     ;;D4FC|D4FB+D4FB/D502\D509;
                      CMP.B #$08                                ;;D4FF|D4FE+D4FE/D505\D50C;
                      BEQ +                                     ;;D501|D500+D500/D507\D50E;
                      JMP CODE_01D671                           ;;D503|D502+D502/D509\D510;
                                                                ;;                        ;
                    + LDA.B !SpriteLock                         ;;D506|D505+D505/D50C\D513; \ Branch if sprites locked 
                      BNE CODE_01D558                           ;;D508|D507+D507/D50E\D515; / 
                      LDA.W !SpriteMisc1540,X                   ;;D50A|D509+D509/D510\D517;
                      BNE CODE_01D558                           ;;D50D|D50C+D50C/D513\D51A;
                      LDA.B !TrueFrame                          ;;D50F|D50E+D50E/D515\D51C;
                      LSR A                                     ;;D511|D510+D510/D517\D51E;
                      BCC +                                     ;;D512|D511+D511/D518\D51F;
                      INC.B !SpriteYPosLow,X                    ;;D514|D513+D513/D51A\D521;
                      BNE +                                     ;;D516|D515+D515/D51C\D523;
                      INC.W !SpriteXPosHigh,X                   ;;D518|D517+D517/D51E\D525;
                    + LDA.W !SpriteMisc151C,X                   ;;D51B|D51A+D51A/D521\D528;
                      BNE CODE_01D558                           ;;D51E|D51D+D51D/D524\D52B;
                      LDA.B !TrueFrame                          ;;D520|D51F+D51F/D526\D52D;
                      LSR A                                     ;;D522|D521+D521/D528\D52F;
                      BCC +                                     ;;D523|D522+D522/D529\D530;
                      LDA.B !SpriteTableC2,X                    ;;D525|D524+D524/D52B\D532;
                      AND.B #$01                                ;;D527|D526+D526/D52D\D534;
                      TAY                                       ;;D529|D528+D528/D52F\D536;
                      LDA.W !SpriteMisc1570,X                   ;;D52A|D529+D529/D530\D537;
                      CLC                                       ;;D52D|D52C+D52C/D533\D53A;
                      ADC.W DATA_01D4E7,Y                       ;;D52E|D52D+D52D/D534\D53B;
                      STA.W !SpriteMisc1570,X                   ;;D531|D530+D530/D537\D53E;
                      CMP.W DATA_01D4E9,Y                       ;;D534|D533+D533/D53A\D541;
                      BNE +                                     ;;D537|D536+D536/D53D\D544;
                      INC.B !SpriteTableC2,X                    ;;D539|D538+D538/D53F\D546;
                    + LDA.B !SpriteXSpeed,X                     ;;D53B|D53A+D53A/D541\D548;
                      PHA                                       ;;D53D|D53C+D53C/D543\D54A;
                      LDY.W !SpriteMisc1570,X                   ;;D53E|D53D+D53D/D544\D54B;
                      LDA.B !SpriteTableC2,X                    ;;D541|D540+D540/D547\D54E;
                      LSR A                                     ;;D543|D542+D542/D549\D550;
                      LDA.W DATA_01D4EB,Y                       ;;D544|D543+D543/D54A\D551;
                      BCC +                                     ;;D547|D546+D546/D54D\D554;
                      EOR.B #$FF                                ;;D549|D548+D548/D54F\D556;
                      INC A                                     ;;D54B|D54A+D54A/D551\D558;
                    + CLC                                       ;;D54C|D54B+D54B/D552\D559;
                      ADC.B !SpriteXSpeed,X                     ;;D54D|D54C+D54C/D553\D55A;
                      STA.B !SpriteXSpeed,X                     ;;D54F|D54E+D54E/D555\D55C;
                      JSR SubSprXPosNoGrvty                     ;;D551|D550+D550/D557\D55E;
                      PLA                                       ;;D554|D553+D553/D55A\D561;
                      STA.B !SpriteXSpeed,X                     ;;D555|D554+D554/D55B\D562;
                      BRA CODE_01D558                           ;;D557|D556+D556/D55D\D564;
                                                                ;;                        ;
CODE_01D558:          JSR SubOffscreen0Bnk1                     ;;D559|D558+D558/D55F\D566;
                      JMP CODE_01D5B3                           ;;D55C|D55B+D55B/D562\D569;
                                                                ;;                        ;
                                                                ;;                        ;
DATA_01D55E:          db $0D,$0D,$0D,$0D,$0C,$0C,$0C,$0C        ;;D55F|D55E+D55E/D565\D56C;
                      db $0C,$0C,$0C,$0C,$0D,$0D,$0D,$0D        ;;D567|D566+D566/D56D\D574;
DATA_01D56E:          db $00,$00,$00,$00,$00,$00,$00,$00        ;;D56F|D56E+D56E/D575\D57C;
                      db $01,$01,$01,$01,$01,$01,$01,$01        ;;D577|D576+D576/D57D\D584;
DATA_01D57E:          db $F8,$F8,$FA,$FA,$FC,$FC,$FE,$FE        ;;D57F|D57E+D57E/D585\D58C;
                      db $02,$02,$04,$04,$06,$06,$08,$08        ;;D587|D586+D586/D58D\D594;
DATA_01D58E:          db $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF        ;;D58F|D58E+D58E/D595\D59C;
                      db $00,$00,$00,$00,$00,$00,$00,$00        ;;D597|D596+D596/D59D\D5A4;
DATA_01D59E:          db $0E,$0E,$0F,$0F,$10,$10,$10,$10        ;;D59F|D59E+D59E/D5A5\D5AC;
                      db $10,$10,$10,$10,$0F,$0F,$0E,$0E        ;;D5A7|D5A6+D5A6/D5AD\D5B4;
DATA_01D5AE:          db $0F,$0D                                ;;D5AF|D5AE+D5AE/D5B5\D5BC;
                                                                ;;                        ;
DATA_01D5B0:          db $01,$05,$00                            ;;D5B1|D5B0+D5B0/D5B7\D5BE;
                                                                ;;                        ;
CODE_01D5B3:          STZ.W !TileGenerateTrackA                 ;;D5B4|D5B3+D5B3/D5BA\D5C1;
                      LDY.B #$F0                                ;;D5B7|D5B6+D5B6/D5BD\D5C4;
                      LDA.W !SpriteMisc1540,X                   ;;D5B9|D5B8+D5B8/D5BF\D5C6;
                      BEQ +                                     ;;D5BC|D5BB+D5BB/D5C2\D5C9;
                      LSR A                                     ;;D5BE|D5BD+D5BD/D5C4\D5CB;
                      EOR.B #$0F                                ;;D5BF|D5BE+D5BE/D5C5\D5CC;
                      STA.W !TileGenerateTrackA                 ;;D5C1|D5C0+D5C0/D5C7\D5CE;
                      CLC                                       ;;D5C4|D5C3+D5C3/D5CA\D5D1;
                      ADC.B #$F0                                ;;D5C5|D5C4+D5C4/D5CB\D5D2;
                      TAY                                       ;;D5C7|D5C6+D5C6/D5CD\D5D4;
                    + STY.B !_0                                 ;;D5C8|D5C7+D5C7/D5CE\D5D5;
                      LDA.B !SpriteYPosLow,X                    ;;D5CA|D5C9+D5C9/D5D0\D5D7;
                      PHA                                       ;;D5CC|D5CB+D5CB/D5D2\D5D9;
                      CLC                                       ;;D5CD|D5CC+D5CC/D5D3\D5DA;
                      ADC.B !_0                                 ;;D5CE|D5CD+D5CD/D5D4\D5DB;
                      STA.B !SpriteYPosLow,X                    ;;D5D0|D5CF+D5CF/D5D6\D5DD;
                      LDA.W !SpriteXPosHigh,X                   ;;D5D2|D5D1+D5D1/D5D8\D5DF;
                      PHA                                       ;;D5D5|D5D4+D5D4/D5DB\D5E2;
                      ADC.B #$FF                                ;;D5D6|D5D5+D5D5/D5DC\D5E3;
                      STA.W !SpriteXPosHigh,X                   ;;D5D8|D5D7+D5D7/D5DE\D5E5;
                      LDA.W !SpriteOBJAttribute,X               ;;D5DB|D5DA+D5DA/D5E1\D5E8;
                      PHA                                       ;;D5DE|D5DD+D5DD/D5E4\D5EB;
                      AND.B #$F1                                ;;D5DF|D5DE+D5DE/D5E5\D5EC;
                      ORA.B #$06                                ;;D5E1|D5E0+D5E0/D5E7\D5EE;
                      STA.W !SpriteOBJAttribute,X               ;;D5E3|D5E2+D5E2/D5E9\D5F0;
                      LDY.W !SpriteMisc1570,X                   ;;D5E6|D5E5+D5E5/D5EC\D5F3;
                      LDA.W DATA_01D55E,Y                       ;;D5E9|D5E8+D5E8/D5EF\D5F6;
                      STA.W !SpriteMisc1602,X                   ;;D5EC|D5EB+D5EB/D5F2\D5F9;
                      LDA.W DATA_01D56E,Y                       ;;D5EF|D5EE+D5EE/D5F5\D5FC;
                      STA.W !SpriteMisc157C,X                   ;;D5F2|D5F1+D5F1/D5F8\D5FF;
                      JSR SubSprGfx2Entry1                      ;;D5F5|D5F4+D5F4/D5FB\D602;
                      PLA                                       ;;D5F8|D5F7+D5F7/D5FE\D605;
                      STA.W !SpriteOBJAttribute,X               ;;D5F9|D5F8+D5F8/D5FF\D606;
                      LDA.W !SpriteOAMIndex,X                   ;;D5FC|D5FB+D5FB/D602\D609;
                      CLC                                       ;;D5FF|D5FE+D5FE/D605\D60C;
                      ADC.B #$04                                ;;D600|D5FF+D5FF/D606\D60D;
                      STA.W !SpriteOAMIndex,X                   ;;D602|D601+D601/D608\D60F;
                      LDY.W !SpriteMisc1570,X                   ;;D605|D604+D604/D60B\D612;
                      LDA.B !SpriteXPosLow,X                    ;;D608|D607+D607/D60E\D615;
                      PHA                                       ;;D60A|D609+D609/D610\D617;
                      CLC                                       ;;D60B|D60A+D60A/D611\D618;
                      ADC.W DATA_01D57E,Y                       ;;D60C|D60B+D60B/D612\D619;
                      STA.B !SpriteXPosLow,X                    ;;D60F|D60E+D60E/D615\D61C;
                      LDA.W !SpriteYPosHigh,X                   ;;D611|D610+D610/D617\D61E;
                      PHA                                       ;;D614|D613+D613/D61A\D621;
                      ADC.W DATA_01D58E,Y                       ;;D615|D614+D614/D61B\D622;
                      STA.W !SpriteYPosHigh,X                   ;;D618|D617+D617/D61E\D625;
                      STZ.B !_0                                 ;;D61B|D61A+D61A/D621\D628;
                      LDA.W DATA_01D59E,Y                       ;;D61D|D61C+D61C/D623\D62A;
                      SEC                                       ;;D620|D61F+D61F/D626\D62D;
                      SBC.W !TileGenerateTrackA                 ;;D621|D620+D620/D627\D62E;
                      BPL +                                     ;;D624|D623+D623/D62A\D631;
                      DEC.B !_0                                 ;;D626|D625+D625/D62C\D633;
                    + CLC                                       ;;D628|D627+D627/D62E\D635;
                      ADC.B !SpriteYPosLow,X                    ;;D629|D628+D628/D62F\D636;
                      STA.B !SpriteYPosLow,X                    ;;D62B|D62A+D62A/D631\D638;
                      LDA.W !SpriteXPosHigh,X                   ;;D62D|D62C+D62C/D633\D63A;
                      ADC.B !_0                                 ;;D630|D62F+D62F/D636\D63D;
                      STA.W !SpriteXPosHigh,X                   ;;D632|D631+D631/D638\D63F;
                      LDA.W !SpriteMisc1602,X                   ;;D635|D634+D634/D63B\D642;
                      SEC                                       ;;D638|D637+D637/D63E\D645;
                      SBC.B #$0C                                ;;D639|D638+D638/D63F\D646;
                      CMP.B #$01                                ;;D63B|D63A+D63A/D641\D648;
                      BNE +                                     ;;D63D|D63C+D63C/D643\D64A;
                      CLC                                       ;;D63F|D63E+D63E/D645\D64C;
                      ADC.W !SpriteMisc157C,X                   ;;D640|D63F+D63F/D646\D64D;
                    + STA.W !SpriteMisc1602,X                   ;;D643|D642+D642/D649\D650;
                      LDA.W !SpriteMisc1540,X                   ;;D646|D645+D645/D64C\D653;
                      BEQ +                                     ;;D649|D648+D648/D64F\D656;
                      STZ.W !SpriteMisc1602,X                   ;;D64B|D64A+D64A/D651\D658;
                    + LDY.W !SpriteMisc1602,X                   ;;D64E|D64D+D64D/D654\D65B;
                      LDA.W DATA_01D5B0,Y                       ;;D651|D650+D650/D657\D65E;
                      JSR SubSprGfx0Entry0                      ;;D654|D653+D653/D65A\D661;
                      JSR SubSprSpr_MarioSpr                    ;;D657|D656+D656/D65D\D664;
                      LDA.W !SpriteMisc1540,X                   ;;D65A|D659+D659/D660\D667;
                      BEQ CODE_01D693                           ;;D65D|D65C+D65C/D663\D66A;
                      DEC A                                     ;;D65F|D65E+D65E/D665\D66C;
                      BNE +                                     ;;D660|D65F+D65F/D666\D66D;
                      STZ.B !SpriteYSpeed,X                     ;;D662|D661+D661/D668\D66F; Sprite Y Speed = 0 
                      PLA                                       ;;D664|D663+D663/D66A\D671;
                      PLA                                       ;;D665|D664+D664/D66B\D672;
                      PLA                                       ;;D666|D665+D665/D66C\D673;
                      STA.W !SpriteXPosHigh,X                   ;;D667|D666+D666/D66D\D674;
                      PLA                                       ;;D66A|D669+D669/D670\D677;
                      STA.B !SpriteYPosLow,X                    ;;D66B|D66A+D66A/D671\D678;
                      LDA.B #$80                                ;;D66D|D66C+D66C/D673\D67A;
                      STA.W !SpriteMisc1540,X                   ;;D66F|D66E+D66E/D675\D67C;
CODE_01D671:          LDA.B !SpriteNumber,X                     ;;D672|D671+D671/D678\D67F;
                      SEC                                       ;;D674|D673+D673/D67A\D681;
                      SBC.B #$3F                                ;;D675|D674+D674/D67B\D682;
                      TAY                                       ;;D677|D676+D676/D67D\D684;
                      LDA.W DATA_01D5AE,Y                       ;;D678|D677+D677/D67E\D685;
                      STA.B !SpriteNumber,X                     ;;D67B|D67A+D67A/D681\D688;
                      JSL LoadSpriteTables                      ;;D67D|D67C+D67C/D683\D68A;
                      RTS                                       ;;D681|D680+D680/D687\D68E; Return 
                                                                ;;                        ;
                    + JSR CODE_019140                           ;;D682|D681+D681/D688\D68F;
                      JSR IsOnGround                            ;;D685|D684+D684/D68B\D692;
                      BEQ +                                     ;;D688|D687+D687/D68E\D695;
                      JSR SetSomeYSpeed__                       ;;D68A|D689+D689/D690\D697;
                    + JSR SubSprYPosNoGrvty                     ;;D68D|D68C+D68C/D693\D69A;
                      INC.B !SpriteYSpeed,X                     ;;D690|D68F+D68F/D696\D69D;
                      BRA CODE_01D6B5                           ;;D692|D691+D691/D698\D69F;
                                                                ;;                        ;
CODE_01D693:          TXA                                       ;;D694|D693+D693/D69A\D6A1;
                      EOR.B !TrueFrame                          ;;D695|D694+D694/D69B\D6A2;
                      LSR A                                     ;;D697|D696+D696/D69D\D6A4;
                      BCC CODE_01D6B5                           ;;D698|D697+D697/D69E\D6A5;
                      JSR CODE_019140                           ;;D69A|D699+D699/D6A0\D6A7;
                      JSR IsTouchingObjSide                     ;;D69D|D69C+D69C/D6A3\D6AA;
                      BEQ +                                     ;;D6A0|D69F+D69F/D6A6\D6AD;
                      LDA.B #$01                                ;;D6A2|D6A1+D6A1/D6A8\D6AF;
                      STA.W !SpriteMisc151C,X                   ;;D6A4|D6A3+D6A3/D6AA\D6B1;
                      LDA.B #$07                                ;;D6A7|D6A6+D6A6/D6AD\D6B4;
                      STA.W !SpriteMisc1570,X                   ;;D6A9|D6A8+D6A8/D6AF\D6B6;
                    + JSR IsOnGround                            ;;D6AC|D6AB+D6AB/D6B2\D6B9;
                      BEQ CODE_01D6B5                           ;;D6AF|D6AE+D6AE/D6B5\D6BC;
                      LDA.B #$20                                ;;D6B1|D6B0+D6B0/D6B7\D6BE;
                      STA.W !SpriteMisc1540,X                   ;;D6B3|D6B2+D6B2/D6B9\D6C0;
CODE_01D6B5:          PLA                                       ;;D6B6|D6B5+D6B5/D6BC\D6C3;
                      STA.W !SpriteYPosHigh,X                   ;;D6B7|D6B6+D6B6/D6BD\D6C4;
                      PLA                                       ;;D6BA|D6B9+D6B9/D6C0\D6C7;
                      STA.B !SpriteXPosLow,X                    ;;D6BB|D6BA+D6BA/D6C1\D6C8;
                      PLA                                       ;;D6BD|D6BC+D6BC/D6C3\D6CA;
                      STA.W !SpriteXPosHigh,X                   ;;D6BE|D6BD+D6BD/D6C4\D6CB;
                      PLA                                       ;;D6C1|D6C0+D6C0/D6C7\D6CE;
                      STA.B !SpriteYPosLow,X                    ;;D6C2|D6C1+D6C1/D6C8\D6CF;
Return01D6C3:         RTS                                       ;;D6C4|D6C3+D6C3/D6CA\D6D1;
                                                                ;;                        ;
InitLineRope:         CPX.B #$06                                ;;D6C5|D6C4+D6C4/D6CB\D6D2;
                      BCC +                                     ;;D6C7|D6C6+D6C6/D6CD\D6D4;
                      LDA.W !SpriteMemorySetting                ;;D6C9|D6C8+D6C8/D6CF\D6D6;
                      BEQ +                                     ;;D6CC|D6CB+D6CB/D6D2\D6D9;
                      INC.W !SpriteTweakerB,X                   ;;D6CE|D6CD+D6CD/D6D4\D6DB;
                      BRA +                                     ;;D6D1|D6D0+D6D0/D6D7\D6DE;
                                                                ;;                        ;
InitLinePlat:         LDA.B !SpriteXPosLow,X                    ;;D6D3|D6D2+D6D2/D6D9\D6E0;
                      AND.B #$10                                ;;D6D5|D6D4+D6D4/D6DB\D6E2;
                      EOR.B #$10                                ;;D6D7|D6D6+D6D6/D6DD\D6E4;
                      STA.W !SpriteMisc1602,X                   ;;D6D9|D6D8+D6D8/D6DF\D6E6;
                      BEQ +                                     ;;D6DC|D6DB+D6DB/D6E2\D6E9;
                      INC.W !SpriteTweakerB,X                   ;;D6DE|D6DD+D6DD/D6E4\D6EB;
                    + INC.W !SpriteMisc1540,X                   ;;D6E1|D6E0+D6E0/D6E7\D6EE;
                      JSR LineFuzzy_Plats                       ;;D6E4|D6E3+D6E3/D6EA\D6F1;
                      JSR LineFuzzy_Plats                       ;;D6E7|D6E6+D6E6/D6ED\D6F4;
                      INC.W !SpriteMisc1626,X                   ;;D6EA|D6E9+D6E9/D6F0\D6F7;
Return01D6EC:         RTS                                       ;;D6ED|D6EC+D6EC/D6F3\D6FA; Return 
                                                                ;;                        ;
InitLineGuidedSpr:    INC.W !SpriteMisc187B,X                   ;;D6EE|D6ED+D6ED/D6F4\D6FB;
                      LDA.B !SpriteXPosLow,X                    ;;D6F1|D6F0+D6F0/D6F7\D6FE;
                      AND.B #$10                                ;;D6F3|D6F2+D6F2/D6F9\D700;
                      BNE CODE_01D707                           ;;D6F5|D6F4+D6F4/D6FB\D702;
                      LDA.B !SpriteXPosLow,X                    ;;D6F7|D6F6+D6F6/D6FD\D704;
                      SEC                                       ;;D6F9|D6F8+D6F8/D6FF\D706;
                      SBC.B #$40                                ;;D6FA|D6F9+D6F9/D700\D707;
                      STA.B !SpriteXPosLow,X                    ;;D6FC|D6FB+D6FB/D702\D709;
                      LDA.W !SpriteYPosHigh,X                   ;;D6FE|D6FD+D6FD/D704\D70B;
                      SBC.B #$01                                ;;D701|D700+D700/D707\D70E;
                      STA.W !SpriteYPosHigh,X                   ;;D703|D702+D702/D709\D710;
                      BRA InitLineBrwnPlat                      ;;D706|D705+D705/D70C\D713;
                                                                ;;                        ;
CODE_01D707:          INC.W !SpriteMisc157C,X                   ;;D708|D707+D707/D70E\D715;
                      LDA.B !SpriteXPosLow,X                    ;;D70B|D70A+D70A/D711\D718;
                      CLC                                       ;;D70D|D70C+D70C/D713\D71A;
                      ADC.B #$0F                                ;;D70E|D70D+D70D/D714\D71B;
                      STA.B !SpriteXPosLow,X                    ;;D710|D70F+D70F/D716\D71D;
InitLineBrwnPlat:     LDA.B #$02                                ;;D712|D711+D711/D718\D71F;
                      STA.W !SpriteMisc1540,X                   ;;D714|D713+D713/D71A\D721;
                      RTS                                       ;;D717|D716+D716/D71D\D724; Return 
                                                                ;;                        ;
                                                                ;;                        ;
DATA_01D717:          db $F8,$00                                ;;D718|D717+D717/D71E\D725;
                                                                ;;                        ;
LineRope_Chainsaw:    TXA                                       ;;D71A|D719+D719/D720\D727;
                      ASL A                                     ;;D71B|D71A+D71A/D721\D728;
                      ASL A                                     ;;D71C|D71B+D71B/D722\D729;
                      EOR.B !EffFrame                           ;;D71D|D71C+D71C/D723\D72A;
                      STA.B !_2                                 ;;D71F|D71E+D71E/D725\D72C;
                      AND.B #$07                                ;;D721|D720+D720/D727\D72E;
                      ORA.B !SpriteLock                         ;;D723|D722+D722/D729\D730;
                      BNE LineGrinder                           ;;D725|D724+D724/D72B\D732;
                      LDA.B !_2                                 ;;D727|D726+D726/D72D\D734;
                      LSR A                                     ;;D729|D728+D728/D72F\D736;
                      LSR A                                     ;;D72A|D729+D729/D730\D737;
                      LSR A                                     ;;D72B|D72A+D72A/D731\D738;
                      AND.B #$01                                ;;D72C|D72B+D72B/D732\D739;
                      TAY                                       ;;D72E|D72D+D72D/D734\D73B;
                      LDA.W DATA_01D717,Y                       ;;D72F|D72E+D72E/D735\D73C;
                      STA.B !_0                                 ;;D732|D731+D731/D738\D73F;
                      LDA.B #$F2                                ;;D734|D733+D733/D73A\D741;
                      STA.B !_1                                 ;;D736|D735+D735/D73C\D743;
                      JSR CODE_018063                           ;;D738|D737+D737/D73E\D745;
LineGrinder:          LDA.B !TrueFrame                          ;;D73B|D73A+D73A/D741\D748;
                      AND.B #$07                                ;;D73D|D73C+D73C/D743\D74A;
                      ORA.W !SpriteMisc1626,X                   ;;D73F|D73E+D73E/D745\D74C;
                      ORA.B !SpriteLock                         ;;D742|D741+D741/D748\D74F;
                      BNE LineFuzzy_Plats                       ;;D744|D743+D743/D74A\D751;
                      LDA.B #!SFX_BLOCKSNAKE                    ;;D746|D745+D745/D74C\D753; \ Play sound effect 
                      STA.W !SPCIO1                             ;;D748|D747+D747/D74E\D755; / 
LineFuzzy_Plats:      JMP CODE_01D9A7                           ;;D74B|D74A+D74A/D751\D758;
                                                                ;;                        ;
CODE_01D74D:          JSR SubOffscreen1Bnk1                     ;;D74E|D74D+D74D/D754\D75B;
                      LDA.W !SpriteMisc1540,X                   ;;D751|D750+D750/D757\D75E;
                      BNE CODE_01D75C                           ;;D754|D753+D753/D75A\D761;
                      LDA.B !SpriteLock                         ;;D756|D755+D755/D75C\D763;
                      ORA.W !SpriteMisc1626,X                   ;;D758|D757+D757/D75E\D765;
                      BNE Return01D6EC                          ;;D75B|D75A+D75A/D761\D768;
CODE_01D75C:          LDA.B !SpriteTableC2,X                    ;;D75D|D75C+D75C/D763\D76A;
                      JSL ExecutePtr                            ;;D75F|D75E+D75E/D765\D76C;
                                                                ;;                        ;
                      dw CODE_01D7F4                            ;;D763|D762+D762/D769\D770;
                      dw CODE_01D768                            ;;D765|D764+D764/D76B\D772;
                      dw CODE_01DB44                            ;;D767|D766+D766/D76D\D774;
                                                                ;;                        ;
CODE_01D768:          LDA.B !SpriteLock                         ;;D769|D768+D768/D76F\D776; \ Branch if sprites locked 
                      BNE Return01D791                          ;;D76B|D76A+D76A/D771\D778; / 
                      LDA.W !SpriteMisc157C,X                   ;;D76D|D76C+D76C/D773\D77A;
                      BNE CODE_01D792                           ;;D770|D76F+D76F/D776\D77D;
                      LDY.W !SpriteMisc1534,X                   ;;D772|D771+D771/D778\D77F;
                      JSR CODE_01D7B0                           ;;D775|D774+D774/D77B\D782;
                      INC.W !SpriteMisc1534,X                   ;;D778|D777+D777/D77E\D785;
                      LDA.W !SpriteMisc187B,X                   ;;D77B|D77A+D77A/D781\D788;
                      BEQ +                                     ;;D77E|D77D+D77D/D784\D78B;
                      LDA.B !TrueFrame                          ;;D780|D77F+D77F/D786\D78D;
                      LSR A                                     ;;D782|D781+D781/D788\D78F;
                      BCC +                                     ;;D783|D782+D782/D789\D790;
                      INC.W !SpriteMisc1534,X                   ;;D785|D784+D784/D78B\D792;
                    + LDA.W !SpriteMisc1534,X                   ;;D788|D787+D787/D78E\D795;
                      CMP.W !SpriteMisc1570,X                   ;;D78B|D78A+D78A/D791\D798;
                      BCC Return01D791                          ;;D78E|D78D+D78D/D794\D79B;
                      STZ.B !SpriteTableC2,X                    ;;D790|D78F+D78F/D796\D79D;
Return01D791:         RTS                                       ;;D792|D791+D791/D798\D79F; Return 
                                                                ;;                        ;
CODE_01D792:          LDY.W !SpriteMisc1570,X                   ;;D793|D792+D792/D799\D7A0;
                      DEY                                       ;;D796|D795+D795/D79C\D7A3;
                      JSR CODE_01D7B0                           ;;D797|D796+D796/D79D\D7A4;
                      DEC.W !SpriteMisc1570,X                   ;;D79A|D799+D799/D7A0\D7A7;
                      BEQ CODE_01D7AD                           ;;D79D|D79C+D79C/D7A3\D7AA;
                      LDA.W !SpriteMisc187B,X                   ;;D79F|D79E+D79E/D7A5\D7AC;
                      BEQ +                                     ;;D7A2|D7A1+D7A1/D7A8\D7AF;
                      LDA.B !TrueFrame                          ;;D7A4|D7A3+D7A3/D7AA\D7B1;
                      LSR A                                     ;;D7A6|D7A5+D7A5/D7AC\D7B3;
                      BCC +                                     ;;D7A7|D7A6+D7A6/D7AD\D7B4;
                      DEC.W !SpriteMisc1570,X                   ;;D7A9|D7A8+D7A8/D7AF\D7B6;
                      BNE +                                     ;;D7AC|D7AB+D7AB/D7B2\D7B9;
CODE_01D7AD:          STZ.B !SpriteTableC2,X                    ;;D7AE|D7AD+D7AD/D7B4\D7BB;
                    + RTS                                       ;;D7B0|D7AF+D7AF/D7B6\D7BD; Return 
                                                                ;;                        ;
CODE_01D7B0:          PHB                                       ;;D7B1|D7B0+D7B0/D7B7\D7BE; Sprites calling this routine must be modified 
                      LDA.B #$07                                ;;D7B2|D7B1+D7B1/D7B8\D7BF; to set $151C,x and $1528,x to a location in 
                      PHA                                       ;;D7B4|D7B3+D7B3/D7BA\D7C1; LineTable instead of $07/F9DB+something 
                      PLB                                       ;;D7B5|D7B4+D7B4/D7BB\D7C2;
                      LDA.W !SpriteMisc151C,X                   ;;D7B6|D7B5+D7B5/D7BC\D7C3;
                      STA.B !_4                                 ;;D7B9|D7B8+D7B8/D7BF\D7C6;
                      LDA.W !SpriteMisc1528,X                   ;;D7BB|D7BA+D7BA/D7C1\D7C8;
                      STA.B !_5                                 ;;D7BE|D7BD+D7BD/D7C4\D7CB;
                      LDA.B (!_4),Y                             ;;D7C0|D7BF+D7BF/D7C6\D7CD;
                      AND.B #$0F                                ;;D7C2|D7C1+D7C1/D7C8\D7CF;
                      STA.B !_6                                 ;;D7C4|D7C3+D7C3/D7CA\D7D1;
                      LDA.B (!_4),Y                             ;;D7C6|D7C5+D7C5/D7CC\D7D3;
                      PLB                                       ;;D7C8|D7C7+D7C7/D7CE\D7D5;
                      LSR A                                     ;;D7C9|D7C8+D7C8/D7CF\D7D6;
                      LSR A                                     ;;D7CA|D7C9+D7C9/D7D0\D7D7;
                      LSR A                                     ;;D7CB|D7CA+D7CA/D7D1\D7D8;
                      LSR A                                     ;;D7CC|D7CB+D7CB/D7D2\D7D9;
                      STA.B !_7                                 ;;D7CD|D7CC+D7CC/D7D3\D7DA;
                      LDA.B !SpriteYPosLow,X                    ;;D7CF|D7CE+D7CE/D7D5\D7DC;
                      AND.B #$F0                                ;;D7D1|D7D0+D7D0/D7D7\D7DE;
                      CLC                                       ;;D7D3|D7D2+D7D2/D7D9\D7E0;
                      ADC.B !_7                                 ;;D7D4|D7D3+D7D3/D7DA\D7E1;
                      STA.B !SpriteYPosLow,X                    ;;D7D6|D7D5+D7D5/D7DC\D7E3;
                      LDA.B !SpriteXPosLow,X                    ;;D7D8|D7D7+D7D7/D7DE\D7E5;
                      AND.B #$F0                                ;;D7DA|D7D9+D7D9/D7E0\D7E7;
                      CLC                                       ;;D7DC|D7DB+D7DB/D7E2\D7E9;
                      ADC.B !_6                                 ;;D7DD|D7DC+D7DC/D7E3\D7EA;
                      STA.B !SpriteXPosLow,X                    ;;D7DF|D7DE+D7DE/D7E5\D7EC;
                      RTS                                       ;;D7E1|D7E0+D7E0/D7E7\D7EE; Return 
                                                                ;;                        ;
                                                                ;;                        ;
DATA_01D7E1:          db $FC,$04,$FC,$04                        ;;D7E2|D7E1+D7E1/D7E8\D7EF;
                                                                ;;                        ;
DATA_01D7E5:          db $FF,$00,$FF,$00                        ;;D7E6|D7E5+D7E5/D7EC\D7F3;
                                                                ;;                        ;
DATA_01D7E9:          db $FC,$FC,$04,$04                        ;;D7EA|D7E9+D7E9/D7F0\D7F7;
                                                                ;;                        ;
DATA_01D7ED:          db $FF,$FF,$00,$00                        ;;D7EE|D7ED+D7ED/D7F4\D7FB;
                                                                ;;                        ;
CODE_01D7F1:          JMP CODE_01D89F                           ;;D7F2|D7F1+D7F1/D7F8\D7FF;
                                                                ;;                        ;
CODE_01D7F4:          LDY.B #$03                                ;;D7F5|D7F4+D7F4/D7FB\D802;
CODE_01D7F6:          STY.W !SpriteInterIndex                   ;;D7F7|D7F6+D7F6/D7FD\D804;
                      LDA.B !SpriteXPosLow,X                    ;;D7FA|D7F9+D7F9/D800\D807;
                      CLC                                       ;;D7FC|D7FB+D7FB/D802\D809;
                      ADC.W DATA_01D7E1,Y                       ;;D7FD|D7FC+D7FC/D803\D80A;
                      STA.B !_2                                 ;;D800|D7FF+D7FF/D806\D80D;
                      LDA.W !SpriteYPosHigh,X                   ;;D802|D801+D801/D808\D80F;
                      ADC.W DATA_01D7E5,Y                       ;;D805|D804+D804/D80B\D812;
                      STA.B !_3                                 ;;D808|D807+D807/D80E\D815;
                      LDA.B !SpriteYPosLow,X                    ;;D80A|D809+D809/D810\D817;
                      CLC                                       ;;D80C|D80B+D80B/D812\D819;
                      ADC.W DATA_01D7E9,Y                       ;;D80D|D80C+D80C/D813\D81A;
                      STA.B !_0                                 ;;D810|D80F+D80F/D816\D81D;
                      LDA.W !SpriteXPosHigh,X                   ;;D812|D811+D811/D818\D81F;
                      ADC.W DATA_01D7ED,Y                       ;;D815|D814+D814/D81B\D822;
                      STA.B !_1                                 ;;D818|D817+D817/D81E\D825;
                      LDA.W !SpriteMisc1540,X                   ;;D81A|D819+D819/D820\D827;
                      BNE CODE_01D83A                           ;;D81D|D81C+D81C/D823\D82A;
                      LDA.B !_0                                 ;;D81F|D81E+D81E/D825\D82C;
                      AND.B #$F0                                ;;D821|D820+D820/D827\D82E;
                      STA.B !_4                                 ;;D823|D822+D822/D829\D830;
                      LDA.B !SpriteYPosLow,X                    ;;D825|D824+D824/D82B\D832;
                      AND.B #$F0                                ;;D827|D826+D826/D82D\D834;
                      CMP.B !_4                                 ;;D829|D828+D828/D82F\D836;
                      BNE CODE_01D83A                           ;;D82B|D82A+D82A/D831\D838;
                      LDA.B !_2                                 ;;D82D|D82C+D82C/D833\D83A;
                      AND.B #$F0                                ;;D82F|D82E+D82E/D835\D83C;
                      STA.B !_5                                 ;;D831|D830+D830/D837\D83E;
                      LDA.B !SpriteXPosLow,X                    ;;D833|D832+D832/D839\D840;
                      AND.B #$F0                                ;;D835|D834+D834/D83B\D842;
                      CMP.B !_5                                 ;;D837|D836+D836/D83D\D844;
                      BEQ CODE_01D861                           ;;D839|D838+D838/D83F\D846;
CODE_01D83A:          JSR CODE_01D94D                           ;;D83B|D83A+D83A/D841\D848;WIERD ROUTINE INVOLVING POSITIONS.  ALL VARIABLES SET ABOVE...         
                      BNE CODE_01D7F1                           ;;D83E|D83D+D83D/D844\D84B;
                      LDA.W !Map16TileNumber                    ;;D840|D83F+D83F/D846\D84D;"# OF CUSTOM BLOCK???"               
                      CMP.B #$94                                ;;D843|D842+D842/D849\D850;
                      BEQ CODE_01D851                           ;;D845|D844+D844/D84B\D852;
                      CMP.B #$95                                ;;D847|D846+D846/D84D\D854;
                      BNE CODE_01D856                           ;;D849|D848+D848/D84F\D856;
                      LDA.W !OnOffSwitch                        ;;D84B|D84A+D84A/D851\D858;
                      BEQ CODE_01D861                           ;;D84E|D84D+D84D/D854\D85B;
                      BNE CODE_01D856                           ;;D850|D84F+D84F/D856\D85D;
CODE_01D851:          LDA.W !OnOffSwitch                        ;;D852|D851+D851/D858\D85F;
                      BNE CODE_01D861                           ;;D855|D854+D854/D85B\D862;
CODE_01D856:          LDA.W !Map16TileNumber                    ;;D857|D856+D856/D85D\D864;
                      CMP.B #$76                                ;;D85A|D859+D859/D860\D867;
                      BCC CODE_01D861                           ;;D85C|D85B+D85B/D862\D869;
                      CMP.B #$9A                                ;;D85E|D85D+D85D/D864\D86B;
                      BCC CODE_01D895                           ;;D860|D85F+D85F/D866\D86D;
CODE_01D861:          LDY.W !SpriteInterIndex                   ;;D862|D861+D861/D868\D86F;
                      DEY                                       ;;D865|D864+D864/D86B\D872;
                      BPL CODE_01D7F6                           ;;D866|D865+D865/D86C\D873;
                      LDA.B !SpriteTableC2,X                    ;;D868|D867+D867/D86E\D875;
                      CMP.B #$02                                ;;D86A|D869+D869/D870\D877; ?? #00 - platforms stop at end rather than fall off 
                      BEQ Return01D894                          ;;D86C|D86B+D86B/D872\D879;
                      LDA.B #$02                                ;;D86E|D86D+D86D/D874\D87B;
                      STA.B !SpriteTableC2,X                    ;;D870|D86F+D86F/D876\D87D;
                      LDY.W !SpriteMisc160E,X                   ;;D872|D871+D871/D878\D87F;
                      LDA.W !SpriteMisc157C,X                   ;;D875|D874+D874/D87B\D882;
                      BEQ +                                     ;;D878|D877+D877/D87E\D885;
                      TYA                                       ;;D87A|D879+D879/D880\D887;
                      CLC                                       ;;D87B|D87A+D87A/D881\D888;
                      ADC.B #$20                                ;;D87C|D87B+D87B/D882\D889;
                      TAY                                       ;;D87E|D87D+D87D/D884\D88B;
                    + LDA.W DATA_01DD11,Y                       ;;D87F|D87E+D87E/D885\D88C;
                      BPL +                                     ;;D882|D881+D881/D888\D88F;
                      ASL A                                     ;;D884|D883+D883/D88A\D891;
                    + PHY                                       ;;D885|D884+D884/D88B\D892;
                      ASL A                                     ;;D886|D885+D885/D88C\D893;
                      STA.B !SpriteYSpeed,X                     ;;D887|D886+D886/D88D\D894;SPEED SETTINGS!   
                      PLY                                       ;;D889|D888+D888/D88F\D896;
                      LDA.W DATA_01DD51,Y                       ;;D88A|D889+D889/D890\D897;
                      ASL A                                     ;;D88D|D88C+D88C/D893\D89A;
                      STA.B !SpriteXSpeed,X                     ;;D88E|D88D+D88D/D894\D89B;
                      LDA.B #$10                                ;;D890|D88F+D88F/D896\D89D;
                      STA.W !SpriteMisc1540,X                   ;;D892|D891+D891/D898\D89F;
Return01D894:         RTS                                       ;;D895|D894+D894/D89B\D8A2; Return 
                                                                ;;                        ;
CODE_01D895:          PHA                                       ;;D896|D895+D895/D89C\D8A3;
                      SEC                                       ;;D897|D896+D896/D89D\D8A4;
                      SBC.B #$76                                ;;D898|D897+D897/D89E\D8A5;
                      TAY                                       ;;D89A|D899+D899/D8A0\D8A7;
                      PLA                                       ;;D89B|D89A+D89A/D8A1\D8A8;
                      CMP.B #$96                                ;;D89C|D89B+D89B/D8A2\D8A9;
                      BCC CODE_01D8A4                           ;;D89E|D89D+D89D/D8A4\D8AB;
CODE_01D89F:          LDY.W !SpriteMisc160E,X                   ;;D8A0|D89F+D89F/D8A6\D8AD;
                      BRA +                                     ;;D8A3|D8A2+D8A2/D8A9\D8B0;
                                                                ;;                        ;
CODE_01D8A4:          LDA.B !SpriteYPosLow,X                    ;;D8A5|D8A4+D8A4/D8AB\D8B2;
                      STA.B !_8                                 ;;D8A7|D8A6+D8A6/D8AD\D8B4;
                      LDA.W !SpriteXPosHigh,X                   ;;D8A9|D8A8+D8A8/D8AF\D8B6;
                      STA.B !_9                                 ;;D8AC|D8AB+D8AB/D8B2\D8B9;
                      LDA.B !SpriteXPosLow,X                    ;;D8AE|D8AD+D8AD/D8B4\D8BB;
                      STA.B !_A                                 ;;D8B0|D8AF+D8AF/D8B6\D8BD;
                      LDA.W !SpriteYPosHigh,X                   ;;D8B2|D8B1+D8B1/D8B8\D8BF;
                      STA.B !_B                                 ;;D8B5|D8B4+D8B4/D8BB\D8C2;
                      LDA.B !_0                                 ;;D8B7|D8B6+D8B6/D8BD\D8C4;
                      STA.B !SpriteYPosLow,X                    ;;D8B9|D8B8+D8B8/D8BF\D8C6;
                      LDA.B !_1                                 ;;D8BB|D8BA+D8BA/D8C1\D8C8;
                      STA.W !SpriteXPosHigh,X                   ;;D8BD|D8BC+D8BC/D8C3\D8CA;
                      LDA.B !_2                                 ;;D8C0|D8BF+D8BF/D8C6\D8CD;
                      STA.B !SpriteXPosLow,X                    ;;D8C2|D8C1+D8C1/D8C8\D8CF;
                      LDA.B !_3                                 ;;D8C4|D8C3+D8C3/D8CA\D8D1;
                      STA.W !SpriteYPosHigh,X                   ;;D8C6|D8C5+D8C5/D8CC\D8D3;
                    + PHB                                       ;;D8C9|D8C8+D8C8/D8CF\D8D6;
                      LDA.B #$07                                ;;D8CA|D8C9+D8C9/D8D0\D8D7;
                      PHA                                       ;;D8CC|D8CB+D8CB/D8D2\D8D9;
                      PLB                                       ;;D8CD|D8CC+D8CC/D8D3\D8DA;
                      LDA.W DATA_07FBF3,Y                       ;;D8CE|D8CD+D8CD/D8D4\D8DB;
                      STA.W !SpriteMisc151C,X                   ;;D8D1|D8D0+D8D0/D8D7\D8DE;
                      LDA.W DATA_07FC13,Y                       ;;D8D4|D8D3+D8D3/D8DA\D8E1;
                      STA.W !SpriteMisc1528,X                   ;;D8D7|D8D6+D8D6/D8DD\D8E4;
                      PLB                                       ;;D8DA|D8D9+D8D9/D8E0\D8E7;
                      LDA.W DATA_01DCD1,Y                       ;;D8DB|D8DA+D8DA/D8E1\D8E8;
                      STA.W !SpriteMisc1570,X                   ;;D8DE|D8DD+D8DD/D8E4\D8EB;
                      STZ.W !SpriteMisc1534,X                   ;;D8E1|D8E0+D8E0/D8E7\D8EE;
                      TYA                                       ;;D8E4|D8E3+D8E3/D8EA\D8F1;
                      STA.W !SpriteMisc160E,X                   ;;D8E5|D8E4+D8E4/D8EB\D8F2;
                      LDA.W !SpriteMisc1540,X                   ;;D8E8|D8E7+D8E7/D8EE\D8F5;
                      BNE CODE_01D933                           ;;D8EB|D8EA+D8EA/D8F1\D8F8;
                      STZ.W !SpriteMisc157C,X                   ;;D8ED|D8EC+D8EC/D8F3\D8FA;
                      LDA.W DATA_01DCF1,Y                       ;;D8F0|D8EF+D8EF/D8F6\D8FD;
                      BEQ CODE_01D8FF                           ;;D8F3|D8F2+D8F2/D8F9\D900;
                      TAY                                       ;;D8F5|D8F4+D8F4/D8FB\D902;
                      LDA.B !SpriteYPosLow,X                    ;;D8F6|D8F5+D8F5/D8FC\D903;
                      CPY.B #$01                                ;;D8F8|D8F7+D8F7/D8FE\D905;
                      BNE +                                     ;;D8FA|D8F9+D8F9/D900\D907;
                      EOR.B #$0F                                ;;D8FC|D8FB+D8FB/D902\D909;
                    + BRA +                                     ;;D8FE|D8FD+D8FD/D904\D90B;
                                                                ;;                        ;
CODE_01D8FF:          LDA.B !SpriteXPosLow,X                    ;;D900|D8FF+D8FF/D906\D90D;
                    + AND.B #$0F                                ;;D902|D901+D901/D908\D90F;
                      CMP.B #$0A                                ;;D904|D903+D903/D90A\D911;
                      BCC +                                     ;;D906|D905+D905/D90C\D913;
                      LDA.B !SpriteTableC2,X                    ;;D908|D907+D907/D90E\D915;
                      CMP.B #$02                                ;;D90A|D909+D909/D910\D917;
                      BEQ +                                     ;;D90C|D90B+D90B/D912\D919;
                      INC.W !SpriteMisc157C,X                   ;;D90E|D90D+D90D/D914\D91B;
                    + LDA.B !SpriteYPosLow,X                    ;;D911|D910+D910/D917\D91E;
                      STA.B !_C                                 ;;D913|D912+D912/D919\D920;
                      LDA.B !SpriteXPosLow,X                    ;;D915|D914+D914/D91B\D922;
                      STA.B !_D                                 ;;D917|D916+D916/D91D\D924;
                      JSR CODE_01D768                           ;;D919|D918+D918/D91F\D926;
                      LDA.B !_C                                 ;;D91C|D91B+D91B/D922\D929;
                      SEC                                       ;;D91E|D91D+D91D/D924\D92B;
                      SBC.B !SpriteYPosLow,X                    ;;D91F|D91E+D91E/D925\D92C;
                      CLC                                       ;;D921|D920+D920/D927\D92E;
                      ADC.B #$08                                ;;D922|D921+D921/D928\D92F;
                      CMP.B #$10                                ;;D924|D923+D923/D92A\D931;
                      BCS +                                     ;;D926|D925+D925/D92C\D933;
                      LDA.B !_D                                 ;;D928|D927+D927/D92E\D935;
                      SEC                                       ;;D92A|D929+D929/D930\D937;
                      SBC.B !SpriteXPosLow,X                    ;;D92B|D92A+D92A/D931\D938;
                      CLC                                       ;;D92D|D92C+D92C/D933\D93A;
                      ADC.B #$08                                ;;D92E|D92D+D92D/D934\D93B;
                      CMP.B #$10                                ;;D930|D92F+D92F/D936\D93D;
                      BCS +                                     ;;D932|D931+D931/D938\D93F;
CODE_01D933:          LDA.B #$01                                ;;D934|D933+D933/D93A\D941;
                      STA.B !SpriteTableC2,X                    ;;D936|D935+D935/D93C\D943;
                      RTS                                       ;;D938|D937+D937/D93E\D945; Return 
                                                                ;;                        ;
                    + LDA.B !_8                                 ;;D939|D938+D938/D93F\D946;
                      STA.B !SpriteYPosLow,X                    ;;D93B|D93A+D93A/D941\D948;
                      LDA.B !_9                                 ;;D93D|D93C+D93C/D943\D94A;
                      STA.W !SpriteXPosHigh,X                   ;;D93F|D93E+D93E/D945\D94C;
                      LDA.B !_A                                 ;;D942|D941+D941/D948\D94F;
                      STA.B !SpriteXPosLow,X                    ;;D944|D943+D943/D94A\D951;
                      LDA.B !_B                                 ;;D946|D945+D945/D94C\D953;
                      STA.W !SpriteYPosHigh,X                   ;;D948|D947+D947/D94E\D955;
                      JMP CODE_01D861                           ;;D94B|D94A+D94A/D951\D958;
                                                                ;;                        ;
CODE_01D94D:          LDA.B !_0                                 ;;D94E|D94D+D94D/D954\D95B;
                      AND.B #$F0                                ;;D950|D94F+D94F/D956\D95D;
                      STA.B !_6                                 ;;D952|D951+D951/D958\D95F;
                      LDA.B !_2                                 ;;D954|D953+D953/D95A\D961;
                      LSR A                                     ;;D956|D955+D955/D95C\D963;
                      LSR A                                     ;;D957|D956+D956/D95D\D964;
                      LSR A                                     ;;D958|D957+D957/D95E\D965;
                      LSR A                                     ;;D959|D958+D958/D95F\D966;
                      PHA                                       ;;D95A|D959+D959/D960\D967;
                      ORA.B !_6                                 ;;D95B|D95A+D95A/D961\D968;
                      PHA                                       ;;D95D|D95C+D95C/D963\D96A;
                      LDA.B !ScreenMode                         ;;D95E|D95D+D95D/D964\D96B;
                      AND.B #$01                                ;;D960|D95F+D95F/D966\D96D;
                      BEQ CODE_01D977                           ;;D962|D961+D961/D968\D96F;
                      PLA                                       ;;D964|D963+D963/D96A\D971;
                      LDX.B !_1                                 ;;D965|D964+D964/D96B\D972;
                      CLC                                       ;;D967|D966+D966/D96D\D974;
                      ADC.L DATA_00BA80,X                       ;;D968|D967+D967/D96E\D975;
                      STA.B !_5                                 ;;D96C|D96B+D96B/D972\D979;
                      LDA.L DATA_00BABC,X                       ;;D96E|D96D+D96D/D974\D97B;
                      ADC.B !_3                                 ;;D972|D971+D971/D978\D97F;
                      STA.B !_6                                 ;;D974|D973+D973/D97A\D981;
                      BRA +                                     ;;D976|D975+D975/D97C\D983;
                                                                ;;                        ;
CODE_01D977:          PLA                                       ;;D978|D977+D977/D97E\D985;
                      LDX.B !_3                                 ;;D979|D978+D978/D97F\D986;
                      CLC                                       ;;D97B|D97A+D97A/D981\D988;
                      ADC.L DATA_00BA60,X                       ;;D97C|D97B+D97B/D982\D989;
                      STA.B !_5                                 ;;D980|D97F+D97F/D986\D98D;
                      LDA.L DATA_00BA9C,X                       ;;D982|D981+D981/D988\D98F;
                      ADC.B !_1                                 ;;D986|D985+D985/D98C\D993;
                      STA.B !_6                                 ;;D988|D987+D987/D98E\D995;
                    + LDA.B #$7E                                ;;D98A|D989+D989/D990\D997;
                      STA.B !_7                                 ;;D98C|D98B+D98B/D992\D999;
                      LDX.W !CurSpriteProcess                   ;;D98E|D98D+D98D/D994\D99B; X = Sprite index 
                      LDA.B [!_5]                               ;;D991|D990+D990/D997\D99E;
                      STA.W !Map16TileNumber                    ;;D993|D992+D992/D999\D9A0;
                      INC.B !_7                                 ;;D996|D995+D995/D99C\D9A3;
                      LDA.B [!_5]                               ;;D998|D997+D997/D99E\D9A5;
                      PLY                                       ;;D99A|D999+D999/D9A0\D9A7;
                      STY.B !_5                                 ;;D99B|D99A+D99A/D9A1\D9A8;
                      PHA                                       ;;D99D|D99C+D99C/D9A3\D9AA;
                      LDA.B !_5                                 ;;D99E|D99D+D99D/D9A4\D9AB;
                      AND.B #$07                                ;;D9A0|D99F+D99F/D9A6\D9AD;
                      TAY                                       ;;D9A2|D9A1+D9A1/D9A8\D9AF;
                      PLA                                       ;;D9A3|D9A2+D9A2/D9A9\D9B0;
                      AND.W DATA_018000,Y                       ;;D9A4|D9A3+D9A3/D9AA\D9B1;
                      RTS                                       ;;D9A7|D9A6+D9A6/D9AD\D9B4; Return 
                                                                ;;                        ;
CODE_01D9A7:          LDA.B !SpriteNumber,X                     ;;D9A8|D9A7+D9A7/D9AE\D9B5;LINE GUIDE PLATFORM FUZZY       
                      CMP.B #$64                                ;;D9AA|D9A9+D9A9/D9B0\D9B7;DETERMINE SPRITE ITS DEALING WITH                
                      BEQ CODE_01D9D3                           ;;D9AC|D9AB+D9AB/D9B2\D9B9;
                      CMP.B #$65                                ;;D9AE|D9AD+D9AD/D9B4\D9BB;
                      BCC CODE_01D9D0                           ;;D9B0|D9AF+D9AF/D9B6\D9BD;PLATFORM!          
                      CMP.B #$68                                ;;D9B2|D9B1+D9B1/D9B8\D9BF;
                      BNE CODE_01D9BA                           ;;D9B4|D9B3+D9B3/D9BA\D9C1;
                      JSR CODE_01DBD4                           ;;D9B6|D9B5+D9B5/D9BC\D9C3;
                      BRA CODE_01D9C1                           ;;D9B9|D9B8+D9B8/D9BF\D9C6;
                                                                ;;                        ;
CODE_01D9BA:          CMP.B #$67                                ;;D9BB|D9BA+D9BA/D9C1\D9C8;
                      BNE CODE_01D9C6                           ;;D9BD|D9BC+D9BC/D9C3\D9CA;
                      JSR CODE_01DC0B                           ;;D9BF|D9BE+D9BE/D9C5\D9CC;
CODE_01D9C1:          JSR MarioSprInteractRt                    ;;D9C2|D9C1+D9C1/D9C8\D9CF;
                      BRA +                                     ;;D9C5|D9C4+D9C4/D9CB\D9D2;
                                                                ;;                        ;
CODE_01D9C6:          JSR MarioSprInteractRt                    ;;D9C7|D9C6+D9C6/D9CD\D9D4;
                      JSL CODE_03C263                           ;;D9CA|D9C9+D9C9/D9D0\D9D7;
                    + JMP CODE_01D74D                           ;;D9CE|D9CD+D9CD/D9D4\D9DB;
                                                                ;;                        ;
CODE_01D9D0:          JMP CODE_01DAA2                           ;;D9D1|D9D0+D9D0/D9D7\D9DE;
                                                                ;;                        ;
CODE_01D9D3:          JSR CODE_01DC54                           ;;D9D4|D9D3+D9D3/D9DA\D9E1;
                      LDA.B !SpriteXPosLow,X                    ;;D9D7|D9D6+D9D6/D9DD\D9E4;
                      PHA                                       ;;D9D9|D9D8+D9D8/D9DF\D9E6;
                      LDA.B !SpriteYPosLow,X                    ;;D9DA|D9D9+D9D9/D9E0\D9E7;
                      PHA                                       ;;D9DC|D9DB+D9DB/D9E2\D9E9;
                      JSR CODE_01D74D                           ;;D9DD|D9DC+D9DC/D9E3\D9EA;
                      PLA                                       ;;D9E0|D9DF+D9DF/D9E6\D9ED;
                      SEC                                       ;;D9E1|D9E0+D9E0/D9E7\D9EE;
                      SBC.B !SpriteYPosLow,X                    ;;D9E2|D9E1+D9E1/D9E8\D9EF;
                      EOR.B #$FF                                ;;D9E4|D9E3+D9E3/D9EA\D9F1;
                      INC A                                     ;;D9E6|D9E5+D9E5/D9EC\D9F3;
                      STA.W !TileGenerateTrackA                 ;;D9E7|D9E6+D9E6/D9ED\D9F4;
                      PLA                                       ;;D9EA|D9E9+D9E9/D9F0\D9F7;
                      SEC                                       ;;D9EB|D9EA+D9EA/D9F1\D9F8;
                      SBC.B !SpriteXPosLow,X                    ;;D9EC|D9EB+D9EB/D9F2\D9F9;
                      EOR.B #$FF                                ;;D9EE|D9ED+D9ED/D9F4\D9FB;
                      INC A                                     ;;D9F0|D9EF+D9EF/D9F6\D9FD;
                      STA.W !TileGenerateTrackB                 ;;D9F1|D9F0+D9F0/D9F7\D9FE;
                      LDA.B !PlayerBlockedDir                   ;;D9F4|D9F3+D9F3/D9FA\DA01;
                      AND.B #$03                                ;;D9F6|D9F5+D9F5/D9FC\DA03;
                      BNE Return01DA09                          ;;D9F8|D9F7+D9F7/D9FE\DA05;
                      JSR CODE_01A80F                           ;;D9FA|D9F9+D9F9/DA00\DA07;
                      BCS CODE_01DA0A                           ;;D9FD|D9FC+D9FC/DA03\DA0A;
CODE_01D9FE:          LDA.W !SpriteMisc163E,X                   ;;D9FF|D9FE+D9FE/DA05\DA0C;
                      BEQ Return01DA09                          ;;DA02|DA01+DA01/DA08\DA0F;
                      STZ.W !SpriteMisc163E,X                   ;;DA04|DA03+DA03/DA0A\DA11;
                      STZ.W !PlayerClimbingRope                 ;;DA07|DA06+DA06/DA0D\DA14;
Return01DA09:         RTS                                       ;;DA0A|DA09+DA09/DA10\DA17; Return 
                                                                ;;                        ;
CODE_01DA0A:          LDA.W !SpriteStatus,X                     ;;DA0B|DA0A+DA0A/DA11\DA18;
                      BEQ CODE_01DA37                           ;;DA0E|DA0D+DA0D/DA14\DA1B;
                      LDA.W !CarryingFlag                       ;;DA10|DA0F+DA0F/DA16\DA1D; \ Branch if carrying an enemy... 
                      ORA.W !PlayerRidingYoshi                  ;;DA13|DA12+DA12/DA19\DA20;  | ...or if on Yoshi 
                      BNE CODE_01D9FE                           ;;DA16|DA15+DA15/DA1C\DA23; / 
                      LDA.B #$03                                ;;DA18|DA17+DA17/DA1E\DA25;
                      STA.W !SpriteMisc163E,X                   ;;DA1A|DA19+DA19/DA20\DA27;
                      LDA.W !SpriteMisc154C,X                   ;;DA1D|DA1C+DA1C/DA23\DA2A;
                      BNE Return01DA8F                          ;;DA20|DA1F+DA1F/DA26\DA2D;
                      LDA.W !PlayerClimbingRope                 ;;DA22|DA21+DA21/DA28\DA2F;
                      BNE CODE_01DA2F                           ;;DA25|DA24+DA24/DA2B\DA32;
                      LDA.B !byetudlrHold                       ;;DA27|DA26+DA26/DA2D\DA34;
                      AND.B #$08                                ;;DA29|DA28+DA28/DA2F\DA36;
                      BEQ Return01DA8F                          ;;DA2B|DA2A+DA2A/DA31\DA38;
                      STA.W !PlayerClimbingRope                 ;;DA2D|DA2C+DA2C/DA33\DA3A;
CODE_01DA2F:          BIT.B !byetudlrFrame                      ;;DA30|DA2F+DA2F/DA36\DA3D;
                      BPL +                                     ;;DA32|DA31+DA31/DA38\DA3F;
                      LDA.B #$B0                                ;;DA34|DA33+DA33/DA3A\DA41;
                      STA.B !PlayerYSpeed                       ;;DA36|DA35+DA35/DA3C\DA43;
CODE_01DA37:          STZ.W !PlayerClimbingRope                 ;;DA38|DA37+DA37/DA3E\DA45;
                      LDA.B #$10                                ;;DA3B|DA3A+DA3A/DA41\DA48;
                      STA.W !SpriteMisc154C,X                   ;;DA3D|DA3C+DA3C/DA43\DA4A;
                    + LDY.B #$00                                ;;DA40|DA3F+DA3F/DA46\DA4D;
                      LDA.W !TileGenerateTrackA                 ;;DA42|DA41+DA41/DA48\DA4F;
                      BPL +                                     ;;DA45|DA44+DA44/DA4B\DA52;
                      DEY                                       ;;DA47|DA46+DA46/DA4D\DA54;
                    + CLC                                       ;;DA48|DA47+DA47/DA4E\DA55;
                      ADC.B !PlayerYPosNext                     ;;DA49|DA48+DA48/DA4F\DA56;
                      STA.B !PlayerYPosNext                     ;;DA4B|DA4A+DA4A/DA51\DA58;
                      TYA                                       ;;DA4D|DA4C+DA4C/DA53\DA5A;
                      ADC.B !PlayerYPosNext+1                   ;;DA4E|DA4D+DA4D/DA54\DA5B;
                      STA.B !PlayerYPosNext+1                   ;;DA50|DA4F+DA4F/DA56\DA5D;
                      LDA.B !SpriteYPosLow,X                    ;;DA52|DA51+DA51/DA58\DA5F;
                      STA.B !_0                                 ;;DA54|DA53+DA53/DA5A\DA61;
                      LDA.W !SpriteXPosHigh,X                   ;;DA56|DA55+DA55/DA5C\DA63;
                      STA.B !_1                                 ;;DA59|DA58+DA58/DA5F\DA66;
                      REP #$20                                  ;;DA5B|DA5A+DA5A/DA61\DA68; Accum (16 bit) 
                      LDA.B !PlayerYPosNext                     ;;DA5D|DA5C+DA5C/DA63\DA6A;
                      SEC                                       ;;DA5F|DA5E+DA5E/DA65\DA6C;
                      SBC.B !_0                                 ;;DA60|DA5F+DA5F/DA66\DA6D;
                      CMP.W #$0000                              ;;DA62|DA61+DA61/DA68\DA6F;
                      BPL +                                     ;;DA65|DA64+DA64/DA6B\DA72;
                      INC.B !PlayerYPosNext                     ;;DA67|DA66+DA66/DA6D\DA74;
                    + SEP #$20                                  ;;DA69|DA68+DA68/DA6F\DA76; Accum (8 bit) 
                      LDA.W !TileGenerateTrackB                 ;;DA6B|DA6A+DA6A/DA71\DA78;
                      JSR CODE_01DA90                           ;;DA6E|DA6D+DA6D/DA74\DA7B;
                      LDA.B !SpriteXPosLow,X                    ;;DA71|DA70+DA70/DA77\DA7E;
                      SEC                                       ;;DA73|DA72+DA72/DA79\DA80;
                      SBC.B #$08                                ;;DA74|DA73+DA73/DA7A\DA81;
                      CMP.B !PlayerXPosNext                     ;;DA76|DA75+DA75/DA7C\DA83;
                      BEQ CODE_01DA84                           ;;DA78|DA77+DA77/DA7E\DA85;
                      BPL CODE_01DA7F                           ;;DA7A|DA79+DA79/DA80\DA87;
                      LDA.B #$FF                                ;;DA7C|DA7B+DA7B/DA82\DA89;
                      BRA +                                     ;;DA7E|DA7D+DA7D/DA84\DA8B;
                                                                ;;                        ;
CODE_01DA7F:          LDA.B #$01                                ;;DA80|DA7F+DA7F/DA86\DA8D;
                    + JSR CODE_01DA90                           ;;DA82|DA81+DA81/DA88\DA8F;
CODE_01DA84:          LDA.W !SpriteMisc1626,X                   ;;DA85|DA84+DA84/DA8B\DA92;
                      BEQ Return01DA8F                          ;;DA88|DA87+DA87/DA8E\DA95;
                      STZ.W !SpriteMisc1626,X                   ;;DA8A|DA89+DA89/DA90\DA97;
                      STZ.W !SpriteMisc1540,X                   ;;DA8D|DA8C+DA8C/DA93\DA9A;
Return01DA8F:         RTS                                       ;;DA90|DA8F+DA8F/DA96\DA9D; Return 
                                                                ;;                        ;
CODE_01DA90:          LDY.B #$00                                ;;DA91|DA90+DA90/DA97\DA9E;
                      CMP.B #$00                                ;;DA93|DA92+DA92/DA99\DAA0;
                      BPL +                                     ;;DA95|DA94+DA94/DA9B\DAA2;
                      DEY                                       ;;DA97|DA96+DA96/DA9D\DAA4;
                    + CLC                                       ;;DA98|DA97+DA97/DA9E\DAA5;
                      ADC.B !PlayerXPosNext                     ;;DA99|DA98+DA98/DA9F\DAA6;
                      STA.B !PlayerXPosNext                     ;;DA9B|DA9A+DA9A/DAA1\DAA8;
                      TYA                                       ;;DA9D|DA9C+DA9C/DAA3\DAAA;
                      ADC.B !PlayerXPosNext+1                   ;;DA9E|DA9D+DA9D/DAA4\DAAB;
                      STA.B !PlayerXPosNext+1                   ;;DAA0|DA9F+DA9F/DAA6\DAAD;
                      RTS                                       ;;DAA2|DAA1+DAA1/DAA8\DAAF; Return 
                                                                ;;                        ;
CODE_01DAA2:          LDY.B #$18                                ;;DAA3|DAA2+DAA2/DAA9\DAB0;LINE GUIDED PLATFORM CODE               
                      LDA.W !SpriteMisc1602,X                   ;;DAA5|DAA4+DAA4/DAAB\DAB2;
                      BEQ +                                     ;;DAA8|DAA7+DAA7/DAAE\DAB5;
                      LDY.B #$28                                ;;DAAA|DAA9+DAA9/DAB0\DAB7;CONDITIONAL DEPENDING ON PLATFORM TYPE?               
                    + STY.B !_0                                 ;;DAAC|DAAB+DAAB/DAB2\DAB9;
                      LDA.B !SpriteXPosLow,X                    ;;DAAE|DAAD+DAAD/DAB4\DABB;
                      PHA                                       ;;DAB0|DAAF+DAAF/DAB6\DABD;
                      SEC                                       ;;DAB1|DAB0+DAB0/DAB7\DABE;
                      SBC.B !_0                                 ;;DAB2|DAB1+DAB1/DAB8\DABF;
                      STA.B !SpriteXPosLow,X                    ;;DAB4|DAB3+DAB3/DABA\DAC1;
                      LDA.W !SpriteYPosHigh,X                   ;;DAB6|DAB5+DAB5/DABC\DAC3;
                      PHA                                       ;;DAB9|DAB8+DAB8/DABF\DAC6;
                      SBC.B #$00                                ;;DABA|DAB9+DAB9/DAC0\DAC7;
                      STA.W !SpriteYPosHigh,X                   ;;DABC|DABB+DABB/DAC2\DAC9;
                      LDA.B !SpriteYPosLow,X                    ;;DABF|DABE+DABE/DAC5\DACC;
                      PHA                                       ;;DAC1|DAC0+DAC0/DAC7\DACE;
                      SEC                                       ;;DAC2|DAC1+DAC1/DAC8\DACF;
                      SBC.B #$08                                ;;DAC3|DAC2+DAC2/DAC9\DAD0;
                      STA.B !SpriteYPosLow,X                    ;;DAC5|DAC4+DAC4/DACB\DAD2;
                      LDA.W !SpriteXPosHigh,X                   ;;DAC7|DAC6+DAC6/DACD\DAD4;
                      PHA                                       ;;DACA|DAC9+DAC9/DAD0\DAD7;
                      SBC.B #$00                                ;;DACB|DACA+DACA/DAD1\DAD8;
                      STA.W !SpriteXPosHigh,X                   ;;DACD|DACC+DACC/DAD3\DADA;
                      JSR CODE_01B2DF                           ;;DAD0|DACF+DACF/DAD6\DADD;DRAW GFX  .  RELIES ON NEW POSITIONS MADE UP THERE.      
                      PLA                                       ;;DAD3|DAD2+DAD2/DAD9\DAE0;RESTORE POSITIONS                     
                      STA.W !SpriteXPosHigh,X                   ;;DAD4|DAD3+DAD3/DADA\DAE1;
                      PLA                                       ;;DAD7|DAD6+DAD6/DADD\DAE4;
                      STA.B !SpriteYPosLow,X                    ;;DAD8|DAD7+DAD7/DADE\DAE5;
                      PLA                                       ;;DADA|DAD9+DAD9/DAE0\DAE7;
                      STA.W !SpriteYPosHigh,X                   ;;DADB|DADA+DADA/DAE1\DAE8;
                      PLA                                       ;;DADE|DADD+DADD/DAE4\DAEB;
                      STA.B !SpriteXPosLow,X                    ;;DADF|DADE+DADE/DAE5\DAEC;
                      LDA.B !SpriteXPosLow,X                    ;;DAE1|DAE0+DAE0/DAE7\DAEE;
                      PHA                                       ;;DAE3|DAE2+DAE2/DAE9\DAF0;
                      JSR CODE_01D74D                           ;;DAE4|DAE3+DAE3/DAEA\DAF1;LINE GUIDE HANDLER???        
                      PLA                                       ;;DAE7|DAE6+DAE6/DAED\DAF4;
                      SEC                                       ;;DAE8|DAE7+DAE7/DAEE\DAF5;
                      SBC.B !SpriteXPosLow,X                    ;;DAE9|DAE8+DAE8/DAEF\DAF6;
                      LDY.W !SpriteMisc1528,X                   ;;DAEB|DAEA+DAEA/DAF1\DAF8;
                      PHY                                       ;;DAEE|DAED+DAED/DAF4\DAFB;
                      EOR.B #$FF                                ;;DAEF|DAEE+DAEE/DAF5\DAFC;
                      INC A                                     ;;DAF1|DAF0+DAF0/DAF7\DAFE;
                      STA.W !SpriteMisc1528,X                   ;;DAF2|DAF1+DAF1/DAF8\DAFF;
                      LDY.B #$18                                ;;DAF5|DAF4+DAF4/DAFB\DB02;
                      LDA.W !SpriteMisc1602,X                   ;;DAF7|DAF6+DAF6/DAFD\DB04;
                      BEQ +                                     ;;DAFA|DAF9+DAF9/DB00\DB07;
                      LDY.B #$28                                ;;DAFC|DAFB+DAFB/DB02\DB09;
                    + STY.B !_0                                 ;;DAFE|DAFD+DAFD/DB04\DB0B;
                      LDA.B !SpriteXPosLow,X                    ;;DB00|DAFF+DAFF/DB06\DB0D;
                      PHA                                       ;;DB02|DB01+DB01/DB08\DB0F;
                      SEC                                       ;;DB03|DB02+DB02/DB09\DB10;
                      SBC.B !_0                                 ;;DB04|DB03+DB03/DB0A\DB11;
                      STA.B !SpriteXPosLow,X                    ;;DB06|DB05+DB05/DB0C\DB13;
                      LDA.W !SpriteYPosHigh,X                   ;;DB08|DB07+DB07/DB0E\DB15;
                      PHA                                       ;;DB0B|DB0A+DB0A/DB11\DB18;
                      SBC.B #$00                                ;;DB0C|DB0B+DB0B/DB12\DB19;
                      STA.W !SpriteYPosHigh,X                   ;;DB0E|DB0D+DB0D/DB14\DB1B;
                      LDA.B !SpriteYPosLow,X                    ;;DB11|DB10+DB10/DB17\DB1E;
                      PHA                                       ;;DB13|DB12+DB12/DB19\DB20;
                      SEC                                       ;;DB14|DB13+DB13/DB1A\DB21;
                      SBC.B #$08                                ;;DB15|DB14+DB14/DB1B\DB22;
                      STA.B !SpriteYPosLow,X                    ;;DB17|DB16+DB16/DB1D\DB24;
                      LDA.W !SpriteXPosHigh,X                   ;;DB19|DB18+DB18/DB1F\DB26;
                      PHA                                       ;;DB1C|DB1B+DB1B/DB22\DB29;
                      SBC.B #$00                                ;;DB1D|DB1C+DB1C/DB23\DB2A;
                      STA.W !SpriteXPosHigh,X                   ;;DB1F|DB1E+DB1E/DB25\DB2C;
                      JSR CODE_01B457                           ;;DB22|DB21+DB21/DB28\DB2F;CUSTOM INTERACTION HANDLER         
                      BCC +                                     ;;DB25|DB24+DB24/DB2B\DB32;
                      LDA.W !SpriteMisc1626,X                   ;;DB27|DB26+DB26/DB2D\DB34;
                      BEQ +                                     ;;DB2A|DB29+DB29/DB30\DB37;
                      STZ.W !SpriteMisc1626,X                   ;;DB2C|DB2B+DB2B/DB32\DB39;
                      STZ.W !SpriteMisc1540,X                   ;;DB2F|DB2E+DB2E/DB35\DB3C;
                    + PLA                                       ;;DB32|DB31+DB31/DB38\DB3F;
                      STA.W !SpriteXPosHigh,X                   ;;DB33|DB32+DB32/DB39\DB40;
                      PLA                                       ;;DB36|DB35+DB35/DB3C\DB43;
                      STA.B !SpriteYPosLow,X                    ;;DB37|DB36+DB36/DB3D\DB44;
                      PLA                                       ;;DB39|DB38+DB38/DB3F\DB46;
                      STA.W !SpriteYPosHigh,X                   ;;DB3A|DB39+DB39/DB40\DB47;
                      PLA                                       ;;DB3D|DB3C+DB3C/DB43\DB4A;
                      STA.B !SpriteXPosLow,X                    ;;DB3E|DB3D+DB3D/DB44\DB4B;
                      PLA                                       ;;DB40|DB3F+DB3F/DB46\DB4D;
                      STA.W !SpriteMisc1528,X                   ;;DB41|DB40+DB40/DB47\DB4E;
                      RTS                                       ;;DB44|DB43+DB43/DB4A\DB51; Return 
                                                                ;;                        ;
CODE_01DB44:          LDA.B !SpriteLock                         ;;DB45|DB44+DB44/DB4B\DB52; \ Branch if sprites locked 
                      BNE +                                     ;;DB47|DB46+DB46/DB4D\DB54; / 
                      JSR SubUpdateSprPos                       ;;DB49|DB48+DB48/DB4F\DB56;
                      LDA.W !SpriteMisc1540,X                   ;;DB4C|DB4B+DB4B/DB52\DB59;
                      BNE +                                     ;;DB4F|DB4E+DB4E/DB55\DB5C;
                      LDA.B !SpriteYSpeed,X                     ;;DB51|DB50+DB50/DB57\DB5E;
                      CMP.B #$20                                ;;DB53|DB52+DB52/DB59\DB60;
                      BMI +                                     ;;DB55|DB54+DB54/DB5B\DB62;
                      JSR CODE_01D7F4                           ;;DB57|DB56+DB56/DB5D\DB64;
                    + RTS                                       ;;DB5A|DB59+DB59/DB60\DB67; Return 
                                                                ;;                        ;
                                                                ;;                        ;
DATA_01DB5A:          db $18,$E8                                ;;DB5B|DB5A+DB5A/DB61\DB68;
                                                                ;;                        ;
Grinder:              JSR CODE_01DBA2                           ;;DB5D|DB5C+DB5C/DB63\DB6A;
                      LDA.W !SpriteStatus,X                     ;;DB60|DB5F+DB5F/DB66\DB6D;
                      CMP.B #$08                                ;;DB63|DB62+DB62/DB69\DB70;
                      BNE Return01DB95                          ;;DB65|DB64+DB64/DB6B\DB72;
                      LDA.B !SpriteLock                         ;;DB67|DB66+DB66/DB6D\DB74; \ Branch if sprites locked 
                      BNE Return01DB95                          ;;DB69|DB68+DB68/DB6F\DB76; / 
                      LDA.B !TrueFrame                          ;;DB6B|DB6A+DB6A/DB71\DB78;
                      AND.B #$03                                ;;DB6D|DB6C+DB6C/DB73\DB7A;
                      BNE +                                     ;;DB6F|DB6E+DB6E/DB75\DB7C;
                      LDA.B #!SFX_BLOCKSNAKE                    ;;DB71|DB70+DB70/DB77\DB7E; \ Play sound effect 
                      STA.W !SPCIO1                             ;;DB73|DB72+DB72/DB79\DB80; / 
                    + JSR SubOffscreen0Bnk1                     ;;DB76|DB75+DB75/DB7C\DB83;
                      JSR MarioSprInteractRt                    ;;DB79|DB78+DB78/DB7F\DB86;
                      LDY.W !SpriteMisc157C,X                   ;;DB7C|DB7B+DB7B/DB82\DB89;
                      LDA.W DATA_01DB5A,Y                       ;;DB7F|DB7E+DB7E/DB85\DB8C;
                      STA.B !SpriteXSpeed,X                     ;;DB82|DB81+DB81/DB88\DB8F;
                      JSR SubUpdateSprPos                       ;;DB84|DB83+DB83/DB8A\DB91;
                      JSR IsOnGround                            ;;DB87|DB86+DB86/DB8D\DB94;
                      BEQ +                                     ;;DB8A|DB89+DB89/DB90\DB97;
                      STZ.B !SpriteYSpeed,X                     ;;DB8C|DB8B+DB8B/DB92\DB99; Sprite Y Speed = 0 
                    + JSR IsTouchingObjSide                     ;;DB8E|DB8D+DB8D/DB94\DB9B;
                      BEQ Return01DB95                          ;;DB91|DB90+DB90/DB97\DB9E;
                      JSR FlipSpriteDir                         ;;DB93|DB92+DB92/DB99\DBA0;
Return01DB95:         RTS                                       ;;DB96|DB95+DB95/DB9C\DBA3; Return 
                                                                ;;                        ;
                                                                ;;                        ;
DATA_01DB96:          db $F8,$08,$F8,$08                        ;;DB97|DB96+DB96/DB9D\DBA4;
                                                                ;;                        ;
DATA_01DB9A:          db $00,$00,$10,$10                        ;;DB9B|DB9A+DB9A/DBA1\DBA8;
                                                                ;;                        ;
DATA_01DB9E:          db $03,$43,$83,$C3                        ;;DB9F|DB9E+DB9E/DBA5\DBAC;
                                                                ;;                        ;
CODE_01DBA2:          JSR GetDrawInfoBnk1                       ;;DBA3|DBA2+DBA2/DBA9\DBB0;
                      PHX                                       ;;DBA6|DBA5+DBA5/DBAC\DBB3;
                      LDX.B #$03                                ;;DBA7|DBA6+DBA6/DBAD\DBB4;
                    - LDA.B !_0                                 ;;DBA9|DBA8+DBA8/DBAF\DBB6;
                      CLC                                       ;;DBAB|DBAA+DBAA/DBB1\DBB8;
                      ADC.W DATA_01DB96,X                       ;;DBAC|DBAB+DBAB/DBB2\DBB9;
                      STA.W !OAMTileXPos+$100,Y                 ;;DBAF|DBAE+DBAE/DBB5\DBBC;
                      LDA.B !_1                                 ;;DBB2|DBB1+DBB1/DBB8\DBBF;
                      CLC                                       ;;DBB4|DBB3+DBB3/DBBA\DBC1;
                      ADC.W DATA_01DB9A,X                       ;;DBB5|DBB4+DBB4/DBBB\DBC2;
                      STA.W !OAMTileYPos+$100,Y                 ;;DBB8|DBB7+DBB7/DBBE\DBC5;
                      LDA.B !EffFrame                           ;;DBBB|DBBA+DBBA/DBC1\DBC8;
                      AND.B #$02                                ;;DBBD|DBBC+DBBC/DBC3\DBCA;
                      ORA.B #$6C                                ;;DBBF|DBBE+DBBE/DBC5\DBCC;
                      STA.W !OAMTileNo+$100,Y                   ;;DBC1|DBC0+DBC0/DBC7\DBCE;
                      LDA.W DATA_01DB9E,X                       ;;DBC4|DBC3+DBC3/DBCA\DBD1;
                      STA.W !OAMTileAttr+$100,Y                 ;;DBC7|DBC6+DBC6/DBCD\DBD4;
                      INY                                       ;;DBCA|DBC9+DBC9/DBD0\DBD7;
                      INY                                       ;;DBCB|DBCA+DBCA/DBD1\DBD8;
                      INY                                       ;;DBCC|DBCB+DBCB/DBD2\DBD9;
                      INY                                       ;;DBCD|DBCC+DBCC/DBD3\DBDA;
                      DEX                                       ;;DBCE|DBCD+DBCD/DBD4\DBDB;
                      BPL -                                     ;;DBCF|DBCE+DBCE/DBD5\DBDC;
CODE_01DBD0:          LDA.B #$03                                ;;DBD1|DBD0+DBD0/DBD7\DBDE;
                      BRA +                                     ;;DBD3|DBD2+DBD2/DBD9\DBE0;
                                                                ;;                        ;
CODE_01DBD4:          JSR SubSprGfx2Entry1                      ;;DBD5|DBD4+DBD4/DBDB\DBE2;
                      LDY.W !SpriteOAMIndex,X                   ;;DBD8|DBD7+DBD7/DBDE\DBE5; Y = Index into sprite OAM 
                      LDA.W !OAMTileXPos+$100,Y                 ;;DBDB|DBDA+DBDA/DBE1\DBE8;
                      SEC                                       ;;DBDE|DBDD+DBDD/DBE4\DBEB;
                      SBC.B #$08                                ;;DBDF|DBDE+DBDE/DBE5\DBEC;
                      STA.W !OAMTileXPos+$100,Y                 ;;DBE1|DBE0+DBE0/DBE7\DBEE;
                      LDA.W !OAMTileYPos+$100,Y                 ;;DBE4|DBE3+DBE3/DBEA\DBF1;
                      SEC                                       ;;DBE7|DBE6+DBE6/DBED\DBF4;
                      SBC.B #$08                                ;;DBE8|DBE7+DBE7/DBEE\DBF5;
                      STA.W !OAMTileYPos+$100,Y                 ;;DBEA|DBE9+DBE9/DBF0\DBF7;
                      PHX                                       ;;DBED|DBEC+DBEC/DBF3\DBFA;
                      LDA.B !EffFrame                           ;;DBEE|DBED+DBED/DBF4\DBFB;
                      LSR A                                     ;;DBF0|DBEF+DBEF/DBF6\DBFD;
                      LSR A                                     ;;DBF1|DBF0+DBF0/DBF7\DBFE;
                      AND.B #$01                                ;;DBF2|DBF1+DBF1/DBF8\DBFF;
                      TAX                                       ;;DBF4|DBF3+DBF3/DBFA\DC01;
                      LDA.B #$C8                                ;;DBF5|DBF4+DBF4/DBFB\DC02;
                      STA.W !OAMTileNo+$100,Y                   ;;DBF7|DBF6+DBF6/DBFD\DC04;
                      LDA.W DATA_01DC09,X                       ;;DBFA|DBF9+DBF9/DC00\DC07;
                      ORA.B !SpriteProperties                   ;;DBFD|DBFC+DBFC/DC03\DC0A;
                      STA.W !OAMTileAttr+$100,Y                 ;;DBFF|DBFE+DBFE/DC05\DC0C;
                      LDA.B #$00                                ;;DC02|DC01+DC01/DC08\DC0F;
                    + PLX                                       ;;DC04|DC03+DC03/DC0A\DC11;
CODE_01DC04:          LDY.B #$02                                ;;DC05|DC04+DC04/DC0B\DC12;
                      JMP FinishOAMWriteRt                      ;;DC07|DC06+DC06/DC0D\DC14;
                                                                ;;                        ;
                                                                ;;                        ;
DATA_01DC09:          db $05,$45                                ;;DC0A|DC09+DC09/DC10\DC17;
                                                                ;;                        ;
CODE_01DC0B:          JSR GetDrawInfoBnk1                       ;;DC0C|DC0B+DC0B/DC12\DC19;
                      PHX                                       ;;DC0F|DC0E+DC0E/DC15\DC1C;
                      LDX.B #$03                                ;;DC10|DC0F+DC0F/DC16\DC1D;
                    - LDA.B !_0                                 ;;DC12|DC11+DC11/DC18\DC1F;
                      CLC                                       ;;DC14|DC13+DC13/DC1A\DC21;
                      ADC.W DATA_01DC3B,X                       ;;DC15|DC14+DC14/DC1B\DC22;
                      STA.W !OAMTileXPos+$100,Y                 ;;DC18|DC17+DC17/DC1E\DC25;
                      LDA.B !_1                                 ;;DC1B|DC1A+DC1A/DC21\DC28;
                      CLC                                       ;;DC1D|DC1C+DC1C/DC23\DC2A;
                      ADC.W DATA_01DC3F,X                       ;;DC1E|DC1D+DC1D/DC24\DC2B;
                      STA.W !OAMTileYPos+$100,Y                 ;;DC21|DC20+DC20/DC27\DC2E;
                      LDA.B !EffFrame                           ;;DC24|DC23+DC23/DC2A\DC31;
                      AND.B #$02                                ;;DC26|DC25+DC25/DC2C\DC33;
                      ORA.B #$6C                                ;;DC28|DC27+DC27/DC2E\DC35;
                      STA.W !OAMTileNo+$100,Y                   ;;DC2A|DC29+DC29/DC30\DC37;
                      LDA.W DATA_01DC43,X                       ;;DC2D|DC2C+DC2C/DC33\DC3A;
                      STA.W !OAMTileAttr+$100,Y                 ;;DC30|DC2F+DC2F/DC36\DC3D;
                      INY                                       ;;DC33|DC32+DC32/DC39\DC40;
                      INY                                       ;;DC34|DC33+DC33/DC3A\DC41;
                      INY                                       ;;DC35|DC34+DC34/DC3B\DC42;
                      INY                                       ;;DC36|DC35+DC35/DC3C\DC43;
                      DEX                                       ;;DC37|DC36+DC36/DC3D\DC44;
                      BPL -                                     ;;DC38|DC37+DC37/DC3E\DC45;
                      BRA CODE_01DBD0                           ;;DC3A|DC39+DC39/DC40\DC47;
                                                                ;;                        ;
                                                                ;;                        ;
DATA_01DC3B:          db $F0,$00,$F0,$00                        ;;DC3C|DC3B+DC3B/DC42\DC49;
                                                                ;;                        ;
DATA_01DC3F:          db $F0,$F0,$00,$00                        ;;DC40|DC3F+DC3F/DC46\DC4D;
                                                                ;;                        ;
DATA_01DC43:          db $33,$73,$B3,$F3                        ;;DC44|DC43+DC43/DC4A\DC51;
                                                                ;;                        ;
RopeMotorTiles:       db $C0,$C2,$E0,$C2                        ;;DC48|DC47+DC47/DC4E\DC55;
                                                                ;;                        ;
LineGuideRopeTiles:   db $C0,$CE,$CE,$CE,$CE,$CE,$CE,$CE        ;;DC4C|DC4B+DC4B/DC52\DC59;
                      db $CE                                    ;;DC54|DC53+DC53/DC5A\DC61;
                                                                ;;                        ;
CODE_01DC54:          JSR GetDrawInfoBnk1                       ;;DC55|DC54+DC54/DC5B\DC62;
                      LDA.B !_0                                 ;;DC58|DC57+DC57/DC5E\DC65;
                      SEC                                       ;;DC5A|DC59+DC59/DC60\DC67;
                      SBC.B #$08                                ;;DC5B|DC5A+DC5A/DC61\DC68;
                      STA.B !_0                                 ;;DC5D|DC5C+DC5C/DC63\DC6A;
                      LDA.B !_1                                 ;;DC5F|DC5E+DC5E/DC65\DC6C;
                      SEC                                       ;;DC61|DC60+DC60/DC67\DC6E;
                      SBC.B #$08                                ;;DC62|DC61+DC61/DC68\DC6F;
                      STA.B !_1                                 ;;DC64|DC63+DC63/DC6A\DC71;
                      TXA                                       ;;DC66|DC65+DC65/DC6C\DC73;
                      ASL A                                     ;;DC67|DC66+DC66/DC6D\DC74;
                      ASL A                                     ;;DC68|DC67+DC67/DC6E\DC75;
                      EOR.B !EffFrame                           ;;DC69|DC68+DC68/DC6F\DC76;
                      LSR A                                     ;;DC6B|DC6A+DC6A/DC71\DC78;
                      LSR A                                     ;;DC6C|DC6B+DC6B/DC72\DC79;
                      LSR A                                     ;;DC6D|DC6C+DC6C/DC73\DC7A;
                      AND.B #$03                                ;;DC6E|DC6D+DC6D/DC74\DC7B;
                      STA.B !_2                                 ;;DC70|DC6F+DC6F/DC76\DC7D;
                      LDA.B #$05                                ;;DC72|DC71+DC71/DC78\DC7F;
                      CPX.B #$06                                ;;DC74|DC73+DC73/DC7A\DC81;
                      BCC +                                     ;;DC76|DC75+DC75/DC7C\DC83;
                      LDY.W !SpriteMemorySetting                ;;DC78|DC77+DC77/DC7E\DC85;
                      BEQ +                                     ;;DC7B|DC7A+DC7A/DC81\DC88;
                      LDA.B #$09                                ;;DC7D|DC7C+DC7C/DC83\DC8A;
                    + STA.B !_3                                 ;;DC7F|DC7E+DC7E/DC85\DC8C;
                      LDY.W !SpriteOAMIndex,X                   ;;DC81|DC80+DC80/DC87\DC8E; Y = Index into sprite OAM 
                      LDX.B #$00                                ;;DC84|DC83+DC83/DC8A\DC91;
CODE_01DC85:          LDA.B !_0                                 ;;DC86|DC85+DC85/DC8C\DC93;
                      STA.W !OAMTileXPos+$100,Y                 ;;DC88|DC87+DC87/DC8E\DC95;
                      LDA.B !_1                                 ;;DC8B|DC8A+DC8A/DC91\DC98;
                      STA.W !OAMTileYPos+$100,Y                 ;;DC8D|DC8C+DC8C/DC93\DC9A;
                      CLC                                       ;;DC90|DC8F+DC8F/DC96\DC9D;
                      ADC.B #$10                                ;;DC91|DC90+DC90/DC97\DC9E;
                      STA.B !_1                                 ;;DC93|DC92+DC92/DC99\DCA0;
                      %LorW_X(LDA,LineGuideRopeTiles)           ;;DC95|DC94+DC94/DC9B\DCA2;
                      CPX.B #$00                                ;;DC99|DC97+DC97/DC9E\DCA5;
                      BNE +                                     ;;DC9B|DC99+DC99/DCA0\DCA7;
                      PHX                                       ;;DC9D|DC9B+DC9B/DCA2\DCA9;
                      LDX.B !_2                                 ;;DC9E|DC9C+DC9C/DCA3\DCAA;
                      %LorW_X(LDA,RopeMotorTiles)               ;;DCA0|DC9E+DC9E/DCA5\DCAC;
                      PLX                                       ;;DCA4|DCA1+DCA1/DCA8\DCAF;
                    + STA.W !OAMTileNo+$100,Y                   ;;DCA5|DCA2+DCA2/DCA9\DCB0;
                      LDA.B #$37                                ;;DCA8|DCA5+DCA5/DCAC\DCB3;
                      CPX.B #$01                                ;;DCAA|DCA7+DCA7/DCAE\DCB5;
                      BCC +                                     ;;DCAC|DCA9+DCA9/DCB0\DCB7;
                      LDA.B #$31                                ;;DCAE|DCAB+DCAB/DCB2\DCB9;
                    + STA.W !OAMTileAttr+$100,Y                 ;;DCB0|DCAD+DCAD/DCB4\DCBB;
                      INY                                       ;;DCB3|DCB0+DCB0/DCB7\DCBE;
                      INY                                       ;;DCB4|DCB1+DCB1/DCB8\DCBF;
                      INY                                       ;;DCB5|DCB2+DCB2/DCB9\DCC0;
                      INY                                       ;;DCB6|DCB3+DCB3/DCBA\DCC1;
                      INX                                       ;;DCB7|DCB4+DCB4/DCBB\DCC2;
                      CPX.B !_3                                 ;;DCB8|DCB5+DCB5/DCBC\DCC3;
                      BNE CODE_01DC85                           ;;DCBA|DCB7+DCB7/DCBE\DCC5;
                      LDA.B #$DE                                ;;DCBC|DCB9+DCB9/DCC0\DCC7;
                      STA.W !OAMTileNo+$FC,Y                    ;;DCBE|DCBB+DCBB/DCC2\DCC9;
                      LDX.W !CurSpriteProcess                   ;;DCC1|DCBE+DCBE/DCC5\DCCC; X = Sprite index 
                      LDA.B #$04                                ;;DCC4|DCC1+DCC1/DCC8\DCCF;
                      CPX.B #$06                                ;;DCC6|DCC3+DCC3/DCCA\DCD1;
                      BCC +                                     ;;DCC8|DCC5+DCC5/DCCC\DCD3;
                      LDY.W !SpriteMemorySetting                ;;DCCA|DCC7+DCC7/DCCE\DCD5;
                      BEQ +                                     ;;DCCD|DCCA+DCCA/DCD1\DCD8;
                      LDA.B #$08                                ;;DCCF|DCCC+DCCC/DCD3\DCDA;
                    + JMP CODE_01DC04                           ;;DCD1|DCCE+DCCE/DCD5\DCDC;
                                                                ;;                        ;
                                                                ;;                        ;
DATA_01DCD1:          db $15,$15,$15,$15,$0C,$10,$10,$10        ;;DCD4|DCD1+DCD1/DCD8\DCDF;
                      db $10,$0C,$0C,$10,$10,$10,$10,$0C        ;;DCDC|DCD9+DCD9/DCE0\DCE7;
                      db $15,$15,$10,$10,$10,$10,$10,$10        ;;DCE4|DCE1+DCE1/DCE8\DCEF;
                      db $10,$10,$10,$10,$10,$10,$15,$15        ;;DCEC|DCE9+DCE9/DCF0\DCF7;
DATA_01DCF1:          db $00,$00,$00,$00,$00,$00,$01,$02        ;;DCF4|DCF1+DCF1/DCF8\DCFF;
                      db $00,$00,$00,$00,$02,$01,$00,$00        ;;DCFC|DCF9+DCF9/DD00\DD07;
                      db $00,$00,$01,$02,$01,$02,$00,$00        ;;DD04|DD01+DD01/DD08\DD0F;
                      db $00,$00,$02,$02,$00,$00,$00,$00        ;;DD0C|DD09+DD09/DD10\DD17;
DATA_01DD11:          db $00,$10,$00,$F0,$F4,$FC,$F0,$10        ;;DD14|DD11+DD11/DD18\DD1F;
                      db $04,$0C,$0C,$00,$10,$F0,$FC,$F4        ;;DD1C|DD19+DD19/DD20\DD27;
                      db $F0,$10,$F0,$10,$F0,$10,$F8,$F8        ;;DD24|DD21+DD21/DD28\DD2F;
                      db $08,$08,$10,$10,$00,$00,$F0,$10        ;;DD2C|DD29+DD29/DD30\DD37;
                      db $10,$00,$F0,$F0,$0C,$04,$10,$F0        ;;DD34|DD31+DD31/DD38\DD3F;
                      db $00,$F4,$F4,$FC,$F0,$10,$00,$0C        ;;DD3C|DD39+DD39/DD40\DD47;
                      db $10,$F0,$10,$00,$10,$F0,$08,$08        ;;DD44|DD41+DD41/DD48\DD4F;
                      db $F8,$F8,$F0,$F0,$00,$00,$10,$F0        ;;DD4C|DD49+DD49/DD50\DD57;
DATA_01DD51:          db $10,$00,$10,$00,$0C,$10,$04,$00        ;;DD54|DD51+DD51/DD58\DD5F;
                      db $10,$0C,$0C,$10,$04,$00,$10,$0C        ;;DD5C|DD59+DD59/DD60\DD67;
                      db $10,$10,$08,$08,$08,$08,$10,$10        ;;DD64|DD61+DD61/DD68\DD6F;
                      db $10,$10,$00,$00,$10,$10,$10,$10        ;;DD6C|DD69+DD69/DD70\DD77;
                      db $00,$F0,$00,$F0,$F4,$F0,$00,$FC        ;;DD74|DD71+DD71/DD78\DD7F;
                      db $F0,$F4,$F4,$F0,$00,$FC,$F0,$F4        ;;DD7C|DD79+DD79/DD80\DD87;
                      db $F0,$F0,$F8,$F8,$F8,$F8,$F0,$F0        ;;DD84|DD81+DD81/DD88\DD8F;
                      db $F0,$F0,$00,$00,$F0,$F0,$F0            ;;DD8C|DD89+DD89/DD90\DD97;
                                                                ;;                        ;
DATA_01DD90:          db $F0                                    ;;DD93|DD90+DD90/DD97\DD9E;
                                                                ;;                        ;
DATA_01DD91:          db $50,$78,$A0,$A0,$A0,$78,$50,$50        ;;DD94|DD91+DD91/DD98\DD9F;
DATA_01DD99:          db $78                                    ;;DD9C|DD99+DD99/DDA0\DDA7;
                                                                ;;                        ;
DATA_01DD9A:          db $F0,$F0,$F0,$18,$40,$40,$40,$18        ;;DD9D|DD9A+DD9A/DDA1\DDA8;
DATA_01DDA2:          db $18,$03,$00,$00,$01,$01,$02,$02        ;;DDA5|DDA2+DDA2/DDA9\DDB0;
                      db $03,$FF                                ;;DDAD|DDAA+DDAA/DDB1\DDB8;
                                                                ;;                        ;
InitBonusGame:        LDA.W !DisableBonusSprite                 ;;DDAF|DDAC+DDAC/DDB3\DDBA;
                      BEQ +                                     ;;DDB2|DDAF+DDAF/DDB6\DDBD;
                      STZ.W !SpriteStatus,X                     ;;DDB4|DDB1+DDB1/DDB8\DDBF;
                      RTS                                       ;;DDB7|DDB4+DDB4/DDBB\DDC2; Return 
                                                                ;;                        ;
                    + LDX.B #$09                                ;;DDB8|DDB5+DDB5/DDBC\DDC3;
CODE_01DDB7:          LDA.B #$08                                ;;DDBA|DDB7+DDB7/DDBE\DDC5; \ Sprite status = Normal 
                      STA.W !SpriteStatus,X                     ;;DDBC|DDB9+DDB9/DDC0\DDC7; / 
                      LDA.B #$82                                ;;DDBF|DDBC+DDBC/DDC3\DDCA;
                      STA.W !SpriteNumber,X                     ;;DDC1|DDBE+DDBE/DDC5\DDCC;
                      %LorW_X(LDA,DATA_01DD90)                  ;;DDC4|DDC1+DDC1/DDC8\DDCF;
                      STA.B !SpriteXPosLow,X                    ;;DDC8|DDC4+DDC4/DDCB\DDD2;
                      LDA.B #$00                                ;;DDCA|DDC6+DDC6/DDCD\DDD4;
                      STA.W !SpriteYPosHigh,X                   ;;DDCC|DDC8+DDC8/DDCF\DDD6;
                      %LorW_X(LDA,DATA_01DD99)                  ;;DDCF|DDCB+DDCB/DDD2\DDD9;
                      STA.B !SpriteYPosLow,X                    ;;DDD3|DDCE+DDCE/DDD5\DDDC;
                      ASL A                                     ;;DDD5|DDD0+DDD0/DDD7\DDDE;
                      LDA.B #$00                                ;;DDD6|DDD1+DDD1/DDD8\DDDF;
                      BCS +                                     ;;DDD8|DDD3+DDD3/DDDA\DDE1;
                      INC A                                     ;;DDDA|DDD5+DDD5/DDDC\DDE3;
                    + STA.W !SpriteXPosHigh,X                   ;;DDDB|DDD6+DDD6/DDDD\DDE4;
                      JSL InitSpriteTables                      ;;DDDE|DDD9+DDD9/DDE0\DDE7;
                      %LorW_X(LDA,DATA_01DDA2)                  ;;DDE2|DDDD+DDDD/DDE4\DDEB;
                      STA.W !SpriteMisc157C,X                   ;;DDE6|DDE0+DDE0/DDE7\DDEE;
                      TXA                                       ;;DDE9|DDE3+DDE3/DDEA\DDF1;
                      CLC                                       ;;DDEA|DDE4+DDE4/DDEB\DDF2;
                      ADC.B !TrueFrame                          ;;DDEB|DDE5+DDE5/DDEC\DDF3;
                      AND.B #$07                                ;;DDED|DDE7+DDE7/DDEE\DDF5;
                      STA.W !SpriteMisc1570,X                   ;;DDEF|DDE9+DDE9/DDF0\DDF7;
                      DEX                                       ;;DDF2|DDEC+DDEC/DDF3\DDFA;
                      BNE CODE_01DDB7                           ;;DDF3|DDED+DDED/DDF4\DDFB;
                      STZ.W !BonusGameComplete                  ;;DDF5|DDEF+DDEF/DDF6\DDFD;
                      STZ.W !BonusGame1UpCount                  ;;DDF8|DDF2+DDF2/DDF9\DE00;
                      JSL GetRand                               ;;DDFB|DDF5+DDF5/DDFC\DE03;
                      EOR.B !TrueFrame                          ;;DDFF|DDF9+DDF9/DE00\DE07;
                      ADC.B !EffFrame                           ;;DE01|DDFB+DDFB/DE02\DE09;
                      AND.B #$07                                ;;DE03|DDFD+DDFD/DE04\DE0B;
                      TAY                                       ;;DE05|DDFF+DDFF/DE06\DE0D;
                      LDA.W DATA_01DE21,Y                       ;;DE06|DE00+DE00/DE07\DE0E;
                      STA.W !SpriteMisc1570+9                   ;;DE09|DE03+DE03/DE0A\DE11;
                      LDA.B #$01                                ;;DE0C|DE06+DE06/DE0D\DE14;
                      STA.B !SpriteTableC2+9                    ;;DE0E|DE08+DE08/DE0F\DE16;
                      INC.W !DisableBonusSprite                 ;;DE10|DE0A+DE0A/DE11\DE18;
                      LDX.W !CurSpriteProcess                   ;;DE13|DE0D+DE0D/DE14\DE1B; X = Sprite index 
                      RTS                                       ;;DE16|DE10+DE10/DE17\DE1E; Return 
                                                                ;;                        ;
                                                                ;;                        ;
DATA_01DE11:          db $10,$00,$F0,$00                        ;;DE17|DE11+DE11/DE18\DE1F;
                                                                ;;                        ;
DATA_01DE15:          db $00,$10,$00,$F0                        ;;DE1B|DE15+DE15/DE1C\DE23;
                                                                ;;                        ;
DATA_01DE19:          db $A0,$A0,$50,$50                        ;;DE1F|DE19+DE19/DE20\DE27;
                                                                ;;                        ;
DATA_01DE1D:          db $F0,$40,$40,$F0                        ;;DE23|DE1D+DE1D/DE24\DE2B;
                                                                ;;                        ;
DATA_01DE21:          db $01,$01,$01,$04,$04,$04,$07,$07        ;;DE27|DE21+DE21/DE28\DE2F;
                      db $07                                    ;;DE2F|DE29+DE29/DE30\DE37;
                                                                ;;                        ;
BonusGame:            STZ.W !SpriteOffscreenX,X                 ;;DE30|DE2A+DE2A/DE31\DE38;
                      CPX.B #$01                                ;;DE33|DE2D+DE2D/DE34\DE3B;
                      BNE +                                     ;;DE35|DE2F+DE2F/DE36\DE3D;
                      JSR CODE_01E26A                           ;;DE37|DE31+DE31/DE38\DE3F;
                    + JSR CODE_01DF19                           ;;DE3A|DE34+DE34/DE3B\DE42;
                      LDA.B !SpriteLock                         ;;DE3D|DE37+DE37/DE3E\DE45; \ Return if sprites locked 
                      BNE Return01DE40                          ;;DE3F|DE39+DE39/DE40\DE47; / 
                      LDA.W !BonusGameComplete                  ;;DE41|DE3B+DE3B/DE42\DE49;
                      BEQ +                                     ;;DE44|DE3E+DE3E/DE45\DE4C;
Return01DE40:         RTS                                       ;;DE46|DE40+DE40/DE47\DE4E; Return 
                                                                ;;                        ;
                    + LDA.B !SpriteTableC2,X                    ;;DE47|DE41+DE41/DE48\DE4F;
                      BNE CODE_01DE8C                           ;;DE49|DE43+DE43/DE4A\DE51;
                      LDA.B !EffFrame                           ;;DE4B|DE45+DE45/DE4C\DE53;
                      AND.B #$03                                ;;DE4D|DE47+DE47/DE4E\DE55;
                      BNE +                                     ;;DE4F|DE49+DE49/DE50\DE57;
                      INC.W !SpriteMisc1570,X                   ;;DE51|DE4B+DE4B/DE52\DE59;
                      LDA.W !SpriteMisc1570,X                   ;;DE54|DE4E+DE4E/DE55\DE5C;
                      CMP.B #$09                                ;;DE57|DE51+DE51/DE58\DE5F;
                      BNE +                                     ;;DE59|DE53+DE53/DE5A\DE61;
                      STZ.W !SpriteMisc1570,X                   ;;DE5B|DE55+DE55/DE5C\DE63;
                    + JSR MarioSprInteractRt                    ;;DE5E|DE58+DE58/DE5F\DE66;
                      BCC CODE_01DE8C                           ;;DE61|DE5B+DE5B/DE62\DE69;
                      LDA.B !PlayerYSpeed                       ;;DE63|DE5D+DE5D/DE64\DE6B;
                      BPL CODE_01DE8C                           ;;DE65|DE5F+DE5F/DE66\DE6D;
                      LDA.B #$F4                                ;;DE67|DE61+DE61/DE68\DE6F;
                      LDY.B !Powerup                            ;;DE69|DE63+DE63/DE6A\DE71;
                      BEQ +                                     ;;DE6B|DE65+DE65/DE6C\DE73;
                      LDA.B #con($00,$00,$00,$FC,$FC)           ;;DE6D|DE67+DE67/DE6E\DE75;
                    + CLC                                       ;;DE6F|DE69+DE69/DE70\DE77;
                      ADC.B !SpriteYPosLow,X                    ;;DE70|DE6A+DE6A/DE71\DE78;
                      SEC                                       ;;DE72|DE6C+DE6C/DE73\DE7A;
                      SBC.B !Layer1YPos                         ;;DE73|DE6D+DE6D/DE74\DE7B;
                      CMP.B !PlayerYPosScrRel                   ;;DE75|DE6F+DE6F/DE76\DE7D;
                      BCS CODE_01DE8C                           ;;DE77|DE71+DE71/DE78\DE7F;
                      LDA.B #$10                                ;;DE79|DE73+DE73/DE7A\DE81;
                      STA.B !PlayerYSpeed                       ;;DE7B|DE75+DE75/DE7C\DE83;
                      LDA.B #!SFX_SWITCH                        ;;DE7D|DE77+DE77/DE7E\DE85; \ Play sound effect 
                      STA.W !SPCIO0                             ;;DE7F|DE79+DE79/DE80\DE87; / 
                      INC.B !SpriteTableC2,X                    ;;DE82|DE7C+DE7C/DE83\DE8A;
                      LDY.W !SpriteMisc1570,X                   ;;DE84|DE7E+DE7E/DE85\DE8C;
                      LDA.W DATA_01DE21,Y                       ;;DE87|DE81+DE81/DE88\DE8F;
                      STA.W !SpriteMisc1570,X                   ;;DE8A|DE84+DE84/DE8B\DE92;
                      LDA.B #$10                                ;;DE8D|DE87+DE87/DE8E\DE95;
                      STA.W !SpriteMisc1540,X                   ;;DE8F|DE89+DE89/DE90\DE97;
CODE_01DE8C:          LDY.W !SpriteMisc157C,X                   ;;DE92|DE8C+DE8C/DE93\DE9A;
                      BMI Return01DEAF                          ;;DE95|DE8F+DE8F/DE96\DE9D;
                      LDA.B !SpriteXPosLow,X                    ;;DE97|DE91+DE91/DE98\DE9F;
                      CMP.W DATA_01DE19,Y                       ;;DE99|DE93+DE93/DE9A\DEA1;
                      BNE CODE_01DE9F                           ;;DE9C|DE96+DE96/DE9D\DEA4;
                      LDA.B !SpriteYPosLow,X                    ;;DE9E|DE98+DE98/DE9F\DEA6;
                      CMP.W DATA_01DE1D,Y                       ;;DEA0|DE9A+DE9A/DEA1\DEA8;
                      BEQ +                                     ;;DEA3|DE9D+DE9D/DEA4\DEAB;
CODE_01DE9F:          LDA.W DATA_01DE11,Y                       ;;DEA5|DE9F+DE9F/DEA6\DEAD;
                      STA.B !SpriteXSpeed,X                     ;;DEA8|DEA2+DEA2/DEA9\DEB0;
                      LDA.W DATA_01DE15,Y                       ;;DEAA|DEA4+DEA4/DEAB\DEB2;
                      STA.B !SpriteYSpeed,X                     ;;DEAD|DEA7+DEA7/DEAE\DEB5;
                      JSR SubSprXPosNoGrvty                     ;;DEAF|DEA9+DEA9/DEB0\DEB7;
                      JSR SubSprYPosNoGrvty                     ;;DEB2|DEAC+DEAC/DEB3\DEBA;
Return01DEAF:         RTS                                       ;;DEB5|DEAF+DEAF/DEB6\DEBD; Return 
                                                                ;;                        ;
                    + LDY.B #$09                                ;;DEB6|DEB0+DEB0/DEB7\DEBE;
CODE_01DEB2:          LDA.W !SpriteTableC2,Y                    ;;DEB8|DEB2+DEB2/DEB9\DEC0;
                      BEQ CODE_01DED7                           ;;DEBB|DEB5+DEB5/DEBC\DEC3;
                      LDA.W !SpriteYPosLow,Y                    ;;DEBD|DEB7+DEB7/DEBE\DEC5;
                      CLC                                       ;;DEC0|DEBA+DEBA/DEC1\DEC8;
                      ADC.B #$04                                ;;DEC1|DEBB+DEBB/DEC2\DEC9;
                      AND.B #$F8                                ;;DEC3|DEBD+DEBD/DEC4\DECB;
                      STA.W !SpriteYPosLow,Y                    ;;DEC5|DEBF+DEBF/DEC6\DECD;
                      LDA.W !SpriteXPosLow,Y                    ;;DEC8|DEC2+DEC2/DEC9\DED0;
                      CLC                                       ;;DECB|DEC5+DEC5/DECC\DED3;
                      ADC.B #$04                                ;;DECC|DEC6+DEC6/DECD\DED4;
                      AND.B #$F8                                ;;DECE|DEC8+DEC8/DECF\DED6;
                      STA.W !SpriteXPosLow,Y                    ;;DED0|DECA+DECA/DED1\DED8;
                      DEY                                       ;;DED3|DECD+DECD/DED4\DEDB;
                      BNE CODE_01DEB2                           ;;DED4|DECE+DECE/DED5\DEDC;
                      INC.W !BonusGameComplete                  ;;DED6|DED0+DED0/DED7\DEDE;
                      JSR CODE_01DFD9                           ;;DED9|DED3+DED3/DEDA\DEE1;
                      RTS                                       ;;DEDC|DED6+DED6/DEDD\DEE4; Return 
                                                                ;;                        ;
CODE_01DED7:          LDA.W !SpriteMisc157C,X                   ;;DEDD|DED7+DED7/DEDE\DEE5;
                      INC A                                     ;;DEE0|DEDA+DEDA/DEE1\DEE8;
                      AND.B #$03                                ;;DEE1|DEDB+DEDB/DEE2\DEE9;
                      TAY                                       ;;DEE3|DEDD+DEDD/DEE4\DEEB;
                      STA.W !SpriteMisc157C,X                   ;;DEE4|DEDE+DEDE/DEE5\DEEC;
                      BRA CODE_01DE9F                           ;;DEE7|DEE1+DEE1/DEE8\DEEF;
                                                                ;;                        ;
                                                                ;;                        ;
DATA_01DEE3:          db $58                                    ;;DEE9|DEE3+DEE3/DEEA\DEF1;
                                                                ;;                        ;
DATA_01DEE4:          db $59                                    ;;DEEA|DEE4+DEE4/DEEB\DEF2;
                                                                ;;                        ;
DATA_01DEE5:          db $83                                    ;;DEEB|DEE5+DEE5/DEEC\DEF3;
                                                                ;;                        ;
DATA_01DEE6:          db $83,$48,$49,$58,$59,$83,$83,$48        ;;DEEC|DEE6+DEE6/DEED\DEF4;
                      db $49,$34,$35,$83,$83,$24,$25,$34        ;;DEF4|DEEE+DEEE/DEF5\DEFC;
                      db $35,$83,$83,$24,$25,$36,$37,$83        ;;DEFC|DEF6+DEF6/DEFD\DF04;
                      db $83,$26,$27,$36,$37,$83,$83,$26        ;;DF04|DEFE+DEFE/DF05\DF0C;
                      db $27                                    ;;DF0C|DF06+DF06/DF0D\DF14;
                                                                ;;                        ;
DATA_01DF07:          db $04,$04,$04,$08,$08,$08,$0A,$0A        ;;DF0D|DF07+DF07/DF0E\DF15;
                      db $0A                                    ;;DF15|DF0F+DF0F/DF16\DF1D;
                                                                ;;                        ;
DATA_01DF10:          db $00,$03,$05,$07,$08,$08,$07,$05        ;;DF16|DF10+DF10/DF17\DF1E;
                      db $03                                    ;;DF1E|DF18+DF18/DF1F\DF26;
                                                                ;;                        ;
CODE_01DF19:          LDA.W !SpriteMisc1540,X                   ;;DF1F|DF19+DF19/DF20\DF27;
                      LSR A                                     ;;DF22|DF1C+DF1C/DF23\DF2A;
                      TAY                                       ;;DF23|DF1D+DF1D/DF24\DF2B;
                      LDA.W DATA_01DF10,Y                       ;;DF24|DF1E+DF1E/DF25\DF2C;
                      STA.B !_0                                 ;;DF27|DF21+DF21/DF28\DF2F;
                      LDY.W !SpriteOAMIndex,X                   ;;DF29|DF23+DF23/DF2A\DF31; Y = Index into sprite OAM 
                      LDA.B !SpriteXPosLow,X                    ;;DF2C|DF26+DF26/DF2D\DF34;
                      SEC                                       ;;DF2E|DF28+DF28/DF2F\DF36;
                      SBC.B !Layer1XPos                         ;;DF2F|DF29+DF29/DF30\DF37;
                      STA.W !OAMTileXPos+$110,Y                 ;;DF31|DF2B+DF2B/DF32\DF39;
                      STA.W !OAMTileXPos+$100,Y                 ;;DF34|DF2E+DF2E/DF35\DF3C;
                      STA.W !OAMTileXPos+$108,Y                 ;;DF37|DF31+DF31/DF38\DF3F;
                      CLC                                       ;;DF3A|DF34+DF34/DF3B\DF42;
                      ADC.B #$08                                ;;DF3B|DF35+DF35/DF3C\DF43;
                      STA.W !OAMTileXPos+$104,Y                 ;;DF3D|DF37+DF37/DF3E\DF45;
                      STA.W !OAMTileXPos+$10C,Y                 ;;DF40|DF3A+DF3A/DF41\DF48;
                      LDA.W !SpriteMisc154C,X                   ;;DF43|DF3D+DF3D/DF44\DF4B;
                      CLC                                       ;;DF46|DF40+DF40/DF47\DF4E;
                      BEQ CODE_01DF4E                           ;;DF47|DF41+DF41/DF48\DF4F;
                      LSR A                                     ;;DF49|DF43+DF43/DF4A\DF51;
                      LSR A                                     ;;DF4A|DF44+DF44/DF4B\DF52;
                      LSR A                                     ;;DF4B|DF45+DF45/DF4C\DF53;
                      LSR A                                     ;;DF4C|DF46+DF46/DF4D\DF54;
                      BRA +                                     ;;DF4D|DF47+DF47/DF4E\DF55;
                                                                ;;                        ;
                      CLC                                       ;;DF4F|DF49+DF49/DF50\DF57; \ Unreachable instructions 
                      ADC.W !CurSpriteProcess                   ;;DF50|DF4A+DF4A/DF51\DF58; / 
                    + LSR A                                     ;;DF53|DF4D+DF4D/DF54\DF5B;
CODE_01DF4E:          PHP                                       ;;DF54|DF4E+DF4E/DF55\DF5C;
                      LDA.B !SpriteYPosLow,X                    ;;DF55|DF4F+DF4F/DF56\DF5D;
                      SEC                                       ;;DF57|DF51+DF51/DF58\DF5F;
                      SBC.B !_0                                 ;;DF58|DF52+DF52/DF59\DF60;
                      SEC                                       ;;DF5A|DF54+DF54/DF5B\DF62;
                      SBC.B !Layer1YPos                         ;;DF5B|DF55+DF55/DF5C\DF63;
                      STA.W !OAMTileYPos+$110,Y                 ;;DF5D|DF57+DF57/DF5E\DF65;
                      PLP                                       ;;DF60|DF5A+DF5A/DF61\DF68;
                      BCS +                                     ;;DF61|DF5B+DF5B/DF62\DF69;
                      STA.W !OAMTileYPos+$100,Y                 ;;DF63|DF5D+DF5D/DF64\DF6B;
                      STA.W !OAMTileYPos+$104,Y                 ;;DF66|DF60+DF60/DF67\DF6E;
                      CLC                                       ;;DF69|DF63+DF63/DF6A\DF71;
                      ADC.B #$08                                ;;DF6A|DF64+DF64/DF6B\DF72;
                      STA.W !OAMTileYPos+$108,Y                 ;;DF6C|DF66+DF66/DF6D\DF74;
                      STA.W !OAMTileYPos+$10C,Y                 ;;DF6F|DF69+DF69/DF70\DF77;
                    + LDA.W !SpriteMisc1570,X                   ;;DF72|DF6C+DF6C/DF73\DF7A;
                      PHX                                       ;;DF75|DF6F+DF6F/DF76\DF7D;
                      PHA                                       ;;DF76|DF70+DF70/DF77\DF7E;
                      ASL A                                     ;;DF77|DF71+DF71/DF78\DF7F;
                      ASL A                                     ;;DF78|DF72+DF72/DF79\DF80;
                      TAX                                       ;;DF79|DF73+DF73/DF7A\DF81;
                      %LorW_X(LDA,DATA_01DEE3)                  ;;DF7A|DF74+DF74/DF7B\DF82;
                      STA.W !OAMTileNo+$100,Y                   ;;DF7E|DF77+DF77/DF7E\DF85;
                      %LorW_X(LDA,DATA_01DEE4)                  ;;DF81|DF7A+DF7A/DF81\DF88;
                      STA.W !OAMTileNo+$104,Y                   ;;DF85|DF7D+DF7D/DF84\DF8B;
                      %LorW_X(LDA,DATA_01DEE5)                  ;;DF88|DF80+DF80/DF87\DF8E;
                      STA.W !OAMTileNo+$108,Y                   ;;DF8C|DF83+DF83/DF8A\DF91;
                      %LorW_X(LDA,DATA_01DEE6)                  ;;DF8F|DF86+DF86/DF8D\DF94;
                      STA.W !OAMTileNo+$10C,Y                   ;;DF93|DF89+DF89/DF90\DF97;
                      LDA.B #$E4                                ;;DF96|DF8C+DF8C/DF93\DF9A;
                      STA.W !OAMTileNo+$110,Y                   ;;DF98|DF8E+DF8E/DF95\DF9C;
                      PLX                                       ;;DF9B|DF91+DF91/DF98\DF9F;
                      LDA.B !SpriteProperties                   ;;DF9C|DF92+DF92/DF99\DFA0;
                      %LorW_X(ORA,DATA_01DF07)                  ;;DF9E|DF94+DF94/DF9B\DFA2;
                      STA.W !OAMTileAttr+$100,Y                 ;;DFA2|DF97+DF97/DF9E\DFA5;
                      STA.W !OAMTileAttr+$104,Y                 ;;DFA5|DF9A+DF9A/DFA1\DFA8;
                      STA.W !OAMTileAttr+$108,Y                 ;;DFA8|DF9D+DF9D/DFA4\DFAB;
                      STA.W !OAMTileAttr+$10C,Y                 ;;DFAB|DFA0+DFA0/DFA7\DFAE;
                      ORA.B #$01                                ;;DFAE|DFA3+DFA3/DFAA\DFB1;
                      STA.W !OAMTileAttr+$110,Y                 ;;DFB0|DFA5+DFA5/DFAC\DFB3;
                      PLX                                       ;;DFB3|DFA8+DFA8/DFAF\DFB6;
                      TYA                                       ;;DFB4|DFA9+DFA9/DFB0\DFB7;
                      LSR A                                     ;;DFB5|DFAA+DFAA/DFB1\DFB8;
                      LSR A                                     ;;DFB6|DFAB+DFAB/DFB2\DFB9;
                      TAY                                       ;;DFB7|DFAC+DFAC/DFB3\DFBA;
                      LDA.B #$00                                ;;DFB8|DFAD+DFAD/DFB4\DFBB;
                      STA.W !OAMTileSize+$40,Y                  ;;DFBA|DFAF+DFAF/DFB6\DFBD;
                      STA.W !OAMTileSize+$41,Y                  ;;DFBD|DFB2+DFB2/DFB9\DFC0;
                      STA.W !OAMTileSize+$42,Y                  ;;DFC0|DFB5+DFB5/DFBC\DFC3;
                      STA.W !OAMTileSize+$43,Y                  ;;DFC3|DFB8+DFB8/DFBF\DFC6;
                      LDA.B #$02                                ;;DFC6|DFBB+DFBB/DFC2\DFC9;
                      STA.W !OAMTileSize+$44,Y                  ;;DFC8|DFBD+DFBD/DFC4\DFCB;
                      RTS                                       ;;DFCB|DFC0+DFC0/DFC7\DFCE; Return 
                                                                ;;                        ;
                                                                ;;                        ;
DATA_01DFC1:          db $00,$01,$02,$02,$03,$04,$04,$05        ;;DFCC|DFC1+DFC1/DFC8\DFCF;
                      db $06,$06,$07,$00,$00,$08,$04,$02        ;;DFD4|DFC9+DFC9/DFD0\DFD7;
                      db $08,$06,$03,$08,$07,$01,$08,$05        ;;DFDC|DFD1+DFD1/DFD8\DFDF;
                                                                ;;                        ;
CODE_01DFD9:          LDA.B #$07                                ;;DFE4|DFD9+DFD9/DFE0\DFE7;
                      STA.B !_0                                 ;;DFE6|DFDB+DFDB/DFE2\DFE9;
CODE_01DFDD:          LDX.B #$02                                ;;DFE8|DFDD+DFDD/DFE4\DFEB;
CODE_01DFDF:          STX.B !_1                                 ;;DFEA|DFDF+DFDF/DFE6\DFED;
                      LDA.B !_0                                 ;;DFEC|DFE1+DFE1/DFE8\DFEF;
                      ASL A                                     ;;DFEE|DFE3+DFE3/DFEA\DFF1;
                      ADC.B !_0                                 ;;DFEF|DFE4+DFE4/DFEB\DFF2;
                      CLC                                       ;;DFF1|DFE6+DFE6/DFED\DFF4;
                      ADC.B !_1                                 ;;DFF2|DFE7+DFE7/DFEE\DFF5;
                      TAY                                       ;;DFF4|DFE9+DFE9/DFF0\DFF7;
                      LDA.W DATA_01DFC1,Y                       ;;DFF5|DFEA+DFEA/DFF1\DFF8;
                      TAY                                       ;;DFF8|DFED+DFED/DFF4\DFFB;
                      LDA.W DATA_01DD9A,Y                       ;;DFF9|DFEE+DFEE/DFF5\DFFC;
                      STA.B !_2                                 ;;DFFC|DFF1+DFF1/DFF8\DFFF;
                      LDA.W DATA_01DD91,Y                       ;;DFFE|DFF3+DFF3/DFFA\E001;
                      STA.B !_3                                 ;;E001|DFF6+DFF6/DFFD\E004;
                      LDY.B #$09                                ;;E003|DFF8+DFF8/DFFF\E006;
CODE_01DFFA:          LDA.W !SpriteYPosLow,Y                    ;;E005|DFFA+DFFA/E001\E008;
                      CMP.B !_2                                 ;;E008|DFFD+DFFD/E004\E00B;
                      BNE CODE_01E008                           ;;E00A|DFFF+DFFF/E006\E00D;
                      LDA.W !SpriteXPosLow,Y                    ;;E00C|E001+E001/E008\E00F;
                      CMP.B !_3                                 ;;E00F|E004+E004/E00B\E012;
                      BEQ CODE_01E00D                           ;;E011|E006+E006/E00D\E014;
CODE_01E008:          DEY                                       ;;E013|E008+E008/E00F\E016;
                      CPY.B #$01                                ;;E014|E009+E009/E010\E017;
                      BNE CODE_01DFFA                           ;;E016|E00B+E00B/E012\E019;
CODE_01E00D:          LDA.W !SpriteMisc1570,Y                   ;;E018|E00D+E00D/E014\E01B;
                      STA.B !_4,X                               ;;E01B|E010+E010/E017\E01E;
                      STY.B !_7,X                               ;;E01D|E012+E012/E019\E020;
                      DEX                                       ;;E01F|E014+E014/E01B\E022;
                      BPL CODE_01DFDF                           ;;E020|E015+E015/E01C\E023;
                      LDA.B !_4                                 ;;E022|E017+E017/E01E\E025;
                      CMP.B !_5                                 ;;E024|E019+E019/E020\E027;
                      BNE +                                     ;;E026|E01B+E01B/E022\E029;
                      CMP.B !_6                                 ;;E028|E01D+E01D/E024\E02B;
                      BNE +                                     ;;E02A|E01F+E01F/E026\E02D;
                      INC.W !BonusGame1UpCount                  ;;E02C|E021+E021/E028\E02F;
                      LDA.B #$70                                ;;E02F|E024+E024/E02B\E032;
                      LDY.B !_7                                 ;;E031|E026+E026/E02D\E034;
                      STA.W !SpriteMisc154C,Y                   ;;E033|E028+E028/E02F\E036;
                      LDY.B !_8                                 ;;E036|E02B+E02B/E032\E039;
                      STA.W !SpriteMisc154C,Y                   ;;E038|E02D+E02D/E034\E03B;
                      LDY.B !_9                                 ;;E03B|E030+E030/E037\E03E;
                      STA.W !SpriteMisc154C,Y                   ;;E03D|E032+E032/E039\E040;
                    + DEC.B !_0                                 ;;E040|E035+E035/E03C\E043;
                      BPL CODE_01DFDD                           ;;E042|E037+E037/E03E\E045;
                      LDX.W !CurSpriteProcess                   ;;E044|E039+E039/E040\E047; X = Sprite index 
                      LDY.B #!SFX_CORRECT                       ;;E047|E03C+E03C/E043\E04A;
                      LDA.W !BonusGame1UpCount                  ;;E049|E03E+E03E/E045\E04C;
                      STA.W !BonusOneUpsRemain                  ;;E04C|E041+E041/E048\E04F;
                      BNE +                                     ;;E04F|E044+E044/E04B\E052;
                      LDA.B #$58                                ;;E051|E046+E046/E04D\E054;
                      STA.W !BonusFinishTimer                   ;;E053|E048+E048/E04F\E056;
                      INY                                       ;;E056|E04B+E04B/E052\E059;
                    + STY.W !SPCIO3                             ;;E057|E04C+E04C/E053\E05A; / Play sound effect 
                      RTS                                       ;;E05A|E04F+E04F/E056\E05D; Return 
                                                                ;;                        ;
InitFireball:         LDA.B !SpriteYPosLow,X                    ;;E05B|E050+E050/E057\E05E;
                      STA.W !SpriteMisc1528,X                   ;;E05D|E052+E052/E059\E060;
                      LDA.W !SpriteXPosHigh,X                   ;;E060|E055+E055/E05C\E063;
                      STA.W !SpriteMisc151C,X                   ;;E063|E058+E058/E05F\E066;
                    - LDA.B !SpriteYPosLow,X                    ;;E066|E05B+E05B/E062\E069;
                      CLC                                       ;;E068|E05D+E05D/E064\E06B;
                      ADC.B #$10                                ;;E069|E05E+E05E/E065\E06C;
                      STA.B !SpriteYPosLow,X                    ;;E06B|E060+E060/E067\E06E;
                      LDA.W !SpriteXPosHigh,X                   ;;E06D|E062+E062/E069\E070;
                      ADC.B #$00                                ;;E070|E065+E065/E06C\E073;
                      STA.W !SpriteXPosHigh,X                   ;;E072|E067+E067/E06E\E075;
                      JSR CODE_019140                           ;;E075|E06A+E06A/E071\E078;
                      LDA.W !SpriteInLiquid,X                   ;;E078|E06D+E06D/E074\E07B;
                      BEQ -                                     ;;E07B|E070+E070/E077\E07E;
                      JSR CODE_01E0E2                           ;;E07D|E072+E072/E079\E080;
                      LDA.B #$20                                ;;E080|E075+E075/E07C\E083;
                      STA.W !SpriteMisc1540,X                   ;;E082|E077+E077/E07E\E085;
                      RTS                                       ;;E085|E07A+E07A/E081\E088; Return 
                                                                ;;                        ;
                                                                ;;                        ;
DATA_01E07B:          db $F0,$DC,$D0,$C8,$C0,$B8,$B2,$AC        ;;E086|E07B+E07B/E082\E089;
                      db $A6,$A0,$9A,$96,$92,$8C,$88,$84        ;;E08E|E083+E083/E08A\E091;
                      db $80,$04,$08,$0C,$10,$14                ;;E096|E08B+E08B/E092\E099;
                                                                ;;                        ;
DATA_01E091:          db $70,$20                                ;;E09C|E091+E091/E098\E09F;
                                                                ;;                        ;
Fireballs:            STZ.W !SpriteOnYoshiTongue,X              ;;E09E|E093+E093/E09A\E0A1;
                      LDA.W !SpriteMisc1540,X                   ;;E0A1|E096+E096/E09D\E0A4;
                      BEQ CODE_01E0A7                           ;;E0A4|E099+E099/E0A0\E0A7;
                      STA.W !SpriteOnYoshiTongue,X              ;;E0A6|E09B+E09B/E0A2\E0A9;
                      DEC A                                     ;;E0A9|E09E+E09E/E0A5\E0AC;
                      BNE +                                     ;;E0AA|E09F+E09F/E0A6\E0AD;
                      LDA.B #!SFX_PODOBOO                       ;;E0AC|E0A1+E0A1/E0A8\E0AF; \ Play sound effect 
                      STA.W !SPCIO3                             ;;E0AE|E0A3+E0A3/E0AA\E0B1; / 
                    + RTS                                       ;;E0B1|E0A6+E0A6/E0AD\E0B4; Return 
                                                                ;;                        ;
CODE_01E0A7:          LDA.B !SpriteLock                         ;;E0B2|E0A7+E0A7/E0AE\E0B5;
                      BEQ +                                     ;;E0B4|E0A9+E0A9/E0B0\E0B7;
                      JMP CODE_01E12D                           ;;E0B6|E0AB+E0AB/E0B2\E0B9;
                                                                ;;                        ;
                    + JSR MarioSprInteractRt                    ;;E0B9|E0AE+E0AE/E0B5\E0BC;
                      JSR SetAnimationFrame                     ;;E0BC|E0B1+E0B1/E0B8\E0BF;
                      JSR SetAnimationFrame                     ;;E0BF|E0B4+E0B4/E0BB\E0C2;
                      LDA.W !SpriteOBJAttribute,X               ;;E0C2|E0B7+E0B7/E0BE\E0C5;
                      AND.B #$7F                                ;;E0C5|E0BA+E0BA/E0C1\E0C8;
                      LDY.B !SpriteYSpeed,X                     ;;E0C7|E0BC+E0BC/E0C3\E0CA;
                      BMI +                                     ;;E0C9|E0BE+E0BE/E0C5\E0CC;
                      INC.W !SpriteMisc1602,X                   ;;E0CB|E0C0+E0C0/E0C7\E0CE;
                      INC.W !SpriteMisc1602,X                   ;;E0CE|E0C3+E0C3/E0CA\E0D1;
                      ORA.B #$80                                ;;E0D1|E0C6+E0C6/E0CD\E0D4;
                    + STA.W !SpriteOBJAttribute,X               ;;E0D3|E0C8+E0C8/E0CF\E0D6;
                      JSR CODE_019140                           ;;E0D6|E0CB+E0CB/E0D2\E0D9;
                      LDA.W !SpriteInLiquid,X                   ;;E0D9|E0CE+E0CE/E0D5\E0DC;
                      BEQ CODE_01E106                           ;;E0DC|E0D1+E0D1/E0D8\E0DF;
                      LDA.B !SpriteYSpeed,X                     ;;E0DE|E0D3+E0D3/E0DA\E0E1;
                      BMI CODE_01E106                           ;;E0E0|E0D5+E0D5/E0DC\E0E3;
                      JSL GetRand                               ;;E0E2|E0D7+E0D7/E0DE\E0E5;
                      AND.B #$3F                                ;;E0E6|E0DB+E0DB/E0E2\E0E9;
                      ADC.B #$60                                ;;E0E8|E0DD+E0DD/E0E4\E0EB;
                      STA.W !SpriteMisc1540,X                   ;;E0EA|E0DF+E0DF/E0E6\E0ED;
CODE_01E0E2:          LDA.B !SpriteYPosLow,X                    ;;E0ED|E0E2+E0E2/E0E9\E0F0;
                      SEC                                       ;;E0EF|E0E4+E0E4/E0EB\E0F2;
                      SBC.W !SpriteMisc1528,X                   ;;E0F0|E0E5+E0E5/E0EC\E0F3;
                      STA.B !_0                                 ;;E0F3|E0E8+E0E8/E0EF\E0F6;
                      LDA.W !SpriteXPosHigh,X                   ;;E0F5|E0EA+E0EA/E0F1\E0F8;
                      SBC.W !SpriteMisc151C,X                   ;;E0F8|E0ED+E0ED/E0F4\E0FB;
                      LSR A                                     ;;E0FB|E0F0+E0F0/E0F7\E0FE;
                      ROR.B !_0                                 ;;E0FC|E0F1+E0F1/E0F8\E0FF;
                      LDA.B !_0                                 ;;E0FE|E0F3+E0F3/E0FA\E101;
                      LSR A                                     ;;E100|E0F5+E0F5/E0FC\E103;
                      LSR A                                     ;;E101|E0F6+E0F6/E0FD\E104;
                      LSR A                                     ;;E102|E0F7+E0F7/E0FE\E105;
                      TAY                                       ;;E103|E0F8+E0F8/E0FF\E106;
                      LDA.W DATA_01E07B,Y                       ;;E104|E0F9+E0F9/E100\E107;
                      BMI +                                     ;;E107|E0FC+E0FC/E103\E10A;
                      STA.W !SpriteMisc1564,X                   ;;E109|E0FE+E0FE/E105\E10C;
                      LDA.B #$80                                ;;E10C|E101+E101/E108\E10F;
                    + STA.B !SpriteYSpeed,X                     ;;E10E|E103+E103/E10A\E111;
                      RTS                                       ;;E110|E105+E105/E10C\E113; Return 
                                                                ;;                        ;
CODE_01E106:          JSR SubSprYPosNoGrvty                     ;;E111|E106+E106/E10D\E114;
                      LDA.B !EffFrame                           ;;E114|E109+E109/E110\E117;
                      AND.B #$07                                ;;E116|E10B+E10B/E112\E119;
                      ORA.B !SpriteTableC2,X                    ;;E118|E10D+E10D/E114\E11B;
                      BNE +                                     ;;E11A|E10F+E10F/E116\E11D;
                      JSL CODE_0285DF                           ;;E11C|E111+E111/E118\E11F;
                    + LDA.W !SpriteMisc1564,X                   ;;E120|E115+E115/E11C\E123;
                      BNE CODE_01E12A                           ;;E123|E118+E118/E11F\E126;
                      LDA.B !SpriteYSpeed,X                     ;;E125|E11A+E11A/E121\E128;
                      BMI CODE_01E125                           ;;E127|E11C+E11C/E123\E12A;
                      LDY.B !SpriteTableC2,X                    ;;E129|E11E+E11E/E125\E12C;
                      CMP.W DATA_01E091,Y                       ;;E12B|E120+E120/E127\E12E;
                      BCS CODE_01E12A                           ;;E12E|E123+E123/E12A\E131;
CODE_01E125:          CLC                                       ;;E130|E125+E125/E12C\E133;
                      ADC.B #$02                                ;;E131|E126+E126/E12D\E134;
                      STA.B !SpriteYSpeed,X                     ;;E133|E128+E128/E12F\E136;
CODE_01E12A:          JSR SubOffscreen0Bnk1                     ;;E135|E12A+E12A/E131\E138;
CODE_01E12D:          LDA.B !SpriteTableC2,X                    ;;E138|E12D+E12D/E134\E13B;
                      BEQ CODE_01E198                           ;;E13A|E12F+E12F/E136\E13D;
                      LDY.B !SpriteLock                         ;;E13C|E131+E131/E138\E13F;
                      BNE CODE_01E164                           ;;E13E|E133+E133/E13A\E141;
                      LDA.W !SpriteBlockedDirs,X                ;;E140|E135+E135/E13C\E143; \ Branch if not on ground 
                      AND.B #$04                                ;;E143|E138+E138/E13F\E146;  | 
                      BEQ CODE_01E151                           ;;E145|E13A+E13A/E141\E148; / 
                      STZ.B !SpriteYSpeed,X                     ;;E147|E13C+E13C/E143\E14A; Sprite Y Speed = 0 
                      LDA.W !SpriteMisc1558,X                   ;;E149|E13E+E13E/E145\E14C;
                      BEQ CODE_01E14A                           ;;E14C|E141+E141/E148\E14F;
                      CMP.B #$01                                ;;E14E|E143+E143/E14A\E151;
                      BNE +                                     ;;E150|E145+E145/E14C\E153;
                      JMP CODE_019ACB                           ;;E152|E147+E147/E14E\E155;
                                                                ;;                        ;
CODE_01E14A:          LDA.B #$80                                ;;E155|E14A+E14A/E151\E158;
                      STA.W !SpriteMisc1558,X                   ;;E157|E14C+E14C/E153\E15A;
                    + BRA CODE_01E164                           ;;E15A|E14F+E14F/E156\E15D;
                                                                ;;                        ;
CODE_01E151:          TXA                                       ;;E15C|E151+E151/E158\E15F;
                      ASL A                                     ;;E15D|E152+E152/E159\E160;
                      ASL A                                     ;;E15E|E153+E153/E15A\E161;
                      CLC                                       ;;E15F|E154+E154/E15B\E162;
                      ADC.B !TrueFrame                          ;;E160|E155+E155/E15C\E163;
                      LDY.B #$F0                                ;;E162|E157+E157/E15E\E165;
                      AND.B #$04                                ;;E164|E159+E159/E160\E167;
                      BEQ +                                     ;;E166|E15B+E15B/E162\E169;
                      LDY.B #$10                                ;;E168|E15D+E15D/E164\E16B;
                    + STY.B !SpriteXSpeed,X                     ;;E16A|E15F+E15F/E166\E16D;
                      JSR SubSprXPosNoGrvty                     ;;E16C|E161+E161/E168\E16F;
CODE_01E164:          LDA.B !SpriteYPosLow,X                    ;;E16F|E164+E164/E16B\E172;
                      CMP.B #$F0                                ;;E171|E166+E166/E16D\E174;
                      BCC +                                     ;;E173|E168+E168/E16F\E176;
                      STZ.W !SpriteStatus,X                     ;;E175|E16A+E16A/E171\E178;
                    + JSR SubSprGfx2Entry1                      ;;E178|E16D+E16D/E174\E17B;
                      LDY.W !SpriteOAMIndex,X                   ;;E17B|E170+E170/E177\E17E; Y = Index into sprite OAM 
                      PHX                                       ;;E17E|E173+E173/E17A\E181;
                      LDA.B !EffFrame                           ;;E17F|E174+E174/E17B\E182;
                      AND.B #$0C                                ;;E181|E176+E176/E17D\E184;
                      LSR A                                     ;;E183|E178+E178/E17F\E186;
                      ADC.W !CurSpriteProcess                   ;;E184|E179+E179/E180\E187;
                      LSR A                                     ;;E187|E17C+E17C/E183\E18A;
                      AND.B #$03                                ;;E188|E17D+E17D/E184\E18B;
                      TAX                                       ;;E18A|E17F+E17F/E186\E18D;
                      LDA.W BowserFlameTiles,X                  ;;E18B|E180+E180/E187\E18E;
                      STA.W !OAMTileNo+$100,Y                   ;;E18E|E183+E183/E18A\E191;
                      LDA.W DATA_01E194,X                       ;;E191|E186+E186/E18D\E194;
                      ORA.B !SpriteProperties                   ;;E194|E189+E189/E190\E197;
                      STA.W !OAMTileAttr+$100,Y                 ;;E196|E18B+E18B/E192\E199;
                      PLX                                       ;;E199|E18E+E18E/E195\E19C;
                      RTS                                       ;;E19A|E18F+E18F/E196\E19D; Return 
                                                                ;;                        ;
                                                                ;;                        ;
BowserFlameTiles:     db $2A,$2C,$2A,$2C                        ;;E19B|E190+E190/E197\E19E;
                                                                ;;                        ;
DATA_01E194:          db $05,$05,$45,$45                        ;;E19F|E194+E194/E19B\E1A2;
                                                                ;;                        ;
CODE_01E198:          LDA.B #$01                                ;;E1A3|E198+E198/E19F\E1A6;
                      JSR SubSprGfx0Entry0                      ;;E1A5|E19A+E19A/E1A1\E1A8;
                      REP #$20                                  ;;E1A8|E19D+E19D/E1A4\E1AB; Accum (16 bit) 
                      LDA.W #$0008                              ;;E1AA|E19F+E19F/E1A6\E1AD;
                      ASL A                                     ;;E1AD|E1A2+E1A2/E1A9\E1B0;
                      ASL A                                     ;;E1AE|E1A3+E1A3/E1AA\E1B1;
                      ASL A                                     ;;E1AF|E1A4+E1A4/E1AB\E1B2;
                      ASL A                                     ;;E1B0|E1A5+E1A5/E1AC\E1B3;
                      ASL A                                     ;;E1B1|E1A6+E1A6/E1AD\E1B4;
                      CLC                                       ;;E1B2|E1A7+E1A7/E1AE\E1B5;
                      ADC.W #$8500                              ;;E1B3|E1A8+E1A8/E1AF\E1B6;
                      STA.W !DynGfxTilePtr+6                    ;;E1B6|E1AB+E1AB/E1B2\E1B9;
                      CLC                                       ;;E1B9|E1AE+E1AE/E1B5\E1BC;
                      ADC.W #$0200                              ;;E1BA|E1AF+E1AF/E1B6\E1BD;
                      STA.W !DynGfxTilePtr+$10                  ;;E1BD|E1B2+E1B2/E1B9\E1C0;
                      SEP #$20                                  ;;E1C0|E1B5+E1B5/E1BC\E1C3; Accum (8 bit) 
                      RTS                                       ;;E1C2|E1B7+E1B7/E1BE\E1C5; Return 
                                                                ;;                        ;
InitKeyHole:          LDA.B !SpriteXPosLow,X                    ;;E1C3|E1B8+E1B8/E1BF\E1C6;
                      CLC                                       ;;E1C5|E1BA+E1BA/E1C1\E1C8;
                      ADC.B #$08                                ;;E1C6|E1BB+E1BB/E1C2\E1C9;
                      STA.B !SpriteXPosLow,X                    ;;E1C8|E1BD+E1BD/E1C4\E1CB;
                      LDA.W !SpriteYPosHigh,X                   ;;E1CA|E1BF+E1BF/E1C6\E1CD;
                      ADC.B #$00                                ;;E1CD|E1C2+E1C2/E1C9\E1D0;
                      STA.W !SpriteYPosHigh,X                   ;;E1CF|E1C4+E1C4/E1CB\E1D2;
                      RTS                                       ;;E1D2|E1C7+E1C7/E1CE\E1D5; Return 
                                                                ;;                        ;
Keyhole:              LDY.B #$0B                                ;;E1D3|E1C8+E1C8/E1CF\E1D6;
CODE_01E1CA:          LDA.W !SpriteStatus,Y                     ;;E1D5|E1CA+E1CA/E1D1\E1D8;
                      CMP.B #$08                                ;;E1D8|E1CD+E1CD/E1D4\E1DB;
                      BCC CODE_01E1D8                           ;;E1DA|E1CF+E1CF/E1D6\E1DD;
                      LDA.W !SpriteNumber,Y                     ;;E1DC|E1D1+E1D1/E1D8\E1DF;
                      CMP.B #$80                                ;;E1DF|E1D4+E1D4/E1DB\E1E2;
                      BEQ CODE_01E1DB                           ;;E1E1|E1D6+E1D6/E1DD\E1E4;
CODE_01E1D8:          DEY                                       ;;E1E3|E1D8+E1D8/E1DF\E1E6;
                      BPL CODE_01E1CA                           ;;E1E4|E1D9+E1D9/E1E0\E1E7;
CODE_01E1DB:          LDA.W !PlayerRidingYoshi                  ;;E1E6|E1DB+E1DB/E1E2\E1E9;
                      BEQ CODE_01E1E5                           ;;E1E9|E1DE+E1DE/E1E5\E1EC;
                      LDA.W !YoshiHasKey                        ;;E1EB|E1E0+E1E0/E1E7\E1EE;
                      BNE CODE_01E1ED                           ;;E1EE|E1E3+E1E3/E1EA\E1F1;
CODE_01E1E5:          TYA                                       ;;E1F0|E1E5+E1E5/E1EC\E1F3;
                      STA.W !SpriteMisc151C,X                   ;;E1F1|E1E6+E1E6/E1ED\E1F4;
                      BMI CODE_01E23A                           ;;E1F4|E1E9+E1E9/E1F0\E1F7;
                      BRA CODE_01E1F3                           ;;E1F6|E1EB+E1EB/E1F2\E1F9;
                                                                ;;                        ;
CODE_01E1ED:          JSL GetMarioClipping                      ;;E1F8|E1ED+E1ED/E1F4\E1FB;
                      BRA CODE_01E201                           ;;E1FC|E1F1+E1F1/E1F8\E1FF;
                                                                ;;                        ;
CODE_01E1F3:          LDA.W !SpriteStatus,Y                     ;;E1FE|E1F3+E1F3/E1FA\E201;
                      CMP.B #$0B                                ;;E201|E1F6+E1F6/E1FD\E204;
                      BNE CODE_01E23A                           ;;E203|E1F8+E1F8/E1FF\E206;
                      PHX                                       ;;E205|E1FA+E1FA/E201\E208;
                      TYX                                       ;;E206|E1FB+E1FB/E202\E209;
                      JSL GetSpriteClippingB                    ;;E207|E1FC+E1FC/E203\E20A;
                      PLX                                       ;;E20B|E200+E200/E207\E20E;
CODE_01E201:          JSL GetSpriteClippingA                    ;;E20C|E201+E201/E208\E20F;
                      JSL CheckForContact                       ;;E210|E205+E205/E20C\E213;
                      BCC CODE_01E23A                           ;;E214|E209+E209/E210\E217;
                      LDA.W !SpriteMisc154C,X                   ;;E216|E20B+E20B/E212\E219;
                      BNE CODE_01E23A                           ;;E219|E20E+E20E/E215\E21C;
                      LDA.B #$30                                ;;E21B|E210+E210/E217\E21E;
                      STA.W !KeyholeTimer                       ;;E21D|E212+E212/E219\E220;
                      LDA.B #!BGM_KEYHOLE2                      ;;E220|E215+E215/E21C\E223;
                      STA.W !SPCIO2                             ;;E222|E217+E217/E21E\E225; / Change music 
                      INC.W !PlayerIsFrozen                     ;;E225|E21A+E21A/E221\E228;
                      INC.B !SpriteLock                         ;;E228|E21D+E21D/E224\E22B;
                      LDA.W !SpriteYPosHigh,X                   ;;E22A|E21F+E21F/E226\E22D;
                      STA.W !KeyholeXPos+1                      ;;E22D|E222+E222/E229\E230;
                      LDA.B !SpriteXPosLow,X                    ;;E230|E225+E225/E22C\E233;
                      STA.W !KeyholeXPos                        ;;E232|E227+E227/E22E\E235;
                      LDA.W !SpriteXPosHigh,X                   ;;E235|E22A+E22A/E231\E238;
                      STA.W !KeyholeYPos+1                      ;;E238|E22D+E22D/E234\E23B;
                      LDA.B !SpriteYPosLow,X                    ;;E23B|E230+E230/E237\E23E;
                      STA.W !KeyholeYPos                        ;;E23D|E232+E232/E239\E240;
                      LDA.B #$30                                ;;E240|E235+E235/E23C\E243;
                      STA.W !SpriteMisc154C,X                   ;;E242|E237+E237/E23E\E245;
CODE_01E23A:          JSR GetDrawInfoBnk1                       ;;E245|E23A+E23A/E241\E248;
                      LDA.B !_0                                 ;;E248|E23D+E23D/E244\E24B;
                      STA.W !OAMTileXPos+$100,Y                 ;;E24A|E23F+E23F/E246\E24D;
                      STA.W !OAMTileXPos+$104,Y                 ;;E24D|E242+E242/E249\E250;
                      LDA.B !_1                                 ;;E250|E245+E245/E24C\E253;
                      STA.W !OAMTileYPos+$100,Y                 ;;E252|E247+E247/E24E\E255;
                      CLC                                       ;;E255|E24A+E24A/E251\E258;
                      ADC.B #$08                                ;;E256|E24B+E24B/E252\E259;
                      STA.W !OAMTileYPos+$104,Y                 ;;E258|E24D+E24D/E254\E25B;
                      LDA.B #$EB                                ;;E25B|E250+E250/E257\E25E;
                      STA.W !OAMTileNo+$100,Y                   ;;E25D|E252+E252/E259\E260;
                      LDA.B #$FB                                ;;E260|E255+E255/E25C\E263;
                      STA.W !OAMTileNo+$104,Y                   ;;E262|E257+E257/E25E\E265;
                      LDA.B #$30                                ;;E265|E25A+E25A/E261\E268;
                      STA.W !OAMTileAttr+$100,Y                 ;;E267|E25C+E25C/E263\E26A;
                      STA.W !OAMTileAttr+$104,Y                 ;;E26A|E25F+E25F/E266\E26D;
                      LDY.B #$00                                ;;E26D|E262+E262/E269\E270;
                      LDA.B #$01                                ;;E26F|E264+E264/E26B\E272;
                      JSR FinishOAMWriteRt                      ;;E271|E266+E266/E26D\E274;
                      RTS                                       ;;E274|E269+E269/E270\E277; Return 
                                                                ;;                        ;
CODE_01E26A:          LDA.B !TrueFrame                          ;;E275|E26A+E26A/E271\E278;
                      AND.B #$3F                                ;;E277|E26C+E26C/E273\E27A;
                      BNE +                                     ;;E279|E26E+E26E/E275\E27C;
                      LDA.W !BonusGame1UpCount                  ;;E27B|E270+E270/E277\E27E;
                      BEQ +                                     ;;E27E|E273+E273/E27A\E281;
                      DEC.W !BonusGame1UpCount                  ;;E280|E275+E275/E27C\E283;
                      JSR CODE_01E281                           ;;E283|E278+E278/E27F\E286;
                    + LDA.B #$01                                ;;E286|E27B+E27B/E282\E289;
                      STA.W !ActivateClusterSprite              ;;E288|E27D+E27D/E284\E28B;
                      RTS                                       ;;E28B|E280+E280/E287\E28E; Return 
                                                                ;;                        ;
CODE_01E281:          LDY.B #$07                                ;;E28C|E281+E281/E288\E28F;
CODE_01E283:          LDA.W !ClusterSpriteNumber,Y              ;;E28E|E283+E283/E28A\E291;
                      BEQ CODE_01E28C                           ;;E291|E286+E286/E28D\E294;
                      DEY                                       ;;E293|E288+E288/E28F\E296;
                      BPL CODE_01E283                           ;;E294|E289+E289/E290\E297;
                      RTS                                       ;;E296|E28B+E28B/E292\E299; Return 
                                                                ;;                        ;
CODE_01E28C:          LDA.B #$01                                ;;E297|E28C+E28C/E293\E29A;
                      STA.W !ClusterSpriteNumber,Y              ;;E299|E28E+E28E/E295\E29C;
                      LDA.B #$00                                ;;E29C|E291+E291/E298\E29F;
                      STA.W !ClusterSpriteYPosLow,Y             ;;E29E|E293+E293/E29A\E2A1;
                      LDA.B #$01                                ;;E2A1|E296+E296/E29D\E2A4;
                      STA.W !ClusterSpriteYPosHigh,Y            ;;E2A3|E298+E298/E29F\E2A6;
                      LDA.B #$18                                ;;E2A6|E29B+E29B/E2A2\E2A9;
                      STA.W !ClusterSpriteXPosLow,Y             ;;E2A8|E29D+E29D/E2A4\E2AB;
                      LDA.B #$00                                ;;E2AB|E2A0+E2A0/E2A7\E2AE;
                      STA.W !ClusterSpriteXPosHigh,Y            ;;E2AD|E2A2+E2A2/E2A9\E2B0;
                      LDA.B #$01                                ;;E2B0|E2A5+E2A5/E2AC\E2B3;
                      STA.W !ClusterSpriteMisc1E66,Y            ;;E2B2|E2A7+E2A7/E2AE\E2B5;
                      LDA.B #$10                                ;;E2B5|E2AA+E2AA/E2B1\E2B8;
                      STA.W !ClusterSpriteMisc1E52,Y            ;;E2B7|E2AC+E2AC/E2B3\E2BA;
                      RTS                                       ;;E2BA|E2AF+E2AF/E2B6\E2BD; Return 
                                                                ;;                        ;
                      %insert_empty($0D,$18,$18,$11,$0A)        ;;E2BB|E2B0+E2B0/E2B7\E2BE;
                                                                ;;                        ;
                      db $13,$14,$15,$16,$17,$18,$19            ;;E2C8|E2C8+E2C8/E2C8\E2C8;
                                                                ;;                        ;
MontyMole:            JSR SubOffscreen0Bnk1                     ;;E2CF|E2CF+E2CF/E2CF\E2CF;
                      LDA.B !SpriteTableC2,X                    ;;E2D2|E2D2+E2D2/E2D2\E2D2;
                      JSL ExecutePtr                            ;;E2D4|E2D4+E2D4/E2D4\E2D4;
                                                                ;;                        ;
                      dw CODE_01E2E0                            ;;E2D8|E2D8+E2D8/E2D8\E2D8;
                      dw CODE_01E309                            ;;E2DA|E2DA+E2DA/E2DA\E2DA;
                      dw CODE_01E37F                            ;;E2DC|E2DC+E2DC/E2DC\E2DC;
                      dw CODE_01E393                            ;;E2DE|E2DE+E2DE/E2DE\E2DE;
                                                                ;;                        ;
CODE_01E2E0:          JSR SubHorizPos                           ;;E2E0|E2E0+E2E0/E2E0\E2E0;
                      LDA.B !_F                                 ;;E2E3|E2E3+E2E3/E2E3\E2E3;
                      CLC                                       ;;E2E5|E2E5+E2E5/E2E5\E2E5;
                      ADC.B #$60                                ;;E2E6|E2E6+E2E6/E2E6\E2E6;
                      CMP.B #$C0                                ;;E2E8|E2E8+E2E8/E2E8\E2E8;
                      BCS CODE_01E305                           ;;E2EA|E2EA+E2EA/E2EA\E2EA;
                      LDA.W !SpriteOffscreenX,X                 ;;E2EC|E2EC+E2EC/E2EC\E2EC;
                      BNE CODE_01E305                           ;;E2EF|E2EF+E2EF/E2EF\E2EF;
                      INC.B !SpriteTableC2,X                    ;;E2F1|E2F1+E2F1/E2F1\E2F1;
                      LDY.W !PlayerTurnLvl                      ;;E2F3|E2F3+E2F3/E2F3\E2F3;
                      LDA.W !OWPlayerSubmap,Y                   ;;E2F6|E2F6+E2F6/E2F6\E2F6;
                      TAY                                       ;;E2F9|E2F9+E2F9/E2F9\E2F9;
                      LDA.B #$68                                ;;E2FA|E2FA+E2FA/E2FA\E2FA;
                      CPY.B #$01                                ;;E2FC|E2FC+E2FC/E2FC\E2FC;
                      BEQ +                                     ;;E2FE|E2FE+E2FE/E2FE\E2FE;
                      LDA.B #$20                                ;;E300|E300+E300/E300\E300;
                    + STA.W !SpriteMisc1540,X                   ;;E302|E302+E302/E302\E302;
CODE_01E305:          JSR GetDrawInfoBnk1                       ;;E305|E305+E305/E305\E305;
                      RTS                                       ;;E308|E308+E308/E308\E308; Return 
                                                                ;;                        ;
CODE_01E309:          LDA.W !SpriteMisc1540,X                   ;;E309|E309+E309/E309\E309;
                      ORA.W !SpriteOnYoshiTongue,X              ;;E30C|E30C+E30C/E30C\E30C;
                      BNE CODE_01E343                           ;;E30F|E30F+E30F/E30F\E30F;
                      INC.B !SpriteTableC2,X                    ;;E311|E311+E311/E311\E311;
                      LDA.B #$B0                                ;;E313|E313+E313/E313\E313;
                      STA.B !SpriteYSpeed,X                     ;;E315|E315+E315/E315\E315;
                      JSR IsSprOffScreen                        ;;E317|E317+E317/E317\E317;
                      BNE +                                     ;;E31A|E31A+E31A/E31A\E31A;
                      TAY                                       ;;E31C|E31C+E31C/E31C\E31C;
                      JSR CODE_0199E1                           ;;E31D|E31D+E31D/E31D\E31D;
                    + JSR FaceMario                             ;;E320|E320+E320/E320\E320;
                      LDA.B !SpriteNumber,X                     ;;E323|E323+E323/E323\E323;
                      CMP.B #$4E                                ;;E325|E325+E325/E325\E325;
                      BNE CODE_01E343                           ;;E327|E327+E327/E327\E327;
                      LDA.B !SpriteXPosLow,X                    ;;E329|E329+E329/E329\E329; \ $9A = Sprite X position 
                      STA.B !TouchBlockXPos                     ;;E32B|E32B+E32B/E32B\E32B;  | for block creation 
                      LDA.W !SpriteYPosHigh,X                   ;;E32D|E32D+E32D/E32D\E32D;  | 
                      STA.B !TouchBlockXPos+1                   ;;E330|E330+E330/E330\E330; / 
                      LDA.B !SpriteYPosLow,X                    ;;E332|E332+E332/E332\E332; \ $98 = Sprite Y position 
                      STA.B !TouchBlockYPos                     ;;E334|E334+E334/E334\E334;  | for block creation 
                      LDA.W !SpriteXPosHigh,X                   ;;E336|E336+E336/E336\E336;  | 
                      STA.B !TouchBlockYPos+1                   ;;E339|E339+E339/E339\E339; / 
                      LDA.B #$08                                ;;E33B|E33B+E33B/E33B\E33B; \ Block to generate = Mole hole 
                      STA.B !Map16TileGenerate                  ;;E33D|E33D+E33D/E33D\E33D; / 
                      JSL GenerateTile                          ;;E33F|E33F+E33F/E33F\E33F;
CODE_01E343:          LDA.B !SpriteNumber,X                     ;;E343|E343+E343/E343\E343;
                      CMP.B #$4D                                ;;E345|E345+E345/E345\E345;
                      BNE +                                     ;;E347|E347+E347/E347\E347;
                      LDA.B !EffFrame                           ;;E349|E349+E349/E349\E349;
                      LSR A                                     ;;E34B|E34B+E34B/E34B\E34B;
                      LSR A                                     ;;E34C|E34C+E34C/E34C\E34C;
                      LSR A                                     ;;E34D|E34D+E34D/E34D\E34D;
                      LSR A                                     ;;E34E|E34E+E34E/E34E\E34E;
                      AND.B #$01                                ;;E34F|E34F+E34F/E34F\E34F;
                      TAY                                       ;;E351|E351+E351/E351\E351;
                      LDA.W DATA_01E35F,Y                       ;;E352|E352+E352/E352\E352;
                      STA.W !SpriteMisc1602,X                   ;;E355|E355+E355/E355\E355;
                      LDA.W DATA_01E361,Y                       ;;E358|E358+E358/E358\E358;
                      JSR SubSprGfx0Entry0                      ;;E35B|E35B+E35B/E35B\E35B;
                      RTS                                       ;;E35E|E35E+E35E/E35E\E35E; Return 
                                                                ;;                        ;
                                                                ;;                        ;
DATA_01E35F:          db $01,$02                                ;;E35F|E35F+E35F/E35F\E35F;
                                                                ;;                        ;
DATA_01E361:          db $00,$05                                ;;E361|E361+E361/E361\E361;
                                                                ;;                        ;
                    + LDA.B !EffFrame                           ;;E363|E363+E363/E363\E363;
                      ASL A                                     ;;E365|E365+E365/E365\E365;
                      ASL A                                     ;;E366|E366+E366/E366\E366;
                      AND.B #$C0                                ;;E367|E367+E367/E367\E367;
                      ORA.B #$31                                ;;E369|E369+E369/E369\E369;
                      STA.W !SpriteOBJAttribute,X               ;;E36B|E36B+E36B/E36B\E36B;
                      LDA.B #$03                                ;;E36E|E36E+E36E/E36E\E36E;
                      STA.W !SpriteMisc1602,X                   ;;E370|E370+E370/E370\E370;
                      JSR SubSprGfx2Entry1                      ;;E373|E373+E373/E373\E373;
                      LDA.W !SpriteOBJAttribute,X               ;;E376|E376+E376/E376\E376;
                      AND.B #$3F                                ;;E379|E379+E379/E379\E379;
                      STA.W !SpriteOBJAttribute,X               ;;E37B|E37B+E37B/E37B\E37B;
                      RTS                                       ;;E37E|E37E+E37E/E37E\E37E; Return 
                                                                ;;                        ;
CODE_01E37F:          JSR CODE_01E3EF                           ;;E37F|E37F+E37F/E37F\E37F;
                      LDA.B #$02                                ;;E382|E382+E382/E382\E382;
                      STA.W !SpriteMisc1602,X                   ;;E384|E384+E384/E384\E384;
                      JSR IsOnGround                            ;;E387|E387+E387/E387\E387;
                      BEQ +                                     ;;E38A|E38A+E38A/E38A\E38A;
                      INC.B !SpriteTableC2,X                    ;;E38C|E38C+E38C/E38C\E38C;
                    + RTS                                       ;;E38E|E38E+E38E/E38E\E38E; Return 
                                                                ;;                        ;
                                                                ;;                        ;
DATA_01E38F:          db $10,$F0                                ;;E38F|E38F+E38F/E38F\E38F;
                                                                ;;                        ;
DATA_01E391:          db $18,$E8                                ;;E391|E391+E391/E391\E391;
                                                                ;;                        ;
CODE_01E393:          JSR CODE_01E3EF                           ;;E393|E393+E393/E393\E393;
                      LDA.W !SpriteMisc151C,X                   ;;E396|E396+E396/E396\E396;
                      BNE CODE_01E3C7                           ;;E399|E399+E399/E399\E399;
                      JSR SetAnimationFrame                     ;;E39B|E39B+E39B/E39B\E39B;
                      JSR SetAnimationFrame                     ;;E39E|E39E+E39E/E39E\E39E;
                      JSL GetRand                               ;;E3A1|E3A1+E3A1/E3A1\E3A1;
                      AND.B #$01                                ;;E3A5|E3A5+E3A5/E3A5\E3A5;
                      BNE +                                     ;;E3A7|E3A7+E3A7/E3A7\E3A7;
                      JSR FaceMario                             ;;E3A9|E3A9+E3A9/E3A9\E3A9;
                      LDA.B !SpriteXSpeed,X                     ;;E3AC|E3AC+E3AC/E3AC\E3AC;
                      CMP.W DATA_01E391,Y                       ;;E3AE|E3AE+E3AE/E3AE\E3AE;
                      BEQ +                                     ;;E3B1|E3B1+E3B1/E3B1\E3B1;
                      CLC                                       ;;E3B3|E3B3+E3B3/E3B3\E3B3;
                      ADC.W DATA_01EBB4,Y                       ;;E3B4|E3B4+E3B4/E3B4\E3B4;
                      STA.B !SpriteXSpeed,X                     ;;E3B7|E3B7+E3B7/E3B7\E3B7;
                      TYA                                       ;;E3B9|E3B9+E3B9/E3B9\E3B9;
                      LSR A                                     ;;E3BA|E3BA+E3BA/E3BA\E3BA;
                      ROR A                                     ;;E3BB|E3BB+E3BB/E3BB\E3BB;
                      EOR.B !SpriteXSpeed,X                     ;;E3BC|E3BC+E3BC/E3BC\E3BC;
                      BPL +                                     ;;E3BE|E3BE+E3BE/E3BE\E3BE;
                      JSR CODE_01804E                           ;;E3C0|E3C0+E3C0/E3C0\E3C0;
                      JSR SetAnimationFrame                     ;;E3C3|E3C3+E3C3/E3C3\E3C3;
                    + RTS                                       ;;E3C6|E3C6+E3C6/E3C6\E3C6; Return 
                                                                ;;                        ;
CODE_01E3C7:          JSR IsOnGround                            ;;E3C7|E3C7+E3C7/E3C7\E3C7;
                      BEQ CODE_01E3E9                           ;;E3CA|E3CA+E3CA/E3CA\E3CA;
                      JSR SetAnimationFrame                     ;;E3CC|E3CC+E3CC/E3CC\E3CC;
                      JSR SetAnimationFrame                     ;;E3CF|E3CF+E3CF/E3CF\E3CF;
                      LDY.W !SpriteMisc157C,X                   ;;E3D2|E3D2+E3D2/E3D2\E3D2;
                      LDA.W DATA_01E38F,Y                       ;;E3D5|E3D5+E3D5/E3D5\E3D5;
                      STA.B !SpriteXSpeed,X                     ;;E3D8|E3D8+E3D8/E3D8\E3D8;
                      LDA.W !SpriteMisc1558,X                   ;;E3DA|E3DA+E3DA/E3DA\E3DA;
                      BNE +                                     ;;E3DD|E3DD+E3DD/E3DD\E3DD;
                      LDA.B #$50                                ;;E3DF|E3DF+E3DF/E3DF\E3DF;
                      STA.W !SpriteMisc1558,X                   ;;E3E1|E3E1+E3E1/E3E1\E3E1;
                      LDA.B #$D8                                ;;E3E4|E3E4+E3E4/E3E4\E3E4;
                      STA.B !SpriteYSpeed,X                     ;;E3E6|E3E6+E3E6/E3E6\E3E6;
                    + RTS                                       ;;E3E8|E3E8+E3E8/E3E8\E3E8; Return 
                                                                ;;                        ;
CODE_01E3E9:          LDA.B #$01                                ;;E3E9|E3E9+E3E9/E3E9\E3E9;
                      STA.W !SpriteMisc1602,X                   ;;E3EB|E3EB+E3EB/E3EB\E3EB;
                      RTS                                       ;;E3EE|E3EE+E3EE/E3EE\E3EE; Return 
                                                                ;;                        ;
CODE_01E3EF:          LDA.B !SpriteProperties                   ;;E3EF|E3EF+E3EF/E3EF\E3EF;
                      PHA                                       ;;E3F1|E3F1+E3F1/E3F1\E3F1;
                      LDA.W !SpriteMisc1540,X                   ;;E3F2|E3F2+E3F2/E3F2\E3F2;
                      BEQ +                                     ;;E3F5|E3F5+E3F5/E3F5\E3F5;
                      LDA.B #$10                                ;;E3F7|E3F7+E3F7/E3F7\E3F7;
                      STA.B !SpriteProperties                   ;;E3F9|E3F9+E3F9/E3F9\E3F9;
                    + JSR SubSprGfx2Entry1                      ;;E3FB|E3FB+E3FB/E3FB\E3FB;
                      PLA                                       ;;E3FE|E3FE+E3FE/E3FE\E3FE;
                      STA.B !SpriteProperties                   ;;E3FF|E3FF+E3FF/E3FF\E3FF;
                      LDA.B !SpriteLock                         ;;E401|E401+E401/E401\E401; \ Branch if sprites locked 
                      BNE CODE_01E41C                           ;;E403|E403+E403/E403\E403; / 
                      JSR SubSprSpr_MarioSpr                    ;;E405|E405+E405/E405\E405;
                      JSR SubUpdateSprPos                       ;;E408|E408+E408/E408\E408;
                      JSR IsOnGround                            ;;E40B|E40B+E40B/E40B\E40B;
                      BEQ +                                     ;;E40E|E40E+E40E/E40E\E40E;
                      JSR SetSomeYSpeed__                       ;;E410|E410+E410/E410\E410;
                    + JSR IsTouchingObjSide                     ;;E413|E413+E413/E413\E413;
                      BEQ +                                     ;;E416|E416+E416/E416\E416;
                      JSR FlipSpriteDir                         ;;E418|E418+E418/E418\E418;
                    + RTS                                       ;;E41B|E41B+E41B/E41B\E41B; Return 
                                                                ;;                        ;
CODE_01E41C:          PLA                                       ;;E41C|E41C+E41C/E41C\E41C;
                      PLA                                       ;;E41D|E41D+E41D/E41D\E41D;
                      RTS                                       ;;E41E|E41E+E41E/E41E\E41E; Return 
                                                                ;;                        ;
                                                                ;;                        ;
DATA_01E41F:          db $08,$F8,$02,$03,$04,$04,$04,$04        ;;E41F|E41F+E41F/E41F\E41F;
                      db $04,$04,$04,$04                        ;;E427|E427+E427/E427\E427;
                                                                ;;                        ;
DryBonesAndBeetle:    LDA.W !SpriteStatus,X                     ;;E42B|E42B+E42B/E42B\E42B;
                      CMP.B #$08                                ;;E42E|E42E+E42E/E42E\E42E;
                      BEQ +                                     ;;E430|E430+E430/E430\E430;
                      ASL.W !SpriteOBJAttribute,X               ;;E432|E432+E432/E432\E432;
                      SEC                                       ;;E435|E435+E435/E435\E435;
                      ROR.W !SpriteOBJAttribute,X               ;;E436|E436+E436/E436\E436;
                      JMP CODE_01E5BF                           ;;E439|E439+E439/E439\E439;
                                                                ;;                        ;
                                                                ;;                        ;
DATA_01E43C:          db $08,$F8                                ;;E43C|E43C+E43C/E43C\E43C;
                                                                ;;                        ;
                    + LDA.W !SpriteMisc1534,X                   ;;E43E|E43E+E43E/E43E\E43E;
                      BEQ CODE_01E4C0                           ;;E441|E441+E441/E441\E441;
                      JSR SubSprGfx2Entry1                      ;;E443|E443+E443/E443\E443;
                      LDY.W !SpriteMisc1540,X                   ;;E446|E446+E446/E446\E446;
                      BNE +                                     ;;E449|E449+E449/E449\E449;
                      STZ.W !SpriteMisc1534,X                   ;;E44B|E44B+E44B/E44B\E44B;
                      PHY                                       ;;E44E|E44E+E44E/E44E\E44E;
                      JSR FaceMario                             ;;E44F|E44F+E44F/E44F\E44F;
                      PLY                                       ;;E452|E452+E452/E452\E452;
                    + LDA.B #$48                                ;;E453|E453+E453/E453\E453;
                      CPY.B #$10                                ;;E455|E455+E455/E455\E455;
                      BCC +                                     ;;E457|E457+E457/E457\E457;
                      CPY.B #$F0                                ;;E459|E459+E459/E459\E459;
                      BCS +                                     ;;E45B|E45B+E45B/E45B\E45B;
                      LDA.B #$2E                                ;;E45D|E45D+E45D/E45D\E45D;
                    + LDY.W !SpriteOAMIndex,X                   ;;E45F|E45F+E45F/E45F\E45F; Y = Index into sprite OAM 
                      STA.W !OAMTileNo+$100,Y                   ;;E462|E462+E462/E462\E462;
                      TYA                                       ;;E465|E465+E465/E465\E465;
                      CLC                                       ;;E466|E466+E466/E466\E466;
                      ADC.B #$04                                ;;E467|E467+E467/E467\E467;
                      STA.W !SpriteOAMIndex,X                   ;;E469|E469+E469/E469\E469;
                      PHX                                       ;;E46C|E46C+E46C/E46C\E46C;
                      LDA.W !SpriteMisc157C,X                   ;;E46D|E46D+E46D/E46D\E46D;
                      TAX                                       ;;E470|E470+E470/E470\E470;
                      LDA.W !OAMTileXPos+$100,Y                 ;;E471|E471+E471/E471\E471;
                      CLC                                       ;;E474|E474+E474/E474\E474;
                      ADC.W DATA_01E43C,X                       ;;E475|E475+E475/E475\E475;
                      PLX                                       ;;E478|E478+E478/E478\E478;
                      STA.W !OAMTileXPos+$104,Y                 ;;E479|E479+E479/E479\E479;
                      LDA.W !OAMTileYPos+$100,Y                 ;;E47C|E47C+E47C/E47C\E47C;
                      STA.W !OAMTileYPos+$104,Y                 ;;E47F|E47F+E47F/E47F\E47F;
                      LDA.W !OAMTileAttr+$100,Y                 ;;E482|E482+E482/E482\E482;
                      STA.W !OAMTileAttr+$104,Y                 ;;E485|E485+E485/E485\E485;
                      LDA.W !OAMTileNo+$100,Y                   ;;E488|E488+E488/E488\E488;
                      DEC A                                     ;;E48B|E48B+E48B/E48B\E48B;
                      STA.W !OAMTileNo+$104,Y                   ;;E48C|E48C+E48C/E48C\E48C;
                      LDA.W !SpriteMisc1540,X                   ;;E48F|E48F+E48F/E48F\E48F;
                      BEQ +                                     ;;E492|E492+E492/E492\E492;
                      CMP.B #$40                                ;;E494|E494+E494/E494\E494;
                      BCS +                                     ;;E496|E496+E496/E496\E496;
                      LSR A                                     ;;E498|E498+E498/E498\E498;
                      LSR A                                     ;;E499|E499+E499/E499\E499;
                      PHP                                       ;;E49A|E49A+E49A/E49A\E49A;
                      LDA.W !OAMTileXPos+$100,Y                 ;;E49B|E49B+E49B/E49B\E49B;
                      ADC.B #$00                                ;;E49E|E49E+E49E/E49E\E49E;
                      STA.W !OAMTileXPos+$100,Y                 ;;E4A0|E4A0+E4A0/E4A0\E4A0;
                      PLP                                       ;;E4A3|E4A3+E4A3/E4A3\E4A3;
                      LDA.W !OAMTileXPos+$104,Y                 ;;E4A4|E4A4+E4A4/E4A4\E4A4;
                      ADC.B #$00                                ;;E4A7|E4A7+E4A7/E4A7\E4A7;
                      STA.W !OAMTileXPos+$104,Y                 ;;E4A9|E4A9+E4A9/E4A9\E4A9;
                    + LDY.B #$02                                ;;E4AC|E4AC+E4AC/E4AC\E4AC;
                      LDA.B #$01                                ;;E4AE|E4AE+E4AE/E4AE\E4AE;
                      JSR FinishOAMWriteRt                      ;;E4B0|E4B0+E4B0/E4B0\E4B0;
                      JSR SubUpdateSprPos                       ;;E4B3|E4B3+E4B3/E4B3\E4B3;
                      JSR IsOnGround                            ;;E4B6|E4B6+E4B6/E4B6\E4B6;
                      BEQ +                                     ;;E4B9|E4B9+E4B9/E4B9\E4B9;
                      STZ.B !SpriteYSpeed,X                     ;;E4BB|E4BB+E4BB/E4BB\E4BB; \ Sprite Speed = 0 
                      STZ.B !SpriteXSpeed,X                     ;;E4BD|E4BD+E4BD/E4BD\E4BD; / 
                    + RTS                                       ;;E4BF|E4BF+E4BF/E4BF\E4BF; Return 
                                                                ;;                        ;
CODE_01E4C0:          LDA.B !SpriteLock                         ;;E4C0|E4C0+E4C0/E4C0\E4C0;
                      ORA.W !SpriteMisc163E,X                   ;;E4C2|E4C2+E4C2/E4C2\E4C2;
                      BEQ +                                     ;;E4C5|E4C5+E4C5/E4C5\E4C5;
                      JMP CODE_01E5B6                           ;;E4C7|E4C7+E4C7/E4C7\E4C7;
                                                                ;;                        ;
                    + LDY.W !SpriteMisc157C,X                   ;;E4CA|E4CA+E4CA/E4CA\E4CA;
                      LDA.W DATA_01E41F,Y                       ;;E4CD|E4CD+E4CD/E4CD\E4CD;
                      EOR.W !SpriteSlope,X                      ;;E4D0|E4D0+E4D0/E4D0\E4D0;
                      ASL A                                     ;;E4D3|E4D3+E4D3/E4D3\E4D3;
                      LDA.W DATA_01E41F,Y                       ;;E4D4|E4D4+E4D4/E4D4\E4D4;
                      BCC +                                     ;;E4D7|E4D7+E4D7/E4D7\E4D7;
                      CLC                                       ;;E4D9|E4D9+E4D9/E4D9\E4D9;
                      ADC.W !SpriteSlope,X                      ;;E4DA|E4DA+E4DA/E4DA\E4DA;
                    + STA.B !SpriteXSpeed,X                     ;;E4DD|E4DD+E4DD/E4DD\E4DD;
                      LDA.W !SpriteMisc1540,X                   ;;E4DF|E4DF+E4DF/E4DF\E4DF;
                      BNE CODE_01E4ED                           ;;E4E2|E4E2+E4E2/E4E2\E4E2;
                      TYA                                       ;;E4E4|E4E4+E4E4/E4E4\E4E4;
                      INC A                                     ;;E4E5|E4E5+E4E5/E4E5\E4E5;
                      AND.W !SpriteBlockedDirs,X                ;;E4E6|E4E6+E4E6/E4E6\E4E6; \ Branch if not touching object 
                      AND.B #$03                                ;;E4E9|E4E9+E4E9/E4E9\E4E9;  | 
                      BEQ +                                     ;;E4EB|E4EB+E4EB/E4EB\E4EB; / 
CODE_01E4ED:          STZ.B !SpriteXSpeed,X                     ;;E4ED|E4ED+E4ED/E4ED\E4ED;
                    + JSR IsTouchingCeiling                     ;;E4EF|E4EF+E4EF/E4EF\E4EF;
                      BEQ +                                     ;;E4F2|E4F2+E4F2/E4F2\E4F2;
                      STZ.B !SpriteYSpeed,X                     ;;E4F4|E4F4+E4F4/E4F4\E4F4; Sprite Y Speed = 0 
                    + JSR SubOffscreen0Bnk1                     ;;E4F6|E4F6+E4F6/E4F6\E4F6;
                      JSR SubUpdateSprPos                       ;;E4F9|E4F9+E4F9/E4F9\E4F9;
                      LDA.B !SpriteNumber,X                     ;;E4FC|E4FC+E4FC/E4FC\E4FC;
                      CMP.B #$31                                ;;E4FE|E4FE+E4FE/E4FE\E4FE;
                      BNE CODE_01E51E                           ;;E500|E500+E500/E500\E500;
                      LDA.W !SpriteMisc1540,X                   ;;E502|E502+E502/E502\E502;
                      BEQ CODE_01E542                           ;;E505|E505+E505/E505\E505;
                      LDY.B #$00                                ;;E507|E507+E507/E507\E507;
                      CMP.B #$70                                ;;E509|E509+E509/E509\E509;
                      BCS +                                     ;;E50B|E50B+E50B/E50B\E50B;
                      INY                                       ;;E50D|E50D+E50D/E50D\E50D;
                      INY                                       ;;E50E|E50E+E50E/E50E\E50E;
                      CMP.B #$08                                ;;E50F|E50F+E50F/E50F\E50F;
                      BCC +                                     ;;E511|E511+E511/E511\E511;
                      CMP.B #$68                                ;;E513|E513+E513/E513\E513;
                      BCS +                                     ;;E515|E515+E515/E515\E515;
                      INY                                       ;;E517|E517+E517/E517\E517;
                    + TYA                                       ;;E518|E518+E518/E518\E518;
                      STA.W !SpriteMisc1602,X                   ;;E519|E519+E519/E519\E519;
                      BRA CODE_01E563                           ;;E51C|E51C+E51C/E51C\E51C;
                                                                ;;                        ;
CODE_01E51E:          CMP.B #$30                                ;;E51E|E51E+E51E/E51E\E51E;
                      BEQ CODE_01E52D                           ;;E520|E520+E520/E520\E520;
                      CMP.B #$32                                ;;E522|E522+E522/E522\E522;
                      BNE CODE_01E542                           ;;E524|E524+E524/E524\E524;
                      LDA.W !TranslevelNo                       ;;E526|E526+E526/E526\E526;
                      CMP.B #$31                                ;;E529|E529+E529/E529\E529;
                      BNE CODE_01E542                           ;;E52B|E52B+E52B/E52B\E52B;
CODE_01E52D:          LDA.W !SpriteMisc1540,X                   ;;E52D|E52D+E52D/E52D\E52D;
                      BEQ CODE_01E542                           ;;E530|E530+E530/E530\E530;
                      CMP.B #$01                                ;;E532|E532+E532/E532\E532;
                      BNE +                                     ;;E534|E534+E534/E534\E534;
                      JSL CODE_03C44E                           ;;E536|E536+E536/E536\E536;
                    + LDA.B #$02                                ;;E53A|E53A+E53A/E53A\E53A;
                      STA.W !SpriteMisc1602,X                   ;;E53C|E53C+E53C/E53C\E53C;
                      JMP CODE_01E5B6                           ;;E53F|E53F+E53F/E53F\E53F;
                                                                ;;                        ;
CODE_01E542:          JSR IsOnGround                            ;;E542|E542+E542/E542\E542;
                      BEQ CODE_01E563                           ;;E545|E545+E545/E545\E545;
                      JSR SetSomeYSpeed__                       ;;E547|E547+E547/E547\E547;
                      JSR SetAnimationFrame                     ;;E54A|E54A+E54A/E54A\E54A;
                      LDA.B !SpriteNumber,X                     ;;E54D|E54D+E54D/E54D\E54D;
                      CMP.B #$32                                ;;E54F|E54F+E54F/E54F\E54F;
                      BNE CODE_01E557                           ;;E551|E551+E551/E551\E551;
                      STZ.B !SpriteTableC2,X                    ;;E553|E553+E553/E553\E553;
                      BRA +                                     ;;E555|E555+E555/E555\E555;
                                                                ;;                        ;
CODE_01E557:          LDA.W !SpriteMisc1570,X                   ;;E557|E557+E557/E557\E557;
                      AND.B #$7F                                ;;E55A|E55A+E55A/E55A\E55A;
                      BNE +                                     ;;E55C|E55C+E55C/E55C\E55C;
                      JSR FaceMario                             ;;E55E|E55E+E55E/E55E\E55E;
                    + BRA +                                     ;;E561|E561+E561/E561\E561;
                                                                ;;                        ;
CODE_01E563:          STZ.W !SpriteMisc1570,X                   ;;E563|E563+E563/E563\E563;
                      LDA.B !SpriteNumber,X                     ;;E566|E566+E566/E566\E566;
                      CMP.B #$32                                ;;E568|E568+E568/E568\E568;
                      BNE +                                     ;;E56A|E56A+E56A/E56A\E56A;
                      LDA.B !SpriteTableC2,X                    ;;E56C|E56C+E56C/E56C\E56C;
                      BNE +                                     ;;E56E|E56E+E56E/E56E\E56E;
                      INC.B !SpriteTableC2,X                    ;;E570|E570+E570/E570\E570;
                      JSR FlipSpriteDir                         ;;E572|E572+E572/E572\E572;
                      JSR SubSprXPosNoGrvty                     ;;E575|E575+E575/E575\E575;
                      JSR SubSprXPosNoGrvty                     ;;E578|E578+E578/E578\E578;
                    + LDA.B !SpriteNumber,X                     ;;E57B|E57B+E57B/E57B\E57B;
                      CMP.B #$31                                ;;E57D|E57D+E57D/E57D\E57D;
                      BNE CODE_01E598                           ;;E57F|E57F+E57F/E57F\E57F;
                      LDA.B !TrueFrame                          ;;E581|E581+E581/E581\E581;
                      LSR A                                     ;;E583|E583+E583/E583\E583;
                      BCC +                                     ;;E584|E584+E584/E584\E584;
                      INC.W !SpriteMisc1528,X                   ;;E586|E586+E586/E586\E586;
                    + LDA.W !SpriteMisc1528,X                   ;;E589|E589+E589/E589\E589;
                      BNE CODE_01E5B6                           ;;E58C|E58C+E58C/E58C\E58C;
                      INC.W !SpriteMisc1528,X                   ;;E58E|E58E+E58E/E58E\E58E;
                      LDA.B #$A0                                ;;E591|E591+E591/E591\E591;
                      STA.W !SpriteMisc1540,X                   ;;E593|E593+E593/E593\E593;
                      BRA CODE_01E5B6                           ;;E596|E596+E596/E596\E596;
                                                                ;;                        ;
CODE_01E598:          CMP.B #$30                                ;;E598|E598+E598/E598\E598;
                      BEQ CODE_01E5A7                           ;;E59A|E59A+E59A/E59A\E59A;
                      CMP.B #$32                                ;;E59C|E59C+E59C/E59C\E59C;
                      BNE CODE_01E5B6                           ;;E59E|E59E+E59E/E59E\E59E;
                      LDA.W !TranslevelNo                       ;;E5A0|E5A0+E5A0/E5A0\E5A0;
                      CMP.B #$31                                ;;E5A3|E5A3+E5A3/E5A3\E5A3;
                      BNE CODE_01E5B6                           ;;E5A5|E5A5+E5A5/E5A5\E5A5;
CODE_01E5A7:          LDA.W !SpriteMisc1570,X                   ;;E5A7|E5A7+E5A7/E5A7\E5A7;
                      CLC                                       ;;E5AA|E5AA+E5AA/E5AA\E5AA;
                      ADC.B #$40                                ;;E5AB|E5AB+E5AB/E5AB\E5AB;
                      AND.B #$7F                                ;;E5AD|E5AD+E5AD/E5AD\E5AD;
                      BNE CODE_01E5B6                           ;;E5AF|E5AF+E5AF/E5AF\E5AF;
                      LDA.B #$3F                                ;;E5B1|E5B1+E5B1/E5B1\E5B1;
                      STA.W !SpriteMisc1540,X                   ;;E5B3|E5B3+E5B3/E5B3\E5B3;
CODE_01E5B6:          JSR CODE_01E5C4                           ;;E5B6|E5B6+E5B6/E5B6\E5B6;
                      JSR SubSprSprInteract                     ;;E5B9|E5B9+E5B9/E5B9\E5B9;
                      JSR FlipIfTouchingObj                     ;;E5BC|E5BC+E5BC/E5BC\E5BC;
CODE_01E5BF:          JSL CODE_03C390                           ;;E5BF|E5BF+E5BF/E5BF\E5BF;
                      RTS                                       ;;E5C3|E5C3+E5C3/E5C3\E5C3; Return 
                                                                ;;                        ;
CODE_01E5C4:          JSR MarioSprInteractRt                    ;;E5C4|E5C4+E5C4/E5C4\E5C4;
                      BCC Return01E610                          ;;E5C7|E5C7+E5C7/E5C7\E5C7;
                      LDA.B !PlayerYPosNow                      ;;E5C9|E5C9+E5C9/E5C9\E5C9;
                      CLC                                       ;;E5CB|E5CB+E5CB/E5CB\E5CB;
                      ADC.B #$14                                ;;E5CC|E5CC+E5CC/E5CC\E5CC;
                      CMP.B !SpriteYPosLow,X                    ;;E5CE|E5CE+E5CE/E5CE\E5CE;
                      BPL CODE_01E604                           ;;E5D0|E5D0+E5D0/E5D0\E5D0;
                      LDA.W !SpriteStompCounter                 ;;E5D2|E5D2+E5D2/E5D2\E5D2;
                      BNE CODE_01E5DB                           ;;E5D5|E5D5+E5D5/E5D5\E5D5;
                      LDA.B !PlayerYSpeed                       ;;E5D7|E5D7+E5D7/E5D7\E5D7;
                      BMI CODE_01E604                           ;;E5D9|E5D9+E5D9/E5D9\E5D9;
CODE_01E5DB:          LDA.B !SpriteNumber,X                     ;;E5DB|E5DB+E5DB/E5DB\E5DB;
                      CMP.B #$31                                ;;E5DD|E5DD+E5DD/E5DD\E5DD;
                      BNE CODE_01E5EB                           ;;E5DF|E5DF+E5DF/E5DF\E5DF;
                      LDA.W !SpriteMisc1540,X                   ;;E5E1|E5E1+E5E1/E5E1\E5E1;
                      SEC                                       ;;E5E4|E5E4+E5E4/E5E4\E5E4;
                      SBC.B #$08                                ;;E5E5|E5E5+E5E5/E5E5\E5E5;
                      CMP.B #$60                                ;;E5E7|E5E7+E5E7/E5E7\E5E7;
                      BCC CODE_01E604                           ;;E5E9|E5E9+E5E9/E5E9\E5E9;
CODE_01E5EB:          JSR CODE_01AB46                           ;;E5EB|E5EB+E5EB/E5EB\E5EB;
                      JSL DisplayContactGfx                     ;;E5EE|E5EE+E5EE/E5EE\E5EE;
                      LDA.B #!SFX_BONES                         ;;E5F2|E5F2+E5F2/E5F2\E5F2; \ Play sound effect 
                      STA.W !SPCIO0                             ;;E5F4|E5F4+E5F4/E5F4\E5F4; / 
                      JSL BoostMarioSpeed                       ;;E5F7|E5F7+E5F7/E5F7\E5F7;
                      INC.W !SpriteMisc1534,X                   ;;E5FB|E5FB+E5FB/E5FB\E5FB;
                      LDA.B #$FF                                ;;E5FE|E5FE+E5FE/E5FE\E5FE;
                      STA.W !SpriteMisc1540,X                   ;;E600|E600+E600/E600\E600;
                      RTS                                       ;;E603|E603+E603/E603\E603; Return 
                                                                ;;                        ;
CODE_01E604:          JSL HurtMario                             ;;E604|E604+E604/E604\E604;
                      LDA.W !IFrameTimer                        ;;E608|E608+E608/E608\E608; \ Return if Mario is invincible 
                      BNE Return01E610                          ;;E60B|E60B+E60B/E60B\E60B; / 
                      JSR FaceMario                             ;;E60D|E60D+E60D/E60D\E60D;
Return01E610:         RTS                                       ;;E610|E610+E610/E610\E610; Return 
                                                                ;;                        ;
                                                                ;;                        ;
DATA_01E611:          db $00,$01,$02,$02,$02,$01,$01,$00        ;;E611|E611+E611/E611\E611;
                      db $00                                    ;;E619|E619+E619/E619\E619;
                                                                ;;                        ;
DATA_01E61A:          db $1E,$1B,$18,$18,$18,$1A,$1C,$1D        ;;E61A|E61A+E61A/E61A\E61A;
                      db $1E                                    ;;E622|E622+E622/E622\E622;
                                                                ;;                        ;
SpringBoard:          LDA.B !SpriteLock                         ;;E623|E623+E623/E623\E623;
                      BEQ +                                     ;;E625|E625+E625/E625\E625;
                      JMP CODE_01E6F0                           ;;E627|E627+E627/E627\E627;
                                                                ;;                        ;
                    + JSR SubOffscreen0Bnk1                     ;;E62A|E62A+E62A/E62A\E62A;
                      JSR SubUpdateSprPos                       ;;E62D|E62D+E62D/E62D\E62D;
                      JSR IsOnGround                            ;;E630|E630+E630/E630\E630;
                      BEQ +                                     ;;E633|E633+E633/E633\E633;
                      JSR CODE_0197D5                           ;;E635|E635+E635/E635\E635;
                    + JSR IsTouchingObjSide                     ;;E638|E638+E638/E638\E638;
                      BEQ +                                     ;;E63B|E63B+E63B/E63B\E63B;
                      JSR FlipSpriteDir                         ;;E63D|E63D+E63D/E63D\E63D;
                      LDA.B !SpriteXSpeed,X                     ;;E640|E640+E640/E640\E640;
                      ASL A                                     ;;E642|E642+E642/E642\E642;
                      PHP                                       ;;E643|E643+E643/E643\E643;
                      ROR.B !SpriteXSpeed,X                     ;;E644|E644+E644/E644\E644;
                      PLP                                       ;;E646|E646+E646/E646\E646;
                      ROR.B !SpriteXSpeed,X                     ;;E647|E647+E647/E647\E647;
                    + JSR IsTouchingCeiling                     ;;E649|E649+E649/E649\E649;
                      BEQ +                                     ;;E64C|E64C+E64C/E64C\E64C;
                      STZ.B !SpriteYSpeed,X                     ;;E64E|E64E+E64E/E64E\E64E; Sprite Y Speed = 0 
                    + LDA.W !SpriteMisc1540,X                   ;;E650|E650+E650/E650\E650;
                      BEQ CODE_01E6B0                           ;;E653|E653+E653/E653\E653;
                      LSR A                                     ;;E655|E655+E655/E655\E655;
                      TAY                                       ;;E656|E656+E656/E656\E656;
                      LDA.W !PlayerRidingYoshi                  ;;E657|E657+E657/E657\E657;
                      CMP.B #$01                                ;;E65A|E65A+E65A/E65A\E65A;
                      LDA.W DATA_01E61A,Y                       ;;E65C|E65C+E65C/E65C\E65C;
                      BCC +                                     ;;E65F|E65F+E65F/E65F\E65F;
                      CLC                                       ;;E661|E661+E661/E661\E661;
                      ADC.B #$12                                ;;E662|E662+E662/E662\E662;
                    + STA.B !_0                                 ;;E664|E664+E664/E664\E664;
                      LDA.W DATA_01E611,Y                       ;;E666|E666+E666/E666\E666;
                      STA.W !SpriteMisc1602,X                   ;;E669|E669+E669/E669\E669;
                      LDA.B !SpriteYPosLow,X                    ;;E66C|E66C+E66C/E66C\E66C;
                      SEC                                       ;;E66E|E66E+E66E/E66E\E66E;
                      SBC.B !_0                                 ;;E66F|E66F+E66F/E66F\E66F;
                      STA.B !PlayerYPosNext                     ;;E671|E671+E671/E671\E671;
                      LDA.W !SpriteXPosHigh,X                   ;;E673|E673+E673/E673\E673;
                      SBC.B #$00                                ;;E676|E676+E676/E676\E676;
                      STA.B !PlayerYPosNext+1                   ;;E678|E678+E678/E678\E678;
                      STZ.B !PlayerInAir                        ;;E67A|E67A+E67A/E67A\E67A;
                      STZ.B !PlayerXSpeed                       ;;E67C|E67C+E67C/E67C\E67C;
                      LDA.B #$02                                ;;E67E|E67E+E67E/E67E\E67E;
                      STA.W !StandOnSolidSprite                 ;;E680|E680+E680/E680\E680;
                      LDA.W !SpriteMisc1540,X                   ;;E683|E683+E683/E683\E683;
                      CMP.B #$07                                ;;E686|E686+E686/E686\E686;
                      BCS CODE_01E6AE                           ;;E688|E688+E688/E688\E688;
                      STZ.W !StandOnSolidSprite                 ;;E68A|E68A+E68A/E68A\E68A;
                      LDY.B #$B0                                ;;E68D|E68D+E68D/E68D\E68D;
                      LDA.B !axlr0000Hold                       ;;E68F|E68F+E68F/E68F\E68F;
                      BPL CODE_01E69A                           ;;E691|E691+E691/E691\E691;
                      LDA.B #$01                                ;;E693|E693+E693/E693\E693;
                      STA.W !SpinJumpFlag                       ;;E695|E695+E695/E695\E695;
                      BRA CODE_01E69E                           ;;E698|E698+E698/E698\E698;
                                                                ;;                        ;
CODE_01E69A:          LDA.B !byetudlrHold                       ;;E69A|E69A+E69A/E69A\E69A;
                      BPL +                                     ;;E69C|E69C+E69C/E69C\E69C;
CODE_01E69E:          LDA.B #$0B                                ;;E69E|E69E+E69E/E69E\E69E;
                      STA.B !PlayerInAir                        ;;E6A0|E6A0+E6A0/E6A0\E6A0;
                      LDY.B #$80                                ;;E6A2|E6A2+E6A2/E6A2\E6A2;
                      STY.W !BouncingOnBoard                    ;;E6A4|E6A4+E6A4/E6A4\E6A4;
                    + STY.B !PlayerYSpeed                       ;;E6A7|E6A7+E6A7/E6A7\E6A7;
                      LDA.B #!SFX_SPRING                        ;;E6A9|E6A9+E6A9/E6A9\E6A9; \ Play sound effect 
                      STA.W !SPCIO3                             ;;E6AB|E6AB+E6AB/E6AB\E6AB; / 
CODE_01E6AE:          BRA CODE_01E6F0                           ;;E6AE|E6AE+E6AE/E6AE\E6AE;
                                                                ;;                        ;
CODE_01E6B0:          JSR ProcessInteract                       ;;E6B0|E6B0+E6B0/E6B0\E6B0;
                      BCC CODE_01E6F0                           ;;E6B3|E6B3+E6B3/E6B3\E6B3;
                      STZ.W !SpriteMisc154C,X                   ;;E6B5|E6B5+E6B5/E6B5\E6B5;
                      LDA.B !SpriteYPosLow,X                    ;;E6B8|E6B8+E6B8/E6B8\E6B8;
                      SEC                                       ;;E6BA|E6BA+E6BA/E6BA\E6BA;
                      SBC.B !PlayerYPosNext                     ;;E6BB|E6BB+E6BB/E6BB\E6BB;
                      CLC                                       ;;E6BD|E6BD+E6BD/E6BD\E6BD;
                      ADC.B #$04                                ;;E6BE|E6BE+E6BE/E6BE\E6BE;
                      CMP.B #$1C                                ;;E6C0|E6C0+E6C0/E6C0\E6C0;
                      BCC CODE_01E6CE                           ;;E6C2|E6C2+E6C2/E6C2\E6C2;
                      BPL CODE_01E6E7                           ;;E6C4|E6C4+E6C4/E6C4\E6C4;
                      LDA.B !PlayerYSpeed                       ;;E6C6|E6C6+E6C6/E6C6\E6C6;
                      BPL CODE_01E6F0                           ;;E6C8|E6C8+E6C8/E6C8\E6C8;
                      STZ.B !PlayerYSpeed                       ;;E6CA|E6CA+E6CA/E6CA\E6CA;
                      BRA CODE_01E6F0                           ;;E6CC|E6CC+E6CC/E6CC\E6CC;
                                                                ;;                        ;
CODE_01E6CE:          BIT.B !byetudlrHold                       ;;E6CE|E6CE+E6CE/E6CE\E6CE;
                      BVC +                                     ;;E6D0|E6D0+E6D0/E6D0\E6D0;
                      LDA.W !CarryingFlag                       ;;E6D2|E6D2+E6D2/E6D2\E6D2; \ Branch if carrying an enemy... 
                      ORA.W !PlayerRidingYoshi                  ;;E6D5|E6D5+E6D5/E6D5\E6D5;  | ...or if on Yoshi 
                      BNE +                                     ;;E6D8|E6D8+E6D8/E6D8\E6D8; / 
                      LDA.B #$0B                                ;;E6DA|E6DA+E6DA/E6DA\E6DA; \ Sprite status = carried 
                      STA.W !SpriteStatus,X                     ;;E6DC|E6DC+E6DC/E6DC\E6DC; / 
                      STZ.W !SpriteMisc1602,X                   ;;E6DF|E6DF+E6DF/E6DF\E6DF;
                    + JSR CODE_01AB31                           ;;E6E2|E6E2+E6E2/E6E2\E6E2;
                      BRA CODE_01E6F0                           ;;E6E5|E6E5+E6E5/E6E5\E6E5;
                                                                ;;                        ;
CODE_01E6E7:          LDA.B !PlayerYSpeed                       ;;E6E7|E6E7+E6E7/E6E7\E6E7;
                      BMI CODE_01E6F0                           ;;E6E9|E6E9+E6E9/E6E9\E6E9;
                      LDA.B #$11                                ;;E6EB|E6EB+E6EB/E6EB\E6EB;
                      STA.W !SpriteMisc1540,X                   ;;E6ED|E6ED+E6ED/E6ED\E6ED;
CODE_01E6F0:          LDY.W !SpriteMisc1602,X                   ;;E6F0|E6F0+E6F0/E6F0\E6F0;
                      LDA.W DATA_01E6FD,Y                       ;;E6F3|E6F3+E6F3/E6F3\E6F3;
                      TAY                                       ;;E6F6|E6F6+E6F6/E6F6\E6F6;
                      LDA.B #$02                                ;;E6F7|E6F7+E6F7/E6F7\E6F7;
                      JSR SubSprGfx0Entry1                      ;;E6F9|E6F9+E6F9/E6F9\E6F9;
                      RTS                                       ;;E6FC|E6FC+E6FC/E6FC\E6FC; Return 
                                                                ;;                        ;
                                                                ;;                        ;
DATA_01E6FD:          db $00,$02,$00                            ;;E6FD|E6FD+E6FD/E6FD\E6FD;
                                                                ;;                        ;
SmushedGfxRt:         JSR GetDrawInfoBnk1                       ;;E700|E700+E700/E700\E700;
                      JSR IsSprOffScreen                        ;;E703|E703+E703/E703\E703;
                      BNE Return01E75A                          ;;E706|E706+E706/E706\E706;
                      LDA.B !_0                                 ;;E708|E708+E708/E708\E708; \ Set X displacement for both tiles 
                      STA.W !OAMTileXPos+$100,Y                 ;;E70A|E70A+E70A/E70A\E70A;  | (Sprite position + #$00/#$08) 
                      CLC                                       ;;E70D|E70D+E70D/E70D\E70D;  | 
                      ADC.B #$08                                ;;E70E|E70E+E70E/E70E\E70E;  | 
                      STA.W !OAMTileXPos+$104,Y                 ;;E710|E710+E710/E710\E710; / 
                      LDA.B !_1                                 ;;E713|E713+E713/E713\E713; \ Set Y displacement for both tiles 
                      CLC                                       ;;E715|E715+E715/E715\E715;  | (Sprite position + #$08) 
                      ADC.B #$08                                ;;E716|E716+E716/E716\E716;  | 
                      STA.W !OAMTileYPos+$100,Y                 ;;E718|E718+E718/E718\E718;  | 
                      STA.W !OAMTileYPos+$104,Y                 ;;E71B|E71B+E71B/E71B\E71B; / 
                      PHX                                       ;;E71E|E71E+E71E/E71E\E71E;
                      LDA.B !SpriteNumber,X                     ;;E71F|E71F+E71F/E71F\E71F;
                      TAX                                       ;;E721|E721+E721/E721\E721;
                      LDA.B #$FE                                ;;E722|E722+E722/E722\E722; \ If P Switch, tile = #$FE 
                      CPX.B #$3E                                ;;E724|E724+E724/E724\E724;  | 
                      BEQ +                                     ;;E726|E726+E726/E726\E726; / 
                      LDA.B #$EE                                ;;E728|E728+E728/E728\E728; \ If Sliding Koopa... 
                      CPX.B #$BD                                ;;E72A|E72A+E72A/E72A\E72A;  | 
                      BEQ +                                     ;;E72C|E72C+E72C/E72C\E72C;  | 
                      CPX.B #$04                                ;;E72E|E72E+E72E/E72E\E72E;  | ...or a shelless, tile = #$EE 
                      BCC +                                     ;;E730|E730+E730/E730\E730; / 
                      LDA.B #$C7                                ;;E732|E732+E732/E732\E732; \ If sprite num >= #$0F, tile = #$C7 (is this used?) 
                      CPX.B #$0F                                ;;E734|E734+E734/E734\E734;  | 
                      BCS +                                     ;;E736|E736+E736/E736\E736; / 
                      LDA.B #$4D                                ;;E738|E738+E738/E738\E738; If #$04 <= sprite num < #$0F, tile = #$4D (Koopas) 
                    + STA.W !OAMTileNo+$100,Y                   ;;E73A|E73A+E73A/E73A\E73A; \ Same value for both tiles 
                      STA.W !OAMTileNo+$104,Y                   ;;E73D|E73D+E73D/E73D\E73D; / 
                      PLX                                       ;;E740|E740+E740/E740\E740;
                      LDA.B !SpriteProperties                   ;;E741|E741+E741/E741\E741; \ Store the first tile's properties 
                      ORA.W !SpriteOBJAttribute,X               ;;E743|E743+E743/E743\E743;  | 
                      STA.W !OAMTileAttr+$100,Y                 ;;E746|E746+E746/E746\E746; / 
                      ORA.B #$40                                ;;E749|E749+E749/E749\E749; \ Horizontally flip the second tile and store it 
                      STA.W !OAMTileAttr+$104,Y                 ;;E74B|E74B+E74B/E74B\E74B; / 
                      TYA                                       ;;E74E|E74E+E74E/E74E\E74E; \ Y = index to size table 
                      LSR A                                     ;;E74F|E74F+E74F/E74F\E74F;  | 
                      LSR A                                     ;;E750|E750+E750/E750\E750;  | 
                      TAY                                       ;;E751|E751+E751/E751\E751; / 
                      LDA.B #$00                                ;;E752|E752+E752/E752\E752; \ Two 8x8 tiles 
                      STA.W !OAMTileSize+$40,Y                  ;;E754|E754+E754/E754\E754;  | 
                      STA.W !OAMTileSize+$41,Y                  ;;E757|E757+E757/E757\E757; / 
Return01E75A:         RTS                                       ;;E75A|E75A+E75A/E75A\E75A; Return 
                                                                ;;                        ;
PSwitch:              LDA.W !SpriteMisc1564,X                   ;;E75B|E75B+E75B/E75B\E75B;
                      CMP.B #$01                                ;;E75E|E75E+E75E/E75E\E75E;
                      BNE +                                     ;;E760|E760+E760/E760\E760;
                      STA.W !OWPlayerSubmap                     ;;E762|E762+E762/E762\E762;
                      STA.W !SaveDataBufferSubmap               ;;E765|E765+E765/E765\E765;
                      STZ.W !SpriteStatus,X                     ;;E768|E768+E768/E768\E768;
                      INC.W !MessageBoxTrigger                  ;;E76B|E76B+E76B/E76B\E76B;
                    + RTS                                       ;;E76E|E76E+E76E/E76E\E76E; Return 
                                                                ;;                        ;
                                                                ;;                        ;
DATA_01E76F:          db $FC,$04,$FE,$02,$FB,$05,$FD,$03        ;;E76F|E76F+E76F/E76F\E76F;
                      db $FA,$06,$FC,$04,$FB,$05,$FD,$03        ;;E777|E777+E777/E777\E777;
DATA_01E77F:          db $00,$FF,$03,$04,$FF,$FE,$04,$03        ;;E77F|E77F+E77F/E77F\E77F;
                      db $FE,$FF,$03,$03,$FF,$00,$03,$03        ;;E787|E787+E787/E787\E787;
                      db $F8,$FC,$00,$04                        ;;E78F|E78F+E78F/E78F\E78F;
                                                                ;;                        ;
DATA_01E793:          db $0E,$0F,$10,$11,$12,$11,$10,$0F        ;;E793|E793+E793/E793\E793;
                      db $1A,$1B,$1C,$1D,$1E,$1D,$1C,$1B        ;;E79B|E79B+E79B/E79B\E79B;
                      db $1A                                    ;;E7A3|E7A3+E7A3/E7A3\E7A3;
                                                                ;;                        ;
LakituCloud:          LDA.B !SpriteLock                         ;;E7A4|E7A4+E7A4/E7A4\E7A4; \ Branch if sprites locked 
                      BEQ +                                     ;;E7A6|E7A6+E7A6/E7A6\E7A6; / 
CODE_01E7A8:          JMP LakituCloudGfx                        ;;E7A8|E7A8+E7A8/E7A8\E7A8;
                                                                ;;                        ;
                    + LDY.W !LakituCloudTimer                   ;;E7AB|E7AB+E7AB/E7AB\E7AB;
                      BEQ +                                     ;;E7AE|E7AE+E7AE/E7AE\E7AE;
                      LDA.B !EffFrame                           ;;E7B0|E7B0+E7B0/E7B0\E7B0;
                      AND.B #$03                                ;;E7B2|E7B2+E7B2/E7B2\E7B2;
                      BNE +                                     ;;E7B4|E7B4+E7B4/E7B4\E7B4;
                      LDA.W !LakituCloudTimer                   ;;E7B6|E7B6+E7B6/E7B6\E7B6;
                      BEQ +                                     ;;E7B9|E7B9+E7B9/E7B9\E7B9;
                      DEC.W !LakituCloudTimer                   ;;E7BB|E7BB+E7BB/E7BB\E7BB;
                      BNE +                                     ;;E7BE|E7BE+E7BE/E7BE\E7BE;
                      LDA.B #$1F                                ;;E7C0|E7C0+E7C0/E7C0\E7C0;
                      STA.W !SpriteMisc1540,X                   ;;E7C2|E7C2+E7C2/E7C2\E7C2;
                    + LDA.W !SpriteMisc1540,X                   ;;E7C5|E7C5+E7C5/E7C5\E7C5;
                      BEQ CODE_01E7DB                           ;;E7C8|E7C8+E7C8/E7C8\E7C8;
                      DEC A                                     ;;E7CA|E7CA+E7CA/E7CA\E7CA;
                      BNE CODE_01E7A8                           ;;E7CB|E7CB+E7CB/E7CB\E7CB;
                      STZ.W !SpriteStatus,X                     ;;E7CD|E7CD+E7CD/E7CD\E7CD;
                      LDA.B #$FF                                ;;E7D0|E7D0+E7D0/E7D0\E7D0; \ Set time until respawn 
                      STA.W !SpriteRespawnTimer                 ;;E7D2|E7D2+E7D2/E7D2\E7D2;  | 
                      LDA.B #$1E                                ;;E7D5|E7D5+E7D5/E7D5\E7D5;  | Sprite to respawn = Lakitu 
                      STA.W !SpriteRespawnNumber                ;;E7D7|E7D7+E7D7/E7D7\E7D7; / 
                      RTS                                       ;;E7DA|E7DA+E7DA/E7DA\E7DA; Return 
                                                                ;;                        ;
CODE_01E7DB:          LDY.B #$09                                ;;E7DB|E7DB+E7DB/E7DB\E7DB;
CODE_01E7DD:          LDA.W !SpriteStatus,Y                     ;;E7DD|E7DD+E7DD/E7DD\E7DD;
                      CMP.B #$08                                ;;E7E0|E7E0+E7E0/E7E0\E7E0;
                      BNE +                                     ;;E7E2|E7E2+E7E2/E7E2\E7E2;
                      LDA.W !SpriteNumber,Y                     ;;E7E4|E7E4+E7E4/E7E4\E7E4;
                      CMP.B #$1E                                ;;E7E7|E7E7+E7E7/E7E7\E7E7;
                      BNE +                                     ;;E7E9|E7E9+E7E9/E7E9\E7E9;
                      TYA                                       ;;E7EB|E7EB+E7EB/E7EB\E7EB;
                      STA.W !SpriteMisc160E,X                   ;;E7EC|E7EC+E7EC/E7EC\E7EC;
                      JMP CODE_01E898                           ;;E7EF|E7EF+E7EF/E7EF\E7EF;
                                                                ;;                        ;
                    + DEY                                       ;;E7F2|E7F2+E7F2/E7F2\E7F2;
                      BPL CODE_01E7DD                           ;;E7F3|E7F3+E7F3/E7F3\E7F3;
                      LDA.B !SpriteTableC2,X                    ;;E7F5|E7F5+E7F5/E7F5\E7F5;
                      BNE CODE_01E840                           ;;E7F7|E7F7+E7F7/E7F7\E7F7;
                      LDA.W !SpriteMisc151C,X                   ;;E7F9|E7F9+E7F9/E7F9\E7F9;
                      BEQ +                                     ;;E7FC|E7FC+E7FC/E7FC\E7FC;
                      JSR SubSprXPosNoGrvty                     ;;E7FE|E7FE+E7FE/E7FE\E7FE;
                      JSR SubSprYPosNoGrvty                     ;;E801|E801+E801/E801\E801;
                    + LDA.W !SpriteMisc154C,X                   ;;E804|E804+E804/E804\E804;
                      BNE CODE_01E83D                           ;;E807|E807+E807/E807\E807;
                      JSR ProcessInteract                       ;;E809|E809+E809/E809\E809;
                      BCC CODE_01E83D                           ;;E80C|E80C+E80C/E80C\E80C;
                      LDA.B !PlayerYSpeed                       ;;E80E|E80E+E80E/E80E\E80E;
                      BMI CODE_01E83D                           ;;E810|E810+E810/E810\E810;
                      INC.B !SpriteTableC2,X                    ;;E812|E812+E812/E812\E812;
                      LDA.B #$11                                ;;E814|E814+E814/E814\E814;
                      LDY.W !PlayerRidingYoshi                  ;;E816|E816+E816/E816\E816;
                      BEQ +                                     ;;E819|E819+E819/E819\E819;
                      LDA.B #$22                                ;;E81B|E81B+E81B/E81B\E81B;
                    + CLC                                       ;;E81D|E81D+E81D/E81D\E81D;
                      ADC.B !PlayerYPosNow                      ;;E81E|E81E+E81E/E81E\E81E;
                      STA.B !SpriteYPosLow,X                    ;;E820|E820+E820/E820\E820;
                      LDA.B !PlayerYPosNow+1                    ;;E822|E822+E822/E822\E822;
                      ADC.B #$00                                ;;E824|E824+E824/E824\E824;
                      STA.W !SpriteXPosHigh,X                   ;;E826|E826+E826/E826\E826;
                      LDA.B !PlayerXPosNow                      ;;E829|E829+E829/E829\E829;
                      STA.B !SpriteXPosLow,X                    ;;E82B|E82B+E82B/E82B\E82B;
                      LDA.B !PlayerXPosNow+1                    ;;E82D|E82D+E82D/E82D\E82D;
                      STA.W !SpriteYPosHigh,X                   ;;E82F|E82F+E82F/E82F\E82F;
                      LDA.B #$10                                ;;E832|E832+E832/E832\E832;
                      STA.B !SpriteYSpeed,X                     ;;E834|E834+E834/E834\E834;
                      STA.W !SpriteMisc151C,X                   ;;E836|E836+E836/E836\E836;
                      LDA.B !PlayerXSpeed                       ;;E839|E839+E839/E839\E839;
                      STA.B !SpriteXSpeed,X                     ;;E83B|E83B+E83B/E83B\E83B;
CODE_01E83D:          JMP LakituCloudGfx                        ;;E83D|E83D+E83D/E83D\E83D;
                                                                ;;                        ;
CODE_01E840:          JSR LakituCloudGfx                        ;;E840|E840+E840/E840\E840;
                      PHB                                       ;;E843|E843+E843/E843\E843;
                      LDA.B #$02                                ;;E844|E844+E844/E844\E844;
                      PHA                                       ;;E846|E846+E846/E846\E846;
                      PLB                                       ;;E847|E847+E847/E847\E847;
                      JSL CODE_02D214                           ;;E848|E848+E848/E848\E848;
                      PLB                                       ;;E84C|E84C+E84C/E84C\E84C;
                      LDA.B !SpriteYSpeed,X                     ;;E84D|E84D+E84D/E84D\E84D;
                      CLC                                       ;;E84F|E84F+E84F/E84F\E84F;
                      ADC.B #$03                                ;;E850|E850+E850/E850\E850;
                      STA.B !PlayerYSpeed                       ;;E852|E852+E852/E852\E852;
                      LDA.B !EffFrame                           ;;E854|E854+E854/E854\E854;
                      LSR A                                     ;;E856|E856+E856/E856\E856;
                      LSR A                                     ;;E857|E857+E857/E857\E857;
                      LSR A                                     ;;E858|E858+E858/E858\E858;
                      AND.B #$07                                ;;E859|E859+E859/E859\E859;
                      TAY                                       ;;E85B|E85B+E85B/E85B\E85B;
                      LDA.W !PlayerRidingYoshi                  ;;E85C|E85C+E85C/E85C\E85C;
                      BEQ +                                     ;;E85F|E85F+E85F/E85F\E85F;
                      TYA                                       ;;E861|E861+E861/E861\E861;
                      CLC                                       ;;E862|E862+E862/E862\E862;
                      ADC.B #$08                                ;;E863|E863+E863/E863\E863;
                      TAY                                       ;;E865|E865+E865/E865\E865;
                    + LDA.B !PlayerXPosNow                      ;;E866|E866+E866/E866\E866;
                      STA.B !SpriteXPosLow,X                    ;;E868|E868+E868/E868\E868;
                      LDA.B !PlayerXPosNow+1                    ;;E86A|E86A+E86A/E86A\E86A;
                      STA.W !SpriteYPosHigh,X                   ;;E86C|E86C+E86C/E86C\E86C;
                      LDA.B !PlayerYPosNow                      ;;E86F|E86F+E86F/E86F\E86F;
                      CLC                                       ;;E871|E871+E871/E871\E871;
                      ADC.W DATA_01E793,Y                       ;;E872|E872+E872/E872\E872;
                      STA.B !SpriteYPosLow,X                    ;;E875|E875+E875/E875\E875;
                      LDA.B !PlayerYPosNow+1                    ;;E877|E877+E877/E877\E877;
                      ADC.B #$00                                ;;E879|E879+E879/E879\E879;
                      STA.W !SpriteXPosHigh,X                   ;;E87B|E87B+E87B/E87B\E87B;
                      STZ.B !PlayerInAir                        ;;E87E|E87E+E87E/E87E\E87E;
                      INC.W !StandOnSolidSprite                 ;;E880|E880+E880/E880\E880;
                      INC.W !PlayerInCloud                      ;;E883|E883+E883/E883\E883;
                      LDA.B !byetudlrFrame                      ;;E886|E886+E886/E886\E886;
                      AND.B #$80                                ;;E888|E888+E888/E888\E888;
                      BEQ Return01E897                          ;;E88A|E88A+E88A/E88A\E88A;
                      LDA.B #$C0                                ;;E88C|E88C+E88C/E88C\E88C;
                      STA.B !PlayerYSpeed                       ;;E88E|E88E+E88E/E88E\E88E;
                      LDA.B #$10                                ;;E890|E890+E890/E890\E890;
                      STA.W !SpriteMisc154C,X                   ;;E892|E892+E892/E892\E892;
                      STZ.B !SpriteTableC2,X                    ;;E895|E895+E895/E895\E895;
Return01E897:         RTS                                       ;;E897|E897+E897/E897\E897; Return 
                                                                ;;                        ;
CODE_01E898:          PHY                                       ;;E898|E898+E898/E898\E898;
                      JSR CODE_01E98D                           ;;E899|E899+E899/E899\E899;
                      LDA.B !EffFrame                           ;;E89C|E89C+E89C/E89C\E89C;
                      LSR A                                     ;;E89E|E89E+E89E/E89E\E89E;
                      LSR A                                     ;;E89F|E89F+E89F/E89F\E89F;
                      LSR A                                     ;;E8A0|E8A0+E8A0/E8A0\E8A0;
                      AND.B #$07                                ;;E8A1|E8A1+E8A1/E8A1\E8A1;
                      TAY                                       ;;E8A3|E8A3+E8A3/E8A3\E8A3;
                      LDA.W DATA_01E793,Y                       ;;E8A4|E8A4+E8A4/E8A4\E8A4;
                      STA.B !_0                                 ;;E8A7|E8A7+E8A7/E8A7\E8A7;
                      PLY                                       ;;E8A9|E8A9+E8A9/E8A9\E8A9;
                      LDA.B !SpriteXPosLow,X                    ;;E8AA|E8AA+E8AA/E8AA\E8AA;
                      STA.W !SpriteXPosLow,Y                    ;;E8AC|E8AC+E8AC/E8AC\E8AC;
                      LDA.W !SpriteYPosHigh,X                   ;;E8AF|E8AF+E8AF/E8AF\E8AF;
                      STA.W !SpriteYPosHigh,Y                   ;;E8B2|E8B2+E8B2/E8B2\E8B2;
                      LDA.B !SpriteYPosLow,X                    ;;E8B5|E8B5+E8B5/E8B5\E8B5;
                      SEC                                       ;;E8B7|E8B7+E8B7/E8B7\E8B7;
                      SBC.B !_0                                 ;;E8B8|E8B8+E8B8/E8B8\E8B8;
                      STA.W !SpriteYPosLow,Y                    ;;E8BA|E8BA+E8BA/E8BA\E8BA;
                      LDA.W !SpriteXPosHigh,X                   ;;E8BD|E8BD+E8BD/E8BD\E8BD;
                      SBC.B #$00                                ;;E8C0|E8C0+E8C0/E8C0\E8C0;
                      STA.W !SpriteXPosHigh,Y                   ;;E8C2|E8C2+E8C2/E8C2\E8C2;
                      LDA.B #$10                                ;;E8C5|E8C5+E8C5/E8C5\E8C5;
                      STA.W !SpriteMisc154C,X                   ;;E8C7|E8C7+E8C7/E8C7\E8C7;
LakituCloudGfx:       JSR GetDrawInfoBnk1                       ;;E8CA|E8CA+E8CA/E8CA\E8CA;
                      LDA.W !SpriteOffscreenVert,X              ;;E8CD|E8CD+E8CD/E8CD\E8CD;
                      BNE Return01E897                          ;;E8D0|E8D0+E8D0/E8D0\E8D0;
                      LDA.B #$F8                                ;;E8D2|E8D2+E8D2/E8D2\E8D2;
                      STA.B !_C                                 ;;E8D4|E8D4+E8D4/E8D4\E8D4;
                      LDA.B #$FC                                ;;E8D6|E8D6+E8D6/E8D6\E8D6;
                      STA.B !_D                                 ;;E8D8|E8D8+E8D8/E8D8\E8D8;
                      LDA.B #$00                                ;;E8DA|E8DA+E8DA/E8DA\E8DA;
                      LDY.B !SpriteTableC2,X                    ;;E8DC|E8DC+E8DC/E8DC\E8DC;
                      BNE +                                     ;;E8DE|E8DE+E8DE/E8DE\E8DE;
                      LDA.B #$30                                ;;E8E0|E8E0+E8E0/E8E0\E8E0;
                    + STA.B !_E                                 ;;E8E2|E8E2+E8E2/E8E2\E8E2;
                      STA.W !TileGenerateTrackB                 ;;E8E4|E8E4+E8E4/E8E4\E8E4;
                      ORA.B #$04                                ;;E8E7|E8E7+E8E7/E8E7\E8E7;
                      STA.B !_F                                 ;;E8E9|E8E9+E8E9/E8E9\E8E9;
                      LDA.B !_0                                 ;;E8EB|E8EB+E8EB/E8EB\E8EB;
                      STA.W !BrSwingCenterXPos                  ;;E8ED|E8ED+E8ED/E8ED\E8ED;
                      LDA.B !_1                                 ;;E8F0|E8F0+E8F0/E8F0\E8F0;
                      STA.W !BrSwingCenterYPos                  ;;E8F2|E8F2+E8F2/E8F2\E8F2;
                      LDA.B !EffFrame                           ;;E8F5|E8F5+E8F5/E8F5\E8F5;
                      LSR A                                     ;;E8F7|E8F7+E8F7/E8F7\E8F7;
                      LSR A                                     ;;E8F8|E8F8+E8F8/E8F8\E8F8;
                      AND.B #$0C                                ;;E8F9|E8F9+E8F9/E8F9\E8F9;
                      STA.B !_2                                 ;;E8FB|E8FB+E8FB/E8FB\E8FB;
                      LDA.B #$03                                ;;E8FD|E8FD+E8FD/E8FD\E8FD;
                      STA.B !_3                                 ;;E8FF|E8FF+E8FF/E8FF\E8FF;
CODE_01E901:          LDA.B !_3                                 ;;E901|E901+E901/E901\E901;
                      TAX                                       ;;E903|E903+E903/E903\E903;
                      LDY.B !_C,X                               ;;E904|E904+E904/E904\E904;
                      CLC                                       ;;E906|E906+E906/E906\E906;
                      ADC.B !_2                                 ;;E907|E907+E907/E907\E907;
                      TAX                                       ;;E909|E909+E909/E909\E909;
                      %LorW_X(LDA,DATA_01E76F)                  ;;E90A|E90A+E90A/E90A\E90A;
                      CLC                                       ;;E90E|E90D+E90D/E90D\E90D;
                      ADC.W !BrSwingCenterXPos                  ;;E90F|E90E+E90E/E90E\E90E;
                      STA.W !OAMTileXPos+$100,Y                 ;;E912|E911+E911/E911\E911;
                      %LorW_X(LDA,DATA_01E77F)                  ;;E915|E914+E914/E914\E914;
                      CLC                                       ;;E919|E917+E917/E917\E917;
                      ADC.W !BrSwingCenterYPos                  ;;E91A|E918+E918/E918\E918;
                      STA.W !OAMTileYPos+$100,Y                 ;;E91D|E91B+E91B/E91B\E91B;
                      LDX.W !CurSpriteProcess                   ;;E920|E91E+E91E/E91E\E91E; X = Sprite index 
                      LDA.B #$60                                ;;E923|E921+E921/E921\E921;
                      STA.W !OAMTileNo+$100,Y                   ;;E925|E923+E923/E923\E923;
                      LDA.W !SpriteMisc1540,X                   ;;E928|E926+E926/E926\E926;
                      BEQ +                                     ;;E92B|E929+E929/E929\E929;
                      LSR A                                     ;;E92D|E92B+E92B/E92B\E92B;
                      LSR A                                     ;;E92E|E92C+E92C/E92C\E92C;
                      LSR A                                     ;;E92F|E92D+E92D/E92D\E92D;
                      TAX                                       ;;E930|E92E+E92E/E92E\E92E;
                      LDA.W CloudTiles,X                        ;;E931|E92F+E92F/E92F\E92F;
                      STA.W !OAMTileNo+$100,Y                   ;;E934|E932+E932/E932\E932;
                    + LDA.B !SpriteProperties                   ;;E937|E935+E935/E935\E935;
                      STA.W !OAMTileAttr+$100,Y                 ;;E939|E937+E937/E937\E937;
                      INY                                       ;;E93C|E93A+E93A/E93A\E93A;
                      INY                                       ;;E93D|E93B+E93B/E93B\E93B;
                      INY                                       ;;E93E|E93C+E93C/E93C\E93C;
                      INY                                       ;;E93F|E93D+E93D/E93D\E93D;
                      DEC.B !_3                                 ;;E940|E93E+E93E/E93E\E93E;
                      BPL CODE_01E901                           ;;E942|E940+E940/E940\E940;
                      LDX.W !CurSpriteProcess                   ;;E944|E942+E942/E942\E942; X = Sprite index 
                      LDA.B #$F8                                ;;E947|E945+E945/E945\E945;
                      STA.W !SpriteOAMIndex,X                   ;;E949|E947+E947/E947\E947;
                      LDY.B #$02                                ;;E94C|E94A+E94A/E94A\E94A;
                      LDA.B #$01                                ;;E94E|E94C+E94C/E94C\E94C;
                      JSR FinishOAMWriteRt                      ;;E950|E94E+E94E/E94E\E94E;
                      LDA.W !TileGenerateTrackB                 ;;E953|E951+E951/E951\E951;
                      STA.W !SpriteOAMIndex,X                   ;;E956|E954+E954/E954\E954;
                      LDY.B #$02                                ;;E959|E957+E957/E957\E957;
                      LDA.B #$01                                ;;E95B|E959+E959/E959\E959;
                      JSR FinishOAMWriteRt                      ;;E95D|E95B+E95B/E95B\E95B;
                      LDA.W !SpriteOffscreenX,X                 ;;E960|E95E+E95E/E95E\E95E;
                      BNE Return01E984                          ;;E963|E961+E961/E961\E961;
                      LDA.W !BrSwingCenterXPos                  ;;E965|E963+E963/E963\E963;
                      CLC                                       ;;E968|E966+E966/E966\E966;
                      ADC.B #$04                                ;;E969|E967+E967/E967\E967;
                      STA.W !OAMTileXPos+8                      ;;E96B|E969+E969/E969\E969;
                      LDA.W !BrSwingCenterYPos                  ;;E96E|E96C+E96C/E96C\E96C;
                      CLC                                       ;;E971|E96F+E96F/E96F\E96F;
                      ADC.B #$07                                ;;E972|E970+E970/E970\E970;
                      STA.W !OAMTileYPos+8                      ;;E974|E972+E972/E972\E972;
                      LDA.B #$4D                                ;;E977|E975+E975/E975\E975;
                      STA.W !OAMTileNo+8                        ;;E979|E977+E977/E977\E977;
                      LDA.B #$39                                ;;E97C|E97A+E97A/E97A\E97A;
                      STA.W !OAMTileAttr+8                      ;;E97E|E97C+E97C/E97C\E97C;
                      LDA.B #$00                                ;;E981|E97F+E97F/E97F\E97F;
                      STA.W !OAMTileSize+2                      ;;E983|E981+E981/E981\E981;
Return01E984:         RTS                                       ;;E986|E984+E984/E984\E984; Return 
                                                                ;;                        ;
                                                                ;;                        ;
CloudTiles:           db $66,$64,$62,$60                        ;;E987|E985+E985/E985\E985;
                                                                ;;                        ;
DATA_01E989:          db $20,$E0                                ;;E98B|E989+E989/E989\E989;
                                                                ;;                        ;
DATA_01E98B:          db $10,$F0                                ;;E98D|E98B+E98B/E98B\E98B;
                                                                ;;                        ;
CODE_01E98D:          LDA.B !SpriteLock                         ;;E98F|E98D+E98D/E98D\E98D; \ Branch if sprites locked 
                      BNE Return01E984                          ;;E991|E98F+E98F/E98F\E98F; / 
                      JSR SubHorizPos                           ;;E993|E991+E991/E991\E991;
                      TYA                                       ;;E996|E994+E994/E994\E994;
                      LDY.W !SpriteMisc160E,X                   ;;E997|E995+E995/E995\E995;
                      STA.W !SpriteMisc157C,Y                   ;;E99A|E998+E998/E998\E998;
                      STA.B !_0                                 ;;E99D|E99B+E99B/E99B\E99B;
                      LDY.B !_0                                 ;;E99F|E99D+E99D/E99D\E99D;
                      LDA.W !SpriteWillAppear                   ;;E9A1|E99F+E99F/E99F\E99F;
                      BEQ CODE_01E9BD                           ;;E9A4|E9A2+E9A2/E9A2\E9A2;
                      PHY                                       ;;E9A6|E9A4+E9A4/E9A4\E9A4;
                      PHX                                       ;;E9A7|E9A5+E9A5/E9A5\E9A5;
                      LDA.W !SpriteMisc160E,X                   ;;E9A8|E9A6+E9A6/E9A6\E9A6;
                      TAX                                       ;;E9AB|E9A9+E9A9/E9A9\E9A9;
                      JSR SubOffscreen0Bnk1                     ;;E9AC|E9AA+E9AA/E9AA\E9AA;
                      LDA.W !SpriteStatus,X                     ;;E9AF|E9AD+E9AD/E9AD\E9AD;
                      PLX                                       ;;E9B2|E9B0+E9B0/E9B0\E9B0;
                      CMP.B #$00                                ;;E9B3|E9B1+E9B1/E9B1\E9B1;
                      BNE +                                     ;;E9B5|E9B3+E9B3/E9B3\E9B3;
                      STZ.W !SpriteStatus,X                     ;;E9B7|E9B5+E9B5/E9B5\E9B5;
                    + PLY                                       ;;E9BA|E9B8+E9B8/E9B8\E9B8;
                      TYA                                       ;;E9BB|E9B9+E9B9/E9B9\E9B9;
                      EOR.B #$01                                ;;E9BC|E9BA+E9BA/E9BA\E9BA;
                      TAY                                       ;;E9BE|E9BC+E9BC/E9BC\E9BC;
CODE_01E9BD:          LDA.B !TrueFrame                          ;;E9BF|E9BD+E9BD/E9BD\E9BD;
                      AND.B #$01                                ;;E9C1|E9BF+E9BF/E9BF\E9BF;
                      BNE CODE_01E9E6                           ;;E9C3|E9C1+E9C1/E9C1\E9C1;
                      LDA.B !SpriteXSpeed,X                     ;;E9C5|E9C3+E9C3/E9C3\E9C3;
                      CMP.W DATA_01E989,Y                       ;;E9C7|E9C5+E9C5/E9C5\E9C5;
                      BEQ +                                     ;;E9CA|E9C8+E9C8/E9C8\E9C8;
                      CLC                                       ;;E9CC|E9CA+E9CA/E9CA\E9CA;
                      ADC.W DATA_01EBB4,Y                       ;;E9CD|E9CB+E9CB/E9CB\E9CB;
                      STA.B !SpriteXSpeed,X                     ;;E9D0|E9CE+E9CE/E9CE\E9CE;
                    + LDA.W !SpriteMisc1534,X                   ;;E9D2|E9D0+E9D0/E9D0\E9D0;
                      AND.B #$01                                ;;E9D5|E9D3+E9D3/E9D3\E9D3;
                      TAY                                       ;;E9D7|E9D5+E9D5/E9D5\E9D5;
                      LDA.B !SpriteYSpeed,X                     ;;E9D8|E9D6+E9D6/E9D6\E9D6;
                      CLC                                       ;;E9DA|E9D8+E9D8/E9D8\E9D8;
                      ADC.W DATA_01EBB4,Y                       ;;E9DB|E9D9+E9D9/E9D9\E9D9;
                      STA.B !SpriteYSpeed,X                     ;;E9DE|E9DC+E9DC/E9DC\E9DC;
                      CMP.W DATA_01E98B,Y                       ;;E9E0|E9DE+E9DE/E9DE\E9DE;
                      BNE CODE_01E9E6                           ;;E9E3|E9E1+E9E1/E9E1\E9E1;
                      INC.W !SpriteMisc1534,X                   ;;E9E5|E9E3+E9E3/E9E3\E9E3;
CODE_01E9E6:          LDA.B !SpriteXSpeed,X                     ;;E9E8|E9E6+E9E6/E9E6\E9E6;
                      PHA                                       ;;E9EA|E9E8+E9E8/E9E8\E9E8;
                      LDY.W !SpriteWillAppear                   ;;E9EB|E9E9+E9E9/E9E9\E9E9;
                      BNE +                                     ;;E9EE|E9EC+E9EC/E9EC\E9EC;
                      LDA.W !Layer1DXPos                        ;;E9F0|E9EE+E9EE/E9EE\E9EE;
                      ASL A                                     ;;E9F3|E9F1+E9F1/E9F1\E9F1;
                      ASL A                                     ;;E9F4|E9F2+E9F2/E9F2\E9F2;
                      ASL A                                     ;;E9F5|E9F3+E9F3/E9F3\E9F3;
                      CLC                                       ;;E9F6|E9F4+E9F4/E9F4\E9F4;
                      ADC.B !SpriteXSpeed,X                     ;;E9F7|E9F5+E9F5/E9F5\E9F5;
                      STA.B !SpriteXSpeed,X                     ;;E9F9|E9F7+E9F7/E9F7\E9F7;
                    + JSR SubSprXPosNoGrvty                     ;;E9FB|E9F9+E9F9/E9F9\E9F9;
                      PLA                                       ;;E9FE|E9FC+E9FC/E9FC\E9FC;
                      STA.B !SpriteXSpeed,X                     ;;E9FF|E9FD+E9FD/E9FD\E9FD;
                      JSR SubSprYPosNoGrvty                     ;;EA01|E9FF+E9FF/E9FF\E9FF;
                      LDY.W !SpriteMisc160E,X                   ;;EA04|EA02+EA02/EA02\EA02;
                      LDA.B !TrueFrame                          ;;EA07|EA05+EA05/EA05\EA05;
                      AND.B #$7F                                ;;EA09|EA07+EA07/EA07\EA07;
                      ORA.W !SpriteMisc151C,Y                   ;;EA0B|EA09+EA09/EA09\EA09;
                      BNE +                                     ;;EA0E|EA0C+EA0C/EA0C\EA0C;
                      LDA.B #$20                                ;;EA10|EA0E+EA0E/EA0E\EA0E;
                      STA.W !SpriteMisc1558,Y                   ;;EA12|EA10+EA10/EA10\EA10;
                      JSR CODE_01EA21                           ;;EA15|EA13+EA13/EA13\EA13;
                    + RTS                                       ;;EA18|EA16+EA16/EA16\EA16; Return 
                                                                ;;                        ;
                                                                ;;                        ;
DATA_01EA17:          db $10,$F0                                ;;EA19|EA17+EA17/EA17\EA17;
                                                                ;;                        ;
CODE_01EA19:          PHB                                       ;;EA1B|EA19+EA19/EA19\EA19; Wrapper 
                      PHK                                       ;;EA1C|EA1A+EA1A/EA1A\EA1A;
                      PLB                                       ;;EA1D|EA1B+EA1B/EA1B\EA1B;
                      JSR CODE_01EA21                           ;;EA1E|EA1C+EA1C/EA1C\EA1C;
                      PLB                                       ;;EA21|EA1F+EA1F/EA1F\EA1F;
                      RTL                                       ;;EA22|EA20+EA20/EA20\EA20; Return 
                                                                ;;                        ;
CODE_01EA21:          JSL FindFreeSprSlot                       ;;EA23|EA21+EA21/EA21\EA21; \ Return if no free slots 
                      BMI Return01EA6F                          ;;EA27|EA25+EA25/EA25\EA25; / 
                      LDA.B #$08                                ;;EA29|EA27+EA27/EA27\EA27; \ Sprite status = Normal 
                      STA.W !SpriteStatus,Y                     ;;EA2B|EA29+EA29/EA29\EA29; / 
                      LDA.W !SilverPSwitchTimer                 ;;EA2E|EA2C+EA2C/EA2C\EA2C;
                      CMP.B #$01                                ;;EA31|EA2F+EA2F/EA2F\EA2F;
                      LDA.B #$14                                ;;EA33|EA31+EA31/EA31\EA31;
                      BCC +                                     ;;EA35|EA33+EA33/EA33\EA33;
                      LDA.B #$21                                ;;EA37|EA35+EA35/EA35\EA35;
                    + STA.W !SpriteNumber,Y                     ;;EA39|EA37+EA37/EA37\EA37;
                      LDA.B !SpriteXPosLow,X                    ;;EA3C|EA3A+EA3A/EA3A\EA3A;
                      STA.W !SpriteXPosLow,Y                    ;;EA3E|EA3C+EA3C/EA3C\EA3C;
                      LDA.W !SpriteYPosHigh,X                   ;;EA41|EA3F+EA3F/EA3F\EA3F;
                      STA.W !SpriteYPosHigh,Y                   ;;EA44|EA42+EA42/EA42\EA42;
                      LDA.B !SpriteYPosLow,X                    ;;EA47|EA45+EA45/EA45\EA45;
                      STA.W !SpriteYPosLow,Y                    ;;EA49|EA47+EA47/EA47\EA47;
                      LDA.W !SpriteXPosHigh,X                   ;;EA4C|EA4A+EA4A/EA4A\EA4A;
                      STA.W !SpriteXPosHigh,Y                   ;;EA4F|EA4D+EA4D/EA4D\EA4D;
                      PHX                                       ;;EA52|EA50+EA50/EA50\EA50;
                      TYX                                       ;;EA53|EA51+EA51/EA51\EA51;
                      JSL InitSpriteTables                      ;;EA54|EA52+EA52/EA52\EA52;
                      LDA.B #$D8                                ;;EA58|EA56+EA56/EA56\EA56;
                      STA.B !SpriteYSpeed,X                     ;;EA5A|EA58+EA58/EA58\EA58;
                      JSR SubHorizPos                           ;;EA5C|EA5A+EA5A/EA5A\EA5A;
                      LDA.W DATA_01EA17,Y                       ;;EA5F|EA5D+EA5D/EA5D\EA5D;
                      STA.B !SpriteXSpeed,X                     ;;EA62|EA60+EA60/EA60\EA60;
                      LDA.B !SpriteNumber,X                     ;;EA64|EA62+EA62/EA62\EA62;
                      CMP.B #$21                                ;;EA66|EA64+EA64/EA64\EA64;
                      BNE +                                     ;;EA68|EA66+EA66/EA66\EA66;
                      LDA.B #$02                                ;;EA6A|EA68+EA68/EA68\EA68;
                      STA.W !SpriteOBJAttribute,X               ;;EA6C|EA6A+EA6A/EA6A\EA6A;
                    + TXY                                       ;;EA6F|EA6D+EA6D/EA6D\EA6D;
                      PLX                                       ;;EA70|EA6E+EA6E/EA6E\EA6E;
Return01EA6F:         RTS                                       ;;EA71|EA6F+EA6F/EA6F\EA6F; Return 
                                                                ;;                        ;
CODE_01EA70:          LDX.W !YoshiIsLoose                       ;;EA72|EA70+EA70/EA70\EA70;
                      BEQ +                                     ;;EA75|EA73+EA73/EA73\EA73;
                      STZ.W !ScrShakePlayerYOffset              ;;EA77|EA75+EA75/EA75\EA75;
                      STZ.W !YoshiHasKey                        ;;EA7A|EA78+EA78/EA78\EA78;
                      LDA.W !CurSpriteProcess                   ;;EA7D|EA7B+EA7B/EA7B\EA7B;
                      PHA                                       ;;EA80|EA7E+EA7E/EA7E\EA7E;
                      DEX                                       ;;EA81|EA7F+EA7F/EA7F\EA7F;
                      STX.W !CurSpriteProcess                   ;;EA82|EA80+EA80/EA80\EA80;
                      PHB                                       ;;EA85|EA83+EA83/EA83\EA83;
                      PHK                                       ;;EA86|EA84+EA84/EA84\EA84;
                      PLB                                       ;;EA87|EA85+EA85/EA85\EA85;
                      JSR CODE_01EA8F                           ;;EA88|EA86+EA86/EA86\EA86;
                      PLB                                       ;;EA8B|EA89+EA89/EA89\EA89;
                      PLA                                       ;;EA8C|EA8A+EA8A/EA8A\EA8A;
                      STA.W !CurSpriteProcess                   ;;EA8D|EA8B+EA8B/EA8B\EA8B;
                    + RTL                                       ;;EA90|EA8E+EA8E/EA8E\EA8E; Return 
                                                                ;;                        ;
CODE_01EA8F:          LDA.W !YoshiGrowingTimer                  ;;EA91|EA8F+EA8F/EA8F\EA8F;
                      ORA.W !CutsceneID                         ;;EA94|EA92+EA92/EA92\EA92;
                      BEQ +                                     ;;EA97|EA95+EA95/EA95\EA95;
                      JMP CODE_01EB48                           ;;EA99|EA97+EA97/EA97\EA97;
                                                                ;;                        ;
                    + STZ.W !PlayerDuckingOnYoshi               ;;EA9C|EA9A+EA9A/EA9A\EA9A;
                      LDA.B !SpriteTableC2,X                    ;;EA9F|EA9D+EA9D/EA9D\EA9D;
                      CMP.B #$02                                ;;EAA1|EA9F+EA9F/EA9F\EA9F;
                      BCC CODE_01EAA7                           ;;EAA3|EAA1+EAA1/EAA1\EAA1;
                      LDA.B #$30                                ;;EAA5|EAA3+EAA3/EAA3\EAA3;
                      BRA CODE_01EAB2                           ;;EAA7|EAA5+EAA5/EAA5\EAA5;
                                                                ;;                        ;
CODE_01EAA7:          LDY.B #$00                                ;;EAA9|EAA7+EAA7/EAA7\EAA7;
                      LDA.B !PlayerXSpeed                       ;;EAAB|EAA9+EAA9/EAA9\EAA9; \ Branch if Mario X speed == 0 
                      BEQ CODE_01EADF                           ;;EAAD|EAAB+EAAB/EAAB\EAAB; / 
                      BPL CODE_01EAB2                           ;;EAAF|EAAD+EAAD/EAAD\EAAD; \ If Mario X speed is positive, 
                      EOR.B #$FF                                ;;EAB1|EAAF+EAAF/EAAF\EAAF;  | invert it 
                      INC A                                     ;;EAB3|EAB1+EAB1/EAB1\EAB1; / 
CODE_01EAB2:          LSR A                                     ;;EAB4|EAB2+EAB2/EAB2\EAB2; \ Y = Upper 4 bits of X speed 
                      LSR A                                     ;;EAB5|EAB3+EAB3/EAB3\EAB3;  | 
                      LSR A                                     ;;EAB6|EAB4+EAB4/EAB4\EAB4;  | 
                      LSR A                                     ;;EAB7|EAB5+EAB5/EAB5\EAB5;  | 
                      TAY                                       ;;EAB8|EAB6+EAB6/EAB6\EAB6; / 
                      LDA.B !SpriteLock                         ;;EAB9|EAB7+EAB7/EAB7\EAB7; \ Branch if sprites locked 
                      BNE +                                     ;;EABB|EAB9+EAB9/EAB9\EAB9; / 
                      DEC.W !SpriteMisc1570,X                   ;;EABD|EABB+EABB/EABB\EABB; \ If time to change frame... 
                      BPL +                                     ;;EAC0|EABE+EABE/EABE\EABE;  | 
                      LDA.W DATA_01EDF5,Y                       ;;EAC2|EAC0+EAC0/EAC0\EAC0;  | Set time to display new frame (based on Mario's X speed) 
                      STA.W !SpriteMisc1570,X                   ;;EAC5|EAC3+EAC3/EAC3\EAC3;  | 
                      DEC.W !YoshiWalkingTimer                  ;;EAC8|EAC6+EAC6/EAC6\EAC6;  | Set index to new frame, $18AD = ($18AD-1) % 3 
                      BPL +                                     ;;EACB|EAC9+EAC9/EAC9\EAC9;  | 
                      LDA.B #$02                                ;;EACD|EACB+EACB/EACB\EACB;  | 
                      STA.W !YoshiWalkingTimer                  ;;EACF|EACD+EACD/EACD\EACD; / 
                    + LDY.W !YoshiWalkingTimer                  ;;EAD2|EAD0+EAD0/EAD0\EAD0; \ Y = frame to show 
                      LDA.W YoshiWalkFrames,Y                   ;;EAD5|EAD3+EAD3/EAD3\EAD3;  | 
                      TAY                                       ;;EAD8|EAD6+EAD6/EAD6\EAD6; / 
                      LDA.B !SpriteTableC2,X                    ;;EAD9|EAD7+EAD7/EAD7\EAD7;
                      CMP.B #$02                                ;;EADB|EAD9+EAD9/EAD9\EAD9;
                      BCS CODE_01EB2E                           ;;EADD|EADB+EADB/EADB\EADB;
                      BRA +                                     ;;EADF|EADD+EADD/EADD\EADD;
                                                                ;;                        ;
CODE_01EADF:          STZ.W !SpriteMisc1570,X                   ;;EAE1|EADF+EADF/EADF\EADF;
                    + LDA.B !PlayerInAir                        ;;EAE4|EAE2+EAE2/EAE2\EAE2;
                      BEQ +                                     ;;EAE6|EAE4+EAE4/EAE4\EAE4;
                      LDY.B #$02                                ;;EAE8|EAE6+EAE6/EAE6\EAE6;
                      LDA.B !PlayerYSpeed                       ;;EAEA|EAE8+EAE8/EAE8\EAE8;
                      BPL +                                     ;;EAEC|EAEA+EAEA/EAEA\EAEA;
                      LDY.B #$05                                ;;EAEE|EAEC+EAEC/EAEC\EAEC;
                      BRA +                                     ;;EAF0|EAEE+EAEE/EAEE\EAEE;
                                                                ;;                        ;
                    + LDA.W !SpriteMisc15AC,X                   ;;EAF2|EAF0+EAF0/EAF0\EAF0;
                      BEQ +                                     ;;EAF5|EAF3+EAF3/EAF3\EAF3;
                      LDY.B #$03                                ;;EAF7|EAF5+EAF5/EAF5\EAF5;
                    + LDA.B !PlayerInAir                        ;;EAF9|EAF7+EAF7/EAF7\EAF7;
                      BNE CODE_01EB21                           ;;EAFB|EAF9+EAF9/EAF9\EAF9;
                      LDA.W !SpriteMisc151C,X                   ;;EAFD|EAFB+EAFB/EAFB\EAFB;
                      BEQ CODE_01EB0C                           ;;EB00|EAFE+EAFE/EAFE\EAFE;
                      LDY.B #$07                                ;;EB02|EB00+EB00/EB00\EB00;
                      LDA.B !byetudlrHold                       ;;EB04|EB02+EB02/EB02\EB02;
                      AND.B #$08                                ;;EB06|EB04+EB04/EB04\EB04;
                      BEQ +                                     ;;EB08|EB06+EB06/EB06\EB06;
                      LDY.B #$06                                ;;EB0A|EB08+EB08/EB08\EB08;
                    + BRA CODE_01EB21                           ;;EB0C|EB0A+EB0A/EB0A\EB0A;
                                                                ;;                        ;
CODE_01EB0C:          LDA.W !YoshiDuckTimer                     ;;EB0E|EB0C+EB0C/EB0C\EB0C;
                      BEQ CODE_01EB16                           ;;EB11|EB0F+EB0F/EB0F\EB0F;
                      DEC.W !YoshiDuckTimer                     ;;EB13|EB11+EB11/EB11\EB11;
                      BRA CODE_01EB1C                           ;;EB16|EB14+EB14/EB14\EB14;
                                                                ;;                        ;
CODE_01EB16:          LDA.B !byetudlrHold                       ;;EB18|EB16+EB16/EB16\EB16;
                      AND.B #$04                                ;;EB1A|EB18+EB18/EB18\EB18;
                      BEQ CODE_01EB21                           ;;EB1C|EB1A+EB1A/EB1A\EB1A;
CODE_01EB1C:          LDY.B #$04                                ;;EB1E|EB1C+EB1C/EB1C\EB1C;
                      INC.W !PlayerDuckingOnYoshi               ;;EB20|EB1E+EB1E/EB1E\EB1E;
CODE_01EB21:          LDA.B !SpriteTableC2,X                    ;;EB23|EB21+EB21/EB21\EB21;
                      CMP.B #$01                                ;;EB25|EB23+EB23/EB23\EB23;
                      BEQ CODE_01EB2E                           ;;EB27|EB25+EB25/EB25\EB25;
                      LDA.W !SpriteMisc151C,X                   ;;EB29|EB27+EB27/EB27\EB27;
                      BNE CODE_01EB2E                           ;;EB2C|EB2A+EB2A/EB2A\EB2A;
                      LDY.B #$04                                ;;EB2E|EB2C+EB2C/EB2C\EB2C;
CODE_01EB2E:          LDA.W !PlayerRidingYoshi                  ;;EB30|EB2E+EB2E/EB2E\EB2E;
                      BEQ +                                     ;;EB33|EB31+EB31/EB31\EB31;
                      LDA.W !YoshiInPipeSetting                 ;;EB35|EB33+EB33/EB33\EB33;
                      CMP.B #$01                                ;;EB38|EB36+EB36/EB36\EB36;
                      BNE +                                     ;;EB3A|EB38+EB38/EB38\EB38;
                      LDA.B !TrueFrame                          ;;EB3C|EB3A+EB3A/EB3A\EB3A;
                      AND.B #$08                                ;;EB3E|EB3C+EB3C/EB3C\EB3C;
                      LSR A                                     ;;EB40|EB3E+EB3E/EB3E\EB3E;
                      LSR A                                     ;;EB41|EB3F+EB3F/EB3F\EB3F;
                      LSR A                                     ;;EB42|EB40+EB40/EB40\EB40;
                      ADC.B #$08                                ;;EB43|EB41+EB41/EB41\EB41;
                      TAY                                       ;;EB45|EB43+EB43/EB43\EB43;
                    + TYA                                       ;;EB46|EB44+EB44/EB44\EB44;
                      STA.W !SpriteMisc1602,X                   ;;EB47|EB45+EB45/EB45\EB45;
CODE_01EB48:          LDA.B !SpriteTableC2,X                    ;;EB4A|EB48+EB48/EB48\EB48;
                      CMP.B #$01                                ;;EB4C|EB4A+EB4A/EB4A\EB4A;
                      BNE CODE_01EB97                           ;;EB4E|EB4C+EB4C/EB4C\EB4C;
                      LDY.W !SpriteMisc157C,X                   ;;EB50|EB4E+EB4E/EB4E\EB4E;
                      LDA.B !PlayerXPosNext                     ;;EB53|EB51+EB51/EB51\EB51;
                      CLC                                       ;;EB55|EB53+EB53/EB53\EB53;
                      ADC.W YoshiPositionX,Y                    ;;EB56|EB54+EB54/EB54\EB54;
                      STA.B !SpriteXPosLow,X                    ;;EB59|EB57+EB57/EB57\EB57;
                      LDA.B !PlayerXPosNext+1                   ;;EB5B|EB59+EB59/EB59\EB59;
                      ADC.W DATA_01EDF3,Y                       ;;EB5D|EB5B+EB5B/EB5B\EB5B;
                      STA.W !SpriteYPosHigh,X                   ;;EB60|EB5E+EB5E/EB5E\EB5E;
                      LDY.W !SpriteMisc1602,X                   ;;EB63|EB61+EB61/EB61\EB61;
                      LDA.B !PlayerYPosNext                     ;;EB66|EB64+EB64/EB64\EB64;
                      CLC                                       ;;EB68|EB66+EB66/EB66\EB66;
                      ADC.B #$10                                ;;EB69|EB67+EB67/EB67\EB67;
                      STA.B !SpriteYPosLow,X                    ;;EB6B|EB69+EB69/EB69\EB69;
                      LDA.B !PlayerYPosNext+1                   ;;EB6D|EB6B+EB6B/EB6B\EB6B;
                      ADC.B #$00                                ;;EB6F|EB6D+EB6D/EB6D\EB6D;
                      STA.W !SpriteXPosHigh,X                   ;;EB71|EB6F+EB6F/EB6F\EB6F;
                      LDA.W DATA_01EDE4,Y                       ;;EB74|EB72+EB72/EB72\EB72;
                      STA.W !ScrShakePlayerYOffset              ;;EB77|EB75+EB75/EB75\EB75;
                      LDA.B #$01                                ;;EB7A|EB78+EB78/EB78\EB78;
                      LDY.W !SpriteMisc1602,X                   ;;EB7C|EB7A+EB7A/EB7A\EB7A;
                      CPY.B #$03                                ;;EB7F|EB7D+EB7D/EB7D\EB7D;
                      BNE +                                     ;;EB81|EB7F+EB7F/EB7F\EB7F;
                      INC A                                     ;;EB83|EB81+EB81/EB81\EB81;
                    + STA.W !PlayerRidingYoshi                  ;;EB84|EB82+EB82/EB82\EB82;
                      LDA.B #$01                                ;;EB87|EB85+EB85/EB85\EB85;
                      STA.W !CarryYoshiThruLvls                 ;;EB89|EB87+EB87/EB87\EB87;
                      LDA.W !SpriteOBJAttribute,X               ;;EB8C|EB8A+EB8A/EB8A\EB8A; \ $13C7 = Yoshi palette 
                      STA.W !YoshiColor                         ;;EB8F|EB8D+EB8D/EB8D\EB8D; / 
                      LDA.W !SpriteMisc157C,X                   ;;EB92|EB90+EB90/EB90\EB90;
                      EOR.B #$01                                ;;EB95|EB93+EB93/EB93\EB93;
                      STA.B !PlayerDirection                    ;;EB97|EB95+EB95/EB95\EB95;
CODE_01EB97:          LDA.B !SpriteProperties                   ;;EB99|EB97+EB97/EB97\EB97;
                      PHA                                       ;;EB9B|EB99+EB99/EB99\EB99;
                      LDA.W !PlayerRidingYoshi                  ;;EB9C|EB9A+EB9A/EB9A\EB9A;
                      BEQ CODE_01EBAD                           ;;EB9F|EB9D+EB9D/EB9D\EB9D;
                      LDA.W !YoshiInPipeSetting                 ;;EBA1|EB9F+EB9F/EB9F\EB9F;
                      BEQ CODE_01EBAD                           ;;EBA4|EBA2+EBA2/EBA2\EBA2;
                      LDA.W !DrawYoshiInPipe                    ;;EBA6|EBA4+EBA4/EBA4\EBA4;
                      BNE +                                     ;;EBA9|EBA7+EBA7/EBA7\EBA7;
                      LDA.B #$10                                ;;EBAB|EBA9+EBA9/EBA9\EBA9;
                      STA.B !SpriteProperties                   ;;EBAD|EBAB+EBAB/EBAB\EBAB;
CODE_01EBAD:          JSR HandleOffYoshi                        ;;EBAF|EBAD+EBAD/EBAD\EBAD;
                    + PLA                                       ;;EBB2|EBB0+EBB0/EBB0\EBB0;
                      STA.B !SpriteProperties                   ;;EBB3|EBB1+EBB1/EBB1\EBB1;
                      RTS                                       ;;EBB5|EBB3+EBB3/EBB3\EBB3; Return 
                                                                ;;                        ;
                                                                ;;                        ;
DATA_01EBB4:          db $01,$FF,$01,$00,$FF,$00,$20,$E0        ;;EBB6|EBB4+EBB4/EBB4\EBB4;
                      db $0A,$0E                                ;;EBBE|EBBC+EBBC/EBBC\EBBC;
                                                                ;;                        ;
DATA_01EBBE:          db $E8,$18                                ;;EBC0|EBBE+EBBE/EBBE\EBBE;
                                                                ;;                        ;
DATA_01EBC0:          db $10,$F0                                ;;EBC2|EBC0+EBC0/EBC0\EBC0;
                                                                ;;                        ;
GrowingAniSequence:   db $0C,$0B,$0C,$0B,$0A,$0B,$0A,$0B        ;;EBC4|EBC2+EBC2/EBC2\EBC2;
                                                                ;;                        ;
Yoshi:                STZ.W !PlayerIsFrozen                     ;;EBCC|EBCA+EBCA/EBCA\EBCA;
                      LDA.W !YoshiHasWingsEvt                   ;;EBCF|EBCD+EBCD/EBCD\EBCD; \ $1410 = winged Yoshi flag 
                      STA.W !YoshiHasWingsGfx                   ;;EBD2|EBD0+EBD0/EBD0\EBD0; / 
                      STZ.W !YoshiHasWingsEvt                   ;;EBD5|EBD3+EBD3/EBD3\EBD3; Clear real winged Yoshi flag 
                      STZ.W !YoshiCanStomp                      ;;EBD8|EBD6+EBD6/EBD6\EBD6; Clear stomp Yoshi flag 
                      STZ.W !Empty191B                          ;;EBDB|EBD9+EBD9/EBD9\EBD9;
                      LDA.W !SpriteStatus,X                     ;;EBDE|EBDC+EBDC/EBDC\EBDC; \ Branch if normal Yoshi status 
                      CMP.B #$08                                ;;EBE1|EBDF+EBDF/EBDF\EBDF;  | 
                      BEQ +                                     ;;EBE3|EBE1+EBE1/EBE1\EBE1; / 
                      STZ.W !CarryYoshiThruLvls                 ;;EBE5|EBE3+EBE3/EBE3\EBE3; Mario won't have Yoshi when returning to OW 
                      JMP HandleOffYoshi                        ;;EBE8|EBE6+EBE6/EBE6\EBE6;
                                                                ;;                        ;
                    + TXA                                       ;;EBEB|EBE9+EBE9/EBE9\EBE9;
                      INC A                                     ;;EBEC|EBEA+EBEA/EBEA\EBEA;
                      STA.W !CurrentYoshiSlot                   ;;EBED|EBEB+EBEB/EBEB\EBEB;
                      LDA.W !PlayerRidingYoshi                  ;;EBF0|EBEE+EBEE/EBEE\EBEE;
                      BNE CODE_01EC04                           ;;EBF3|EBF1+EBF1/EBF1\EBF1;
                      JSR SubOffscreen0Bnk1                     ;;EBF5|EBF3+EBF3/EBF3\EBF3;
                      LDA.W !SpriteStatus,X                     ;;EBF8|EBF6+EBF6/EBF6\EBF6;
                      BNE CODE_01EC04                           ;;EBFB|EBF9+EBF9/EBF9\EBF9;
                      LDA.W !YoshiHeavenFlag                    ;;EBFD|EBFB+EBFB/EBFB\EBFB;
                      BNE +                                     ;;EC00|EBFE+EBFE/EBFE\EBFE;
                      STZ.W !CarryYoshiThruLvls                 ;;EC02|EC00+EC00/EC00\EC00;
                    + RTS                                       ;;EC05|EC03+EC03/EC03\EC03; Return 
                                                                ;;                        ;
CODE_01EC04:          LDA.W !PlayerRidingYoshi                  ;;EC06|EC04+EC04/EC04\EC04;
                      BEQ CODE_01EC0E                           ;;EC09|EC07+EC07/EC07\EC07;
                      LDA.W !YoshiInPipeSetting                 ;;EC0B|EC09+EC09/EC09\EC09;
                      BNE CODE_01EC61                           ;;EC0E|EC0C+EC0C/EC0C\EC0C;
CODE_01EC0E:          LDA.W !EggLaidTimer                       ;;EC10|EC0E+EC0E/EC0E\EC0E;
                      BNE CODE_01EC61                           ;;EC13|EC11+EC11/EC11\EC11;
                      LDA.W !YoshiGrowingTimer                  ;;EC15|EC13+EC13/EC13\EC13;
                      BEQ CODE_01EC4C                           ;;EC18|EC16+EC16/EC16\EC16;
                      DEC.W !YoshiGrowingTimer                  ;;EC1A|EC18+EC18/EC18\EC18;
                      STA.B !SpriteLock                         ;;EC1D|EC1B+EC1B/EC1B\EC1B;
                      STA.W !PlayerIsFrozen                     ;;EC1F|EC1D+EC1D/EC1D\EC1D;
                      CMP.B #$01                                ;;EC22|EC20+EC20/EC20\EC20;
                      BNE +                                     ;;EC24|EC22+EC22/EC22\EC22;
                      STZ.B !SpriteLock                         ;;EC26|EC24+EC24/EC24\EC24;
                      STZ.W !PlayerIsFrozen                     ;;EC28|EC26+EC26/EC26\EC26;
                      LDY.W !PlayerTurnLvl                      ;;EC2B|EC29+EC29/EC29\EC29;
                      LDA.W !OWPlayerSubmap,Y                   ;;EC2E|EC2C+EC2C/EC2C\EC2C;
                      DEC A                                     ;;EC31|EC2F+EC2F/EC2F\EC2F;
                      ORA.W !YoshiSavedFlag                     ;;EC32|EC30+EC30/EC30\EC30;
                      ORA.W !OverworldOverride                  ;;EC35|EC33+EC33/EC33\EC33;
                      BNE +                                     ;;EC38|EC36+EC36/EC36\EC36;
                      INC.W !YoshiSavedFlag                     ;;EC3A|EC38+EC38/EC38\EC38;
                      LDA.B #$03                                ;;EC3D|EC3B+EC3B/EC3B\EC3B;
                      STA.W !MessageBoxTrigger                  ;;EC3F|EC3D+EC3D/EC3D\EC3D;
                    + DEC A                                     ;;EC42|EC40+EC40/EC40\EC40;
                      LSR A                                     ;;EC43|EC41+EC41/EC41\EC41;
                      LSR A                                     ;;EC44|EC42+EC42/EC42\EC42;
                      LSR A                                     ;;EC45|EC43+EC43/EC43\EC43;
                      TAY                                       ;;EC46|EC44+EC44/EC44\EC44;
                      LDA.W GrowingAniSequence,Y                ;;EC47|EC45+EC45/EC45\EC45; \ Set image to appropriate frame 
                      STA.W !SpriteMisc1602,X                   ;;EC4A|EC48+EC48/EC48\EC48; / 
                      RTS                                       ;;EC4D|EC4B+EC4B/EC4B\EC4B; Return 
                                                                ;;                        ;
CODE_01EC4C:          LDA.B !SpriteLock                         ;;EC4E|EC4C+EC4C/EC4C\EC4C;
                      BEQ CODE_01EC61                           ;;EC50|EC4E+EC4E/EC4E\EC4E;
CODE_01EC50:          LDY.W !PlayerRidingYoshi                  ;;EC52|EC50+EC50/EC50\EC50;
                      BEQ +                                     ;;EC55|EC53+EC53/EC53\EC53;
                      LDY.B #$06                                ;;EC57|EC55+EC55/EC55\EC55;
                      STY.W !ScrShakePlayerYOffset              ;;EC59|EC57+EC57/EC57\EC57;
                    + RTS                                       ;;EC5C|EC5A+EC5A/EC5A\EC5A; Return 
                                                                ;;                        ;
                                                                ;;                        ;
DATA_01EC5B:          db $F0,$10                                ;;EC5D|EC5B+EC5B/EC5B\EC5B;
                                                                ;;                        ;
DATA_01EC5D:          db $FA,$06                                ;;EC5F|EC5D+EC5D/EC5D\EC5D;
                                                                ;;                        ;
DATA_01EC5F:          db $FF,$00                                ;;EC61|EC5F+EC5F/EC5F\EC5F;
                                                                ;;                        ;
CODE_01EC61:          LDA.B !PlayerInAir                        ;;EC63|EC61+EC61/EC61\EC61;
                      BNE CODE_01EC6A                           ;;EC65|EC63+EC63/EC63\EC63;
                      LDA.W !EggLaidTimer                       ;;EC67|EC65+EC65/EC65\EC65;
                      BNE +                                     ;;EC6A|EC68+EC68/EC68\EC68;
CODE_01EC6A:          JMP CODE_01ECE1                           ;;EC6C|EC6A+EC6A/EC6A\EC6A;
                                                                ;;                        ;
                    + DEC.W !EggLaidTimer                       ;;EC6F|EC6D+EC6D/EC6D\EC6D;
                      CMP.B #$01                                ;;EC72|EC70+EC70/EC70\EC70;
                      BNE CODE_01EC78                           ;;EC74|EC72+EC72/EC72\EC72;
                      STZ.B !SpriteLock                         ;;EC76|EC74+EC74/EC74\EC74;
                      BRA CODE_01EC6A                           ;;EC78|EC76+EC76/EC76\EC76;
                                                                ;;                        ;
CODE_01EC78:          INC.W !PlayerIsFrozen                     ;;EC7A|EC78+EC78/EC78\EC78;
                      JSR CODE_01EC50                           ;;EC7D|EC7B+EC7B/EC7B\EC7B;
                      STY.B !SpriteLock                         ;;EC80|EC7E+EC7E/EC7E\EC7E;
                      CMP.B #$02                                ;;EC82|EC80+EC80/EC80\EC80;
                      BNE Return01EC8A                          ;;EC84|EC82+EC82/EC82\EC82;
                      JSL FindFreeSprSlot                       ;;EC86|EC84+EC84/EC84\EC84; \ Return if no free slots 
                      BPL +                                     ;;EC8A|EC88+EC88/EC88\EC88;  | 
Return01EC8A:         RTS                                       ;;EC8C|EC8A+EC8A/EC8A\EC8A; / 
                                                                ;;                        ;
                    + LDA.B #$09                                ;;EC8D|EC8B+EC8B/EC8B\EC8B; \ Sprite status = Carryable 
                      STA.W !SpriteStatus,Y                     ;;EC8F|EC8D+EC8D/EC8D\EC8D; / 
                      LDA.B #$2C                                ;;EC92|EC90+EC90/EC90\EC90;
                      STA.W !SpriteNumber,Y                     ;;EC94|EC92+EC92/EC92\EC92;
                      PHY                                       ;;EC97|EC95+EC95/EC95\EC95;
                      PHY                                       ;;EC98|EC96+EC96/EC96\EC96;
                      LDY.W !SpriteMisc157C,X                   ;;EC99|EC97+EC97/EC97\EC97;
                      STY.B !_F                                 ;;EC9C|EC9A+EC9A/EC9A\EC9A;
                      LDA.B !SpriteXPosLow,X                    ;;EC9E|EC9C+EC9C/EC9C\EC9C;
                      CLC                                       ;;ECA0|EC9E+EC9E/EC9E\EC9E;
                      ADC.W DATA_01EC5D,Y                       ;;ECA1|EC9F+EC9F/EC9F\EC9F;
                      PLY                                       ;;ECA4|ECA2+ECA2/ECA2\ECA2;
                      STA.W !SpriteXPosLow,Y                    ;;ECA5|ECA3+ECA3/ECA3\ECA3;
                      LDY.W !SpriteMisc157C,X                   ;;ECA8|ECA6+ECA6/ECA6\ECA6;
                      LDA.W !SpriteYPosHigh,X                   ;;ECAB|ECA9+ECA9/ECA9\ECA9;
                      ADC.W DATA_01EC5F,Y                       ;;ECAE|ECAC+ECAC/ECAC\ECAC;
                      PLY                                       ;;ECB1|ECAF+ECAF/ECAF\ECAF;
                      STA.W !SpriteYPosHigh,Y                   ;;ECB2|ECB0+ECB0/ECB0\ECB0;
                      LDA.B !SpriteYPosLow,X                    ;;ECB5|ECB3+ECB3/ECB3\ECB3;
                      CLC                                       ;;ECB7|ECB5+ECB5/ECB5\ECB5;
                      ADC.B #$08                                ;;ECB8|ECB6+ECB6/ECB6\ECB6;
                      STA.W !SpriteYPosLow,Y                    ;;ECBA|ECB8+ECB8/ECB8\ECB8;
                      LDA.W !SpriteXPosHigh,X                   ;;ECBD|ECBB+ECBB/ECBB\ECBB;
                      ADC.B #$00                                ;;ECC0|ECBE+ECBE/ECBE\ECBE;
                      STA.W !SpriteXPosHigh,Y                   ;;ECC2|ECC0+ECC0/ECC0\ECC0;
                      PHX                                       ;;ECC5|ECC3+ECC3/ECC3\ECC3;
                      TYX                                       ;;ECC6|ECC4+ECC4/ECC4\ECC4;
                      JSL InitSpriteTables                      ;;ECC7|ECC5+ECC5/ECC5\ECC5;
                      LDY.B !_F                                 ;;ECCB|ECC9+ECC9/ECC9\ECC9;
                      LDA.W DATA_01EC5B,Y                       ;;ECCD|ECCB+ECCB/ECCB\ECCB;
                      STA.B !SpriteXSpeed,X                     ;;ECD0|ECCE+ECCE/ECCE\ECCE;
                      LDA.B #$F0                                ;;ECD2|ECD0+ECD0/ECD0\ECD0;
                      STA.B !SpriteYSpeed,X                     ;;ECD4|ECD2+ECD2/ECD2\ECD2;
                      LDA.B #$10                                ;;ECD6|ECD4+ECD4/ECD4\ECD4;
                      STA.W !SpriteMisc154C,X                   ;;ECD8|ECD6+ECD6/ECD6\ECD6;
                      LDA.W !YoshiEggSpriteHatch                ;;ECDB|ECD9+ECD9/ECD9\ECD9;
                      STA.W !SpriteMisc151C,X                   ;;ECDE|ECDC+ECDC/ECDC\ECDC;
                      PLX                                       ;;ECE1|ECDF+ECDF/ECDF\ECDF;
                      RTS                                       ;;ECE2|ECE0+ECE0/ECE0\ECE0; Return 
                                                                ;;                        ;
CODE_01ECE1:          LDA.B !SpriteTableC2,X                    ;;ECE3|ECE1+ECE1/ECE1\ECE1;
                      CMP.B #$01                                ;;ECE5|ECE3+ECE3/ECE3\ECE3;
                      BNE +                                     ;;ECE7|ECE5+ECE5/ECE5\ECE5;
                      JMP CODE_01ED70                           ;;ECE9|ECE7+ECE7/ECE7\ECE7;
                                                                ;;                        ;
                    + JSR SubUpdateSprPos                       ;;ECEC|ECEA+ECEA/ECEA\ECEA;
                      JSR IsOnGround                            ;;ECEF|ECED+ECED/ECED\ECED;
                      BEQ +                                     ;;ECF2|ECF0+ECF0/ECF0\ECF0;
                      JSR SetSomeYSpeed__                       ;;ECF4|ECF2+ECF2/ECF2\ECF2;
                      LDA.B !SpriteTableC2,X                    ;;ECF7|ECF5+ECF5/ECF5\ECF5;
                      CMP.B #$02                                ;;ECF9|ECF7+ECF7/ECF7\ECF7;
                      BCS +                                     ;;ECFB|ECF9+ECF9/ECF9\ECF9;
                      STZ.B !SpriteXSpeed,X                     ;;ECFD|ECFB+ECFB/ECFB\ECFB; Sprite X Speed = 0 
                      LDA.B #$F0                                ;;ECFF|ECFD+ECFD/ECFD\ECFD;
                      STA.B !SpriteYSpeed,X                     ;;ED01|ECFF+ECFF/ECFF\ECFF;
                    + JSR UpdateDirection                       ;;ED03|ED01+ED01/ED01\ED01;
                      JSR IsTouchingObjSide                     ;;ED06|ED04+ED04/ED04\ED04;
                      BEQ +                                     ;;ED09|ED07+ED07/ED07\ED07;
                      JSR CODE_0190A2                           ;;ED0B|ED09+ED09/ED09\ED09;
                    + LDA.B #$04                                ;;ED0E|ED0C+ED0C/ED0C\ED0C;
                      CLC                                       ;;ED10|ED0E+ED0E/ED0E\ED0E;
                      ADC.B !SpriteXPosLow,X                    ;;ED11|ED0F+ED0F/ED0F\ED0F;
                      STA.B !_4                                 ;;ED13|ED11+ED11/ED11\ED11;
                      LDA.W !SpriteYPosHigh,X                   ;;ED15|ED13+ED13/ED13\ED13;
                      ADC.B #$00                                ;;ED18|ED16+ED16/ED16\ED16;
                      STA.B !_A                                 ;;ED1A|ED18+ED18/ED18\ED18;
                      LDA.B #$13                                ;;ED1C|ED1A+ED1A/ED1A\ED1A;
                      CLC                                       ;;ED1E|ED1C+ED1C/ED1C\ED1C;
                      ADC.B !SpriteYPosLow,X                    ;;ED1F|ED1D+ED1D/ED1D\ED1D;
                      STA.B !_5                                 ;;ED21|ED1F+ED1F/ED1F\ED1F;
                      LDA.W !SpriteXPosHigh,X                   ;;ED23|ED21+ED21/ED21\ED21;
                      ADC.B #$00                                ;;ED26|ED24+ED24/ED24\ED24;
                      STA.B !_B                                 ;;ED28|ED26+ED26/ED26\ED26;
                      LDA.B #$08                                ;;ED2A|ED28+ED28/ED28\ED28;
                      STA.B !_7                                 ;;ED2C|ED2A+ED2A/ED2A\ED2A;
                      STA.B !_6                                 ;;ED2E|ED2C+ED2C/ED2C\ED2C;
                      JSL GetMarioClipping                      ;;ED30|ED2E+ED2E/ED2E\ED2E;
                      JSL CheckForContact                       ;;ED34|ED32+ED32/ED32\ED32;
                      BCC CODE_01ED70                           ;;ED38|ED36+ED36/ED36\ED36;
                      LDA.B !PlayerInAir                        ;;ED3A|ED38+ED38/ED38\ED38;
                      BEQ CODE_01ED70                           ;;ED3C|ED3A+ED3A/ED3A\ED3A;
                      LDA.W !CarryingFlag                       ;;ED3E|ED3C+ED3C/ED3C\ED3C; \ Branch if carrying an enemy... 
                      ORA.W !PlayerRidingYoshi                  ;;ED41|ED3F+ED3F/ED3F\ED3F;  | ...or if on Yoshi 
                      BNE CODE_01ED70                           ;;ED44|ED42+ED42/ED42\ED42; / 
                      LDA.B !PlayerYSpeed                       ;;ED46|ED44+ED44/ED44\ED44; \ Branch if upward speed 
                      BMI CODE_01ED70                           ;;ED48|ED46+ED46/ED46\ED46; / 
                      LDY.B #$01                                ;;ED4A|ED48+ED48/ED48\ED48;
                      JSR CODE_01EDCE                           ;;ED4C|ED4A+ED4A/ED4A\ED4A;
                      STZ.B !PlayerXSpeed                       ;;ED4F|ED4D+ED4D/ED4D\ED4D; \ Mario's speed = 0 
                      STZ.B !PlayerYSpeed                       ;;ED51|ED4F+ED4F/ED4F\ED4F; / 
                      LDA.B #$0C                                ;;ED53|ED51+ED51/ED51\ED51;
                      STA.W !YoshiDuckTimer                     ;;ED55|ED53+ED53/ED53\ED53;
                      LDA.B #$01                                ;;ED58|ED56+ED56/ED56\ED56;
                      STA.B !SpriteTableC2,X                    ;;ED5A|ED58+ED58/ED58\ED58;
                      LDA.B #!SFX_YOSHIDRUMON                   ;;ED5C|ED5A+ED5A/ED5A\ED5A; \ Play sound effect 
                      STA.W !SPCIO1                             ;;ED5E|ED5C+ED5C/ED5C\ED5C; / 
                      LDA.B #!SFX_YOSHI                         ;;ED61|ED5F+ED5F/ED5F\ED5F; \ Play sound effect 
                      STA.W !SPCIO3                             ;;ED63|ED61+ED61/ED61\ED61; / 
                      JSL DisabledAddSmokeRt                    ;;ED66|ED64+ED64/ED64\ED64;
                      LDA.B #$20                                ;;ED6A|ED68+ED68/ED68\ED68;
                      STA.W !SpriteMisc163E,X                   ;;ED6C|ED6A+ED6A/ED6A\ED6A;
                      INC.W !SpriteStompCounter                 ;;ED6F|ED6D+ED6D/ED6D\ED6D;
CODE_01ED70:          LDA.B !SpriteTableC2,X                    ;;ED72|ED70+ED70/ED70\ED70;
                      CMP.B #$01                                ;;ED74|ED72+ED72/ED72\ED72;
                      BNE Return01EDCB                          ;;ED76|ED74+ED74/ED74\ED74;
                      JSR CODE_01F622                           ;;ED78|ED76+ED76/ED76\ED76;
                      LDA.B !byetudlrHold                       ;;ED7B|ED79+ED79/ED79\ED79;
                      AND.B #$03                                ;;ED7D|ED7B+ED7B/ED7B\ED7B;
                      BEQ +                                     ;;ED7F|ED7D+ED7D/ED7D\ED7D;
                      DEC A                                     ;;ED81|ED7F+ED7F/ED7F\ED7F;
                      CMP.W !SpriteMisc157C,X                   ;;ED82|ED80+ED80/ED80\ED80;
                      BEQ +                                     ;;ED85|ED83+ED83/ED83\ED83;
                      LDA.W !SpriteMisc15AC,X                   ;;ED87|ED85+ED85/ED85\ED85;
                      ORA.W !SpriteMisc151C,X                   ;;ED8A|ED88+ED88/ED88\ED88;
                      ORA.W !PlayerDuckingOnYoshi               ;;ED8D|ED8B+ED8B/ED8B\ED8B;
                      BNE +                                     ;;ED90|ED8E+ED8E/ED8E\ED8E;
                      LDA.B #$10                                ;;ED92|ED90+ED90/ED90\ED90; \ Set turning timer 
                      STA.W !SpriteMisc15AC,X                   ;;ED94|ED92+ED92/ED92\ED92; / 
                    + LDA.W !PBalloonInflating                  ;;ED97|ED95+ED95/ED95\ED95;
                      BNE CODE_01ED9E                           ;;ED9A|ED98+ED98/ED98\ED98;
                      BIT.B !axlr0000Frame                      ;;ED9C|ED9A+ED9A/ED9A\ED9A;
                      BPL Return01EDCB                          ;;ED9E|ED9C+ED9C/ED9C\ED9C;
CODE_01ED9E:          LDA.B #$02                                ;;EDA0|ED9E+ED9E/ED9E\ED9E;
                      STA.W !SpriteMisc1FE2,X                   ;;EDA2|EDA0+EDA0/EDA0\EDA0;
                      STZ.B !SpriteTableC2,X                    ;;EDA5|EDA3+EDA3/EDA3\EDA3;
                      LDA.B #!SFX_YOSHIDRUMOFF                  ;;EDA7|EDA5+EDA5/EDA5\EDA5; \ Play sound effect 
                      STA.W !SPCIO1                             ;;EDA9|EDA7+EDA7/EDA7\EDA7; / 
                      STZ.W !CarryYoshiThruLvls                 ;;EDAC|EDAA+EDAA/EDAA\EDAA;
                      LDA.B !PlayerXSpeed                       ;;EDAF|EDAD+EDAD/EDAD\EDAD;
                      STA.B !SpriteXSpeed,X                     ;;EDB1|EDAF+EDAF/EDAF\EDAF;
                      LDA.B #$A0                                ;;EDB3|EDB1+EDB1/EDB1\EDB1;
                      LDY.B !PlayerInAir                        ;;EDB5|EDB3+EDB3/EDB3\EDB3;
                      BNE +                                     ;;EDB7|EDB5+EDB5/EDB5\EDB5;
                      JSR SubHorizPos                           ;;EDB9|EDB7+EDB7/EDB7\EDB7;
                      LDA.W DATA_01EBC0,Y                       ;;EDBC|EDBA+EDBA/EDBA\EDBA;
                      STA.B !PlayerXSpeed                       ;;EDBF|EDBD+EDBD/EDBD\EDBD;
                      LDA.B #$C0                                ;;EDC1|EDBF+EDBF/EDBF\EDBF;
                    + STA.B !PlayerYSpeed                       ;;EDC3|EDC1+EDC1/EDC1\EDC1;
                      STZ.W !PlayerRidingYoshi                  ;;EDC5|EDC3+EDC3/EDC3\EDC3;
                      STZ.B !SpriteYSpeed,X                     ;;EDC8|EDC6+EDC6/EDC6\EDC6; Sprite Y Speed = 0 
                      JSR CODE_01EDCC                           ;;EDCA|EDC8+EDC8/EDC8\EDC8;
Return01EDCB:         RTS                                       ;;EDCD|EDCB+EDCB/EDCB\EDCB; Return 
                                                                ;;                        ;
CODE_01EDCC:          LDY.B #$00                                ;;EDCE|EDCC+EDCC/EDCC\EDCC;
CODE_01EDCE:          LDA.B !SpriteYPosLow,X                    ;;EDD0|EDCE+EDCE/EDCE\EDCE;
                      SEC                                       ;;EDD2|EDD0+EDD0/EDD0\EDD0;
                      SBC.W DATA_01EDE2,Y                       ;;EDD3|EDD1+EDD1/EDD1\EDD1;
                      STA.B !PlayerYPosNext                     ;;EDD6|EDD4+EDD4/EDD4\EDD4;
                      STA.B !PlayerYPosNow                      ;;EDD8|EDD6+EDD6/EDD6\EDD6;
                      LDA.W !SpriteXPosHigh,X                   ;;EDDA|EDD8+EDD8/EDD8\EDD8;
                      SBC.B #$00                                ;;EDDD|EDDB+EDDB/EDDB\EDDB;
                      STA.B !PlayerYPosNext+1                   ;;EDDF|EDDD+EDDD/EDDD\EDDD;
                      STA.B !PlayerYPosNow+1                    ;;EDE1|EDDF+EDDF/EDDF\EDDF;
                      RTS                                       ;;EDE3|EDE1+EDE1/EDE1\EDE1; Return 
                                                                ;;                        ;
                                                                ;;                        ;
DATA_01EDE2:          db $04,$10                                ;;EDE4|EDE2+EDE2/EDE2\EDE2;
                                                                ;;                        ;
DATA_01EDE4:          db $06,$05,$05,$05,$0A,$05,$05,$0A        ;;EDE6|EDE4+EDE4/EDE4\EDE4;
                      db $0A,$0B                                ;;EDEE|EDEC+EDEC/EDEC\EDEC;
                                                                ;;                        ;
YoshiWalkFrames:      db $02,$01,$00                            ;;EDF0|EDEE+EDEE/EDEE\EDEE;
                                                                ;;                        ;
YoshiPositionX:       db $02,$FE                                ;;EDF3|EDF1+EDF1/EDF1\EDF1;
                                                                ;;                        ;
DATA_01EDF3:          db $00,$FF                                ;;EDF5|EDF3+EDF3/EDF3\EDF3;
                                                                ;;                        ;
DATA_01EDF5:          db $03,$02,$01,$00                        ;;EDF7|EDF5+EDF5/EDF5\EDF5;
                                                                ;;                        ;
YoshiHeadTiles:       db $00,$01,$02,$03,$02,$10,$04,$05        ;;EDFB|EDF9+EDF9/EDF9\EDF9;
                      db $00,$00,$FF,$FF,$00                    ;;EE03|EE01+EE01/EE01\EE01;
                                                                ;;                        ;
YoshiBodyTiles:       db $06,$07,$08,$09,$0A,$0B,$06,$0C        ;;EE08|EE06+EE06/EE06\EE06;
                      db $0A,$0D,$0E,$0F,$0C                    ;;EE10|EE0E+EE0E/EE0E\EE0E;
                                                                ;;                        ;
YoshiHeadDispX:       db $0A,$09,$0A,$06,$0A,$0A,$0A,$10        ;;EE15|EE13+EE13/EE13\EE13;
                      db $0A,$0A,$00,$00,$0A,$F6,$F7,$F6        ;;EE1D|EE1B+EE1B/EE1B\EE1B;
                      db $FA,$F6,$F6,$F6,$F0,$F6,$F6,$00        ;;EE25|EE23+EE23/EE23\EE23;
                      db $00,$F6                                ;;EE2D|EE2B+EE2B/EE2B\EE2B;
                                                                ;;                        ;
DATA_01EE2D:          db $00,$00,$00,$00,$00,$00,$00,$00        ;;EE2F|EE2D+EE2D/EE2D\EE2D;
                      db $00,$00,$00,$00,$00,$FF,$FF,$FF        ;;EE37|EE35+EE35/EE35\EE35;
                      db $FF,$FF,$FF,$FF,$FF,$FF,$FF,$00        ;;EE3F|EE3D+EE3D/EE3D\EE3D;
                      db $00,$FF                                ;;EE47|EE45+EE45/EE45\EE45;
                                                                ;;                        ;
YoshiPositionY:       db $00,$01,$01,$00,$04,$00,$00,$04        ;;EE49|EE47+EE47/EE47\EE47;
                      db $03,$03,$00,$00,$04                    ;;EE51|EE4F+EE4F/EE4F\EE4F;
                                                                ;;                        ;
YoshiHeadDispY:       db $00,$00,$01,$00,$00,$00,$00,$08        ;;EE56|EE54+EE54/EE54\EE54;
                      db $00,$00,$00,$00,$05                    ;;EE5E|EE5C+EE5C/EE5C\EE5C;
                                                                ;;                        ;
HandleOffYoshi:       LDA.W !SpriteMisc1602,X                   ;;EE63|EE61+EE61/EE61\EE61;
                      PHA                                       ;;EE66|EE64+EE64/EE64\EE64;
                      LDY.W !SpriteMisc15AC,X                   ;;EE67|EE65+EE65/EE65\EE65;
                      CPY.B #$08                                ;;EE6A|EE68+EE68/EE68\EE68;
                      BNE +                                     ;;EE6C|EE6A+EE6A/EE6A\EE6A;
                      LDA.W !YoshiInPipeSetting                 ;;EE6E|EE6C+EE6C/EE6C\EE6C;
                      ORA.B !SpriteLock                         ;;EE71|EE6F+EE6F/EE6F\EE6F;
                      BNE +                                     ;;EE73|EE71+EE71/EE71\EE71;
                      LDA.W !SpriteMisc157C,X                   ;;EE75|EE73+EE73/EE73\EE73;
                      STA.B !PlayerDirection                    ;;EE78|EE76+EE76/EE76\EE76;
                      EOR.B #$01                                ;;EE7A|EE78+EE78/EE78\EE78;
                      STA.W !SpriteMisc157C,X                   ;;EE7C|EE7A+EE7A/EE7A\EE7A;
                    + LDA.W !YoshiInPipeSetting                 ;;EE7F|EE7D+EE7D/EE7D\EE7D;
                      BMI +                                     ;;EE82|EE80+EE80/EE80\EE80;
                      CMP.B #$02                                ;;EE84|EE82+EE82/EE82\EE82;
                      BNE +                                     ;;EE86|EE84+EE84/EE84\EE84;
                      INC A                                     ;;EE88|EE86+EE86/EE86\EE86;
                      STA.W !SpriteMisc1602,X                   ;;EE89|EE87+EE87/EE87\EE87;
                    + JSR CODE_01EF18                           ;;EE8C|EE8A+EE8A/EE8A\EE8A;
                      LDY.B !_E                                 ;;EE8F|EE8D+EE8D/EE8D\EE8D;
                      LDA.W !OAMTileNo+$100,Y                   ;;EE91|EE8F+EE8F/EE8F\EE8F;
                      STA.B !_0                                 ;;EE94|EE92+EE92/EE92\EE92;
                      STZ.B !_1                                 ;;EE96|EE94+EE94/EE94\EE94;
                      LDA.B #$06                                ;;EE98|EE96+EE96/EE96\EE96;
                      STA.W !OAMTileNo+$100,Y                   ;;EE9A|EE98+EE98/EE98\EE98;
                      LDY.W !SpriteOAMIndex,X                   ;;EE9D|EE9B+EE9B/EE9B\EE9B; Y = Index into sprite OAM 
                      LDA.W !OAMTileNo+$100,Y                   ;;EEA0|EE9E+EE9E/EE9E\EE9E;
                      STA.B !_2                                 ;;EEA3|EEA1+EEA1/EEA1\EEA1;
                      STZ.B !_3                                 ;;EEA5|EEA3+EEA3/EEA3\EEA3;
                      LDA.B #$08                                ;;EEA7|EEA5+EEA5/EEA5\EEA5;
                      STA.W !OAMTileNo+$100,Y                   ;;EEA9|EEA7+EEA7/EEA7\EEA7;
                      REP #$20                                  ;;EEAC|EEAA+EEAA/EEAA\EEAA; Accum (16 bit) 
                      LDA.B !_0                                 ;;EEAE|EEAC+EEAC/EEAC\EEAC;
                      ASL A                                     ;;EEB0|EEAE+EEAE/EEAE\EEAE;
                      ASL A                                     ;;EEB1|EEAF+EEAF/EEAF\EEAF;
                      ASL A                                     ;;EEB2|EEB0+EEB0/EEB0\EEB0;
                      ASL A                                     ;;EEB3|EEB1+EEB1/EEB1\EEB1;
                      ASL A                                     ;;EEB4|EEB2+EEB2/EEB2\EEB2;
                      CLC                                       ;;EEB5|EEB3+EEB3/EEB3\EEB3;
                      ADC.W #$8500                              ;;EEB6|EEB4+EEB4/EEB4\EEB4;
                      STA.W !DynGfxTilePtr+6                    ;;EEB9|EEB7+EEB7/EEB7\EEB7;
                      CLC                                       ;;EEBC|EEBA+EEBA/EEBA\EEBA;
                      ADC.W #$0200                              ;;EEBD|EEBB+EEBB/EEBB\EEBB;
                      STA.W !DynGfxTilePtr+$10                  ;;EEC0|EEBE+EEBE/EEBE\EEBE;
                      LDA.B !_2                                 ;;EEC3|EEC1+EEC1/EEC1\EEC1;
                      ASL A                                     ;;EEC5|EEC3+EEC3/EEC3\EEC3;
                      ASL A                                     ;;EEC6|EEC4+EEC4/EEC4\EEC4;
                      ASL A                                     ;;EEC7|EEC5+EEC5/EEC5\EEC5;
                      ASL A                                     ;;EEC8|EEC6+EEC6/EEC6\EEC6;
                      ASL A                                     ;;EEC9|EEC7+EEC7/EEC7\EEC7;
                      CLC                                       ;;EECA|EEC8+EEC8/EEC8\EEC8;
                      ADC.W #$8500                              ;;EECB|EEC9+EEC9/EEC9\EEC9;
                      STA.W !DynGfxTilePtr+8                    ;;EECE|EECC+EECC/EECC\EECC;
                      CLC                                       ;;EED1|EECF+EECF/EECF\EECF;
                      ADC.W #$0200                              ;;EED2|EED0+EED0/EED0\EED0;
                      STA.W !DynGfxTilePtr+$12                  ;;EED5|EED3+EED3/EED3\EED3;
                      SEP #$20                                  ;;EED8|EED6+EED6/EED6\EED6; Accum (8 bit) 
                      PLA                                       ;;EEDA|EED8+EED8/EED8\EED8;
                      STA.W !SpriteMisc1602,X                   ;;EEDB|EED9+EED9/EED9\EED9;
                      JSR CODE_01F0A2                           ;;EEDE|EEDC+EEDC/EEDC\EEDC;
                      LDA.W !YoshiHasWingsGfx                   ;;EEE1|EEDF+EEDF/EEDF\EEDF; \ Return if Yoshi doesn't have wings 
                      CMP.B #$02                                ;;EEE4|EEE2+EEE2/EEE2\EEE2;  | 
                      BCC Return01EF17                          ;;EEE6|EEE4+EEE4/EEE4\EEE4; / 
                      LDA.W !PlayerRidingYoshi                  ;;EEE8|EEE6+EEE6/EEE6\EEE6;
                      BEQ CODE_01EF13                           ;;EEEB|EEE9+EEE9/EEE9\EEE9;
                      LDA.B !PlayerInAir                        ;;EEED|EEEB+EEEB/EEEB\EEEB;
                      BNE CODE_01EF00                           ;;EEEF|EEED+EEED/EEED\EEED;
                      LDA.B !PlayerXSpeed                       ;;EEF1|EEEF+EEEF/EEEF\EEEF;
                      BPL +                                     ;;EEF3|EEF1+EEF1/EEF1\EEF1;
                      EOR.B #$FF                                ;;EEF5|EEF3+EEF3/EEF3\EEF3;
                      INC A                                     ;;EEF7|EEF5+EEF5/EEF5\EEF5;
                    + CMP.B #$28                                ;;EEF8|EEF6+EEF6/EEF6\EEF6;
                      LDA.B #$01                                ;;EEFA|EEF8+EEF8/EEF8\EEF8;
                      BCS CODE_01EF13                           ;;EEFC|EEFA+EEFA/EEFA\EEFA;
                      LDA.B #$00                                ;;EEFE|EEFC+EEFC/EEFC\EEFC;
                      BRA CODE_01EF13                           ;;EF00|EEFE+EEFE/EEFE\EEFE;
                                                                ;;                        ;
CODE_01EF00:          LDA.B !EffFrame                           ;;EF02|EF00+EF00/EF00\EF00;
                      LSR A                                     ;;EF04|EF02+EF02/EF02\EF02;
                      LSR A                                     ;;EF05|EF03+EF03/EF03\EF03;
                      LDY.B !PlayerYSpeed                       ;;EF06|EF04+EF04/EF04\EF04;
                      BMI +                                     ;;EF08|EF06+EF06/EF06\EF06;
                      LSR A                                     ;;EF0A|EF08+EF08/EF08\EF08;
                      LSR A                                     ;;EF0B|EF09+EF09/EF09\EF09;
                    + AND.B #$01                                ;;EF0C|EF0A+EF0A/EF0A\EF0A;
                      BNE CODE_01EF13                           ;;EF0E|EF0C+EF0C/EF0C\EF0C;
                      LDY.B #!SFX_YOSHITONGUE                   ;;EF10|EF0E+EF0E/EF0E\EF0E; \ Play sound effect 
                      STY.W !SPCIO3                             ;;EF12|EF10+EF10/EF10\EF10; / 
CODE_01EF13:          JSL CODE_02BB23                           ;;EF15|EF13+EF13/EF13\EF13;
Return01EF17:         RTS                                       ;;EF19|EF17+EF17/EF17\EF17; Return 
                                                                ;;                        ;
CODE_01EF18:          LDY.W !SpriteMisc1602,X                   ;;EF1A|EF18+EF18/EF18\EF18;
                      STY.W !TileGenerateTrackA                 ;;EF1D|EF1B+EF1B/EF1B\EF1B;
                      LDA.W YoshiHeadTiles,Y                    ;;EF20|EF1E+EF1E/EF1E\EF1E;
                      STA.W !SpriteMisc1602,X                   ;;EF23|EF21+EF21/EF21\EF21;
                      STA.B !_F                                 ;;EF26|EF24+EF24/EF24\EF24;
                      LDA.B !SpriteYPosLow,X                    ;;EF28|EF26+EF26/EF26\EF26;
                      PHA                                       ;;EF2A|EF28+EF28/EF28\EF28;
                      CLC                                       ;;EF2B|EF29+EF29/EF29\EF29;
                      ADC.W YoshiPositionY,Y                    ;;EF2C|EF2A+EF2A/EF2A\EF2A;
                      STA.B !SpriteYPosLow,X                    ;;EF2F|EF2D+EF2D/EF2D\EF2D;
                      LDA.W !SpriteXPosHigh,X                   ;;EF31|EF2F+EF2F/EF2F\EF2F;
                      PHA                                       ;;EF34|EF32+EF32/EF32\EF32;
                      ADC.B #$00                                ;;EF35|EF33+EF33/EF33\EF33;
                      STA.W !SpriteXPosHigh,X                   ;;EF37|EF35+EF35/EF35\EF35;
                      TYA                                       ;;EF3A|EF38+EF38/EF38\EF38;
                      LDY.W !SpriteMisc157C,X                   ;;EF3B|EF39+EF39/EF39\EF39;
                      BEQ +                                     ;;EF3E|EF3C+EF3C/EF3C\EF3C;
                      CLC                                       ;;EF40|EF3E+EF3E/EF3E\EF3E;
                      ADC.B #$0D                                ;;EF41|EF3F+EF3F/EF3F\EF3F;
                    + TAY                                       ;;EF43|EF41+EF41/EF41\EF41;
                      LDA.B !SpriteXPosLow,X                    ;;EF44|EF42+EF42/EF42\EF42;
                      PHA                                       ;;EF46|EF44+EF44/EF44\EF44;
                      CLC                                       ;;EF47|EF45+EF45/EF45\EF45;
                      ADC.W YoshiHeadDispX,Y                    ;;EF48|EF46+EF46/EF46\EF46;
                      STA.B !SpriteXPosLow,X                    ;;EF4B|EF49+EF49/EF49\EF49;
                      LDA.W !SpriteYPosHigh,X                   ;;EF4D|EF4B+EF4B/EF4B\EF4B;
                      PHA                                       ;;EF50|EF4E+EF4E/EF4E\EF4E;
                      ADC.W DATA_01EE2D,Y                       ;;EF51|EF4F+EF4F/EF4F\EF4F;
                      STA.W !SpriteYPosHigh,X                   ;;EF54|EF52+EF52/EF52\EF52;
                      LDA.W !SpriteOAMIndex,X                   ;;EF57|EF55+EF55/EF55\EF55;
                      PHA                                       ;;EF5A|EF58+EF58/EF58\EF58;
                      LDA.W !SpriteMisc15AC,X                   ;;EF5B|EF59+EF59/EF59\EF59;
                      ORA.W !YoshiInPipeSetting                 ;;EF5E|EF5C+EF5C/EF5C\EF5C;
                      BEQ +                                     ;;EF61|EF5F+EF5F/EF5F\EF5F;
                      LDA.B #$04                                ;;EF63|EF61+EF61/EF61\EF61;
                      STA.W !SpriteOAMIndex,X                   ;;EF65|EF63+EF63/EF63\EF63;
                    + LDA.W !SpriteOAMIndex,X                   ;;EF68|EF66+EF66/EF66\EF66;
                      STA.B !_E                                 ;;EF6B|EF69+EF69/EF69\EF69;
                      JSR SubSprGfx2Entry1                      ;;EF6D|EF6B+EF6B/EF6B\EF6B;
                      PHX                                       ;;EF70|EF6E+EF6E/EF6E\EF6E;
                      LDY.W !SpriteOAMIndex,X                   ;;EF71|EF6F+EF6F/EF6F\EF6F; Y = Index into sprite OAM 
                      LDX.W !TileGenerateTrackA                 ;;EF74|EF72+EF72/EF72\EF72;
                      LDA.W !OAMTileYPos+$100,Y                 ;;EF77|EF75+EF75/EF75\EF75;
                      CLC                                       ;;EF7A|EF78+EF78/EF78\EF78;
                      %LorW_X(ADC,YoshiHeadDispY)               ;;EF7B|EF79+EF79/EF79\EF79;
                      STA.W !OAMTileYPos+$100,Y                 ;;EF7F|EF7C+EF7C/EF7C\EF7C;
                      PLX                                       ;;EF82|EF7F+EF7F/EF7F\EF7F;
                      PLA                                       ;;EF83|EF80+EF80/EF80\EF80;
                      CLC                                       ;;EF84|EF81+EF81/EF81\EF81;
                      ADC.B #$04                                ;;EF85|EF82+EF82/EF82\EF82;
                      STA.W !SpriteOAMIndex,X                   ;;EF87|EF84+EF84/EF84\EF84;
                      PLA                                       ;;EF8A|EF87+EF87/EF87\EF87;
                      STA.W !SpriteYPosHigh,X                   ;;EF8B|EF88+EF88/EF88\EF88;
                      PLA                                       ;;EF8E|EF8B+EF8B/EF8B\EF8B;
                      STA.B !SpriteXPosLow,X                    ;;EF8F|EF8C+EF8C/EF8C\EF8C;
                      LDY.W !TileGenerateTrackA                 ;;EF91|EF8E+EF8E/EF8E\EF8E;
                      LDA.W YoshiBodyTiles,Y                    ;;EF94|EF91+EF91/EF91\EF91;
                      STA.W !SpriteMisc1602,X                   ;;EF97|EF94+EF94/EF94\EF94;
                      LDA.B !SpriteYPosLow,X                    ;;EF9A|EF97+EF97/EF97\EF97;
                      CLC                                       ;;EF9C|EF99+EF99/EF99\EF99;
                      ADC.B #$10                                ;;EF9D|EF9A+EF9A/EF9A\EF9A;
                      STA.B !SpriteYPosLow,X                    ;;EF9F|EF9C+EF9C/EF9C\EF9C;
                      BCC +                                     ;;EFA1|EF9E+EF9E/EF9E\EF9E;
                      INC.W !SpriteXPosHigh,X                   ;;EFA3|EFA0+EFA0/EFA0\EFA0;
                    + JSR SubSprGfx2Entry1                      ;;EFA6|EFA3+EFA3/EFA3\EFA3;
                      PLA                                       ;;EFA9|EFA6+EFA6/EFA6\EFA6;
                      STA.W !SpriteXPosHigh,X                   ;;EFAA|EFA7+EFA7/EFA7\EFA7;
                      PLA                                       ;;EFAD|EFAA+EFAA/EFAA\EFAA;
                      STA.B !SpriteYPosLow,X                    ;;EFAE|EFAB+EFAB/EFAB\EFAB;
                      LDY.B !_E                                 ;;EFB0|EFAD+EFAD/EFAD\EFAD;
                      LDA.B !_F                                 ;;EFB2|EFAF+EFAF/EFAF\EFAF;
                      BPL +                                     ;;EFB4|EFB1+EFB1/EFB1\EFB1;
                      LDA.B #$F0                                ;;EFB6|EFB3+EFB3/EFB3\EFB3;
                      STA.W !OAMTileYPos+$100,Y                 ;;EFB8|EFB5+EFB5/EFB5\EFB5;
                    + LDA.B !SpriteTableC2,X                    ;;EFBB|EFB8+EFB8/EFB8\EFB8;
                      BNE CODE_01EFC6                           ;;EFBD|EFBA+EFBA/EFBA\EFBA;
                      LDA.B !EffFrame                           ;;EFBF|EFBC+EFBC/EFBC\EFBC;
                      AND.B #$30                                ;;EFC1|EFBE+EFBE/EFBE\EFBE;
                      BNE CODE_01EFDB                           ;;EFC3|EFC0+EFC0/EFC0\EFC0;
                      LDA.B #$2A                                ;;EFC5|EFC2+EFC2/EFC2\EFC2;
                      BRA CODE_01EFFA                           ;;EFC7|EFC4+EFC4/EFC4\EFC4;
                                                                ;;                        ;
CODE_01EFC6:          CMP.B #$02                                ;;EFC9|EFC6+EFC6/EFC6\EFC6;
                      BNE CODE_01EFDB                           ;;EFCB|EFC8+EFC8/EFC8\EFC8;
                      LDA.W !SpriteMisc151C,X                   ;;EFCD|EFCA+EFCA/EFCA\EFCA;
                      ORA.W !CutsceneID                         ;;EFD0|EFCD+EFCD/EFCD\EFCD;
                      BNE CODE_01EFDB                           ;;EFD3|EFD0+EFD0/EFD0\EFD0;
                      LDA.B !EffFrame                           ;;EFD5|EFD2+EFD2/EFD2\EFD2;
                      AND.B #$10                                ;;EFD7|EFD4+EFD4/EFD4\EFD4;
                      BEQ CODE_01EFFD                           ;;EFD9|EFD6+EFD6/EFD6\EFD6;
                      BRA CODE_01EFF8                           ;;EFDB|EFD8+EFD8/EFD8\EFD8;
                                                                ;;                        ;
Return01EFDA:         RTS                                       ;;EFDD|EFDA+EFDA/EFDA\EFDA; Return 
                                                                ;;                        ;
CODE_01EFDB:          LDA.W !SpriteMisc1594,X                   ;;EFDE|EFDB+EFDB/EFDB\EFDB;
                      CMP.B #$03                                ;;EFE1|EFDE+EFDE/EFDE\EFDE;
                      BEQ CODE_01EFEE                           ;;EFE3|EFE0+EFE0/EFE0\EFE0;
                      LDA.W !SpriteMisc151C,X                   ;;EFE5|EFE2+EFE2/EFE2\EFE2;
                      BEQ +                                     ;;EFE8|EFE5+EFE5/EFE5\EFE5;
                      LDA.W !OAMTileNo+$100,Y                   ;;EFEA|EFE7+EFE7/EFE7\EFE7;
                      CMP.B #$24                                ;;EFED|EFEA+EFEA/EFEA\EFEA;
                      BEQ +                                     ;;EFEF|EFEC+EFEC/EFEC\EFEC;
CODE_01EFEE:          LDA.B #$2A                                ;;EFF1|EFEE+EFEE/EFEE\EFEE;
                      STA.W !OAMTileNo+$100,Y                   ;;EFF3|EFF0+EFF0/EFF0\EFF0;
                    + LDA.W !YoshiStartEatTimer                 ;;EFF6|EFF3+EFF3/EFF3\EFF3;
                      BEQ CODE_01EFFD                           ;;EFF9|EFF6+EFF6/EFF6\EFF6;
CODE_01EFF8:          LDA.B #$0C                                ;;EFFB|EFF8+EFF8/EFF8\EFF8;
CODE_01EFFA:          STA.W !OAMTileNo+$100,Y                   ;;EFFD|EFFA+EFFA/EFFA\EFFA;
CODE_01EFFD:          LDA.W !SpriteMisc1564,X                   ;;F000|EFFD+EFFD/EFFD\EFFD;
                      LDY.W !YoshiSwallowTimer                  ;;F003|F000+F000/F000\F000;
                      BEQ CODE_01F00F                           ;;F006|F003+F003/F003\F003;
                      CPY.B #$26                                ;;F008|F005+F005/F005\F005;
                      BCS CODE_01F038                           ;;F00A|F007+F007/F007\F007;
                      LDA.B !EffFrame                           ;;F00C|F009+F009/F009\F009;
                      AND.B #$18                                ;;F00E|F00B+F00B/F00B\F00B;
                      BNE CODE_01F038                           ;;F010|F00D+F00D/F00D\F00D;
CODE_01F00F:          LDA.W !SpriteMisc1564,X                   ;;F012|F00F+F00F/F00F\F00F;
                      CMP.B #$00                                ;;F015|F012+F012/F012\F012;
                      BEQ Return01EFDA                          ;;F017|F014+F014/F014\F014;
                      LDY.B #$00                                ;;F019|F016+F016/F016\F016;
                      CMP.B #$0F                                ;;F01B|F018+F018/F018\F018;
                      BCC CODE_01F03A                           ;;F01D|F01A+F01A/F01A\F01A;
                      CMP.B #$1C                                ;;F01F|F01C+F01C/F01C\F01C;
                      BCC CODE_01F038                           ;;F021|F01E+F01E/F01E\F01E;
                      BNE +                                     ;;F023|F020+F020/F020\F020;
                      LDA.B !_E                                 ;;F025|F022+F022/F022\F022;
                      PHA                                       ;;F027|F024+F024/F024\F024;
                      JSL SetTreeTile                           ;;F028|F025+F025/F025\F025;
                      JSR CODE_01F0D3                           ;;F02C|F029+F029/F029\F029;
                      PLA                                       ;;F02F|F02C+F02C/F02C\F02C;
                      STA.B !_E                                 ;;F030|F02D+F02D/F02D\F02D;
                    + INC.W !PlayerIsFrozen                     ;;F032|F02F+F02F/F02F\F02F;
                      LDA.B #$00                                ;;F035|F032+F032/F032\F032;
                      LDY.B #$2A                                ;;F037|F034+F034/F034\F034;
                      BRA CODE_01F03A                           ;;F039|F036+F036/F036\F036;
                                                                ;;                        ;
CODE_01F038:          LDY.B #$04                                ;;F03B|F038+F038/F038\F038;
CODE_01F03A:          PHA                                       ;;F03D|F03A+F03A/F03A\F03A;
                      TYA                                       ;;F03E|F03B+F03B/F03B\F03B;
                      LDY.B !_E                                 ;;F03F|F03C+F03C/F03C\F03C;
                      STA.W !OAMTileNo+$100,Y                   ;;F041|F03E+F03E/F03E\F03E;
                      PLA                                       ;;F044|F041+F041/F041\F041;
                      CMP.B #$0F                                ;;F045|F042+F042/F042\F042;
                      BCS Return01F0A0                          ;;F047|F044+F044/F044\F044;
                      CMP.B #$05                                ;;F049|F046+F046/F046\F046;
                      BCC Return01F0A0                          ;;F04B|F048+F048/F048\F048;
                      SBC.B #$05                                ;;F04D|F04A+F04A/F04A\F04A;
                      LDY.W !SpriteMisc157C,X                   ;;F04F|F04C+F04C/F04C\F04C;
                      BEQ +                                     ;;F052|F04F+F04F/F04F\F04F;
                      CLC                                       ;;F054|F051+F051/F051\F051;
                      ADC.B #$0A                                ;;F055|F052+F052/F052\F052;
                    + LDY.W !SpriteMisc1602,X                   ;;F057|F054+F054/F054\F054;
                      CPY.B #$0A                                ;;F05A|F057+F057/F057\F057;
                      BNE +                                     ;;F05C|F059+F059/F059\F059;
                      CLC                                       ;;F05E|F05B+F05B/F05B\F05B;
                      ADC.B #$14                                ;;F05F|F05C+F05C/F05C\F05C;
                    + STA.B !_2                                 ;;F061|F05E+F05E/F05E\F05E;
                      JSR IsSprOffScreen                        ;;F063|F060+F060/F060\F060;
                      BNE Return01F0A0                          ;;F066|F063+F063/F063\F063;
                      LDA.B !SpriteXPosLow,X                    ;;F068|F065+F065/F065\F065;
                      SEC                                       ;;F06A|F067+F067/F067\F067;
                      SBC.B !Layer1XPos                         ;;F06B|F068+F068/F068\F068;
                      STA.B !_0                                 ;;F06D|F06A+F06A/F06A\F06A;
                      LDA.B !SpriteYPosLow,X                    ;;F06F|F06C+F06C/F06C\F06C;
                      SEC                                       ;;F071|F06E+F06E/F06E\F06E;
                      SBC.B !Layer1YPos                         ;;F072|F06F+F06F/F06F\F06F;
                      STA.B !_1                                 ;;F074|F071+F071/F071\F071;
                      PHX                                       ;;F076|F073+F073/F073\F073;
                      LDX.B !_2                                 ;;F077|F074+F074/F074\F074;
                      LDA.B !_0                                 ;;F079|F076+F076/F076\F076;
                      CLC                                       ;;F07B|F078+F078/F078\F078;
                      ADC.L DATA_03C176,X                       ;;F07C|F079+F079/F079\F079;
                      STA.W !OAMTileXPos+$100                   ;;F080|F07D+F07D/F07D\F07D;
                      LDA.B !_1                                 ;;F083|F080+F080/F080\F080;
                      CLC                                       ;;F085|F082+F082/F082\F082;
                      ADC.L DATA_03C19E,X                       ;;F086|F083+F083/F083\F083;
                      STA.W !OAMTileYPos+$100                   ;;F08A|F087+F087/F087\F087;
                      LDA.B #$3F                                ;;F08D|F08A+F08A/F08A\F08A;
                      STA.W !OAMTileNo+$100                     ;;F08F|F08C+F08C/F08C\F08C;
                      PLX                                       ;;F092|F08F+F08F/F08F\F08F;
                      LDY.W !SpriteOAMIndex,X                   ;;F093|F090+F090/F090\F090; Y = Index into sprite OAM 
                      LDA.W !OAMTileAttr+$100,Y                 ;;F096|F093+F093/F093\F093;
                      ORA.B #$01                                ;;F099|F096+F096/F096\F096;
                      STA.W !OAMTileAttr+$100                   ;;F09B|F098+F098/F098\F098;
                      LDA.B #$00                                ;;F09E|F09B+F09B/F09B\F09B;
                      STA.W !OAMTileSize+$40                    ;;F0A0|F09D+F09D/F09D\F09D;
Return01F0A0:         RTS                                       ;;F0A3|F0A0+F0A0/F0A0\F0A0; Return 
                                                                ;;                        ;
Return01F0A1:         RTS                                       ;;F0A4|F0A1+F0A1/F0A1\F0A1; Return 
                                                                ;;                        ;
CODE_01F0A2:          LDA.B !SpriteTableC2,X                    ;;F0A5|F0A2+F0A2/F0A2\F0A2;
                      CMP.B #$01                                ;;F0A7|F0A4+F0A4/F0A4\F0A4;
                      BNE +                                     ;;F0A9|F0A6+F0A6/F0A6\F0A6;
                      JSL CODE_02D0D4                           ;;F0AB|F0A8+F0A8/F0A8\F0A8;
                    + LDA.W !YoshiHasWingsGfx                   ;;F0AF|F0AC+F0AC/F0AC\F0AC; \ Branch if $1410 == #$01 
                      CMP.B #$01                                ;;F0B2|F0AF+F0AF/F0AF\F0AF;  | This never happens 
                      BEQ Return01F0A1                          ;;F0B4|F0B1+F0B1/F0B1\F0B1; / (fireball on Yoshi ability) 
                      LDA.W !YoshiTongueTimer                   ;;F0B6|F0B3+F0B3/F0B3\F0B3;
                      CMP.B #$10                                ;;F0B9|F0B6+F0B6/F0B6\F0B6;
                      BNE +                                     ;;F0BB|F0B8+F0B8/F0B8\F0B8;
                      LDA.W !YoshiStartEatTimer                 ;;F0BD|F0BA+F0BA/F0BA\F0BA;
                      BNE +                                     ;;F0C0|F0BD+F0BD/F0BD\F0BD;
                      LDA.B #$06                                ;;F0C2|F0BF+F0BF/F0BF\F0BF;
                      STA.W !YoshiStartEatTimer                 ;;F0C4|F0C1+F0C1/F0C1\F0C1;
                    + LDA.W !SpriteMisc1594,X                   ;;F0C7|F0C4+F0C4/F0C4\F0C4;
                      JSL ExecutePtr                            ;;F0CA|F0C7+F0C7/F0C7\F0C7;
                                                                ;;                        ;
                      dw CODE_01F14B                            ;;F0CE|F0CB+F0CB/F0CB\F0CB;
                      dw CODE_01F314                            ;;F0D0|F0CD+F0CD/F0CD\F0CD;
                      dw CODE_01F332                            ;;F0D2|F0CF+F0CF/F0CF\F0CF;
                      dw CODE_01F12E                            ;;F0D4|F0D1+F0D1/F0D1\F0D1;
                                                                ;;                        ;
CODE_01F0D3:          LDA.B #!SFX_GULP                          ;;F0D6|F0D3+F0D3/F0D3\F0D3; \ Play sound effect 
                      STA.W !SPCIO0                             ;;F0D8|F0D5+F0D5/F0D5\F0D5; / 
                      JSL CODE_05B34A                           ;;F0DB|F0D8+F0D8/F0D8\F0D8;
                      LDA.W !EatenBerryType                     ;;F0DF|F0DC+F0DC/F0DC\F0DC;
                      BEQ Return01F12D                          ;;F0E2|F0DF+F0DF/F0DF\F0DF;
                      STZ.W !EatenBerryType                     ;;F0E4|F0E1+F0E1/F0E1\F0E1;
                      CMP.B #$01                                ;;F0E7|F0E4+F0E4/F0E4\F0E4;
                      BNE CODE_01F0F9                           ;;F0E9|F0E6+F0E6/F0E6\F0E6;
                      INC.W !RedBerriesEaten                    ;;F0EB|F0E8+F0E8/F0E8\F0E8;
                      LDA.W !RedBerriesEaten                    ;;F0EE|F0EB+F0EB/F0EB\F0EB;
                      CMP.B #$0A                                ;;F0F1|F0EE+F0EE/F0EE\F0EE;
                      BNE Return01F12D                          ;;F0F3|F0F0+F0F0/F0F0\F0F0;
                      STZ.W !RedBerriesEaten                    ;;F0F5|F0F2+F0F2/F0F2\F0F2;
                      LDA.B #$74                                ;;F0F8|F0F5+F0F5/F0F5\F0F5;
                      BRA CODE_01F125                           ;;F0FA|F0F7+F0F7/F0F7\F0F7;
                                                                ;;                        ;
CODE_01F0F9:          CMP.B #$03                                ;;F0FC|F0F9+F0F9/F0F9\F0F9;
                      BNE CODE_01F116                           ;;F0FE|F0FB+F0FB/F0FB\F0FB;
                      LDA.B #!SFX_CORRECT                       ;;F100|F0FD+F0FD/F0FD\F0FD; \ Play sound effect 
                      STA.W !SPCIO3                             ;;F102|F0FF+F0FF/F0FF\F0FF; / 
                      LDA.W !InGameTimerTens                    ;;F105|F102+F102/F102\F102;
                      CLC                                       ;;F108|F105+F105/F105\F105;
                      ADC.B #$02                                ;;F109|F106+F106/F106\F106;
                      CMP.B #$0A                                ;;F10B|F108+F108/F108\F108;
                      BCC +                                     ;;F10D|F10A+F10A/F10A\F10A;
                      SBC.B #$0A                                ;;F10F|F10C+F10C/F10C\F10C;
                      INC.W !InGameTimerHundreds                ;;F111|F10E+F10E/F10E\F10E;
                    + STA.W !InGameTimerTens                    ;;F114|F111+F111/F111\F111;
                      BRA Return01F12D                          ;;F117|F114+F114/F114\F114;
                                                                ;;                        ;
CODE_01F116:          INC.W !PinkBerriesEaten                   ;;F119|F116+F116/F116\F116;
                      LDA.W !PinkBerriesEaten                   ;;F11C|F119+F119/F119\F119;
                      CMP.B #$02                                ;;F11F|F11C+F11C/F11C\F11C;
                      BNE Return01F12D                          ;;F121|F11E+F11E/F11E\F11E;
                      STZ.W !PinkBerriesEaten                   ;;F123|F120+F120/F120\F120;
                      LDA.B #$6A                                ;;F126|F123+F123/F123\F123;
CODE_01F125:          STA.W !YoshiEggSpriteHatch                ;;F128|F125+F125/F125\F125;
                      LDY.B #$20                                ;;F12B|F128+F128/F128\F128;
                      STY.W !EggLaidTimer                       ;;F12D|F12A+F12A/F12A\F12A;
Return01F12D:         RTS                                       ;;F130|F12D+F12D/F12D\F12D; Return 
                                                                ;;                        ;
CODE_01F12E:          LDA.W !SpriteMisc1558,X                   ;;F131|F12E+F12E/F12E\F12E;
                      BNE +                                     ;;F134|F131+F131/F131\F131;
                      STZ.W !SpriteMisc1594,X                   ;;F136|F133+F133/F133\F133;
                    + RTS                                       ;;F139|F136+F136/F136\F136; Return 
                                                                ;;                        ;
                                                                ;;                        ;
YoshiShellAbility:    db $00,$00,$01,$02,$00,$00,$01,$02        ;;F13A|F137+F137/F137\F137;
                      db $01,$01,$01,$03,$02,$02                ;;F142|F13F+F13F/F13F\F13F;
                                                                ;;                        ;
YoshiAbilityIndex:    db $03,$02,$02,$03,$01,$00                ;;F148|F145+F145/F145\F145;
                                                                ;;                        ;
CODE_01F14B:          LDA.W !YoshiHeavenFlag                    ;;F14E|F14B+F14B/F14B\F14B;
                      BEQ +                                     ;;F151|F14E+F14E/F14E\F14E;
                      LDA.B #$02                                ;;F153|F150+F150/F150\F150; \ Set Yoshi wing ability 
                      STA.W !YoshiHasWingsEvt                   ;;F155|F152+F152/F152\F152; / 
                    + LDA.W !YoshiSwallowTimer                  ;;F158|F155+F155/F155\F155;
                      BEQ CODE_01F1A2                           ;;F15B|F158+F158/F158\F158;
                      LDY.W !SpriteMisc160E,X                   ;;F15D|F15A+F15A/F15A\F15A;
                      LDA.W !SpriteNumber,Y                     ;;F160|F15D+F15D/F15D\F15D;
                      CMP.B #$80                                ;;F163|F160+F160/F160\F160;
                      BNE +                                     ;;F165|F162+F162/F162\F162;
                      INC.W !YoshiHasKey                        ;;F167|F164+F164/F164\F164;
                    + CMP.B #$0D                                ;;F16A|F167+F167/F167\F167;
                      BCS CODE_01F1A2                           ;;F16C|F169+F169/F169\F169;
                      PHY                                       ;;F16E|F16B+F16B/F16B\F16B;
                      LDA.W !SpriteMisc187B,Y                   ;;F16F|F16C+F16C/F16C\F16C;
                      CMP.B #$01                                ;;F172|F16F+F16F/F16F\F16F;
                      LDA.B #$03                                ;;F174|F171+F171/F171\F171;
                      BCS +                                     ;;F176|F173+F173/F173\F173;
                      LDA.W !SpriteOBJAttribute,X               ;;F178|F175+F175/F175\F175; \ Set yoshi stomp/wing ability, 
                      LSR A                                     ;;F17B|F178+F178/F178\F178;  | based on palette of sprite and Yoshi 
                      AND.B #$07                                ;;F17C|F179+F179/F179\F179;  | 
                      TAY                                       ;;F17E|F17B+F17B/F17B\F17B;  | 
                      LDA.W YoshiAbilityIndex,Y                 ;;F17F|F17C+F17C/F17C\F17C;  | 
                      ASL A                                     ;;F182|F17F+F17F/F17F\F17F;  | 
                      ASL A                                     ;;F183|F180+F180/F180\F180;  | 
                      STA.B !_0                                 ;;F184|F181+F181/F181\F181;  | 
                      PLY                                       ;;F186|F183+F183/F183\F183;  | 
                      PHY                                       ;;F187|F184+F184/F184\F184;  | 
                      LDA.W !SpriteOBJAttribute,Y               ;;F188|F185+F185/F185\F185;  | 
                      LSR A                                     ;;F18B|F188+F188/F188\F188;  | 
                      AND.B #$07                                ;;F18C|F189+F189/F189\F189;  | 
                      TAY                                       ;;F18E|F18B+F18B/F18B\F18B;  | 
                      LDA.W YoshiAbilityIndex,Y                 ;;F18F|F18C+F18C/F18C\F18C;  | 
                      ORA.B !_0                                 ;;F192|F18F+F18F/F18F\F18F;  | 
                      TAY                                       ;;F194|F191+F191/F191\F191;  | 
                      LDA.W YoshiShellAbility,Y                 ;;F195|F192+F192/F192\F192; / 
                    + PHA                                       ;;F198|F195+F195/F195\F195; \ Set yoshi wing ability 
                      AND.B #$02                                ;;F199|F196+F196/F196\F196;  | ($141E = #$02) 
                      STA.W !YoshiHasWingsEvt                   ;;F19B|F198+F198/F198\F198; / 
                      PLA                                       ;;F19E|F19B+F19B/F19B\F19B; \ If Yoshi gets stomp ability, 
                      AND.B #$01                                ;;F19F|F19C+F19C/F19C\F19C;  | $18E7 = #$01 
                      STA.W !YoshiCanStomp                      ;;F1A1|F19E+F19E/F19E\F19E; / 
                      PLY                                       ;;F1A4|F1A1+F1A1/F1A1\F1A1;
CODE_01F1A2:          LDA.B !EffFrame                           ;;F1A5|F1A2+F1A2/F1A2\F1A2;
                      AND.B #$03                                ;;F1A7|F1A4+F1A4/F1A4\F1A4;
                      BNE +                                     ;;F1A9|F1A6+F1A6/F1A6\F1A6;
                      LDA.W !YoshiSwallowTimer                  ;;F1AB|F1A8+F1A8/F1A8\F1A8;
                      BEQ +                                     ;;F1AE|F1AB+F1AB/F1AB\F1AB;
                      DEC.W !YoshiSwallowTimer                  ;;F1B0|F1AD+F1AD/F1AD\F1AD;
                      BNE +                                     ;;F1B3|F1B0+F1B0/F1B0\F1B0;
                      LDY.W !SpriteMisc160E,X                   ;;F1B5|F1B2+F1B2/F1B2\F1B2;
                      LDA.B #$00                                ;;F1B8|F1B5+F1B5/F1B5\F1B5;
                      STA.W !SpriteStatus,Y                     ;;F1BA|F1B7+F1B7/F1B7\F1B7;
                      DEC A                                     ;;F1BD|F1BA+F1BA/F1BA\F1BA;
                      STA.W !SpriteMisc160E,X                   ;;F1BE|F1BB+F1BB/F1BB\F1BB;
                      LDA.B #$1B                                ;;F1C1|F1BE+F1BE/F1BE\F1BE;
                      STA.W !SpriteMisc1564,X                   ;;F1C3|F1C0+F1C0/F1C0\F1C0;
                      JMP CODE_01F0D3                           ;;F1C6|F1C3+F1C3/F1C3\F1C3;
                                                                ;;                        ;
                    + LDA.W !YoshiStartEatTimer                 ;;F1C9|F1C6+F1C6/F1C6\F1C6;
                      BEQ CODE_01F1DF                           ;;F1CC|F1C9+F1C9/F1C9\F1C9;
                      DEC.W !YoshiStartEatTimer                 ;;F1CE|F1CB+F1CB/F1CB\F1CB;
                      BNE Return01F1DE                          ;;F1D1|F1CE+F1CE/F1CE\F1CE;
                      INC.W !SpriteMisc1594,X                   ;;F1D3|F1D0+F1D0/F1D0\F1D0;
                      STZ.W !SpriteMisc151C,X                   ;;F1D6|F1D3+F1D3/F1D3\F1D3;
                      LDA.B #$FF                                ;;F1D9|F1D6+F1D6/F1D6\F1D6;
                      STA.W !SpriteMisc160E,X                   ;;F1DB|F1D8+F1D8/F1D8\F1D8;
                      STZ.W !SpriteMisc1564,X                   ;;F1DE|F1DB+F1DB/F1DB\F1DB;
Return01F1DE:         RTS                                       ;;F1E1|F1DE+F1DE/F1DE\F1DE; Return 
                                                                ;;                        ;
CODE_01F1DF:          LDA.B !SpriteTableC2,X                    ;;F1E2|F1DF+F1DF/F1DF\F1DF;
                      CMP.B #$01                                ;;F1E4|F1E1+F1E1/F1E1\F1E1;
                      BNE Return01F1DE                          ;;F1E6|F1E3+F1E3/F1E3\F1E3;
                      BIT.B !byetudlrFrame                      ;;F1E8|F1E5+F1E5/F1E5\F1E5;
                      BVC Return01F1DE                          ;;F1EA|F1E7+F1E7/F1E7\F1E7;
                      LDA.W !YoshiSwallowTimer                  ;;F1EC|F1E9+F1E9/F1E9\F1E9;
                      BNE +                                     ;;F1EF|F1EC+F1EC/F1EC\F1EC;
                      JMP CODE_01F309                           ;;F1F1|F1EE+F1EE/F1EE\F1EE;
                                                                ;;                        ;
                    + STZ.W !YoshiSwallowTimer                  ;;F1F4|F1F1+F1F1/F1F1\F1F1;
                      LDY.W !SpriteMisc160E,X                   ;;F1F7|F1F4+F1F4/F1F4\F1F4;
                      PHY                                       ;;F1FA|F1F7+F1F7/F1F7\F1F7;
                      PHY                                       ;;F1FB|F1F8+F1F8/F1F8\F1F8;
                      LDY.W !SpriteMisc157C,X                   ;;F1FC|F1F9+F1F9/F1F9\F1F9;
                      LDA.B !SpriteXPosLow,X                    ;;F1FF|F1FC+F1FC/F1FC\F1FC;
                      CLC                                       ;;F201|F1FE+F1FE/F1FE\F1FE;
                      ADC.W DATA_01F305,Y                       ;;F202|F1FF+F1FF/F1FF\F1FF;
                      PLY                                       ;;F205|F202+F202/F202\F202;
                      STA.W !SpriteXPosLow,Y                    ;;F206|F203+F203/F203\F203;
                      LDY.W !SpriteMisc157C,X                   ;;F209|F206+F206/F206\F206;
                      LDA.W !SpriteYPosHigh,X                   ;;F20C|F209+F209/F209\F209;
                      ADC.W DATA_01F307,Y                       ;;F20F|F20C+F20C/F20C\F20C;
                      PLY                                       ;;F212|F20F+F20F/F20F\F20F;
                      STA.W !SpriteYPosHigh,Y                   ;;F213|F210+F210/F210\F210;
                      LDA.B !SpriteYPosLow,X                    ;;F216|F213+F213/F213\F213;
                      STA.W !SpriteYPosLow,Y                    ;;F218|F215+F215/F215\F215;
                      LDA.W !SpriteXPosHigh,X                   ;;F21B|F218+F218/F218\F218;
                      STA.W !SpriteXPosHigh,Y                   ;;F21E|F21B+F21B/F21B\F21B;
                      LDA.B #$00                                ;;F221|F21E+F21E/F21E\F21E;
                      STA.W !SpriteTableC2,Y                    ;;F223|F220+F220/F220\F220;
                      STA.W !SpriteOnYoshiTongue,Y              ;;F226|F223+F223/F223\F223;
                      STA.W !SpriteMisc1626,Y                   ;;F229|F226+F226/F226\F226;
                      LDA.W !PlayerDuckingOnYoshi               ;;F22C|F229+F229/F229\F229;
                      CMP.B #$01                                ;;F22F|F22C+F22C/F22C\F22C;
                      LDA.B #$0A                                ;;F231|F22E+F22E/F22E\F22E;
                      BCC +                                     ;;F233|F230+F230/F230\F230;
                      LDA.B #$09                                ;;F235|F232+F232/F232\F232; \ Sprite status = Carryable 
                    + STA.W !SpriteStatus,Y                     ;;F237|F234+F234/F234\F234; / 
                      PHX                                       ;;F23A|F237+F237/F237\F237;
                      LDA.W !SpriteMisc157C,X                   ;;F23B|F238+F238/F238\F238;
                      STA.W !SpriteMisc157C,Y                   ;;F23E|F23B+F23B/F23B\F23B;
                      TAX                                       ;;F241|F23E+F23E/F23E\F23E;
                      BCC +                                     ;;F242|F23F+F23F/F23F\F23F;
                      INX                                       ;;F244|F241+F241/F241\F241;
                      INX                                       ;;F245|F242+F242/F242\F242;
                    + LDA.W DATA_01F301,X                       ;;F246|F243+F243/F243\F243;
                      STA.W !SpriteXSpeed,Y                     ;;F249|F246+F246/F246\F246;
                      LDA.B #$00                                ;;F24C|F249+F249/F249\F249;
                      STA.W !SpriteYSpeed,Y                     ;;F24E|F24B+F24B/F24B\F24B;
                      PLX                                       ;;F251|F24E+F24E/F24E\F24E;
                      LDA.B #$10                                ;;F252|F24F+F24F/F24F\F24F;
                      STA.W !SpriteMisc1558,X                   ;;F254|F251+F251/F251\F251;
                      LDA.B #$03                                ;;F257|F254+F254/F254\F254;
                      STA.W !SpriteMisc1594,X                   ;;F259|F256+F256/F256\F256;
                      LDA.B #$FF                                ;;F25C|F259+F259/F259\F259;
                      STA.W !SpriteMisc160E,X                   ;;F25E|F25B+F25B/F25B\F25B;
                      LDA.W !SpriteNumber,Y                     ;;F261|F25E+F25E/F25E\F25E;
                      CMP.B #$0D                                ;;F264|F261+F261/F261\F261;
                      BCS CODE_01F2DF                           ;;F266|F263+F263/F263\F263;
                      LDA.W !SpriteMisc187B,Y                   ;;F268|F265+F265/F265\F265;
                      BNE CODE_01F27C                           ;;F26B|F268+F268/F268\F268;
                      LDA.W !SpriteOBJAttribute,Y               ;;F26D|F26A+F26A/F26A\F26A;
                      AND.B #$0E                                ;;F270|F26D+F26D/F26D\F26D;
                      CMP.B #$08                                ;;F272|F26F+F26F/F26F\F26F;
                      BEQ CODE_01F27C                           ;;F274|F271+F271/F271\F271;
                      LDA.W !SpriteOBJAttribute,X               ;;F276|F273+F273/F273\F273;
                      AND.B #$0E                                ;;F279|F276+F276/F276\F276;
                      CMP.B #$08                                ;;F27B|F278+F278/F278\F278;
                      BNE CODE_01F2DF                           ;;F27D|F27A+F27A/F27A\F27A;
CODE_01F27C:          PHX                                       ;;F27F|F27C+F27C/F27C\F27C;
                      TYX                                       ;;F280|F27D+F27D/F27D\F27D;
                      STZ.W !SpriteStatus,X                     ;;F281|F27E+F27E/F27E\F27E;
                      LDA.B #$02                                ;;F284|F281+F281/F281\F281;
                      STA.B !_0                                 ;;F286|F283+F283/F283\F283;
                      JSR CODE_01F295                           ;;F288|F285+F285/F285\F285;
                      JSR CODE_01F295                           ;;F28B|F288+F288/F288\F288;
                      JSR CODE_01F295                           ;;F28E|F28B+F28B/F28B\F28B;
                      PLX                                       ;;F291|F28E+F28E/F28E\F28E;
                      LDA.B #!SFX_FIRESPIT                      ;;F292|F28F+F28F/F28F\F28F; \ Play sound effect 
                      STA.W !SPCIO3                             ;;F294|F291+F291/F291\F291; / 
                      RTS                                       ;;F297|F294+F294/F294\F294; Return 
                                                                ;;                        ;
CODE_01F295:          JSR CODE_018EEF                           ;;F298|F295+F295/F295\F295;
                      LDA.B #$11                                ;;F29B|F298+F298/F298\F298; \ Extended sprite = Yoshi fireball 
                      STA.W !ExtSpriteNumber,Y                  ;;F29D|F29A+F29A/F29A\F29A; / 
                      LDA.B !SpriteXPosLow,X                    ;;F2A0|F29D+F29D/F29D\F29D;
                      STA.W !ExtSpriteXPosLow,Y                 ;;F2A2|F29F+F29F/F29F\F29F;
                      LDA.W !SpriteYPosHigh,X                   ;;F2A5|F2A2+F2A2/F2A2\F2A2;
                      STA.W !ExtSpriteXPosHigh,Y                ;;F2A8|F2A5+F2A5/F2A5\F2A5;
                      LDA.B !SpriteYPosLow,X                    ;;F2AB|F2A8+F2A8/F2A8\F2A8;
                      STA.W !ExtSpriteYPosLow,Y                 ;;F2AD|F2AA+F2AA/F2AA\F2AA;
                      LDA.W !SpriteXPosHigh,X                   ;;F2B0|F2AD+F2AD/F2AD\F2AD;
                      STA.W !ExtSpriteYPosHigh,Y                ;;F2B3|F2B0+F2B0/F2B0\F2B0;
                      LDA.B #$00                                ;;F2B6|F2B3+F2B3/F2B3\F2B3;
                      STA.W !ExtSpritePriority,Y                ;;F2B8|F2B5+F2B5/F2B5\F2B5;
                      PHX                                       ;;F2BB|F2B8+F2B8/F2B8\F2B8;
                      LDA.W !SpriteMisc157C,X                   ;;F2BC|F2B9+F2B9/F2B9\F2B9;
                      LSR A                                     ;;F2BF|F2BC+F2BC/F2BC\F2BC;
                      LDX.B !_0                                 ;;F2C0|F2BD+F2BD/F2BD\F2BD;
                      LDA.W DATA_01F2D9,X                       ;;F2C2|F2BF+F2BF/F2BF\F2BF;
                      BCC +                                     ;;F2C5|F2C2+F2C2/F2C2\F2C2;
                      EOR.B #$FF                                ;;F2C7|F2C4+F2C4/F2C4\F2C4;
                      INC A                                     ;;F2C9|F2C6+F2C6/F2C6\F2C6;
                    + STA.W !ExtSpriteXSpeed,Y                  ;;F2CA|F2C7+F2C7/F2C7\F2C7;
                      LDA.W DATA_01F2DC,X                       ;;F2CD|F2CA+F2CA/F2CA\F2CA;
                      STA.W !ExtSpriteYSpeed,Y                  ;;F2D0|F2CD+F2CD/F2CD\F2CD;
                      LDA.B #$A0                                ;;F2D3|F2D0+F2D0/F2D0\F2D0;
                      STA.W !ExtSpriteMisc176F,Y                ;;F2D5|F2D2+F2D2/F2D2\F2D2;
                      PLX                                       ;;F2D8|F2D5+F2D5/F2D5\F2D5;
                      DEC.B !_0                                 ;;F2D9|F2D6+F2D6/F2D6\F2D6;
                      RTS                                       ;;F2DB|F2D8+F2D8/F2D8\F2D8; Return 
                                                                ;;                        ;
                                                                ;;                        ;
DATA_01F2D9:          db $28,$24,$24                            ;;F2DC|F2D9+F2D9/F2D9\F2D9;
                                                                ;;                        ;
DATA_01F2DC:          db $00,$F8,$08                            ;;F2DF|F2DC+F2DC/F2DC\F2DC;
                                                                ;;                        ;
CODE_01F2DF:          LDA.B #!SFX_SPIT                          ;;F2E2|F2DF+F2DF/F2DF\F2DF; \ Play sound effect 
                      STA.W !SPCIO0                             ;;F2E4|F2E1+F2E1/F2E1\F2E1; / 
                      LDA.W !SpriteTweakerE,Y                   ;;F2E7|F2E4+F2E4/F2E4\F2E4; \ Return if sprite doesn't spawn a new one 
                      AND.B #$40                                ;;F2EA|F2E7+F2E7/F2E7\F2E7;  | 
                      BEQ +                                     ;;F2EC|F2E9+F2E9/F2E9\F2E9; / 
                      PHX                                       ;;F2EE|F2EB+F2EB/F2EB\F2EB; \ Load sprite to spawn and store it 
                      LDX.W !SpriteNumber,Y                     ;;F2EF|F2EC+F2EC/F2EC\F2EC;  | 
                      LDA.L SpriteToSpawn,X                     ;;F2F2|F2EF+F2EF/F2EF\F2EF;  | 
                      PLX                                       ;;F2F6|F2F3+F2F3/F2F3\F2F3;  | 
                      STA.W !SpriteNumber,Y                     ;;F2F7|F2F4+F2F4/F2F4\F2F4; / 
                      PHX                                       ;;F2FA|F2F7+F2F7/F2F7\F2F7; \ Load Tweaker bytes 
                      TYX                                       ;;F2FB|F2F8+F2F8/F2F8\F2F8;  | 
                      JSL LoadSpriteTables                      ;;F2FC|F2F9+F2F9/F2F9\F2F9;  | 
                      PLX                                       ;;F300|F2FD+F2FD/F2FD\F2FD; / 
                    + RTS                                       ;;F301|F2FE+F2FE/F2FE\F2FE; Return 
                                                                ;;                        ;
                                                                ;;                        ;
                      db $20,$E0                                ;;F302|F2FF+F2FF/F2FF\F2FF;
                                                                ;;                        ;
DATA_01F301:          db $30,$D0,$10,$F0                        ;;F304|F301+F301/F301\F301;
                                                                ;;                        ;
DATA_01F305:          db $10,$F0                                ;;F308|F305+F305/F305\F305;
                                                                ;;                        ;
DATA_01F307:          db $00,$FF                                ;;F30A|F307+F307/F307\F307;
                                                                ;;                        ;
CODE_01F309:          LDA.B #$12                                ;;F30C|F309+F309/F309\F309;
                      STA.W !YoshiTongueTimer                   ;;F30E|F30B+F30B/F30B\F30B;
                      LDA.B #!SFX_YOSHITONGUE                   ;;F311|F30E+F30E/F30E\F30E; \ Play sound effect 
                      STA.W !SPCIO3                             ;;F313|F310+F310/F310\F310; / 
                      RTS                                       ;;F316|F313+F313/F313\F313; Return 
                                                                ;;                        ;
CODE_01F314:          LDA.W !SpriteMisc151C,X                   ;;F317|F314+F314/F314\F314;
                      CLC                                       ;;F31A|F317+F317/F317\F317;
                      ADC.B #$03                                ;;F31B|F318+F318/F318\F318;
                      STA.W !SpriteMisc151C,X                   ;;F31D|F31A+F31A/F31A\F31A;
                      CMP.B #$20                                ;;F320|F31D+F31D/F31D\F31D;
                      BCS +                                     ;;F322|F31F+F31F/F31F\F31F;
CODE_01F321:          JSR CODE_01F3FE                           ;;F324|F321+F321/F321\F321;
                      JSR CODE_01F4B2                           ;;F327|F324+F324/F324\F324;
                      RTS                                       ;;F32A|F327+F327/F327\F327; Return 
                                                                ;;                        ;
                    + LDA.B #$08                                ;;F32B|F328+F328/F328\F328;
                      STA.W !SpriteMisc1558,X                   ;;F32D|F32A+F32A/F32A\F32A;
                      INC.W !SpriteMisc1594,X                   ;;F330|F32D+F32D/F32D\F32D;
                      BRA CODE_01F321                           ;;F333|F330+F330/F330\F330;
                                                                ;;                        ;
CODE_01F332:          LDA.W !SpriteMisc1558,X                   ;;F335|F332+F332/F332\F332;
                      BNE CODE_01F321                           ;;F338|F335+F335/F335\F335;
                      LDA.W !SpriteMisc151C,X                   ;;F33A|F337+F337/F337\F337;
                      SEC                                       ;;F33D|F33A+F33A/F33A\F33A;
                      SBC.B #$04                                ;;F33E|F33B+F33B/F33B\F33B;
                      BMI CODE_01F344                           ;;F340|F33D+F33D/F33D\F33D;
                      STA.W !SpriteMisc151C,X                   ;;F342|F33F+F33F/F33F\F33F;
                      BRA CODE_01F321                           ;;F345|F342+F342/F342\F342;
                                                                ;;                        ;
CODE_01F344:          STZ.W !SpriteMisc151C,X                   ;;F347|F344+F344/F344\F344;
                      STZ.W !SpriteMisc1594,X                   ;;F34A|F347+F347/F347\F347;
                      LDY.W !SpriteMisc160E,X                   ;;F34D|F34A+F34A/F34A\F34A;
                      BMI CODE_01F370                           ;;F350|F34D+F34D/F34D\F34D;
                      LDA.W !SpriteTweakerE,Y                   ;;F352|F34F+F34F/F34F\F34F;
                      AND.B #$02                                ;;F355|F352+F352/F352\F352;
                      BEQ CODE_01F373                           ;;F357|F354+F354/F354\F354;
                      LDA.B #$07                                ;;F359|F356+F356/F356\F356; \ Sprite status = Unused (todo: look here) 
                      STA.W !SpriteStatus,Y                     ;;F35B|F358+F358/F358\F358; / 
                      LDA.B #$FF                                ;;F35E|F35B+F35B/F35B\F35B;
                      STA.W !YoshiSwallowTimer                  ;;F360|F35D+F35D/F35D\F35D;
                      LDA.W !SpriteNumber,Y                     ;;F363|F360+F360/F360\F360; \ Branch if not a Koopa 
                      CMP.B #$0D                                ;;F366|F363+F363/F363\F363;  | (sprite number >= #$0D) 
                      BCS CODE_01F370                           ;;F368|F365+F365/F365\F365; / 
                      PHX                                       ;;F36A|F367+F367/F367\F367;
                      TAX                                       ;;F36B|F368+F368/F368\F368;
                      LDA.W SpriteToSpawn,X                     ;;F36C|F369+F369/F369\F369;
                      STA.W !SpriteNumber,Y                     ;;F36F|F36C+F36C/F36C\F36C;
                      PLX                                       ;;F372|F36F+F36F/F36F\F36F;
CODE_01F370:          JMP CODE_01F3FA                           ;;F373|F370+F370/F370\F370;
                                                                ;;                        ;
CODE_01F373:          LDA.B #$00                                ;;F376|F373+F373/F373\F373;
                      STA.W !SpriteStatus,Y                     ;;F378|F375+F375/F375\F375;
                      LDA.B #$1B                                ;;F37B|F378+F378/F378\F378;
                      STA.W !SpriteMisc1564,X                   ;;F37D|F37A+F37A/F37A\F37A;
                      LDA.B #$FF                                ;;F380|F37D+F37D/F37D\F37D;
                      STA.W !SpriteMisc160E,X                   ;;F382|F37F+F37F/F37F\F37F;
                      STY.B !_0                                 ;;F385|F382+F382/F382\F382;
                      LDA.W !SpriteNumber,Y                     ;;F387|F384+F384/F384\F384;
                      CMP.B #$9D                                ;;F38A|F387+F387/F387\F387;
                      BNE +                                     ;;F38C|F389+F389/F389\F389;
                      LDA.W !SpriteTableC2,Y                    ;;F38E|F38B+F38B/F38B\F38B;
                      CMP.B #$03                                ;;F391|F38E+F38E/F38E\F38E;
                      BNE +                                     ;;F393|F390+F390/F390\F390;
                      LDA.B #$74                                ;;F395|F392+F392/F392\F392; \ Sprite = Mushroom 
                      STA.W !SpriteNumber,Y                     ;;F397|F394+F394/F394\F394; / 
                      LDA.W !SpriteTweakerD,Y                   ;;F39A|F397+F397/F397\F397; \ Set "Gives powerup when eaten" bit 
                      ORA.B #$40                                ;;F39D|F39A+F39A/F39A\F39A;  | 
                      STA.W !SpriteTweakerD,Y                   ;;F39F|F39C+F39C/F39C\F39C; / 
                    + LDA.W !SpriteNumber,Y                     ;;F3A2|F39F+F39F/F39F\F39F; \ Branch if not Changing Item 
                      CMP.B #$81                                ;;F3A5|F3A2+F3A2/F3A2\F3A2;  | 
                      BNE +                                     ;;F3A7|F3A4+F3A4/F3A4\F3A4; / 
                      LDA.W !SpriteMisc187B,Y                   ;;F3A9|F3A6+F3A6/F3A6\F3A6;
                      LSR A                                     ;;F3AC|F3A9+F3A9/F3A9\F3A9;
                      LSR A                                     ;;F3AD|F3AA+F3AA/F3AA\F3AA;
                      LSR A                                     ;;F3AE|F3AB+F3AB/F3AB\F3AB;
                      LSR A                                     ;;F3AF|F3AC+F3AC/F3AC\F3AC;
                      LSR A                                     ;;F3B0|F3AD+F3AD/F3AD\F3AD;
                      LSR A                                     ;;F3B1|F3AE+F3AE/F3AE\F3AE;
                      AND.B #$03                                ;;F3B2|F3AF+F3AF/F3AF\F3AF;
                      TAY                                       ;;F3B4|F3B1+F3B1/F3B1\F3B1;
                      LDA.W ChangingItemSprite,Y                ;;F3B5|F3B2+F3B2/F3B2\F3B2;
                      LDY.B !_0                                 ;;F3B8|F3B5+F3B5/F3B5\F3B5;
                      STA.W !SpriteNumber,Y                     ;;F3BA|F3B7+F3B7/F3B7\F3B7;
                    + PHA                                       ;;F3BD|F3BA+F3BA/F3BA\F3BA;
                      LDY.B !_0                                 ;;F3BE|F3BB+F3BB/F3BB\F3BB;
                      LDA.W !SpriteTweakerD,Y                   ;;F3C0|F3BD+F3BD/F3BD\F3BD;
                      ASL A                                     ;;F3C3|F3C0+F3C0/F3C0\F3C0;
                      ASL A                                     ;;F3C4|F3C1+F3C1/F3C1\F3C1;
                      PLA                                       ;;F3C5|F3C2+F3C2/F3C2\F3C2;
                      BCC +                                     ;;F3C6|F3C3+F3C3/F3C3\F3C3;
                      PHX                                       ;;F3C8|F3C5+F3C5/F3C5\F3C5;
                      TYX                                       ;;F3C9|F3C6+F3C6/F3C6\F3C6;
                      STZ.B !SpriteTableC2,X                    ;;F3CA|F3C7+F3C7/F3C7\F3C7;
                      JSR CODE_01C4BF                           ;;F3CC|F3C9+F3C9/F3C9\F3C9;
                      PLX                                       ;;F3CF|F3CC+F3CC/F3CC\F3CC;
                      LDY.W !PlayerDuckingOnYoshi               ;;F3D0|F3CD+F3CD/F3CD\F3CD;
                      LDA.W DATA_01F3D9,Y                       ;;F3D3|F3D0+F3D0/F3D0\F3D0;
                      STA.W !SpriteMisc1602,X                   ;;F3D6|F3D3+F3D3/F3D3\F3D3;
                      JMP CODE_01F321                           ;;F3D9|F3D6+F3D6/F3D6\F3D6;
                                                                ;;                        ;
                                                                ;;                        ;
DATA_01F3D9:          db $00,$04                                ;;F3DC|F3D9+F3D9/F3D9\F3D9;
                                                                ;;                        ;
                    + CMP.B #$7E                                ;;F3DE|F3DB+F3DB/F3DB\F3DB;
                      BNE CODE_01F3F7                           ;;F3E0|F3DD+F3DD/F3DD\F3DD;
                      LDA.W !SpriteTableC2,Y                    ;;F3E2|F3DF+F3DF/F3DF\F3DF;
                      BEQ CODE_01F3F7                           ;;F3E5|F3E2+F3E2/F3E2\F3E2;
                      CMP.B #$02                                ;;F3E7|F3E4+F3E4/F3E4\F3E4;
                      BNE +                                     ;;F3E9|F3E6+F3E6/F3E6\F3E6;
                      LDA.B #$08                                ;;F3EB|F3E8+F3E8/F3E8\F3E8;
                      STA.B !PlayerAnimation                    ;;F3ED|F3EA+F3EA/F3EA\F3EA;
                      LDA.B #!SFX_VINEBLOCK                     ;;F3EF|F3EC+F3EC/F3EC\F3EC; \ Play sound effect 
                      STA.W !SPCIO3                             ;;F3F1|F3EE+F3EE/F3EE\F3EE; / 
                    + JSR CODE_01F6CD                           ;;F3F4|F3F1+F3F1/F3F1\F3F1;
                      JMP CODE_01F321                           ;;F3F7|F3F4+F3F4/F3F4\F3F4;
                                                                ;;                        ;
CODE_01F3F7:          JSR CODE_01F0D3                           ;;F3FA|F3F7+F3F7/F3F7\F3F7;
CODE_01F3FA:          JMP CODE_01F321                           ;;F3FD|F3FA+F3FA/F3FA\F3FA;
                                                                ;;                        ;
Return01F3FD:         RTS                                       ;;F400|F3FD+F3FD/F3FD\F3FD; Return 
                                                                ;;                        ;
CODE_01F3FE:          LDA.W !SpriteOffscreenX,X                 ;;F401|F3FE+F3FE/F3FE\F3FE; \ Branch if sprite off screen... 
                      ORA.W !SpriteOffscreenVert,X              ;;F404|F401+F401/F401\F401;  | 
                      ORA.W !YoshiInPipeSetting                 ;;F407|F404+F404/F404\F404;  | ...or going down pipe 
                      BNE Return01F3FD                          ;;F40A|F407+F407/F407\F407; / 
                      LDY.W !SpriteMisc1602,X                   ;;F40C|F409+F409/F409\F409;
                      LDA.W DATA_01F61A,Y                       ;;F40F|F40C+F40C/F40C\F40C;
                      STA.W !TileGenerateTrackA                 ;;F412|F40F+F40F/F40F\F40F;
                      CLC                                       ;;F415|F412+F412/F412\F412;
                      ADC.B !SpriteYPosLow,X                    ;;F416|F413+F413/F413\F413;
                      SEC                                       ;;F418|F415+F415/F415\F415;
                      SBC.B !Layer1YPos                         ;;F419|F416+F416/F416\F416;
                      STA.B !_1                                 ;;F41B|F418+F418/F418\F418;
                      LDA.W !SpriteMisc157C,X                   ;;F41D|F41A+F41A/F41A\F41A;
                      BNE +                                     ;;F420|F41D+F41D/F41D\F41D;
                      TYA                                       ;;F422|F41F+F41F/F41F\F41F;
                      CLC                                       ;;F423|F420+F420/F420\F420;
                      ADC.B #$08                                ;;F424|F421+F421/F421\F421;
                      TAY                                       ;;F426|F423+F423/F423\F423;
                    + LDA.W DATA_01F60A,Y                       ;;F427|F424+F424/F424\F424;
                      STA.B !_D                                 ;;F42A|F427+F427/F427\F427;
                      LDA.B !SpriteXPosLow,X                    ;;F42C|F429+F429/F429\F429;
                      SEC                                       ;;F42E|F42B+F42B/F42B\F42B;
                      SBC.B !Layer1XPos                         ;;F42F|F42C+F42C/F42C\F42C;
                      CLC                                       ;;F431|F42E+F42E/F42E\F42E;
                      ADC.B !_D                                 ;;F432|F42F+F42F/F42F\F42F;
                      STA.B !_0                                 ;;F434|F431+F431/F431\F431;
                      LDA.W !SpriteMisc157C,X                   ;;F436|F433+F433/F433\F433;
                      BNE CODE_01F43C                           ;;F439|F436+F436/F436\F436;
                      BCS Return01F3FD                          ;;F43B|F438+F438/F438\F438;
                      BRA CODE_01F43E                           ;;F43D|F43A+F43A/F43A\F43A;
                                                                ;;                        ;
CODE_01F43C:          BCC Return01F3FD                          ;;F43F|F43C+F43C/F43C\F43C;
CODE_01F43E:          LDA.W !SpriteMisc151C,X                   ;;F441|F43E+F43E/F43E\F43E;
                      STA.W !HW_WRDIV+1                         ;;F444|F441+F441/F441\F441; Dividend (High-Byte)
                      STZ.W !HW_WRDIV                           ;;F447|F444+F444/F444\F444; Dividend (Low Byte)
                      LDA.B #$04                                ;;F44A|F447+F447/F447\F447;
                      STA.W !HW_WRDIV+2                         ;;F44C|F449+F449/F449\F449; Divisor B
                      NOP                                       ;;F44F|F44C+F44C/F44C\F44C;
                      NOP                                       ;;F450|F44D+F44D/F44D\F44D;
                      NOP                                       ;;F451|F44E+F44E/F44E\F44E;
                      NOP                                       ;;F452|F44F+F44F/F44F\F44F;
                      NOP                                       ;;F453|F450+F450/F450\F450;
                      NOP                                       ;;F454|F451+F451/F451\F451;
                      NOP                                       ;;F455|F452+F452/F452\F452;
                      NOP                                       ;;F456|F453+F453/F453\F453;
                      LDA.W !SpriteMisc157C,X                   ;;F457|F454+F454/F454\F454;
                      STA.B !_7                                 ;;F45A|F457+F457/F457\F457;
                      LSR A                                     ;;F45C|F459+F459/F459\F459;
                      LDA.W !HW_RDDIV+1                         ;;F45D|F45A+F45A/F45A\F45A; Quotient of Divide Result (High Byte)
                      BCC +                                     ;;F460|F45D+F45D/F45D\F45D;
                      EOR.B #$FF                                ;;F462|F45F+F45F/F45F\F45F;
                      INC A                                     ;;F464|F461+F461/F461\F461;
                    + STA.B !_5                                 ;;F465|F462+F462/F462\F462;
                      LDA.B #$04                                ;;F467|F464+F464/F464\F464;
                      STA.B !_6                                 ;;F469|F466+F466/F466\F466;
                      LDY.B #$0C                                ;;F46B|F468+F468/F468\F468;
CODE_01F46A:          LDA.B !_0                                 ;;F46D|F46A+F46A/F46A\F46A;
                      STA.W !OAMTileXPos,Y                      ;;F46F|F46C+F46C/F46C\F46C;
                      CLC                                       ;;F472|F46F+F46F/F46F\F46F;
                      ADC.B !_5                                 ;;F473|F470+F470/F470\F470;
                      STA.B !_0                                 ;;F475|F472+F472/F472\F472;
                      LDA.B !_5                                 ;;F477|F474+F474/F474\F474;
                      BPL CODE_01F47C                           ;;F479|F476+F476/F476\F476;
                      BCC Return01F4B1                          ;;F47B|F478+F478/F478\F478;
                      BRA CODE_01F47E                           ;;F47D|F47A+F47A/F47A\F47A;
                                                                ;;                        ;
CODE_01F47C:          BCS Return01F4B1                          ;;F47F|F47C+F47C/F47C\F47C;
CODE_01F47E:          LDA.B !_1                                 ;;F481|F47E+F47E/F47E\F47E;
                      STA.W !OAMTileYPos,Y                      ;;F483|F480+F480/F480\F480;
                      LDA.B !_6                                 ;;F486|F483+F483/F483\F483;
                      CMP.B #$01                                ;;F488|F485+F485/F485\F485;
                      LDA.B #$76                                ;;F48A|F487+F487/F487\F487;
                      BCS +                                     ;;F48C|F489+F489/F489\F489;
                      LDA.B #$66                                ;;F48E|F48B+F48B/F48B\F48B;
                    + STA.W !OAMTileNo,Y                        ;;F490|F48D+F48D/F48D\F48D;
                      LDA.B !_7                                 ;;F493|F490+F490/F490\F490;
                      LSR A                                     ;;F495|F492+F492/F492\F492;
                      LDA.B #$09                                ;;F496|F493+F493/F493\F493;
                      BCS +                                     ;;F498|F495+F495/F495\F495;
                      ORA.B #$40                                ;;F49A|F497+F497/F497\F497;
                    + ORA.B !SpriteProperties                   ;;F49C|F499+F499/F499\F499;
                      STA.W !OAMTileAttr,Y                      ;;F49E|F49B+F49B/F49B\F49B;
                      PHY                                       ;;F4A1|F49E+F49E/F49E\F49E;
                      TYA                                       ;;F4A2|F49F+F49F/F49F\F49F;
                      LSR A                                     ;;F4A3|F4A0+F4A0/F4A0\F4A0;
                      LSR A                                     ;;F4A4|F4A1+F4A1/F4A1\F4A1;
                      TAY                                       ;;F4A5|F4A2+F4A2/F4A2\F4A2;
                      LDA.B #$00                                ;;F4A6|F4A3+F4A3/F4A3\F4A3;
                      STA.W !OAMTileSize,Y                      ;;F4A8|F4A5+F4A5/F4A5\F4A5;
                      PLY                                       ;;F4AB|F4A8+F4A8/F4A8\F4A8;
                      INY                                       ;;F4AC|F4A9+F4A9/F4A9\F4A9;
                      INY                                       ;;F4AD|F4AA+F4AA/F4AA\F4AA;
                      INY                                       ;;F4AE|F4AB+F4AB/F4AB\F4AB;
                      INY                                       ;;F4AF|F4AC+F4AC/F4AC\F4AC;
                      DEC.B !_6                                 ;;F4B0|F4AD+F4AD/F4AD\F4AD;
                      BPL CODE_01F46A                           ;;F4B2|F4AF+F4AF/F4AF\F4AF;
Return01F4B1:         RTS                                       ;;F4B4|F4B1+F4B1/F4B1\F4B1; Return 
                                                                ;;                        ;
CODE_01F4B2:          LDA.W !SpriteMisc160E,X                   ;;F4B5|F4B2+F4B2/F4B2\F4B2;
                      BMI CODE_01F524                           ;;F4B8|F4B5+F4B5/F4B5\F4B5;
                      LDY.B #$00                                ;;F4BA|F4B7+F4B7/F4B7\F4B7;
                      LDA.B !_D                                 ;;F4BC|F4B9+F4B9/F4B9\F4B9;
                      BMI CODE_01F4C3                           ;;F4BE|F4BB+F4BB/F4BB\F4BB;
                      CLC                                       ;;F4C0|F4BD+F4BD/F4BD\F4BD;
                      ADC.W !SpriteMisc151C,X                   ;;F4C1|F4BE+F4BE/F4BE\F4BE;
                      BRA +                                     ;;F4C4|F4C1+F4C1/F4C1\F4C1;
                                                                ;;                        ;
CODE_01F4C3:          LDA.W !SpriteMisc151C,X                   ;;F4C6|F4C3+F4C3/F4C3\F4C3;
                      EOR.B #$FF                                ;;F4C9|F4C6+F4C6/F4C6\F4C6;
                      INC A                                     ;;F4CB|F4C8+F4C8/F4C8\F4C8;
                      CLC                                       ;;F4CC|F4C9+F4C9/F4C9\F4C9;
                      ADC.B !_D                                 ;;F4CD|F4CA+F4CA/F4CA\F4CA;
                    + SEC                                       ;;F4CF|F4CC+F4CC/F4CC\F4CC;
                      SBC.B #$04                                ;;F4D0|F4CD+F4CD/F4CD\F4CD;
                      BPL +                                     ;;F4D2|F4CF+F4CF/F4CF\F4CF;
                      DEY                                       ;;F4D4|F4D1+F4D1/F4D1\F4D1;
                    + PHY                                       ;;F4D5|F4D2+F4D2/F4D2\F4D2;
                      CLC                                       ;;F4D6|F4D3+F4D3/F4D3\F4D3;
                      ADC.B !SpriteXPosLow,X                    ;;F4D7|F4D4+F4D4/F4D4\F4D4;
                      LDY.W !SpriteMisc160E,X                   ;;F4D9|F4D6+F4D6/F4D6\F4D6;
                      STA.W !SpriteXPosLow,Y                    ;;F4DC|F4D9+F4D9/F4D9\F4D9;
                      PLY                                       ;;F4DF|F4DC+F4DC/F4DC\F4DC;
                      TYA                                       ;;F4E0|F4DD+F4DD/F4DD\F4DD;
                      ADC.W !SpriteYPosHigh,X                   ;;F4E1|F4DE+F4DE/F4DE\F4DE;
                      LDY.W !SpriteMisc160E,X                   ;;F4E4|F4E1+F4E1/F4E1\F4E1;
                      STA.W !SpriteYPosHigh,Y                   ;;F4E7|F4E4+F4E4/F4E4\F4E4;
                      LDA.B #$FC                                ;;F4EA|F4E7+F4E7/F4E7\F4E7;
                      STA.B !_0                                 ;;F4EC|F4E9+F4E9/F4E9\F4E9;
                      LDA.W !SpriteTweakerB,Y                   ;;F4EE|F4EB+F4EB/F4EB\F4EB;
                      AND.B #$40                                ;;F4F1|F4EE+F4EE/F4EE\F4EE;
                      BNE +                                     ;;F4F3|F4F0+F4F0/F4F0\F4F0;
                      LDA.W !SpriteTweakerF,Y                   ;;F4F5|F4F2+F4F2/F4F2\F4F2; \ Branch if "Death frame 2 tiles high" 
                      AND.B #$20                                ;;F4F8|F4F5+F4F5/F4F5\F4F5;  | is NOT set 
                      BEQ +                                     ;;F4FA|F4F7+F4F7/F4F7\F4F7; / 
                      LDA.B #$F8                                ;;F4FC|F4F9+F4F9/F4F9\F4F9;
                      STA.B !_0                                 ;;F4FE|F4FB+F4FB/F4FB\F4FB;
                    + STZ.B !_1                                 ;;F500|F4FD+F4FD/F4FD\F4FD;
                      LDA.B !_0                                 ;;F502|F4FF+F4FF/F4FF\F4FF;
                      CLC                                       ;;F504|F501+F501/F501\F501;
                      ADC.W !TileGenerateTrackA                 ;;F505|F502+F502/F502\F502;
                      BPL +                                     ;;F508|F505+F505/F505\F505;
                      DEC.B !_1                                 ;;F50A|F507+F507/F507\F507;
                    + CLC                                       ;;F50C|F509+F509/F509\F509;
                      ADC.B !SpriteYPosLow,X                    ;;F50D|F50A+F50A/F50A\F50A;
                      STA.W !SpriteYPosLow,Y                    ;;F50F|F50C+F50C/F50C\F50C;
                      LDA.W !SpriteXPosHigh,X                   ;;F512|F50F+F50F/F50F\F50F;
                      ADC.B !_1                                 ;;F515|F512+F512/F512\F512;
                      STA.W !SpriteXPosHigh,Y                   ;;F517|F514+F514/F514\F514;
                      LDA.B #$00                                ;;F51A|F517+F517/F517\F517;
                      STA.W !SpriteYSpeed,Y                     ;;F51C|F519+F519/F519\F519;
                      STA.W !SpriteXSpeed,Y                     ;;F51F|F51C+F51C/F51C\F51C;
                      INC A                                     ;;F522|F51F+F51F/F51F\F51F;
                      STA.W !SpriteOnYoshiTongue,Y              ;;F523|F520+F520/F520\F520;
                      RTS                                       ;;F526|F523+F523/F523\F523; Return 
                                                                ;;                        ;
CODE_01F524:          PHY                                       ;;F527|F524+F524/F524\F524;
                      LDY.B #$00                                ;;F528|F525+F525/F525\F525;
                      LDA.B !_D                                 ;;F52A|F527+F527/F527\F527;
                      BMI CODE_01F531                           ;;F52C|F529+F529/F529\F529;
                      CLC                                       ;;F52E|F52B+F52B/F52B\F52B;
                      ADC.W !SpriteMisc151C,X                   ;;F52F|F52C+F52C/F52C\F52C;
                      BRA +                                     ;;F532|F52F+F52F/F52F\F52F;
                                                                ;;                        ;
CODE_01F531:          LDA.W !SpriteMisc151C,X                   ;;F534|F531+F531/F531\F531;
                      EOR.B #$FF                                ;;F537|F534+F534/F534\F534;
                      INC A                                     ;;F539|F536+F536/F536\F536;
                      CLC                                       ;;F53A|F537+F537/F537\F537;
                      ADC.B !_D                                 ;;F53B|F538+F538/F538\F538;
                    + CLC                                       ;;F53D|F53A+F53A/F53A\F53A;
                      ADC.B #$00                                ;;F53E|F53B+F53B/F53B\F53B;
                      BPL +                                     ;;F540|F53D+F53D/F53D\F53D;
                      DEY                                       ;;F542|F53F+F53F/F53F\F53F;
                    + CLC                                       ;;F543|F540+F540/F540\F540;
                      ADC.B !SpriteXPosLow,X                    ;;F544|F541+F541/F541\F541;
                      STA.B !_0                                 ;;F546|F543+F543/F543\F543;
                      TYA                                       ;;F548|F545+F545/F545\F545;
                      ADC.W !SpriteYPosHigh,X                   ;;F549|F546+F546/F546\F546;
                      STA.B !_8                                 ;;F54C|F549+F549/F549\F549;
                      PLY                                       ;;F54E|F54B+F54B/F54B\F54B;
                      LDA.W !TileGenerateTrackA                 ;;F54F|F54C+F54C/F54C\F54C;
                      CLC                                       ;;F552|F54F+F54F/F54F\F54F;
                      ADC.B #$02                                ;;F553|F550+F550/F550\F550;
                      CLC                                       ;;F555|F552+F552/F552\F552;
                      ADC.B !SpriteYPosLow,X                    ;;F556|F553+F553/F553\F553;
                      STA.B !_1                                 ;;F558|F555+F555/F555\F555;
                      LDA.W !SpriteXPosHigh,X                   ;;F55A|F557+F557/F557\F557;
                      ADC.B #$00                                ;;F55D|F55A+F55A/F55A\F55A;
                      STA.B !_9                                 ;;F55F|F55C+F55C/F55C\F55C;
                      LDA.B #$08                                ;;F561|F55E+F55E/F55E\F55E;
                      STA.B !_2                                 ;;F563|F560+F560/F560\F560;
                      LDA.B #$04                                ;;F565|F562+F562/F562\F562;
                      STA.B !_3                                 ;;F567|F564+F564/F564\F564;
                      LDY.B #$0B                                ;;F569|F566+F566/F566\F566; Loop over spites: 
CODE_01F568:          STY.W !SpriteInterIndex                   ;;F56B|F568+F568/F568\F568;
                      CPY.W !CurSpriteProcess                   ;;F56E|F56B+F56B/F56B\F56B;
                      BEQ +                                     ;;F571|F56E+F56E/F56E\F56E;
                      LDA.W !SpriteMisc160E,X                   ;;F573|F570+F570/F570\F570;
                      BPL +                                     ;;F576|F573+F573/F573\F573;
                      LDA.W !SpriteStatus,Y                     ;;F578|F575+F575/F575\F575; \ Skip sprite if sprite status < 8 
                      CMP.B #$08                                ;;F57B|F578+F578/F578\F578;  | 
                      BCC +                                     ;;F57D|F57A+F57A/F57A\F57A; / 
                      LDA.W !SpriteBehindScene,Y                ;;F57F|F57C+F57C/F57C\F57C; \ Skip sprite if behind scenery 
                      BNE +                                     ;;F582|F57F+F57F/F57F\F57F; / 
                      PHY                                       ;;F584|F581+F581/F581\F581;
                      JSR TryEatSprite                          ;;F585|F582+F582/F582\F582;
                      PLY                                       ;;F588|F585+F585/F585\F585;
                    + DEY                                       ;;F589|F586+F586/F586\F586;
                      BPL CODE_01F568                           ;;F58A|F587+F587/F587\F587;
                      JSL CODE_02B9FA                           ;;F58C|F589+F589/F589\F589;
                      RTS                                       ;;F590|F58D+F58D/F58D\F58D; Return 
                                                                ;;                        ;
TryEatSprite:         PHX                                       ;;F591|F58E+F58E/F58E\F58E;
                      TYX                                       ;;F592|F58F+F58F/F58F\F58F;
                      JSL GetSpriteClippingA                    ;;F593|F590+F590/F590\F590;
                      PLX                                       ;;F597|F594+F594/F594\F594;
                      JSL CheckForContact                       ;;F598|F595+F595/F595\F595;
                      BCC Return01F609                          ;;F59C|F599+F599/F599\F599;
                      LDA.W !SpriteTweakerE,Y                   ;;F59E|F59B+F59B/F59B\F59B; \ If sprite inedible 
                      LSR A                                     ;;F5A1|F59E+F59E/F59E\F59E;  | 
                      BCC +                                     ;;F5A2|F59F+F59F/F59F\F59F;  | 
                      LDA.B #!SFX_BONK                          ;;F5A4|F5A1+F5A1/F5A1\F5A1;  | Play sound effect 
                      STA.W !SPCIO0                             ;;F5A6|F5A3+F5A3/F5A3\F5A3;  | 
                      RTS                                       ;;F5A9|F5A6+F5A6/F5A6\F5A6; / Return 
                                                                ;;                        ;
                    + LDA.W !SpriteNumber,Y                     ;;F5AA|F5A7+F5A7/F5A7\F5A7; \ Branch if sprite being eaten not Pokey 
                      CMP.B #$70                                ;;F5AD|F5AA+F5AA/F5AA\F5AA;  | 
                      BNE CODE_01F5FB                           ;;F5AF|F5AC+F5AC/F5AC\F5AC; / 
                      STY.W !TileGenerateTrackA                 ;;F5B1|F5AE+F5AE/F5AE\F5AE; $185E = Index of sprite being eaten 
                      LDA.B !_1                                 ;;F5B4|F5B1+F5B1/F5B1\F5B1;
                      SEC                                       ;;F5B6|F5B3+F5B3/F5B3\F5B3;
                      SBC.W !SpriteYPosLow,Y                    ;;F5B7|F5B4+F5B4/F5B4\F5B4;
                      CLC                                       ;;F5BA|F5B7+F5B7/F5B7\F5B7;
                      ADC.B #$00                                ;;F5BB|F5B8+F5B8/F5B8\F5B8;
                      PHX                                       ;;F5BD|F5BA+F5BA/F5BA\F5BA;
                      TYX                                       ;;F5BE|F5BB+F5BB/F5BB\F5BB; X = Index of sprite being eaten 
                      JSL RemovePokeySegment                    ;;F5BF|F5BC+F5BC/F5BC\F5BC;
                      PLX                                       ;;F5C3|F5C0+F5C0/F5C0\F5C0;
                      JSL FindFreeSprSlot                       ;;F5C4|F5C1+F5C1/F5C1\F5C1; \ Return if no free slots 
                      BMI Return01F609                          ;;F5C8|F5C5+F5C5/F5C5\F5C5; / 
                      LDA.B #$08                                ;;F5CA|F5C7+F5C7/F5C7\F5C7; \ Sprite status = Normal 
                      STA.W !SpriteStatus,Y                     ;;F5CC|F5C9+F5C9/F5C9\F5C9; / 
                      LDA.B #$70                                ;;F5CF|F5CC+F5CC/F5CC\F5CC; \ Sprite = Pokey 
                      STA.W !SpriteNumber,Y                     ;;F5D1|F5CE+F5CE/F5CE\F5CE; / 
                      LDA.B !_0                                 ;;F5D4|F5D1+F5D1/F5D1\F5D1;
                      STA.W !SpriteXPosLow,Y                    ;;F5D6|F5D3+F5D3/F5D3\F5D3;
                      LDA.B !_8                                 ;;F5D9|F5D6+F5D6/F5D6\F5D6;
                      STA.W !SpriteYPosHigh,Y                   ;;F5DB|F5D8+F5D8/F5D8\F5D8;
                      LDA.B !_1                                 ;;F5DE|F5DB+F5DB/F5DB\F5DB;
                      STA.W !SpriteYPosLow,Y                    ;;F5E0|F5DD+F5DD/F5DD\F5DD;
                      LDA.B !_9                                 ;;F5E3|F5E0+F5E0/F5E0\F5E0;
                      STA.W !SpriteXPosHigh,Y                   ;;F5E5|F5E2+F5E2/F5E2\F5E2;
                      PHX                                       ;;F5E8|F5E5+F5E5/F5E5\F5E5;
                      TYX                                       ;;F5E9|F5E6+F5E6/F5E6\F5E6; X = Index of new sprite 
                      JSL InitSpriteTables                      ;;F5EA|F5E7+F5E7/F5E7\F5E7; Reset sprite tables 
                      LDX.W !TileGenerateTrackA                 ;;F5EE|F5EB+F5EB/F5EB\F5EB; X = Index of sprite being eaten 
                      LDA.B !SpriteTableC2,X                    ;;F5F1|F5EE+F5EE/F5EE\F5EE;
                      AND.B !_D                                 ;;F5F3|F5F0+F5F0/F5F0\F5F0;
                      STA.W !SpriteTableC2,Y                    ;;F5F5|F5F2+F5F2/F5F2\F5F2; y = index of new sptr here?? 
                      LDA.B #$01                                ;;F5F8|F5F5+F5F5/F5F5\F5F5;
                      STA.W !SpriteMisc1534,Y                   ;;F5FA|F5F7+F5F7/F5F7\F5F7;
                      PLX                                       ;;F5FD|F5FA+F5FA/F5FA\F5FA;
CODE_01F5FB:          TYA                                       ;;F5FE|F5FB+F5FB/F5FB\F5FB; \ $160E,x = Index of sprite being eaten 
                      STA.W !SpriteMisc160E,X                   ;;F5FF|F5FC+F5FC/F5FC\F5FC; / 
                      LDA.B #$02                                ;;F602|F5FF+F5FF/F5FF\F5FF;
                      STA.W !SpriteMisc1594,X                   ;;F604|F601+F601/F601\F601;
                      LDA.B #$0A                                ;;F607|F604+F604/F604\F604;
                      STA.W !SpriteMisc1558,X                   ;;F609|F606+F606/F606\F606;
Return01F609:         RTS                                       ;;F60C|F609+F609/F609\F609; Return 
                                                                ;;                        ;
                                                                ;;                        ;
DATA_01F60A:          db $F5,$F5,$F5,$F5,$F5,$F5,$F5,$F0        ;;F60D|F60A+F60A/F60A\F60A;
                      db $13,$13,$13,$13,$13,$13,$13,$18        ;;F615|F612+F612/F612\F612;
DATA_01F61A:          db $08,$08,$08,$08,$08,$08,$08,$13        ;;F61D|F61A+F61A/F61A\F61A;
                                                                ;;                        ;
CODE_01F622:          LDA.W !SpriteMisc163E,X                   ;;F625|F622+F622/F622\F622;
                      ORA.B !SpriteLock                         ;;F628|F625+F625/F625\F625;
                      BNE Return01F667                          ;;F62A|F627+F627/F627\F627;
                      LDY.B #$0B                                ;;F62C|F629+F629/F629\F629;
CODE_01F62B:          STY.W !SpriteInterIndex                   ;;F62E|F62B+F62B/F62B\F62B;
                      TYA                                       ;;F631|F62E+F62E/F62E\F62E;
                      EOR.B !TrueFrame                          ;;F632|F62F+F62F/F62F\F62F;
                      AND.B #$01                                ;;F634|F631+F631/F631\F631;
                      BNE +                                     ;;F636|F633+F633/F633\F633;
                      TYA                                       ;;F638|F635+F635/F635\F635;
                      CMP.W !SpriteMisc160E,X                   ;;F639|F636+F636/F636\F636;
                      BEQ +                                     ;;F63C|F639+F639/F639\F639;
                      CPY.W !CurSpriteProcess                   ;;F63E|F63B+F63B/F63B\F63B;
                      BEQ +                                     ;;F641|F63E+F63E/F63E\F63E;
                      LDA.W !SpriteStatus,Y                     ;;F643|F640+F640/F640\F640;
                      CMP.B #$08                                ;;F646|F643+F643/F643\F643;
                      BCC +                                     ;;F648|F645+F645/F645\F645;
                      LDA.W !SpriteNumber,Y                     ;;F64A|F647+F647/F647\F647;
                      LDA.W !SpriteStatus,Y                     ;;F64D|F64A+F64A/F64A\F64A;
                      CMP.B #$09                                ;;F650|F64D+F64D/F64D\F64D;
                      BEQ +                                     ;;F652|F64F+F64F/F64F\F64F;
                      LDA.W !SpriteTweakerD,Y                   ;;F654|F651+F651/F651\F651;
                      AND.B #$02                                ;;F657|F654+F654/F654\F654;
                      ORA.W !SpriteOnYoshiTongue,Y              ;;F659|F656+F656/F656\F656;
                      ORA.W !SpriteBehindScene,Y                ;;F65C|F659+F659/F659\F659;
                      BNE +                                     ;;F65F|F65C+F65C/F65C\F65C;
                      JSR CODE_01F668                           ;;F661|F65E+F65E/F65E\F65E;
                    + LDY.W !SpriteInterIndex                   ;;F664|F661+F661/F661\F661;
                      DEY                                       ;;F667|F664+F664/F664\F664;
                      BPL CODE_01F62B                           ;;F668|F665+F665/F665\F665;
Return01F667:         RTS                                       ;;F66A|F667+F667/F667\F667; Return 
                                                                ;;                        ;
CODE_01F668:          PHX                                       ;;F66B|F668+F668/F668\F668;
                      TYX                                       ;;F66C|F669+F669/F669\F669;
                      JSL GetSpriteClippingB                    ;;F66D|F66A+F66A/F66A\F66A;
                      PLX                                       ;;F671|F66E+F66E/F66E\F66E;
                      JSL GetSpriteClippingA                    ;;F672|F66F+F66F/F66F\F66F;
                      JSL CheckForContact                       ;;F676|F673+F673/F673\F673;
                      BCC Return01F667                          ;;F67A|F677+F677/F677\F677;
                      LDA.W !SpriteNumber,Y                     ;;F67C|F679+F679/F679\F679;
                      CMP.B #$9D                                ;;F67F|F67C+F67C/F67C\F67C;
                      BEQ Return01F667                          ;;F681|F67E+F67E/F67E\F67E;
                      CMP.B #$15                                ;;F683|F680+F680/F680\F680;
                      BEQ CODE_01F69E                           ;;F685|F682+F682/F682\F682;
                      CMP.B #$16                                ;;F687|F684+F684/F684\F684;
                      BEQ CODE_01F69E                           ;;F689|F686+F686/F686\F686;
                      CMP.B #$04                                ;;F68B|F688+F688/F688\F688;
                      BCS CODE_01F6A3                           ;;F68D|F68A+F68A/F68A\F68A;
                      CMP.B #$02                                ;;F68F|F68C+F68C/F68C\F68C;
                      BEQ CODE_01F6A3                           ;;F691|F68E+F68E/F68E\F68E;
                      LDA.W !SpriteMisc163E,Y                   ;;F693|F690+F690/F690\F690;
                      BPL CODE_01F6A3                           ;;F696|F693+F693/F693\F693;
                    - PHY                                       ;;F698|F695+F695/F695\F695;
                      PHX                                       ;;F699|F696+F696/F696\F696;
                      TYX                                       ;;F69A|F697+F697/F697\F697;
                      JSR CODE_01B12A                           ;;F69B|F698+F698/F698\F698;
                      PLX                                       ;;F69E|F69B+F69B/F69B\F69B;
                      PLY                                       ;;F69F|F69C+F69C/F69C\F69C;
                      RTS                                       ;;F6A0|F69D+F69D/F69D\F69D; Return 
                                                                ;;                        ;
CODE_01F69E:          LDA.W !SpriteInLiquid,Y                   ;;F6A1|F69E+F69E/F69E\F69E;
                      BEQ -                                     ;;F6A4|F6A1+F6A1/F6A1\F6A1;
CODE_01F6A3:          LDA.W !SpriteNumber,Y                     ;;F6A6|F6A3+F6A3/F6A3\F6A3;
                      CMP.B #$BF                                ;;F6A9|F6A6+F6A6/F6A6\F6A6;
                      BNE CODE_01F6B4                           ;;F6AB|F6A8+F6A8/F6A8\F6A8;
                      LDA.B !PlayerYPosNext                     ;;F6AD|F6AA+F6AA/F6AA\F6AA;
                      SEC                                       ;;F6AF|F6AC+F6AC/F6AC\F6AC;
                      SBC.W !SpriteYPosLow,Y                    ;;F6B0|F6AD+F6AD/F6AD\F6AD;
                      CMP.B #$E8                                ;;F6B3|F6B0+F6B0/F6B0\F6B0;
                      BMI Return01F6DC                          ;;F6B5|F6B2+F6B2/F6B2\F6B2;
CODE_01F6B4:          LDA.W !SpriteNumber,Y                     ;;F6B7|F6B4+F6B4/F6B4\F6B4;
                      CMP.B #$7E                                ;;F6BA|F6B7+F6B7/F6B7\F6B7;
                      BNE CODE_01F6DD                           ;;F6BC|F6B9+F6B9/F6B9\F6B9;
                      LDA.W !SpriteTableC2,Y                    ;;F6BE|F6BB+F6BB/F6BB\F6BB;
                      BEQ Return01F6DC                          ;;F6C1|F6BE+F6BE/F6BE\F6BE;
                      CMP.B #$02                                ;;F6C3|F6C0+F6C0/F6C0\F6C0;
                      BNE CODE_01F6CD                           ;;F6C5|F6C2+F6C2/F6C2\F6C2;
                      LDA.B #$08                                ;;F6C7|F6C4+F6C4/F6C4\F6C4;
                      STA.B !PlayerAnimation                    ;;F6C9|F6C6+F6C6/F6C6\F6C6;
                      LDA.B #!SFX_VINEBLOCK                     ;;F6CB|F6C8+F6C8/F6C8\F6C8; \ Play sound effect 
                      STA.W !SPCIO3                             ;;F6CD|F6CA+F6CA/F6CA\F6CA; / 
CODE_01F6CD:          LDA.B #$40                                ;;F6D0|F6CD+F6CD/F6CD\F6CD;
                      STA.W !YoshiWingGrabTimer                 ;;F6D2|F6CF+F6CF/F6CF\F6CF;
                      LDA.B #$02                                ;;F6D5|F6D2+F6D2/F6D2\F6D2; \ Set Yoshi wing ability 
                      STA.W !YoshiHasWingsEvt                   ;;F6D7|F6D4+F6D4/F6D4\F6D4; / 
                      LDA.B #$00                                ;;F6DA|F6D7+F6D7/F6D7\F6D7;
                      STA.W !SpriteStatus,Y                     ;;F6DC|F6D9+F6D9/F6D9\F6D9;
Return01F6DC:         RTS                                       ;;F6DF|F6DC+F6DC/F6DC\F6DC; Return 
                                                                ;;                        ;
CODE_01F6DD:          CMP.B #$4E                                ;;F6E0|F6DD+F6DD/F6DD\F6DD;
                      BEQ CODE_01F6E5                           ;;F6E2|F6DF+F6DF/F6DF\F6DF;
                      CMP.B #$4D                                ;;F6E4|F6E1+F6E1/F6E1\F6E1;
                      BNE CODE_01F6EC                           ;;F6E6|F6E3+F6E3/F6E3\F6E3;
CODE_01F6E5:          LDA.W !SpriteTableC2,Y                    ;;F6E8|F6E5+F6E5/F6E5\F6E5;
                      CMP.B #$02                                ;;F6EB|F6E8+F6E8/F6E8\F6E8;
                      BCC Return01F6DC                          ;;F6ED|F6EA+F6EA/F6EA\F6EA;
CODE_01F6EC:          LDA.B !_5                                 ;;F6EF|F6EC+F6EC/F6EC\F6EC;
                      CLC                                       ;;F6F1|F6EE+F6EE/F6EE\F6EE;
                      ADC.B #$0D                                ;;F6F2|F6EF+F6EF/F6EF\F6EF;
                      CMP.B !_1                                 ;;F6F4|F6F1+F6F1/F6F1\F6F1;
                      BMI Return01F74B                          ;;F6F6|F6F3+F6F3/F6F3\F6F3;
                      LDA.W !SpriteStatus,Y                     ;;F6F8|F6F5+F6F5/F6F5\F6F5;
                      CMP.B #$0A                                ;;F6FB|F6F8+F6F8/F6F8\F6F8;
                      BNE CODE_01F70E                           ;;F6FD|F6FA+F6FA/F6FA\F6FA;
                      PHX                                       ;;F6FF|F6FC+F6FC/F6FC\F6FC;
                      TYX                                       ;;F700|F6FD+F6FD/F6FD\F6FD;
                      JSR SubHorizPos                           ;;F701|F6FE+F6FE/F6FE\F6FE;
                      STY.B !_0                                 ;;F704|F701+F701/F701\F701;
                      LDA.B !SpriteXSpeed,X                     ;;F706|F703+F703/F703\F703;
                      PLX                                       ;;F708|F705+F705/F705\F705;
                      ASL A                                     ;;F709|F706+F706/F706\F706;
                      ROL A                                     ;;F70A|F707+F707/F707\F707;
                      AND.B #$01                                ;;F70B|F708+F708/F708\F708;
                      CMP.B !_0                                 ;;F70D|F70A+F70A/F70A\F70A;
                      BNE Return01F74B                          ;;F70F|F70C+F70C/F70C\F70C;
CODE_01F70E:          LDA.W !InvinsibilityTimer                 ;;F711|F70E+F70E/F70E\F70E; \ Branch if Mario has star 
                      BNE Return01F74B                          ;;F714|F711+F711/F711\F711; / 
                      LDA.B #$10                                ;;F716|F713+F713/F713\F713;
                      STA.W !SpriteMisc163E,X                   ;;F718|F715+F715/F715\F715;
                      LDA.B #!SFX_YOSHIDRUMOFF                  ;;F71B|F718+F718/F718\F718; \ Play sound effect 
                      STA.W !SPCIO1                             ;;F71D|F71A+F71A/F71A\F71A; / 
                      LDA.B #!SFX_YOSHIHURT                     ;;F720|F71D+F71D/F71D\F71D; \ Play sound effect 
                      STA.W !SPCIO3                             ;;F722|F71F+F71F/F71F\F71F; / 
                      LDA.B #$02                                ;;F725|F722+F722/F722\F722;
                      STA.B !SpriteTableC2,X                    ;;F727|F724+F724/F724\F724;
                      STZ.W !PlayerRidingYoshi                  ;;F729|F726+F726/F726\F726;
                      LDA.B #$C0                                ;;F72C|F729+F729/F729\F729;
                      STA.B !PlayerYSpeed                       ;;F72E|F72B+F72B/F72B\F72B;
                      STZ.B !PlayerXSpeed                       ;;F730|F72D+F72D/F72D\F72D;
                      JSR SubHorizPos                           ;;F732|F72F+F72F/F72F\F72F;
                      LDA.W DATA_01EBBE,Y                       ;;F735|F732+F732/F732\F732;
                      STA.B !SpriteXSpeed,X                     ;;F738|F735+F735/F735\F735;
                      STZ.W !SpriteMisc1594,X                   ;;F73A|F737+F737/F737\F737;
                      STZ.W !SpriteMisc151C,X                   ;;F73D|F73A+F73A/F73A\F73A;
                      STZ.W !YoshiStartEatTimer                 ;;F740|F73D+F73D/F73D\F73D;
                      STZ.W !CarryYoshiThruLvls                 ;;F743|F740+F740/F740\F740;
                      LDA.B #$30                                ;;F746|F743+F743/F743\F743; \ Mario invincible timer = #$30 
                      STA.W !IFrameTimer                        ;;F748|F745+F745/F745\F745; / 
                      JSR CODE_01EDCC                           ;;F74B|F748+F748/F748\F748;
Return01F74B:         RTS                                       ;;F74E|F74B+F74B/F74B\F74B; Return 
                                                                ;;                        ;
CODE_01F74C:          LDA.B #$08                                ;;F74F|F74C+F74C/F74C\F74C; \ Sprite status = Normal 
                      STA.W !SpriteStatus,X                     ;;F751|F74E+F74E/F74E\F74E; / 
CODE_01F751:          LDA.B #$20                                ;;F754|F751+F751/F751\F751;
                      STA.W !SpriteMisc1540,X                   ;;F756|F753+F753/F753\F753;
                      LDA.B #!SFX_EGGHATCH                      ;;F759|F756+F756/F756\F756; \ Play sound effect 
                      STA.W !SPCIO3                             ;;F75B|F758+F758/F758\F758; / 
                      RTL                                       ;;F75E|F75B+F75B/F75B\F75B; Return 
                                                                ;;                        ;
                                                                ;;                        ;
DATA_01F75C:          db $00,$01,$01,$01                        ;;F75F|F75C+F75C/F75C\F75C;
                                                                ;;                        ;
YoshiEggTiles:        db $62,$02,$02,$00                        ;;F763|F760+F760/F760\F760;
                                                                ;;                        ;
YoshiEgg:             LDA.W !SpriteMisc187B,X                   ;;F767|F764+F764/F764\F764;
                      BEQ CODE_01F799                           ;;F76A|F767+F767/F767\F767;
                      JSR IsSprOffScreen                        ;;F76C|F769+F769/F769\F769;
                      BNE CODE_01F78D                           ;;F76F|F76C+F76C/F76C\F76C;
                      JSR SubHorizPos                           ;;F771|F76E+F76E/F76E\F76E;
                      LDA.B !_F                                 ;;F774|F771+F771/F771\F771;
                      CLC                                       ;;F776|F773+F773/F773\F773;
                      ADC.B #$20                                ;;F777|F774+F774/F774\F774;
                      CMP.B #$40                                ;;F779|F776+F776/F776\F776;
                      BCS CODE_01F78D                           ;;F77B|F778+F778/F778\F778;
                      STZ.W !SpriteMisc187B,X                   ;;F77D|F77A+F77A/F77A\F77A;
                      JSL CODE_01F751                           ;;F780|F77D+F77D/F77D\F77D;
                      LDA.B #$2D                                ;;F784|F781+F781/F781\F781;
                      LDY.W !YoshiIsLoose                       ;;F786|F783+F783/F783\F783;
                      BEQ +                                     ;;F789|F786+F786/F786\F786;
                      LDA.B #$78                                ;;F78B|F788+F788/F788\F788;
                    + STA.W !SpriteMisc151C,X                   ;;F78D|F78A+F78A/F78A\F78A;
CODE_01F78D:          JSR SubSprGfx2Entry1                      ;;F790|F78D+F78D/F78D\F78D;
                      LDY.W !SpriteOAMIndex,X                   ;;F793|F790+F790/F790\F790; Y = Index into sprite OAM 
                      LDA.B #$00                                ;;F796|F793+F793/F793\F793;
                      STA.W !OAMTileNo+$100,Y                   ;;F798|F795+F795/F795\F795;
                      RTS                                       ;;F79B|F798+F798/F798\F798; Return 
                                                                ;;                        ;
CODE_01F799:          LDA.W !SpriteMisc1540,X                   ;;F79C|F799+F799/F799\F799;
                      BEQ +                                     ;;F79F|F79C+F79C/F79C\F79C;
                      LSR A                                     ;;F7A1|F79E+F79E/F79E\F79E;
                      LSR A                                     ;;F7A2|F79F+F79F/F79F\F79F;
                      LSR A                                     ;;F7A3|F7A0+F7A0/F7A0\F7A0;
                      TAY                                       ;;F7A4|F7A1+F7A1/F7A1\F7A1;
                      LDA.W YoshiEggTiles,Y                     ;;F7A5|F7A2+F7A2/F7A2\F7A2;
                      PHA                                       ;;F7A8|F7A5+F7A5/F7A5\F7A5;
                      LDA.W DATA_01F75C,Y                       ;;F7A9|F7A6+F7A6/F7A6\F7A6;
                      PHA                                       ;;F7AC|F7A9+F7A9/F7A9\F7A9;
                      JSR SubSprGfx2Entry1                      ;;F7AD|F7AA+F7AA/F7AA\F7AA;
                      LDY.W !SpriteOAMIndex,X                   ;;F7B0|F7AD+F7AD/F7AD\F7AD; Y = Index into sprite OAM 
                      PLA                                       ;;F7B3|F7B0+F7B0/F7B0\F7B0;
                      STA.B !_0                                 ;;F7B4|F7B1+F7B1/F7B1\F7B1;
                      LDA.W !OAMTileAttr+$100,Y                 ;;F7B6|F7B3+F7B3/F7B3\F7B3;
                      AND.B #$FE                                ;;F7B9|F7B6+F7B6/F7B6\F7B6;
                      ORA.B !_0                                 ;;F7BB|F7B8+F7B8/F7B8\F7B8;
                      STA.W !OAMTileAttr+$100,Y                 ;;F7BD|F7BA+F7BA/F7BA\F7BA;
                      PLA                                       ;;F7C0|F7BD+F7BD/F7BD\F7BD;
                      STA.W !OAMTileNo+$100,Y                   ;;F7C1|F7BE+F7BE/F7BE\F7BE;
                      RTS                                       ;;F7C4|F7C1+F7C1/F7C1\F7C1; Return 
                                                                ;;                        ;
                    + JSR CODE_01F7C8                           ;;F7C5|F7C2+F7C2/F7C2\F7C2;
                      JMP CODE_01F83D                           ;;F7C8|F7C5+F7C5/F7C5\F7C5;
                                                                ;;                        ;
CODE_01F7C8:          JSR IsSprOffScreen                        ;;F7CB|F7C8+F7C8/F7C8\F7C8;
                      BNE Return01F82C                          ;;F7CE|F7CB+F7CB/F7CB\F7CB;
                      LDA.B !SpriteXPosLow,X                    ;;F7D0|F7CD+F7CD/F7CD\F7CD;
                      STA.B !_0                                 ;;F7D2|F7CF+F7CF/F7CF\F7CF;
                      LDA.B !SpriteYPosLow,X                    ;;F7D4|F7D1+F7D1/F7D1\F7D1;
                      STA.B !_2                                 ;;F7D6|F7D3+F7D3/F7D3\F7D3;
                      LDA.W !SpriteXPosHigh,X                   ;;F7D8|F7D5+F7D5/F7D5\F7D5;
                      STA.B !_3                                 ;;F7DB|F7D8+F7D8/F7D8\F7D8;
                      PHX                                       ;;F7DD|F7DA+F7DA/F7DA\F7DA;
                      LDY.B #$03                                ;;F7DE|F7DB+F7DB/F7DB\F7DB;
                      LDX.B #$0B                                ;;F7E0|F7DD+F7DD/F7DD\F7DD;
CODE_01F7DF:          LDA.W !MinExtSpriteNumber,X               ;;F7E2|F7DF+F7DF/F7DF\F7DF;
                      BEQ CODE_01F7F4                           ;;F7E5|F7E2+F7E2/F7E2\F7E2;
CODE_01F7E4:          DEX                                       ;;F7E7|F7E4+F7E4/F7E4\F7E4;
                      BPL CODE_01F7DF                           ;;F7E8|F7E5+F7E5/F7E5\F7E5;
                      DEC.W !MinExtSpriteSlotIdx                ;;F7EA|F7E7+F7E7/F7E7\F7E7;
                      BPL +                                     ;;F7ED|F7EA+F7EA/F7EA\F7EA;
                      LDA.B #$0B                                ;;F7EF|F7EC+F7EC/F7EC\F7EC;
                      STA.W !MinExtSpriteSlotIdx                ;;F7F1|F7EE+F7EE/F7EE\F7EE;
                    + LDX.W !MinExtSpriteSlotIdx                ;;F7F4|F7F1+F7F1/F7F1\F7F1;
CODE_01F7F4:          LDA.B #$03                                ;;F7F7|F7F4+F7F4/F7F4\F7F4;
                      STA.W !MinExtSpriteNumber,X               ;;F7F9|F7F6+F7F6/F7F6\F7F6;
                      LDA.B !_0                                 ;;F7FC|F7F9+F7F9/F7F9\F7F9;
                      CLC                                       ;;F7FE|F7FB+F7FB/F7FB\F7FB;
                      ADC.W DATA_01F831,Y                       ;;F7FF|F7FC+F7FC/F7FC\F7FC;
                      STA.W !MinExtSpriteXPosLow,X              ;;F802|F7FF+F7FF/F7FF\F7FF;
                      LDA.B !_2                                 ;;F805|F802+F802/F802\F802;
                      CLC                                       ;;F807|F804+F804/F804\F804;
                      ADC.W DATA_01F82D,Y                       ;;F808|F805+F805/F805\F805;
                      STA.W !MinExtSpriteYPosLow,X              ;;F80B|F808+F808/F808\F808;
                      LDA.B !_3                                 ;;F80E|F80B+F80B/F80B\F80B;
                      STA.W !MinExtSpriteYPosHigh,X             ;;F810|F80D+F80D/F80D\F80D;
                      LDA.W DATA_01F835,Y                       ;;F813|F810+F810/F810\F810;
                      STA.W !MinExtSpriteYSpeed,X               ;;F816|F813+F813/F813\F813;
                      LDA.W DATA_01F839,Y                       ;;F819|F816+F816/F816\F816;
                      STA.W !MinExtSpriteXSpeed,X               ;;F81C|F819+F819/F819\F819;
                      TYA                                       ;;F81F|F81C+F81C/F81C\F81C;
                      ASL A                                     ;;F820|F81D+F81D/F81D\F81D;
                      ASL A                                     ;;F821|F81E+F81E/F81E\F81E;
                      ASL A                                     ;;F822|F81F+F81F/F81F\F81F;
                      ASL A                                     ;;F823|F820+F820/F820\F820;
                      ASL A                                     ;;F824|F821+F821/F821\F821;
                      ASL A                                     ;;F825|F822+F822/F822\F822;
                      ORA.B #$28                                ;;F826|F823+F823/F823\F823;
                      STA.W !MinExtSpriteXPosSpx,X              ;;F828|F825+F825/F825\F825;
                      DEY                                       ;;F82B|F828+F828/F828\F828;
                      BPL CODE_01F7E4                           ;;F82C|F829+F829/F829\F829;
                      PLX                                       ;;F82E|F82B+F82B/F82B\F82B;
Return01F82C:         RTS                                       ;;F82F|F82C+F82C/F82C\F82C; Return 
                                                                ;;                        ;
                                                                ;;                        ;
DATA_01F82D:          db $00,$00,$08,$08                        ;;F830|F82D+F82D/F82D\F82D;
                                                                ;;                        ;
DATA_01F831:          db $00,$08,$00,$08                        ;;F834|F831+F831/F831\F831;
                                                                ;;                        ;
DATA_01F835:          db $E8,$E8,$F4,$F4                        ;;F838|F835+F835/F835\F835;
                                                                ;;                        ;
DATA_01F839:          db $FA,$06,$FD,$03                        ;;F83C|F839+F839/F839\F839;
                                                                ;;                        ;
CODE_01F83D:          LDA.W !SpriteMisc151C,X                   ;;F840|F83D+F83D/F83D\F83D;
                      STA.B !SpriteNumber,X                     ;;F843|F840+F840/F840\F840;
                      CMP.B #$35                                ;;F845|F842+F842/F842\F842;
                      BEQ CODE_01F86C                           ;;F847|F844+F844/F844\F844;
                      CMP.B #$2D                                ;;F849|F846+F846/F846\F846;
                      BNE +                                     ;;F84B|F848+F848/F848\F848;
                      LDA.B #$09                                ;;F84D|F84A+F84A/F84A\F84A; \ Sprite status = Carryable 
                      STA.W !SpriteStatus,X                     ;;F84F|F84C+F84C/F84C\F84C; / 
                      LDA.W !SpriteOBJAttribute,X               ;;F852|F84F+F84F/F84F\F84F;
                      AND.B #$0E                                ;;F855|F852+F852/F852\F852;
                      PHA                                       ;;F857|F854+F854/F854\F854;
                      JSL InitSpriteTables                      ;;F858|F855+F855/F855\F855;
                      PLA                                       ;;F85C|F859+F859/F859\F859;
                      STA.B !_0                                 ;;F85D|F85A+F85A/F85A\F85A;
                      LDA.W !SpriteOBJAttribute,X               ;;F85F|F85C+F85C/F85C\F85C;
                      AND.B #$F1                                ;;F862|F85F+F85F/F85F\F85F;
                      ORA.B !_0                                 ;;F864|F861+F861/F861\F861;
                      STA.W !SpriteOBJAttribute,X               ;;F866|F863+F863/F863\F863;
                      RTS                                       ;;F869|F866+F866/F866\F866; Return 
                                                                ;;                        ;
                    + JSL InitSpriteTables                      ;;F86A|F867+F867/F867\F867;
                      RTS                                       ;;F86E|F86B+F86B/F86B\F86B; Return 
                                                                ;;                        ;
CODE_01F86C:          JSL InitSpriteTables                      ;;F86F|F86C+F86C/F86C\F86C;
                      JMP CODE_01A2B5                           ;;F873|F870+F870/F870\F870;
                                                                ;;                        ;
                                                                ;;                        ;
                      db $08,$F8                                ;;F876|F873+F873/F873\F873;
                                                                ;;                        ;
UnusedInit:           JSR FaceMario                             ;;F878|F875+F875/F875\F875;
                      STA.W !SpriteMisc1534,X                   ;;F87B|F878+F878/F878\F878;
Return01F87B:         RTS                                       ;;F87E|F87B+F87B/F87B\F87B; Return 
                                                                ;;                        ;
InitEerie:            JSR SubHorizPos                           ;;F87F|F87C+F87C/F87C\F87C;
                      LDA.W EerieSpeedX,Y                       ;;F882|F87F+F87F/F87F\F87F;
                      STA.B !SpriteXSpeed,X                     ;;F885|F882+F882/F882\F882;
InitBigBoo:           JSL GetRand                               ;;F887|F884+F884/F884\F884;
                      STA.W !SpriteMisc1570,X                   ;;F88B|F888+F888/F888\F888;
                      RTS                                       ;;F88E|F88B+F88B/F88B\F88B; Return 
                                                                ;;                        ;
                                                                ;;                        ;
EerieSpeedX:          db $10,$F0                                ;;F88F|F88C+F88C/F88C\F88C;
                                                                ;;                        ;
EerieSpeedY:          db $18,$E8                                ;;F891|F88E+F88E/F88E\F88E;
                                                                ;;                        ;
Eerie:                LDA.W !SpriteStatus,X                     ;;F893|F890+F890/F890\F890;
                      CMP.B #$08                                ;;F896|F893+F893/F893\F893;
                      BNE CODE_01F8C9                           ;;F898|F895+F895/F895\F895;
                      LDA.B !SpriteLock                         ;;F89A|F897+F897/F897\F897; \ Branch if sprites locked 
                      BNE CODE_01F8C9                           ;;F89C|F899+F899/F899\F899; / 
                      JSR SubSprXPosNoGrvty                     ;;F89E|F89B+F89B/F89B\F89B;
                      LDA.B !SpriteNumber,X                     ;;F8A1|F89E+F89E/F89E\F89E;
                      CMP.B #$39                                ;;F8A3|F8A0+F8A0/F8A0\F8A0;
                      BNE CODE_01F8C0                           ;;F8A5|F8A2+F8A2/F8A2\F8A2;
                      LDA.B !SpriteTableC2,X                    ;;F8A7|F8A4+F8A4/F8A4\F8A4;
                      AND.B #$01                                ;;F8A9|F8A6+F8A6/F8A6\F8A6;
                      TAY                                       ;;F8AB|F8A8+F8A8/F8A8\F8A8;
                      LDA.B !SpriteYSpeed,X                     ;;F8AC|F8A9+F8A9/F8A9\F8A9;
                      CLC                                       ;;F8AE|F8AB+F8AB/F8AB\F8AB;
                      ADC.W DATA_01EBB4,Y                       ;;F8AF|F8AC+F8AC/F8AC\F8AC;
                      STA.B !SpriteYSpeed,X                     ;;F8B2|F8AF+F8AF/F8AF\F8AF;
                      CMP.W EerieSpeedY,Y                       ;;F8B4|F8B1+F8B1/F8B1\F8B1;
                      BNE +                                     ;;F8B7|F8B4+F8B4/F8B4\F8B4;
                      INC.B !SpriteTableC2,X                    ;;F8B9|F8B6+F8B6/F8B6\F8B6;
                    + JSR SubSprYPosNoGrvty                     ;;F8BB|F8B8+F8B8/F8B8\F8B8;
                      JSR SubOffscreen3Bnk1                     ;;F8BE|F8BB+F8BB/F8BB\F8BB;
                      BRA +                                     ;;F8C1|F8BE+F8BE/F8BE\F8BE;
                                                                ;;                        ;
CODE_01F8C0:          JSR SubOffscreen0Bnk1                     ;;F8C3|F8C0+F8C0/F8C0\F8C0;
                    + JSR MarioSprInteractRt                    ;;F8C6|F8C3+F8C3/F8C3\F8C3;
                      JSR SetAnimationFrame                     ;;F8C9|F8C6+F8C6/F8C6\F8C6;
CODE_01F8C9:          JSR UpdateDirection                       ;;F8CC|F8C9+F8C9/F8C9\F8C9;
                      JMP SubSprGfx2Entry1                      ;;F8CF|F8CC+F8CC/F8CC\F8CC;
                                                                ;;                        ;
                                                                ;;                        ;
DATA_01F8CF:          db $08,$F8                                ;;F8D2|F8CF+F8CF/F8CF\F8CF;
                                                                ;;                        ;
DATA_01F8D1:          db $01,$02,$02,$01                        ;;F8D4|F8D1+F8D1/F8D1\F8D1;
                                                                ;;                        ;
BigBoo:               JSR SubOffscreen1Bnk1                     ;;F8D8|F8D5+F8D5/F8D5\F8D5;
                      LDA.B #$20                                ;;F8DB|F8D8+F8D8/F8D8\F8D8;
                      BRA +                                     ;;F8DD|F8DA+F8DA/F8DA\F8DA;
                                                                ;;                        ;
Boo_BooBlock:         JSR SubOffscreen0Bnk1                     ;;F8DF|F8DC+F8DC/F8DC\F8DC;
                      LDA.B #$10                                ;;F8E2|F8DF+F8DF/F8DF\F8DF;
                    + STA.W !TileGenerateTrackB                 ;;F8E4|F8E1+F8E1/F8E1\F8E1;
                      LDA.W !SpriteStatus,X                     ;;F8E7|F8E4+F8E4/F8E4\F8E4;
                      CMP.B #$08                                ;;F8EA|F8E7+F8E7/F8E7\F8E7;
                      BNE CODE_01F8EF                           ;;F8EC|F8E9+F8E9/F8E9\F8E9;
                      LDA.B !SpriteLock                         ;;F8EE|F8EB+F8EB/F8EB\F8EB;
                      BEQ +                                     ;;F8F0|F8ED+F8ED/F8ED\F8ED;
CODE_01F8EF:          JMP CODE_01F9CE                           ;;F8F2|F8EF+F8EF/F8EF\F8EF;
                                                                ;;                        ;
                    + JSR SubHorizPos                           ;;F8F5|F8F2+F8F2/F8F2\F8F2;
                      LDA.W !SpriteMisc1540,X                   ;;F8F8|F8F5+F8F5/F8F5\F8F5;
                      BNE CODE_01F914                           ;;F8FB|F8F8+F8F8/F8F8\F8F8;
                      LDA.B #$20                                ;;F8FD|F8FA+F8FA/F8FA\F8FA;
                      STA.W !SpriteMisc1540,X                   ;;F8FF|F8FC+F8FC/F8FC\F8FC;
                      LDA.B !SpriteTableC2,X                    ;;F902|F8FF+F8FF/F8FF\F8FF;
                      BEQ CODE_01F90C                           ;;F904|F901+F901/F901\F901;
                      LDA.B !_F                                 ;;F906|F903+F903/F903\F903;
                      CLC                                       ;;F908|F905+F905/F905\F905;
                      ADC.B #$0A                                ;;F909|F906+F906/F906\F906;
                      CMP.B #$14                                ;;F90B|F908+F908/F908\F908;
                      BCC CODE_01F92F                           ;;F90D|F90A+F90A/F90A\F90A;
CODE_01F90C:          STZ.B !SpriteTableC2,X                    ;;F90F|F90C+F90C/F90C\F90C;
                      CPY.B !PlayerDirection                    ;;F911|F90E+F90E/F90E\F90E;
                      BNE CODE_01F914                           ;;F913|F910+F910/F910\F910;
                      INC.B !SpriteTableC2,X                    ;;F915|F912+F912/F912\F912;
CODE_01F914:          LDA.B !_F                                 ;;F917|F914+F914/F914\F914;
                      CLC                                       ;;F919|F916+F916/F916\F916;
                      ADC.B #$0A                                ;;F91A|F917+F917/F917\F917;
                      CMP.B #$14                                ;;F91C|F919+F919/F919\F919;
                      BCC CODE_01F92F                           ;;F91E|F91B+F91B/F91B\F91B;
                      LDA.W !SpriteMisc15AC,X                   ;;F920|F91D+F91D/F91D\F91D;
                      BNE CODE_01F971                           ;;F923|F920+F920/F920\F920;
                      TYA                                       ;;F925|F922+F922/F922\F922;
                      CMP.W !SpriteMisc157C,X                   ;;F926|F923+F923/F923\F923;
                      BEQ CODE_01F92F                           ;;F929|F926+F926/F926\F926;
                      LDA.B #$1F                                ;;F92B|F928+F928/F928\F928; \ Set turning timer 
                      STA.W !SpriteMisc15AC,X                   ;;F92D|F92A+F92A/F92A\F92A; / 
                      BRA CODE_01F971                           ;;F930|F92D+F92D/F92D\F92D;
                                                                ;;                        ;
CODE_01F92F:          STZ.W !SpriteMisc1602,X                   ;;F932|F92F+F92F/F92F\F92F;
                      LDA.B !SpriteTableC2,X                    ;;F935|F932+F932/F932\F932;
                      BEQ CODE_01F989                           ;;F937|F934+F934/F934\F934;
                      LDA.B #$03                                ;;F939|F936+F936/F936\F936;
                      STA.W !SpriteMisc1602,X                   ;;F93B|F938+F938/F938\F938;
                      LDY.B !SpriteNumber,X                     ;;F93E|F93B+F93B/F93B\F93B;
                      CPY.B #$28                                ;;F940|F93D+F93D/F93D\F93D;
                      BEQ +                                     ;;F942|F93F+F93F/F93F\F93F;
                      LDA.B #$00                                ;;F944|F941+F941/F941\F941;
                      CPY.B #$AF                                ;;F946|F943+F943/F943\F943;
                      BEQ +                                     ;;F948|F945+F945/F945\F945;
                      INC A                                     ;;F94A|F947+F947/F947\F947;
                    + AND.B !TrueFrame                          ;;F94B|F948+F948/F948\F948;
                      BNE CODE_01F96F                           ;;F94D|F94A+F94A/F94A\F94A;
                      INC.W !SpriteMisc1570,X                   ;;F94F|F94C+F94C/F94C\F94C;
                      LDA.W !SpriteMisc1570,X                   ;;F952|F94F+F94F/F94F\F94F;
                      BNE +                                     ;;F955|F952+F952/F952\F952;
                      LDA.B #$20                                ;;F957|F954+F954/F954\F954;
                      STA.W !SpriteMisc1558,X                   ;;F959|F956+F956/F956\F956;
                    + LDA.B !SpriteXSpeed,X                     ;;F95C|F959+F959/F959\F959;
                      BEQ CODE_01F962                           ;;F95E|F95B+F95B/F95B\F95B;
                      BPL +                                     ;;F960|F95D+F95D/F95D\F95D;
                      INC A                                     ;;F962|F95F+F95F/F95F\F95F;
                      INC A                                     ;;F963|F960+F960/F960\F960;
                    + DEC A                                     ;;F964|F961+F961/F961\F961;
CODE_01F962:          STA.B !SpriteXSpeed,X                     ;;F965|F962+F962/F962\F962;
                      LDA.B !SpriteYSpeed,X                     ;;F967|F964+F964/F964\F964;
                      BEQ CODE_01F96D                           ;;F969|F966+F966/F966\F966;
                      BPL +                                     ;;F96B|F968+F968/F968\F968;
                      INC A                                     ;;F96D|F96A+F96A/F96A\F96A;
                      INC A                                     ;;F96E|F96B+F96B/F96B\F96B;
                    + DEC A                                     ;;F96F|F96C+F96C/F96C\F96C;
CODE_01F96D:          STA.B !SpriteYSpeed,X                     ;;F970|F96D+F96D/F96D\F96D;
CODE_01F96F:          BRA CODE_01F9C8                           ;;F972|F96F+F96F/F96F\F96F;
                                                                ;;                        ;
CODE_01F971:          CMP.B #$10                                ;;F974|F971+F971/F971\F971;
                      BNE +                                     ;;F976|F973+F973/F973\F973;
                      PHA                                       ;;F978|F975+F975/F975\F975;
                      LDA.W !SpriteMisc157C,X                   ;;F979|F976+F976/F976\F976;
                      EOR.B #$01                                ;;F97C|F979+F979/F979\F979;
                      STA.W !SpriteMisc157C,X                   ;;F97E|F97B+F97B/F97B\F97B;
                      PLA                                       ;;F981|F97E+F97E/F97E\F97E;
                    + LSR A                                     ;;F982|F97F+F97F/F97F\F97F;
                      LSR A                                     ;;F983|F980+F980/F980\F980;
                      LSR A                                     ;;F984|F981+F981/F981\F981;
                      TAY                                       ;;F985|F982+F982/F982\F982;
                      LDA.W DATA_01F8D1,Y                       ;;F986|F983+F983/F983\F983;
                      STA.W !SpriteMisc1602,X                   ;;F989|F986+F986/F986\F986;
CODE_01F989:          STZ.W !SpriteMisc1570,X                   ;;F98C|F989+F989/F989\F989;
                      LDA.B !TrueFrame                          ;;F98F|F98C+F98C/F98C\F98C;
                      AND.B #$07                                ;;F991|F98E+F98E/F98E\F98E;
                      BNE CODE_01F9C8                           ;;F993|F990+F990/F990\F990;
                      JSR SubHorizPos                           ;;F995|F992+F992/F992\F992;
                      LDA.B !SpriteXSpeed,X                     ;;F998|F995+F995/F995\F995;
                      CMP.W DATA_01F8CF,Y                       ;;F99A|F997+F997/F997\F997;
                      BEQ +                                     ;;F99D|F99A+F99A/F99A\F99A;
                      CLC                                       ;;F99F|F99C+F99C/F99C\F99C;
                      ADC.W DATA_01EBB4,Y                       ;;F9A0|F99D+F99D/F99D\F99D;
                      STA.B !SpriteXSpeed,X                     ;;F9A3|F9A0+F9A0/F9A0\F9A0;
                    + LDA.B !PlayerYPosNow                      ;;F9A5|F9A2+F9A2/F9A2\F9A2;
                      PHA                                       ;;F9A7|F9A4+F9A4/F9A4\F9A4;
                      SEC                                       ;;F9A8|F9A5+F9A5/F9A5\F9A5;
                      SBC.W !TileGenerateTrackB                 ;;F9A9|F9A6+F9A6/F9A6\F9A6;
                      STA.B !PlayerYPosNow                      ;;F9AC|F9A9+F9A9/F9A9\F9A9;
                      LDA.B !PlayerYPosNow+1                    ;;F9AE|F9AB+F9AB/F9AB\F9AB;
                      PHA                                       ;;F9B0|F9AD+F9AD/F9AD\F9AD;
                      SBC.B #$00                                ;;F9B1|F9AE+F9AE/F9AE\F9AE;
                      STA.B !PlayerYPosNow+1                    ;;F9B3|F9B0+F9B0/F9B0\F9B0;
                      JSR CODE_01AD42                           ;;F9B5|F9B2+F9B2/F9B2\F9B2;
                      PLA                                       ;;F9B8|F9B5+F9B5/F9B5\F9B5;
                      STA.B !PlayerYPosNow+1                    ;;F9B9|F9B6+F9B6/F9B6\F9B6;
                      PLA                                       ;;F9BB|F9B8+F9B8/F9B8\F9B8;
                      STA.B !PlayerYPosNow                      ;;F9BC|F9B9+F9B9/F9B9\F9B9;
                      LDA.B !SpriteYSpeed,X                     ;;F9BE|F9BB+F9BB/F9BB\F9BB;
                      CMP.W DATA_01F8CF,Y                       ;;F9C0|F9BD+F9BD/F9BD\F9BD;
                      BEQ CODE_01F9C8                           ;;F9C3|F9C0+F9C0/F9C0\F9C0;
                      CLC                                       ;;F9C5|F9C2+F9C2/F9C2\F9C2;
                      ADC.W DATA_01EBB4,Y                       ;;F9C6|F9C3+F9C3/F9C3\F9C3;
                      STA.B !SpriteYSpeed,X                     ;;F9C9|F9C6+F9C6/F9C6\F9C6;
CODE_01F9C8:          JSR SubSprXPosNoGrvty                     ;;F9CB|F9C8+F9C8/F9C8\F9C8;
                      JSR SubSprYPosNoGrvty                     ;;F9CE|F9CB+F9CB/F9CB\F9CB;
CODE_01F9CE:          LDA.B !SpriteNumber,X                     ;;F9D1|F9CE+F9CE/F9CE\F9CE;
                      CMP.B #$AF                                ;;F9D3|F9D0+F9D0/F9D0\F9D0;
                      BNE CODE_01FA3D                           ;;F9D5|F9D2+F9D2/F9D2\F9D2;
                      LDA.B !SpriteXSpeed,X                     ;;F9D7|F9D4+F9D4/F9D4\F9D4;
                      BPL +                                     ;;F9D9|F9D6+F9D6/F9D6\F9D6;
                      EOR.B #$FF                                ;;F9DB|F9D8+F9D8/F9D8\F9D8;
                      INC A                                     ;;F9DD|F9DA+F9DA/F9DA\F9DA;
                    + LDY.B #$00                                ;;F9DE|F9DB+F9DB/F9DB\F9DB;
                      CMP.B #$08                                ;;F9E0|F9DD+F9DD/F9DD\F9DD;
                      BCS CODE_01FA09                           ;;F9E2|F9DF+F9DF/F9DF\F9DF;
                      PHA                                       ;;F9E4|F9E1+F9E1/F9E1\F9E1;
                      LDA.W !SpriteTweakerB,X                   ;;F9E5|F9E2+F9E2/F9E2\F9E2;
                      PHA                                       ;;F9E8|F9E5+F9E5/F9E5\F9E5;
                      LDA.W !SpriteTweakerD,X                   ;;F9E9|F9E6+F9E6/F9E6\F9E6;
                      PHA                                       ;;F9EC|F9E9+F9E9/F9E9\F9E9;
                      ORA.B #$80                                ;;F9ED|F9EA+F9EA/F9EA\F9EA;
                      STA.W !SpriteTweakerD,X                   ;;F9EF|F9EC+F9EC/F9EC\F9EC;
                      LDA.B #$0C                                ;;F9F2|F9EF+F9EF/F9EF\F9EF;
                      STA.W !SpriteTweakerB,X                   ;;F9F4|F9F1+F9F1/F9F1\F9F1;
                      JSR CODE_01B457                           ;;F9F7|F9F4+F9F4/F9F4\F9F4;
                      PLA                                       ;;F9FA|F9F7+F9F7/F9F7\F9F7;
                      STA.W !SpriteTweakerD,X                   ;;F9FB|F9F8+F9F8/F9F8\F9F8;
                      PLA                                       ;;F9FE|F9FB+F9FB/F9FB\F9FB;
                      STA.W !SpriteTweakerB,X                   ;;F9FF|F9FC+F9FC/F9FC\F9FC;
                      PLA                                       ;;FA02|F9FF+F9FF/F9FF\F9FF;
                      LDY.B #$01                                ;;FA03|FA00+FA00/FA00\FA00;
                      CMP.B #$04                                ;;FA05|FA02+FA02/FA02\FA02;
                      BCS +                                     ;;FA07|FA04+FA04/FA04\FA04;
                      INY                                       ;;FA09|FA06+FA06/FA06\FA06;
                      BRA +                                     ;;FA0A|FA07+FA07/FA07\FA07;
                                                                ;;                        ;
CODE_01FA09:          LDA.W !SpriteStatus,X                     ;;FA0C|FA09+FA09/FA09\FA09;
                      CMP.B #$08                                ;;FA0F|FA0C+FA0C/FA0C\FA0C;
                      BNE +                                     ;;FA11|FA0E+FA0E/FA0E\FA0E;
                      PHY                                       ;;FA13|FA10+FA10/FA10\FA10;
                      JSR MarioSprInteractRt                    ;;FA14|FA11+FA11/FA11\FA11;
                      PLY                                       ;;FA17|FA14+FA14/FA14\FA14;
                    + TYA                                       ;;FA18|FA15+FA15/FA15\FA15;
                      STA.W !SpriteMisc1602,X                   ;;FA19|FA16+FA16/FA16\FA16;
                      JSR SubSprGfx2Entry1                      ;;FA1C|FA19+FA19/FA19\FA19;
                      LDA.W !SpriteMisc1602,X                   ;;FA1F|FA1C+FA1C/FA1C\FA1C;
                      LDY.W !SpriteOAMIndex,X                   ;;FA22|FA1F+FA1F/FA1F\FA1F; Y = Index into sprite OAM 
                      PHX                                       ;;FA25|FA22+FA22/FA22\FA22;
                      TAX                                       ;;FA26|FA23+FA23/FA23\FA23;
                      LDA.W BooBlockTiles,X                     ;;FA27|FA24+FA24/FA24\FA24;
                      STA.W !OAMTileNo+$100,Y                   ;;FA2A|FA27+FA27/FA27\FA27;
                      LDA.W !OAMTileAttr+$100,Y                 ;;FA2D|FA2A+FA2A/FA2A\FA2A;
                      AND.B #$F1                                ;;FA30|FA2D+FA2D/FA2D\FA2D;
                      ORA.W BooBlockGfxProp,X                   ;;FA32|FA2F+FA2F/FA2F\FA2F;
                      STA.W !OAMTileAttr+$100,Y                 ;;FA35|FA32+FA32/FA32\FA32;
                      PLX                                       ;;FA38|FA35+FA35/FA35\FA35;
                      RTS                                       ;;FA39|FA36+FA36/FA36\FA36; Return 
                                                                ;;                        ;
                                                                ;;                        ;
BooBlockTiles:        db $8C,$C8,$CA                            ;;FA3A|FA37+FA37/FA37\FA37;
                                                                ;;                        ;
BooBlockGfxProp:      db $0E,$02,$02                            ;;FA3D|FA3A+FA3A/FA3A\FA3A;
                                                                ;;                        ;
CODE_01FA3D:          LDA.W !SpriteStatus,X                     ;;FA40|FA3D+FA3D/FA3D\FA3D;
                      CMP.B #$08                                ;;FA43|FA40+FA40/FA40\FA40;
                      BNE +                                     ;;FA45|FA42+FA42/FA42\FA42;
                      JSR MarioSprInteractRt                    ;;FA47|FA44+FA44/FA44\FA44;
                    + JSL CODE_038398                           ;;FA4A|FA47+FA47/FA47\FA47;
                      RTS                                       ;;FA4E|FA4B+FA4B/FA4B\FA4B; Return 
                                                                ;;                        ;
                                                                ;;                        ;
DATA_01FA4C:          db $40,$00                                ;;FA4F|FA4C+FA4C/FA4C\FA4C;
                                                                ;;                        ;
IggyBallTiles:        db $4A,$4C,$4A,$4C                        ;;FA51|FA4E+FA4E/FA4E\FA4E;
                                                                ;;                        ;
DATA_01FA52:          db $35,$35,$F5,$F5                        ;;FA55|FA52+FA52/FA52\FA52;
                                                                ;;                        ;
DATA_01FA56:          db $10,$F0                                ;;FA59|FA56+FA56/FA56\FA56;
                                                                ;;                        ;
IggysBall:            JSR SubSprGfx2Entry1                      ;;FA5B|FA58+FA58/FA58\FA58;
                      LDY.W !SpriteMisc157C,X                   ;;FA5E|FA5B+FA5B/FA5B\FA5B;
                      LDA.W DATA_01FA4C,Y                       ;;FA61|FA5E+FA5E/FA5E\FA5E;
                      STA.B !_0                                 ;;FA64|FA61+FA61/FA61\FA61;
                      LDY.W !SpriteOAMIndex,X                   ;;FA66|FA63+FA63/FA63\FA63; Y = Index into sprite OAM 
                      LDA.B !EffFrame                           ;;FA69|FA66+FA66/FA66\FA66;
                      LSR A                                     ;;FA6B|FA68+FA68/FA68\FA68;
                      LSR A                                     ;;FA6C|FA69+FA69/FA69\FA69;
                      AND.B #$03                                ;;FA6D|FA6A+FA6A/FA6A\FA6A;
                      PHX                                       ;;FA6F|FA6C+FA6C/FA6C\FA6C;
                      TAX                                       ;;FA70|FA6D+FA6D/FA6D\FA6D;
                      LDA.W IggyBallTiles,X                     ;;FA71|FA6E+FA6E/FA6E\FA6E;
                      STA.W !OAMTileNo+$100,Y                   ;;FA74|FA71+FA71/FA71\FA71;
                      LDA.W DATA_01FA52,X                       ;;FA77|FA74+FA74/FA74\FA74;
                      EOR.B !_0                                 ;;FA7A|FA77+FA77/FA77\FA77;
                      STA.W !OAMTileAttr+$100,Y                 ;;FA7C|FA79+FA79/FA79\FA79;
                      PLX                                       ;;FA7F|FA7C+FA7C/FA7C\FA7C;
                      LDA.B !SpriteLock                         ;;FA80|FA7D+FA7D/FA7D\FA7D; \ Branch if sprites locked 
                      BNE Return01FAB3                          ;;FA82|FA7F+FA7F/FA7F\FA7F; / 
                      LDY.W !SpriteMisc157C,X                   ;;FA84|FA81+FA81/FA81\FA81;
                      LDA.W DATA_01FA56,Y                       ;;FA87|FA84+FA84/FA84\FA84;
                      STA.B !SpriteXSpeed,X                     ;;FA8A|FA87+FA87/FA87\FA87;
                      JSR SubSprXPosNoGrvty                     ;;FA8C|FA89+FA89/FA89\FA89;
                      JSR SubSprYPosNoGrvty                     ;;FA8F|FA8C+FA8C/FA8C\FA8C;
                      LDA.B !SpriteYSpeed,X                     ;;FA92|FA8F+FA8F/FA8F\FA8F;
                      CMP.B #$40                                ;;FA94|FA91+FA91/FA91\FA91;
                      BPL +                                     ;;FA96|FA93+FA93/FA93\FA93;
                      CLC                                       ;;FA98|FA95+FA95/FA95\FA95;
                      ADC.B #$04                                ;;FA99|FA96+FA96/FA96\FA96;
                      STA.B !SpriteYSpeed,X                     ;;FA9B|FA98+FA98/FA98\FA98;
                    + JSR CODE_01FF98                           ;;FA9D|FA9A+FA9A/FA9A\FA9A;
                      BCC +                                     ;;FAA0|FA9D+FA9D/FA9D\FA9D;
                      LDA.B #$F0                                ;;FAA2|FA9F+FA9F/FA9F\FA9F;
                      STA.B !SpriteYSpeed,X                     ;;FAA4|FAA1+FAA1/FAA1\FAA1;
                    + JSR MarioSprInteractRt                    ;;FAA6|FAA3+FAA3/FAA3\FAA3;
                      LDA.B !SpriteYPosLow,X                    ;;FAA9|FAA6+FAA6/FAA6\FAA6;
                      CMP.B #$44                                ;;FAAB|FAA8+FAA8/FAA8\FAA8;
                      BCC Return01FAB3                          ;;FAAD|FAAA+FAAA/FAAA\FAAA;
                      CMP.B #$50                                ;;FAAF|FAAC+FAAC/FAAC\FAAC;
                      BCS Return01FAB3                          ;;FAB1|FAAE+FAAE/FAAE\FAAE;
                      JSR CODE_019ACB                           ;;FAB3|FAB0+FAB0/FAB0\FAB0;
Return01FAB3:         RTS                                       ;;FAB6|FAB3+FAB3/FAB3\FAB3; Return 
                                                                ;;                        ;
                                                                ;;                        ;
                      db $FF,$01,$00,$80,$60,$A0,$40,$D0        ;;FAB7|FAB4+FAB4/FAB4\FAB4;
                      db $D8,$C0,$C8,$0C,$F4                    ;;FABF|FABC+FABC/FABC\FABC;
                                                                ;;                        ;
KoopaKid:             LDA.B !SpriteTableC2,X                    ;;FAC4|FAC1+FAC1/FAC1\FAC1;
                      JSL ExecutePtr                            ;;FAC6|FAC3+FAC3/FAC3\FAC3; 00 - Morton 
                                                                ;;                        ;
                      dw WallKoopaKids                          ;;FACA|FAC7+FAC7/FAC7\FAC7; 02 - Ludwig 
                      dw WallKoopaKids                          ;;FACC|FAC9+FAC9/FAC9\FAC9; 03 - Iggy   
                      dw WallKoopaKids                          ;;FACE|FACB+FACB/FACB\FACB; 04 - Larry  
                      dw PlatformKoopaKids                      ;;FAD0|FACD+FACD/FACD\FACD; 05 - Lemmy  
                      dw PlatformKoopaKids                      ;;FAD2|FACF+FACF/FACF\FACF; 06 - Wendy  
                      dw PipeKoopaKids                          ;;FAD4|FAD1+FAD1/FAD1\FAD1;
                      dw PipeKoopaKids                          ;;FAD6|FAD3+FAD3/FAD3\FAD3;
                                                                ;;                        ;
                      db $00,$FC,$F8,$F8,$F8,$F8,$F8,$F8        ;;FAD8|FAD5+FAD5/FAD5\FAD5;
DATA_01FADD:          db $F8,$F8,$F8,$F4,$F0,$F0,$EC,$EC        ;;FAE0|FADD+FADD/FADD\FADD;
DATA_01FAE5:          db $00,$01,$02,$00,$01,$02,$00,$01        ;;FAE8|FAE5+FAE5/FAE5\FAE5;
                      db $02,$00,$01,$02,$00,$01,$02,$01        ;;FAF0|FAED+FAED/FAED\FAED;
                                                                ;;                        ;
PlatformKoopaKids:    LDA.B !SpriteLock                         ;;FAF8|FAF5+FAF5/FAF5\FAF5;
                      ORA.W !SpriteMisc154C,X                   ;;FAFA|FAF7+FAF7/FAF7\FAF7;
                      BNE +                                     ;;FAFD|FAFA+FAFA/FAFA\FAFA;
                      JSR SubHorizPos                           ;;FAFF|FAFC+FAFC/FAFC\FAFC;
                      STY.B !_0                                 ;;FB02|FAFF+FAFF/FAFF\FAFF;
                      LDA.B !Mode7Angle                         ;;FB04|FB01+FB01/FB01\FB01;
                      ASL A                                     ;;FB06|FB03+FB03/FB03\FB03;
                      ROL A                                     ;;FB07|FB04+FB04/FB04\FB04;
                      AND.B #$01                                ;;FB08|FB05+FB05/FB05\FB05;
                      CMP.B !_0                                 ;;FB0A|FB07+FB07/FB07\FB07;
                      BNE +                                     ;;FB0C|FB09+FB09/FB09\FB09;
                      INC.W !SpriteMisc1534,X                   ;;FB0E|FB0B+FB0B/FB0B\FB0B;
                      LDA.W !SpriteMisc1534,X                   ;;FB11|FB0E+FB0E/FB0E\FB0E;
                      AND.B #$7F                                ;;FB14|FB11+FB11/FB11\FB11;
                      BNE +                                     ;;FB16|FB13+FB13/FB13\FB13;
                      LDA.B #$7F                                ;;FB18|FB15+FB15/FB15\FB15; \ Set time to go in shell 
                      STA.W !SpriteMisc1564,X                   ;;FB1A|FB17+FB17/FB17\FB17; / 
                    + STZ.W !SpriteOffscreenX,X                 ;;FB1D|FB1A+FB1A/FB1A\FB1A;
                      LDA.W !SpriteMisc163E,X                   ;;FB20|FB1D+FB1D/FB1D\FB1D;
                      BEQ CODE_01FB36                           ;;FB23|FB20+FB20/FB20\FB20;
                      DEC A                                     ;;FB25|FB22+FB22/FB22\FB22;
                      BNE +                                     ;;FB26|FB23+FB23/FB23\FB23;
                      INC.W !CutsceneID                         ;;FB28|FB25+FB25/FB25\FB25;
                      LDA.B #$FF                                ;;FB2B|FB28+FB28/FB28\FB28;
                      STA.W !EndLevelTimer                      ;;FB2D|FB2A+FB2A/FB2A\FB2A;
                      LDA.B #!BGM_BOSSCLEAR                     ;;FB30|FB2D+FB2D/FB2D\FB2D;
                      STA.W !SPCIO2                             ;;FB32|FB2F+FB2F/FB2F\FB2F; / Change music 
                      STZ.W !SpriteStatus,X                     ;;FB35|FB32+FB32/FB32\FB32;
                    + RTS                                       ;;FB38|FB35+FB35/FB35\FB35; Return 
                                                                ;;                        ;
CODE_01FB36:          JSL LoadTweakerBytes                      ;;FB39|FB36+FB36/FB36\FB36;
                      LDA.B !SpriteLock                         ;;FB3D|FB3A+FB3A/FB3A\FB3A;
                      BEQ +                                     ;;FB3F|FB3C+FB3C/FB3C\FB3C;
                      JMP CODE_01FC08                           ;;FB41|FB3E+FB3E/FB3E\FB3E;
                                                                ;;                        ;
                    + LDA.W !SpriteMisc160E,X                   ;;FB44|FB41+FB41/FB41\FB41;
                      BEQ CODE_01FB7B                           ;;FB47|FB44+FB44/FB44\FB44;
                      JSR SubSprXPosNoGrvty                     ;;FB49|FB46+FB46/FB46\FB46;
                      JSR SubSprYPosNoGrvty                     ;;FB4C|FB49+FB49/FB49\FB49;
                      LDA.B !SpriteYSpeed,X                     ;;FB4F|FB4C+FB4C/FB4C\FB4C;
                      CMP.B #$40                                ;;FB51|FB4E+FB4E/FB4E\FB4E;
                      BPL +                                     ;;FB53|FB50+FB50/FB50\FB50;
                      INC.B !SpriteYSpeed,X                     ;;FB55|FB52+FB52/FB52\FB52;
                      INC.B !SpriteYSpeed,X                     ;;FB57|FB54+FB54/FB54\FB54;
                    + LDA.B !SpriteYPosLow,X                    ;;FB59|FB56+FB56/FB56\FB56;
                      CMP.B #$58                                ;;FB5B|FB58+FB58/FB58\FB58;
                      BCC +                                     ;;FB5D|FB5A+FB5A/FB5A\FB5A;
                      CMP.B #$80                                ;;FB5F|FB5C+FB5C/FB5C\FB5C;
                      BCS +                                     ;;FB61|FB5E+FB5E/FB5E\FB5E;
                      LDA.B #!SFX_BOSSINLAVA                    ;;FB63|FB60+FB60/FB60\FB60; \ Play sound effect 
                      STA.W !SPCIO3                             ;;FB65|FB62+FB62/FB62\FB62; / 
                      LDA.B #$50                                ;;FB68|FB65+FB65/FB65\FB65;
                      STA.W !SpriteMisc163E,X                   ;;FB6A|FB67+FB67/FB67\FB67;
                      JSL KillMostSprites                       ;;FB6D|FB6A+FB6A/FB6A\FB6A; Kill all sprites 
                    + LDA.B !SpriteXPosLow,X                    ;;FB71|FB6E+FB6E/FB6E\FB6E;
                      STA.W !BrSwingPlatXPos                    ;;FB73|FB70+FB70/FB70\FB70;
                      LDA.B !SpriteYPosLow,X                    ;;FB76|FB73+FB73/FB73\FB73;
                      STA.W !BrSwingPlatYPos                    ;;FB78|FB75+FB75/FB75\FB75;
                      JMP CODE_01FC0E                           ;;FB7B|FB78+FB78/FB78\FB78;
                                                                ;;                        ;
CODE_01FB7B:          JSR SubSprXPosNoGrvty                     ;;FB7E|FB7B+FB7B/FB7B\FB7B;
                      LDA.B !TrueFrame                          ;;FB81|FB7E+FB7E/FB7E\FB7E;
                      AND.B #$1F                                ;;FB83|FB80+FB80/FB80\FB80;
                      ORA.W !SpriteMisc1564,X                   ;;FB85|FB82+FB82/FB82\FB82;
                      BNE +                                     ;;FB88|FB85+FB85/FB85\FB85;
                      LDA.W !SpriteMisc157C,X                   ;;FB8A|FB87+FB87/FB87\FB87;
                      PHA                                       ;;FB8D|FB8A+FB8A/FB8A\FB8A;
                      JSR FaceMario                             ;;FB8E|FB8B+FB8B/FB8B\FB8B;
                      PLA                                       ;;FB91|FB8E+FB8E/FB8E\FB8E;
                      CMP.W !SpriteMisc157C,X                   ;;FB92|FB8F+FB8F/FB8F\FB8F;
                      BEQ +                                     ;;FB95|FB92+FB92/FB92\FB92;
                      LDA.B #$10                                ;;FB97|FB94+FB94/FB94\FB94;
                      STA.W !SpriteMisc15AC,X                   ;;FB99|FB96+FB96/FB96\FB96;
                    + STZ.B !SpriteYSpeed,X                     ;;FB9C|FB99+FB99/FB99\FB99; Sprite Y Speed = 0 
                      STZ.B !SpriteXSpeed,X                     ;;FB9E|FB9B+FB9B/FB9B\FB9B; Sprite X Speed = 0 
                      LDA.B !Mode7Angle                         ;;FBA0|FB9D+FB9D/FB9D\FB9D;
                      BPL +                                     ;;FBA2|FB9F+FB9F/FB9F\FB9F;
                      CLC                                       ;;FBA4|FBA1+FBA1/FBA1\FBA1;
                      ADC.B #$08                                ;;FBA5|FBA2+FBA2/FBA2\FBA2;
                    + LSR A                                     ;;FBA7|FBA4+FBA4/FBA4\FBA4;
                      LSR A                                     ;;FBA8|FBA5+FBA5/FBA5\FBA5;
                      LSR A                                     ;;FBA9|FBA6+FBA6/FBA6\FBA6;
                      LSR A                                     ;;FBAA|FBA7+FBA7/FBA7\FBA7;
                      TAY                                       ;;FBAB|FBA8+FBA8/FBA8\FBA8;
                      STY.B !_0                                 ;;FBAC|FBA9+FBA9/FBA9\FBA9;
                      EOR.B #$FF                                ;;FBAE|FBAB+FBAB/FBAB\FBAB;
                      INC A                                     ;;FBB0|FBAD+FBAD/FBAD\FBAD;
                      AND.B #$0F                                ;;FBB1|FBAE+FBAE/FBAE\FBAE;
                      STA.B !_1                                 ;;FBB3|FBB0+FBB0/FBB0\FBB0;
                      LDA.W !SpriteMisc154C,X                   ;;FBB5|FBB2+FBB2/FBB2\FBB2;
                      BNE CODE_01FBD9                           ;;FBB8|FBB5+FBB5/FBB5\FBB5;
                      LDA.B !Mode7Angle+1                       ;;FBBA|FBB7+FBB7/FBB7\FBB7;
                      BNE CODE_01FBC9                           ;;FBBC|FBB9+FBB9/FBB9\FBB9;
                      LDA.B !SpriteXPosLow,X                    ;;FBBE|FBBB+FBBB/FBBB\FBBB;
                      CMP.B #$78                                ;;FBC0|FBBD+FBBD/FBBD\FBBD;
                      BCC CODE_01FBC5                           ;;FBC2|FBBF+FBBF/FBBF\FBBF;
                      LDA.B #$FF                                ;;FBC4|FBC1+FBC1/FBC1\FBC1;
                      BRA CODE_01FBEE                           ;;FBC6|FBC3+FBC3/FBC3\FBC3;
                                                                ;;                        ;
CODE_01FBC5:          LDA.B #$01                                ;;FBC8|FBC5+FBC5/FBC5\FBC5;
                      BRA CODE_01FBEE                           ;;FBCA|FBC7+FBC7/FBC7\FBC7;
                                                                ;;                        ;
CODE_01FBC9:          LDY.B !_1                                 ;;FBCC|FBC9+FBC9/FBC9\FBC9;
                      LDA.B !SpriteXPosLow,X                    ;;FBCE|FBCB+FBCB/FBCB\FBCB;
                      CMP.B #$78                                ;;FBD0|FBCD+FBCD/FBCD\FBCD;
                      BCS CODE_01FBD5                           ;;FBD2|FBCF+FBCF/FBCF\FBCF;
                      LDA.B #$01                                ;;FBD4|FBD1+FBD1/FBD1\FBD1;
                      BRA CODE_01FBEE                           ;;FBD6|FBD3+FBD3/FBD3\FBD3;
                                                                ;;                        ;
CODE_01FBD5:          LDA.B #$FF                                ;;FBD8|FBD5+FBD5/FBD5\FBD5;
                      BRA CODE_01FBEE                           ;;FBDA|FBD7+FBD7/FBD7\FBD7;
                                                                ;;                        ;
CODE_01FBD9:          LDA.B !Mode7Angle+1                       ;;FBDC|FBD9+FBD9/FBD9\FBD9;
                      BNE CODE_01FBE7                           ;;FBDE|FBDB+FBDB/FBDB\FBDB;
                      LDY.B !_0                                 ;;FBE0|FBDD+FBDD/FBDD\FBDD;
                      LDA.W DATA_01FADD,Y                       ;;FBE2|FBDF+FBDF/FBDF\FBDF;
                      EOR.B #$FF                                ;;FBE5|FBE2+FBE2/FBE2\FBE2;
                      INC A                                     ;;FBE7|FBE4+FBE4/FBE4\FBE4;
                      BRA +                                     ;;FBE8|FBE5+FBE5/FBE5\FBE5;
                                                                ;;                        ;
CODE_01FBE7:          LDY.B !_1                                 ;;FBEA|FBE7+FBE7/FBE7\FBE7;
                      LDA.W DATA_01FADD,Y                       ;;FBEC|FBE9+FBE9/FBE9\FBE9;
                    + ASL A                                     ;;FBEF|FBEC+FBEC/FBEC\FBEC;
                      ASL A                                     ;;FBF0|FBED+FBED/FBED\FBED;
CODE_01FBEE:          STA.B !SpriteXSpeed,X                     ;;FBF1|FBEE+FBEE/FBEE\FBEE;
                      INC.W !SpriteMisc1570,X                   ;;FBF3|FBF0+FBF0/FBF0\FBF0;
                      LDA.B !SpriteXSpeed,X                     ;;FBF6|FBF3+FBF3/FBF3\FBF3;
                      BEQ +                                     ;;FBF8|FBF5+FBF5/FBF5\FBF5;
                      INC.W !SpriteMisc1570,X                   ;;FBFA|FBF7+FBF7/FBF7\FBF7;
                    + LDA.W !SpriteMisc1570,X                   ;;FBFD|FBFA+FBFA/FBFA\FBFA;
                      LSR A                                     ;;FC00|FBFD+FBFD/FBFD\FBFD;
                      LSR A                                     ;;FC01|FBFE+FBFE/FBFE\FBFE;
                      AND.B #$0F                                ;;FC02|FBFF+FBFF/FBFF\FBFF;
                      TAY                                       ;;FC04|FC01+FC01/FC01\FC01;
                      LDA.W DATA_01FAE5,Y                       ;;FC05|FC02+FC02/FC02\FC02;
                      STA.W !SpriteMisc1602,X                   ;;FC08|FC05+FC05/FC05\FC05;
CODE_01FC08:          JSR CODE_01FD50                           ;;FC0B|FC08+FC08/FC08\FC08;
                      JSR CODE_01FC62                           ;;FC0E|FC0B+FC0B/FC0B\FC0B;
CODE_01FC0E:          LDA.W !SpriteMisc154C,X                   ;;FC11|FC0E+FC0E/FC0E\FC0E;
                      BNE CODE_01FC4E                           ;;FC14|FC11+FC11/FC11\FC11;
                      LDA.W !SpriteMisc157C,X                   ;;FC16|FC13+FC13/FC13\FC13;
                      PHA                                       ;;FC19|FC16+FC16/FC16\FC16;
                      LDY.W !SpriteMisc15AC,X                   ;;FC1A|FC17+FC17/FC17\FC17;
                      BEQ CODE_01FC2A                           ;;FC1D|FC1A+FC1A/FC1A\FC1A;
                      CPY.B #$08                                ;;FC1F|FC1C+FC1C/FC1C\FC1C;
                      BCC +                                     ;;FC21|FC1E+FC1E/FC1E\FC1E;
                      EOR.B #$01                                ;;FC23|FC20+FC20/FC20\FC20;
                      STA.W !SpriteMisc157C,X                   ;;FC25|FC22+FC22/FC22\FC22;
                    + LDA.B #$06                                ;;FC28|FC25+FC25/FC25\FC25;
                      STA.W !SpriteMisc1602,X                   ;;FC2A|FC27+FC27/FC27\FC27;
CODE_01FC2A:          LDA.W !SpriteMisc1564,X                   ;;FC2D|FC2A+FC2A/FC2A\FC2A;
                      BEQ +                                     ;;FC30|FC2D+FC2D/FC2D\FC2D;
                      PHA                                       ;;FC32|FC2F+FC2F/FC2F\FC2F;
                      LSR A                                     ;;FC33|FC30+FC30/FC30\FC30;
                      LSR A                                     ;;FC34|FC31+FC31/FC31\FC31;
                      LSR A                                     ;;FC35|FC32+FC32/FC32\FC32;
                      TAY                                       ;;FC36|FC33+FC33/FC33\FC33;
                      LDA.W DATA_01FD95,Y                       ;;FC37|FC34+FC34/FC34\FC34;
                      STA.W !SpriteMisc1602,X                   ;;FC3A|FC37+FC37/FC37\FC37;
                      PLA                                       ;;FC3D|FC3A+FC3A/FC3A\FC3A;
                      CMP.B #$28                                ;;FC3E|FC3B+FC3B/FC3B\FC3B;
                      BNE +                                     ;;FC40|FC3D+FC3D/FC3D\FC3D;
                      LDA.B !SpriteLock                         ;;FC42|FC3F+FC3F/FC3F\FC3F; \ Branch if sprites locked 
                      BNE +                                     ;;FC44|FC41+FC41/FC41\FC41; / 
                      JSR ThrowBall                             ;;FC46|FC43+FC43/FC43\FC43; Throw ball 
                    + JSR CODE_01FEBC                           ;;FC49|FC46+FC46/FC46\FC46;
                      PLA                                       ;;FC4C|FC49+FC49/FC49\FC49;
                      STA.W !SpriteMisc157C,X                   ;;FC4D|FC4A+FC4A/FC4A\FC4A;
                      RTS                                       ;;FC50|FC4D+FC4D/FC4D\FC4D; Return 
                                                                ;;                        ;
CODE_01FC4E:          CMP.B #$10                                ;;FC51|FC4E+FC4E/FC4E\FC4E;
                      BCC +                                     ;;FC53|FC50+FC50/FC50\FC50;
                    - LDA.B #$03                                ;;FC55|FC52+FC52/FC52\FC52;
                      STA.W !SpriteMisc1602,X                   ;;FC57|FC54+FC54/FC54\FC54;
                      JMP CODE_01FEBC                           ;;FC5A|FC57+FC57/FC57\FC57;
                                                                ;;                        ;
                    + CMP.B #$08                                ;;FC5D|FC5A+FC5A/FC5A\FC5A;
                      BCC -                                     ;;FC5F|FC5C+FC5C/FC5C\FC5C;
                      JSR CODE_01FF5B                           ;;FC61|FC5E+FC5E/FC5E\FC5E;
                    - RTS                                       ;;FC64|FC61+FC61/FC61\FC61; Return 
                                                                ;;                        ;
CODE_01FC62:          LDA.B !PlayerAnimation                    ;;FC65|FC62+FC62/FC62\FC62;
                      CMP.B #$01                                ;;FC67|FC64+FC64/FC64\FC64;
                      BCS -                                     ;;FC69|FC66+FC66/FC66\FC66;
                      LDA.W !SpriteMisc160E,X                   ;;FC6B|FC68+FC68/FC68\FC68;
                      BNE -                                     ;;FC6E|FC6B+FC6B/FC6B\FC6B;
                      LDA.B !SpriteXPosLow,X                    ;;FC70|FC6D+FC6D/FC6D\FC6D;
                      CMP.B #$20                                ;;FC72|FC6F+FC6F/FC6F\FC6F;
                      BCC CODE_01FC77                           ;;FC74|FC71+FC71/FC71\FC71;
                      CMP.B #$D8                                ;;FC76|FC73+FC73/FC73\FC73;
                      BCC +                                     ;;FC78|FC75+FC75/FC75\FC75;
CODE_01FC77:          LDA.W !BrSwingPlatXPos                    ;;FC7A|FC77+FC77/FC77\FC77;
                      STA.B !SpriteXPosLow,X                    ;;FC7D|FC7A+FC7A/FC7A\FC7A;
                      LDA.W !BrSwingPlatYPos                    ;;FC7F|FC7C+FC7C/FC7C\FC7C;
                      STA.B !SpriteYPosLow,X                    ;;FC82|FC7F+FC7F/FC7F\FC7F;
                      INC.W !SpriteMisc160E,X                   ;;FC84|FC81+FC81/FC81\FC81;
                    + LDA.W !BrSwingPlatXPos                    ;;FC87|FC84+FC84/FC84\FC84;
                      SEC                                       ;;FC8A|FC87+FC87/FC87\FC87;
                      SBC.B #$08                                ;;FC8B|FC88+FC88/FC88\FC88;
                      STA.B !_0                                 ;;FC8D|FC8A+FC8A/FC8A\FC8A;
                      LDA.W !BrSwingPlatYPos                    ;;FC8F|FC8C+FC8C/FC8C\FC8C;
                      CLC                                       ;;FC92|FC8F+FC8F/FC8F\FC8F;
                      ADC.B #$60                                ;;FC93|FC90+FC90/FC90\FC90;
                      STA.B !_1                                 ;;FC95|FC92+FC92/FC92\FC92;
                      LDA.B #$0F                                ;;FC97|FC94+FC94/FC94\FC94;
                      STA.B !_2                                 ;;FC99|FC96+FC96/FC96\FC96;
                      LDA.B #$0C                                ;;FC9B|FC98+FC98/FC98\FC98;
                      STA.B !_3                                 ;;FC9D|FC9A+FC9A/FC9A\FC9A;
                      STZ.B !_8                                 ;;FC9F|FC9C+FC9C/FC9C\FC9C;
                      STZ.B !_9                                 ;;FCA1|FC9E+FC9E/FC9E\FC9E;
                      LDA.B !PlayerXPosScrRel                   ;;FCA3|FCA0+FCA0/FCA0\FCA0;
                      CLC                                       ;;FCA5|FCA2+FCA2/FCA2\FCA2;
                      ADC.B #$02                                ;;FCA6|FCA3+FCA3/FCA3\FCA3;
                      STA.B !_4                                 ;;FCA8|FCA5+FCA5/FCA5\FCA5;
                      LDA.B !PlayerYPosScrRel                   ;;FCAA|FCA7+FCA7/FCA7\FCA7;
                      CLC                                       ;;FCAC|FCA9+FCA9/FCA9\FCA9;
                      ADC.B #$10                                ;;FCAD|FCAA+FCAA/FCAA\FCAA;
                      STA.B !_5                                 ;;FCAF|FCAC+FCAC/FCAC\FCAC;
                      LDA.B #$0C                                ;;FCB1|FCAE+FCAE/FCAE\FCAE;
                      STA.B !_6                                 ;;FCB3|FCB0+FCB0/FCB0\FCB0;
                      LDA.B #$0E                                ;;FCB5|FCB2+FCB2/FCB2\FCB2;
                      STA.B !_7                                 ;;FCB7|FCB4+FCB4/FCB4\FCB4;
                      STZ.B !_A                                 ;;FCB9|FCB6+FCB6/FCB6\FCB6;
                      STZ.B !_B                                 ;;FCBB|FCB8+FCB8/FCB8\FCB8;
                      JSL CheckForContact                       ;;FCBD|FCBA+FCBA/FCBA\FCBA;
                      BCC CODE_01FD0A                           ;;FCC1|FCBE+FCBE/FCBE\FCBE;
                      LDA.W !SpriteMisc1558,X                   ;;FCC3|FCC0+FCC0/FCC0\FCC0;
                      BNE Return01FD09                          ;;FCC6|FCC3+FCC3/FCC3\FCC3;
                      LDA.B #$08                                ;;FCC8|FCC5+FCC5/FCC5\FCC5;
                      STA.W !SpriteMisc1558,X                   ;;FCCA|FCC7+FCC7/FCC7\FCC7;
                      LDA.B !PlayerInAir                        ;;FCCD|FCCA+FCCA/FCCA\FCCA;
                      BEQ CODE_01FD05                           ;;FCCF|FCCC+FCCC/FCCC\FCCC;
                      LDA.B #!SFX_ENEMYHURT                     ;;FCD1|FCCE+FCCE/FCCE\FCCE; \ Play sound effect 
                      STA.W !SPCIO3                             ;;FCD3|FCD0+FCD0/FCD0\FCD0; / 
                      JSL BoostMarioSpeed                       ;;FCD6|FCD3+FCD3/FCD3\FCD3;
                      LDA.B !SpriteXPosLow,X                    ;;FCDA|FCD7+FCD7/FCD7\FCD7;
                      PHA                                       ;;FCDC|FCD9+FCD9/FCD9\FCD9;
                      LDA.B !SpriteYPosLow,X                    ;;FCDD|FCDA+FCDA/FCDA\FCDA;
                      PHA                                       ;;FCDF|FCDC+FCDC/FCDC\FCDC;
                      LDA.W !BrSwingPlatXPos                    ;;FCE0|FCDD+FCDD/FCDD\FCDD;
                      SEC                                       ;;FCE3|FCE0+FCE0/FCE0\FCE0;
                      SBC.B #$08                                ;;FCE4|FCE1+FCE1/FCE1\FCE1;
                      STA.B !SpriteXPosLow,X                    ;;FCE6|FCE3+FCE3/FCE3\FCE3;
                      LDA.W !BrSwingPlatYPos                    ;;FCE8|FCE5+FCE5/FCE5\FCE5;
                      SEC                                       ;;FCEB|FCE8+FCE8/FCE8\FCE8;
                      SBC.B #$10                                ;;FCEC|FCE9+FCE9/FCE9\FCE9;
                      STA.B !SpriteYPosLow,X                    ;;FCEE|FCEB+FCEB/FCEB\FCEB;
                      STZ.W !SpriteOffscreenX,X                 ;;FCF0|FCED+FCED/FCED\FCED;
                      JSL DisplayContactGfx                     ;;FCF3|FCF0+FCF0/FCF0\FCF0;
                      PLA                                       ;;FCF7|FCF4+FCF4/FCF4\FCF4;
                      STA.B !SpriteYPosLow,X                    ;;FCF8|FCF5+FCF5/FCF5\FCF5;
                      PLA                                       ;;FCFA|FCF7+FCF7/FCF7\FCF7;
                      STA.B !SpriteXPosLow,X                    ;;FCFB|FCF8+FCF8/FCF8\FCF8;
                      LDA.W !SpriteMisc154C,X                   ;;FCFD|FCFA+FCFA/FCFA\FCFA;
                      BNE Return01FD09                          ;;FD00|FCFD+FCFD/FCFD\FCFD;
                      LDA.B #$18                                ;;FD02|FCFF+FCFF/FCFF\FCFF;
                      STA.W !SpriteMisc154C,X                   ;;FD04|FD01+FD01/FD01\FD01;
                      RTS                                       ;;FD07|FD04+FD04/FD04\FD04; Return 
                                                                ;;                        ;
CODE_01FD05:          JSL HurtMario                             ;;FD08|FD05+FD05/FD05\FD05;
Return01FD09:         RTS                                       ;;FD0C|FD09+FD09/FD09\FD09; Return 
                                                                ;;                        ;
CODE_01FD0A:          LDY.B #$0A                                ;;FD0D|FD0A+FD0A/FD0A\FD0A;
CODE_01FD0C:          STY.W !SpriteInterIndex                   ;;FD0F|FD0C+FD0C/FD0C\FD0C;
                      LDA.W !ExtSpriteNumber,Y                  ;;FD12|FD0F+FD0F/FD0F\FD0F;
                      CMP.B #$05                                ;;FD15|FD12+FD12/FD12\FD12;
                      BNE +                                     ;;FD17|FD14+FD14/FD14\FD14;
                      LDA.W !ExtSpriteXPosLow,Y                 ;;FD19|FD16+FD16/FD16\FD16;
                      SEC                                       ;;FD1C|FD19+FD19/FD19\FD19;
                      SBC.B !Layer1XPos                         ;;FD1D|FD1A+FD1A/FD1A\FD1A;
                      STA.B !_4                                 ;;FD1F|FD1C+FD1C/FD1C\FD1C;
                      STZ.B !_A                                 ;;FD21|FD1E+FD1E/FD1E\FD1E;
                      LDA.W !ExtSpriteYPosLow,Y                 ;;FD23|FD20+FD20/FD20\FD20;
                      SEC                                       ;;FD26|FD23+FD23/FD23\FD23;
                      SBC.B !Layer1YPos                         ;;FD27|FD24+FD24/FD24\FD24;
                      STA.B !_5                                 ;;FD29|FD26+FD26/FD26\FD26;
                      STZ.B !_B                                 ;;FD2B|FD28+FD28/FD28\FD28;
                      LDA.B #$08                                ;;FD2D|FD2A+FD2A/FD2A\FD2A;
                      STA.B !_6                                 ;;FD2F|FD2C+FD2C/FD2C\FD2C;
                      STA.B !_7                                 ;;FD31|FD2E+FD2E/FD2E\FD2E;
                      JSL CheckForContact                       ;;FD33|FD30+FD30/FD30\FD30;
                      BCC +                                     ;;FD37|FD34+FD34/FD34\FD34;
                      LDA.B #$01                                ;;FD39|FD36+FD36/FD36\FD36; \ Extended sprite = Smoke puff 
                      STA.W !ExtSpriteNumber,Y                  ;;FD3B|FD38+FD38/FD38\FD38; / 
                      LDA.B #$0F                                ;;FD3E|FD3B+FD3B/FD3B\FD3B;
                      STA.W !ExtSpriteMisc176F,Y                ;;FD40|FD3D+FD3D/FD3D\FD3D;
                      LDA.B #!SFX_BONK                          ;;FD43|FD40+FD40/FD40\FD40; \ Play sound effect 
                      STA.W !SPCIO0                             ;;FD45|FD42+FD42/FD42\FD42; / 
                      LDA.B #$10                                ;;FD48|FD45+FD45/FD45\FD45;
                      STA.W !SpriteMisc154C,X                   ;;FD4A|FD47+FD47/FD47\FD47;
                    + DEY                                       ;;FD4D|FD4A+FD4A/FD4A\FD4A;
                      CPY.B #$07                                ;;FD4E|FD4B+FD4B/FD4B\FD4B;
                      BNE CODE_01FD0C                           ;;FD50|FD4D+FD4D/FD4D\FD4D;
                      RTS                                       ;;FD52|FD4F+FD4F/FD4F\FD4F; Return 
                                                                ;;                        ;
CODE_01FD50:          LDA.B !SpriteXPosLow,X                    ;;FD53|FD50+FD50/FD50\FD50;
                      CLC                                       ;;FD55|FD52+FD52/FD52\FD52;
                      ADC.B #$08                                ;;FD56|FD53+FD53/FD53\FD53;
                      STA.W !BrSwingXDist                       ;;FD58|FD55+FD55/FD55\FD55;
                      LDA.W !SpriteYPosHigh,X                   ;;FD5B|FD58+FD58/FD58\FD58;
                      ADC.B #$00                                ;;FD5E|FD5B+FD5B/FD5B\FD5B;
                      STA.W !BrSwingXDist+1                     ;;FD60|FD5D+FD5D/FD5D\FD5D;
                      LDA.B !SpriteYPosLow,X                    ;;FD63|FD60+FD60/FD60\FD60;
                      CLC                                       ;;FD65|FD62+FD62/FD62\FD62;
                      ADC.B #$2F                                ;;FD66|FD63+FD63/FD63\FD63;
                      STA.W !BrSwingYDist                       ;;FD68|FD65+FD65/FD65\FD65;
                      LDA.W !SpriteXPosHigh,X                   ;;FD6B|FD68+FD68/FD68\FD68;
                      ADC.B #$00                                ;;FD6E|FD6B+FD6B/FD6B\FD6B;
                      STA.W !BrSwingYDist+1                     ;;FD70|FD6D+FD6D/FD6D\FD6D;
                      REP #$20                                  ;;FD73|FD70+FD70/FD70\FD70; Accum (16 bit) 
                      LDA.B !Mode7Angle                         ;;FD75|FD72+FD72/FD72\FD72;
                      EOR.W #$01FF                              ;;FD77|FD74+FD74/FD74\FD74;
                      INC A                                     ;;FD7A|FD77+FD77/FD77\FD77;
                      AND.W #$01FF                              ;;FD7B|FD78+FD78/FD78\FD78;
                      STA.B !Mode7Angle                         ;;FD7E|FD7B+FD7B/FD7B\FD7B;
                      SEP #$20                                  ;;FD80|FD7D+FD7D/FD7D\FD7D; Accum (8 bit) 
                      PHX                                       ;;FD82|FD7F+FD7F/FD7F\FD7F;
                      JSL CODE_01CC9D                           ;;FD83|FD80+FD80/FD80\FD80;
                      PLX                                       ;;FD87|FD84+FD84/FD84\FD84;
                      REP #$20                                  ;;FD88|FD85+FD85/FD85\FD85; Accum (16 bit) 
                      LDA.B !Mode7Angle                         ;;FD8A|FD87+FD87/FD87\FD87;
                      EOR.W #$01FF                              ;;FD8C|FD89+FD89/FD89\FD89;
                      INC A                                     ;;FD8F|FD8C+FD8C/FD8C\FD8C;
                      AND.W #$01FF                              ;;FD90|FD8D+FD8D/FD8D\FD8D;
                      STA.B !Mode7Angle                         ;;FD93|FD90+FD90/FD90\FD90;
                      SEP #$20                                  ;;FD95|FD92+FD92/FD92\FD92; Accum (8 bit) 
                      RTS                                       ;;FD97|FD94+FD94/FD94\FD94; Return 
                                                                ;;                        ;
                                                                ;;                        ;
DATA_01FD95:          db $04,$0B,$0B,$0B,$0B,$0A,$0A,$09        ;;FD98|FD95+FD95/FD95\FD95;
                      db $09,$08,$08,$07,$04,$05,$05,$05        ;;FDA0|FD9D+FD9D/FD9D\FD9D;
BallPositionDispX:    db $08,$F8                                ;;FDA8|FDA5+FDA5/FDA5\FDA5;
                                                                ;;                        ;
ThrowBall:            LDY.B #$05                                ;;FDAA|FDA7+FDA7/FDA7\FDA7; \ Find an open sprite index 
CODE_01FDA9:          LDA.W !SpriteStatus,Y                     ;;FDAC|FDA9+FDA9/FDA9\FDA9;  | 
                      BEQ GenerateBall                          ;;FDAF|FDAC+FDAC/FDAC\FDAC;  | 
                      DEY                                       ;;FDB1|FDAE+FDAE/FDAE\FDAE;  | 
                      BPL CODE_01FDA9                           ;;FDB2|FDAF+FDAF/FDAF\FDAF; / 
                      RTS                                       ;;FDB4|FDB1+FDB1/FDB1\FDB1; Return 
                                                                ;;                        ;
GenerateBall:         LDA.B #!SFX_SPIT                          ;;FDB5|FDB2+FDB2/FDB2\FDB2; \ Play sound effect 
                      STA.W !SPCIO0                             ;;FDB7|FDB4+FDB4/FDB4\FDB4; / 
                      LDA.B #$08                                ;;FDBA|FDB7+FDB7/FDB7\FDB7; \ Sprite status = normal 
                      STA.W !SpriteStatus,Y                     ;;FDBC|FDB9+FDB9/FDB9\FDB9; / 
                      LDA.B #$A7                                ;;FDBF|FDBC+FDBC/FDBC\FDBC; \ Sprite to throw = Ball 
                      STA.W !SpriteNumber,Y                     ;;FDC1|FDBE+FDBE/FDBE\FDBE; / 
                      PHX                                       ;;FDC4|FDC1+FDC1/FDC1\FDC1; \ Before: X must have index of sprite being generated 
                      TYX                                       ;;FDC5|FDC2+FDC2/FDC2\FDC2;  | Routine clears *all* old sprite values... 
                      JSL InitSpriteTables                      ;;FDC6|FDC3+FDC3/FDC3\FDC3;  | ...and loads in new values for the 6 main sprite tables 
                      PLX                                       ;;FDCA|FDC7+FDC7/FDC7\FDC7; / 
                      PHX                                       ;;FDCB|FDC8+FDC8/FDC8\FDC8; Push Iggy's sprite index 
                      LDA.W !SpriteMisc157C,X                   ;;FDCC|FDC9+FDC9/FDC9\FDC9; \ Ball's direction = Iggy'direction 
                      STA.W !SpriteMisc157C,Y                   ;;FDCF|FDCC+FDCC/FDCC\FDCC; / 
                      TAX                                       ;;FDD2|FDCF+FDCF/FDCF\FDCF; X = Ball's direction 
                      LDA.W !BrSwingPlatXPos                    ;;FDD3|FDD0+FDD0/FDD0\FDD0; \ Set Ball X position 
                      SEC                                       ;;FDD6|FDD3+FDD3/FDD3\FDD3;  | 
                      SBC.B #$08                                ;;FDD7|FDD4+FDD4/FDD4\FDD4;  | 
                      ADC.W BallPositionDispX,X                 ;;FDD9|FDD6+FDD6/FDD6\FDD6;  | 
                      STA.W !SpriteXPosLow,Y                    ;;FDDC|FDD9+FDD9/FDD9\FDD9;  | 
                      LDA.B #$00                                ;;FDDF|FDDC+FDDC/FDDC\FDDC;  | 
                      STA.W !SpriteYPosHigh,Y                   ;;FDE1|FDDE+FDDE/FDDE\FDDE; / 
                      LDA.W !BrSwingPlatYPos                    ;;FDE4|FDE1+FDE1/FDE1\FDE1; \ Set Ball Y position 
                      SEC                                       ;;FDE7|FDE4+FDE4/FDE4\FDE4;  | 
                      SBC.B #$18                                ;;FDE8|FDE5+FDE5/FDE5\FDE5;  | 
                      STA.W !SpriteYPosLow,Y                    ;;FDEA|FDE7+FDE7/FDE7\FDE7;  | 
                      LDA.B #$00                                ;;FDED|FDEA+FDEA/FDEA\FDEA;  | 
                      SBC.B #$00                                ;;FDEF|FDEC+FDEC/FDEC\FDEC;  | 
                      STA.W !SpriteXPosHigh,Y                   ;;FDF1|FDEE+FDEE/FDEE\FDEE; / 
                      PLX                                       ;;FDF4|FDF1+FDF1/FDF1\FDF1; X = Iggy's sprite index 
                      RTS                                       ;;FDF5|FDF2+FDF2/FDF2\FDF2; Return 
                                                                ;;                        ;
                                                                ;;                        ;
DATA_01FDF3:          db $F7,$FF,$00,$F8,$F7,$FF,$00,$F8        ;;FDF6|FDF3+FDF3/FDF3\FDF3;
                      db $F8,$00,$00,$F8,$FB,$03,$00,$F8        ;;FDFE|FDFB+FDFB/FDFB\FDFB;
                      db $F8,$00,$00,$F8,$FA,$02,$00,$F8        ;;FE06|FE03+FE03/FE03\FE03;
                      db $00,$00,$F8,$00,$00,$F8,$00,$F8        ;;FE0E|FE0B+FE0B/FE0B\FE0B;
                      db $00,$00,$00,$00,$FB,$F8,$00,$F8        ;;FE16|FE13+FE13/FE13\FE13;
                      db $F4,$F8,$00,$F8,$00,$F8,$00,$F8        ;;FE1E|FE1B+FE1B/FE1B\FE1B;
                      db $09,$09,$00,$10,$09,$09,$00,$10        ;;FE26|FE23+FE23/FE23\FE23;
                      db $08,$08,$00,$10,$05,$05,$00,$10        ;;FE2E|FE2B+FE2B/FE2B\FE2B;
                      db $08,$08,$00,$10,$06,$06,$00,$10        ;;FE36|FE33+FE33/FE33\FE33;
                      db $00,$08,$08,$08,$00,$10,$00,$10        ;;FE3E|FE3B+FE3B/FE3B\FE3B;
                      db $00,$08,$00,$08,$05,$10,$00,$10        ;;FE46|FE43+FE43/FE43\FE43;
                      db $0C,$10,$00,$10,$00,$10,$00,$10        ;;FE4E|FE4B+FE4B/FE4B\FE4B;
DATA_01FE53:          db $FA,$F2,$00,$09,$F9,$F1,$00,$08        ;;FE56|FE53+FE53/FE53\FE53;
                      db $F8,$F0,$00,$08,$FE,$F6,$00,$08        ;;FE5E|FE5B+FE5B/FE5B\FE5B;
                      db $FC,$F4,$00,$08,$FF,$F7,$00,$08        ;;FE66|FE63+FE63/FE63\FE63;
                      db $00,$F0,$F8,$F0,$00,$00,$00,$00        ;;FE6E|FE6B+FE6B/FE6B\FE6B;
                      db $00,$00,$00,$00,$FC,$00,$00,$00        ;;FE76|FE73+FE73/FE73\FE73;
                      db $F9,$00,$00,$00,$00,$08,$00,$08        ;;FE7E|FE7B+FE7B/FE7B\FE7B;
DATA_01FE83:          db $00,$0C,$02,$0A,$00,$0C,$22,$0A        ;;FE86|FE83+FE83/FE83\FE83;
                      db $00,$0C,$20,$0A,$00,$0C,$20,$0A        ;;FE8E|FE8B+FE8B/FE8B\FE8B;
                      db $00,$0C,$20,$0A,$00,$0C,$20,$0A        ;;FE96|FE93+FE93/FE93\FE93;
                      db $24,$1C,$04,$1C,$0E,$0D,$0E,$0D        ;;FE9E|FE9B+FE9B/FE9B\FE9B;
                      db $0E,$1D,$0E,$1D,$4A,$0D,$0E,$0D        ;;FEA6|FEA3+FEA3/FEA3\FEA3;
                      db $4A,$0D,$0E,$0D,$20,$0A,$20,$0A        ;;FEAE|FEAB+FEAB/FEAB\FEAB;
DATA_01FEB3:          db $06,$02,$08                            ;;FEB6|FEB3+FEB3/FEB3\FEB3;
                                                                ;;                        ;
DATA_01FEB6:          db $02                                    ;;FEB9|FEB6+FEB6/FEB6\FEB6;
                                                                ;;                        ;
DATA_01FEB7:          db $00,$02,$00,$37,$3B                    ;;FEBA|FEB7+FEB7/FEB7\FEB7;
                                                                ;;                        ;
CODE_01FEBC:          LDY.B !SpriteTableC2,X                    ;;FEBF|FEBC+FEBC/FEBC\FEBC;
                      LDA.W DATA_01FEB7,Y                       ;;FEC1|FEBE+FEBE/FEBE\FEBE;
                      STA.B !_D                                 ;;FEC4|FEC1+FEC1/FEC1\FEC1;
                      STY.B !_5                                 ;;FEC6|FEC3+FEC3/FEC3\FEC3;
                      LDY.W !SpriteOAMIndex,X                   ;;FEC8|FEC5+FEC5/FEC5\FEC5; Y = Index into sprite OAM 
                      LDA.W !SpriteMisc157C,X                   ;;FECB|FEC8+FEC8/FEC8\FEC8;
                      LSR A                                     ;;FECE|FECB+FECB/FECB\FECB;
                      ROR A                                     ;;FECF|FECC+FECC/FECC\FECC;
                      LSR A                                     ;;FED0|FECD+FECD/FECD\FECD;
                      AND.B #$40                                ;;FED1|FECE+FECE/FECE\FECE;
                      EOR.B #$40                                ;;FED3|FED0+FED0/FED0\FED0;
                      STA.B !_2                                 ;;FED5|FED2+FED2/FED2\FED2;
                      LDA.W !SpriteMisc1602,X                   ;;FED7|FED4+FED4/FED4\FED4;
                      ASL A                                     ;;FEDA|FED7+FED7/FED7\FED7;
                      ASL A                                     ;;FEDB|FED8+FED8/FED8\FED8;
                      STA.B !_3                                 ;;FEDC|FED9+FED9/FED9\FED9;
                      PHX                                       ;;FEDE|FEDB+FEDB/FEDB\FEDB;
                      LDX.B #$03                                ;;FEDF|FEDC+FEDC/FEDC\FEDC;
CODE_01FEDE:          PHX                                       ;;FEE1|FEDE+FEDE/FEDE\FEDE;
                      TXA                                       ;;FEE2|FEDF+FEDF/FEDF\FEDF;
                      CLC                                       ;;FEE3|FEE0+FEE0/FEE0\FEE0;
                      ADC.B !_3                                 ;;FEE4|FEE1+FEE1/FEE1\FEE1;
                      TAX                                       ;;FEE6|FEE3+FEE3/FEE3\FEE3;
                      PHX                                       ;;FEE7|FEE4+FEE4/FEE4\FEE4;
                      LDA.B !_2                                 ;;FEE8|FEE5+FEE5/FEE5\FEE5;
                      BEQ +                                     ;;FEEA|FEE7+FEE7/FEE7\FEE7;
                      TXA                                       ;;FEEC|FEE9+FEE9/FEE9\FEE9;
                      CLC                                       ;;FEED|FEEA+FEEA/FEEA\FEEA;
                      ADC.B #$30                                ;;FEEE|FEEB+FEEB/FEEB\FEEB;
                      TAX                                       ;;FEF0|FEED+FEED/FEED\FEED;
                    + LDA.W !BrSwingPlatXPos                    ;;FEF1|FEEE+FEEE/FEEE\FEEE;
                      SEC                                       ;;FEF4|FEF1+FEF1/FEF1\FEF1;
                      SBC.B #$08                                ;;FEF5|FEF2+FEF2/FEF2\FEF2;
                      CLC                                       ;;FEF7|FEF4+FEF4/FEF4\FEF4;
                      ADC.W DATA_01FDF3,X                       ;;FEF8|FEF5+FEF5/FEF5\FEF5;
                      STA.W !OAMTileXPos+$100,Y                 ;;FEFB|FEF8+FEF8/FEF8\FEF8;
                      PLX                                       ;;FEFE|FEFB+FEFB/FEFB\FEFB;
                      LDA.W !BrSwingPlatYPos                    ;;FEFF|FEFC+FEFC/FEFC\FEFC;
                      CLC                                       ;;FF02|FEFF+FEFF/FEFF\FEFF;
                      ADC.B #$60                                ;;FF03|FF00+FF00/FF00\FF00;
                      CLC                                       ;;FF05|FF02+FF02/FF02\FF02;
                      ADC.W DATA_01FE53,X                       ;;FF06|FF03+FF03/FF03\FF03;
                      STA.W !OAMTileYPos+$100,Y                 ;;FF09|FF06+FF06/FF06\FF06;
                      LDA.W DATA_01FE83,X                       ;;FF0C|FF09+FF09/FF09\FF09;
                      STA.W !OAMTileNo+$100,Y                   ;;FF0F|FF0C+FF0C/FF0C\FF0C;
                      PHX                                       ;;FF12|FF0F+FF0F/FF0F\FF0F;
                      LDX.B !_5                                 ;;FF13|FF10+FF10/FF10\FF10;
                      CPX.B #$03                                ;;FF15|FF12+FF12/FF12\FF12;
                      BNE +                                     ;;FF17|FF14+FF14/FF14\FF14;
                      CMP.B #$05                                ;;FF19|FF16+FF16/FF16\FF16;
                      BCS +                                     ;;FF1B|FF18+FF18/FF18\FF18;
                      LSR A                                     ;;FF1D|FF1A+FF1A/FF1A\FF1A;
                      TAX                                       ;;FF1E|FF1B+FF1B/FF1B\FF1B;
                      LDA.W DATA_01FEB3,X                       ;;FF1F|FF1C+FF1C/FF1C\FF1C;
                      STA.W !OAMTileNo+$100,Y                   ;;FF22|FF1F+FF1F/FF1F\FF1F;
                    + LDA.W !OAMTileNo+$100,Y                   ;;FF25|FF22+FF22/FF22\FF22;
                      CMP.B #$4A                                ;;FF28|FF25+FF25/FF25\FF25;
                      LDA.B !_D                                 ;;FF2A|FF27+FF27/FF27\FF27;
                      BCC +                                     ;;FF2C|FF29+FF29/FF29\FF29;
                      LDA.B #$35                                ;;FF2E|FF2B+FF2B/FF2B\FF2B;  Iggy ball palette 
                    + ORA.B !_2                                 ;;FF30|FF2D+FF2D/FF2D\FF2D;
                      STA.W !OAMTileAttr+$100,Y                 ;;FF32|FF2F+FF2F/FF2F\FF2F;
                      PLA                                       ;;FF35|FF32+FF32/FF32\FF32;
                      AND.B #$03                                ;;FF36|FF33+FF33/FF33\FF33;
                      TAX                                       ;;FF38|FF35+FF35/FF35\FF35;
                      PHY                                       ;;FF39|FF36+FF36/FF36\FF36;
                      TYA                                       ;;FF3A|FF37+FF37/FF37\FF37;
                      LSR A                                     ;;FF3B|FF38+FF38/FF38\FF38;
                      LSR A                                     ;;FF3C|FF39+FF39/FF39\FF39;
                      TAY                                       ;;FF3D|FF3A+FF3A/FF3A\FF3A;
                      LDA.W DATA_01FEB6,X                       ;;FF3E|FF3B+FF3B/FF3B\FF3B;
                      STA.W !OAMTileSize+$40,Y                  ;;FF41|FF3E+FF3E/FF3E\FF3E;
                      PLY                                       ;;FF44|FF41+FF41/FF41\FF41;
                      INY                                       ;;FF45|FF42+FF42/FF42\FF42;
                      INY                                       ;;FF46|FF43+FF43/FF43\FF43;
                      INY                                       ;;FF47|FF44+FF44/FF44\FF44;
                      INY                                       ;;FF48|FF45+FF45/FF45\FF45;
                      PLX                                       ;;FF49|FF46+FF46/FF46\FF46;
                      DEX                                       ;;FF4A|FF47+FF47/FF47\FF47;
                      BPL CODE_01FEDE                           ;;FF4B|FF48+FF48/FF48\FF48;
                      PLX                                       ;;FF4D|FF4A+FF4A/FF4A\FF4A;
                      LDY.B #$FF                                ;;FF4E|FF4B+FF4B/FF4B\FF4B;
                      LDA.B #$03                                ;;FF50|FF4D+FF4D/FF4D\FF4D;
                      JSR FinishOAMWriteRt                      ;;FF52|FF4F+FF4F/FF4F\FF4F;
                      RTS                                       ;;FF55|FF52+FF52/FF52\FF52; Return 
                                                                ;;                        ;
                                                                ;;                        ;
DATA_01FF53:          db $2C,$2E,$2C,$2E                        ;;FF56|FF53+FF53/FF53\FF53;
                                                                ;;                        ;
DATA_01FF57:          db $00,$00,$40,$00                        ;;FF5A|FF57+FF57/FF57\FF57;
                                                                ;;                        ;
CODE_01FF5B:          PHX                                       ;;FF5E|FF5B+FF5B/FF5B\FF5B;
                      LDY.B !SpriteTableC2,X                    ;;FF5F|FF5C+FF5C/FF5C\FF5C;
                      LDA.W DATA_01FEB7,Y                       ;;FF61|FF5E+FF5E/FF5E\FF5E;
                      STA.B !_D                                 ;;FF64|FF61+FF61/FF61\FF61;
                      LDY.B #$70                                ;;FF66|FF63+FF63/FF63\FF63;
                      LDA.W !BrSwingPlatXPos                    ;;FF68|FF65+FF65/FF65\FF65;
                      SEC                                       ;;FF6B|FF68+FF68/FF68\FF68;
                      SBC.B #$08                                ;;FF6C|FF69+FF69/FF69\FF69;
                      STA.W !OAMTileXPos+$100,Y                 ;;FF6E|FF6B+FF6B/FF6B\FF6B;
                      LDA.W !BrSwingPlatYPos                    ;;FF71|FF6E+FF6E/FF6E\FF6E;
                      CLC                                       ;;FF74|FF71+FF71/FF71\FF71;
                      ADC.B #$60                                ;;FF75|FF72+FF72/FF72\FF72;
                      STA.W !OAMTileYPos+$100,Y                 ;;FF77|FF74+FF74/FF74\FF74;
                      LDA.B !EffFrame                           ;;FF7A|FF77+FF77/FF77\FF77;
                      LSR A                                     ;;FF7C|FF79+FF79/FF79\FF79;
                      AND.B #$03                                ;;FF7D|FF7A+FF7A/FF7A\FF7A;
                      TAX                                       ;;FF7F|FF7C+FF7C/FF7C\FF7C;
                      LDA.W DATA_01FF53,X                       ;;FF80|FF7D+FF7D/FF7D\FF7D;
                      STA.W !OAMTileNo+$100,Y                   ;;FF83|FF80+FF80/FF80\FF80;
                      LDA.B #$30                                ;;FF86|FF83+FF83/FF83\FF83;
                      ORA.W DATA_01FF57,X                       ;;FF88|FF85+FF85/FF85\FF85;
                      ORA.B !_D                                 ;;FF8B|FF88+FF88/FF88\FF88;
                      STA.W !OAMTileAttr+$100,Y                 ;;FF8D|FF8A+FF8A/FF8A\FF8A;
                      TYA                                       ;;FF90|FF8D+FF8D/FF8D\FF8D;
                      LSR A                                     ;;FF91|FF8E+FF8E/FF8E\FF8E;
                      LSR A                                     ;;FF92|FF8F+FF8F/FF8F\FF8F;
                      TAY                                       ;;FF93|FF90+FF90/FF90\FF90;
                      LDA.B #$02                                ;;FF94|FF91+FF91/FF91\FF91;
                      STA.W !OAMTileSize+$40,Y                  ;;FF96|FF93+FF93/FF93\FF93;
                      PLX                                       ;;FF99|FF96+FF96/FF96\FF96;
                      RTS                                       ;;FF9A|FF97+FF97/FF97\FF97; Return 
                                                                ;;                        ;
CODE_01FF98:          LDA.B !SpriteXPosLow,X                    ;;FF9B|FF98+FF98/FF98\FF98; \ $14B4,$14B5 = Sprite X position + #$08 
                      CLC                                       ;;FF9D|FF9A+FF9A/FF9A\FF9A;  | 
                      ADC.B #$08                                ;;FF9E|FF9B+FF9B/FF9B\FF9B;  | 
                      STA.W !BrSwingXDist                       ;;FFA0|FF9D+FF9D/FF9D\FF9D;  | 
                      LDA.W !SpriteYPosHigh,X                   ;;FFA3|FFA0+FFA0/FFA0\FFA0;  | 
                      ADC.B #$00                                ;;FFA6|FFA3+FFA3/FFA3\FFA3;  | 
                      STA.W !BrSwingXDist+1                     ;;FFA8|FFA5+FFA5/FFA5\FFA5; / 
                      LDA.B !SpriteYPosLow,X                    ;;FFAB|FFA8+FFA8/FFA8\FFA8; \ $14B6,$14B7 = Sprite Y position + #$0F 
                      CLC                                       ;;FFAD|FFAA+FFAA/FFAA\FFAA;  | 
                      ADC.B #$0F                                ;;FFAE|FFAB+FFAB/FFAB\FFAB;  | 
                      STA.W !BrSwingYDist                       ;;FFB0|FFAD+FFAD/FFAD\FFAD;  | 
                      LDA.W !SpriteXPosHigh,X                   ;;FFB3|FFB0+FFB0/FFB0\FFB0;  | 
                      ADC.B #$00                                ;;FFB6|FFB3+FFB3/FFB3\FFB3;  | 
                      STA.W !BrSwingYDist+1                     ;;FFB8|FFB5+FFB5/FFB5\FFB5; / 
                      PHX                                       ;;FFBB|FFB8+FFB8/FFB8\FFB8;
                      JSL CODE_01CC9D                           ;;FFBC|FFB9+FFB9/FFB9\FFB9;
                      PLX                                       ;;FFC0|FFBD+FFBD/FFBD\FFBD;
                      RTS                                       ;;FFC1|FFBE+FFBE/FFBE\FFBE; Return 
                                                                ;;                        ;
                      padbyte $FF : pad $028000                 ;;FFC2|FFBF+FFBF/FFBF\FFBF;
