                      ORG $008000                               ;;  J |  U + SS / E0 \ E1 ;
                                                                ;;                        ;
I_RESET:              SEI                                       ;;8000|8000+8000/8000\8000; Disable interrupts 
                      STZ.W !HW_NMITIMEN                        ;;8001|8001+8001/8001\8001; Clear NMI and V/H Count, disable joypad ; NMI, V/H Count, and Joypad Enable
                      STZ.W !HW_HDMAEN                          ;;8004|8004+8004/8004\8004; Disable HDMA ; H-DMA Channel Enable
                      STZ.W !HW_MDMAEN                          ;;8007|8007+8007/8007\8007; Disable DMA ; Regular DMA Channel Enable
                      STZ.W !HW_APUIO0                          ;;800A|800A+800A/800A\800A; \ ; APU I/O Port
                      STZ.W !HW_APUIO1                          ;;800D|800D+800D/800D\800D;  |Clear APU I/O ports 1-4 ; APU I/O Port
                      STZ.W !HW_APUIO2                          ;;8010|8010+8010/8010\8010;  | ; APU I/O Port
                      STZ.W !HW_APUIO3                          ;;8013|8013+8013/8013\8013; / ; APU I/O Port
                      LDA.B #$80                                ;;8016|8016+8016/8016\8016; \ Turn off screen 
                      STA.W !HW_INIDISP                         ;;8018|8018+8018/8018\8018; / ; Screen Display Register
                      CLC                                       ;;801B|801B+801B/801B\801B; \ Turn off emulation mode 
                      XCE                                       ;;801C|801C+801C/801C\801C; /  
                      REP #$38                                  ;;801D|801D+801D/801D\801D; 16 bit A,X,Y, Decimal mode off ; Index (16 bit) Accum (16 bit) 
                      LDA.W #$0000                              ;;801F|801F+801F/801F\801F; \ Set direct page 
                      TCD                                       ;;8022|8022+8022/8022\8022; /  
                      LDA.W #$01FF                              ;;8023|8023+8023/8023\8023; \ Set stack location 
                      TCS                                       ;;8026|8026+8026/8026\8026; /  
                      LDA.W #$F0A9                              ;;8027|8027+8027/8027\8027; \  
                      STA.L !OAMResetRoutine                    ;;802A|802A+802A/802A\802A;  | 
                      LDX.W #$017D                              ;;802E|802E+802E/802E\802E;  | 
                      LDY.W #$03FD                              ;;8031|8031+8031/8031\8031;  | 
                    - LDA.W #$008D                              ;;8034|8034+8034/8034\8034;  | 
                      STA.L !OAMResetRoutine+2,X                ;;8037|8037+8037/8037\8037;  | 
                      TYA                                       ;;803B|803B+803B/803B\803B;  | 
                      STA.L !OAMResetRoutine+3,X                ;;803C|803C+803C/803C\803C;  |Create routine in RAM 
                      SEC                                       ;;8040|8040+8040/8040\8040;  | 
                      SBC.W #$0004                              ;;8041|8041+8041/8041\8041;  | 
                      TAY                                       ;;8044|8044+8044/8044\8044;  | 
                      DEX                                       ;;8045|8045+8045/8045\8045;  | 
                      DEX                                       ;;8046|8046+8046/8046\8046;  | 
                      DEX                                       ;;8047|8047+8047/8047\8047;  | 
                      BPL -                                     ;;8048|8048+8048/8048\8048;  | 
                      SEP #$30                                  ;;804A|804A+804A/804A\804A;  | ; Index (8 bit) Accum (8 bit) 
                      LDA.B #$6B                                ;;804C|804C+804C/804C\804C;  | 
                      STA.L !OAMResetRoutine+$182               ;;804E|804E+804E/804E\804E; / 
                      JSR UploadSPCEngine                       ;;8052|8052+8052/8052\8052; SPC700 Bank 02 + Main code upload handler 
                      STZ.W !GameMode                           ;;8055|8055+8055/8055\8055; Set game mode to 0 
                      STZ.W !OverworldOverride                  ;;8058|8058+8058/8058\8058; Set secondary game mode to 0 
                      JSR ClearStack                            ;;805B|805B+805B/805B\805B;
                      JSR UploadSamples                         ;;805E|805E+805E/805E\805E;
                      JSR CODE_009250                           ;;8061|8061+8061/8061\8061;
                      LDA.B #$03                                ;;8064|8064+8064/8064\8064; \ Set OAM Size and Data Area Designation to x03 
                      STA.W !HW_OBJSEL                          ;;8066|8066+8066/8066\8066; /  ; OAM Size and Data Area Designation
                      INC.B !LagFlag                            ;;8069|8069+8069/8069\8069; Skip the following loop 
                    - LDA.B !LagFlag                            ;;806B|806B+806B/806B\806B;  |Loop until the interrupt routine sets $10 
                      BEQ -                                     ;;806D|806D+806D/806D\806D; / to a non-zero value. 
                      CLI                                       ;;806F|806F+806F/806F\806F; Enable interrupts 
                      INC.B !TrueFrame                          ;;8070|8070+8070/8070\8070; Increase frame number 
                      JSR GetGameMode                           ;;8072|8072+8072/8072\8072; The actual game 
                      STZ.B !LagFlag                            ;;8075|8075+8075/8075\8075; \ Wait for interrupt 
                      BRA -                                     ;;8077|8077+8077/8077\8077; /  
                                                                ;;                        ;
SPC700UploadLoop:     PHP                                       ;;8079|8079+8079/8079\8079;
                      REP #$30                                  ;;807A|807A+807A/807A\807A; Index (16 bit) Accum (16 bit) 
                      LDY.W #$0000                              ;;807C|807C+807C/807C\807C;
                      LDA.W #$BBAA                              ;;807F|807F+807F/807F\807F;
                    - CMP.W !HW_APUIO0                          ;;8082|8082+8082/8082\8082; APU I/O Port
                      BNE -                                     ;;8085|8085+8085/8085\8085;
                      SEP #$20                                  ;;8087|8087+8087/8087\8087; Accum (8 bit) 
                      LDA.B #$CC                                ;;8089|8089+8089/8089\8089; Load byte to start transfer 
                      BRA CODE_0080B3                           ;;808B|808B+808B/808B\808B;
                                                                ;;                        ;
CODE_00808D:          LDA.B [!_0],Y                             ;;808D|808D+808D/808D\808D;
                      INY                                       ;;808F|808F+808F/808F\808F;
                      XBA                                       ;;8090|8090+8090/8090\8090;
                      LDA.B #$00                                ;;8091|8091+8091/8091\8091;
                      BRA CODE_0080A0                           ;;8093|8093+8093/8093\8093;
                                                                ;;                        ;
CODE_008095:          XBA                                       ;;8095|8095+8095/8095\8095;
                      LDA.B [!_0],Y                             ;;8096|8096+8096/8096\8096;
                      INY                                       ;;8098|8098+8098/8098\8098;
                      XBA                                       ;;8099|8099+8099/8099\8099;
                    - CMP.W !HW_APUIO0                          ;;809A|809A+809A/809A\809A; APU I/O Port
                      BNE -                                     ;;809D|809D+809D/809D\809D;
                      INC A                                     ;;809F|809F+809F/809F\809F;
CODE_0080A0:          REP #$20                                  ;;80A0|80A0+80A0/80A0\80A0; Accum (16 bit) 
                      STA.W !HW_APUIO0                          ;;80A2|80A2+80A2/80A2\80A2; APU I/O Port
                      SEP #$20                                  ;;80A5|80A5+80A5/80A5\80A5; Accum (8 bit) 
                      DEX                                       ;;80A7|80A7+80A7/80A7\80A7;
                      BNE CODE_008095                           ;;80A8|80A8+80A8/80A8\80A8;
                    - CMP.W !HW_APUIO0                          ;;80AA|80AA+80AA/80AA\80AA; APU I/O Port
                      BNE -                                     ;;80AD|80AD+80AD/80AD\80AD;
                    - ADC.B #$03                                ;;80AF|80AF+80AF/80AF\80AF;
                      BEQ -                                     ;;80B1|80B1+80B1/80B1\80B1;
CODE_0080B3:          PHA                                       ;;80B3|80B3+80B3/80B3\80B3;
                      REP #$20                                  ;;80B4|80B4+80B4/80B4\80B4; Accum (16 bit) 
                      LDA.B [!_0],Y                             ;;80B6|80B6+80B6/80B6\80B6;
                      INY                                       ;;80B8|80B8+80B8/80B8\80B8;
                      INY                                       ;;80B9|80B9+80B9/80B9\80B9;
                      TAX                                       ;;80BA|80BA+80BA/80BA\80BA;
                      LDA.B [!_0],Y                             ;;80BB|80BB+80BB/80BB\80BB;
                      INY                                       ;;80BD|80BD+80BD/80BD\80BD;
                      INY                                       ;;80BE|80BE+80BE/80BE\80BE;
                      STA.W !HW_APUIO2                          ;;80BF|80BF+80BF/80BF\80BF; APU I/O Port
                      SEP #$20                                  ;;80C2|80C2+80C2/80C2\80C2; Accum (8 bit) 
                      CPX.W #$0001                              ;;80C4|80C4+80C4/80C4\80C4;
                      LDA.B #$00                                ;;80C7|80C7+80C7/80C7\80C7;
                      ROL A                                     ;;80C9|80C9+80C9/80C9\80C9;
                      STA.W !HW_APUIO1                          ;;80CA|80CA+80CA/80CA\80CA; APU I/O Port
                      ADC.B #$7F                                ;;80CD|80CD+80CD/80CD\80CD;
                      PLA                                       ;;80CF|80CF+80CF/80CF\80CF;
                      STA.W !HW_APUIO0                          ;;80D0|80D0+80D0/80D0\80D0; APU I/O Port
                    - CMP.W !HW_APUIO0                          ;;80D3|80D3+80D3/80D3\80D3; APU I/O Port
                      BNE -                                     ;;80D6|80D6+80D6/80D6\80D6;
                      BVS CODE_00808D                           ;;80D8|80D8+80D8/80D8\80D8;
                      STZ.W !HW_APUIO0                          ;;80DA|80DA+80DA/80DA\80DA; APU I/O Port
                      STZ.W !HW_APUIO1                          ;;80DD|80DD+80DD/80DD\80DD; APU I/O Port
                      STZ.W !HW_APUIO2                          ;;80E0|80E0+80E0/80E0\80E0; APU I/O Port
                      STZ.W !HW_APUIO3                          ;;80E3|80E3+80E3/80E3\80E3; APU I/O Port
                      PLP                                       ;;80E6|80E6+80E6/80E6\80E6;
                      RTS                                       ;;80E7|80E7+80E7/80E7\80E7;
                                                                ;;                        ;
UploadSPCEngine:      LDA.B #SPC700Engine                       ;;80E8|80E8+80E8/80E8\80E8; \ this address (0E:8000) is the start of the SPC engine
                      %BorW(STA, !_0)                           ;;80EA|80EA+80EA/80EA\80EA;  | instrument settings/sound effect data 
                      LDA.B #SPC700Engine>>8                    ;;80EC|80ED+80ED/80ED\80ED;  | AND the code used for all music banks. 
                      %BorW(STA, !_1)                           ;;80EE|80EF+80EF/80EF\80EF;  | 
                      LDA.B #SPC700Engine>>16                   ;;80F0|80F2+80F2/80F2\80F2;  | 
                      %BorW(STA, !_2)                           ;;80F2|80F4+80F4/80F4\80F4; /  
UploadDataToSPC:      SEI                                       ;;80F4|80F7+80F7/80F7\80F7;
                      JSR SPC700UploadLoop                      ;;80F5|80F8+80F8/80F8\80F8;
                      CLI                                       ;;80F8|80FB+80FB/80FB\80FB;
                      RTS                                       ;;80F9|80FC+80FC/80FC\80FC;
                                                                ;;                        ;
UploadSamples:        LDA.B #MusicSamples                       ;;80FA|80FD+80FD/80FD\80FD; \    Index (8 bit) ; Index (8 bit) 
                      %BorW(STA, !_0)                           ;;80FC|80FF+80FF/80FF\80FF;  | 
                      LDA.B #MusicSamples>>8                    ;;80FE|8102+8102/8102\8102;  |Loads The Address 0F:8000 to 00-02 (SAMPLE DATA + PTRS)
                      %BorW(STA, !_1)                           ;;8100|8104+8104/8104\8104;  |[SPC Sample Pointers/Data ROM Address, this is] 
                      LDA.B #MusicSamples>>16                   ;;8102|8107+8107/8107\8107;  | 
                      %BorW(STA, !_2)                           ;;8104|8109+8109/8109\8109; /  
                      BRA StrtSPCMscUpld                        ;;8106|810C+810C/810C\810C;
                                                                ;;                        ;
UploadMusicBank1:     LDA.B #MusicBank1                         ;;8108|810E+810E/810E\810E; \ 
                      %BorW(STA, !_0)                           ;;810A|8110+8110/8110\8110;  | 
                      LDA.B #MusicBank1>>8                      ;;810C|8113+8113/8113\8113;  |Loads the Bank 1 music data (Map) to 00-02 
                      %BorW(STA, !_1)                           ;;810E|8115+8115/8115\8115;  | ($0E:98B1) 
                      LDA.B #MusicBank1>>16                     ;;8110|8118+8118/8118\8118;  | 
                      %BorW(STA, !_2)                           ;;8112|811A+811A/811A\811A; /  
StrtSPCMscUpld:       LDA.B #$FF                                ;;8114|811D+811D/811D\811D;
                      STA.W !HW_APUIO1                          ;;8116|811F+811F/811F\811F; APU I/O Port
                      JSR UploadDataToSPC                       ;;8119|8122+8122/8122\8122;
                      LDX.B #$03                                ;;811C|8125+8125/8125\8125;
                    - STZ.W !HW_APUIO0,X                        ;;811E|8127+8127/8127\8127;
                      STZ.W !SPCIO0,X                           ;;8121|812A+812A/812A\812A;
                      STZ.W !Empty1DFD,X                        ;;8124|812D+812D/812D\812D;
                      DEX                                       ;;8127|8130+8130/8130\8130;
                      BPL -                                     ;;8128|8131+8131/8131\8131;
Return008133:         RTS                                       ;;812A|8133+8133/8133\8133;
                                                                ;;                        ;
CODE_008134:          LDA.W !BonusGameActivate                  ;;812B|8134+8134/8134\8134;
                      BNE UploadMusicBank2                      ;;812E|8137+8137/8137\8137;
                      LDA.W !OverworldOverride                  ;;8130|8139+8139/8139\8139;
                      CMP.B #$E9                                ;;8133|813C+813C/813C\813C;
                      BEQ UploadMusicBank2                      ;;8135|813E+813E/813E\813E;
                      ORA.W !SublevelCount                      ;;8137|8140+8140/8140\8140;
                      ORA.W !ShowMarioStart                     ;;813A|8143+8143/8143\8143;
                      BNE Return008133                          ;;813D|8146+8146/8146\8146;
UploadMusicBank2:     LDA.B #MusicBank2                         ;;813F|8148+8148/8148\8148; \ 
                      %BorW(STA, !_0)                           ;;8141|814A+814A/814A\814A;  |Loads the Bank 2 music address(Levels) 
                      LDA.B #MusicBank2>>8                      ;;8143|814D+814D/814D\814D;  | (0E:AED6) 
                      %BorW(STA, !_1)                           ;;8145|814F+814F/814F\814F;  | 
                      LDA.B #MusicBank2>>16                     ;;8147|8152+8152/8152\8152;  | 
                      %BorW(STA, !_2)                           ;;8149|8154+8154/8154\8154; / 
                      BRA StrtSPCMscUpld                        ;;814B|8157+8157/8157\8157;
                                                                ;;                        ;
UploadMusicBank3:     LDA.B #MusicBank3                         ;;814D|8159+8159/8159\8159; \ 
                      %BorW(STA, !_0)                           ;;814F|815B+815B/815B\815B;  |Bank 3 music(Ending) ROM address 
                      LDA.B #MusicBank3>>8                      ;;8151|815E+815E/815E\815E;  | 
                      %BorW(STA, !_1)                           ;;8153|8160+8160/8160\8160;  | ($03:E400) 
                      LDA.B #MusicBank3>>16                     ;;8155|8163+8163/8163\8163;  | 
                      %BorW(STA, !_2)                           ;;8157|8165+8165/8165\8165; / 
                      BRA StrtSPCMscUpld                        ;;8159|8168+8168/8168\8168;
                                                                ;;                        ;
                                                                ;;                        ;
I_NMI:                SEI                                       ;;815B|816A+816A/816A\816A; Looks like this might be the NMI routine here. That is correct. 
                      PHP                                       ;;815C|816B+816B/816B\816B; I thought it was, just from the address, but I wasn't too sure. 
                      REP #$30                                  ;;815D|816C+816C/816C\816C; Index (16 bit) Accum (16 bit) 
                      PHA                                       ;;815F|816E+816E/816E\816E;
                      PHX                                       ;;8160|816F+816F/816F\816F;
                      PHY                                       ;;8161|8170+8170/8170\8170;
                      PHB                                       ;;8162|8171+8171/8171\8171;
                      PHK                                       ;;8163|8172+8172/8172\8172;
                      PLB                                       ;;8164|8173+8173/8173\8173;
                      SEP #$30                                  ;;8165|8174+8174/8174\8174; 8 bit A,X,Y ; Index (8 bit) Accum (8 bit) 
                      LDA.W !HW_RDNMI                           ;;8167|8176+8176/8176\8176; Load "NMI Enable."  This has the effect of clearing the Interrupt, so that ; NMI Enable
                      LDA.W !SPCIO2                             ;;816A|8179+8179/8179\8179; \  
                      BNE CODE_008186                           ;;816D|817C+817C/817C\817C;  | 
                      LDY.W !HW_APUIO2                          ;;816F|817E+817E/817E\817E;  | ; APU I/O Port
                      CPY.W !LastUsedMusic                      ;;8172|8181+8181/8181\8181;  |Update SPC700 I/O port 2 
                      BNE +                                     ;;8175|8184+8184/8184\8184;  | 
CODE_008186:          STA.W !HW_APUIO2                          ;;8177|8186+8186/8186\8186;  | ; APU I/O Port
                      STA.W !LastUsedMusic                      ;;817A|8189+8189/8189\8189;  | 
                      STZ.W !SPCIO2                             ;;817D|818C+818C/818C\818C;  | 
                    + LDA.W !SPCIO0                             ;;8180|818F+818F/818F\818F; \  
                      STA.W !HW_APUIO0                          ;;8183|8192+8192/8192\8192;  | ; APU I/O Port
                      LDA.W !SPCIO1                             ;;8186|8195+8195/8195\8195;  | 
                      STA.W !HW_APUIO1                          ;;8189|8198+8198/8198\8198;  |Update SPC700 I/O ports 0, 1 and 3 ; APU I/O Port
                      LDA.W !SPCIO3                             ;;818C|819B+819B/819B\819B;  | 
                      STA.W !HW_APUIO3                          ;;818F|819E+819E/819E\819E;  | ; APU I/O Port
                      STZ.W !SPCIO0                             ;;8192|81A1+81A1/81A1\81A1;  | 
                      STZ.W !SPCIO1                             ;;8195|81A4+81A4/81A4\81A4;  | 
                      STZ.W !SPCIO3                             ;;8198|81A7+81A7/81A7\81A7; /  
                      LDA.B #$80                                ;;819B|81AA+81AA/81AA\81AA; \ Screen off, brightness=0 
                      STA.W !HW_INIDISP                         ;;819D|81AC+81AC/81AC\81AC; / ; Screen Display Register
                      STZ.W !HW_HDMAEN                          ;;81A0|81AF+81AF/81AF\81AF; Zero The HDMA reg ; H-DMA Channel Enable
                      LDA.B !Layer12Window                      ;;81A3|81B2+81B2/81B2\81B2;
                      STA.W !HW_W12SEL                          ;;81A5|81B4+81B4/81B4\81B4; BG 1 and 2 Window Mask Settings
                      LDA.B !Layer34Window                      ;;81A8|81B7+81B7/81B7\81B7;
                      STA.W !HW_W34SEL                          ;;81AA|81B9+81B9/81B9\81B9; BG 3 and 4 Window Mask Settings
                      LDA.B !OBJCWWindow                        ;;81AD|81BC+81BC/81BC\81BC;
                      STA.W !HW_WOBJSEL                         ;;81AF|81BE+81BE/81BE\81BE; OBJ and Color Window Settings
                      LDA.B !ColorAddition                      ;;81B2|81C1+81C1/81C1\81C1;
                      STA.W !HW_CGSWSEL                         ;;81B4|81C3+81C3/81C3\81C3; Initial Settings for Color Addition
                      LDA.W !IRQNMICommand                      ;;81B7|81C6+81C6/81C6\81C6; \  
                      BPL +                                     ;;81BA|81C9+81C9/81C9\81C9;  |If in a "Special level", 
                      JMP CODE_0082C4                           ;;81BC|81CB+81CB/81CB\81CB;  |jump to $82C4 
                                                                ;;                        ;
                    + LDA.B !ColorSettings                      ;;81BF|81CE+81CE/81CE\81CE; \ Get the CGADSUB byte... 
                      AND.B #$FB                                ;;81C1|81D0+81D0/81D0\81D0;  |Get the Add/Subtract Select and Enable part... 
                      STA.W !HW_CGADSUB                         ;;81C3|81D2+81D2/81D2\81D2; / ...and store it to the A/SSaE register... ; Add/Subtract Select and Enable
                      LDA.B #$09                                ;;81C6|81D5+81D5/81D5\81D5; \ 8x8 tiles, Graphics mode 1 
                      STA.W !HW_BGMODE                          ;;81C8|81D7+81D7/81D7\81D7; /  ; BG Mode and Tile Size Setting
                      LDA.B !LagFlag                            ;;81CB|81DA+81DA/81DA\81DA; \ If there isn't any lag, 
                      BEQ CODE_0081E7                           ;;81CD|81DC+81DC/81DC\81DC; / branch to $81E7 
                      LDA.W !IRQNMICommand                      ;;81CF|81DE+81DE/81DE\81DE; \  
                      LSR A                                     ;;81D2|81E1+81E1/81E1\81E1;  |If not on a special level, branch to NMINotSpecialLv 
                      BEQ NMINotSpecialLv                       ;;81D3|81E2+81E2/81E2\81E2; /  
                      JMP CODE_00827A                           ;;81D5|81E4+81E4/81E4\81E4;
                                                                ;;                        ;
CODE_0081E7:          INC.B !LagFlag                            ;;81D8|81E7+81E7/81E7\81E7;
                      JSR CODE_00A488                           ;;81DA|81E9+81E9/81E9\81E9;
                      LDA.W !IRQNMICommand                      ;;81DD|81EC+81EC/81EC\81EC;
                      LSR A                                     ;;81E0|81EF+81EF/81EF\81EF;
                      BNE CODE_008222                           ;;81E1|81F0+81F0/81F0\81F0;
                      BCS +                                     ;;81E3|81F2+81F2/81F2\81F2;
                      JSR DrawStatusBar                         ;;81E5|81F4+81F4/81F4\81F4;
                    + LDA.W !CutsceneID                         ;;81E8|81F7+81F7/81F7\81F7; \  
                      CMP.B #$08                                ;;81EB|81FA+81FA/81FA\81FA;  |If the current cutscene isn't the ending, 
                      BNE CODE_008209                           ;;81ED|81FC+81FC/81FC\81FC; / branch to $8209 
                      LDA.W !CreditsUpdateBG                    ;;81EF|81FE+81FE/81FE\81FE; \  
                      BEQ CODE_00821A                           ;;81F2|8201+8201/8201\8201;  |Related to reloading the palettes when switching 
                      JSL CODE_0C9567                           ;;81F4|8203+8203/8203\8203;  |to another background during the credits. 
                      BRA CODE_00821A                           ;;81F8|8207+8207/8207\8207; /  
                                                                ;;                        ;
CODE_008209:          JSL CODE_0087AD                           ;;81FA|8209+8209/8209\8209;
                      LDA.W !UploadMarioStart                   ;;81FE|820D+820D/820D\820D;
                      BEQ CODE_008217                           ;;8201|8210+8210/8210\8210;
                      JSR CODE_00A7C2                           ;;8203|8212+8212/8212\8212;
                      BRA CODE_00823D                           ;;8206|8215+8215/8215\8215;
                                                                ;;                        ;
CODE_008217:          JSR CODE_00A390                           ;;8208|8217+8217/8217\8217;
CODE_00821A:          JSR CODE_00A436                           ;;820B|821A+821A/821A\821A;
                      JSR MarioGFXDMA                           ;;820E|821D+821D/821D\821D;
                      BRA CODE_00823D                           ;;8211|8220+8220/8220\8220;
                                                                ;;                        ;
CODE_008222:          LDA.W !OverworldProcess                   ;;8213|8222+8222/8222\8222;
                      CMP.B #$0A                                ;;8216|8225+8225/8225\8225;
                      BNE CODE_008237                           ;;8218|8227+8227/8227\8227;
                      LDY.W !OWSubmapSwapProcess                ;;821A|8229+8229/8229\8229;
                      DEY                                       ;;821D|822C+822C/822C\822C;
                      DEY                                       ;;821E|822D+822D/822D\822D;
                      CPY.B #$04                                ;;821F|822E+822E/822E\822E;
                      BCS CODE_008237                           ;;8221|8230+8230/8230\8230;
                      JSR CODE_00A529                           ;;8223|8232+8232/8232\8232;
                      BRA +                                     ;;8226|8235+8235/8235\8235;
                                                                ;;                        ;
CODE_008237:          JSR CODE_00A4E3                           ;;8228|8237+8237/8237\8237;
                      JSR MarioGFXDMA                           ;;822B|823A+823A/823A\823A;
CODE_00823D:          JSR LoadScrnImage                         ;;822E|823D+823D/823D\823D;
                      JSR DoSomeSpriteDMA                       ;;8231|8240+8240/8240\8240;
                    + JSR ControllerUpdate                      ;;8234|8243+8243/8243\8243;
NMINotSpecialLv:      LDA.B !Layer1XPos                         ;;8237|8246+8246/8246\8246; \  
                      STA.W !HW_BG1HOFS                         ;;8239|8248+8248/8248\8248;  |Set BG 1 Horizontal Scroll Offset ; BG 1 Horizontal Scroll Offset
                      LDA.B !Layer1XPos+1                       ;;823C|824B+824B/824B\824B;  |to X position of screen boundry  
                      STA.W !HW_BG1HOFS                         ;;823E|824D+824D/824D\824D; /  ; BG 1 Horizontal Scroll Offset
                      LDA.B !Layer1YPos                         ;;8241|8250+8250/8250\8250; \  
                      CLC                                       ;;8243|8252+8252/8252\8252;  | 
                      ADC.W !ScreenShakeYOffset                 ;;8244|8253+8253/8253\8253;  |Set BG 1 Vertical Scroll Offset 
                      STA.W !HW_BG1VOFS                         ;;8247|8256+8256/8256\8256;  |to Y position of screen boundry + Layer 1 disposition ; BG 1 Vertical Scroll Offset
                      LDA.B !Layer1YPos+1                       ;;824A|8259+8259/8259\8259;  | 
                      ADC.W !ScreenShakeYOffset+1               ;;824C|825B+825B/825B\825B;  | 
                      STA.W !HW_BG1VOFS                         ;;824F|825E+825E/825E\825E; /  ; BG 1 Vertical Scroll Offset
                      LDA.B !Layer2XPos                         ;;8252|8261+8261/8261\8261; \  
                      STA.W !HW_BG2HOFS                         ;;8254|8263+8263/8263\8263;  |Set BG 2 Horizontal Scroll Offset ; BG 2 Horizontal Scroll Offset
                      LDA.B !Layer2XPos+1                       ;;8257|8266+8266/8266\8266;  |to X position of Layer 2 
                      STA.W !HW_BG2HOFS                         ;;8259|8268+8268/8268\8268; /  ; BG 2 Horizontal Scroll Offset
                      LDA.B !Layer2YPos                         ;;825C|826B+826B/826B\826B; \  
                      STA.W !HW_BG2VOFS                         ;;825E|826D+826D/826D\826D;  |Set BG 2 Vertical Scroll Offset ; BG 2 Vertical Scroll Offset
                      LDA.B !Layer2YPos+1                       ;;8261|8270+8270/8270\8270;  |to Y position of Layer 2 
                      STA.W !HW_BG2VOFS                         ;;8263|8272+8272/8272\8272; /  ; BG 2 Vertical Scroll Offset
                      LDA.W !IRQNMICommand                      ;;8266|8275+8275/8275\8275; \ If in a normal (not special) level, branch 
                      BEQ CODE_008292                           ;;8269|8278+8278/8278\8278; /  
CODE_00827A:          LDA.B #$81                                ;;826B|827A+827A/827A\827A;
                      LDY.W !CutsceneID                         ;;826D|827C+827C/827C\827C; \  
                      CPY.B #$08                                ;;8270|827F+827F/827F\827F;  |If not playing ending movie, branch to $82A1 
                      BNE +                                     ;;8272|8281+8281/8281\8281; /  
                      LDY.W !Brightness                         ;;8274|8283+8283/8283\8283; \  
                      STY.W !HW_INIDISP                         ;;8277|8286+8286/8286\8286; / Set brightness to $0DAE ; Screen Display Register
                      LDY.W !HDMAEnable                         ;;827A|8289+8289/8289\8289; \  
                      STY.W !HW_HDMAEN                          ;;827D|828C+828C/828C\828C; / Set HDMA channel enable to $0D9F ; H-DMA Channel Enable
                      JMP IRQNMIEnding                          ;;8280|828F+828F/828F\828F;
                                                                ;;                        ;
CODE_008292:          LDY.B #$24                                ;;8283|8292+8292/8292\8292; \  ; IRQ timer, at which scanline the IRQ will be fired.
CODE_008294:          LDA.W !HW_TIMEUP                          ;;8285|8294+8294/8294\8294;  |(i.e. below the status bar) ; IRQ Flag By H/V Count Timer
                      STY.W !HW_VTIME                           ;;8288|8297+8297/8297\8297;  | ; V-Count Timer (Upper 8 Bits)
                      STZ.W !HW_VTIME+1                         ;;828B|829A+829A/829A\829A; /  ; V-Count Timer MSB (Bit 0)
                      STZ.B !IRQType                            ;;828E|829D+829D/829D\829D;
                      LDA.B #$A1                                ;;8290|829F+829F/829F\829F;
                    + STA.W !HW_NMITIMEN                        ;;8292|82A1+82A1/82A1\82A1; NMI, V/H Count, and Joypad Enable
                      STZ.W !HW_BG3HOFS                         ;;8295|82A4+82A4/82A4\82A4; \  ; BG 3 Horizontal Scroll Offset- Write twice register
                      STZ.W !HW_BG3HOFS                         ;;8298|82A7+82A7/82A7\82A7;  |Set Layer 3 horizontal and vertical ; BG 3 Horizontal Scroll Offset
                      STZ.W !HW_BG3VOFS                         ;;829B|82AA+82AA/82AA\82AA;  |scroll to x00 ; BG 3 Vertical Scroll Offset ; Write twice register
                      STZ.W !HW_BG3VOFS                         ;;829E|82AD+82AD/82AD\82AD; /  ; BG 3 Vertical Scroll Offset
                      LDA.W !Brightness                         ;;82A1|82B0+82B0/82B0\82B0; \  
                      STA.W !HW_INIDISP                         ;;82A4|82B3+82B3/82B3\82B3; / Set brightness to $0DAE ; Screen Display Register
                      LDA.W !HDMAEnable                         ;;82A7|82B6+82B6/82B6\82B6; \  
                      STA.W !HW_HDMAEN                          ;;82AA|82B9+82B9/82B9\82B9; / Set HDMA channel enable to $0D9F ; H-DMA Channel Enable
                      REP #$30                                  ;;82AD|82BC+82BC/82BC\82BC; \ Pull all ; Index (16 bit) Accum (16 bit) 
                      PLB                                       ;;82AF|82BE+82BE/82BE\82BE;  | 
                      PLY                                       ;;82B0|82BF+82BF/82BF\82BF;  | 
                      PLX                                       ;;82B1|82C0+82C0/82C0\82C0;  | 
                      PLA                                       ;;82B2|82C1+82C1/82C1\82C1;  | 
                      PLP                                       ;;82B3|82C2+82C2/82C2\82C2; /  
I_EMPTY:              RTI                                       ;;82B4|82C3+82C3/82C3\82C3; And return 
                                                                ;;                        ;
CODE_0082C4:          LDA.B !LagFlag                            ;;82B5|82C4+82C4/82C4\82C4; \ If there is lag, ; Index (8 bit) Accum (8 bit) 
                      BNE CODE_0082F7                           ;;82B7|82C6+82C6/82C6\82C6; / branch to $82F7 
                      INC.B !LagFlag                            ;;82B9|82C8+82C8/82C8\82C8;
                      LDA.W !UploadMarioStart                   ;;82BB|82CA+82CA/82CA\82CA; \ If Mario Start! graphics shouldn't be loaded, 
                      BEQ CODE_0082D4                           ;;82BE|82CD+82CD/82CD\82CD; / branch to $82D4 
                      JSR CODE_00A7C2                           ;;82C0|82CF+82CF/82CF\82CF;
                      BRA CODE_0082E8                           ;;82C3|82D2+82D2/82D2\82D2;
                                                                ;;                        ;
CODE_0082D4:          JSR CODE_00A436                           ;;82C5|82D4+82D4/82D4\82D4;
                      JSR MarioGFXDMA                           ;;82C8|82D7+82D7/82D7\82D7;
                      BIT.W !IRQNMICommand                      ;;82CB|82DA+82DA/82DA\82DA;
                      BVC CODE_0082E8                           ;;82CE|82DD+82DD/82DD\82DD;
                      JSR CODE_0098A9                           ;;82D0|82DF+82DF/82DF\82DF;
                      LDA.W !IRQNMICommand                      ;;82D3|82E2+82E2/82E2\82E2;
                      LSR A                                     ;;82D6|82E5+82E5/82E5\82E5;
                      BCS +                                     ;;82D7|82E6+82E6/82E6\82E6;
CODE_0082E8:          JSR DrawStatusBar                         ;;82D9|82E8+82E8/82E8\82E8;
                    + JSR CODE_00A488                           ;;82DC|82EB+82EB/82EB\82EB;
                      JSR LoadScrnImage                         ;;82DF|82EE+82EE/82EE\82EE;
                      JSR DoSomeSpriteDMA                       ;;82E2|82F1+82F1/82F1\82F1;
                      JSR ControllerUpdate                      ;;82E5|82F4+82F4/82F4\82F4;
CODE_0082F7:          LDA.B #$09                                ;;82E8|82F7+82F7/82F7\82F7;
                      STA.W !HW_BGMODE                          ;;82EA|82F9+82F9/82F9\82F9; BG Mode and Tile Size Setting
                      LDA.B !Mode7CenterX                       ;;82ED|82FC+82FC/82FC\82FC;
                      CLC                                       ;;82EF|82FE+82FE/82FE\82FE;
                      ADC.B #$80                                ;;82F0|82FF+82FF/82FF\82FF;
                      STA.W !HW_M7X                             ;;82F2|8301+8301/8301\8301; Mode 7 Center Position X
                      LDA.B !Mode7CenterX+1                     ;;82F5|8304+8304/8304\8304;
                      ADC.B #$00                                ;;82F7|8306+8306/8306\8306;
                      STA.W !HW_M7X                             ;;82F9|8308+8308/8308\8308; Mode 7 Center Position X
                      LDA.B !Mode7CenterY                       ;;82FC|830B+830B/830B\830B;
                      CLC                                       ;;82FE|830D+830D/830D\830D;
                      ADC.B #$80                                ;;82FF|830E+830E/830E\830E;
                      STA.W !HW_M7Y                             ;;8301|8310+8310/8310\8310; Mode 7 Center Position Y
                      LDA.B !Mode7CenterY+1                     ;;8304|8313+8313/8313\8313;
                      ADC.B #$00                                ;;8306|8315+8315/8315\8315;
                      STA.W !HW_M7Y                             ;;8308|8317+8317/8317\8317; Mode 7 Center Position Y
                      LDA.B !Mode7ParamA                        ;;830B|831A+831A/831A\831A;
                      STA.W !HW_M7A                             ;;830D|831C+831C/831C\831C; Mode 7 Matrix Parameter A
                      LDA.B !Mode7ParamA+1                      ;;8310|831F+831F/831F\831F;
                      STA.W !HW_M7A                             ;;8312|8321+8321/8321\8321; Mode 7 Matrix Parameter A
                      LDA.B !Mode7ParamB                        ;;8315|8324+8324/8324\8324;
                      STA.W !HW_M7B                             ;;8317|8326+8326/8326\8326; Mode 7 Matrix Parameter B
                      LDA.B !Mode7ParamB+1                      ;;831A|8329+8329/8329\8329;
                      STA.W !HW_M7B                             ;;831C|832B+832B/832B\832B; Mode 7 Matrix Parameter B
                      LDA.B !Mode7ParamC                        ;;831F|832E+832E/832E\832E;
                      STA.W !HW_M7C                             ;;8321|8330+8330/8330\8330; Mode 7 Matrix Parameter C
                      LDA.B !Mode7ParamC+1                      ;;8324|8333+8333/8333\8333;
                      STA.W !HW_M7C                             ;;8326|8335+8335/8335\8335; Mode 7 Matrix Parameter C
                      LDA.B !Mode7ParamD                        ;;8329|8338+8338/8338\8338;
                      STA.W !HW_M7D                             ;;832B|833A+833A/833A\833A; Mode 7 Matrix Parameter D
                      LDA.B !Mode7ParamD+1                      ;;832E|833D+833D/833D\833D;
                      STA.W !HW_M7D                             ;;8330|833F+833F/833F\833F; Mode 7 Matrix Parameter D
                      JSR SETL1SCROLL                           ;;8333|8342+8342/8342\8342;
                      LDA.W !IRQNMICommand                      ;;8336|8345+8345/8345\8345;
                      LSR A                                     ;;8339|8348+8348/8348\8348;
                      BCC +                                     ;;833A|8349+8349/8349\8349;
                      LDA.W !Brightness                         ;;833C|834B+834B/834B\834B;
                      STA.W !HW_INIDISP                         ;;833F|834E+834E/834E\834E; Screen Display Register
                      LDA.W !HDMAEnable                         ;;8342|8351+8351/8351\8351;
                      STA.W !HW_HDMAEN                          ;;8345|8354+8354/8354\8354; H-DMA Channel Enable
                      LDA.B #$81                                ;;8348|8357+8357/8357\8357;
                      JMP CODE_0083F3                           ;;834A|8359+8359/8359\8359;
                                                                ;;                        ;
                    + LDY.B #$24                                ;;834D|835C+835C/835C\835C;
                      BIT.W !IRQNMICommand                      ;;834F|835E+835E/835E\835E;
                      BVC +                                     ;;8352|8361+8361/8361\8361;
                      LDA.W !ActiveBoss                         ;;8354|8363+8363/8363\8363;
                      ASL A                                     ;;8357|8366+8366/8366\8366;
                      TAX                                       ;;8358|8367+8367/8367\8367;
                      LDA.W DATA_00F8E8,X                       ;;8359|8368+8368/8368\8368;
                      CMP.B #$2A                                ;;835C|836B+836B/836B\836B;
                      BNE +                                     ;;835E|836D+836D/836D\836D;
                      LDY.B #$2D                                ;;8360|836F+836F/836F\836F;
                    + JMP CODE_008294                           ;;8362|8371+8371/8371\8371;
                                                                ;;                        ;
I_IRQ:                SEI                                       ;;8365|8374+8374/8374\8374; Set Interrupt flag so routine can start 
                      PHP                                       ;;8366|8375+8375/8375\8375; \ Save A/X/Y/P/B 
                      REP #$30                                  ;;8367|8376+8376/8376\8376;  |P = Processor Flags, B = bank number for all $xxxx operations ; Index (16 bit) Accum (16 bit) 
                      PHA                                       ;;8369|8378+8378/8378\8378;  |Set B to 0$0 
                      PHX                                       ;;836A|8379+8379/8379\8379;  | 
                      PHY                                       ;;836B|837A+837A/837A\837A;  | 
                      PHB                                       ;;836C|837B+837B/837B\837B;  | 
                      PHK                                       ;;836D|837C+837C/837C\837C;  | 
                      PLB                                       ;;836E|837D+837D/837D\837D; /  
                      SEP #$30                                  ;;836F|837E+837E/837E\837E; Index (8 bit) Accum (8 bit) 
                      LDA.W !HW_TIMEUP                          ;;8371|8380+8380/8380\8380; Read the IRQ register, 'unapply' the interrupt ; IRQ Flag By H/V Count Timer
                      BPL CODE_0083B2                           ;;8374|8383+8383/8383\8383; If "Timer IRQ" is clear, skip the next code block 
                      LDA.B #$81                                ;;8376|8385+8385/8385\8385;
                      LDY.W !IRQNMICommand                      ;;8378|8387+8387/8387\8387;
                      BMI +                                     ;;837B|838A+838A/838A\838A; If Bit 7 (negative flag) is set, branch to a different IRQ mode 
IRQNMIEnding:         STA.W !HW_NMITIMEN                        ;;837D|838C+838C/838C\838C; Enable NMI Interrupt and Automatic Joypad reading ; NMI, V/H Count, and Joypad Enable
                      LDY.B #$1F                                ;;8380|838F+838F/838F\838F;
                      JSR WaitForHBlank                         ;;8382|8391+8391/8391\8391;
                      LDA.B !Layer3XPos                         ;;8385|8394+8394/8394\8394; \ Adjust scroll settings for layer 3 
                      STA.W !HW_BG3HOFS                         ;;8387|8396+8396/8396\8396;  | ; BG 3 Horizontal Scroll Offset
                      LDA.B !Layer3XPos+1                       ;;838A|8399+8399/8399\8399;  | 
                      STA.W !HW_BG3HOFS                         ;;838C|839B+839B/839B\839B;  | ; BG 3 Horizontal Scroll Offset
                      LDA.B !Layer3YPos                         ;;838F|839E+839E/839E\839E;  | 
                      STA.W !HW_BG3VOFS                         ;;8391|83A0+83A0/83A0\83A0;  | ; BG 3 Vertical Scroll Offset
                      LDA.B !Layer3YPos+1                       ;;8394|83A3+83A3/83A3\83A3;  | 
                      STA.W !HW_BG3VOFS                         ;;8396|83A5+83A5/83A5\83A5; /  ; BG 3 Vertical Scroll Offset
CODE_0083A8:          LDA.B !MainBGMode                         ;;8399|83A8+83A8/83A8\83A8; \Set the layer BG sizes, L3 priority, and BG mode 
                      STA.W !HW_BGMODE                          ;;839B|83AA+83AA/83AA\83AA; /(Effectively, this is the screen mode) ; BG Mode and Tile Size Setting
                      LDA.B !ColorSettings                      ;;839E|83AD+83AD/83AD\83AD; \Write CGADSUB 
                      STA.W !HW_CGADSUB                         ;;83A0|83AF+83AF/83AF\83AF; / ; Add/Subtract Select and Enable
CODE_0083B2:          REP #$30                                  ;;83A3|83B2+83B2/83B2\83B2; \ Pull everything back ; Index (16 bit) Accum (16 bit) 
                      PLB                                       ;;83A5|83B4+83B4/83B4\83B4;  | 
                      PLY                                       ;;83A6|83B5+83B5/83B5\83B5;  | 
                      PLX                                       ;;83A7|83B6+83B6/83B6\83B6;  | 
                      PLA                                       ;;83A8|83B7+83B7/83B7\83B7;  | 
                      PLP                                       ;;83A9|83B8+83B8/83B8\83B8; / 
                      RTI                                       ;;83AA|83B9+83B9/83B9\83B9; And Return 
                                                                ;;                        ;
                    + BIT.W !IRQNMICommand                      ;;83AB|83BA+83BA/83BA\83BA; Get bit 6 of $0D9B ; Index (8 bit) Accum (8 bit) 
                      BVC CODE_0083E3                           ;;83AE|83BD+83BD/83BD\83BD; If clear, skip the next code section 
                      LDY.B !IRQType                            ;;83B0|83BF+83BF/83BF\83BF; \Skip if $11 = 0 
                      BEQ CODE_0083D0                           ;;83B2|83C1+83C1/83C1\83C1; / 
                      STA.W !HW_NMITIMEN                        ;;83B4|83C3+83C3/83C3\83C3; #$81 -> NMI / Controller Enable reg ; NMI, V/H Count, and Joypad Enable
                      LDY.B #$14                                ;;83B7|83C6+83C6/83C6\83C6;
                      JSR WaitForHBlank                         ;;83B9|83C8+83C8/83C8\83C8;
                      JSR SETL1SCROLL                           ;;83BC|83CB+83CB/83CB\83CB;
                      BRA CODE_0083A8                           ;;83BF|83CE+83CE/83CE\83CE;
                                                                ;;                        ;
CODE_0083D0:          INC.B !IRQType                            ;;83C1|83D0+83D0/83D0\83D0; $11++ 
                      LDA.W !HW_TIMEUP                          ;;83C3|83D2+83D2/83D2\83D2; \ Set up the IRQ routine for layer 3 ; IRQ Flag By H/V Count Timer
                      LDA.B #$AE                                ;;83C6|83D5+83D5/83D5\83D5;  |-\  
                      SEC                                       ;;83C8|83D7+83D7/83D7\83D7;  |  |Vertical Counter trigger at 174 - $1888 
                      SBC.W !ScreenShakeYOffset                 ;;83C9|83D8+83D8/83D8\83D8;  |-/ Oddly enough, $1888 seems to be 16-bit, but the 
                      STA.W !HW_VTIME                           ;;83CC|83DB+83DB/83DB\83DB;  |Store to Vertical Counter Timer ; V-Count Timer (Upper 8 Bits)
                      STZ.W !HW_VTIME+1                         ;;83CF|83DE+83DE/83DE\83DE; / Make the high byte of said timer 0 ; V-Count Timer MSB (Bit 0)
                      LDA.B #$A1                                ;;83D2|83E1+83E1/83E1\83E1; A = NMI enable, V count enable, joypad automatic read enable, H count disable 
CODE_0083E3:          LDY.W !EndLevelTimer                      ;;83D4|83E3+83E3/83E3\83E3; if $1493 = 0 skip down 
                      BEQ CODE_0083F3                           ;;83D7|83E6+83E6/83E6\83E6;
                      LDY.W !ColorFadeTimer                     ;;83D9|83E8+83E8/83E8\83E8; \ If $1495 is <#$40 
                      CPY.B #$40                                ;;83DC|83EB+83EB/83EB\83EB;  | 
                      BCC CODE_0083F3                           ;;83DE|83ED+83ED/83ED\83ED; / Skip down 
                      LDA.B #$81                                ;;83E0|83EF+83EF/83EF\83EF;
                      BRA IRQNMIEnding                          ;;83E2|83F1+83F1/83F1\83F1; Jump up to IRQNMIEnding 
                                                                ;;                        ;
CODE_0083F3:          STA.W !HW_NMITIMEN                        ;;83E4|83F3+83F3/83F3\83F3; A -> NMI/Joypad Auto-Read/HV-Count Control Register ; NMI, V/H Count, and Joypad Enable
                      JSR CODE_008439                           ;;83E7|83F6+83F6/83F6\83F6;
                      NOP                                       ;;83EA|83F9+83F9/83F9\83F9; \Not often you see NOP, I think there was a JSL here at one point maybe 
                      NOP                                       ;;83EB|83FA+83FA/83FA\83FA; / 
                      LDA.B #$07                                ;;83EC|83FB+83FB/83FB\83FB; \Write Screen register 
                      STA.W !HW_BGMODE                          ;;83EE|83FD+83FD/83FD\83FD; / ; BG Mode and Tile Size Setting
                      LDA.B !Mode7XPos                          ;;83F1|8400+8400/8400\8400; \ Write L1 Horizontal scroll 
                      STA.W !HW_BG1HOFS                         ;;83F3|8402+8402/8402\8402;  | ; BG 1 Horizontal Scroll Offset
                      LDA.B !Mode7XPos+1                        ;;83F6|8405+8405/8405\8405;  | 
                      STA.W !HW_BG1HOFS                         ;;83F8|8407+8407/8407\8407; /  ; BG 1 Horizontal Scroll Offset
                      LDA.B !Mode7YPos                          ;;83FB|840A+840A/840A\840A; \ Write L1 Vertical Scroll 
                      STA.W !HW_BG1VOFS                         ;;83FD|840C+840C/840C\840C;  | ; BG 1 Vertical Scroll Offset
                      LDA.B !Mode7YPos+1                        ;;8400|840F+840F/840F\840F;  | 
                      STA.W !HW_BG1VOFS                         ;;8402|8411+8411/8411\8411; /  ; BG 1 Vertical Scroll Offset
                      BRA CODE_0083B2                           ;;8405|8414+8414/8414\8414; And exit IRQ 
                                                                ;;                        ;
SETL1SCROLL:          LDA.B #$59                                ;;8407|8416+8416/8416\8416; \ 
                      STA.W !HW_BG1SC                           ;;8409|8418+8418/8418\8418; /Write L1 GFX source address ; BG 1 Address and Size
                      LDA.B #$07                                ;;840C|841B+841B/841B\841B; \Write L1/L2 Tilemap address 
                      STA.W !HW_BG12NBA                         ;;840E|841D+841D/841D\841D; / ; BG 1 & 2 Tile Data Designation
                      LDA.B !Layer1XPos                         ;;8411|8420+8420/8420\8420; \ Write L1 Horizontal scroll 
                      STA.W !HW_BG1HOFS                         ;;8413|8422+8422/8422\8422;  | ; BG 1 Horizontal Scroll Offset
                      LDA.B !Layer1XPos+1                       ;;8416|8425+8425/8425\8425;  | 
                      STA.W !HW_BG1HOFS                         ;;8418|8427+8427/8427\8427; / ; BG 1 Horizontal Scroll Offset
                      LDA.B !Layer1YPos                         ;;841B|842A+842A/842A\842A; \ $1C + $1888 -> L1 Vert scroll 
                      CLC                                       ;;841D|842C+842C/842C\842C;  |$1888 = Some sort of vertioffset 
                      ADC.W !ScreenShakeYOffset                 ;;841E|842D+842D/842D\842D;  | 
                      STA.W !HW_BG1VOFS                         ;;8421|8430+8430/8430\8430; / ; BG 1 Vertical Scroll Offset
                      LDA.B !Layer1YPos+1                       ;;8424|8433+8433/8433\8433; \Other half of L1 vert scroll 
                      STA.W !HW_BG1VOFS                         ;;8426|8435+8435/8435\8435; / ; BG 1 Vertical Scroll Offset
                      RTS                                       ;;8429|8438+8438/8438\8438; Return 
                                                                ;;                        ;
CODE_008439:          LDY.B #$20                                ;;842A|8439+8439/8439\8439; <<- Could this be just to waste time? 
WaitForHBlank:        BIT.W !HW_HVBJOY                          ;;842C|843B+843B/843B\843B; So... LDY gets set with 20 if there is a H-Blank...? ; H/V Blank Flags and Joypad Status
                      BVS CODE_008439                           ;;842F|843E+843E/843E\843E; if in H-Blank, make Y #$20 and try again 
                    - BIT.W !HW_HVBJOY                          ;;8431|8440+8440/8440\8440; Now wait until not in H-Blank ; H/V Blank Flags and Joypad Status
                      BVC -                                     ;;8434|8443+8443/8443\8443;
                    - DEY                                       ;;8436|8445+8445/8445\8445;  |Y = 0 
                      BNE -                                     ;;8437|8446+8446/8446\8446; / ...wait a second... why didn't they just do LDY #$00? ...waste more time? 
                      RTS                                       ;;8439|8448+8448/8448\8448; return 
                                                                ;;                        ;
DoSomeSpriteDMA:      STZ.W !HW_DMAPARAM                        ;;843A|8449+8449/8449\8449; Parameters for DMA Transfer
                      REP #$20                                  ;;843D|844C+844C/844C\844C; Accum (16 bit) 
                      STZ.W !HW_OAMADD                          ;;843F|844E+844E/844E\844E; OAM address ; Address for Accessing OAM
                      LDA.W #$0004                              ;;8442|8451+8451/8451\8451;
                      STA.W !HW_DMAREG                          ;;8445|8454+8454/8454\8454; Dest. address = $2104 (data write to OAM) ; B Address
                      LDA.W #!OAMTileXPos>>8&$FF                ;;8448|8457+8457/8457\8457;
                      STA.W !HW_DMAADDR+1                       ;;844B|845A+845A/845A\845A; Source address = $00:0200  ; A Address (High Byte)
                      LDA.W #$0220                              ;;844E|845D+845D/845D\845D;
                      STA.W !HW_DMACNT                          ;;8451|8460+8460/8460\8460; $0220 bytes to transfer ; Number Bytes to Transfer (Low Byte) (DMA)
                      LDY.B #$01                                ;;8454|8463+8463/8463\8463;
                      STY.W !HW_MDMAEN                          ;;8456|8465+8465/8465\8465; Start DMA ; Regular DMA Channel Enable
                      SEP #$20                                  ;;8459|8468+8468/8468\8468; Accum (8 bit) 
                      LDA.B #$80                                ;;845B|846A+846A/846A\846A; \  
                      STA.W !HW_OAMADD+1                        ;;845D|846C+846C/846C\846C;  | 
                      LDA.B !OAMAddress                         ;;8460|846F+846F/846F\846F;  |Change the OAM read/write address to #$8000 + $3F 
                      STA.W !HW_OAMADD                          ;;8462|8471+8471/8471\8471; /  ; Address for Accessing OAM
                      RTS                                       ;;8465|8474+8474/8474\8474; Return 
                                                                ;;                        ;
                                                                ;;                        ;
DATA_008475:          dw $0000,$0008,$0010,$0018                ;;8466|8475+8475/8475\8475;
                      dw $0020,$0028,$0030,$0038                ;;846E|847D+847D/847D\847D;
                      dw $0040,$0048,$0050,$0058                ;;8476|8485+8485/8485\8485;
                      dw $0060,$0068,$0070                      ;;847E|848D+848D/848D\848D;
                      db $78                                    ;;8484|8493+8493/8493\8493;
                                                                ;;                        ;
CODE_008494:          LDY.B #$1E                                ;;8485|8494+8494/8494\8494;
                    - LDX.W DATA_008475,Y                       ;;8487|8496+8496/8496\8496;
                      LDA.W !OAMTileSize+3,X                    ;;848A|8499+8499/8499\8499;
                      ASL A                                     ;;848D|849C+849C/849C\849C;
                      ASL A                                     ;;848E|849D+849D/849D\849D;
                      ORA.W !OAMTileSize+2,X                    ;;848F|849E+849E/849E\849E;
                      ASL A                                     ;;8492|84A1+84A1/84A1\84A1;
                      ASL A                                     ;;8493|84A2+84A2/84A2\84A2;
                      ORA.W !OAMTileSize+1,X                    ;;8494|84A3+84A3/84A3\84A3;
                      ASL A                                     ;;8497|84A6+84A6/84A6\84A6;
                      ASL A                                     ;;8498|84A7+84A7/84A7\84A7;
                      ORA.W !OAMTileSize,X                      ;;8499|84A8+84A8/84A8\84A8;
                      STA.W !OAMTileBitSize,Y                   ;;849C|84AB+84AB/84AB\84AB;
                      LDA.W !OAMTileSize+7,X                    ;;849F|84AE+84AE/84AE\84AE;
                      ASL A                                     ;;84A2|84B1+84B1/84B1\84B1;
                      ASL A                                     ;;84A3|84B2+84B2/84B2\84B2;
                      ORA.W !OAMTileSize+6,X                    ;;84A4|84B3+84B3/84B3\84B3;
                      ASL A                                     ;;84A7|84B6+84B6/84B6\84B6;
                      ASL A                                     ;;84A8|84B7+84B7/84B7\84B7;
                      ORA.W !OAMTileSize+5,X                    ;;84A9|84B8+84B8/84B8\84B8;
                      ASL A                                     ;;84AC|84BB+84BB/84BB\84BB;
                      ASL A                                     ;;84AD|84BC+84BC/84BC\84BC;
                      ORA.W !OAMTileSize+4,X                    ;;84AE|84BD+84BD/84BD\84BD;
                      STA.W !OAMTileBitSize+1,Y                 ;;84B1|84C0+84C0/84C0\84C0;
                      DEY                                       ;;84B4|84C3+84C3/84C3\84C3;
                      DEY                                       ;;84B5|84C4+84C4/84C4\84C4;
                      BPL -                                     ;;84B6|84C5+84C5/84C5\84C5;
                      RTS                                       ;;84B8|84C7+84C7/84C7\84C7;
                                                                ;;                        ;
                   if ver_is_english(!_VER)           ;\   IF   ;;++++++++++++++++++++++++; U, SS, E0, & E1
CODE_0084C8:          PHB                                       ;;    |84C8+84C8/84C8\84C8; Wrapper 
                      PHK                                       ;;    |84C9+84C9/84C9\84C9;
                      PLB                                       ;;    |84CA+84CA/84CA\84CA;
                      JSR LoadScrnImage                         ;;    |84CB+84CB/84CB\84CB;
                      PLB                                       ;;    |84CE+84CE/84CE\84CE;
                      RTL                                       ;;    |84CF+84CF/84CF\84CF;
                   endif                              ;/ ENDIF  ;;++++++++++++++++++++++++;
                                                                ;;                        ;
                                                                ;;                        ;
StripeImages:         dl !DynamicStripeImage                    ;;84B9|84D0+84D0/84D0\84D0; 00 - Pointer to dynamic stripe image loader
                      dl TitleScreenStripe                      ;;84BC|84D3+84D3/84D3\84D3; 03 - Title screen 
                      dl OWBorderStripe                         ;;84BF|84D6+84D6/84D6\84D6; 06 - OW border 
                      dl ClearMessageStripe                     ;;84C2|84D9+84D9/84D9\84D9; 09 - Blank space to clear a message box
                      dl ContinueEndStripe                      ;;84C5|84DC+84DC/84DC\84DC; 0C - CONTINUE/END 
                      dl LudwigCutBGStripe                      ;;84C8|84DF+84DF/84DF\84DF; 0F - Ludwig Castle Cutscene BG
                      dl PlayerSelectStripe                     ;;84CB|84E2+84E2/84E2\84E2; 12 - 1 PLAYER GAME/2 PLAYER GAME 
                      dl OWScrollArrowStripe                    ;;84CE|84E5+84E5/84E5\84E5; 15 - OW scroll arrows 
                      dl OWScrollEraseStripe                    ;;84D1|84E8+84E8/84E8\84E8; 18 - Remove OW scroll arrows 
                      dl ClearOWBoxStripe                       ;;84D4|84EB+84EB/84EB\84EB; 1B - Blank space to clear overworld boxes
                      dl ContinueSaveStripe                     ;;84D7|84EE+84EE/84EE\84EE; 1E - CONTINUE AND SAVE 
                   if ver_is_japanese(!_VER)          ;\   IF   ;;++++++++++++++++++++++++; J
CutMessageStripes:    dl C1Message4Stripe                       ;;84DA                    ; 21 - tabidatsunodearimashita.
                      dl C1Message3Stripe                       ;;84DD                    ; 24 - nisareta nakamaotasukedashi doonatsuheiyae
                      dl C1Message2Stripe                       ;;84E0                    ; 27 - taoshita mariotachiwa kuppanomahoude tamago
                      dl C1Message1Stripe                       ;;84E3                    ; 2A - Yoosutaatouno oshirode saishonokokuppao
                      dl C2Message4Stripe                       ;;84E6                    ; 2D - eteiruka? piichihimenounmeiya ikani!?
                      dl C2Message3Stripe                       ;;84E9                    ; 30 - hetosusundeiku!konosaki donnawanagamachikama
                      dl C2Message2Stripe                       ;;84EC                    ; 33 - doonatsuheiyakara chikanosekaino baniradoomu
                      dl C2Message1Stripe                       ;;84EF                    ; 36 - mariotachiwa nibanmenokokuppamo yattsukete
                      dl C3Message4Stripe                       ;;84F2                    ; 39 - shitara donnatabini narunodearouka!
                      dl C3Message3Stripe                       ;;84F5                    ; 3C - moshimo midoriyaakanosuitchio totteinaito
                      dl C3Message2Stripe                       ;;84F8                    ; 3F - hotto hitoiki. shikashikoosuwa kewashikunaru
                      dl C3Message1Stripe                       ;;84FB                    ; 42 - mariotachiwa sanbanmenokokuppamo yattsukete
                      dl C4Message4Stripe                       ;;84FE                    ; 45 - ginomori!hatashitemorionukerukotogadekirunoka?
                      dl C4Message3Stripe                       ;;8501                    ; 48 - nazootokanaito derukotogadekinaitoiu fushi
                      dl C4Message2Stripe                       ;;8504                    ; 4B - tachiwa korekara mayoinomorinihaitteiku!?
                      dl C4Message1Stripe                       ;;8507                    ; 4E - yonbanmenokokuppamo nantokakuriaa mario
                      dl C5Message4Stripe                       ;;850A                    ; 51 - pai. tsuginarutatakaino hojimarihajimarii!
                      dl C5Message3Stripe                       ;;850D                    ; 54 - chokoreetouwa nazonokoosuto doragondeip
                      dl C5Message2Stripe                       ;;8510                    ; 57 - to morionukerukotogadekita. daga konosakino
                      dl C5Message1Stripe                       ;;8513                    ; 5A - mariotachiwa gobanmenokokuppaoyattsuke yat
                      dl C6Message4Stripe                       ;;8516                    ; 5D - izoge mario! ganbare ruiji!
                      dl C6Message3Stripe                       ;;8519                    ; 60 - iriguchiohirakutameno kagigaarurashii.
                      dl C6Message2Stripe                       ;;851C                    ; 63 - konosakino chinbotsusenniwa kuppanotanino
                      dl C6Message1Stripe                       ;;851F                    ; 66 - rokubanmenokokuppaotaoshitamariotachi!
                      dl C7Message4Stripe                       ;;8522                    ; 69 - randoniheiwaotorimodosukotogadekirunoka?
                      dl C7Message3Stripe                       ;;8525                    ; 6C - bujinipiichihimeotasukedashi konokyouryuu
                      dl C7Message2Stripe                       ;;8528                    ; 6F - piichihimega torawareteiru kuppajounomi
                      dl C7Message1Stripe                       ;;852B                    ; 72 - tsuini saigonokokuppaotaoshita! nokosuwa
                   else                               ;<  ELSE  ;;------------------------; U, SS, E0, & E1
CutMessageStripes:    dl BlankStripe                            ;;    |84F1+84F1/84F1\84F1; 21 - *empty*
                      dl C1Message7Stripe                       ;;    |84F4+84F4/84F4\84F4; 24 - travel to Donut Land.
                      dl C1Message6Stripe                       ;;    |84F7+84F7/84F7\84F7; 27 - Together, they now
                      dl C1Message5Stripe                       ;;    |84FA+84FA/84FA\84FA; 2A - still trapped in an egg.
                      dl C1Message4Stripe                       ;;    |84FD+84FD/84FD\84FD; 2D - Yoshi's friend who is
                      dl C1Message3Stripe                       ;;    |8500+8500/8500\8500; 30 - castle #1 and rescued
                      dl C1Message2Stripe                       ;;    |8503+8503/8503\8503; 33 - demented Iggy Koopa in
                      dl C1Message1Stripe                       ;;    |8506+8506/8506\8506; 36 - Mario has defeated the
                      dl C2Message8Stripe                       ;;    |8509+8509/8509\8509; 39 - Princess Toadstool?
                      dl C2Message7Stripe                       ;;    |850C+850C/850C\850C; 3C - What will become of
                      dl C2Message6Stripe                       ;;    |850F+850F/850F\850F; 3F - Mario in this new world?
                      dl C2Message5Stripe                       ;;    |8512+8512/8512\8512; 42 - Dome. What traps await
                      dl C2Message4Stripe                       ;;    |8515+8515/8515\8515; 45 - the underground Vanilla
                      dl C2Message3Stripe                       ;;    |8518+8518/8518\8518; 48 - memory. The next area is
                      dl C2Message2Stripe                       ;;    |851B+851B/851B\851B; 4B - castle #2 is now just a
                      dl C2Message1Stripe                       ;;    |851E+851E/851E\851E; 4E - Morton Koopa Jr. of
                      dl BlankStripe                            ;;    |8521+8521/8521\8521; 51 - *empty*
                      dl C3Message7Stripe                       ;;    |8524+8524/8524\8524; 54 - Green Switches yet?
                      dl C3Message6Stripe                       ;;    |8527+8527/8527\8527; 57 - you found the Red and
                      dl C3Message5Stripe                       ;;    |852A+852A/852A\852A; 5A - more difficult. Have
                      dl C3Message4Stripe                       ;;    |852D+852D/852D\852D; 5D - starting to get much
                      dl C3Message3Stripe                       ;;    |8530+8530/8530\8530; 60 - #3. Mario's quest is
                      dl C3Message2Stripe                       ;;    |8533+8533/8533\8533; 63 - Lemmy Koopa of castle
                      dl C3Message1Stripe                       ;;    |8536+8536/8536\8536; 66 - Mario has triumphed over
                      dl C4Message8Stripe                       ;;    |8539+8539/8539\8539; 69 - this perplexing forest.
                      dl C4Message7Stripe                       ;;    |853C+853C/853C\853C; 6C - to solve the puzzle of
                      dl C4Message6Stripe                       ;;    |853F+853F/853F\853F; 6F - Mario must use his brain
                      dl C4Message5Stripe                       ;;    |8542+8542/8542\8542; 72 - Illusion lies ahead.
                      dl C4Message4Stripe                       ;;    |8545+8545/8545\8545; 75 - are over. The Forest of
                      dl C4Message3Stripe                       ;;    |8548+8548/8548\8548; 78 - symphonies in castle #4
                      dl C4Message2Stripe                       ;;    |854B+854B/854B\854B; 7B - of composing Koopa
                      dl C4Message1Stripe                       ;;    |854E+854E/854E\854E; 7E - Ludwig von Koopa's days
                      dl BlankStripe                            ;;    |8551+8551/8551\8551; 81 - *empty*
                      dl C5Message7Stripe                       ;;    |8554+8554/8554\8554; 84 - tasty) Chocolate Island!
                      dl C5Message6Stripe                       ;;    |8557+8557/8557\8557; 87 - the dangerous (but
                      dl C5Message5Stripe                       ;;    |855A+855A/855A\855A; 8A - castle #5. Onward to
                      dl C5Message4Stripe                       ;;    |855D+855D/855D\855D; 8D - end to Roy Koopa of
                      dl C5Message3Stripe                       ;;    |8560+8560/8560\8560; 90 - Illusion and has put an
                      dl C5Message2Stripe                       ;;    |8563+8563/8563\8563; 93 - through the Forest of
                      dl C5Message1Stripe                       ;;    |8566+8566/8566\8566; 96 - Mario found his way
                      dl C6Message8Stripe                       ;;    |8569+8569/8569\8569; 99 - to the Valley of Bowser.
                      dl C6Message7Stripe                       ;;    |856C+856C/856C\856C; 9C - appears to be a gateway
                      dl C6Message6Stripe                       ;;    |856F+856F/856F\856F; 9F - is a sunken ship that
                      dl C6Message5Stripe                       ;;    |8572+8572/8572\8572; A2 - now before him. There
                      dl C6Message4Stripe                       ;;    |8575+8575/8575\8575; A5 - the challenge that is
                      dl C6Message3Stripe                       ;;    |8578+8578/8578\8578; A8 - song. Mario must meet
                      dl C6Message2Stripe                       ;;    |857B+857B/857B\857B; AB - #6 has sung her last
                      dl C6Message1Stripe                       ;;    |857E+857E/857E\857E; AE - Wendy O. Koopa in castle
                      dl C7Message8Stripe                       ;;    |8581+8581/8581\8581; B1 - Dinosaur Land?
                      dl C7Message7Stripe                       ;;    |8584+8584/8584\8584; B4 - restore peace to
                      dl C7Message6Stripe                       ;;    |8587+8587/8587\8587; B7 - Can Mario rescue her and
                      dl C7Message5Stripe                       ;;    |858A+858A/858A\858A; BA - Toadstool is being held.
                      dl C7Message4Stripe                       ;;    |858D+858D/858D\858D; BD - Castle where Princess
                      dl C7Message3Stripe                       ;;    |8590+8590/8590\8590; C0 - that is left is Bowser's
                      dl C7Message2Stripe                       ;;    |8593+8593/8593\8593; C3 - Koopa in castle #7. All
                      dl C7Message1Stripe                       ;;    |8596+8596/8596\8596; C6 - Mario has defeated Larry
                   endif                              ;/ ENDIF  ;;++++++++++++++++++++++++;
OtherStripes:         dl LemmyCutBGStripe                       ;;852E|8599+8599/8599\8599; J75/UC9 - Lemmy, Larry Castle Cutscene BG
                      dl WendyCutBGStripe                       ;;8531|859C+859C/859C\859C; J78/UCC - Wendy Castle Cutscene BG
                      dl CutsceneCastleStripe                   ;;8534|859F+859F/859F\859F; J7B/UCF - Castle Cutscene Castle
                      dl EraseAllStripe                         ;;8537|85A2+85A2/85A2\85A2; J7E/UD2 - Blank space to clear all of layers 1 and 2
                      dl TheEndStripe                           ;;853A|85A5+85A5/85A5\85A5; J81/UD5 - Ending: THE END 
                      dl EnemyNameStripe00                      ;;853D|85A8+85A8/85A8\85A8; J84/UD8 - Ending: Enemies: Lakitu 
                      dl EnemyNameStripe01                      ;;8540|85AB+85AB/85AB\85AB; J87/UDB - Ending: Enemies: Hammer Bro. 
                      dl EnemyNameStripe02                      ;;8543|85AE+85AE/85AE\85AE; J8A/UDE - Ending: Enemies: Pokey 
                      dl EnemyNameStripe03                      ;;8546|85B1+85B1/85B1\85B1; J8D/UE1 - Ending: Enemies: Rex 
                      dl EnemyNameStripe04                      ;;8549|85B4+85B4/85B4\85B4; J90/UE4 - Ending: Enemies: Dino-Rhino 
                      dl EnemyNameStripe05                      ;;854C|85B7+85B7/85B7\85B7; J93/UE7 - Ending: Enemies: Blargg 
                      dl EnemyNameStripe06                      ;;854F|85BA+85BA/85BA\85BA; J96/UEA - Ending: Enemies: Urchin 
                      dl EnemyNameStripe07                      ;;8552|85BD+85BD/85BD\85BD; J99/UED - Ending: Enemies: Boo 
                      dl EnemyNameStripe08                      ;;8555|85C0+85C0/85C0\85C0; J9C/UF0 - Ending: Enemies: Dry Bones 
                      dl EnemyNameStripe09                      ;;8558|85C3+85C3/85C3\85C3; J9F/UF3 - Ending: Enemies: Grinder 
                      dl EnemyNameStripe0A                      ;;855B|85C6+85C6/85C6\85C6; JA2/UF6 - Ending: Enemies: Reznor 
                      dl EnemyNameStripe0B                      ;;855E|85C9+85C9/85C9\85C9; JA5/UF9 - Ending: Enemies: Mechakoopa 
                      dl EnemyNameStripe0C                      ;;8561|85CC+85CC/85CC\85CC; JA8/UFC - Ending: Enemies: Bowser 
                      dl IggyCutBGStripe                        ;;8564|85CF+85CF/85CF\85CF; JAB/UFF - Iggy, Morton, Roy Castle Cutscene BG
                                                                ;;                        ;  
LoadScrnImage:        LDY.B !StripeImage                        ;;8567|85D2+85D2/85D2\85D2; 12 = Image loader 
                      LDA.W StripeImages,Y                      ;;8569|85D4+85D4/85D4\85D4; \  
                      STA.B !_0                                 ;;856C|85D7+85D7/85D7\85D7;  | 
                      LDA.W StripeImages+1,Y                    ;;856E|85D9+85D9/85D9\85D9;  |Load pointer 
                      STA.B !_1                                 ;;8571|85DC+85DC/85DC\85DC;  | 
                      LDA.W StripeImages+2,Y                    ;;8573|85DE+85DE/85DE\85DE;  | 
                      STA.B !_2                                 ;;8576|85E1+85E1/85E1\85E1; /  
                      JSR CODE_00871E                           ;;8578|85E3+85E3/85E3\85E3;
                      LDA.B !StripeImage                        ;;857B|85E6+85E6/85E6\85E6;
                      BNE +                                     ;;857D|85E8+85E8/85E8\85E8;
                      STA.L !DynStripeImgSize                   ;;857F|85EA+85EA/85EA\85EA;
                      STA.L !DynStripeImgSize+1                 ;;8583|85EE+85EE/85EE\85EE;
                      DEC A                                     ;;8587|85F2+85F2/85F2\85F2;
                      STA.L !DynamicStripeImage                 ;;8588|85F3+85F3/85F3\85F3;
                    + STZ.B !StripeImage                        ;;858C|85F7+85F7/85F7\85F7; Do not reload the same thing next frame 
                      RTS                                       ;;858E|85F9+85F9/85F9\85F9;
                                                                ;;                        ;
CODE_0085FA:          JSR TurnOffIO                             ;;858F|85FA+85FA/85FA\85FA;
                      LDA.B #$FC                                ;;8592|85FD+85FD/85FD\85FD;
                      STA.B !_0                                 ;;8594|85FF+85FF/85FF\85FF;
                      STZ.W !HW_VMAINC                          ;;8596|8601+8601/8601\8601; Set "VRAM Address Increment Value" to x00 ; VRAM Address Increment Value
                      STZ.W !HW_VMADD                           ;;8599|8604+8604/8604\8604; Set "Address for VRAM Read/Write (Low Byte)" to x00 ; Address for VRAM Read/Write (Low Byte)
                      LDA.B #$50                                ;;859C|8607+8607/8607\8607; \ Set "Address for VRAM Read/Write (High Byte)" to x50 
                      STA.W !HW_VMADD+1                         ;;859E|8609+8609/8609\8609; /  ; Address for VRAM Read/Write (High Byte)
                      LDX.B #$06                                ;;85A1|860C+860C/860C\860C;
                    - LDA.W DATA_008649,X                       ;;85A3|860E+860E/860E\860E;
                      STA.W !HW_DMAPARAM+$10,X                  ;;85A6|8611+8611/8611\8611;
                      DEX                                       ;;85A9|8614+8614/8614\8614;
                      BPL -                                     ;;85AA|8615+8615/8615\8615;
                      LDY.B #$02                                ;;85AC|8617+8617/8617\8617; DMA something to VRAM, my guess is a tilemap... 
                      STY.W !HW_MDMAEN                          ;;85AE|8619+8619/8619\8619; Regular DMA Channel Enable
                      LDA.B #$38                                ;;85B1|861C+861C/861C\861C;
                      STA.B !_0                                 ;;85B3|861E+861E/861E\861E;
                      LDA.B #$80                                ;;85B5|8620+8620/8620\8620;
                      STA.W !HW_VMAINC                          ;;85B7|8622+8622/8622\8622; VRAM Address Increment Value
                      STZ.W !HW_VMADD                           ;;85BA|8625+8625/8625\8625; \Change CRAM address ; Address for VRAM Read/Write (Low Byte)
                      LDA.B #$50                                ;;85BD|8628+8628/8628\8628;  | 
                      STA.W !HW_VMADD+1                         ;;85BF|862A+862A/862A\862A; / ; Address for VRAM Read/Write (High Byte)
                      LDX.B #$06                                ;;85C2|862D+862D/862D\862D; And Repeat the DMA 
                    - LDA.W DATA_008649,X                       ;;85C4|862F+862F/862F\862F;
                      STA.W !HW_DMAPARAM+$10,X                  ;;85C7|8632+8632/8632\8632;
                      DEX                                       ;;85CA|8635+8635/8635\8635;
                      BPL -                                     ;;85CB|8636+8636/8636\8636;
                      LDA.B #$19                                ;;85CD|8638+8638/8638\8638; \but change desination address to $2119 
                      STA.W !HW_DMAREG+$10                      ;;85CF|863A+863A/863A\863A; / ; B Address
                      STY.W !HW_MDMAEN                          ;;85D2|863D+863D/863D\863D; Start DMA ; Regular DMA Channel Enable
                      STZ.B !OAMAddress                         ;;85D5|8640+8640/8640\8640; $3B = 0 (not sure what $3B is) 
                      JSL !OAMResetRoutine                      ;;85D7|8642+8642/8642\8642; and JSL to a RAM routine 
                      JMP DoSomeSpriteDMA                       ;;85DB|8646+8646/8646\8646; Jump to the next part of this routine 
                                                                ;;                        ;
                                                                ;;                        ;
DATA_008649:          db $08,$18                                ;;85DE|8649+8649/8649\8649;
                      dl $000000                                ;;85E0|864B+864B/864B\864B;
                      dw $1000                                  ;;85E3|864E+864E/864E\864E;
                                                                ;;                        ;
ControllerUpdate:     LDA.W !HW_CNTRL1                          ;;85E5|8650+8650/8650\8650; \  ; Joypad 1Data (Low Byte)
                      AND.B #$F0                                ;;85E8|8653+8653/8653\8653;  | 
                      STA.W !axlr0000P1Hold                     ;;85EA|8655+8655/8655\8655;  | 
                      TAY                                       ;;85ED|8658+8658/8658\8658;  | 
                      EOR.W !axlr0000P1Mask                     ;;85EE|8659+8659/8659\8659;  | 
                      AND.W !axlr0000P1Hold                     ;;85F1|865C+865C/865C\865C;  | 
                      STA.W !axlr0000P1Frame                    ;;85F4|865F+865F/865F\865F;  | 
                      STY.W !axlr0000P1Mask                     ;;85F7|8662+8662/8662\8662;  | 
                      LDA.W !HW_CNTRL1+1                        ;;85FA|8665+8665/8665\8665;  | ; Joypad 1Data (High Byte)
                      STA.W !byetudlrP1Hold                     ;;85FD|8668+8668/8668\8668;  | 
                      TAY                                       ;;8600|866B+866B/866B\866B;  | 
                      EOR.W !byetudlrP1Mask                     ;;8601|866C+866C/866C\866C;  | 
                      AND.W !byetudlrP1Hold                     ;;8604|866F+866F/866F\866F;  | 
                      STA.W !byetudlrP1Frame                    ;;8607|8672+8672/8672\8672;  | 
                      STY.W !byetudlrP1Mask                     ;;860A|8675+8675/8675\8675;  |Read controller data 
                      LDA.W !HW_CNTRL2                          ;;860D|8678+8678/8678\8678;  | ; Joypad 2Data (Low Byte)
                      AND.B #$F0                                ;;8610|867B+867B/867B\867B;  | 
                      STA.W !axlr0000P2Hold                     ;;8612|867D+867D/867D\867D;  | 
                      TAY                                       ;;8615|8680+8680/8680\8680;  | 
                      EOR.W !axlr0000P2Mask                     ;;8616|8681+8681/8681\8681;  | 
                      AND.W !axlr0000P2Hold                     ;;8619|8684+8684/8684\8684;  | 
                      STA.W !axlr0000P2Frame                    ;;861C|8687+8687/8687\8687;  | 
                      STY.W !axlr0000P2Mask                     ;;861F|868A+868A/868A\868A;  | 
                      LDA.W !HW_CNTRL2+1                        ;;8622|868D+868D/868D\868D;  | ; Joypad 2Data (High Byte)
                      STA.W !byetudlrP2Hold                     ;;8625|8690+8690/8690\8690;  | 
                      TAY                                       ;;8628|8693+8693/8693\8693;  | 
                      EOR.W !byetudlrP2Mask                     ;;8629|8694+8694/8694\8694;  | 
                      AND.W !byetudlrP2Hold                     ;;862C|8697+8697/8697\8697;  | 
                      STA.W !byetudlrP2Frame                    ;;862F|869A+869A/869A\869A;  | 
                      STY.W !byetudlrP2Mask                     ;;8632|869D+869D/869D\869D; /  
                      LDX.W !ControllersPresent                 ;;8635|86A0+86A0/86A0\86A0; \  
                      BPL +                                     ;;8638|86A3+86A3/86A3\86A3;  |If $0DA0 is positive, set X to $0DA0 
                      LDX.W !PlayerTurnLvl                      ;;863A|86A5+86A5/86A5\86A5;  |Otherwise, set X to current character 
                    + LDA.W !axlr0000P1Hold,X                   ;;863D|86A8+86A8/86A8\86A8; \  
                      AND.B #$C0                                ;;8640|86AB+86AB/86AB\86AB;  | 
                      ORA.W !byetudlrP1Hold,X                   ;;8642|86AD+86AD/86AD\86AD;  | 
                      STA.B !byetudlrHold                       ;;8645|86B0+86B0/86B0\86B0;  | 
                      LDA.W !axlr0000P1Hold,X                   ;;8647|86B2+86B2/86B2\86B2;  | 
                      STA.B !axlr0000Hold                       ;;864A|86B5+86B5/86B5\86B5;  |Update controller data bytes 
                      LDA.W !axlr0000P1Frame,X                  ;;864C|86B7+86B7/86B7\86B7;  | 
                      AND.B #$40                                ;;864F|86BA+86BA/86BA\86BA;  | 
                      ORA.W !byetudlrP1Frame,X                  ;;8651|86BC+86BC/86BC\86BC;  | 
                      STA.B !byetudlrFrame                      ;;8654|86BF+86BF/86BF\86BF;  | 
                      LDA.W !axlr0000P1Frame,X                  ;;8656|86C1+86C1/86C1\86C1;  | 
                      STA.B !axlr0000Frame                      ;;8659|86C4+86C4/86C4\86C4; /  
                      RTS                                       ;;865B|86C6+86C6/86C6\86C6; Return 
                                                                ;;                        ;
CODE_0086C7:          REP #$30                                  ;;865C|86C7+86C7/86C7\86C7; Index (16 bit) Accum (16 bit) 
                      LDX.W #$0062                              ;;865E|86C9+86C9/86C9\86C9;
                      LDA.W #$0202                              ;;8661|86CC+86CC/86CC\86CC;
                    - STA.W !OAMTileSize,X                      ;;8664|86CF+86CF/86CF\86CF;
                      DEX                                       ;;8667|86D2+86D2/86D2\86D2;
                      DEX                                       ;;8668|86D3+86D3/86D3\86D3;
                      BPL -                                     ;;8669|86D4+86D4/86D4\86D4;
                      SEP #$30                                  ;;866B|86D6+86D6/86D6\86D6; Index (8 bit) Accum (8 bit) 
                      LDA.B #$F0                                ;;866D|86D8+86D8/86D8\86D8;
                      JSL !OAMResetRoutine+$12E                 ;;866F|86DA+86DA/86DA\86DA;
                      RTS                                       ;;8673|86DE+86DE/86DE\86DE;
                                                                ;;                        ;
ExecutePtr:           STY.B !_3                                 ;;8674|86DF+86DF/86DF\86DF; "Push" Y 
                      PLY                                       ;;8676|86E1+86E1/86E1\86E1;
                      STY.B !_0                                 ;;8677|86E2+86E2/86E2\86E2;
                      REP #$30                                  ;;8679|86E4+86E4/86E4\86E4; 16 bit A ; Index (16 bit) Accum (16 bit) 
                      AND.W #$00FF                              ;;867B|86E6+86E6/86E6\86E6; A = Game mode 
                      ASL A                                     ;;867E|86E9+86E9/86E9\86E9; Multiply game mode by 2 
                      TAY                                       ;;867F|86EA+86EA/86EA\86EA;
                      PLA                                       ;;8680|86EB+86EB/86EB\86EB;
                      STA.B !_1                                 ;;8681|86EC+86EC/86EC\86EC;
                      INY                                       ;;8683|86EE+86EE/86EE\86EE;
                      LDA.B [!_0],Y                             ;;8684|86EF+86EF/86EF\86EF;
                      STA.B !_0                                 ;;8686|86F1+86F1/86F1\86F1; A is 16-bit 
                      SEP #$30                                  ;;8688|86F3+86F3/86F3\86F3; Index (8 bit) Accum (8 bit) 
                      LDY.B !_3                                 ;;868A|86F5+86F5/86F5\86F5; "Pull" Y 
                      JML.W [!_0]                               ;;868C|86F7+86F7/86F7\86F7; Jump to the game mode's routine, which has been loaded into $00-02 
                                                                ;;                        ;
ExecutePtrLong:       STY.B !_5                                 ;;868F|86FA+86FA/86FA\86FA;
                      PLY                                       ;;8691|86FC+86FC/86FC\86FC;
                      STY.B !_2                                 ;;8692|86FD+86FD/86FD\86FD;
                      REP #$30                                  ;;8694|86FF+86FF/86FF\86FF; 16 bit A,X,Y ; Index (16 bit) Accum (16 bit) 
                      AND.W #$00FF                              ;;8696|8701+8701/8701\8701; \ A = Tileset/byte 3 (TB3) 
                      STA.B !_3                                 ;;8699|8704+8704/8704\8704; / Store A in $03 
                      ASL A                                     ;;869B|8706+8706/8706\8706; \ Multiply A by 2 
                      ADC.B !_3                                 ;;869C|8707+8707/8707\8707;  |Add TB3 to A 
                      TAY                                       ;;869E|8709+8709/8709\8709; / Set Y to A 
                      PLA                                       ;;869F|870A+870A/870A\870A;
                      STA.B !_3                                 ;;86A0|870B+870B/870B\870B;
                      INY                                       ;;86A2|870D+870D/870D\870D;
                      LDA.B [!_2],Y                             ;;86A3|870E+870E/870E\870E;
                      STA.B !_0                                 ;;86A5|8710+8710/8710\8710;
                      INY                                       ;;86A7|8712+8712/8712\8712;
                      LDA.B [!_2],Y                             ;;86A8|8713+8713/8713\8713;
                      STA.B !_1                                 ;;86AA|8715+8715/8715\8715;
                      SEP #$30                                  ;;86AC|8717+8717/8717\8717; Index (8 bit) Accum (8 bit) 
                      LDY.B !_5                                 ;;86AE|8719+8719/8719\8719;
                      JML.W [!_0]                               ;;86B0|871B+871B/871B\871B;
                                                                ;;                        ;
CODE_00871E:          REP #$10                                  ;;86B3|871E+871E/871E\871E; 16 bit X,Y ; Index (16 bit) 
                      STA.W !HW_DMAADDR+$12                     ;;86B5|8720+8720/8720\8720; A Address Bank
                      LDY.W #$0000                              ;;86B8|8723+8723/8723\8723; Set index to 0 
CODE_008726:          LDA.B [!_0],Y                             ;;86BB|8726+8726/8726\8726; \ Read line header byte 1 
                      BPL +                                     ;;86BD|8728+8728/8728\8728;  |If the byte & %10000000 is true, 
                      SEP #$30                                  ;;86BF|872A+872A/872A\872A;  |Set A,X,Y to 8 bit and return ; Index (8 bit) Accum (8 bit) 
                      RTS                                       ;;86C1|872C+872C/872C\872C;  | 
                                                                ;;                        ;
                    + STA.B !_4                                 ;;86C2|872D+872D/872D\872D; Store byte in !_4  ; Index(16 bit) 
                      INY                                       ;;86C4|872F+872F/872F\872F; Move onto the next byte 
                      LDA.B [!_0],Y                             ;;86C5|8730+8730/8730\8730; Read line header byte 2 
                      STA.B !_3                                 ;;86C7|8732+8732/8732\8732; Store byte in $03 
                      INY                                       ;;86C9|8734+8734/8734\8734; Move onto the next byte 
                      LDA.B [!_0],Y                             ;;86CA|8735+8735/8735\8735; Read line header byte 3 
                      STZ.B !_7                                 ;;86CC|8737+8737/8737\8737; \  
                      ASL A                                     ;;86CE|8739+8739/8739\8739;  |Store direction bit in $07 
                      ROL.B !_7                                 ;;86CF|873A+873A/873A\873A; /  
                      LDA.B #$18                                ;;86D1|873C+873C/873C\873C; \ Set B address (DMA) to x18 
                      STA.W !HW_DMAREG+$10                      ;;86D3|873E+873E/873E\873E; /  ; B Address
                      LDA.B [!_0],Y                             ;;86D6|8741+8741/8741\8741; Re-read line header byte 3 
                      AND.B #$40                                ;;86D8|8743+8743/8743\8743; \  
                      LSR A                                     ;;86DA|8745+8745/8745\8745;  | 
                      LSR A                                     ;;86DB|8746+8746/8746\8746;  |Store RLE bit << 3 in $05 
                      LSR A                                     ;;86DC|8747+8747/8747\8747;  | 
                      STA.B !_5                                 ;;86DD|8748+8748/8748\8748; /  
                      STZ.B !_6                                 ;;86DF|874A+874A/874A\874A;
                      ORA.B #$01                                ;;86E1|874C+874C/874C\874C;
                      STA.W !HW_DMAPARAM+$10                    ;;86E3|874E+874E/874E\874E; Parameters for DMA Transfer
                      REP #$20                                  ;;86E6|8751+8751/8751\8751; 16 bit A ; Accum (16 bit) 
                      LDA.B !_3                                 ;;86E8|8753+8753/8753\8753;
                      STA.W !HW_VMADD                           ;;86EA|8755+8755/8755\8755; Address for VRAM Read/Write (Low Byte)
                      LDA.B [!_0],Y                             ;;86ED|8758+8758/8758\8758;
                      XBA                                       ;;86EF|875A+875A/875A\875A;
                      AND.W #$3FFF                              ;;86F0|875B+875B/875B\875B;
                      TAX                                       ;;86F3|875E+875E/875E\875E;
                      INX                                       ;;86F4|875F+875F/875F\875F;
                      INY                                       ;;86F5|8760+8760/8760\8760;
                      INY                                       ;;86F6|8761+8761/8761\8761;
                      TYA                                       ;;86F7|8762+8762/8762\8762;
                      CLC                                       ;;86F8|8763+8763/8763\8763;
                      ADC.B !_0                                 ;;86F9|8764+8764/8764\8764;
                      STA.W !HW_DMAADDR+$10                     ;;86FB|8766+8766/8766\8766; A Address (Low Byte)
                      STX.W !HW_DMACNT+$10                      ;;86FE|8769+8769/8769\8769; Number Bytes to Transfer (Low Byte) (DMA)
                      LDA.B !_5                                 ;;8701|876C+876C/876C\876C;
                      BEQ +                                     ;;8703|876E+876E/876E\876E;
                      SEP #$20                                  ;;8705|8770+8770/8770\8770; 8 bit A ; Accum (8 bit) 
                      LDA.B !_7                                 ;;8707|8772+8772/8772\8772;
                      STA.W !HW_VMAINC                          ;;8709|8774+8774/8774\8774; VRAM Address Increment Value
                      LDA.B #$02                                ;;870C|8777+8777/8777\8777;
                      STA.W !HW_MDMAEN                          ;;870E|8779+8779/8779\8779; Regular DMA Channel Enable
                      LDA.B #$19                                ;;8711|877C+877C/877C\877C;
                      STA.W !HW_DMAREG+$10                      ;;8713|877E+877E/877E\877E; B Address
                      REP #$21                                  ;;8716|8781+8781/8781\8781; Accum (16 bit) 
                      LDA.B !_3                                 ;;8718|8783+8783/8783\8783;
                      STA.W !HW_VMADD                           ;;871A|8785+8785/8785\8785; Address for VRAM Read/Write (Low Byte)
                      TYA                                       ;;871D|8788+8788/8788\8788;
                      ADC.B !_0                                 ;;871E|8789+8789/8789\8789;
                      INC A                                     ;;8720|878B+878B/878B\878B;
                      STA.W !HW_DMAADDR+$10                     ;;8721|878C+878C/878C\878C; A Address (Low Byte)
                      STX.W !HW_DMACNT+$10                      ;;8724|878F+878F/878F\878F; Number Bytes to Transfer (Low Byte) (DMA)
                      LDX.W #$0002                              ;;8727|8792+8792/8792\8792;
                    + STX.B !_3                                 ;;872A|8795+8795/8795\8795;
                      TYA                                       ;;872C|8797+8797/8797\8797;
                      CLC                                       ;;872D|8798+8798/8798\8798;
                      ADC.B !_3                                 ;;872E|8799+8799/8799\8799;
                      TAY                                       ;;8730|879B+879B/879B\879B;
                      SEP #$20                                  ;;8731|879C+879C/879C\879C; Accum (8 bit) 
                      LDA.B !_7                                 ;;8733|879E+879E/879E\879E;
                      ORA.B #$80                                ;;8735|87A0+87A0/87A0\87A0;
                      STA.W !HW_VMAINC                          ;;8737|87A2+87A2/87A2\87A2; VRAM Address Increment Value
                      LDA.B #$02                                ;;873A|87A5+87A5/87A5\87A5;
                      STA.W !HW_MDMAEN                          ;;873C|87A7+87A7/87A7\87A7; Regular DMA Channel Enable
                      JMP CODE_008726                           ;;873F|87AA+87AA/87AA\87AA;
                                                                ;;                        ;
CODE_0087AD:          SEP #$30                                  ;;8742|87AD+87AD/87AD\87AD; Index (8 bit) Accum (8 bit) 
                      LDA.W !Layer1VramAddr                     ;;8744|87AF+87AF/87AF\87AF; \  
                      BNE +                                     ;;8747|87B2+87B2/87B2\87B2;  |If Layer 1 has to be updated, 
                      JMP CODE_0088DD                           ;;8749|87B4+87B4/87B4\87B4;  |jump to $88DD 
                                                                ;;                        ;
                    + LDA.B !ScreenMode                         ;;874C|87B7+87B7/87B7\87B7; \  
                      AND.B #$01                                ;;874E|87B9+87B9/87B9\87B9;  | 
                      BEQ +                                     ;;8750|87BB+87BB/87BB\87BB;  |If on a vertical level, 
                      JMP CODE_008849                           ;;8752|87BD+87BD/87BD\87BD;  |jump to $8849 
                                                                ;;                        ;
                    + LDY.B #$81                                ;;8755|87C0+87C0/87C0\87C0; \ Set "VRAM Address Increment Value" to x81 
                      STY.W !HW_VMAINC                          ;;8757|87C2+87C2/87C2\87C2; /  ; VRAM Address Increment Value
                      LDA.W !Layer1VramAddr+1                   ;;875A|87C5+87C5/87C5\87C5;
                      STA.W !HW_VMADD                           ;;875D|87C8+87C8/87C8\87C8; Address for VRAM Read/Write (Low Byte)
                      LDA.W !Layer1VramAddr                     ;;8760|87CB+87CB/87CB\87CB;
                      STA.W !HW_VMADD+1                         ;;8763|87CE+87CE/87CE\87CE; Address for VRAM Read/Write (High Byte)
                      LDX.B #$06                                ;;8766|87D1+87D1/87D1\87D1;
                    - LDA.W DATA_008A16,X                       ;;8768|87D3+87D3/87D3\87D3;
                      STA.W !HW_DMAPARAM+$10,X                  ;;876B|87D6+87D6/87D6\87D6;
                      DEX                                       ;;876E|87D9+87D9/87D9\87D9;
                      BPL -                                     ;;876F|87DA+87DA/87DA\87DA;
                      LDA.B #$02                                ;;8771|87DC+87DC/87DC\87DC; \ Enable DMA channel 1 
                      STA.W !HW_MDMAEN                          ;;8773|87DE+87DE/87DE\87DE; /  ; Regular DMA Channel Enable
                      STY.W !HW_VMAINC                          ;;8776|87E1+87E1/87E1\87E1; VRAM Address Increment Value
                      LDA.W !Layer1VramAddr+1                   ;;8779|87E4+87E4/87E4\87E4;
                      STA.W !HW_VMADD                           ;;877C|87E7+87E7/87E7\87E7; Address for VRAM Read/Write (Low Byte)
                      LDA.W !Layer1VramAddr                     ;;877F|87EA+87EA/87EA\87EA;
                      CLC                                       ;;8782|87ED+87ED/87ED\87ED;
                      ADC.B #$08                                ;;8783|87EE+87EE/87EE\87EE;
                      STA.W !HW_VMADD+1                         ;;8785|87F0+87F0/87F0\87F0; Address for VRAM Read/Write (High Byte)
                      LDX.B #$06                                ;;8788|87F3+87F3/87F3\87F3;
                    - LDA.W DATA_008A1D,X                       ;;878A|87F5+87F5/87F5\87F5;
                      STA.W !HW_DMAPARAM+$10,X                  ;;878D|87F8+87F8/87F8\87F8;
                      DEX                                       ;;8790|87FB+87FB/87FB\87FB;
                      BPL -                                     ;;8791|87FC+87FC/87FC\87FC;
                      LDA.B #$02                                ;;8793|87FE+87FE/87FE\87FE;
                      STA.W !HW_MDMAEN                          ;;8795|8800+8800/8800\8800; \ Enable DMA channel 1 ; Regular DMA Channel Enable
                      STY.W !HW_VMAINC                          ;;8798|8803+8803/8803\8803; /  ; VRAM Address Increment Value
                      LDA.W !Layer1VramAddr+1                   ;;879B|8806+8806/8806\8806;
                      INC A                                     ;;879E|8809+8809/8809\8809;
                      STA.W !HW_VMADD                           ;;879F|880A+880A/880A\880A; Address for VRAM Read/Write (Low Byte)
                      LDA.W !Layer1VramAddr                     ;;87A2|880D+880D/880D\880D;
                      STA.W !HW_VMADD+1                         ;;87A5|8810+8810/8810\8810; Address for VRAM Read/Write (High Byte)
                      LDX.B #$06                                ;;87A8|8813+8813/8813\8813;
                    - LDA.W DATA_008A24,X                       ;;87AA|8815+8815/8815\8815;
                      STA.W !HW_DMAPARAM+$10,X                  ;;87AD|8818+8818/8818\8818;
                      DEX                                       ;;87B0|881B+881B/881B\881B;
                      BPL -                                     ;;87B1|881C+881C/881C\881C;
                      LDA.B #$02                                ;;87B3|881E+881E/881E\881E; \ Enable DMA channel 1 
                      STA.W !HW_MDMAEN                          ;;87B5|8820+8820/8820\8820; /  ; Regular DMA Channel Enable
                      STY.W !HW_VMAINC                          ;;87B8|8823+8823/8823\8823; VRAM Address Increment Value
                      LDA.W !Layer1VramAddr+1                   ;;87BB|8826+8826/8826\8826;
                      INC A                                     ;;87BE|8829+8829/8829\8829;
                      STA.W !HW_VMADD                           ;;87BF|882A+882A/882A\882A; Address for VRAM Read/Write (Low Byte)
                      LDA.W !Layer1VramAddr                     ;;87C2|882D+882D/882D\882D;
                      CLC                                       ;;87C5|8830+8830/8830\8830;
                      ADC.B #$08                                ;;87C6|8831+8831/8831\8831;
                      STA.W !HW_VMADD+1                         ;;87C8|8833+8833/8833\8833; Address for VRAM Read/Write (High Byte)
                      LDX.B #$06                                ;;87CB|8836+8836/8836\8836;
                    - LDA.W DATA_008A2B,X                       ;;87CD|8838+8838/8838\8838;
                      STA.W !HW_DMAPARAM+$10,X                  ;;87D0|883B+883B/883B\883B;
                      DEX                                       ;;87D3|883E+883E/883E\883E;
                      BPL -                                     ;;87D4|883F+883F/883F\883F;
                      LDA.B #$02                                ;;87D6|8841+8841/8841\8841; \ Enable DMA channel 1 
                      STA.W !HW_MDMAEN                          ;;87D8|8843+8843/8843\8843; /  ; Regular DMA Channel Enable
                      JMP CODE_0088DD                           ;;87DB|8846+8846/8846\8846;
                                                                ;;                        ;
CODE_008849:          LDY.B #$80                                ;;87DE|8849+8849/8849\8849;
                      STY.W !HW_VMAINC                          ;;87E0|884B+884B/884B\884B; VRAM Address Increment Value
                      LDA.W !Layer1VramAddr+1                   ;;87E3|884E+884E/884E\884E;
                      STA.W !HW_VMADD                           ;;87E6|8851+8851/8851\8851; Address for VRAM Read/Write (Low Byte)
                      LDA.W !Layer1VramAddr                     ;;87E9|8854+8854/8854\8854;
                      STA.W !HW_VMADD+1                         ;;87EC|8857+8857/8857\8857; Address for VRAM Read/Write (High Byte)
                      LDX.B #$06                                ;;87EF|885A+885A/885A\885A;
                    - LDA.W DATA_008A16,X                       ;;87F1|885C+885C/885C\885C;
                      STA.W !HW_DMAPARAM+$10,X                  ;;87F4|885F+885F/885F\885F;
                      DEX                                       ;;87F7|8862+8862/8862\8862;
                      BPL -                                     ;;87F8|8863+8863/8863\8863;
                      LDA.B #$02                                ;;87FA|8865+8865/8865\8865;
                      STA.W !HW_MDMAEN                          ;;87FC|8867+8867/8867\8867; Regular DMA Channel Enable
                      STY.W !HW_VMAINC                          ;;87FF|886A+886A/886A\886A; VRAM Address Increment Value
                      LDA.W !Layer1VramAddr+1                   ;;8802|886D+886D/886D\886D;
                      STA.W !HW_VMADD                           ;;8805|8870+8870/8870\8870; Address for VRAM Read/Write (Low Byte)
                      LDA.W !Layer1VramAddr                     ;;8808|8873+8873/8873\8873;
                      CLC                                       ;;880B|8876+8876/8876\8876;
                      ADC.B #$04                                ;;880C|8877+8877/8877\8877;
                      STA.W !HW_VMADD+1                         ;;880E|8879+8879/8879\8879; Address for VRAM Read/Write (High Byte)
                      LDX.B #$06                                ;;8811|887C+887C/887C\887C;
                    - LDA.W DATA_008A1D,X                       ;;8813|887E+887E/887E\887E;
                      STA.W !HW_DMAPARAM+$10,X                  ;;8816|8881+8881/8881\8881;
                      DEX                                       ;;8819|8884+8884/8884\8884;
                      BPL -                                     ;;881A|8885+8885/8885\8885;
                      LDA.B #$40                                ;;881C|8887+8887/8887\8887;
                      STA.W !HW_DMACNT+$10                      ;;881E|8889+8889/8889\8889; Number Bytes to Transfer (Low Byte) (DMA)
                      LDA.B #$02                                ;;8821|888C+888C/888C\888C;
                      STA.W !HW_MDMAEN                          ;;8823|888E+888E/888E\888E; Regular DMA Channel Enable
                      STY.W !HW_VMAINC                          ;;8826|8891+8891/8891\8891; VRAM Address Increment Value
                      LDA.W !Layer1VramAddr+1                   ;;8829|8894+8894/8894\8894;
                      CLC                                       ;;882C|8897+8897/8897\8897;
                      ADC.B #$20                                ;;882D|8898+8898/8898\8898;
                      STA.W !HW_VMADD                           ;;882F|889A+889A/889A\889A; Address for VRAM Read/Write (Low Byte)
                      LDA.W !Layer1VramAddr                     ;;8832|889D+889D/889D\889D;
                      STA.W !HW_VMADD+1                         ;;8835|88A0+88A0/88A0\88A0; Address for VRAM Read/Write (High Byte)
                      LDX.B #$06                                ;;8838|88A3+88A3/88A3\88A3;
                    - LDA.W DATA_008A24,X                       ;;883A|88A5+88A5/88A5\88A5;
                      STA.W !HW_DMAPARAM+$10,X                  ;;883D|88A8+88A8/88A8\88A8;
                      DEX                                       ;;8840|88AB+88AB/88AB\88AB;
                      BPL -                                     ;;8841|88AC+88AC/88AC\88AC;
                      LDA.B #$02                                ;;8843|88AE+88AE/88AE\88AE;
                      STA.W !HW_MDMAEN                          ;;8845|88B0+88B0/88B0\88B0; Regular DMA Channel Enable
                      STY.W !HW_VMAINC                          ;;8848|88B3+88B3/88B3\88B3; VRAM Address Increment Value
                      LDA.W !Layer1VramAddr+1                   ;;884B|88B6+88B6/88B6\88B6;
                      CLC                                       ;;884E|88B9+88B9/88B9\88B9;
                      ADC.B #$20                                ;;884F|88BA+88BA/88BA\88BA;
                      STA.W !HW_VMADD                           ;;8851|88BC+88BC/88BC\88BC; Address for VRAM Read/Write (Low Byte)
                      LDA.W !Layer1VramAddr                     ;;8854|88BF+88BF/88BF\88BF;
                      CLC                                       ;;8857|88C2+88C2/88C2\88C2;
                      ADC.B #$04                                ;;8858|88C3+88C3/88C3\88C3;
                      STA.W !HW_VMADD+1                         ;;885A|88C5+88C5/88C5\88C5; Address for VRAM Read/Write (High Byte)
                      LDX.B #$06                                ;;885D|88C8+88C8/88C8\88C8;
                    - LDA.W DATA_008A2B,X                       ;;885F|88CA+88CA/88CA\88CA;
                      STA.W !HW_DMAPARAM+$10,X                  ;;8862|88CD+88CD/88CD\88CD;
                      DEX                                       ;;8865|88D0+88D0/88D0\88D0;
                      BPL -                                     ;;8866|88D1+88D1/88D1\88D1;
                      LDA.B #$40                                ;;8868|88D3+88D3/88D3\88D3;
                      STA.W !HW_DMACNT+$10                      ;;886A|88D5+88D5/88D5\88D5; Number Bytes to Transfer (Low Byte) (DMA)
                      LDA.B #$02                                ;;886D|88D8+88D8/88D8\88D8;
                      STA.W !HW_MDMAEN                          ;;886F|88DA+88DA/88DA\88DA; Regular DMA Channel Enable
CODE_0088DD:          LDA.B #$00                                ;;8872|88DD+88DD/88DD\88DD;
                      STA.W !Layer1VramAddr                     ;;8874|88DF+88DF/88DF\88DF;
                      LDA.W !Layer2VramAddr                     ;;8877|88E2+88E2/88E2\88E2;
                      BNE +                                     ;;887A|88E5+88E5/88E5\88E5;
                      JMP CODE_008A10                           ;;887C|88E7+88E7/88E7\88E7;
                                                                ;;                        ;
                    + LDA.B !ScreenMode                         ;;887F|88EA+88EA/88EA\88EA;
                      AND.B #$02                                ;;8881|88EC+88EC/88EC\88EC;
                      BEQ +                                     ;;8883|88EE+88EE/88EE\88EE;
                      JMP CODE_00897C                           ;;8885|88F0+88F0/88F0\88F0;
                                                                ;;                        ;
                    + LDY.B #$81                                ;;8888|88F3+88F3/88F3\88F3;
                      STY.W !HW_VMAINC                          ;;888A|88F5+88F5/88F5\88F5; VRAM Address Increment Value
                      LDA.W !Layer2VramAddr+1                   ;;888D|88F8+88F8/88F8\88F8;
                      STA.W !HW_VMADD                           ;;8890|88FB+88FB/88FB\88FB; Address for VRAM Read/Write (Low Byte)
                      LDA.W !Layer2VramAddr                     ;;8893|88FE+88FE/88FE\88FE;
                      STA.W !HW_VMADD+1                         ;;8896|8901+8901/8901\8901; Address for VRAM Read/Write (High Byte)
                      LDX.B #$06                                ;;8899|8904+8904/8904\8904;
                    - LDA.W DATA_008A32,X                       ;;889B|8906+8906/8906\8906;
                      STA.W !HW_DMAPARAM+$10,X                  ;;889E|8909+8909/8909\8909;
                      DEX                                       ;;88A1|890C+890C/890C\890C;
                      BPL -                                     ;;88A2|890D+890D/890D\890D;
                      LDA.B #$02                                ;;88A4|890F+890F/890F\890F;
                      STA.W !HW_MDMAEN                          ;;88A6|8911+8911/8911\8911; Regular DMA Channel Enable
                      STY.W !HW_VMAINC                          ;;88A9|8914+8914/8914\8914; VRAM Address Increment Value
                      LDA.W !Layer2VramAddr+1                   ;;88AC|8917+8917/8917\8917;
                      STA.W !HW_VMADD                           ;;88AF|891A+891A/891A\891A; Address for VRAM Read/Write (Low Byte)
                      LDA.W !Layer2VramAddr                     ;;88B2|891D+891D/891D\891D;
                      CLC                                       ;;88B5|8920+8920/8920\8920;
                      ADC.B #$08                                ;;88B6|8921+8921/8921\8921;
                      STA.W !HW_VMADD+1                         ;;88B8|8923+8923/8923\8923; Address for VRAM Read/Write (High Byte)
                      LDX.B #$06                                ;;88BB|8926+8926/8926\8926;
                    - LDA.W DATA_008A39,X                       ;;88BD|8928+8928/8928\8928;
                      STA.W !HW_DMAPARAM+$10,X                  ;;88C0|892B+892B/892B\892B;
                      DEX                                       ;;88C3|892E+892E/892E\892E;
                      BPL -                                     ;;88C4|892F+892F/892F\892F;
                      LDA.B #$02                                ;;88C6|8931+8931/8931\8931;
                      STA.W !HW_MDMAEN                          ;;88C8|8933+8933/8933\8933; Regular DMA Channel Enable
                      STY.W !HW_VMAINC                          ;;88CB|8936+8936/8936\8936; VRAM Address Increment Value
                      LDA.W !Layer2VramAddr+1                   ;;88CE|8939+8939/8939\8939;
                      INC A                                     ;;88D1|893C+893C/893C\893C;
                      STA.W !HW_VMADD                           ;;88D2|893D+893D/893D\893D; Address for VRAM Read/Write (Low Byte)
                      LDA.W !Layer2VramAddr                     ;;88D5|8940+8940/8940\8940;
                      STA.W !HW_VMADD+1                         ;;88D8|8943+8943/8943\8943; Address for VRAM Read/Write (High Byte)
                      LDX.B #$06                                ;;88DB|8946+8946/8946\8946;
                    - LDA.W DATA_008A40,X                       ;;88DD|8948+8948/8948\8948;
                      STA.W !HW_DMAPARAM+$10,X                  ;;88E0|894B+894B/894B\894B;
                      DEX                                       ;;88E3|894E+894E/894E\894E;
                      BPL -                                     ;;88E4|894F+894F/894F\894F;
                      LDA.B #$02                                ;;88E6|8951+8951/8951\8951;
                      STA.W !HW_MDMAEN                          ;;88E8|8953+8953/8953\8953; Regular DMA Channel Enable
                      STY.W !HW_VMAINC                          ;;88EB|8956+8956/8956\8956; VRAM Address Increment Value
                      LDA.W !Layer2VramAddr+1                   ;;88EE|8959+8959/8959\8959;
                      INC A                                     ;;88F1|895C+895C/895C\895C;
                      STA.W !HW_VMADD                           ;;88F2|895D+895D/895D\895D; Address for VRAM Read/Write (Low Byte)
                      LDA.W !Layer2VramAddr                     ;;88F5|8960+8960/8960\8960;
                      CLC                                       ;;88F8|8963+8963/8963\8963;
                      ADC.B #$08                                ;;88F9|8964+8964/8964\8964;
                      STA.W !HW_VMADD+1                         ;;88FB|8966+8966/8966\8966; Address for VRAM Read/Write (High Byte)
                      LDX.B #$06                                ;;88FE|8969+8969/8969\8969;
                    - LDA.W DATA_008A47,X                       ;;8900|896B+896B/896B\896B;
                      STA.W !HW_DMAPARAM+$10,X                  ;;8903|896E+896E/896E\896E;
                      DEX                                       ;;8906|8971+8971/8971\8971;
                      BPL -                                     ;;8907|8972+8972/8972\8972;
                      LDA.B #$02                                ;;8909|8974+8974/8974\8974;
                      STA.W !HW_MDMAEN                          ;;890B|8976+8976/8976\8976; Regular DMA Channel Enable
                      JMP CODE_008A10                           ;;890E|8979+8979/8979\8979;
                                                                ;;                        ;
CODE_00897C:          LDY.B #$80                                ;;8911|897C+897C/897C\897C;
                      STY.W !HW_VMAINC                          ;;8913|897E+897E/897E\897E; VRAM Address Increment Value
                      LDA.W !Layer2VramAddr+1                   ;;8916|8981+8981/8981\8981;
                      STA.W !HW_VMADD                           ;;8919|8984+8984/8984\8984; Address for VRAM Read/Write (Low Byte)
                      LDA.W !Layer2VramAddr                     ;;891C|8987+8987/8987\8987;
                      STA.W !HW_VMADD+1                         ;;891F|898A+898A/898A\898A; Address for VRAM Read/Write (High Byte)
                      LDX.B #$06                                ;;8922|898D+898D/898D\898D;
                    - LDA.W DATA_008A32,X                       ;;8924|898F+898F/898F\898F;
                      STA.W !HW_DMAPARAM+$10,X                  ;;8927|8992+8992/8992\8992;
                      DEX                                       ;;892A|8995+8995/8995\8995;
                      BPL -                                     ;;892B|8996+8996/8996\8996;
                      LDA.B #$02                                ;;892D|8998+8998/8998\8998;
                      STA.W !HW_MDMAEN                          ;;892F|899A+899A/899A\899A; Regular DMA Channel Enable
                      STY.W !HW_VMAINC                          ;;8932|899D+899D/899D\899D; VRAM Address Increment Value
                      LDA.W !Layer2VramAddr+1                   ;;8935|89A0+89A0/89A0\89A0;
                      STA.W !HW_VMADD                           ;;8938|89A3+89A3/89A3\89A3; Address for VRAM Read/Write (Low Byte)
                      LDA.W !Layer2VramAddr                     ;;893B|89A6+89A6/89A6\89A6;
                      CLC                                       ;;893E|89A9+89A9/89A9\89A9;
                      ADC.B #$04                                ;;893F|89AA+89AA/89AA\89AA;
                      STA.W !HW_VMADD+1                         ;;8941|89AC+89AC/89AC\89AC; Address for VRAM Read/Write (High Byte)
                      LDX.B #$06                                ;;8944|89AF+89AF/89AF\89AF;
                    - LDA.W DATA_008A39,X                       ;;8946|89B1+89B1/89B1\89B1;
                      STA.W !HW_DMAPARAM+$10,X                  ;;8949|89B4+89B4/89B4\89B4;
                      DEX                                       ;;894C|89B7+89B7/89B7\89B7;
                      BPL -                                     ;;894D|89B8+89B8/89B8\89B8;
                      LDA.B #$40                                ;;894F|89BA+89BA/89BA\89BA;
                      STA.W !HW_DMACNT+$10                      ;;8951|89BC+89BC/89BC\89BC; Number Bytes to Transfer (Low Byte) (DMA)
                      LDA.B #$02                                ;;8954|89BF+89BF/89BF\89BF;
                      STA.W !HW_MDMAEN                          ;;8956|89C1+89C1/89C1\89C1; Regular DMA Channel Enable
                      STY.W !HW_VMAINC                          ;;8959|89C4+89C4/89C4\89C4; VRAM Address Increment Value
                      LDA.W !Layer2VramAddr+1                   ;;895C|89C7+89C7/89C7\89C7;
                      CLC                                       ;;895F|89CA+89CA/89CA\89CA;
                      ADC.B #$20                                ;;8960|89CB+89CB/89CB\89CB;
                      STA.W !HW_VMADD                           ;;8962|89CD+89CD/89CD\89CD; Address for VRAM Read/Write (Low Byte)
                      LDA.W !Layer2VramAddr                     ;;8965|89D0+89D0/89D0\89D0;
                      STA.W !HW_VMADD+1                         ;;8968|89D3+89D3/89D3\89D3; Address for VRAM Read/Write (High Byte)
                      LDX.B #$06                                ;;896B|89D6+89D6/89D6\89D6;
                    - LDA.W DATA_008A40,X                       ;;896D|89D8+89D8/89D8\89D8;
                      STA.W !HW_DMAPARAM+$10,X                  ;;8970|89DB+89DB/89DB\89DB;
                      DEX                                       ;;8973|89DE+89DE/89DE\89DE;
                      BPL -                                     ;;8974|89DF+89DF/89DF\89DF;
                      LDA.B #$02                                ;;8976|89E1+89E1/89E1\89E1;
                      STA.W !HW_MDMAEN                          ;;8978|89E3+89E3/89E3\89E3; Regular DMA Channel Enable
                      STY.W !HW_VMAINC                          ;;897B|89E6+89E6/89E6\89E6; VRAM Address Increment Value
                      LDA.W !Layer2VramAddr+1                   ;;897E|89E9+89E9/89E9\89E9;
                      CLC                                       ;;8981|89EC+89EC/89EC\89EC;
                      ADC.B #$20                                ;;8982|89ED+89ED/89ED\89ED;
                      STA.W !HW_VMADD                           ;;8984|89EF+89EF/89EF\89EF; Address for VRAM Read/Write (Low Byte)
                      LDA.W !Layer2VramAddr                     ;;8987|89F2+89F2/89F2\89F2;
                      CLC                                       ;;898A|89F5+89F5/89F5\89F5;
                      ADC.B #$04                                ;;898B|89F6+89F6/89F6\89F6;
                      STA.W !HW_VMADD+1                         ;;898D|89F8+89F8/89F8\89F8; Address for VRAM Read/Write (High Byte)
                      LDX.B #$06                                ;;8990|89FB+89FB/89FB\89FB;
                    - LDA.W DATA_008A47,X                       ;;8992|89FD+89FD/89FD\89FD;
                      STA.W !HW_DMAPARAM+$10,X                  ;;8995|8A00+8A00/8A00\8A00;
                      DEX                                       ;;8998|8A03+8A03/8A03\8A03;
                      BPL -                                     ;;8999|8A04+8A04/8A04\8A04;
                      LDA.B #$40                                ;;899B|8A06+8A06/8A06\8A06;
                      STA.W !HW_DMACNT+$10                      ;;899D|8A08+8A08/8A08\8A08; Number Bytes to Transfer (Low Byte) (DMA)
                      LDA.B #$02                                ;;89A0|8A0B+8A0B/8A0B\8A0B;
                      STA.W !HW_MDMAEN                          ;;89A2|8A0D+8A0D/8A0D\8A0D; Regular DMA Channel Enable
CODE_008A10:          LDA.B #$00                                ;;89A5|8A10+8A10/8A10\8A10;
                      STA.W !Layer2VramAddr                     ;;89A7|8A12+8A12/8A12\8A12;
                      RTL                                       ;;89AA|8A15+8A15/8A15\8A15;
                                                                ;;                        ;
                                                                ;;                        ;
DATA_008A16:          db $01,$18                                ;;89AB|8A16+8A16/8A16\8A16;
                      dl !Layer1VramBuffer&$FFFF                ;;89AD|8A18+8A18/8A18\8A18;
                      dw $0040                                  ;;89B0|8A1B+8A1B/8A1B\8A1B;
                                                                ;;                        ;
DATA_008A1D:          db $01,$18                                ;;89B2|8A1D+8A1D/8A1D\8A1D;
                      dl !Layer1VramBuffer+$40&$FFFF            ;;89B4|8A1F+8A1F/8A1F\8A1F;
                      dw $002C                                  ;;89B7|8A22+8A22/8A22\8A22;
                                                                ;;                        ;
DATA_008A24:          db $01,$18                                ;;89B9|8A24+8A24/8A24\8A24;
                      dl !Layer1VramBuffer+$80&$FFFF            ;;89BB|8A26+8A26/8A26\8A26;
                      dw $0040                                  ;;89BE|8A29+8A29/8A29\8A29;
                                                                ;;                        ;
DATA_008A2B:          db $01,$18                                ;;89C0|8A2B+8A2B/8A2B\8A2B;
                      dl !Layer1VramBuffer+$C0&$FFFF            ;;89C2|8A2D+8A2D/8A2D\8A2D;
                      dw $002C                                  ;;89C5|8A30+8A30/8A30\8A30;
                                                                ;;                        ;
DATA_008A32:          db $01,$18                                ;;89C7|8A32+8A32/8A32\8A32;
                      dl !Layer2VramBuffer&$FFFF                ;;89C9|8A34+8A34/8A34\8A34;
                      dw $0040                                  ;;89CC|8A37+8A37/8A37\8A37;
                                                                ;;                        ;
DATA_008A39:          db $01,$18                                ;;89CE|8A39+8A39/8A39\8A39;
                      dl !Layer2VramBuffer+$40&$FFFF            ;;89D0|8A3B+8A3B/8A3B\8A3B;
                      dw $002C                                  ;;89D3|8A3E+8A3E/8A3E\8A3E;
                                                                ;;                        ;
DATA_008A40:          db $01,$18                                ;;89D5|8A40+8A40/8A40\8A40;
                      dl !Layer2VramBuffer+$80&$FFFF            ;;89D7|8A42+8A42/8A42\8A42;
                      dw $0040                                  ;;89DA|8A45+8A45/8A45\8A45;
                                                                ;;                        ;
DATA_008A47:          db $01,$18                                ;;89DC|8A47+8A47/8A47\8A47;
                      dl !Layer2VramBuffer+$C0&$FFFF            ;;89DE|8A49+8A49/8A49\8A49;
                      dw $002C                                  ;;89E1|8A4C+8A4C/8A4C\8A4C;
                                                                ;;                        ;
ClearStack:           REP #$30                                  ;;89E3|8A4E+8A4E/8A4E\8A4E; Index (16 bit) Accum (16 bit) 
                      LDX.W #$1FFE                              ;;89E5|8A50+8A50/8A50\8A50;
CODE_008A53:          STZ.B !_0,X                               ;;89E8|8A53+8A53/8A53\8A53;
CODE_008A55:          DEX                                       ;;89EA|8A55+8A55/8A55\8A55;
                      DEX                                       ;;89EB|8A56+8A56/8A56\8A56;
                      CPX.W #$01FF                              ;;89EC|8A57+8A57/8A57\8A57;
                      BPL CODE_008A61                           ;;89EF|8A5A+8A5A/8A5A\8A5A;
                      CPX.W #$0100                              ;;89F1|8A5C+8A5C/8A5C\8A5C;
                      BPL CODE_008A55                           ;;89F4|8A5F+8A5F/8A5F\8A5F;
CODE_008A61:          CPX.W #$FFFE                              ;;89F6|8A61+8A61/8A61\8A61;
                      BNE CODE_008A53                           ;;89F9|8A64+8A64/8A64\8A64;
                      LDA.W #$0000                              ;;89FB|8A66+8A66/8A66\8A66;
                      STA.L !DynStripeImgSize                   ;;89FE|8A69+8A69/8A69\8A69;
                      STZ.W !DynPaletteIndex                    ;;8A02|8A6D+8A6D/8A6D\8A6D;
                      SEP #$30                                  ;;8A05|8A70+8A70/8A70\8A70; Index (8 bit) Accum (8 bit) 
                      LDA.B #$FF                                ;;8A07|8A72+8A72/8A72\8A72;
                      STA.L !DynamicStripeImage                 ;;8A09|8A74+8A74/8A74\8A74;
                      RTS                                       ;;8A0D|8A78+8A78/8A78\8A78;
                                                                ;;                        ;
                   if ver_is_lores(!_VER)             ;\   IF   ;;++++++++++++++++++++++++; J, U, SS, & E0
SetUpScreen:          STZ.W !HW_SETINI                          ;;8A0E|8A79+8A79/8A79     ; Set "Screen Initial Settings" to x00 ; Screen Initial Settings
                   else                               ;<  ELSE  ;;------------------------; E1
SetUpScreen:          LDA.B #$04                                ;;                   \8A79; 239 lines
                      STA.W !HW_SETINI                          ;;                   \8A7B;
                   endif                              ;/ ENDIF  ;;++++++++++++++++++++++++;
                      STZ.W !HW_MOSAIC                          ;;8A11|8A7C+8A7C/8A7C\8A7E; Turn off mosaic ; Mosaic Size and BG Enable
                      LDA.B #$23                                ;;8A14|8A7F+8A7F/8A7F\8A81;
                      STA.W !HW_BG1SC                           ;;8A16|8A81+8A81/8A81\8A83; BG 1 Address and Size
                      LDA.B #$33                                ;;8A19|8A84+8A84/8A84\8A86;
                      STA.W !HW_BG2SC                           ;;8A1B|8A86+8A86/8A86\8A88; ; BG 2 Address and Size
                      LDA.B #$53                                ;;8A1E|8A89+8A89/8A89\8A8B;
                      STA.W !HW_BG3SC                           ;;8A20|8A8B+8A8B/8A8B\8A8D; BG 3 Address and Size
                      LDA.B #$00                                ;;8A23|8A8E+8A8E/8A8E\8A90;
                      STA.W !HW_BG12NBA                         ;;8A25|8A90+8A90/8A90\8A92; BG 1 & 2 Tile Data Designation
                      LDA.B #$04                                ;;8A28|8A93+8A93/8A93\8A95;
                      STA.W !HW_BG34NBA                         ;;8A2A|8A95+8A95/8A95\8A97; BG 3 & 4 Tile Data Designation
                      STZ.B !Layer12Window                      ;;8A2D|8A98+8A98/8A98\8A9A;
                      STZ.B !Layer34Window                      ;;8A2F|8A9A+8A9A/8A9A\8A9C;
                      STZ.B !OBJCWWindow                        ;;8A31|8A9C+8A9C/8A9C\8A9E;
                      STZ.W !HW_WBGLOG                          ;;8A33|8A9E+8A9E/8A9E\8AA0; BG 1, 2, 3 and 4 Window Logic Settings
                      STZ.W !HW_WOBJLOG                         ;;8A36|8AA1+8AA1/8AA1\8AA3; Color and OBJ Window Logic Settings
                      STZ.W !HW_TMW                             ;;8A39|8AA4+8AA4/8AA4\8AA6; Window Mask Designation for Main Screen
                      STZ.W !HW_TSW                             ;;8A3C|8AA7+8AA7/8AA7\8AA9; Window Mask Designation for Sub Screen
                      LDA.B #$02                                ;;8A3F|8AAA+8AAA/8AAA\8AAC;
                      STA.B !ColorAddition                      ;;8A41|8AAC+8AAC/8AAC\8AAE;
                      LDA.B #$80                                ;;8A43|8AAE+8AAE/8AAE\8AB0; \ Set Mode7 "Screen Over" to %10000000, disable Mode7 flipping 
                      STA.W !HW_M7SEL                           ;;8A45|8AB0+8AB0/8AB0\8AB2; /  ; Initial Setting for Mode 7
                      RTS                                       ;;8A48|8AB3+8AB3/8AB3\8AB5; Return 
                                                                ;;                        ;
                                                                ;;                        ;
DATA_008AB4:          dw $0000,$00FE,$0000,$00FE                ;;8A49|8AB4+8AB4/8AB4\8AB6;
DATA_008ABC:          dw $0000,$0002,$0000,$0002                ;;8A51|8ABC+8ABC/8ABC\8ABE;
                                                                ;;                        ;
                      db $00,$00,$00,$01,$FF,$FF,$00,$10        ;;8A59|8AC4+8AC4/8AC4\8AC6; unused table?
                      db $F0                                    ;;8A61|8ACC+8ACC/8ACC\8ACE;
                                                                ;;                        ;
CODE_008ACD:          LDA.B !Mode7YScale                        ;;8A62|8ACD+8ACD/8ACD\8ACF;
                      STA.B !_0                                 ;;8A64|8ACF+8ACF/8ACF\8AD1;
                      REP #$30                                  ;;8A66|8AD1+8AD1/8AD1\8AD3; Index (16 bit) Accum (16 bit) 
                      JSR CODE_008AE8                           ;;8A68|8AD3+8AD3/8AD3\8AD5;
                      LDA.B !Mode7XScale                        ;;8A6B|8AD6+8AD6/8AD6\8AD8;
                      STA.B !_0                                 ;;8A6D|8AD8+8AD8/8AD8\8ADA;
                      REP #$30                                  ;;8A6F|8ADA+8ADA/8ADA\8ADC; Index (16 bit) Accum (16 bit) 
                      LDA.B !Mode7ParamA                        ;;8A71|8ADC+8ADC/8ADC\8ADE;
                      STA.B !Mode7ParamD                        ;;8A73|8ADE+8ADE/8ADE\8AE0;
                      LDA.B !Mode7ParamB                        ;;8A75|8AE0+8AE0/8AE0\8AE2;
                      EOR.W #$FFFF                              ;;8A77|8AE2+8AE2/8AE2\8AE4;
                      INC A                                     ;;8A7A|8AE5+8AE5/8AE5\8AE7;
                      STA.B !Mode7ParamC                        ;;8A7B|8AE6+8AE6/8AE6\8AE8;
CODE_008AE8:          LDA.B !Mode7Angle                         ;;8A7D|8AE8+8AE8/8AE8\8AEA;
                      ASL A                                     ;;8A7F|8AEA+8AEA/8AEA\8AEC;
                      PHA                                       ;;8A80|8AEB+8AEB/8AEB\8AED;
                      XBA                                       ;;8A81|8AEC+8AEC/8AEC\8AEE;
                      AND.W #$0003                              ;;8A82|8AED+8AED/8AED\8AEF;
                      ASL A                                     ;;8A85|8AF0+8AF0/8AF0\8AF2;
                      TAY                                       ;;8A86|8AF1+8AF1/8AF1\8AF3;
                      PLA                                       ;;8A87|8AF2+8AF2/8AF2\8AF4;
                      AND.W #$00FE                              ;;8A88|8AF3+8AF3/8AF3\8AF5;
                      EOR.W DATA_008AB4,Y                       ;;8A8B|8AF6+8AF6/8AF6\8AF8;
                      CLC                                       ;;8A8E|8AF9+8AF9/8AF9\8AFB;
                      ADC.W DATA_008ABC,Y                       ;;8A8F|8AFA+8AFA/8AFA\8AFC;
                      TAX                                       ;;8A92|8AFD+8AFD/8AFD\8AFF;
                      JSR CODE_008B2B                           ;;8A93|8AFE+8AFE/8AFE\8B00;
                      CPY.W #$0004                              ;;8A96|8B01+8B01/8B01\8B03;
                      BCC +                                     ;;8A99|8B04+8B04/8B04\8B06;
                      EOR.W #$FFFF                              ;;8A9B|8B06+8B06/8B06\8B08;
                      INC A                                     ;;8A9E|8B09+8B09/8B09\8B0B;
                    + STA.B !Mode7ParamB                        ;;8A9F|8B0A+8B0A/8B0A\8B0C;
                      TXA                                       ;;8AA1|8B0C+8B0C/8B0C\8B0E;
                      EOR.W #$00FE                              ;;8AA2|8B0D+8B0D/8B0D\8B0F;
                      CLC                                       ;;8AA5|8B10+8B10/8B10\8B12;
                      ADC.W #$0002                              ;;8AA6|8B11+8B11/8B11\8B13;
                      AND.W #$01FF                              ;;8AA9|8B14+8B14/8B14\8B16;
                      TAX                                       ;;8AAC|8B17+8B17/8B17\8B19;
                      JSR CODE_008B2B                           ;;8AAD|8B18+8B18/8B18\8B1A;
                      DEY                                       ;;8AB0|8B1B+8B1B/8B1B\8B1D;
                      DEY                                       ;;8AB1|8B1C+8B1C/8B1C\8B1E;
                      CPY.W #$0004                              ;;8AB2|8B1D+8B1D/8B1D\8B1F;
                      BCS +                                     ;;8AB5|8B20+8B20/8B20\8B22;
                      EOR.W #$FFFF                              ;;8AB7|8B22+8B22/8B22\8B24;
                      INC A                                     ;;8ABA|8B25+8B25/8B25\8B27;
                    + STA.B !Mode7ParamA                        ;;8ABB|8B26+8B26/8B26\8B28;
                      SEP #$30                                  ;;8ABD|8B28+8B28/8B28\8B2A; Index (8 bit) Accum (8 bit) 
                      RTS                                       ;;8ABF|8B2A+8B2A/8B2A\8B2C;
                                                                ;;                        ;
CODE_008B2B:          SEP #$20                                  ;;8AC0|8B2B+8B2B/8B2B\8B2D; Accum (8 bit) 
                      LDA.W DATA_008B57+1,X                     ;;8AC2|8B2D+8B2D/8B2D\8B2F;
                      BEQ +                                     ;;8AC5|8B30+8B30/8B30\8B32;
                      LDA.B !_0                                 ;;8AC7|8B32+8B32/8B32\8B34;
                    + STA.B !_1                                 ;;8AC9|8B34+8B34/8B34\8B36;
                      LDA.W DATA_008B57,X                       ;;8ACB|8B36+8B36/8B36\8B38;
                      STA.W !HW_WRMPYA                          ;;8ACE|8B39+8B39/8B39\8B3B; Multiplicand A
                      LDA.B !_0                                 ;;8AD1|8B3C+8B3C/8B3C\8B3E;
                      STA.W !HW_WRMPYB                          ;;8AD3|8B3E+8B3E/8B3E\8B40; Multplier B
                      NOP                                       ;;8AD6|8B41+8B41/8B41\8B43;
                      NOP                                       ;;8AD7|8B42+8B42/8B42\8B44;
                      NOP                                       ;;8AD8|8B43+8B43/8B43\8B45;
                      NOP                                       ;;8AD9|8B44+8B44/8B44\8B46;
                      LDA.W !HW_RDMPY+1                         ;;8ADA|8B45+8B45/8B45\8B47; Product/Remainder Result (High Byte)
                      CLC                                       ;;8ADD|8B48+8B48/8B48\8B4A;
                      ADC.B !_1                                 ;;8ADE|8B49+8B49/8B49\8B4B;
                      XBA                                       ;;8AE0|8B4B+8B4B/8B4B\8B4D;
                      LDA.W !HW_RDMPY                           ;;8AE1|8B4C+8B4C/8B4C\8B4E; Product/Remainder Result (Low Byte)
                      REP #$20                                  ;;8AE4|8B4F+8B4F/8B4F\8B51; Accum (16 bit) 
                      LSR A                                     ;;8AE6|8B51+8B51/8B51\8B53;
                      LSR A                                     ;;8AE7|8B52+8B52/8B52\8B54;
                      LSR A                                     ;;8AE8|8B53+8B53/8B53\8B55;
                      LSR A                                     ;;8AE9|8B54+8B54/8B54\8B56;
                      LSR A                                     ;;8AEA|8B55+8B55/8B55\8B57;
                      RTS                                       ;;8AEB|8B56+8B56/8B56\8B58;
                                                                ;;                        ;
DATA_008B57:          dw $0000,$0003,$0006,$0009                ;;8AEC|8B57+8B57/8B57\8B59;
                      dw $000C,$000F,$0012,$0015                ;;8AF4|8B5F+8B5F/8B5F\8B61;
                      dw $0019,$001C,$001F,$0022                ;;8AFC|8B67+8B67/8B67\8B69;
                      dw $0025,$0028,$002B,$002E                ;;8B04|8B6F+8B6F/8B6F\8B71;
                      dw $0031,$0035,$0038,$003B                ;;8B0C|8B77+8B77/8B77\8B79;
                      dw $003E,$0041,$0044,$0047                ;;8B14|8B7F+8B7F/8B7F\8B81;
                      dw $004A,$004D,$0050,$0053                ;;8B1C|8B87+8B87/8B87\8B89;
                      dw $0056,$0059,$005C,$005F                ;;8B24|8B8F+8B8F/8B8F\8B91;
                      dw $0061,$0064,$0067,$006A                ;;8B2C|8B97+8B97/8B97\8B99;
                      dw $006D,$0070,$0073,$0075                ;;8B34|8B9F+8B9F/8B9F\8BA1;
                      dw $0078,$007B,$007E,$0080                ;;8B3C|8BA7+8BA7/8BA7\8BA9;
                      dw $0083,$0086,$0088,$008B                ;;8B44|8BAF+8BAF/8BAF\8BB1;
                      dw $008E,$0090,$0093,$0095                ;;8B4C|8BB7+8BB7/8BB7\8BB9;
                      dw $0098,$009B,$009D,$009F                ;;8B54|8BBF+8BBF/8BBF\8BC1;
                      dw $00A2,$00A4,$00A7,$00A9                ;;8B5C|8BC7+8BC7/8BC7\8BC9;
                      dw $00AB,$00AE,$00B0,$00B2                ;;8B64|8BCF+8BCF/8BCF\8BD1;
                      dw $00B5,$00B7,$00B9,$00BB                ;;8B6C|8BD7+8BD7/8BD7\8BD9;
                      dw $00BD,$00BF,$00C1,$00C3                ;;8B74|8BDF+8BDF/8BDF\8BE1;
                      dw $00C5,$00C7,$00C9,$00CB                ;;8B7C|8BE7+8BE7/8BE7\8BE9;
                      dw $00CD,$00CF,$00D1,$00D3                ;;8B84|8BEF+8BEF/8BEF\8BF1;
                      dw $00D4,$00D6,$00D8,$00D9                ;;8B8C|8BF7+8BF7/8BF7\8BF9;
                      dw $00DB,$00DD,$00DE,$00E0                ;;8B94|8BFF+8BFF/8BFF\8C01;
                      dw $00E1,$00E3,$00E4,$00E6                ;;8B9C|8C07+8C07/8C07\8C09;
                      dw $00E7,$00E8,$00EA,$00EB                ;;8BA4|8C0F+8C0F/8C0F\8C11;
                      dw $00EC,$00ED,$00EE,$00EF                ;;8BAC|8C17+8C17/8C17\8C19;
                      dw $00F1,$00F2,$00F3,$00F4                ;;8BB4|8C1F+8C1F/8C1F\8C21;
                      dw $00F4,$00F5,$00F6,$00F7                ;;8BBC|8C27+8C27/8C27\8C29;
                      dw $00F8,$00F9,$00F9,$00FA                ;;8BC4|8C2F+8C2F/8C2F\8C31;
                      dw $00FB,$00FB,$00FC,$00FC                ;;8BCC|8C37+8C37/8C37\8C39;
                      dw $00FD,$00FD,$00FE,$00FE                ;;8BD4|8C3F+8C3F/8C3F\8C41;
                      dw $00FE,$00FF,$00FF,$00FF                ;;8BDC|8C47+8C47/8C47\8C49;
                      dw $00FF,$00FF,$00FF,$00FF                ;;8BE4|8C4F+8C4F/8C4F\8C51;
                      dw $0100                                  ;;8BEC|8C57+8C57/8C57\8C59;
                                                                ;;                        ;
TallNumbers:          db $B7,$3C,$B7,$BC,$B8,$3C,$B9,$3C        ;;8BEE|8C59+8C59/8C59\8C5B;
                      db $BA,$3C,$BB,$3C,$BA,$3C,$BA,$BC        ;;8BF6|8C61+8C61/8C61\8C63;
                      db $BC,$3C,$BD,$3C,$BE,$3C,$BF,$3C        ;;8BFE|8C69+8C69/8C69\8C6B;
                      db $C0,$3C,$B7,$BC,$C1,$3C,$B9,$3C        ;;8C06|8C71+8C71/8C71\8C73;
                      db $C2,$3C,$C2,$BC,$B7,$3C,$C0,$FC        ;;8C0E|8C79+8C79/8C79\8C7B;
                                                                ;;                        ;
StatusBarRow1:        db $3A,$38,$3B,$38,$3B,$38,$3A,$78        ;;8C16|8C81+8C81/8C81\8C83;
                                                                ;;                        ;
StatusBarRow2:        db $30,$28,$31,$28,$32,$28,$33,$28        ;;8C1E|8C89+8C89/8C89\8C8B;
                      db $34,$28,$FC,$38,$FC,$3C,$FC,$3C        ;;8C26|8C91+8C91/8C91\8C93;
                      db $FC,$3C,$FC,$3C,$FC,$38,$FC,$38        ;;8C2E|8C99+8C99/8C99\8C9B;
                      db $4A,$38,$FC,$38,$FC,$38,$4A,$78        ;;8C36|8CA1+8CA1/8CA1\8CA3;
                      db $FC,$38,$3D,$3C,$3E,$3C,$3F,$3C        ;;8C3E|8CA9+8CA9/8CA9\8CAB;
                      db $FC,$38,$FC,$38,$FC,$38,$2E,$3C        ;;8C46|8CB1+8CB1/8CB1\8CB3;
                      db $26,$38,$FC,$38,$FC,$38,$00,$38        ;;8C4E|8CB9+8CB9/8CB9\8CBB;
                                                                ;;                        ;
StatusBarRow3:        db $26,$38,$FC,$38,$00,$38,$FC,$38        ;;8C56|8CC1+8CC1/8CC1\8CC3;
                      db $FC,$38,$FC,$38,$64,$28,$26,$38        ;;8C5E|8CC9+8CC9/8CC9\8CCB;
                      db $FC,$38,$FC,$38,$FC,$38,$4A,$38        ;;8C66|8CD1+8CD1/8CD1\8CD3;
                      db $FC,$38,$FC,$38,$4A,$78,$FC,$38        ;;8C6E|8CD9+8CD9/8CD9\8CDB;
                      db $FE,$3C,$FE,$3C,$00,$3C,$FC,$38        ;;8C76|8CE1+8CE1/8CE1\8CE3;
                      db $FC,$38,$FC,$38,$FC,$38,$FC,$38        ;;8C7E|8CE9+8CE9/8CE9\8CEB;
                      db $FC,$38,$FC,$38,$00,$38                ;;8C86|8CF1+8CF1/8CF1\8CF3;
                                                                ;;                        ;
StatusBarRow4:        db $3A,$B8,$3B,$B8,$3B,$B8,$3A,$F8        ;;8C8C|8CF7+8CF7/8CF7\8CF9;
                                                                ;;                        ;
GM04DoDMA:            LDA.B #$80                                ;;8C94|8CFF+8CFF/8CFF\8D01; More DMA ; Accum (8 bit) 
                      STA.W !HW_VMAINC                          ;;8C96|8D01+8D01/8D01\8D03; Increment when $2119 accessed ; VRAM Address Increment Value
                      LDA.B #$2E                                ;;8C99|8D04+8D04/8D04\8D06; \VRAM address = #$502E 
                      STA.W !HW_VMADD                           ;;8C9B|8D06+8D06/8D06\8D08;  | ; Address for VRAM Read/Write (Low Byte)
                      LDA.B #$50                                ;;8C9E|8D09+8D09/8D09\8D0B;  | 
                      STA.W !HW_VMADD+1                         ;;8CA0|8D0B+8D0B/8D0B\8D0D; / ; Address for VRAM Read/Write (High Byte)
                      LDX.B #$06                                ;;8CA3|8D0E+8D0E/8D0E\8D10;
                    - LDA.W DATA_008D90,X                       ;;8CA5|8D10+8D10/8D10\8D12;
                      STA.W !HW_DMAPARAM+$10,X                  ;;8CA8|8D13+8D13/8D13\8D15; Load up the DMA regs 
                      DEX                                       ;;8CAB|8D16+8D16/8D16\8D18; DMA Source = 8C:8118 (...) 
                      BPL -                                     ;;8CAC|8D17+8D17/8D17\8D19; Dest = $2118, Transfer: #$08 bytes 
                      LDA.B #$02                                ;;8CAE|8D19+8D19/8D19\8D1B;
                      STA.W !HW_MDMAEN                          ;;8CB0|8D1B+8D1B/8D1B\8D1D; Do the DMA ; Regular DMA Channel Enable
                      LDA.B #$80                                ;;8CB3|8D1E+8D1E/8D1E\8D20; \ Set VRAM mode = same as above 
                      STA.W !HW_VMAINC                          ;;8CB5|8D20+8D20/8D20\8D22;  |Address = #$5042 ; VRAM Address Increment Value
                      LDA.B #$42                                ;;8CB8|8D23+8D23/8D23\8D25;  | 
                      STA.W !HW_VMADD                           ;;8CBA|8D25+8D25/8D25\8D27;  | ; Address for VRAM Read/Write (Low Byte)
                      LDA.B #$50                                ;;8CBD|8D28+8D28/8D28\8D2A;  | 
                      STA.W !HW_VMADD+1                         ;;8CBF|8D2A+8D2A/8D2A\8D2C; /  ; Address for VRAM Read/Write (High Byte)
                      LDX.B #$06                                ;;8CC2|8D2D+8D2D/8D2D\8D2F; \ Set up more DMA 
                    - LDA.W DATA_008D97,X                       ;;8CC4|8D2F+8D2F/8D2F\8D31;  |Dest = $2100 
                      STA.W !HW_DMAPARAM+$10,X                  ;;8CC7|8D32+8D32/8D32\8D34;  |Fixed source address = $89:1801 (Lunar Address: 7E:1801) 
                      DEX                                       ;;8CCA|8D35+8D35/8D35\8D37;  |#$808C bytes to transfer 
                      BPL -                                     ;;8CCB|8D36+8D36/8D36\8D38; /Type = One reg write once 
                      LDA.B #$02                                ;;8CCD|8D38+8D38/8D38\8D3A;
                      STA.W !HW_MDMAEN                          ;;8CCF|8D3A+8D3A/8D3A\8D3C; Start DMA ; Regular DMA Channel Enable
                      LDA.B #$80                                ;;8CD2|8D3D+8D3D/8D3D\8D3F; \prep VRAM for another write 
                      STA.W !HW_VMAINC                          ;;8CD4|8D3F+8D3F/8D3F\8D41;  | ; VRAM Address Increment Value
                      LDA.B #$63                                ;;8CD7|8D42+8D42/8D42\8D44;  | 
                      STA.W !HW_VMADD                           ;;8CD9|8D44+8D44/8D44\8D46;  | ; Address for VRAM Read/Write (Low Byte)
                      LDA.B #$50                                ;;8CDC|8D47+8D47/8D47\8D49;  | 
                      STA.W !HW_VMADD+1                         ;;8CDE|8D49+8D49/8D49\8D4B; / ; Address for VRAM Read/Write (High Byte)
                      LDX.B #$06                                ;;8CE1|8D4C+8D4C/8D4C\8D4E; \ Load up DMA again 
                    - LDA.W DATA_008D9E,X                       ;;8CE3|8D4E+8D4E/8D4E\8D50;  |Dest = $2118 
                      STA.W !HW_DMAPARAM+$10,X                  ;;8CE6|8D51+8D51/8D51\8D53;  |Source Address = $39:8CC1 
                      DEX                                       ;;8CE9|8D54+8D54/8D54\8D56;  |Size = #$0100 bytes 
                      BPL -                                     ;;8CEA|8D55+8D55/8D55\8D57; /Type = Two reg write once 
                      LDA.B #$02                                ;;8CEC|8D57+8D57/8D57\8D59; \Start Transfer 
                      STA.W !HW_MDMAEN                          ;;8CEE|8D59+8D59/8D59\8D5B; / ; Regular DMA Channel Enable
                      LDA.B #$80                                ;;8CF1|8D5C+8D5C/8D5C\8D5E; \ 
                      STA.W !HW_VMAINC                          ;;8CF3|8D5E+8D5E/8D5E\8D60;  |Set up VRAM once more ; VRAM Address Increment Value
                      LDA.B #$8E                                ;;8CF6|8D61+8D61/8D61\8D63;  | 
                      STA.W !HW_VMADD                           ;;8CF8|8D63+8D63/8D63\8D65;  | ; Address for VRAM Read/Write (Low Byte)
                      LDA.B #$50                                ;;8CFB|8D66+8D66/8D66\8D68;  | 
                      STA.W !HW_VMADD+1                         ;;8CFD|8D68+8D68/8D68\8D6A; / ; Address for VRAM Read/Write (High Byte)
                      LDX.B #$06                                ;;8D00|8D6B+8D6B/8D6B\8D6D; \Last DMA... 
                    - LDA.W DATA_008DA5,X                       ;;8D02|8D6D+8D6D/8D6D\8D6F;  |Reg = $2118 Type = Two reg write once 
                      STA.W !HW_DMAPARAM+$10,X                  ;;8D05|8D70+8D70/8D70\8D72;  |Source Address = $08:8CF7 
                      DEX                                       ;;8D08|8D73+8D73/8D73\8D75;  |Size = #$9C00 bytes (o_o) 
                      BPL -                                     ;;8D09|8D74+8D74/8D74\8D76; / 
                      LDA.B #$02                                ;;8D0B|8D76+8D76/8D76\8D78; \Transfer 
                      STA.W !HW_MDMAEN                          ;;8D0D|8D78+8D78/8D78\8D7A; / ; Regular DMA Channel Enable
                      LDX.B #$36                                ;;8D10|8D7B+8D7B/8D7B\8D7D; \Copy some data into RAM 
                      LDY.B #$6C                                ;;8D12|8D7D+8D7D/8D7D\8D7F;  | 
                    - LDA.W StatusBarRow2,Y                     ;;8D14|8D7F+8D7F/8D7F\8D81;  | 
                      STA.W !StatusBar,X                        ;;8D17|8D82+8D82/8D82\8D84;  | 59
                      DEY                                       ;;8D1A|8D85+8D85/8D85\8D87;  | 
                      DEY                                       ;;8D1B|8D86+8D86/8D86\8D88;  | 
                      DEX                                       ;;8D1C|8D87+8D87/8D87\8D89;  | 
                      BPL -                                     ;;8D1D|8D88+8D88/8D88\8D8A; / 
                      LDA.B #con($28,$28,$28,$22,$22)           ;;8D1F|8D8A+8D8A/8D8A\8D8C;
                      STA.W !InGameTimerFrames                  ;;8D21|8D8C+8D8C/8D8C\8D8E; #$28 -> Timer frame counter 
                      RTS                                       ;;8D24|8D8F+8D8F/8D8F\8D91; Return 
                                                                ;;                        ;
DATA_008D90:          db $01,$18                                ;;8D25|8D90+8D90/8D90\8D92;
                      dl StatusBarRow1                          ;;8D27|8D92+8D92/8D92\8D94;
                      dw $0008                                  ;;8D2A|8D95+8D95/8D95\8D97;
                                                                ;;                        ;
DATA_008D97:          db $01,$18                                ;;8D2C|8D97+8D97/8D97\8D99;
                      dl StatusBarRow2                          ;;8D2E|8D99+8D99/8D99\8D9B;
                      dw $0038                                  ;;8D31|8D9C+8D9C/8D9C\8D9E;
                                                                ;;                        ;
DATA_008D9E:          db $01,$18                                ;;8D33|8D9E+8D9E/8D9E\8DA0;
                      dl StatusBarRow3                          ;;8D35|8DA0+8DA0/8DA0\8DA2;
                      dw $0036                                  ;;8D38|8DA3+8DA3/8DA3\8DA5;
                                                                ;;                        ;
DATA_008DA5:          db $01,$18                                ;;8D3A|8DA5+8DA5/8DA5\8DA7;
                      dl StatusBarRow4                          ;;8D3C|8DA7+8DA7/8DA7\8DA9;
                      dw $0008                                  ;;8D3F|8DAA+8DAA/8DAA\8DAC;
                                                                ;;                        ;
DrawStatusBar:        STZ.W !HW_VMAINC                          ;;8D41|8DAC+8DAC/8DAC\8DAE; Set VRAM Address Increment Value to x00 ; VRAM Address Increment Value
                      LDA.B #$42                                ;;8D44|8DAF+8DAF/8DAF\8DB1; \  
                      STA.W !HW_VMADD                           ;;8D46|8DB1+8DB1/8DB1\8DB3;  |Set Address for VRAM Read/Write to x5042 ; Address for VRAM Read/Write (Low Byte)
                      LDA.B #$50                                ;;8D49|8DB4+8DB4/8DB4\8DB6;  | 
                      STA.W !HW_VMADD+1                         ;;8D4B|8DB6+8DB6/8DB6\8DB8; /  ; Address for VRAM Read/Write (High Byte)
                      LDX.B #$06                                ;;8D4E|8DB9+8DB9/8DB9\8DBB; \  
                    - LDA.W DMAdata_StBr1,X                     ;;8D50|8DBB+8DBB/8DBB\8DBD;  |Load settings from DMAdata_StBr1 into DMA channel 1 
                      STA.W !HW_DMAPARAM+$10,X                  ;;8D53|8DBE+8DBE/8DBE\8DC0;  | 
                      DEX                                       ;;8D56|8DC1+8DC1/8DC1\8DC3;  | 
                      BPL -                                     ;;8D57|8DC2+8DC2/8DC2\8DC4; /  
                      LDA.B #$02                                ;;8D59|8DC4+8DC4/8DC4\8DC6; \ Activate DMA channel 1 
                      STA.W !HW_MDMAEN                          ;;8D5B|8DC6+8DC6/8DC6\8DC8; /  ; Regular DMA Channel Enable
                      STZ.W !HW_VMAINC                          ;;8D5E|8DC9+8DC9/8DC9\8DCB; Set VRAM Address Increment Value to x00 ; VRAM Address Increment Value
                      LDA.B #$63                                ;;8D61|8DCC+8DCC/8DCC\8DCE; \  
                      STA.W !HW_VMADD                           ;;8D63|8DCE+8DCE/8DCE\8DD0;  |Set Address for VRAM Read/Write to x5063 ; Address for VRAM Read/Write (Low Byte)
                      LDA.B #$50                                ;;8D66|8DD1+8DD1/8DD1\8DD3;  | 
                      STA.W !HW_VMADD+1                         ;;8D68|8DD3+8DD3/8DD3\8DD5; /  ; Address for VRAM Read/Write (High Byte)
                      LDX.B #$06                                ;;8D6B|8DD6+8DD6/8DD6\8DD8; \  
                    - LDA.W DMAdata_StBr2,X                     ;;8D6D|8DD8+8DD8/8DD8\8DDA;  |Load settings from DMAdata_StBr2 into DMA channel 1 
                      STA.W !HW_DMAPARAM+$10,X                  ;;8D70|8DDB+8DDB/8DDB\8DDD;  | 
                      DEX                                       ;;8D73|8DDE+8DDE/8DDE\8DE0;  | 
                      BPL -                                     ;;8D74|8DDF+8DDF/8DDF\8DE1; /  
                      LDA.B #$02                                ;;8D76|8DE1+8DE1/8DE1\8DE3; \ Activate DMA channel 1 
                      STA.W !HW_MDMAEN                          ;;8D78|8DE3+8DE3/8DE3\8DE5; /  ; Regular DMA Channel Enable
                      RTS                                       ;;8D7B|8DE6+8DE6/8DE6\8DE8; Return 
                                                                ;;                        ;
DMAdata_StBr1:        db $00,$18                                ;;8D7C|8DE7+8DE7/8DE7\8DE9;
                      dl !StatusBar&$FFFF                       ;;8D7E|8DE9+8DE9/8DE9\8DEB;
                      dw $001C                                  ;;8D81|8DEC+8DEC/8DEC\8DEE;
                                                                ;;                        ;
DMAdata_StBr2:        db $00,$18                                ;;8D83|8DEE+8DEE/8DEE\8DF0;
                      dl !StatusBar+$1C&$FFFF                   ;;8D85|8DF0+8DF0/8DF0\8DF2;
                      dw $001B                                  ;;8D88|8DF3+8DF3/8DF3\8DF5;
                                                                ;;                        ;
DATA_008DF5:          db $40,$41,$42,$43,$44                    ;;8D8A|8DF5+8DF5/8DF5\8DF7; "LUIGI"
                                                                ;;                        ;
DATA_008DFA:          db $24,$26,$48,$0E                        ;;8D8F|8DFA+8DFA/8DFA\8DFC; item box item OBJ numbers
DATA_008DFE:          db $00,$02,$04,$02                        ;;8D93|8DFE+8DFE/8DFE\8E00; star item box palettes
DATA_008E02:          db $08,$0A,$00,$04                        ;;8D97|8E02+8E02/8E02\8E04; item box item palettes
                                                                ;;                        ;
DATA_008E06:          db $B7,$C3                                ;;8D9B|8E06+8E06/8E06\8E08; Tall numbers for status bar
                      db $B8,$B9                                ;;8D9D|8E08+8E08/8E08\8E0A;
                      db $BA,$BB                                ;;8D9F|8E0A+8E0A/8E0A\8E0C;
                      db $BA,$BF                                ;;8DA1|8E0C+8E0C/8E0C\8E0E;
                      db $BC,$BD                                ;;8DA3|8E0E+8E0E/8E0E\8E10;
                      db $BE,$BF                                ;;8DA5|8E10+8E10/8E10\8E12;
                      db $C0,$C3                                ;;8DA7|8E12+8E12/8E12\8E14;
                      db $C1,$B9                                ;;8DA9|8E14+8E14/8E14\8E16;
                      db $C2,$C4                                ;;8DAB|8E16+8E16/8E16\8E18;
                      db $B7,$C5                                ;;8DAD|8E18+8E18/8E18\8E1A;
                                                                ;;                        ;
CODE_008E1A:          LDA.W !EndLevelTimer                      ;;8DAF|8E1A+8E1A/8E1A\8E1C; \  
                      ORA.B !SpriteLock                         ;;8DB2|8E1D+8E1D/8E1D\8E1F;  |If level is ending or sprites are locked, 
                      BNE CODE_008E6F                           ;;8DB4|8E1F+8E1F/8E1F\8E21; / branch to $8E6F 
                      LDA.W !IRQNMICommand                      ;;8DB6|8E21+8E21/8E21\8E23;
                      CMP.B #$C1                                ;;8DB9|8E24+8E24/8E24\8E26;
                      BEQ CODE_008E6F                           ;;8DBB|8E26+8E26/8E26\8E28;
                      DEC.W !InGameTimerFrames                  ;;8DBD|8E28+8E28/8E28\8E2A;
                      BPL CODE_008E6F                           ;;8DC0|8E2B+8E2B/8E2B\8E2D;
                      LDA.B #con($28,$28,$28,$22,$22)           ;;8DC2|8E2D+8E2D/8E2D\8E2F;
                      STA.W !InGameTimerFrames                  ;;8DC4|8E2F+8E2F/8E2F\8E31;
                      LDA.W !InGameTimerHundreds                ;;8DC7|8E32+8E32/8E32\8E34; \  
                      ORA.W !InGameTimerTens                    ;;8DCA|8E35+8E35/8E35\8E37;  |If time is 0, 
                      ORA.W !InGameTimerOnes                    ;;8DCD|8E38+8E38/8E38\8E3A;  |branch to $8E6F 
                      BEQ CODE_008E6F                           ;;8DD0|8E3B+8E3B/8E3B\8E3D; /  
                      LDX.B #$02                                ;;8DD2|8E3D+8E3D/8E3D\8E3F;
CODE_008E3F:          DEC.W !InGameTimerHundreds,X              ;;8DD4|8E3F+8E3F/8E3F\8E41;
                      BPL CODE_008E4C                           ;;8DD7|8E42+8E42/8E42\8E44;
                      LDA.B #$09                                ;;8DD9|8E44+8E44/8E44\8E46;
                      STA.W !InGameTimerHundreds,X              ;;8DDB|8E46+8E46/8E46\8E48;
                      DEX                                       ;;8DDE|8E49+8E49/8E49\8E4B;
                      BPL CODE_008E3F                           ;;8DDF|8E4A+8E4A/8E4A\8E4C;
CODE_008E4C:          LDA.W !InGameTimerHundreds                ;;8DE1|8E4C+8E4C/8E4C\8E4E; \  
                      BNE +                                     ;;8DE4|8E4F+8E4F/8E4F\8E51;  | 
                      LDA.W !InGameTimerTens                    ;;8DE6|8E51+8E51/8E51\8E53;  | 
                      AND.W !InGameTimerOnes                    ;;8DE9|8E54+8E54/8E54\8E56;  |If time is 99, 
                      CMP.B #$09                                ;;8DEC|8E57+8E57/8E57\8E59;  |speed up the music 
                      BNE +                                     ;;8DEE|8E59+8E59/8E59\8E5B;  | 
                      LDA.B #!SFX_HURRYUP                       ;;8DF0|8E5B+8E5B/8E5B\8E5D;  | 
                      STA.W !SPCIO0                             ;;8DF2|8E5D+8E5D/8E5D\8E5F;  | 
                    + LDA.W !InGameTimerHundreds                ;;8DF5|8E60+8E60/8E60\8E62; \  
                      ORA.W !InGameTimerTens                    ;;8DF8|8E63+8E63/8E63\8E65;  | 
                      ORA.W !InGameTimerOnes                    ;;8DFB|8E66+8E66/8E66\8E68;  |If time is 0, 
                      BNE CODE_008E6F                           ;;8DFE|8E69+8E69/8E69\8E6B;  |JSL to $00F606 
                      JSL KillMario                             ;;8E00|8E6B+8E6B/8E6B\8E6D;  | 
CODE_008E6F:          LDA.W !InGameTimerHundreds                ;;8E04|8E6F+8E6F/8E6F\8E71; \  
                      STA.W !StatusBar+$2C                      ;;8E07|8E72+8E72/8E72\8E74;  | 
                      LDA.W !InGameTimerTens                    ;;8E0A|8E75+8E75/8E75\8E77;  |Copy time to $0F25-$0F27 
                      STA.W !StatusBar+$2D                      ;;8E0D|8E78+8E78/8E78\8E7A;  | 
                      LDA.W !InGameTimerOnes                    ;;8E10|8E7B+8E7B/8E7B\8E7D;  | 
                      STA.W !StatusBar+$2E                      ;;8E13|8E7E+8E7E/8E7E\8E80; /  
                      LDX.B #$10                                ;;8E16|8E81+8E81/8E81\8E83;
                      LDY.B #$00                                ;;8E18|8E83+8E83/8E83\8E85;
CODE_008E85:          LDA.W !InGameTimerHundreds,Y              ;;8E1A|8E85+8E85/8E85\8E87;
                      BNE CODE_008E95                           ;;8E1D|8E88+8E88/8E88\8E8A;
                      LDA.B #$FC                                ;;8E1F|8E8A+8E8A/8E8A\8E8C;
                      STA.W !StatusBar+$1C,X                    ;;8E21|8E8C+8E8C/8E8C\8E8E;
                      INY                                       ;;8E24|8E8F+8E8F/8E8F\8E91;
                      INX                                       ;;8E25|8E90+8E90/8E90\8E92;
                      CPY.B #$02                                ;;8E26|8E91+8E91/8E91\8E93;
                      BNE CODE_008E85                           ;;8E28|8E93+8E93/8E93\8E95;
CODE_008E95:          LDX.B #$03                                ;;8E2A|8E95+8E95/8E95\8E97;
CODE_008E97:          LDA.W !PlayerScore+2,X                    ;;8E2C|8E97+8E97/8E97\8E99;
                      STA.B !_0                                 ;;8E2F|8E9A+8E9A/8E9A\8E9C;
                      STZ.B !_1                                 ;;8E31|8E9C+8E9C/8E9C\8E9E;
                      REP #$20                                  ;;8E33|8E9E+8E9E/8E9E\8EA0; 16 bit A ; Accum (16 bit) 
                      LDA.W !PlayerScore,X                      ;;8E35|8EA0+8EA0/8EA0\8EA2;
                      SEC                                       ;;8E38|8EA3+8EA3/8EA3\8EA5;
                      SBC.W #$423F                              ;;8E39|8EA4+8EA4/8EA4\8EA6;
                      LDA.B !_0                                 ;;8E3C|8EA7+8EA7/8EA7\8EA9;
                      SBC.W #$000F                              ;;8E3E|8EA9+8EA9/8EA9\8EAB;
                      BCC +                                     ;;8E41|8EAC+8EAC/8EAC\8EAE;
                      SEP #$20                                  ;;8E43|8EAE+8EAE/8EAE\8EB0; 8 bit A ; Accum (8 bit) 
                      LDA.B #$0F                                ;;8E45|8EB0+8EB0/8EB0\8EB2;
                      STA.W !PlayerScore+2,X                    ;;8E47|8EB2+8EB2/8EB2\8EB4;
                      LDA.B #$42                                ;;8E4A|8EB5+8EB5/8EB5\8EB7;
                      STA.W !PlayerScore+1,X                    ;;8E4C|8EB7+8EB7/8EB7\8EB9;
                      LDA.B #$3F                                ;;8E4F|8EBA+8EBA/8EBA\8EBC;
                      STA.W !PlayerScore,X                      ;;8E51|8EBC+8EBC/8EBC\8EBE;
                    + SEP #$20                                  ;;8E54|8EBF+8EBF/8EBF\8EC1; 8 bit A ; Accum (8 bit) 
                      DEX                                       ;;8E56|8EC1+8EC1/8EC1\8EC3;
                      DEX                                       ;;8E57|8EC2+8EC2/8EC2\8EC4;
                      DEX                                       ;;8E58|8EC3+8EC3/8EC3\8EC5;
                      BPL CODE_008E97                           ;;8E59|8EC4+8EC4/8EC4\8EC6;
                      LDA.W !PlayerScore+2                      ;;8E5B|8EC6+8EC6/8EC6\8EC8; \ Store high byte of Mario's score in $00 
                      STA.B !_0                                 ;;8E5E|8EC9+8EC9/8EC9\8ECB; /  
                      STZ.B !_1                                 ;;8E60|8ECB+8ECB/8ECB\8ECD; Store x00 in $01 
                      LDA.W !PlayerScore+1                      ;;8E62|8ECD+8ECD/8ECD\8ECF; \ Store mid byte of Mario's score in $03 
                      STA.B !_3                                 ;;8E65|8ED0+8ED0/8ED0\8ED2; / 
                      LDA.W !PlayerScore                        ;;8E67|8ED2+8ED2/8ED2\8ED4; \ Store low byte of Mario's score in $02 
                      STA.B !_2                                 ;;8E6A|8ED5+8ED5/8ED5\8ED7; / 
                      LDX.B #$14                                ;;8E6C|8ED7+8ED7/8ED7\8ED9;
                      LDY.B #$00                                ;;8E6E|8ED9+8ED9/8ED9\8EDB;
                      JSR CODE_009012                           ;;8E70|8EDB+8EDB/8EDB\8EDD;
                      LDX.B #$00                                ;;8E73|8EDE+8EDE/8EDE\8EE0; \  
CODE_008EE0:          LDA.W !StatusBar+$30,X                    ;;8E75|8EE0+8EE0/8EE0\8EE2;  | 
                      BNE CODE_008EEF                           ;;8E78|8EE3+8EE3/8EE3\8EE5;  | 
                      LDA.B #$FC                                ;;8E7A|8EE5+8EE5/8EE5\8EE7;  |Replace all leading zeroes in the score with spaces 
                      STA.W !StatusBar+$30,X                    ;;8E7C|8EE7+8EE7/8EE7\8EE9;  | 
                      INX                                       ;;8E7F|8EEA+8EEA/8EEA\8EEC;  | 
                      CPX.B #$06                                ;;8E80|8EEB+8EEB/8EEB\8EED;  | 
                      BNE CODE_008EE0                           ;;8E82|8EED+8EED/8EED\8EEF;  | 
CODE_008EEF:          LDA.W !PlayerTurnLvl                      ;;8E84|8EEF+8EEF/8EEF\8EF1; Get current player 
                      BEQ CODE_008F1D                           ;;8E87|8EF2+8EF2/8EF2\8EF4; If player is Mario, branch to $8F1D 
                      LDA.W !PlayerScore+5                      ;;8E89|8EF4+8EF4/8EF4\8EF6; \ Store high byte of Luigi's score in $00 
                      STA.B !_0                                 ;;8E8C|8EF7+8EF7/8EF7\8EF9; /  
                      STZ.B !_1                                 ;;8E8E|8EF9+8EF9/8EF9\8EFB; Store x00 in $01 
                      LDA.W !PlayerScore+4                      ;;8E90|8EFB+8EFB/8EFB\8EFD; \ Store mid byte of Luigi's score in $03 
                      STA.B !_3                                 ;;8E93|8EFE+8EFE/8EFE\8F00; /  
                      LDA.W !PlayerScore+3                      ;;8E95|8F00+8F00/8F00\8F02; \ Store low byte of Luigi's score in $02 
                      STA.B !_2                                 ;;8E98|8F03+8F03/8F03\8F05; /  
                      LDX.B #$14                                ;;8E9A|8F05+8F05/8F05\8F07;
                      LDY.B #$00                                ;;8E9C|8F07+8F07/8F07\8F09;
                      JSR CODE_009012                           ;;8E9E|8F09+8F09/8F09\8F0B;
                      LDX.B #$00                                ;;8EA1|8F0C+8F0C/8F0C\8F0E; \  
CODE_008F0E:          LDA.W !StatusBar+$30,X                    ;;8EA3|8F0E+8F0E/8F0E\8F10;  | 
                      BNE CODE_008F1D                           ;;8EA6|8F11+8F11/8F11\8F13;  | 
                      LDA.B #$FC                                ;;8EA8|8F13+8F13/8F13\8F15;  |Replace all leading zeroes in the score with spaces 
                      STA.W !StatusBar+$30,X                    ;;8EAA|8F15+8F15/8F15\8F17;  | 
                      INX                                       ;;8EAD|8F18+8F18/8F18\8F1A;  | 
                      CPX.B #$06                                ;;8EAE|8F19+8F19/8F19\8F1B;  | 
                      BNE CODE_008F0E                           ;;8EB0|8F1B+8F1B/8F1B\8F1D; /  
CODE_008F1D:          LDA.W !CoinAdder                          ;;8EB2|8F1D+8F1D/8F1D\8F1F; \ If Coin increase isn't x00, 
                      BEQ +                                     ;;8EB5|8F20+8F20/8F20\8F22; / branch to $8F3B 
                      DEC.W !CoinAdder                          ;;8EB7|8F22+8F22/8F22\8F24; Decrease "Coin increase" 
                      INC.W !PlayerCoins                        ;;8EBA|8F25+8F25/8F25\8F27; Increase coins by 1 
                      LDA.W !PlayerCoins                        ;;8EBD|8F28+8F28/8F28\8F2A; \  
                      CMP.B #$64                                ;;8EC0|8F2B+8F2B/8F2B\8F2D;  |If coins<100, branch to $8F3B 
                      BCC +                                     ;;8EC2|8F2D+8F2D/8F2D\8F2F; /  
                      INC.W !GivePlayerLives                    ;;8EC4|8F2F+8F2F/8F2F\8F31; Increase lives by 1 
                      LDA.W !PlayerCoins                        ;;8EC7|8F32+8F32/8F32\8F34; \  
                      SEC                                       ;;8ECA|8F35+8F35/8F35\8F37;  |Decrease coins by 100 
                      SBC.B #$64                                ;;8ECB|8F36+8F36/8F36\8F38;  | 
                      STA.W !PlayerCoins                        ;;8ECD|8F38+8F38/8F38\8F3A; /  
                    + LDA.W !PlayerLives                        ;;8ED0|8F3B+8F3B/8F3B\8F3D; \ If amount of lives is negative, 
                      BMI +                                     ;;8ED3|8F3E+8F3E/8F3E\8F40; / branch to $8F49 
                      CMP.B #$62                                ;;8ED5|8F40+8F40/8F40\8F42; \ If amount of lives is less than 98, 
                      BCC +                                     ;;8ED7|8F42+8F42/8F42\8F44; / branch to $8F49 
                      LDA.B #$62                                ;;8ED9|8F44+8F44/8F44\8F46; \ Set amount of lives to 98 
                      STA.W !PlayerLives                        ;;8EDB|8F46+8F46/8F46\8F48; /  
                    + LDA.W !PlayerLives                        ;;8EDE|8F49+8F49/8F49\8F4B; \  
                      INC A                                     ;;8EE1|8F4C+8F4C/8F4C\8F4E;  |Get amount of lives in decimal 
                      JSR HexToDec                              ;;8EE2|8F4D+8F4D/8F4D\8F4F; /  
                      TXY                                       ;;8EE5|8F50+8F50/8F50\8F52; \  
                      BNE +                                     ;;8EE6|8F51+8F51/8F51\8F53;  |If 10s is 0, replace with space 
                      LDX.B #$FC                                ;;8EE8|8F53+8F53/8F53\8F55;  | 
                    + STX.W !StatusBar+$1D                      ;;8EEA|8F55+8F55/8F55\8F57; \ Write lives to status bar 
                      STA.W !StatusBar+$1E                      ;;8EED|8F58+8F58/8F58\8F5A; /  
                      LDX.W !PlayerTurnLvl                      ;;8EF0|8F5B+8F5B/8F5B\8F5D; \ Get bonus stars 
                      LDA.W !PlayerBonusStars,X                 ;;8EF3|8F5E+8F5E/8F5E\8F60; /  
                      CMP.B #$64                                ;;8EF6|8F61+8F61/8F61\8F63; \ If bonus stars is less than 100, 
                      BCC +                                     ;;8EF8|8F63+8F63/8F63\8F65; / branch to $8F73 
                      LDA.B #$FF                                ;;8EFA|8F65+8F65/8F65\8F67; \ Start bonus game when the level ends 
                      STA.W !BonusGameActivate                  ;;8EFC|8F67+8F67/8F67\8F69; /  
                      LDA.W !PlayerBonusStars,X                 ;;8EFF|8F6A+8F6A/8F6A\8F6C; \  
                      SEC                                       ;;8F02|8F6D+8F6D/8F6D\8F6F;  |Subtract bonus stars by 100 
                      SBC.B #$64                                ;;8F03|8F6E+8F6E/8F6E\8F70;  | 
                      STA.W !PlayerBonusStars,X                 ;;8F05|8F70+8F70/8F70\8F72; /  
                    + LDA.W !PlayerCoins                        ;;8F08|8F73+8F73/8F73\8F75; \ Get amount of coins in decimal 
                      JSR HexToDec                              ;;8F0B|8F76+8F76/8F76\8F78; /  
                      TXY                                       ;;8F0E|8F79+8F79/8F79\8F7B; \ 
                      BNE +                                     ;;8F0F|8F7A+8F7A/8F7A\8F7C;  |If 10s is 0, replace with space 
                      LDX.B #$FC                                ;;8F11|8F7C+8F7C/8F7C\8F7E;  | 
                    + STA.W !StatusBar+$1B                      ;;8F13|8F7E+8F7E/8F7E\8F80; \ Write coins to status bar 
                      STX.W !StatusBar+$1A                      ;;8F16|8F81+8F81/8F81\8F83; /  
                      SEP #$20                                  ;;8F19|8F84+8F84/8F84\8F86; 8 bit A ; Accum (8 bit) 
                      LDX.W !PlayerTurnLvl                      ;;8F1B|8F86+8F86/8F86\8F88; Load Character into X 
                      STZ.B !_0                                 ;;8F1E|8F89+8F89/8F89\8F8B;
                      STZ.B !_1                                 ;;8F20|8F8B+8F8B/8F8B\8F8D;
                      STZ.B !_3                                 ;;8F22|8F8D+8F8D/8F8D\8F8F;
                      LDA.W !PlayerBonusStars,X                 ;;8F24|8F8F+8F8F/8F8F\8F91;
                      STA.B !_2                                 ;;8F27|8F92+8F92/8F92\8F94;
                      LDX.B #$09                                ;;8F29|8F94+8F94/8F94\8F96;
                      LDY.B #$10                                ;;8F2B|8F96+8F96/8F96\8F98;
                      JSR CODE_009051                           ;;8F2D|8F98+8F98/8F98\8F9A;
                      LDX.B #$00                                ;;8F30|8F9B+8F9B/8F9B\8F9D;
CODE_008F9D:          LDA.W !StatusBar+$25,X                    ;;8F32|8F9D+8F9D/8F9D\8F9F;
                      BNE CODE_008FAF                           ;;8F35|8FA0+8FA0/8FA0\8FA2;
                      LDA.B #$FC                                ;;8F37|8FA2+8FA2/8FA2\8FA4;
                      STA.W !StatusBar+$25,X                    ;;8F39|8FA4+8FA4/8FA4\8FA6;
                      STA.W !StatusBar+$0A,X                    ;;8F3C|8FA7+8FA7/8FA7\8FA9;
                      INX                                       ;;8F3F|8FAA+8FAA/8FAA\8FAC;
                      CPX.B #$01                                ;;8F40|8FAB+8FAB/8FAB\8FAD;
                      BNE CODE_008F9D                           ;;8F42|8FAD+8FAD/8FAD\8FAF;
CODE_008FAF:          LDA.W !StatusBar+$25,X                    ;;8F44|8FAF+8FAF/8FAF\8FB1;
                      ASL A                                     ;;8F47|8FB2+8FB2/8FB2\8FB4;
                      TAY                                       ;;8F48|8FB3+8FB3/8FB3\8FB5;
                      LDA.W DATA_008E06,Y                       ;;8F49|8FB4+8FB4/8FB4\8FB6;
                      STA.W !StatusBar+$0A,X                    ;;8F4C|8FB7+8FB7/8FB7\8FB9;
                      LDA.W DATA_008E06+1,Y                     ;;8F4F|8FBA+8FBA/8FBA\8FBC;
                      STA.W !StatusBar+$25,X                    ;;8F52|8FBD+8FBD/8FBD\8FBF;
                      INX                                       ;;8F55|8FC0+8FC0/8FC0\8FC2;
                      CPX.B #$02                                ;;8F56|8FC1+8FC1/8FC1\8FC3;
                      BNE CODE_008FAF                           ;;8F58|8FC3+8FC3/8FC3\8FC5;
                      JSR CODE_009079                           ;;8F5A|8FC5+8FC5/8FC5\8FC7;
                      LDA.W !PlayerTurnLvl                      ;;8F5D|8FC8+8FC8/8FC8\8FCA;
                      BEQ CODE_008FD8                           ;;8F60|8FCB+8FCB/8FCB\8FCD;
                      LDX.B #$04                                ;;8F62|8FCD+8FCD/8FCD\8FCF;
                    - LDA.W DATA_008DF5,X                       ;;8F64|8FCF+8FCF/8FCF\8FD1;
                      STA.W !StatusBar,X                        ;;8F67|8FD2+8FD2/8FD2\8FD4;
                      DEX                                       ;;8F6A|8FD5+8FD5/8FD5\8FD7;
                      BPL -                                     ;;8F6B|8FD6+8FD6/8FD6\8FD8;
CODE_008FD8:          LDA.W !DragonCoinsShown                   ;;8F6D|8FD8+8FD8/8FD8\8FDA;
                      CMP.B #$05                                ;;8F70|8FDB+8FDB/8FDB\8FDD;
                      BCC +                                     ;;8F72|8FDD+8FDD/8FDD\8FDF;
                      LDA.B #$00                                ;;8F74|8FDF+8FDF/8FDF\8FE1;
                    + DEC A                                     ;;8F76|8FE1+8FE1/8FE1\8FE3;
                      STA.B !_0                                 ;;8F77|8FE2+8FE2/8FE2\8FE4;
                      LDX.B #$00                                ;;8F79|8FE4+8FE4/8FE4\8FE6;
CODE_008FE6:          LDY.B #$FC                                ;;8F7B|8FE6+8FE6/8FE6\8FE8;
                      LDA.B !_0                                 ;;8F7D|8FE8+8FE8/8FE8\8FEA;
                      BMI +                                     ;;8F7F|8FEA+8FEA/8FEA\8FEC;
                      LDY.B #$2E                                ;;8F81|8FEC+8FEC/8FEC\8FEE;
                    + TYA                                       ;;8F83|8FEE+8FEE/8FEE\8FF0;
                      STA.W !StatusBar+6,X                      ;;8F84|8FEF+8FEF/8FEF\8FF1;
                      DEC.B !_0                                 ;;8F87|8FF2+8FF2/8FF2\8FF4;
                      INX                                       ;;8F89|8FF4+8FF4/8FF4\8FF6;
                      CPX.B #$04                                ;;8F8A|8FF5+8FF5/8FF5\8FF7;
                      BNE CODE_008FE6                           ;;8F8C|8FF7+8FF7/8FF7\8FF9;
                      RTS                                       ;;8F8E|8FF9+8FF9/8FF9\8FFB;
                                                                ;;                        ;
                                                                ;;                        ;
ScorePlaces:          dw $0001,$86A0                            ;;8F8F|8FFA+8FFA/8FFA\8FFC; "100000"
                      dw $0000,$2710                            ;;8F93|8FFE+8FFE/8FFE\9000; "10000"
                      dw $0000,$03E8                            ;;8F97|9002+9002/9002\9004; "1000"
                      dw $0000,$0064                            ;;8F9B|9006+9006/9006\9008; "100"
                      dw $0000,$000A                            ;;8F9F|900A+900A/900A\900C; "10"
                      dw $0000,$0001                            ;;8FA3|900E+900E/900E\9010; "1"
                                                                ;;                        ;
CODE_009012:          SEP #$20                                  ;;8FA7|9012+9012/9012\9014; 8 bit A ; Accum (8 bit) 
                      STZ.W !StatusBar+$1C,X                    ;;8FA9|9014+9014/9014\9016;
CODE_009017:          REP #$20                                  ;;8FAC|9017+9017/9017\9019; 16 bit A ; Accum (16 bit) 
                      LDA.B !_2                                 ;;8FAE|9019+9019/9019\901B;
                      SEC                                       ;;8FB0|901B+901B/901B\901D;
                      SBC.W ScorePlaces+2,Y                     ;;8FB1|901C+901C/901C\901E;
                      STA.B !_6                                 ;;8FB4|901F+901F/901F\9021;
                      LDA.B !_0                                 ;;8FB6|9021+9021/9021\9023;
                      SBC.W ScorePlaces,Y                       ;;8FB8|9023+9023/9023\9025;
                      STA.B !_4                                 ;;8FBB|9026+9026/9026\9028;
                      BCC CODE_009039                           ;;8FBD|9028+9028/9028\902A;
                      LDA.B !_6                                 ;;8FBF|902A+902A/902A\902C;
                      STA.B !_2                                 ;;8FC1|902C+902C/902C\902E;
                      LDA.B !_4                                 ;;8FC3|902E+902E/902E\9030;
                      STA.B !_0                                 ;;8FC5|9030+9030/9030\9032;
                      SEP #$20                                  ;;8FC7|9032+9032/9032\9034; 8 bit A ; Accum (8 bit) 
                      INC.W !StatusBar+$1C,X                    ;;8FC9|9034+9034/9034\9036;
                      BRA CODE_009017                           ;;8FCC|9037+9037/9037\9039;
                                                                ;;                        ;
CODE_009039:          INX                                       ;;8FCE|9039+9039/9039\903B;
                      INY                                       ;;8FCF|903A+903A/903A\903C;
                      INY                                       ;;8FD0|903B+903B/903B\903D;
                      INY                                       ;;8FD1|903C+903C/903C\903E;
                      INY                                       ;;8FD2|903D+903D/903D\903F;
                      CPY.B #$18                                ;;8FD3|903E+903E/903E\9040;
                      BNE CODE_009012                           ;;8FD5|9040+9040/9040\9042;
                      SEP #$20                                  ;;8FD7|9042+9042/9042\9044; 8 bit A ; Accum (8 bit) 
                      RTS                                       ;;8FD9|9044+9044/9044\9046;
                                                                ;;                        ;
HexToDec:             LDX.B #$00                                ;;8FDA|9045+9045/9045\9047;  | 
CODE_009047:          CMP.B #$0A                                ;;8FDC|9047+9047/9047\9049;  | 
                      BCC Return009050                          ;;8FDE|9049+9049/9049\904B;  |Sets A to 10s of original A 
                      SBC.B #$0A                                ;;8FE0|904B+904B/904B\904D;  |Sets X to 1s of original A 
                      INX                                       ;;8FE2|904D+904D/904D\904F;  | 
                      BRA CODE_009047                           ;;8FE3|904E+904E/904E\9050;  | 
                                                                ;;                        ;
Return009050:         RTS                                       ;;8FE5|9050+9050/9050\9052; /  
                                                                ;;                        ;
CODE_009051:          SEP #$20                                  ;;8FE6|9051+9051/9051\9053; Accum (8 bit) 
                      STZ.W !StatusBar+$1C,X                    ;;8FE8|9053+9053/9053\9055;
CODE_009056:          REP #$20                                  ;;8FEB|9056+9056/9056\9058; Accum (16 bit) 
                      LDA.B !_2                                 ;;8FED|9058+9058/9058\905A;
                      SEC                                       ;;8FEF|905A+905A/905A\905C;
                      SBC.W ScorePlaces+2,Y                     ;;8FF0|905B+905B/905B\905D;
                      STA.B !_6                                 ;;8FF3|905E+905E/905E\9060;
                      BCC CODE_00906D                           ;;8FF5|9060+9060/9060\9062;
                      LDA.B !_6                                 ;;8FF7|9062+9062/9062\9064;
                      STA.B !_2                                 ;;8FF9|9064+9064/9064\9066;
                      SEP #$20                                  ;;8FFB|9066+9066/9066\9068; Accum (8 bit) 
                      INC.W !StatusBar+$1C,X                    ;;8FFD|9068+9068/9068\906A;
                      BRA CODE_009056                           ;;9000|906B+906B/906B\906D;
                                                                ;;                        ;
CODE_00906D:          INX                                       ;;9002|906D+906D/906D\906F;
                      INY                                       ;;9003|906E+906E/906E\9070;
                      INY                                       ;;9004|906F+906F/906F\9071;
                      INY                                       ;;9005|9070+9070/9070\9072;
                      INY                                       ;;9006|9071+9071/9071\9073;
                      CPY.B #$18                                ;;9007|9072+9072/9072\9074;
                      BNE CODE_009051                           ;;9009|9074+9074/9074\9076;
                      SEP #$20                                  ;;900B|9076+9076/9076\9078; Accum (8 bit) 
                      RTS                                       ;;900D|9078+9078/9078\907A;
                                                                ;;                        ;
CODE_009079:          LDY.B #$E0                                ;;900E|9079+9079/9079\907B;
                      BIT.W !IRQNMICommand                      ;;9010|907B+907B/907B\907D;
                      BVC +                                     ;;9013|907E+907E/907E\9080;
                      LDY.B #$00                                ;;9015|9080+9080/9080\9082;
                      LDA.W !IRQNMICommand                      ;;9017|9082+9082/9082\9084;
                      CMP.B #$C1                                ;;901A|9085+9085/9085\9087;
                      BEQ +                                     ;;901C|9087+9087/9087\9089;
                      LDA.B #$F0                                ;;901E|9089+9089/9089\908B;
                      STA.W !OAMTileYPos,Y                      ;;9020|908B+908B/908B\908D;
                    + STY.B !_1                                 ;;9023|908E+908E/908E\9090;
                      LDY.W !PlayerItembox                      ;;9025|9090+9090/9090\9092;
                      BEQ Return0090D0                          ;;9028|9093+9093/9093\9095;
                      LDA.W DATA_008E02-1,Y                     ;;902A|9095+9095/9095\9097;
                      STA.B !_0                                 ;;902D|9098+9098/9098\909A;
                      CPY.B #$03                                ;;902F|909A+909A/909A\909C;
                      BNE +                                     ;;9031|909C+909C/909C\909E;
                      LDA.B !TrueFrame                          ;;9033|909E+909E/909E\90A0;
                      LSR A                                     ;;9035|90A0+90A0/90A0\90A2;
                      AND.B #$03                                ;;9036|90A1+90A1/90A1\90A3;
                      PHY                                       ;;9038|90A3+90A3/90A3\90A5;
                      TAY                                       ;;9039|90A4+90A4/90A4\90A6;
                      LDA.W DATA_008DFE,Y                       ;;903A|90A5+90A5/90A5\90A7;
                      PLY                                       ;;903D|90A8+90A8/90A8\90AA;
                      STA.B !_0                                 ;;903E|90A9+90A9/90A9\90AB;
                    + LDY.B !_1                                 ;;9040|90AB+90AB/90AB\90AD;
                      LDA.B #$78                                ;;9042|90AD+90AD/90AD\90AF;
                      STA.W !OAMTileXPos,Y                      ;;9044|90AF+90AF/90AF\90B1;
                      LDA.B #$0F                                ;;9047|90B2+90B2/90B2\90B4;
                      STA.W !OAMTileYPos,Y                      ;;9049|90B4+90B4/90B4\90B6;
                      LDA.B #$30                                ;;904C|90B7+90B7/90B7\90B9;
                      ORA.B !_0                                 ;;904E|90B9+90B9/90B9\90BB;
                      STA.W !OAMTileAttr,Y                      ;;9050|90BB+90BB/90BB\90BD;
                      LDX.W !PlayerItembox                      ;;9053|90BE+90BE/90BE\90C0;
                      LDA.W DATA_008DFA-1,X                     ;;9056|90C1+90C1/90C1\90C3;
                      STA.W !OAMTileNo,Y                        ;;9059|90C4+90C4/90C4\90C6;
                      TYA                                       ;;905C|90C7+90C7/90C7\90C9;
                      LSR A                                     ;;905D|90C8+90C8/90C8\90CA;
                      LSR A                                     ;;905E|90C9+90C9/90C9\90CB;
                      TAY                                       ;;905F|90CA+90CA/90CA\90CC;
                      LDA.B #$02                                ;;9060|90CB+90CB/90CB\90CD;
                      STA.W !OAMTileSize,Y                      ;;9062|90CD+90CD/90CD\90CF;
Return0090D0:         RTS                                       ;;9065|90D0+90D0/90D0\90D2;
                                                                ;;                        ;
                                                                ;;                        ;
TitleTextTileTop:     db $00,$FF,$4D,$4C,$03,$4D,$5D,$FF        ;;9066|90D1+90D1/90D1\90D3; "MARIO START!" top
                      db $03,$00,$4C,$03,$04,$15                ;;906E|90D9+90D9/90D9\90DB;
                                                                ;;                        ;
                      db $00,$02,$00,$4A,$4E,$FF                ;;9074|90DF+90DF/90DF\90E1; "LUIGI" top
                                                                ;;                        ;
                      db $4C,$4B,$4A,$03,$5F,$05,$04,$03        ;;907A|90E5+90E5/90E5\90E7; "GAME OVER" top
                      db $02                                    ;;9082|90ED+90ED/90ED\90EF;
                                                                ;;                        ;
                      db $00,$FF,$01,$4A,$5F,$05,$04,$00        ;;9083|90EE+90EE/90EE\90F0; "TIME UP" top
                      db $4D                                    ;;908B|90F6+90F6/90F6\90F8;
                                                                ;;                        ;
                      db $5D,$03,$02,$01,$00,$FF,$5B,$14        ;;908C|90F7+90F7/90F7\90F9; "BONUS GAME" top
                      db $5F,$01,$5E                            ;;9094|90FF+90FF/90FF\9101;
                                                                ;;                        ;
                      db $FF,$FF,$FF                            ;;9097|9102+9102/9102\9104;
                                                                ;;                        ;
TitleTextTileBottom:  db $10,$FF,$00,$5C,$13,$00,$5D,$FF        ;;909A|9105+9105/9105\9107; "MARIO START!" bottom
                      db $03,$00,$5C,$13,$14,$15                ;;90A2|910D+910D/910D\910F;
                                                                ;;                        ;
                      db $00,$12,$00,$03,$5E,$FF                ;;90A8|9113+9113/9113\9115; "LUIGI" bottom
                                                                ;;                        ;
                      db $5C,$4B,$5A,$03,$5F,$05,$14,$13        ;;90AE|9119+9119/9119\911B; "GAME OVER" bottom
                      db $12                                    ;;90B6|9121+9121/9121\9123;
                                                                ;;                        ;
                      db $10,$FF,$11,$03,$5F,$05,$14,$00        ;;90B7|9122+9122/9122\9124; "TIME UP" bottom
                      db $00                                    ;;90BF|912A+912A/912A\912C;
                                                                ;;                        ;
                      db $5D,$03,$12,$11,$10,$FF,$5B,$01        ;;90C0|912B+912B/912B\912D; "BONUS GAME" bottom
                      db $5F,$01,$5E                            ;;90C8|9133+9133/9133\9135;
                                                                ;;                        ;
                      db $FF,$FF,$FF                            ;;90CB|9136+9136/9136\9138;
                                                                ;;                        ;
TitleTextPropTop:     db $34,$00,$34,$34,$34,$34,$30,$00        ;;90CE|9139+9139/9139\913B; "MARIO START!" top
                      db $34,$34,$34,$34,$74,$34                ;;90D6|9141+9141/9141\9143;
                                                                ;;                        ;
                      db $34,$34,$34,$34,$34,$00                ;;90DC|9147+9147/9147\9149; "LUIGI" top
                                                                ;;                        ;
                      db $34,$34,$34,$34,$34,$34,$34,$34        ;;90E2|914D+914D/914D\914F; "GAME OVER" top
                      db $34                                    ;;90EA|9155+9155/9155\9157;
                                                                ;;                        ;
                      db $34,$00,$34,$34,$34,$34,$34,$34        ;;90EB|9156+9156/9156\9158; "TIME UP" top
                      db $34                                    ;;90F3|915E+915E/915E\9160;
                                                                ;;                        ;
                      db $34,$34,$34,$34,$34,$34,$34,$34        ;;90F4|915F+915F/915F\9161; "BONUS GAME" top
                      db $34,$34,$34                            ;;90FC|9167+9167/9167\9169;
                                                                ;;                        ;
TitleTextPropBottom:  db $34,$00,$B4,$34,$34,$B4,$F0,$00        ;;90FF|916A+916A/916A\916C; "MARIO START!" bottom
                      db $B4,$B4,$34,$34,$74,$B4                ;;9107|9172+9172/9172\9174;
                                                                ;;                        ;
                      db $B4,$34,$B4,$B4,$34,$00                ;;910D|9178+9178/9178\917A; "LUIGI" bottom
                                                                ;;                        ;
                      db $34,$B4,$34,$B4,$B4,$B4,$34,$34        ;;9113|917E+917E/917E\9180; "GAME OVER" bottom
                      db $34                                    ;;911B|9186+9186/9186\9188;
                                                                ;;                        ;
                      db $34,$00,$34,$B4,$B4,$B4,$34,$B4        ;;911C|9187+9187/9187\9189; "TIME UP" bottom
                      db $B4                                    ;;9124|918F+918F/918F\9191;
                                                                ;;                        ;
                      db $B4,$B4,$34,$34,$34,$34,$F4,$B4        ;;9125|9190+9190/9190\9192; "BONUS GAME" bottom
                      db $F4,$B4,$B4                            ;;912D|9198+9198/9198\919A;
                                                                ;;                        ;
CODE_00919B:          LDA.B !PlayerAnimation                    ;;9130|919B+919B/919B\919D;
                      CMP.B #$0A                                ;;9132|919D+919D/919D\919F;
                      BNE CODE_0091A6                           ;;9134|919F+919F/919F\91A1;
                      JSR CODE_00C593                           ;;9136|91A1+91A1/91A1\91A3;
                      BRA +                                     ;;9139|91A4+91A4/91A4\91A6;
                                                                ;;                        ;
CODE_0091A6:          LDA.W !SublevelCount                      ;;913B|91A6+91A6/91A6\91A8;
                      BNE +                                     ;;913E|91A9+91A9/91A9\91AB;
                      LDA.B #$1E                                ;;9140|91AB+91AB/91AB\91AD;
                      STA.W !GreenStarBlockCoins                ;;9142|91AD+91AD/91AD\91AF;
                    + RTS                                       ;;9145|91B0+91B0/91B0\91B2;
                                                                ;;                        ;
CODE_0091B1:          JSR CODE_00A82D                           ;;9146|91B1+91B1/91B1\91B3;
                      LDX.B #$00                                ;;9149|91B4+91B4/91B4\91B6;
                      LDA.B #$B0                                ;;914B|91B6+91B6/91B6\91B8;
                      LDY.W !BonusGameActivate                  ;;914D|91B8+91B8/91B8\91BA;
                      BEQ +                                     ;;9150|91BB+91BB/91BB\91BD;
                      STZ.W !InGameTimerHundreds                ;;9152|91BD+91BD/91BD\91BF; \  
                      STZ.W !InGameTimerTens                    ;;9155|91C0+91C0/91C0\91C2;  |Set timer to 000 
                      STZ.W !InGameTimerOnes                    ;;9158|91C3+91C3/91C3\91C5; /  
                      LDX.B #$26                                ;;915B|91C6+91C6/91C6\91C8;
                      LDA.B #$A4                                ;;915D|91C8+91C8/91C8\91CA;
                    + STA.B !_0                                 ;;915F|91CA+91CA/91CA\91CC;
                      STZ.B !_1                                 ;;9161|91CC+91CC/91CC\91CE;
                      LDY.B #$70                                ;;9163|91CE+91CE/91CE\91D0;
CODE_0091D0:          JSR CODE_0091E9                           ;;9165|91D0+91D0/91D0\91D2;
                      INX                                       ;;9168|91D3+91D3/91D3\91D5;
                      CPX.B #$08                                ;;9169|91D4+91D4/91D4\91D6;
                      BNE +                                     ;;916B|91D6+91D6/91D6\91D8;
                      LDA.W !PlayerTurnLvl                      ;;916D|91D8+91D8/91D8\91DA;
                      BEQ +                                     ;;9170|91DB+91DB/91DB\91DD;
                      LDX.B #$0E                                ;;9172|91DD+91DD/91DD\91DF;
                    + TYA                                       ;;9174|91DF+91DF/91DF\91E1;
                      SEC                                       ;;9175|91E0+91E0/91E0\91E2;
                      SBC.B #$08                                ;;9176|91E1+91E1/91E1\91E3;
                      TAY                                       ;;9178|91E3+91E3/91E3\91E5;
                      BNE CODE_0091D0                           ;;9179|91E4+91E4/91E4\91E6;
                      JMP CODE_008494                           ;;917B|91E6+91E6/91E6\91E8;
                                                                ;;                        ;
CODE_0091E9:          LDA.W TitleTextPropTop,X                  ;;917E|91E9+91E9/91E9\91EB;
                      STA.W !OAMTileAttr+$108,Y                 ;;9181|91EC+91EC/91EC\91EE;
                      LDA.W TitleTextPropBottom,X               ;;9184|91EF+91EF/91EF\91F1;
                      STA.W !OAMTileAttr+$10C,Y                 ;;9187|91F2+91F2/91F2\91F4;
                      LDA.B !_0                                 ;;918A|91F5+91F5/91F5\91F7;
                      STA.W !OAMTileXPos+$108,Y                 ;;918C|91F7+91F7/91F7\91F9;
                      STA.W !OAMTileXPos+$10C,Y                 ;;918F|91FA+91FA/91FA\91FC;
                      SEC                                       ;;9192|91FD+91FD/91FD\91FF;
                      SBC.B #$08                                ;;9193|91FE+91FE/91FE\9200;
                      STA.B !_0                                 ;;9195|9200+9200/9200\9202;
                      BCS +                                     ;;9197|9202+9202/9202\9204;
                      DEC.B !_1                                 ;;9199|9204+9204/9204\9206;
                    + PHY                                       ;;919B|9206+9206/9206\9208;
                      TYA                                       ;;919C|9207+9207/9207\9209;
                      LSR A                                     ;;919D|9208+9208/9208\920A;
                      LSR A                                     ;;919E|9209+9209/9209\920B;
                      TAY                                       ;;919F|920A+920A/920A\920C;
                      LDA.B !_1                                 ;;91A0|920B+920B/920B\920D;
                      AND.B #$01                                ;;91A2|920D+920D/920D\920F;
                      STA.W !OAMTileSize+$42,Y                  ;;91A4|920F+920F/920F\9211;
                      STA.W !OAMTileSize+$43,Y                  ;;91A7|9212+9212/9212\9214;
                      PLY                                       ;;91AA|9215+9215/9215\9217;
                      LDA.W TitleTextTileTop,X                  ;;91AB|9216+9216/9216\9218;
                      BMI +                                     ;;91AE|9219+9219/9219\921B;
                      STA.W !OAMTileNo+$108,Y                   ;;91B0|921B+921B/921B\921D;
                      LDA.W TitleTextTileBottom,X               ;;91B3|921E+921E/921E\9220;
                      STA.W !OAMTileNo+$10C,Y                   ;;91B6|9221+9221/9221\9223;
                      LDA.B #$68                                ;;91B9|9224+9224/9224\9226;
                      STA.W !OAMTileYPos+$108,Y                 ;;91BB|9226+9226/9226\9228;
                      LDA.B #$70                                ;;91BE|9229+9229/9229\922B;
                      STA.W !OAMTileYPos+$10C,Y                 ;;91C0|922B+922B/922B\922D;
                    + RTS                                       ;;91C3|922E+922E/922E\9230;
                                                                ;;                        ;
CODE_00922F:          STZ.W !MainPalette                        ;;91C4|922F+922F/922F\9231;
                      STZ.W !MainPalette+1                      ;;91C7|9232+9232/9232\9234;
                      STZ.W !HW_CGADD                           ;;91CA|9235+9235/9235\9237; Set "Address for CG-RAM Write" to 0 ; Address for CG-RAM Write
                      LDX.B #$06                                ;;91CD|9238+9238/9238\923A;
                    - LDA.W DATA_009249,X                       ;;91CF|923A+923A/923A\923C;
                      STA.W !HW_DMAPARAM+$20,X                  ;;91D2|923D+923D/923D\923F;
                      DEX                                       ;;91D5|9240+9240/9240\9242;
                      BPL -                                     ;;91D6|9241+9241/9241\9243;
                      LDA.B #$04                                ;;91D8|9243+9243/9243\9245;
                      STA.W !HW_MDMAEN                          ;;91DA|9245+9245/9245\9247; Regular DMA Channel Enable
                      RTS                                       ;;91DD|9248+9248/9248\924A;
                                                                ;;                        ;
                                                                ;;                        ;
DATA_009249:          db $00,$22                                ;;91DE|9249+9249/9249\924B;
                      dl !MainPalette&$FFFF                     ;;91E0|924B+924B/924B\924D;
                      dw $0200                                  ;;91E3|924E+924E/924E\9250;
                                                                ;;                        ;
CODE_009250:          LDX.B #$04                                ;;91E5|9250+9250/9250\9252;
                    - LDA.W DATA_009277,X                       ;;91E7|9252+9252/9252\9254;
                      STA.W !HW_DMAPARAM+$70,X                  ;;91EA|9255+9255/9255\9257;
                      DEX                                       ;;91ED|9258+9258/9258\925A;
                      BPL -                                     ;;91EE|9259+9259/9259\925B;
                      LDA.B #$00                                ;;91F0|925B+925B/925B\925D;
                      STA.W !HW_HDMABANK+$70                    ;;91F2|925D+925D/925D\925F; Data Bank (H-DMA)
CODE_009260:          STZ.W !HDMAEnable                         ;;91F5|9260+9260/9260\9262; Disable all HDMA channels 
CODE_009263:          REP #$10                                  ;;91F8|9263+9263/9263\9265; 16 bit A ; Index (16 bit) 
                      LDX.W #con($01BE,$01BE,$01BE,$01BE,$01DE) ;;91FA|9265+9265/9265\9267; \  
                      LDA.B #$FF                                ;;91FD|9268+9268/9268\926A;  | 
                    - STA.W !WindowTable,X                      ;;91FF|926A+926A/926A\926C;  |Clear "HDMA table for windowing effects" 
                      STZ.W !WindowTable+1,X                    ;;9202|926D+926D/926D\926F;  |...hang on again.  It clears one set of RAM here, but not the same 
                      DEX                                       ;;9205|9270+9270/9270\9272;  | 
                      DEX                                       ;;9206|9271+9271/9271\9273;  | 
                      BPL -                                     ;;9207|9272+9272/9272\9274; /  
                      SEP #$10                                  ;;9209|9274+9274/9274\9276; \ Set A to 8bit and return ; Index (8 bit) 
                      RTS                                       ;;920B|9276+9276/9276\9278; /  
                                                                ;;                        ;
                                                                ;;                        ;
DATA_009277:          db $41,$26                                ;;920C|9277+9277/9277\9279;
                      dl DATA_00927C                            ;;920E|9279+9279/9279\927B;
                                                                ;;                        ;
                   if ver_is_lores(!_VER)             ;\   IF   ;;++++++++++++++++++++++++; J, U, SS, & E0
DATA_00927C:          db $F0                                    ;;9211|927C+927C/927C     ;
                      db $A0,$04                                ;;9212|927D+927D/927D     ;
                      db $F0                                    ;;9214|927F+927F/927F     ;
                      db $80,$05                                ;;9215|9280+9280/9280     ;
                      db $00                                    ;;9217|9282+9282/9282     ;
                   else                               ;<  ELSE  ;;------------------------; E1
DATA_00927C:          db $F8                                    ;;                   \927E;
                      db $A0,$04                                ;;                   \927F;
                      db $F8                                    ;;                   \9281;
                      db $90,$05                                ;;                   \9282;
                      db $00                                    ;;                   \9284;
                   endif                              ;/ ENDIF  ;;++++++++++++++++++++++++;
                                                                ;;                        ;
CODE_009283:          JSR CODE_009263                           ;;9218|9283+9283/9283\9285;
                      LDA.W !IRQNMICommand                      ;;921B|9286+9286/9286\9288;
                      LSR A                                     ;;921E|9289+9289/9289\928B;
                      BCS CODE_0092A0                           ;;921F|928A+928A/928A\928C;
                      REP #$10                                  ;;9221|928C+928C/928C\928E; Index (16 bit) 
                      LDX.W #con($01BE,$01BE,$01BE,$01BE,$01DE) ;;9223|928E+928E/928E\9290;
                    - STZ.W !WindowTable,X                      ;;9226|9291+9291/9291\9293; out? 
                      LDA.B #$FF                                ;;9229|9294+9294/9294\9296; *note to self: ctrl+insert, not shift+insert* 
                      STA.W !WindowTable+1,X                    ;;922B|9296+9296/9296\9298; ...  This is, uh, strange.  It pastes $00FF into the $04A0,x table 
                      INX                                       ;;922E|9299+9299/9299\929B; instead of $FF00 o_O 
                      INX                                       ;;922F|929A+929A/929A\929C;
                      CPX.W #con($01C0,$01C0,$01C0,$01C0,$01E0) ;;9230|929B+929B/929B\929D;
                      BCC -                                     ;;9233|929E+929E/929E\92A0;
CODE_0092A0:          LDA.B #$80                                ;;9235|92A0+92A0/92A0\92A2;  Enable channel 7 in HDMA, disable all other HDMA channels 
                      STA.W !HDMAEnable                         ;;9237|92A2+92A2/92A2\92A4;  $7E:0D9F - H-DMA Channel Enable RAM Mirror 
                      SEP #$10                                  ;;923A|92A5+92A5/92A5\92A7; Index (8 bit) 
                      RTS                                       ;;923C|92A7+92A7/92A7\92A9;
                                                                ;;                        ;
CODE_0092A8:          JSR CODE_009263                           ;;923D|92A8+92A8/92A8\92AA; these are somewhat the same subroutine, but also not >_> 
                      REP #$10                                  ;;9240|92AB+92AB/92AB\92AD; Index (16 bit) 
                      LDX.W #$0198                              ;;9242|92AD+92AD/92AD\92AF;
                      BRA -                                     ;;9245|92B0+92B0/92B0\92B2;
                                                                ;;                        ;
CODE_0092B2:          LDA.B #$58                                ;;9247|92B2+92B2/92B2\92B4; Index (8 bit) 
                      STA.W !WindowTable                        ;;9249|92B4+92B4/92B4\92B6;
                      STA.W !WindowTable+$0A                    ;;924C|92B7+92B7/92B7\92B9;
                      STA.W !WindowTable+$14                    ;;924F|92BA+92BA/92BA\92BC;
                      STZ.W !WindowTable+9                      ;;9252|92BD+92BD/92BD\92BF;
                      STZ.W !WindowTable+$13                    ;;9255|92C0+92C0/92C0\92C2;
                      STZ.W !WindowTable+$1D                    ;;9258|92C3+92C3/92C3\92C5;
                      LDX.B #$04                                ;;925B|92C6+92C6/92C6\92C8;
                    - LDA.W DATA_009313,X                       ;;925D|92C8+92C8/92C8\92CA;
                      STA.W !HW_DMAPARAM+$50,X                  ;;9260|92CB+92CB/92CB\92CD;
                      LDA.W DATA_009318,X                       ;;9263|92CE+92CE/92CE\92D0;
                      STA.W !HW_DMAPARAM+$60,X                  ;;9266|92D1+92D1/92D1\92D3;
                      LDA.W DATA_00931D,X                       ;;9269|92D4+92D4/92D4\92D6;
                      STA.W !HW_DMAPARAM+$70,X                  ;;926C|92D7+92D7/92D7\92D9;
                      DEX                                       ;;926F|92DA+92DA/92DA\92DC;
                      BPL -                                     ;;9270|92DB+92DB/92DB\92DD;
                      LDA.B #$00                                ;;9272|92DD+92DD/92DD\92DF;
                      STA.W !HW_HDMABANK+$50                    ;;9274|92DF+92DF/92DF\92E1; Data Bank (H-DMA)
                      STA.W !HW_HDMABANK+$60                    ;;9277|92E2+92E2/92E2\92E4; Data Bank (H-DMA)
                      STA.W !HW_HDMABANK+$70                    ;;927A|92E5+92E5/92E5\92E7; Data Bank (H-DMA)
                      LDA.B #$E0                                ;;927D|92E8+92E8/92E8\92EA;
                      STA.W !HDMAEnable                         ;;927F|92EA+92EA/92EA\92EC;
CODE_0092ED:          REP #$30                                  ;;9282|92ED+92ED/92ED\92EF; Index (16 bit) Accum (16 bit) 
                      LDY.W #$0008                              ;;9284|92EF+92EF/92EF\92F1;
                      LDX.W #$0014                              ;;9287|92F2+92F2/92F2\92F4;
                    - LDA.W !Layer1XPos,Y                       ;;928A|92F5+92F5/92F5\92F7;
                      STA.W !WindowTable+1,X                    ;;928D|92F8+92F8/92F8\92FA;
                      STA.W !WindowTable+4,X                    ;;9290|92FB+92FB/92FB\92FD;
                      LDA.W !NextLayer1XPos,Y                   ;;9293|92FE+92FE/92FE\9300;
                      STA.W !WindowTable+7,X                    ;;9296|9301+9301/9301\9303;
                      TXA                                       ;;9299|9304+9304/9304\9306;
                      SEC                                       ;;929A|9305+9305/9305\9307;
                      SBC.W #$000A                              ;;929B|9306+9306/9306\9308;
                      TAX                                       ;;929E|9309+9309/9309\930B;
                      DEY                                       ;;929F|930A+930A/930A\930C;
                      DEY                                       ;;92A0|930B+930B/930B\930D;
                      DEY                                       ;;92A1|930C+930C/930C\930E;
                      DEY                                       ;;92A2|930D+930D/930D\930F;
                      BPL -                                     ;;92A3|930E+930E/930E\9310;
                      SEP #$30                                  ;;92A5|9310+9310/9310\9312; Index (8 bit) Accum (8 bit) 
                      RTS                                       ;;92A7|9312+9312/9312\9314;
                                                                ;;                        ;
                                                                ;;                        ;
DATA_009313:          db $02,$0D                                ;;92A8|9313+9313/9313\9315;
                      dl !WindowTable&$FFFF                     ;;92AA|9315+9315/9315\9317;
                                                                ;;                        ;
DATA_009318:          db $02,$0F                                ;;92AD|9318+9318/9318\931A;
                      dl !WindowTable+$0A&$FFFF                 ;;92AF|931A+931A/931A\931C;
                                                                ;;                        ;
DATA_00931D:          db $02,$11                                ;;92B2|931D+931D/931D\931F;
                      dl !WindowTable+$14&$FFFF                 ;;92B4|931F+931F/931F\9321;
                                                                ;;                        ;
GetGameMode:          LDA.W !GameMode                           ;;92B7|9322+9322/9322\9324; Load game mode 
                      JSL ExecutePtr                            ;;92BA|9325+9325/9325\9327;
                                                                ;;                        ;
                      dw GameMode00                             ;;92BE|9329+9329/9329\932B; 00 - load nintendo presents
                      dw GameMode01                             ;;92C0|932B+932B/932B\932D; 01 - nintendo presents
                      dw GMTransition                           ;;92C2|932D+932D/932D\932F; 02 - fade out to title screen
                      dw GameMode03                             ;;92C4|932F+932F/932F\9331; 03 - load title screen
                      dw GameMode04                             ;;92C6|9331+9331/9331\9333; 04 - prepare title screen
                      dw GMTransition                           ;;92C8|9333+9333/9333\9335; 05 - fade in to title screen
                      dw GameMode06                             ;;92CA|9335+9335/9335\9337; 06 - title screen spotlight
                      dw GameMode07                             ;;92CC|9337+9337/9337\9339; 07 - title screen
                      dw GameMode08                             ;;92CE|9339+9339/9339\933B; 08 - file select
                      dw GameMdoe09                             ;;92D0|933B+933B/933B\933D; 09 - file delete
                      dw GameMode0A                             ;;92D2|933D+933D/933D\933F; 0A - player select
                      dw GMTransition                           ;;92D4|933F+933F/933F\9341; 0B - fade out to overworld
                      dw GameMode0C                             ;;92D6|9341+9341/9341\9343; 0C - load overworld
                      dw GMTransition                           ;;92D8|9343+9343/9343\9345; 0D - fade in to overworld
                      dw GameMode0E                             ;;92DA|9345+9345/9345\9347; 0E - overworld
                      dw TempFade                               ;;92DC|9347+9347/9347\9349; 0F - fade out to level
                      dw GameMode10                             ;;92DE|9349+9349/9349\934B; 10 - finish fade to level
                      dw GameMode11                             ;;92E0|934B+934B/934B\934D; 11 - load level
                      dw GameMode12                             ;;92E2|934D+934D/934D\934F; 12 - prepare level
                      dw TempFade                               ;;92E4|934F+934F/934F\9351; 13 - fade in to level
                      dw GameMode14                             ;;92E6|9351+9351/9351\9353; 14 - level
                      dw GMTransition                           ;;92E8|9353+9353/9353\9355; 15 - fade out to game over/time up
                      dw GameMode16                             ;;92EA|9355+9355/9355\9357; 16 - load game over/time up
                      dw GameMode17                             ;;92EC|9357+9357/9357\9359; 17 - game over/time up
                      dw GMTransition                           ;;92EE|9359+9359/9359\935B; 18 - fade out to credits
                      dw GameMode19                             ;;92F0|935B+935B/935B\935D; 19 - load credits
                      dw GMTransition                           ;;92F2|935D+935D/935D\935F; 1A - fade in to credits
                      dw GameMode1B                             ;;92F4|935F+935F/935F\9361; 1B - staff credits
                      dw GMTransition                           ;;92F6|9361+9361/9361\9363; 1C - fade out to credits yoshi house
                      dw GameMode1D                             ;;92F8|9363+9363/9363\9365; 1D - load credits yoshi house
                      dw GMTransition                           ;;92FA|9365+9365/9365\9367; 1E - fade in to credits yoshi house
                      dw GameMode1F                             ;;92FC|9367+9367/9367\9369; 1F - credits yoshi house
                      dw GMTransition                           ;;92FE|9369+9369/9369\936B; 20 - fade out to load credits enemy list
                      dw GameMode21                             ;;9300|936B+936B/936B\936D; 21 - load credits enemy list
                      dw GMTransition                           ;;9302|936D+936D/936D\936F; 22 - fade out to credits enemy list
                      dw GameMode23                             ;;9304|936F+936F/936F\9371; 23 - prepare credits enemy list
                      dw GMTransition                           ;;9306|9371+9371/9371\9373; 24 - fade in to credits enemy list
                      dw GameMode25                             ;;9308|9373+9373/9373\9375; 25 - credits enemy list
                      dw GMTransition                           ;;930A|9375+9375/9375\9377; 26 - fade out to the end screen
                      dw GameMode27                             ;;930C|9377+9377/9377\9379; 27 - load the end screen
                      dw GameMode28                             ;;930E|9379+9379/9379\937B; 28 - fade in to the end screen
                      dw GameMode29                             ;;9310|937B+937B/937B\937D; 29 - the end screen
                                                                ;;                        ;
TurnOffIO:            STZ.W !HW_NMITIMEN                        ;;9312|937D+937D/937D\937F; Disable NMI ,VIRQ, HIRQ, Joypads ; NMI, V/H Count, and Joypad Enable
                      STZ.W !HW_HDMAEN                          ;;9315|9380+9380/9380\9382; Turn off all HDMA ; H-DMA Channel Enable
                      LDA.B #$80                                ;;9318|9383+9383/9383\9385; \ 
                      STA.W !HW_INIDISP                         ;;931A|9385+9385/9385\9387; /Disable Screen ; Screen Display Register
                      RTS                                       ;;931D|9388+9388/9388\938A; And return 
                                                                ;;                        ;
                                                                ;;                        ;
NintendoPos:          db $60,$70,$80,$90                        ;;931E|9389+9389/9389\938B;
NintendoTile:         db $02,$04,$06,$08                        ;;9322|938D+938D/938D\938F; Nintendo Presents tilemap 
                                                                ;;                        ;
GameMode00:           JSR CODE_0085FA                           ;;9326|9391+9391/9391\9393;
                      JSR SetUpScreen                           ;;9329|9394+9394/9394\9396;
                      JSR CODE_00A993                           ;;932C|9397+9397/9397\9399;
                      LDY.B #$0C                                ;;932F|939A+939A/939A\939C; \ Load Nintendo Presents logo 
                      LDX.B #$03                                ;;9331|939C+939C/939C\939E;  | 
                    - LDA.W NintendoPos,X                       ;;9333|939E+939E/939E\93A0;  | 
                      STA.W !OAMTileXPos,Y                      ;;9336|93A1+93A1/93A1\93A3;  | 
                      LDA.B #$70                                ;;9339|93A4+93A4/93A4\93A6;  |   <-Y position of logo 
                      STA.W !OAMTileYPos,Y                      ;;933B|93A6+93A6/93A6\93A8;  | 
                      LDA.W NintendoTile,X                      ;;933E|93A9+93A9/93A9\93AB;  | 
                      STA.W !OAMTileNo,Y                        ;;9341|93AC+93AC/93AC\93AE;  | 
                      LDA.B #$30                                ;;9344|93AF+93AF/93AF\93B1;  | 
                      STA.W !OAMTileAttr,Y                      ;;9346|93B1+93B1/93B1\93B3;  | 
                      DEY                                       ;;9349|93B4+93B4/93B4\93B6;  | 
                      DEY                                       ;;934A|93B5+93B5/93B5\93B7;  | 
                      DEY                                       ;;934B|93B6+93B6/93B6\93B8;  | 
                      DEY                                       ;;934C|93B7+93B7/93B7\93B9;  | 
                      DEX                                       ;;934D|93B8+93B8/93B8\93BA;  | 
                      BPL -                                     ;;934E|93B9+93B9/93B9\93BB; /  
                      LDA.B #$AA                                ;;9350|93BB+93BB/93BB\93BD; \ Related to making the sprites 16x16? 
                      STA.W !OAMTileBitSize                     ;;9352|93BD+93BD/93BD\93BF; /  
                      LDA.B #!SFX_COIN                           ;;9355|93C0+93C0/93C0\93C2; \ Play "Bing" sound? 
                      STA.W !SPCIO3                             ;;9357|93C2+93C2/93C2\93C4; /  
                      LDA.B #$40                                ;;935A|93C5+93C5/93C5\93C7; \ Set timer to x40 
                      STA.W !VariousPromptTimer                 ;;935C|93C7+93C7/93C7\93C9; /  
CODE_0093CA:          LDA.B #$0F                                ;;935F|93CA+93CA/93CA\93CC; \ Set brightness to max 
                      STA.W !Brightness                         ;;9361|93CC+93CC/93CC\93CE; /  
                      LDA.B #$01                                ;;9364|93CF+93CF/93CF\93D1;
                      STA.W !MosaicDirection                    ;;9366|93D1+93D1/93D1\93D3;
                      STZ.W !SpritePalette                      ;;9369|93D4+93D4/93D4\93D6; Sprite palette setting = 0 
                      JSR LoadPalette                           ;;936C|93D7+93D7/93D7\93D9; Load the palette 
                      STZ.W !BackgroundColor                    ;;936F|93DA+93DA/93DA\93DC; \ Black background 
                      STZ.W !BackgroundColor+1                  ;;9372|93DD+93DD/93DD\93DF; / 
                      JSR CODE_00922F                           ;;9375|93E0+93E0/93E0\93E2;
                      STZ.W !BlinkCursorPos                     ;;9378|93E3+93E3/93E3\93E5; Set menu pointer position to 0 
                      LDX.B #$10                                ;;937B|93E6+93E6/93E6\93E8; Enable sprites, disable layers 
                      LDY.B #$04                                ;;937D|93E8+93E8/93E8\93EA; Set Layer 3 to subscreen 
CODE_0093EA:          LDA.B #$01                                ;;937F|93EA+93EA/93EA\93EC;
                      STA.W !IRQNMICommand                      ;;9381|93EC+93EC/93EC\93EE;
                      LDA.B #$20                                ;;9384|93EF+93EF/93EF\93F1; CGADSUB = 20 
                      JSR ScreenSettings                        ;;9386|93F1+93F1/93F1\93F3; Apply above settings 
CODE_0093F4:          INC.W !GameMode                           ;;9389|93F4+93F4/93F4\93F6; Move on to Game Mode 01 
Mode04Finish:         LDA.B #$81                                ;;938C|93F7+93F7/93F7\93F9; \ Enable NMI and joypad, Disable V-count and H-cout 
                      STA.W !HW_NMITIMEN                        ;;938E|93F9+93F9/93F9\93FB; /  ; NMI, V/H Count, and Joypad Enable
                      RTS                                       ;;9391|93FC+93FC/93FC\93FE;
                                                                ;;                        ;
ScreenSettings:       STA.W !HW_CGADSUB                         ;;9392|93FD+93FD/93FD\93FF; \ Set CGADSUB settings to A ; Add/Subtract Select and Enable
                      STA.B !ColorSettings                      ;;9395|9400+9400/9400\9402; /  
                      STX.W !HW_TM                              ;;9397|9402+9402/9402\9404; Set "Background and Object Enable" to X ; Background and Object Enable
                      STY.W !HW_TS                              ;;939A|9405+9405/9405\9407; Set "Sub Screen Designation" Y ; Sub Screen Designation
                      STZ.W !HW_TMW                             ;;939D|9408+9408/9408\940A; \ Set "Window Mask Designation" for main and sub screen to x00 ; Window Mask Designation for Main Screen
                      STZ.W !HW_TSW                             ;;93A0|940B+940B/940B\940D; /  ; Window Mask Designation for Sub Screen
                      RTS                                       ;;93A3|940E+940E/940E\9410; Return 
                                                                ;;                        ;
GameMode01:           DEC.W !VariousPromptTimer                 ;;93A4|940F+940F/940F\9411; Decrease timer 
                      BNE Return00941A                          ;;93A7|9412+9412/9412\9414; \ If timer is 0: 
                      JSR CODE_00B888                           ;;93A9|9414+9414/9414\9416;  |Jump to sub $B888 
CODE_009417:          INC.W !GameMode                           ;;93AC|9417+9417/9417\9419;  |Move on to Game Mode 02 
Return00941A:         RTS                                       ;;93AF|941A+941A/941A\941C; Return 
                                                                ;;                        ;
GameMode06:           JSR SetUp0DA0GM4                          ;;93B0|941B+941B/941B\941D;
                      JSR CODE_009CBE                           ;;93B3|941E+941E/941E\9420;
                      BEQ +                                     ;;93B6|9421+9421/9421\9423;
                      LDA.B #$EC                                ;;93B8|9423+9423/9423\9425;
                      JSR CODE_009440                           ;;93BA|9425+9425/9425\9427;
                      INC.W !GameMode                           ;;93BD|9428+9428/9428\942A;
                      JMP CODE_009C9F                           ;;93C0|942B+942B/942B\942D;
                                                                ;;                        ;
                    + DEC.W !VariousPromptTimer                 ;;93C3|942E+942E/942E\9430;
                      BNE Return00941A                          ;;93C6|9431+9431/9431\9433;
                      INC.W !VariousPromptTimer                 ;;93C8|9433+9433/9433\9435;
                      LDA.W !SpotlightSize                      ;;93CB|9436+9436/9436\9438;
                      CLC                                       ;;93CE|9439+9439/9439\943B;
                      ADC.B #$04                                ;;93CF|943A+943A/943A\943C;
                      CMP.B #$F0                                ;;93D1|943C+943C/943C\943E;
                      BCS CODE_009417                           ;;93D3|943E+943E/943E\9440;
CODE_009440:          STA.W !SpotlightSize                      ;;93D5|9440+9440/9440\9442;
CODE_009443:          JSR CODE_00CA61                           ;;93D8|9443+9443/9443\9445;
                      LDA.B #$80                                ;;93DB|9446+9446/9446\9448; \  
                      STA.B !_0                                 ;;93DD|9448+9448/9448\944A;  |Store x80 in $00, 
                      LDA.B #con($70,$70,$70,$70,$78)           ;;93DF|944A+944A/944A\944C;  |Store x70 in $01 
                      STA.B !_1                                 ;;93E1|944C+944C/944C\944E; /  
                      JMP CODE_00CA88                           ;;93E3|944E+944E/944E\9450;
                                                                ;;                        ;
                                                                ;;                        ;
CutsceneBgColor:      db $02,$00,$04,$01,$00,$06,$04,$03        ;;93E6|9451+9451/9451\9453;
                                                                ;;                        ;
CutsceneCastlePal:    db $06,$05,$06,$03,$03,$06,$06,$03        ;;93EE|9459+9459/9459\945B; Castle palette to use for cutscenes ; Purpose of first byte is unknown 
                                                                ;;                        ;
CutsceneBackground:   db OtherStripes-StripeImages+$36          ;;93F6|9461+9461/9461\9463;
                      db OtherStripes-StripeImages+$36          ;;93F7|9462+9462/9462\9464;
                      db OtherStripes-StripeImages              ;;93F8|9463+9463/9463\9465;
                      db OtherStripes-OtherStripes+$0F          ;;93F9|9464+9464/9464\9466;
                      db OtherStripes-StripeImages+$36          ;;93FA|9465+9465/9465\9467;
                      db OtherStripes-StripeImages+3            ;;93FB|9466+9466/9466\9468;
                      db OtherStripes-StripeImages              ;;93FC|9467+9467/9467\9469;
                                                                ;;                        ;
GameMode19:           JSR CODE_0085FA                           ;;93FD|9468+9468/9468\946A;
                      JSR Clear_1A_13D3                         ;;9400|946B+946B/946B\946D;
                      JSR SetUpScreen                           ;;9403|946E+946E/946E\9470;
                      LDX.W !CutsceneID                         ;;9406|9471+9471/9471\9473; Cutscene number 
                      LDA.B #$18                                ;;9409|9474+9474/9474\9476;
                      STA.W !ObjectTileset                      ;;940B|9476+9476/9476\9478;
                      LDA.B #$14                                ;;940E|9479+9479/9479\947B;
                      STA.W !SpriteTileset                      ;;9410|947B+947B/947B\947D;
                      LDA.W CutsceneBgColor-1,X                 ;;9413|947E+947E/947E\9480;
                      STA.W !BackAreaColor                      ;;9416|9481+9481/9481\9483;
                      LDA.W CutsceneCastlePal-1,X               ;;9419|9484+9484/9484\9486;
                      STA.W !BackgroundPalette                  ;;941C|9487+9487/9487\9489;
                      STZ.W !SpritePalette                      ;;941F|948A+948A/948A\948C;
                      LDA.B #$01                                ;;9422|948D+948D/948D\948F;
                      STA.W !ForegroundPalette                  ;;9424|948F+948F/948F\9491;
                      CPX.B #$08                                ;;9427|9492+9492/9492\9494;
                      BNE CODE_0094B2                           ;;9429|9494+9494/9494\9496;
                      JSR CODE_00955E                           ;;942B|9496+9496/9496\9498;
                      LDA.B #OtherStripes-StripeImages+9        ;;942E|9499+9499/9499\949B;
                      STA.B !StripeImage                        ;;9430|949B+949B/949B\949D;
                      JSR LoadScrnImage                         ;;9432|949D+949D/949D\949F;
                      JSR UploadMusicBank3                      ;;9435|94A0+94A0/94A0\94A2;
                      JSL CODE_0C93DD                           ;;9438|94A3+94A3/94A3\94A5;
                      JSR CODE_009260                           ;;943C|94A7+94A7/94A7\94A9;
                      INC.W !ObjectTileset                      ;;943F|94AA+94AA/94AA\94AC;
                      INC.W !SpriteTileset                      ;;9442|94AD+94AD/94AD\94AF;
                      BRA +                                     ;;9445|94B0+94B0/94B0\94B2;
                                                                ;;                        ;
CODE_0094B2:          LDA.B #!BGM_CUTSCENEINTRO                 ;;9447|94B2+94B2/94B2\94B4;
                      STA.W !SPCIO2                             ;;9449|94B4+94B4/94B4\94B6;
                      LDA.W CutsceneBackground-1,X              ;;944C|94B7+94B7/94B7\94B9;
                      STA.B !StripeImage                        ;;944F|94BA+94BA/94BA\94BC;
                      JSR LoadScrnImage                         ;;9451|94BC+94BC/94BC\94BE;
                      LDA.B #OtherStripes-StripeImages+6        ;;9454|94BF+94BF/94BF\94C1;
                      STA.B !StripeImage                        ;;9456|94C1+94C1/94C1\94C3;
                      JSR LoadScrnImage                         ;;9458|94C3+94C3/94C3\94C5;
                      REP #$20                                  ;;945B|94C6+94C6/94C6\94C8; Accum (16 bit) 
                      LDA.W #$0090                              ;;945D|94C8+94C8/94C8\94CA;
                      STA.B !PlayerXPosNext                     ;;9460|94CB+94CB/94CB\94CD;
                      LDA.W #$0058                              ;;9462|94CD+94CD/94CD\94CF;
                      STA.B !PlayerYPosNext                     ;;9465|94D0+94D0/94D0\94D2;
                      SEP #$20                                  ;;9467|94D2+94D2/94D2\94D4; Accum (8 bit) 
                      INC.W !IsCarryingItem                     ;;9469|94D4+94D4/94D4\94D6;
                    + JSR UploadSpriteGFX                       ;;946C|94D7+94D7/94D7\94D9;
                      JSR LoadPalette                           ;;946F|94DA+94DA/94DA\94DC;
                      JSR CODE_00922F                           ;;9472|94DD+94DD/94DD\94DF;
                      LDX.B #$0B                                ;;9475|94E0+94E0/94E0\94E2;
                    - STZ.B !Layer1XPos,X                       ;;9477|94E2+94E2/94E2\94E4;
                      DEX                                       ;;9479|94E4+94E4/94E4\94E6;
                      BPL -                                     ;;947A|94E5+94E5/94E5\94E7;
                      LDA.B #$20                                ;;947C|94E7+94E7/94E7\94E9;
                      STA.B !SpriteProperties                   ;;947E|94E9+94E9/94E9\94EB;
                      JSR CODE_00A635                           ;;9480|94EB+94EB/94EB\94ED;
                      STZ.B !PlayerDirection                    ;;9483|94EE+94EE/94EE\94F0;
                      STZ.B !PlayerInAir                        ;;9485|94F0+94F0/94F0\94F2;
                      JSL CODE_00CEB1                           ;;9487|94F2+94F2/94F2\94F4;
                      LDX.B #$17                                ;;948B|94F6+94F6/94F6\94F8;
                      LDY.B #$00                                ;;948D|94F8+94F8/94F8\94FA;
                      JSR CODE_009622                           ;;948F|94FA+94FA/94FA\94FC;
GameMode1B:           JSL !OAMResetRoutine                      ;;9492|94FD+94FD/94FD\94FF;
                      LDA.W !CutsceneID                         ;;9496|9501+9501/9501\9503;
                      CMP.B #$08                                ;;9499|9504+9504/9504\9506;
                      BEQ CODE_009557                           ;;949B|9506+9506/9506\9508;
                      LDA.B !axlr0000Hold                       ;;949D|9508+9508/9508\950A;
                      AND.B #$00                                ;;949F|950A+950A/950A\950C; Change to #$30 to enter debug region below 
                      CMP.B #$30                                ;;94A1|950C+950C/950C\950E;
                      BNE CODE_009529                           ;;94A3|950E+950E/950E\9510;
                      LDA.B !byetudlrHold                       ;;94A5|9510+9510/9510\9512; \ Unreachable 
                      AND.B #$08                                ;;94A7|9512+9512/9512\9514;  | Debug: Boss defeated scene select 
                      BEQ ADDR_009523                           ;;94A9|9514+9514/9514\9516;  | 
                      LDA.W !CutsceneID                         ;;94AB|9516+9516/9516\9518;  | 
                      INC A                                     ;;94AE|9519+9519/9519\951B;  | 
                      CMP.B #$09                                ;;94AF|951A+951A/951A\951C;  | 
                      BCC +                                     ;;94B1|951C+951C/951C\951E;  | 
                      LDA.B #$01                                ;;94B3|951E+951E/951E\9520;  | 
                    + STA.W !CutsceneID                         ;;94B5|9520+9520/9520\9522;  | 
ADDR_009523:          LDA.B #$18                                ;;94B8|9523+9523/9523\9525;  | 
                      STA.W !GameMode                           ;;94BA|9525+9525/9525\9527;  | 
                      RTS                                       ;;94BD|9528+9528/9528\952A; / 
                                                                ;;                        ;
CODE_009529:          JSL CODE_0CC97E                           ;;94BE|9529+9529/9529\952B;
                      REP #$20                                  ;;94C2|952D+952D/952D\952F; Accum (16 bit) 
                      LDA.B !Layer1XPos                         ;;94C4|952F+952F/952F\9531;
                      PHA                                       ;;94C6|9531+9531/9531\9533;
                      LDA.B !Layer1YPos                         ;;94C7|9532+9532/9532\9534;
                      PHA                                       ;;94C9|9534+9534/9534\9536;
                      LDA.B !Layer2XPos                         ;;94CA|9535+9535/9535\9537;
                      STA.B !Layer1XPos                         ;;94CC|9537+9537/9537\9539;
                      LDA.B !Layer2YPos                         ;;94CE|9539+9539/9539\953B;
                      STA.B !Layer1YPos                         ;;94D0|953B+953B/953B\953D;
                      SEP #$20                                  ;;94D2|953D+953D/953D\953F; Accum (8 bit) 
                      JSL CODE_00E2BD                           ;;94D4|953F+953F/953F\9541;
                      REP #$20                                  ;;94D8|9543+9543/9543\9545; Accum (16 bit) 
                      PLA                                       ;;94DA|9545+9545/9545\9547;
                      STA.B !Layer1YPos                         ;;94DB|9546+9546/9546\9548;
                      PLA                                       ;;94DD|9548+9548/9548\954A;
                      STA.B !Layer1XPos                         ;;94DE|9549+9549/9549\954B;
                      SEP #$20                                  ;;94E0|954B+954B/954B\954D; Accum (8 bit) 
                      LDA.B #$0C                                ;;94E2|954D+954D/954D\954F;
                      STA.B !PlayerAnimation                    ;;94E4|954F+954F/954F\9551;
                      JSR CODE_00C47E                           ;;94E6|9551+9551/9551\9553;
                      JMP CODE_008494                           ;;94E9|9554+9554/9554\9556;
                                                                ;;                        ;
CODE_009557:          JSL CODE_0C938D                           ;;94EC|9557+9557/9557\9559;
                      JMP CODE_008494                           ;;94F0|955B+955B/955B\955D;
                                                                ;;                        ;
CODE_00955E:          LDY.B #$2F                                ;;94F3|955E+955E/955E\9560;
                      JSL CODE_00BA28                           ;;94F5|9560+9560/9560\9562;
                      LDA.B #$80                                ;;94F9|9564+9564/9564\9566;
                      STA.W !HW_VMAINC                          ;;94FB|9566+9566/9566\9568; VRAM Address Increment Value
                      REP #$30                                  ;;94FE|9569+9569/9569\956B; Index (16 bit) Accum (16 bit) 
                      LDA.W #$4600                              ;;9500|956B+956B/956B\956D;
                      STA.W !HW_VMADD                           ;;9503|956E+956E/956E\9570; Address for VRAM Read/Write (Low Byte)
                      LDX.W #$0200                              ;;9506|9571+9571/9571\9573;
                    - LDA.B [!_0]                               ;;9509|9574+9574/9574\9576;
                      STA.W !HW_VMDATA                          ;;950B|9576+9576/9576\9578; Data for VRAM Write (Low Byte)
                      INC.B !_0                                 ;;950E|9579+9579/9579\957B;
                      INC.B !_0                                 ;;9510|957B+957B/957B\957D;
                      DEX                                       ;;9512|957D+957D/957D\957F;
                      BNE -                                     ;;9513|957E+957E/957E\9580;
                      SEP #$30                                  ;;9515|9580+9580/9580\9582; Index (8 bit) Accum (8 bit) 
                      RTS                                       ;;9517|9582+9582/9582\9584;
                                                                ;;                        ;
GameMode1D:           INC.W !CutsceneID                         ;;9518|9583+9583/9583\9585;
                      LDA.B #$28                                ;;951B|9586+9586/9586\9588;
                      LDY.B #$01                                ;;951D|9588+9588/9588\958A;
                      JSR CODE_0096CF                           ;;951F|958A+958A/958A\958C;
                      DEC.W !GameMode                           ;;9522|958D+958D/958D\958F;
                      LDA.B #$16                                ;;9525|9590+9590/9590\9592;
                      STA.W !SpriteTileset                      ;;9527|9592+9592/9592\9594;
                      JSR GameMode12                            ;;952A|9595+9595/9595\9597;
                      DEC.W !GameMode                           ;;952D|9598+9598/9598\959A;
                      JSR TurnOffIO                             ;;9530|959B+959B/959B\959D;
                      JSR CODE_0085FA                           ;;9533|959E+959E/959E\95A0;
                      JSR CODE_00A993                           ;;9536|95A1+95A1/95A1\95A3;
                      JSL CODE_0CA3C9                           ;;9539|95A4+95A4/95A4\95A6;
                      JSR CODE_00961E                           ;;953D|95A8+95A8/95A8\95AA;
GameMode1F:           JSL !OAMResetRoutine                      ;;9540|95AB+95AB/95AB\95AD;
                      JSL CODE_0C939A                           ;;9544|95AF+95AF/95AF\95B1;
                      INC.B !EffFrame                           ;;9548|95B3+95B3/95B3\95B5;
                      JSL CODE_05BB39                           ;;954A|95B5+95B5/95B5\95B7;
                      JMP CODE_008494                           ;;954E|95B9+95B9/95B9\95BB;
                                                                ;;                        ;
GameMode21:           JSL CODE_0C93AD                           ;;9551|95BC+95BC/95BC\95BE;
                      RTS                                       ;;9555|95C0+95C0/95C0\95C2;
                                                                ;;                        ;
GameMode23:           JSR CODE_0085FA                           ;;9556|95C1+95C1/95C1\95C3;
                      JSR Clear_1A_13D3                         ;;9559|95C4+95C4/95C4\95C6;
                      JSR SetUpScreen                           ;;955C|95C7+95C7/95C7\95C9;
                      JSL CODE_0CAD8C                           ;;955F|95CA+95CA/95CA\95CC;
                      JSL CODE_05801E                           ;;9563|95CE+95CE/95CE\95D0;
                      LDA.W !CreditsScreenNumber                ;;9567|95D2+95D2/95D2\95D4;
                      CMP.B #$0A                                ;;956A|95D5+95D5/95D5\95D7;
                      BNE CODE_0095E0                           ;;956C|95D7+95D7/95D7\95D9;
                      LDA.B #$13                                ;;956E|95D9+95D9/95D9\95DB;
                      STA.W !SpriteTileset                      ;;9570|95DB+95DB/95DB\95DD;
                      BRA +                                     ;;9573|95DE+95DE/95DE\95E0;
                                                                ;;                        ;
CODE_0095E0:          CMP.B #$0C                                ;;9575|95E0+95E0/95E0\95E2;
                      BNE +                                     ;;9577|95E2+95E2/95E2\95E4;
                      LDA.B #$17                                ;;9579|95E4+95E4/95E4\95E6;
                      STA.W !SpriteTileset                      ;;957B|95E6+95E6/95E6\95E8;
                    + JSR UploadSpriteGFX                       ;;957E|95E9+95E9/95E9\95EB;
                      JSR LoadPalette                           ;;9581|95EC+95EC/95EC\95EE;
                      JSL CODE_05809E                           ;;9584|95EF+95EF/95EF\95F1;
                      JSR CODE_00A5F9                           ;;9588|95F3+95F3/95F3\95F5;
                      JSL CODE_0CADF6                           ;;958B|95F6+95F6/95F6\95F8;
                      LDA.W !CreditsScreenNumber                ;;958F|95FA+95FA/95FA\95FC;
                      CMP.B #$0C                                ;;9592|95FD+95FD/95FD\95FF;
                      BNE CODE_009612                           ;;9594|95FF+95FF/95FF\9601;
                      LDX.B #$0B                                ;;9596|9601+9601/9601\9603;
                    - LDA.W SpriteColors+$A8,X                  ;;9598|9603+9603/9603\9605;
                      STA.W !MainPalette+$104,X                 ;;959B|9606+9606/9606\9608;
                      LDA.W SpriteColors+$B4,X                  ;;959E|9609+9609/9609\960B;
                      STA.W !MainPalette+$124,X                 ;;95A1|960C+960C/960C\960E;
                      DEX                                       ;;95A4|960F+960F/960F\9611;
                      BPL -                                     ;;95A5|9610+9610/9610\9612;
CODE_009612:          JSR CODE_00922F                           ;;95A7|9612+9612/9612\9614;
                      JSR CODE_0092B2                           ;;95AA|9615+9615/9615\9617;
                      JSR LoadScrnImage                         ;;95AD|9618+9618/9618\961A;
                      JSR GameMode25                            ;;95B0|961B+961B/961B\961D;
CODE_00961E:          LDX.B #$15                                ;;95B3|961E+961E/961E\9620;
                      LDY.B #$02                                ;;95B5|9620+9620/9620\9622;
CODE_009622:          JSR KeepModeActive                        ;;95B7|9622+9622/9622\9624;
                      LDA.B #$09                                ;;95BA|9625+9625/9625\9627;
                      STA.B !MainBGMode                         ;;95BC|9627+9627/9627\9629;
                      JMP CODE_0093EA                           ;;95BE|9629+9629/9629\962B;
                                                                ;;                        ;
GameMode25:           STZ.W !PlayerGfxTileCount                 ;;95C1|962C+962C/962C\962E;
                      JSR CODE_0092ED                           ;;95C4|962F+962F/962F\9631;
                      JSL !OAMResetRoutine                      ;;95C7|9632+9632/9632\9634;
                      JSL CODE_0C93A5                           ;;95CB|9636+9636/9636\9638;
                      JMP CODE_008494                           ;;95CF|963A+963A/963A\963C;
                                                                ;;                        ;
GameMode27:           JSR CODE_0085FA                           ;;95D2|963D+963D/963D\963F;
                      JSR Clear_1A_13D3                         ;;95D5|9640+9640/9640\9642;
                      JSR SetUpScreen                           ;;95D8|9643+9643/9643\9645;
                      JSR CODE_00955E                           ;;95DB|9646+9646/9646\9648;
                      LDA.B #$19                                ;;95DE|9649+9649/9649\964B;
                      STA.W !SpriteTileset                      ;;95E0|964B+964B/964B\964D;
                      LDA.B #$03                                ;;95E3|964E+964E/964E\9650;
                      STA.W !BackAreaColor                      ;;95E5|9650+9650/9650\9652;
                      LDA.B #$03                                ;;95E8|9653+9653/9653\9655;
                      STA.W !BackgroundPalette                  ;;95EA|9655+9655/9655\9657;
                      JSR UploadSpriteGFX                       ;;95ED|9658+9658/9658\965A;
                      JSR LoadPalette                           ;;95F0|965B+965B/965B\965D;
                      LDX.B #$0B                                ;;95F3|965E+965E/965E\9660;
                    - LDA.W TheEndColors,X                      ;;95F5|9660+9660/9660\9662;
                      STA.W !MainPalette+$1A4,X                 ;;95F8|9663+9663/9663\9665;
                      LDA.W TheEndColors+$0C,X                  ;;95FB|9666+9666/9666\9668;
                      STA.W !MainPalette+$1C4,X                 ;;95FE|9669+9669/9669\966B;
                      LDA.W TheEndColors+$18,X                  ;;9601|966C+966C/966C\966E;
                      STA.W !MainPalette+$1E4,X                 ;;9604|966F+966F/966F\9671;
                      DEX                                       ;;9607|9672+9672/9672\9674;
                      BPL -                                     ;;9608|9673+9673/9673\9675;
                      JSR CODE_00922F                           ;;960A|9675+9675/9675\9677;
                      LDA.B #OtherStripes-StripeImages+$0C      ;;960D|9678+9678/9678\967A;
                      STA.B !StripeImage                        ;;960F|967A+967A/967A\967C;
                      JSR LoadScrnImage                         ;;9611|967C+967C/967C\967E;
                      JSL CODE_0CAADF                           ;;9614|967F+967F/967F\9681;
                      JSR CODE_008494                           ;;9618|9683+9683/9683\9685;
                      LDX.B #$14                                ;;961B|9686+9686/9686\9688;
                      LDY.B #$00                                ;;961D|9688+9688/9688\968A;
                      JMP CODE_009622                           ;;961F|968A+968A/968A\968C;
                                                                ;;                        ;
GameMode29:           RTS                                       ;;9622|968D+968D/968D\968F;
                                                                ;;                        ;
GameMode10:           JSR CODE_0085FA                           ;;9623|968E+968E/968E\9690;
                      LDA.W !BonusGameActivate                  ;;9626|9691+9691/9691\9693;
                      BNE CODE_0096A8                           ;;9629|9694+9694/9694\9696;
                      LDA.W !SublevelCount                      ;;962B|9696+9696/9696\9698;
                      ORA.W !ShowMarioStart                     ;;962E|9699+9699/9699\969B;
                      ORA.W !OverworldOverride                  ;;9631|969C+969C/969C\969E;
                      BNE +                                     ;;9634|969F+969F/969F\96A1;
                      LDA.W !OverworldLayer1Tile                ;;9636|96A1+96A1/96A1\96A3;
                      CMP.B #$56                                ;;9639|96A4+96A4/96A4\96A6;
                      BEQ +                                     ;;963B|96A6+96A6/96A6\96A8;
CODE_0096A8:          JSR CODE_0091B1                           ;;963D|96A8+96A8/96A8\96AA;
                    + JMP CODE_0093CA                           ;;9640|96AB+96AB/96AB\96AD;
                                                                ;;                        ;
GameMode03:           STZ.W !HW_NMITIMEN                        ;;9643|96AE+96AE/96AE\96B0; NMI, V/H Count, and Joypad Enable
                      JSR ClearStack                            ;;9646|96B1+96B1/96B1\96B3;
                      LDX.B #$07                                ;;9649|96B4+96B4/96B4\96B6;
                      LDA.B #$FF                                ;;964B|96B6+96B6/96B6\96B8;
                    - STA.W !SpriteGFXFile,X                    ;;964D|96B8+96B8/96B8\96BA;
                      DEX                                       ;;9650|96BB+96BB/96BB\96BD;
                      BPL -                                     ;;9651|96BC+96BC/96BC\96BE;
                      LDA.W !OverworldOverride                  ;;9653|96BE+96BE/96BE\96C0;
                      BNE +                                     ;;9656|96C1+96C1/96C1\96C3;
                      JSR UploadMusicBank1                      ;;9658|96C3+96C3/96C3\96C5;
                      LDA.B #!BGM_TITLESCREEN                   ;;965B|96C6+96C6/96C6\96C8; \ Set title screen music 
                      STA.W !SPCIO2                             ;;965D|96C8+96C8/96C8\96CA; / 
                    + LDA.B #$EB                                ;;9660|96CB+96CB/96CB\96CD;
                      LDY.B #$00                                ;;9662|96CD+96CD/96CD\96CF;
CODE_0096CF:          STA.W !OverworldOverride                  ;;9664|96CF+96CF/96CF\96D1;
                      STY.W !OWPlayerSubmap                     ;;9667|96D2+96D2/96D2\96D4;
GameMode11:           STZ.W !HW_NMITIMEN                        ;;966A|96D5+96D5/96D5\96D7; NMI, V/H Count, and Joypad Enable
                      JSR NoButtons                             ;;966D|96D8+96D8/96D8\96DA;
                      LDA.W !SublevelCount                      ;;9670|96DB+96DB/96DB\96DD;
                      BNE +                                     ;;9673|96DE+96DE/96DE\96E0;
                      LDA.W !ShowMarioStart                     ;;9675|96E0+96E0/96E0\96E2;
                      BEQ +                                     ;;9678|96E3+96E3/96E3\96E5;
                      JSL CODE_04DC09                           ;;967A|96E5+96E5/96E5\96E7;
                    + STZ.W !Layer3ScrollType                   ;;967E|96E9+96E9/96E9\96EB;
                      STZ.W !OverworldProcess                   ;;9681|96EC+96EC/96EC\96EE;
                      LDA.B #$50                                ;;9684|96EF+96EF/96EF\96F1;
                      STA.W !DrumrollTimer                      ;;9686|96F1+96F1/96F1\96F3;
                      JSL CODE_05D796                           ;;9689|96F4+96F4/96F4\96F6;
                      LDX.B #$07                                ;;968D|96F8+96F8/96F8\96FA;
                    - LDA.B !Layer1XPos,X                       ;;968F|96FA+96FA/96FA\96FC;
                      STA.W !NextLayer1XPos,X                   ;;9691|96FC+96FC/96FC\96FE;
                      DEX                                       ;;9694|96FF+96FF/96FF\9701;
                      BPL -                                     ;;9695|9700+9700/9700\9702;
                      JSR CODE_008134                           ;;9697|9702+9702/9702\9704;
                      JSR CODE_00A635                           ;;969A|9705+9705/9705\9707;
                      LDA.B #$20                                ;;969D|9708+9708/9708\970A;
                      STA.B !LastScreenHoriz                    ;;969F|970A+970A/970A\970C;
                      JSR CODE_00A796                           ;;96A1|970C+970C/970C\970E;
                      INC.W !ScreenScrollAtWill                 ;;96A4|970F+970F/970F\9711;
                      JSL CODE_00F6DB                           ;;96A7|9712+9712/9712\9714;
                      JSL CODE_05801E                           ;;96AB|9716+9716/9716\9718;
                      LDA.W !OverworldOverride                  ;;96AF|971A+971A/971A\971C;
                      BEQ CODE_009728                           ;;96B2|971D+971D/971D\971F;
                      CMP.B #$E9                                ;;96B4|971F+971F/971F\9721;
                      BNE CODE_009740                           ;;96B6|9721+9721/9721\9723;
                      LDA.B #$13                                ;;96B8|9723+9723/9723\9725;
                      STA.W !MusicBackup                        ;;96BA|9725+9725/9725\9727;
CODE_009728:          LDA.W !MusicBackup                        ;;96BD|9728+9728/9728\972A;
                      CMP.B #$40                                ;;96C0|972B+972B/972B\972D;
                      BCS CODE_00973B                           ;;96C2|972D+972D/972D\972F;
                      LDY.W !IRQNMICommand                      ;;96C4|972F+972F/972F\9731;
                      CPY.B #$C1                                ;;96C7|9732+9732/9732\9734;
                      BNE +                                     ;;96C9|9734+9734/9734\9736;
                      LDA.B #!BGM_BOWSERINTERLUDE               ;;96CB|9736+9736/9736\9738;
                    + STA.W !SPCIO2                             ;;96CD|9738+9738/9738\973A;
CODE_00973B:          AND.B #$BF                                ;;96D0|973B+973B/973B\973D;
                      STA.W !MusicBackup                        ;;96D2|973D+973D/973D\973F;
CODE_009740:          STZ.W !Brightness                         ;;96D5|9740+9740/9740\9742;
                      STZ.W !MosaicDirection                    ;;96D8|9743+9743/9743\9745;
                      INC.W !GameMode                           ;;96DB|9746+9746/9746\9748;
                      JMP Mode04Finish                          ;;96DE|9749+9749/9749\974B;
                                                                ;;                        ;
CODE_00974C:          JSR HexToDec                              ;;96E1|974C+974C/974C\974E;
                      RTL                                       ;;96E4|974F+974F/974F\9751;
                                                                ;;                        ;
GameMode16:           JSR CODE_0085FA                           ;;96E5|9750+9750/9750\9752;
                      JSR CODE_00A82D                           ;;96E8|9753+9753/9753\9755;
                      JMP CODE_0093CA                           ;;96EB|9756+9756/9756\9758;
                                                                ;;                        ;
GameMode17:           JSL !OAMResetRoutine                      ;;96EE|9759+9759/9759\975B;
                      LDA.W !GameOverAnimation                  ;;96F2|975D+975D/975D\975F;
                      BNE CODE_00978B                           ;;96F5|9760+9760/9760\9762;
                      DEC.W !GameOverTimer                      ;;96F7|9762+9762/9762\9764;
                   if ver_is_ntsc(!_VER)              ;\   IF   ;;++++++++++++++++++++++++; J, U, & SS
                      BNE CODE_00978E                           ;;96FA|9765+9765          ;
                   else                               ;<  ELSE  ;;------------------------; E0, & E1
                      LDY.W !GameOverTimer                      ;;              /9765\9767;
                      CPY.B #$30                                ;;              /9768\976A;
                      BCS CODE_00978E                           ;;              /976A\976C;
                   endif                              ;/ ENDIF  ;;++++++++++++++++++++++++;
                      LDA.W !PlayerLives                        ;;96FC|9767+9767/976C\976E;
                      BPL CODE_009788                           ;;96FF|976A+976A/976F\9771;
                      STZ.W !CarryYoshiThruLvls                 ;;9701|976C+976C/9771\9773;
                      LDA.W !SavedPlayerLives                   ;;9704|976F+976F/9774\9776;
                      ORA.W !SavedPlayerLives+1                 ;;9707|9772+9772/9777\9779;
                      BPL CODE_009788                           ;;970A|9775+9775/977A\977C;
                      LDX.B #$0C                                ;;970C|9777+9777/977C\977E;
                    - STZ.W !AllDragonCoinsCollected,X          ;;970E|9779+9779/977E\9780;
                   if ver_is_japanese(!_VER)          ;\   IF   ;;++++++++++++++++++++++++; J
                      STZ.W !Checkpoint1upCollected,X           ;;9711                    ; it was correct...
                   else                               ;<  ELSE  ;;------------------------; U, SS, E0, & E1
                      STZ.W !_6,X                               ;;    |977C+977C/9781\9783; then they f'd it up
                   endif                              ;/ ENDIF  ;;++++++++++++++++++++++++;
                      STZ.W !MoonCollected,X                    ;;9714|977F+977F/9784\9786;
                      DEX                                       ;;9717|9782+9782/9787\9789;
                      BPL -                                     ;;9718|9783+9783/9788\978A;
                      INC.W !ShowContinueEnd                    ;;971A|9785+9785/978A\978C;
CODE_009788:          JMP CODE_009E62                           ;;971D|9788+9788/978D\978F;
                                                                ;;                        ;
CODE_00978B:          SEC                                       ;;9720|978B+978B/9790\9792;
                      SBC.B #$04                                ;;9721|978C+978C/9791\9793;
CODE_00978E:          STA.W !GameOverAnimation                  ;;9723|978E+978E/9793\9795;
                      CLC                                       ;;9726|9791+9791/9796\9798;
                      ADC.B #$A0                                ;;9727|9792+9792/9797\9799;
                      STA.B !_0                                 ;;9729|9794+9794/9799\979B;
                      ROL.B !_1                                 ;;972B|9796+9796/979B\979D;
                      LDX.W !DeathMessage                       ;;972D|9798+9798/979D\979F;
                      LDY.B #$48                                ;;9730|979B+979B/97A0\97A2;
CODE_00979D:          CPY.B #$28                                ;;9732|979D+979D/97A2\97A4;
                      BNE +                                     ;;9734|979F+979F/97A4\97A6;
                      LDA.B #$78                                ;;9736|97A1+97A1/97A6\97A8;
                      SEC                                       ;;9738|97A3+97A3/97A8\97AA;
                      SBC.W !GameOverAnimation                  ;;9739|97A4+97A4/97A9\97AB;
                      STA.B !_0                                 ;;973C|97A7+97A7/97AC\97AE;
                      ROL A                                     ;;973E|97A9+97A9/97AE\97B0;
                      EOR.B #$01                                ;;973F|97AA+97AA/97AF\97B1;
                      STA.B !_1                                 ;;9741|97AC+97AC/97B1\97B3;
                    + JSR CODE_0091E9                           ;;9743|97AE+97AE/97B3\97B5;
                      INX                                       ;;9746|97B1+97B1/97B6\97B8;
                      TYA                                       ;;9747|97B2+97B2/97B7\97B9;
                      SEC                                       ;;9748|97B3+97B3/97B8\97BA;
                      SBC.B #$08                                ;;9749|97B4+97B4/97B9\97BB;
                      TAY                                       ;;974B|97B6+97B6/97BB\97BD;
                      BNE CODE_00979D                           ;;974C|97B7+97B7/97BC\97BE;
                      JMP CODE_008494                           ;;974E|97B9+97B9/97BE\97C0;
                                                                ;;                        ;
CODE_0097BC:          LDA.B #$0F                                ;;9751|97BC+97BC/97C1\97C3;
                      STA.W !Brightness                         ;;9753|97BE+97BE/97C3\97C5; Set brightness to full (RAM mirror) 
                      STZ.W !MosaicSize                         ;;9756|97C1+97C1/97C6\97C8;
                      JSR GM__Mosaic                            ;;9759|97C4+97C4/97C9\97CB;
                      LDA.B #$20                                ;;975C|97C7+97C7/97CC\97CE; \ 
                      STA.B !Mode7XScale                        ;;975E|97C9+97C9/97CE\97D0; |Not sure what these bytes are used for yet, unless they're just more  
                      STA.B !Mode7YScale                        ;;9760|97CB+97CB/97D0\97D2; /scratch (I find that unlikely) 
                      STZ.W !ScreenShakeYOffset                 ;;9762|97CD+97CD/97D2\97D4;
                      JSR CODE_0085FA                           ;;9765|97D0+97D0/97D5\97D7;
                      LDA.B #$FF                                ;;9768|97D3+97D3/97D8\97DA;
                      STA.W !ObjectTileset                      ;;976A|97D5+97D5/97DA\97DC;
                      JSL CODE_03D958                           ;;976D|97D8+97D8/97DD\97DF;
                      BIT.W !IRQNMICommand                      ;;9771|97DC+97DC/97E1\97E3;
                      BVC CODE_009801                           ;;9774|97DF+97DF/97E4\97E6;
                      JSR CODE_009925                           ;;9776|97E1+97E1/97E6\97E8;
                      LDY.W !ActiveBoss                         ;;9779|97E4+97E4/97E9\97EB;
                      CPY.B #$03                                ;;977C|97E7+97E7/97EC\97EE;
                      BCC CODE_0097F1                           ;;977E|97E9+97E9/97EE\97F0;
                      BNE CODE_00983B                           ;;9780|97EB+97EB/97F0\97F2;
                      LDA.B #$18                                ;;9782|97ED+97ED/97F2\97F4;
                      BRA +                                     ;;9784|97EF+97EF/97F4\97F6;
                                                                ;;                        ;
CODE_0097F1:          LDA.B #$03                                ;;9786|97F1+97F1/97F6\97F8;
                      STA.W !PlayerBehindNet                    ;;9788|97F3+97F3/97F8\97FA;
                      LDA.B #$C8                                ;;978B|97F6+97F6/97FB\97FD;
                      STA.B !OAMAddress                         ;;978D|97F8+97F8/97FD\97FF;
                      LDA.B #$12                                ;;978F|97FA+97FA/97FF\9801;
                    + DEC.W !ObjectTileset                      ;;9791|97FC+97FC/9801\9803;
                      BRA +                                     ;;9794|97FF+97FF/9804\9806;
                                                                ;;                        ;
CODE_009801:          JSR CODE_00ADD9                           ;;9796|9801+9801/9806\9808;
                      JSR CODE_0092A8                           ;;9799|9804+9804/9809\980B;
                      LDX.B #$50                                ;;979C|9807+9807/980C\980E;
                      JSR CODE_009A3D                           ;;979E|9809+9809/980E\9810;
                      REP #$20                                  ;;97A1|980C+980C/9811\9813; Accum (16 bit) 
                      LDA.W #$0050                              ;;97A3|980E+980E/9813\9815;
                      STA.B !PlayerXPosNext                     ;;97A6|9811+9811/9816\9818;
                      LDA.W #$FFD0                              ;;97A8|9813+9813/9818\981A;
                      STA.B !PlayerYPosNext                     ;;97AB|9816+9816/981B\981D;
                      STZ.B !Layer1XPos                         ;;97AD|9818+9818/981D\981F;
                      STZ.W !NextLayer1XPos                     ;;97AF|981A+981A/981F\9821;
                      LDA.W #$FF90                              ;;97B2|981D+981D/9822\9824;
                      STA.B !Layer1YPos                         ;;97B5|9820+9820/9825\9827;
                      STA.W !NextLayer1YPos                     ;;97B7|9822+9822/9827\9829;
                      LDA.W #$0080                              ;;97BA|9825+9825/982A\982C;
                      STA.B !Mode7CenterX                       ;;97BD|9828+9828/982D\982F;
                      LDA.W #$0050                              ;;97BF|982A+982A/982F\9831;
                      STA.B !Mode7CenterY                       ;;97C2|982D+982D/9832\9834;
                      LDA.W #$0080                              ;;97C4|982F+982F/9834\9836;
                      STA.B !Mode7XPos                          ;;97C7|9832+9832/9837\9839;
                      LDA.W #$0010                              ;;97C9|9834+9834/9839\983B;
                      STA.B !Mode7YPos                          ;;97CC|9837+9837/983C\983E;
                      SEP #$20                                  ;;97CE|9839+9839/983E\9840; Accum (8 bit) 
CODE_00983B:          LDA.B #$13                                ;;97D0|983B+983B/9840\9842;
                    + STA.W !SpriteTileset                      ;;97D2|983D+983D/9842\9844;
                      JSR UploadSpriteGFX                       ;;97D5|9840+9840/9845\9847;
                      LDA.B #$11                                ;;97D8|9843+9843/9848\984A;
                      STA.W !HW_TMW                             ;;97DA|9845+9845/984A\984C; Window Mask Designation for Main Screen
                      STZ.W !HW_TS                              ;;97DD|9848+9848/984D\984F; Sub Screen Designation
                      STZ.W !HW_TSW                             ;;97E0|984B+984B/9850\9852; Window Mask Designation for Sub Screen
                      LDA.B #$02                                ;;97E3|984E+984E/9853\9855;
                      STA.B !Layer12Window                      ;;97E5|9850+9850/9855\9857;
                      LDA.B #$32                                ;;97E7|9852+9852/9857\9859;
                      STA.B !OBJCWWindow                        ;;97E9|9854+9854/9859\985B;
                      LDA.B #$20                                ;;97EB|9856+9856/985B\985D;
                      STA.B !ColorAddition                      ;;97ED|9858+9858/985D\985F;
                      JSR GM04DoDMA                             ;;97EF|985A+985A/985F\9861;
                      JSR CODE_008ACD                           ;;97F2|985D+985D/9862\9864;
CODE_009860:          JSL CODE_00E2BD                           ;;97F5|9860+9860/9865\9867;
                      JSR CODE_00A2F3                           ;;97F9|9864+9864/9869\986B;
                      JSR CODE_00C593                           ;;97FC|9867+9867/986C\986E;
                      STZ.B !PlayerYSpeed                       ;;97FF|986A+986A/986F\9871; Y speed = 0 
                      JSL CODE_01808C                           ;;9801|986C+986C/9871\9873;
                      JSL !OAMResetRoutine                      ;;9805|9870+9870/9875\9877;
                      RTS                                       ;;9809|9874+9874/9879\987B;
                                                                ;;                        ;
                                                                ;;                        ;
                      db $01,$00,$FF,$FF,$40,$00,$C0,$01        ;;980A|9875+9875/987A\987C;
                                                                ;;                        ;
CODE_00987D:          JSR CODE_008ACD                           ;;9812|987D+987D/9882\9884;
                      BIT.W !IRQNMICommand                      ;;9815|9880+9880/9885\9887;
                      BVC +                                     ;;9818|9883+9883/9888\988A;
                      JMP CODE_009A52                           ;;981A|9885+9885/988A\988C;
                                                                ;;                        ;
                    + JSL !OAMResetRoutine                      ;;981D|9888+9888/988D\988F;
                      JSL CODE_03C0C6                           ;;9821|988C+988C/9891\9893;
                      RTS                                       ;;9825|9890+9890/9895\9897;
                                                                ;;                        ;
                                                                ;;                        ;
DATA_009891:          dw $129E,$121E,$119E,$111E                ;;9826|9891+9891/9896\9898;
                      dw $161E,$159E,$151E,$149E                ;;982E|9899+9899/989E\98A0;
                      dw $141E,$139E,$131E,$169E                ;;9836|98A1+98A1/98A6\98A8;
                                                                ;;                        ;
CODE_0098A9:          LDA.W !IRQNMICommand                      ;;983E|98A9+98A9/98AE\98B0; \  
                      LSR A                                     ;;9841|98AC+98AC/98B1\98B3;  |If "Special level" is even, 
                      BCS +                                     ;;9842|98AD+98AD/98B2\98B4; / branch to $98E1 
                      LDA.B !EffFrame                           ;;9844|98AF+98AF/98B4\98B6;
                      LSR A                                     ;;9846|98B1+98B1/98B6\98B8;
                      LSR A                                     ;;9847|98B2+98B2/98B7\98B9;
                      AND.B #$06                                ;;9848|98B3+98B3/98B8\98BA;
                      TAX                                       ;;984A|98B5+98B5/98BA\98BC;
                      REP #$20                                  ;;984B|98B6+98B6/98BB\98BD; 16 bit A ; Accum (16 bit) 
                      LDY.B #$80                                ;;984D|98B8+98B8/98BD\98BF;
                      STY.W !HW_VMAINC                          ;;984F|98BA+98BA/98BF\98C1; VRAM Address Increment Value
                      LDA.W #$1801                              ;;9852|98BD+98BD/98C2\98C4;
                      STA.W !HW_DMAPARAM+$20                    ;;9855|98C0+98C0/98C5\98C7; Parameters for DMA Transfer
                      LDA.W #$7800                              ;;9858|98C3+98C3/98C8\98CA;
                      STA.W !HW_VMADD                           ;;985B|98C6+98C6/98CB\98CD; Address for VRAM Read/Write (Low Byte)
                      LDA.L DATA_05BA39,X                       ;;985E|98C9+98C9/98CE\98D0;
                      STA.W !HW_DMAADDR+$20                     ;;9862|98CD+98CD/98D2\98D4; A Address (Low Byte)
                      LDY.B #!AnimatedTiles>>16                 ;;9865|98D0+98D0/98D5\98D7;
                      STY.W !HW_DMAADDR+$22                     ;;9867|98D2+98D2/98D7\98D9; A Address Bank
                      LDA.W #$0080                              ;;986A|98D5+98D5/98DA\98DC;
                      STA.W !HW_DMACNT+$20                      ;;986D|98D8+98D8/98DD\98DF; Number Bytes to Transfer (Low Byte) (DMA)
                      LDY.B #$04                                ;;9870|98DB+98DB/98E0\98E2;
                      STY.W !HW_MDMAEN                          ;;9872|98DD+98DD/98E2\98E4; Regular DMA Channel Enable
                      CLC                                       ;;9875|98E0+98E0/98E5\98E7;
                    + REP #$20                                  ;;9876|98E1+98E1/98E6\98E8; 16 bit A ; Accum (16 bit) 
                      LDA.W #$0004                              ;;9878|98E3+98E3/98E8\98EA;
                      LDY.B #$06                                ;;987B|98E6+98E6/98EB\98ED;
                      BCC +                                     ;;987D|98E8+98E8/98ED\98EF;
                      LDA.W #$0008                              ;;987F|98EA+98EA/98EF\98F1;
                      LDY.B #$16                                ;;9882|98ED+98ED/98F2\98F4;
                    + STA.B !_0                                 ;;9884|98EF+98EF/98F4\98F6;
                      LDA.W #!Mode7BossTilemap                  ;;9886|98F1+98F1/98F6\98F8;
                      STA.B !_2                                 ;;9889|98F4+98F4/98F9\98FB;
                      STZ.W !HW_VMAINC                          ;;988B|98F6+98F6/98FB\98FD; VRAM Address Increment Value
                      LDA.W #$1800                              ;;988E|98F9+98F9/98FE\9900;
                      STA.W !HW_DMAPARAM+$20                    ;;9891|98FC+98FC/9901\9903; Parameters for DMA Transfer
                      LDX.B #!Mode7BossTilemap>>16              ;;9894|98FF+98FF/9904\9906;
                      STX.W !HW_DMAADDR+$22                     ;;9896|9901+9901/9906\9908; A Address Bank
                      LDX.B #$04                                ;;9899|9904+9904/9909\990B;
                    - LDA.W DATA_009891,Y                       ;;989B|9906+9906/990B\990D;
                      STA.W !HW_VMADD                           ;;989E|9909+9909/990E\9910; Address for VRAM Read/Write (Low Byte)
                      LDA.B !_2                                 ;;98A1|990C+990C/9911\9913;
                      STA.W !HW_DMAADDR+$20                     ;;98A3|990E+990E/9913\9915; A Address (Low Byte)
                      CLC                                       ;;98A6|9911+9911/9916\9918;
                      ADC.B !_0                                 ;;98A7|9912+9912/9917\9919;
                      STA.B !_2                                 ;;98A9|9914+9914/9919\991B;
                      LDA.B !_0                                 ;;98AB|9916+9916/991B\991D;
                      STA.W !HW_DMACNT+$20                      ;;98AD|9918+9918/991D\991F; Number Bytes to Transfer (Low Byte) (DMA)
                      STX.W !HW_MDMAEN                          ;;98B0|991B+991B/9920\9922; Regular DMA Channel Enable
                      DEY                                       ;;98B3|991E+991E/9923\9925;
                      DEY                                       ;;98B4|991F+991F/9924\9926;
                      BPL -                                     ;;98B5|9920+9920/9925\9927;
                      SEP #$20                                  ;;98B7|9922+9922/9927\9929; 8 bit A ; Accum (8 bit) 
                      RTS                                       ;;98B9|9924+9924/9929\992B;
                                                                ;;                        ;
CODE_009925:          STZ.B !PlayerYPosNext+1                   ;;98BA|9925+9925/992A\992C;
                      REP #$20                                  ;;98BC|9927+9927/992C\992E; Accum (16 bit) 
                      LDA.W #$0020                              ;;98BE|9929+9929/992E\9930;
                      STA.B !PlayerXPosNext                     ;;98C1|992C+992C/9931\9933;
                      STZ.B !Layer1XPos                         ;;98C3|992E+992E/9933\9935;
                      STZ.W !NextLayer1XPos                     ;;98C5|9930+9930/9935\9937;
                      STZ.B !Layer1YPos                         ;;98C8|9933+9933/9938\993A;
                      STZ.W !NextLayer1YPos                     ;;98CA|9935+9935/993A\993C;
                      LDA.W #$0080                              ;;98CD|9938+9938/993D\993F;
                      STA.B !Mode7CenterX                       ;;98D0|993B+993B/9940\9942;
                      LDA.W #$00A0                              ;;98D2|993D+993D/9942\9944;
                      STA.B !Mode7CenterY                       ;;98D5|9940+9940/9945\9947;
                      SEP #$20                                  ;;98D7|9942+9942/9947\9949; Accum (8 bit) 
                      JSR CODE_00AE15                           ;;98D9|9944+9944/9949\994B;
                      JSL CODE_01808C                           ;;98DC|9947+9947/994C\994E;
                      LDA.W !IRQNMICommand                      ;;98E0|994B+994B/9950\9952;
                      LSR A                                     ;;98E3|994E+994E/9953\9955;
                      LDX.B #con($C0,$C0,$C0,$C0,$D0)           ;;98E4|994F+994F/9954\9956;
                      LDA.B #con($A0,$A0,$A0,$A0,$B0)           ;;98E6|9951+9951/9956\9958;
                      BCC +                                     ;;98E8|9953+9953/9958\995A;
                      STZ.W !HorizLayer1Setting                 ;;98EA|9955+9955/995A\995C;
                      JMP CODE_009A17                           ;;98ED|9958+9958/995D\995F;
                                                                ;;                        ;
                    + REP #$30                                  ;;98F0|995B+995B/9960\9962; Index (16 bit) Accum (16 bit) 
                      LDA.W !ActiveBoss                         ;;98F2|995D+995D/9962\9964;
                      AND.W #$00FF                              ;;98F5|9960+9960/9965\9967;
                      ASL A                                     ;;98F8|9963+9963/9968\996A;
                      TAX                                       ;;98F9|9964+9964/9969\996B;
                      LDY.W #con($02C0,$02C0,$02C0,$02C0,$0300) ;;98FA|9965+9965/996A\996C;
                      LDA.W DATA_00F8E8,X                       ;;98FD|9968+9968/996D\996F;
                      BPL +                                     ;;9900|996B+996B/9970\9972;
                      LDY.W #con($FB80,$FB80,$FB80,$FB80,$FBC0) ;;9902|996D+996D/9972\9974;
                    + CMP.W #$0012                              ;;9905|9970+9970/9975\9977;
                      BNE +                                     ;;9908|9973+9973/9978\997A;
                      LDY.W #con($0320,$0320,$0320,$0320,$0360) ;;990A|9975+9975/997A\997C;
                    + STY.B !_0                                 ;;990D|9978+9978/997D\997F;
                      LDX.W #$0000                              ;;990F|997A+997A/997F\9981;
                      LDA.W #$C05A                              ;;9912|997D+997D/9982\9984;
CODE_009980:          STA.L !DynamicStripeImage,X               ;;9915|9980+9980/9985\9987;
                      XBA                                       ;;9919|9984+9984/9989\998B;
                      CLC                                       ;;991A|9985+9985/998A\998C;
                      ADC.W #con($0080,$0080,$0080,$0080,$00C0) ;;991B|9986+9986/998B\998D;
                      XBA                                       ;;991E|9989+9989/998E\9990;
                      STA.L !DynamicStripeImage+$84,X           ;;991F|998A+998A/998F\9991;
                      XBA                                       ;;9923|998E+998E/9993\9995;
                      SEC                                       ;;9924|998F+998F/9994\9996;
                      SBC.B !_0                                 ;;9925|9990+9990/9995\9997;
                      XBA                                       ;;9927|9992+9992/9997\9999;
                      STA.L !DynamicStripeImage+$108,X          ;;9928|9993+9993/9998\999A;
                      LDA.W #$7F00                              ;;992C|9997+9997/999C\999E;
                      STA.L !DynamicStripeImage+2,X             ;;992F|999A+999A/999F\99A1;
                      STA.L !DynamicStripeImage+$86,X           ;;9933|999E+999E/99A3\99A5;
                      STA.L !DynamicStripeImage+$10A,X          ;;9937|99A2+99A2/99A7\99A9;
                      LDY.W #$0010                              ;;993B|99A6+99A6/99AB\99AD;
                    - LDA.W #$38A2                              ;;993E|99A9+99A9/99AE\99B0;
                      STA.L !DynamicStripeImage+4,X             ;;9941|99AC+99AC/99B1\99B3;
                      INC A                                     ;;9945|99B0+99B0/99B5\99B7;
                      STA.L !DynamicStripeImage+6,X             ;;9946|99B1+99B1/99B6\99B8;
                      LDA.W #$38B2                              ;;994A|99B5+99B5/99BA\99BC;
                      STA.L !DynamicStripeImage+$44,X           ;;994D|99B8+99B8/99BD\99BF;
                      INC A                                     ;;9951|99BC+99BC/99C1\99C3;
                      STA.L !DynamicStripeImage+$46,X           ;;9952|99BD+99BD/99C2\99C4;
                      LDA.W #$2C80                              ;;9956|99C1+99C1/99C6\99C8;
                      STA.L !DynamicStripeImage+$88,X           ;;9959|99C4+99C4/99C9\99CB;
                      INC A                                     ;;995D|99C8+99C8/99CD\99CF;
                      STA.L !DynamicStripeImage+$8A,X           ;;995E|99C9+99C9/99CE\99D0;
                      INC A                                     ;;9962|99CD+99CD/99D2\99D4;
                      STA.L !DynamicStripeImage+$C8,X           ;;9963|99CE+99CE/99D3\99D5;
                      INC A                                     ;;9967|99D2+99D2/99D7\99D9;
                      STA.L !DynamicStripeImage+$CA,X           ;;9968|99D3+99D3/99D8\99DA;
                      LDA.W #$28A0                              ;;996C|99D7+99D7/99DC\99DE;
                      STA.L !DynamicStripeImage+$10C,X          ;;996F|99DA+99DA/99DF\99E1;
                      INC A                                     ;;9973|99DE+99DE/99E3\99E5;
                      STA.L !DynamicStripeImage+$10E,X          ;;9974|99DF+99DF/99E4\99E6;
                      LDA.W #$28B0                              ;;9978|99E3+99E3/99E8\99EA;
                      STA.L !DynamicStripeImage+$14C,X          ;;997B|99E6+99E6/99EB\99ED;
                      INC A                                     ;;997F|99EA+99EA/99EF\99F1;
                      STA.L !DynamicStripeImage+$14E,X          ;;9980|99EB+99EB/99F0\99F2;
                      INX                                       ;;9984|99EF+99EF/99F4\99F6;
                      INX                                       ;;9985|99F0+99F0/99F5\99F7;
                      INX                                       ;;9986|99F1+99F1/99F6\99F8;
                      INX                                       ;;9987|99F2+99F2/99F7\99F9;
                      DEY                                       ;;9988|99F3+99F3/99F8\99FA;
                      BNE -                                     ;;9989|99F4+99F4/99F9\99FB;
                      TXA                                       ;;998B|99F6+99F6/99FB\99FD;
                      CLC                                       ;;998C|99F7+99F7/99FC\99FE;
                      ADC.W #$014C                              ;;998D|99F8+99F8/99FD\99FF;
                      TAX                                       ;;9990|99FB+99FB/9A00\9A02;
                      LDA.W #$C05E                              ;;9991|99FC+99FC/9A01\9A03;
                      CPX.W #$0318                              ;;9994|99FF+99FF/9A04\9A06;
                      BCS +                                     ;;9997|9A02+9A02/9A07\9A09;
                      JMP CODE_009980                           ;;9999|9A04+9A04/9A09\9A0B;
                                                                ;;                        ;
                    + LDA.W #$00FF                              ;;999C|9A07+9A07/9A0C\9A0E;
                      STA.L !DynamicStripeImage,X               ;;999F|9A0A+9A0A/9A0F\9A11;
                      SEP #$30                                  ;;99A3|9A0E+9A0E/9A13\9A15; Index (8 bit) Accum (8 bit) 
                      JSR LoadScrnImage                         ;;99A5|9A10+9A10/9A15\9A17;
                      LDX.B #$B0                                ;;99A8|9A13+9A13/9A18\9A1A;
                      LDA.B #$90                                ;;99AA|9A15+9A15/9A1A\9A1C;
CODE_009A17:          STA.B !PlayerYPosNext                     ;;99AC|9A17+9A17/9A1C\9A1E;
                      JSR CODE_009A1F                           ;;99AE|9A19+9A19/9A1E\9A20;
                      JMP CODE_009283                           ;;99B1|9A1C+9A1C/9A21\9A23;
                                                                ;;                        ;
CODE_009A1F:          LDY.B #$10                                ;;99B4|9A1F+9A1F/9A24\9A26;
                      LDA.B #$32                                ;;99B6|9A21+9A21/9A26\9A28;
                    - STA.L !Map16TilesLow,X                    ;;99B8|9A23+9A23/9A28\9A2A;
                      STA.L !Map16TilesLow+$1B0,X               ;;99BC|9A27+9A27/9A2C\9A2E;
                      STA.L !Map16TilesHigh,X                   ;;99C0|9A2B+9A2B/9A30\9A32;
                      STA.L !Map16TilesHigh+$1B0,X              ;;99C4|9A2F+9A2F/9A34\9A36;
                      INX                                       ;;99C8|9A33+9A33/9A38\9A3A;
                      DEY                                       ;;99C9|9A34+9A34/9A39\9A3B;
                      BNE -                                     ;;99CA|9A35+9A35/9A3A\9A3C;
                      CPX.B #$C0                                ;;99CC|9A37+9A37/9A3C\9A3E;
                      BNE Return009A4D                          ;;99CE|9A39+9A39/9A3E\9A40;
                      LDX.B #con($D0,$D0,$D0,$D0,$E0)           ;;99D0|9A3B+9A3B/9A40\9A42;
CODE_009A3D:          LDY.B #$10                                ;;99D2|9A3D+9A3D/9A42\9A44;
                      LDA.B #$05                                ;;99D4|9A3F+9A3F/9A44\9A46;
                    - STA.L !Map16TilesLow,X                    ;;99D6|9A41+9A41/9A46\9A48;
                      STA.L !Map16TilesLow+$1B0,X               ;;99DA|9A45+9A45/9A4A\9A4C;
                      INX                                       ;;99DE|9A49+9A49/9A4E\9A50;
                      DEY                                       ;;99DF|9A4A+9A4A/9A4F\9A51;
                      BNE -                                     ;;99E0|9A4B+9A4B/9A50\9A52;
Return009A4D:         RTS                                       ;;99E2|9A4D+9A4D/9A52\9A54;
                                                                ;;                        ;
                                                                ;;                        ;
                      db $FF,$01,$18,$30                        ;;99E3|9A4E+9A4E/9A53\9A55;
                                                                ;;                        ;
CODE_009A52:          LDA.W !IRQNMICommand                      ;;99E7|9A52+9A52/9A57\9A59;
                      LSR A                                     ;;99EA|9A55+9A55/9A5A\9A5C;
                      BCS +                                     ;;99EB|9A56+9A56/9A5B\9A5D;
                      JSL CODE_00F6DB                           ;;99ED|9A58+9A58/9A5D\9A5F;
                      JSL CODE_05BC00                           ;;99F1|9A5C+9A5C/9A61\9A63;
                      LDA.W !ActiveBoss                         ;;99F5|9A60+9A60/9A65\9A67;
                      CMP.B #$04                                ;;99F8|9A63+9A63/9A68\9A6A;
                      BEQ +                                     ;;99FA|9A65+9A65/9A6A\9A6C;
                      JSR CODE_0086C7                           ;;99FC|9A67+9A67/9A6C\9A6E;
                      JSL CODE_02827D                           ;;99FF|9A6A+9A6A/9A6F\9A71;
                      RTS                                       ;;9A03|9A6E+9A6E/9A73\9A75;
                                                                ;;                        ;
                    + JSL !OAMResetRoutine                      ;;9A04|9A6F+9A6F/9A74\9A76;
                      RTS                                       ;;9A08|9A73+9A73/9A78\9A7A;
                                                                ;;                        ;
SetUp0DA0GM4:         LDA.W !HW_JOY1                            ;;9A09|9A74+9A74/9A79\9A7B; \Read old-style controller register for player 1 
                      LSR A                                     ;;9A0C|9A77+9A77/9A7C\9A7E; /LSR A, but then discard (Is this for carry flag or something?) 
                      LDA.W !HW_JOY2                            ;;9A0D|9A78+9A78/9A7D\9A7F; \Load And Rotate left A (player 2 old-style controller regs) 
                      ROL A                                     ;;9A10|9A7B+9A7B/9A80\9A82; / 
                      AND.B #$03                                ;;9A11|9A7C+9A7C/9A81\9A83; AND A with #$03 
                      BEQ CODE_009A87                           ;;9A13|9A7E+9A7E/9A83\9A85; If A AND #$03 = 0 Then STA $0DA0 (A=0) 
                      CMP.B #$03                                ;;9A15|9A80+9A80/9A85\9A87;
                      BNE +                                     ;;9A17|9A82+9A82/9A87\9A89;
                      ORA.B #$80                                ;;9A19|9A84+9A84/9A89\9A8B;
                    + DEC A                                     ;;9A1B|9A86+9A86/9A8B\9A8D;
CODE_009A87:          STA.W !ControllersPresent                 ;;9A1C|9A87+9A87/9A8C\9A8E;
                      RTS                                       ;;9A1F|9A8A+9A8A/9A8F\9A91; *yawn* 
                                                                ;;                        ;
GameMode04:           JSR SetUp0DA0GM4                          ;;9A20|9A8B+9A8B/9A90\9A92;
                      JSR GameMode12                            ;;9A23|9A8E+9A8E/9A93\9A95;
                      STZ.W !InGameTimerHundreds                ;;9A26|9A91+9A91/9A96\9A98; Zero the timer 
                      JSR CODE_0085FA                           ;;9A29|9A94+9A94/9A99\9A9B;
                      LDA.B #$03                                ;;9A2C|9A97+9A97/9A9C\9A9E; \ Load title screen Layer 3 image 
                      STA.B !StripeImage                        ;;9A2E|9A99+9A99/9A9E\9AA0;  | 
                      JSR LoadScrnImage                         ;;9A30|9A9B+9A9B/9AA0\9AA2; /  
                      JSR CODE_00ADA6                           ;;9A33|9A9E+9A9E/9AA3\9AA5;
                      JSR CODE_00922F                           ;;9A36|9AA1+9AA1/9AA6\9AA8;
                      JSL CODE_04F675                           ;;9A39|9AA4+9AA4/9AA9\9AAB; todo: NOTE TO SELF: Check this routine out after making Bank4.asm 
                      LDA.B #$01                                ;;9A3D|9AA8+9AA8/9AAD\9AAF; \ Set special level to x01 
                      STA.W !IRQNMICommand                      ;;9A3F|9AAA+9AAA/9AAF\9AB1; /  
                      LDA.B #$33                                ;;9A42|9AAD+9AAD/9AB2\9AB4;
                      STA.B !Layer12Window                      ;;9A44|9AAF+9AAF/9AB4\9AB6;
                      LDA.B #$00                                ;;9A46|9AB1+9AB1/9AB6\9AB8;
                      STA.B !Layer34Window                      ;;9A48|9AB3+9AB3/9AB8\9ABA;
                      LDA.B #$23                                ;;9A4A|9AB5+9AB5/9ABA\9ABC;
                      STA.B !OBJCWWindow                        ;;9A4C|9AB7+9AB7/9ABC\9ABE;
                      LDA.B #$12                                ;;9A4E|9AB9+9AB9/9ABE\9AC0;
                      STA.B !ColorAddition                      ;;9A50|9ABB+9ABB/9AC0\9AC2;
                      JSR CODE_009443                           ;;9A52|9ABD+9ABD/9AC2\9AC4;
                      LDA.B #$10                                ;;9A55|9AC0+9AC0/9AC5\9AC7;
                      STA.W !VariousPromptTimer                 ;;9A57|9AC2+9AC2/9AC7\9AC9;
                      JMP Mode04Finish                          ;;9A5A|9AC5+9AC5/9ACA\9ACC;
                                                                ;;                        ;
                                                                ;;                        ;
DATA_009AC8:          db $01,$FF,$FF                            ;;9A5D|9AC8+9AC8/9ACD\9ACF;
                                                                ;;                        ;
CODE_009ACB:          PHY                                       ;;9A60|9ACB+9ACB/9AD0\9AD2;
                      JSR SetUp0DA0GM4                          ;;9A61|9ACC+9ACC/9AD1\9AD3;
                      PLY                                       ;;9A64|9ACF+9ACF/9AD4\9AD6;
CODE_009AD0:          INC.W !BlinkCursorTimer                   ;;9A65|9AD0+9AD0/9AD5\9AD7; Blinking cursor frame counter (file select, save prompt, etc) 
                      JSR CODE_009E82                           ;;9A68|9AD3+9AD3/9AD8\9ADA;
                      LDX.W !BlinkCursorPos                     ;;9A6B|9AD6+9AD6/9ADB\9ADD;
                      LDA.B !byetudlrFrame                      ;;9A6E|9AD9+9AD9/9ADE\9AE0;
                      AND.B #$90                                ;;9A70|9ADB+9ADB/9AE0\9AE2;
                      BNE CODE_009AE3                           ;;9A72|9ADD+9ADD/9AE2\9AE4;
                      LDA.B !axlr0000Frame                      ;;9A74|9ADF+9ADF/9AE4\9AE6;
                      BPL CODE_009AEA                           ;;9A76|9AE1+9AE1/9AE6\9AE8;
CODE_009AE3:          LDA.B #!SFX_COIN                          ;;9A78|9AE3+9AE3/9AE8\9AEA;
                      STA.W !SPCIO3                             ;;9A7A|9AE5+9AE5/9AEA\9AEC;
                      BRA CODE_009B11                           ;;9A7D|9AE8+9AE8/9AED\9AEF;
                                                                ;;                        ;
CODE_009AEA:          PLA                                       ;;9A7F|9AEA+9AEA/9AEF\9AF1;
                      PLA                                       ;;9A80|9AEB+9AEB/9AF0\9AF2;
                      LDA.B !byetudlrFrame                      ;;9A81|9AEC+9AEC/9AF1\9AF3;
                      AND.B #$20                                ;;9A83|9AEE+9AEE/9AF3\9AF5;
                      LSR A                                     ;;9A85|9AF0+9AF0/9AF5\9AF7;
                      LSR A                                     ;;9A86|9AF1+9AF1/9AF6\9AF8;
                      LSR A                                     ;;9A87|9AF2+9AF2/9AF7\9AF9;
                      ORA.B !byetudlrFrame                      ;;9A88|9AF3+9AF3/9AF8\9AFA;
                      AND.B #$0C                                ;;9A8A|9AF5+9AF5/9AFA\9AFC;
                      BEQ Return009B16                          ;;9A8C|9AF7+9AF7/9AFC\9AFE;
                      LDY.B #!SFX_FIREBALL                      ;;9A8E|9AF9+9AF9/9AFE\9B00;
                      STY.W !SPCIO3                             ;;9A90|9AFB+9AFB/9B00\9B02;
                      STZ.W !BlinkCursorTimer                   ;;9A93|9AFE+9AFE/9B03\9B05;
                      LSR A                                     ;;9A96|9B01+9B01/9B06\9B08;
                      LSR A                                     ;;9A97|9B02+9B02/9B07\9B09;
                      TAY                                       ;;9A98|9B03+9B03/9B08\9B0A;
                      TXA                                       ;;9A99|9B04+9B04/9B09\9B0B;
                      ADC.W DATA_009AC8-1,Y                     ;;9A9A|9B05+9B05/9B0A\9B0C;
                      BPL +                                     ;;9A9D|9B08+9B08/9B0D\9B0F;
                      LDA.B !GraphicsCompPtr                    ;;9A9F|9B0A+9B0A/9B0F\9B11;
                      DEC A                                     ;;9AA1|9B0C+9B0C/9B11\9B13;
                    + CMP.B !GraphicsCompPtr                    ;;9AA2|9B0D+9B0D/9B12\9B14;
                      BCC +                                     ;;9AA4|9B0F+9B0F/9B14\9B16;
CODE_009B11:          LDA.B #$00                                ;;9AA6|9B11+9B11/9B16\9B18;
                    + STA.W !BlinkCursorPos                     ;;9AA8|9B13+9B13/9B18\9B1A;
Return009B16:         RTS                                       ;;9AAB|9B16+9B16/9B1B\9B1D;
                                                                ;;                        ;
                   if ver_is_console(!_VER)           ;\   IF   ;;++++++++++++++++++++++++; J, U, E0, & E1
DATA_009B17:          db $04,$02,$01                            ;;9AAC|9B17     /9B1C\9B1E;
                                                                ;;                        ;
GameMdoe09:           REP #$20                                  ;;9AAF|9B1A     /9B1F\9B21; Accum (16 bit) 
                      LDA.W #$39C9                              ;;9AB1|9B1C     /9B21\9B23;
                      LDY.B #$60                                ;;9AB4|9B1F     /9B24\9B26;
                      JSR CODE_009D30                           ;;9AB6|9B21     /9B26\9B28;
                      LDA.B !byetudlrFrame                      ;;9AB9|9B24     /9B29\9B2B; Accum (8 bit) 
                      ORA.B !axlr0000Frame                      ;;9ABB|9B26     /9B2B\9B2D;
                      AND.B #$40                                ;;9ABD|9B28     /9B2D\9B2F;
                      BEQ +                                     ;;9ABF|9B2A     /9B2F\9B31;
                   else                               ;<  ELSE  ;;------------------------; SS
GameMdoe09:                                                     ;;                        ;
                   endif                              ;/ ENDIF  ;;++++++++++++++++++++++++;
CODE_009B2C:          DEC.W !GameMode                           ;;9AC1|9B2C+9B17/9B31\9B33;
                      DEC.W !GameMode                           ;;9AC4|9B2F+9B1A/9B34\9B36;
                      JSR CODE_009B11                           ;;9AC7|9B32+9B1D/9B37\9B39;
                      JMP CODE_009CB0                           ;;9ACA|9B35+9B20/9B3A\9B3C;
                                                                ;;                        ;
                   if ver_is_console(!_VER)           ;\   IF   ;;++++++++++++++++++++++++; J, U, E0, & E1
                    + LDY.B #$08                                ;;9ACD|9B38     /9B3D\9B3F;
                      JSR CODE_009AD0                           ;;9ACF|9B3A     /9B3F\9B41;
                      CPX.B #$03                                ;;9AD2|9B3D     /9B42\9B44;
                      BNE CODE_009B6D                           ;;9AD4|9B3F     /9B44\9B46;
                      LDY.B #$02                                ;;9AD6|9B41     /9B46\9B48;
CODE_009B43:          LSR.W !SaveFileDelete                     ;;9AD8|9B43     /9B48\9B4A;
                      BCC CODE_009B67                           ;;9ADB|9B46     /9B4B\9B4D;
                      PHY                                       ;;9ADD|9B48     /9B4D\9B4F;
                      LDA.W DATA_009CCB,Y                       ;;9ADE|9B49     /9B4E\9B50;
                      XBA                                       ;;9AE1|9B4C     /9B51\9B53;
                      LDA.W DATA_009CCE,Y                       ;;9AE2|9B4D     /9B52\9B54;
                      REP #$10                                  ;;9AE5|9B50     /9B55\9B57; Index (16 bit) 
                      TAX                                       ;;9AE7|9B52     /9B57\9B59;
                      LDY.W #$008F                              ;;9AE8|9B53     /9B58\9B5A;
                      LDA.B #$00                                ;;9AEB|9B56     /9B5B\9B5D;
                    - STA.L !SaveData,X                         ;;9AED|9B58     /9B5D\9B5F;
                      STA.L !SaveDataBackup,X                   ;;9AF1|9B5C     /9B61\9B63;
                      INX                                       ;;9AF5|9B60     /9B65\9B67;
                      DEY                                       ;;9AF6|9B61     /9B66\9B68;
                      BNE -                                     ;;9AF7|9B62     /9B67\9B69;
                      SEP #$10                                  ;;9AF9|9B64     /9B69\9B6B; Index (8 bit) 
                      PLY                                       ;;9AFB|9B66     /9B6B\9B6D;
CODE_009B67:          DEY                                       ;;9AFC|9B67     /9B6C\9B6E;
                      BPL CODE_009B43                           ;;9AFD|9B68     /9B6D\9B6F;
                      JMP CODE_009C89                           ;;9AFF|9B6A     /9B6F\9B71;
                                                                ;;                        ;
CODE_009B6D:          STX.W !BlinkCursorPos                     ;;9B02|9B6D     /9B72\9B74;
                      LDA.W DATA_009B17,X                       ;;9B05|9B70     /9B75\9B77;
                      ORA.W !SaveFileDelete                     ;;9B08|9B73     /9B78\9B7A;
                      STA.W !SaveFileDelete                     ;;9B0B|9B76     /9B7B\9B7D;
                      STA.B !_5                                 ;;9B0E|9B79     /9B7E\9B80;
                   if ver_is_japanese(!_VER)          ;\   IF   ;;++++++++++++++++++++++++; J
                      LDY.B #$0C                                ;;9B10                    ;
                   else                               ;<  ELSE  ;;------------------------; U, E0, & E1
                      LDX.B #$00                                ;;    |9B7B     /9B80\9B82;
                   endif                              ;/ ENDIF  ;;++++++++++++++++++++++++;
                      JMP CODE_009D3C                           ;;9B12|9B7D     /9B82\9B84;
                                                                ;;                        ;
CODE_009B80:          PHB                                       ;;9B15|9B80     /9B85\9B87; Wrapper 
                      PHK                                       ;;9B16|9B81     /9B86\9B88;
                      PLB                                       ;;9B17|9B82     /9B87\9B89;
                      JSR CODE_009B88                           ;;9B18|9B83     /9B88\9B8A;
                      PLB                                       ;;9B1B|9B86     /9B8B\9B8D;
                      RTL                                       ;;9B1C|9B87     /9B8C\9B8E;
                                                                ;;                        ;
CODE_009B88:          DEC A                                     ;;9B1D|9B88     /9B8D\9B8F;
                      JSL ExecutePtr                            ;;9B1E|9B89     /9B8E\9B90;
                                                                ;;                        ;
                      dw CODE_009B91                            ;;9B22|9B8D     /9B92\9B94;
                      dw CODE_009B9A                            ;;9B24|9B8F     /9B94\9B96;
                                                                ;;                        ;
CODE_009B91:          LDY.B #$0C                                ;;9B26|9B91     /9B96\9B98;
                      JSR CODE_009D29                           ;;9B28|9B93     /9B98\9B9A;
                      INC.W !ShowContinueEnd                    ;;9B2B|9B96     /9B9B\9B9D;
                      RTS                                       ;;9B2E|9B99     /9B9E\9BA0;
                                                                ;;                        ;
CODE_009B9A:          LDY.B #$00                                ;;9B2F|9B9A     /9B9F\9BA1;
                      JSR CODE_009AD0                           ;;9B31|9B9C     /9BA1\9BA3;
                      TXA                                       ;;9B34|9B9F     /9BA4\9BA6;
                      BNE +                                     ;;9B35|9BA0     /9BA5\9BA7;
                      JMP CODE_009E17                           ;;9B37|9BA2     /9BA7\9BA9;
                                                                ;;                        ;
                    + JMP CODE_009C89                           ;;9B3A|9BA5     /9BAA\9BAC;
                                                                ;;                        ;
CODE_009BA8:          PHB                                       ;;9B3D|9BA8     /9BAD\9BAF; Wrapper 
                      PHK                                       ;;9B3E|9BA9     /9BAE\9BB0;
                      PLB                                       ;;9B3F|9BAA     /9BAF\9BB1;
                      JSR CODE_009BB0                           ;;9B40|9BAB     /9BB0\9BB2;
                      PLB                                       ;;9B43|9BAE     /9BB3\9BB5;
                      RTL                                       ;;9B44|9BAF     /9BB4\9BB6;
                                                                ;;                        ;
CODE_009BB0:          LDY.B #$06                                ;;9B45|9BB0     /9BB5\9BB7;
                      JSR CODE_009AD0                           ;;9B47|9BB2     /9BB7\9BB9;
                      TXA                                       ;;9B4A|9BB5     /9BBA\9BBC;
                      BNE +                                     ;;9B4B|9BB6     /9BBB\9BBD;
                      STZ.W !SPCIO3                             ;;9B4D|9BB8     /9BBD\9BBF;
                      LDA.B #!SFX_MIDWAY                        ;;9B50|9BBB     /9BC0\9BC2;
                      STA.W !SPCIO0                             ;;9B52|9BBD     /9BC2\9BC4;
                      JSL CODE_009BC9                           ;;9B55|9BC0     /9BC5\9BC7;
                    + JSL CODE_009C13                           ;;9B59|9BC4     /9BC9\9BCB;
                      RTS                                       ;;9B5D|9BC8     /9BCD\9BCF;
                                                                ;;                        ;
CODE_009BC9:          PHB                                       ;;9B5E|9BC9     /9BCE\9BD0;
                      PHK                                       ;;9B5F|9BCA     /9BCF\9BD1;
                      PLB                                       ;;9B60|9BCB     /9BD0\9BD2;
                      LDX.W !SaveFile                           ;;9B61|9BCC     /9BD1\9BD3;
                      LDA.W DATA_009CCB,X                       ;;9B64|9BCF     /9BD4\9BD6;
                      XBA                                       ;;9B67|9BD2     /9BD7\9BD9;
                      LDA.W DATA_009CCE,X                       ;;9B68|9BD3     /9BD8\9BDA;
                      REP #$10                                  ;;9B6B|9BD6     /9BDB\9BDD; Index (16 bit) 
                      TAX                                       ;;9B6D|9BD8     /9BDD\9BDF;
CODE_009BD9:          LDY.W #$0000                              ;;9B6E|9BD9     /9BDE\9BE0;
                      STY.B !GraphicsCompPtr                    ;;9B71|9BDC     /9BE1\9BE3;
CODE_009BDE:          LDA.W !SaveDataBuffer,Y                   ;;9B73|9BDE     /9BE3\9BE5;
                      STA.L !SaveData,X                         ;;9B76|9BE1     /9BE6\9BE8;
                      CLC                                       ;;9B7A|9BE5     /9BEA\9BEC;
                      ADC.B !GraphicsCompPtr                    ;;9B7B|9BE6     /9BEB\9BED;
                      STA.B !GraphicsCompPtr                    ;;9B7D|9BE8     /9BED\9BEF;
                      BCC +                                     ;;9B7F|9BEA     /9BEF\9BF1;
                      INC.B !GraphicsCompPtr+1                  ;;9B81|9BEC     /9BF1\9BF3;
                    + INX                                       ;;9B83|9BEE     /9BF3\9BF5;
                      INY                                       ;;9B84|9BEF     /9BF4\9BF6;
                      CPY.W #$008D                              ;;9B85|9BF0     /9BF5\9BF7;
                      BCC CODE_009BDE                           ;;9B88|9BF3     /9BF8\9BFA;
                      REP #$20                                  ;;9B8A|9BF5     /9BFA\9BFC; Accum (16 bit) 
                      LDA.W #$5A5A                              ;;9B8C|9BF7     /9BFC\9BFE;
                      SEC                                       ;;9B8F|9BFA     /9BFF\9C01;
                      SBC.B !GraphicsCompPtr                    ;;9B90|9BFB     /9C00\9C02;
                      STA.L !SaveData,X                         ;;9B92|9BFD     /9C02\9C04;
                      CPX.W #$01AD                              ;;9B96|9C01     /9C06\9C08;
                      BCS CODE_009C0F                           ;;9B99|9C04     /9C09\9C0B;
                      TXA                                       ;;9B9B|9C06     /9C0B\9C0D;
                      ADC.W #$0120                              ;;9B9C|9C07     /9C0C\9C0E;
                      TAX                                       ;;9B9F|9C0A     /9C0F\9C11;
                      SEP #$20                                  ;;9BA0|9C0B     /9C10\9C12; Accum (8 bit) 
                      BRA CODE_009BD9                           ;;9BA2|9C0D     /9C12\9C14;
                                                                ;;                        ;
CODE_009C0F:          SEP #$30                                  ;;9BA4|9C0F     /9C14\9C16; Index (8 bit) Accum (8 bit) 
                      PLB                                       ;;9BA6|9C11     /9C16\9C18;
                      RTL                                       ;;9BA7|9C12     /9C17\9C19;
                   else                               ;<  ELSE  ;;------------------------; SS
CODE_009B80:          RTL                                       ;;         +9B23          ;
CODE_009B88:          RTS                                       ;;         +9B24          ; unused?
CODE_009BA8:          RTL                                       ;;         +9B25          ;
CODE_009BC9:          RTL                                       ;;         +9B26          ;
                   endif                              ;/ ENDIF  ;;++++++++++++++++++++++++;
                                                                ;;                        ;
CODE_009C13:          INC.W !OverworldPromptProcess             ;;9BA8|9C13+9B27/9C18\9C1A;
                      INC.W !MessageBoxExpand                   ;;9BAB|9C16+9B2A/9C1B\9C1D;
                      LDY.B #$1B                                ;;9BAE|9C19+9B2D/9C1E\9C20;
                      JSR CODE_009D29                           ;;9BB0|9C1B+9B2F/9C20\9C22;
                      RTL                                       ;;9BB3|9C1E+9B32/9C23\9C25;
                                                                ;;                        ;
                                                                ;;                        ;
                   if ver_is_ntsc(!_VER)              ;\   IF   ;;++++++++++++++++++++++++; J, U, & SS
ItrCntrlrSqnc:        db $41,$0F,$C1,$30,$00,$10,$42,$20        ;;9BB4|9C1F+9B33          ;
                      db $41,$70,$81,$11,$00,$80,$82,$0C        ;;9BBC|9C27+9B3B          ;
                      db $00,$30,$C1,$30,$41,$60,$C1,$10        ;;9BC4|9C2F+9B43          ;
                      db $00,$40,$01,$30,$E1,$01,$00,$60        ;;9BCC|9C37+9B4B          ;
                      db $41,$4E,$80,$10,$00,$30,$41,$58        ;;9BD4|9C3F+9B53          ;
                      db $00,$20,$60,$01,$00,$30,$60,$01        ;;9BDC|9C47+9B5B          ;
                      db $00,$30,$60,$01,$00,$30,$60,$01        ;;9BE4|9C4F+9B63          ;
                      db $00,$30,$60,$01,$00,$30,$41,$1A        ;;9BEC|9C57+9B6B          ;
                      db $C1,$30,$00,$30,$FF                    ;;9BF4|9C5F+9B73          ;
                   else                               ;<  ELSE  ;;------------------------; E0 & E1
ItrCntrlrSqnc:        db $41,$0D,$C1,$30,$00,$10,$42,$26        ;;              /9C24\9C26;
                      db $41,$58,$81,$17,$00,$7A,$82,$0C        ;;              /9C2C\9C2E;
                      db $00,$34,$C1,$2A,$41,$50,$C1,$0C        ;;              /9C34\9C36;
                      db $00,$30,$01,$20,$E1,$01,$00,$60        ;;              /9C3C\9C3E;
                      db $41,$30,$80,$10,$00,$30,$41,$4E        ;;              /9C44\9C46;
                      db $00,$20,$60,$01,$00,$30,$60,$01        ;;              /9C4C\9C4E;
                      db $00,$30,$60,$01,$00,$30,$60,$01        ;;              /9C54\9C56;
                      db $00,$30,$60,$01,$00,$30,$41,$15        ;;              /9C5C\9C5E;
                      db $C1,$30,$00,$30,$FF                    ;;              /9C64\9C66;
                   endif                              ;/ ENDIF  ;;++++++++++++++++++++++++;
                                                                ;;                        ;
GameMode07:           JSR SetUp0DA0GM4                          ;;9BF9|9C64+9B78/9C69\9C6B;
                      JSR CODE_009CBE                           ;;9BFC|9C67+9B7B/9C6C\9C6E;
                      BNE CODE_009C9F                           ;;9BFF|9C6A+9B7E/9C6F\9C71;
                      JSR NoButtons                             ;;9C01|9C6C+9B80/9C71\9C73; Zero controller RAM mirror 
                      LDX.W !TitleInputIndex                    ;;9C04|9C6F+9B83/9C74\9C76; (Unknown byte) -> X 
                      DEC.W !VariousPromptTimer                 ;;9C07|9C72+9B86/9C77\9C79; Decrement $1DF5 (unknown byte) 
                      BNE +                                     ;;9C0A|9C75+9B89/9C7A\9C7C; if !=  0 branch forward 
                      LDA.W ItrCntrlrSqnc+1,X                   ;;9C0C|9C77+9B8B/9C7C\9C7E; Load $00/9C20,$1DF4 
                      STA.W !VariousPromptTimer                 ;;9C0F|9C7A+9B8E/9C7F\9C81; And store to $1DF5 
                      INX                                       ;;9C12|9C7D+9B91/9C82\9C84;
                      INX                                       ;;9C13|9C7E+9B92/9C83\9C85; $1DF4+=2 
                      STX.W !TitleInputIndex                    ;;9C14|9C7F+9B93/9C84\9C86;
                    + LDA.W ItrCntrlrSqnc-2,X                   ;;9C17|9C82+9B96/9C87\9C89; With the +=2 above, this is effectively LDA $9C20,$1DF4 
                      CMP.B #$FF                                ;;9C1A|9C85+9B99/9C8A\9C8C;
                      BNE +                                     ;;9C1C|9C87+9B9B/9C8C\9C8E;
CODE_009C89:          LDY.B #$02                                ;;9C1E|9C89+9B9D/9C8E\9C90; If = #$FF, switch to game mode #$02... 
CODE_009C8B:          STY.W !GameMode                           ;;9C20|9C8B+9B9F/9C90\9C92;
                      RTS                                       ;;9C23|9C8E+9BA2/9C93\9C95; ...And finish 
                                                                ;;                        ;
                    + AND.B #$DF                                ;;9C24|9C8F+9BA3/9C94\9C96;
                      STA.B !byetudlrHold                       ;;9C26|9C91+9BA5/9C96\9C98; Write to controller RAM byte 01 
                      CMP.W ItrCntrlrSqnc-2,X                   ;;9C28|9C93+9BA7/9C98\9C9A;
                      BNE +                                     ;;9C2B|9C96+9BAA/9C9B\9C9D;
                      AND.B #$9F                                ;;9C2D|9C98+9BAC/9C9D\9C9F;
                    + STA.B !byetudlrFrame                      ;;9C2F|9C9A+9BAE/9C9F\9CA1; Write to byte 01, Just-pressed variant 
                      JMP GameMode14                            ;;9C31|9C9C+9BB0/9CA1\9CA3; Jump to another section of this routine 
                                                                ;;                        ;
CODE_009C9F:          JSL !OAMResetRoutine                      ;;9C34|9C9F+9BB3/9CA4\9CA6; IIRC, this contains a lot of STZ instructions 
                      LDA.B #$04                                ;;9C38|9CA3+9BB7/9CA8\9CAA;
                      STA.W !HW_TM                              ;;9C3A|9CA5+9BB9/9CAA\9CAC; Zero something related to PPU ; Background and Object Enable
                      LDA.B #$13                                ;;9C3D|9CA8+9BBC/9CAD\9CAF;
                      STA.W !HW_TS                              ;;9C3F|9CAA+9BBE/9CAF\9CB1; Sub Screen Designation
                   if ver_is_japanese(!_VER)          ;\   IF   ;;++++++++++++++++++++++++; J
CODE_009CB0:          LDA.B #$E9                                ;;9C42                    ;
                      STA.W !OverworldOverride                  ;;9C44                    ; 
                      JSR CODE_WRITEOW                          ;;9C47                    ;
                      LDY.B #$0E                                ;;9C4A                    ;
                      JSR CODE_009D3A                           ;;9C4C                    ; 
                      LDA.B #$FF                                ;;9C4F                    ;
                      STA.L !DynamicStripeImage+$9C             ;;9C51                    ;
                   elseif ver_is_arcade(!_VER)        ;< ELSEIF ;;------------------------; SS
CODE_009CB0:          LDA.B #$E9                                ;;         +9BC1          ;
                      STA.W !OverworldOverride                  ;;         +9BC3          ; #$E9 -> Uknown RAM byte 
                      JSR CODE_WRITEOW                          ;;         +9BC6          ;
                      JSR CODE_009D38                           ;;         +9BC9          ; -> here 
                   else                               ;<  ELSE  ;;------------------------; U, E0, & E1
                      STZ.W !HDMAEnable                         ;;    |9CAD     /9CB2\9CB4; Disable all HDMA 
CODE_009CB0:          LDA.B #$E9                                ;;    |9CB0     /9CB5\9CB7;
                      STA.W !OverworldOverride                  ;;    |9CB2     /9CB7\9CB9; #$E9 -> Uknown RAM byte 
                      JSR CODE_WRITEOW                          ;;    |9CB5     /9CBA\9CBC;
                      JSR CODE_009D38                           ;;    |9CB8     /9CBD\9CBF; -> here 
                   endif                              ;/ ENDIF  ;;++++++++++++++++++++++++;
                      JMP CODE_009417                           ;;9C55|9CBB+9BCC/9CC0\9CC2; Increase the Game mode and return (at jump point) 
                                                                ;;                        ;
CODE_009CBE:          LDA.B !axlr0000Hold                       ;;9C58|9CBE+9BCF/9CC3\9CC5;
                      AND.B #$C0                                ;;9C5A|9CC0+9BD1/9CC5\9CC7;
                      BNE +                                     ;;9C5C|9CC2+9BD3/9CC7\9CC9;
                      LDA.B !byetudlrHold                       ;;9C5E|9CC4+9BD5/9CC9\9CCB;
                      AND.B #$F0                                ;;9C60|9CC6+9BD7/9CCB\9CCD;
                      BNE +                                     ;;9C62|9CC8+9BD9/9CCD\9CCF;
                    + RTS                                       ;;9C64|9CCA+9BDB/9CCF\9CD1;
                                                                ;;                        ;
                                                                ;;                        ;
DATA_009CCB:          db !SaveData>>8                           ;;9C65|9CCB+9BDC/9CD0\9CD2;
                      db !SaveDataFile2>>8                      ;;9C66|9CCC+9BDD/9CD1\9CD3;
                      db !SaveDataFile3>>8                      ;;9C67|9CCD+9BDE/9CD2\9CD4;
                                                                ;;                        ;
DATA_009CCE:          db !SaveData                              ;;9C68|9CCE+9BDF/9CD3\9CD5;
                      db !SaveDataFile2                         ;;9C69|9CCF+9BE0/9CD4\9CD6;
                      db !SaveDataFile3                         ;;9C6A|9CD0+9BE1/9CD5\9CD7;
                                                                ;;                        ;
                   if ver_is_arcade(!_VER)            ;\   IF   ;;++++++++++++++++++++++++; SS
SSDATA_009BE2:        db $52,$06,$C0,$0C,$FC,$38,$52,$10        ;;         +9BE2          ;
                      db $C0,$08,$FC,$38,$52,$06,$00,$01        ;;         +9BEA          ;
                      db $FC,$38,$FF                            ;;         +9BF2          ;
                                                                ;;                        ;
SSDATA_009BF5:        db $06,$46,$86,$C6,$10,$50,$90            ;;         +9BF5          ;
                                                                ;;                        ;
SSDATA_009BFC:        db $07,$FF                                ;;         +9BFC          ;
SSDATA_009BFE:        db $00,$06                                ;;         +9BFE          ;
                                                                ;;                        ;
GameMode08:           REP #$20                                  ;;         +9C00          ;
                      LDA.W #$7393                              ;;         +9C02          ;
                      LDY.B #$20                                ;;         +9C05          ;
                      JSR CODE_009D30                           ;;         +9C07          ;
                      LDA.B !byetudlrFrame                      ;;         +9C0A          ;
                      AND.B #$90                                ;;         +9C0C          ;
                      BNE SSCODE_009C6D                         ;;         +9C0E          ;
                      LDA.B !axlr0000Frame                      ;;         +9C10          ;
                      BMI SSCODE_009C6D                         ;;         +9C12          ;
                      LDA.B !byetudlrFrame                      ;;         +9C14          ;
                      AND.B #$0C                                ;;         +9C16          ;
                      BEQ SSCODE_009C3B                         ;;         +9C18          ;
                      LDY.B #!SFX_FIREBALL                      ;;         +9C1A          ;
                      STY.W !SPCIO3                             ;;         +9C1C          ;
                      LSR A                                     ;;         +9C1F          ;
                      LSR A                                     ;;         +9C20          ;
                      LSR A                                     ;;         +9C21          ;
                      TAX                                       ;;         +9C22          ;
                      LDY.W !Layer2ScrollType                   ;;         +9C23          ;
                      INY                                       ;;         +9C26          ;
                      CMP.B #$01                                ;;         +9C27          ;
                      BNE +                                     ;;         +9C29          ;
                      DEY                                       ;;         +9C2B          ;
                      DEY                                       ;;         +9C2C          ;
                    + TYA                                       ;;         +9C2D          ;
                      CMP.W SSDATA_009BFC,X                     ;;         +9C2E          ;
                      BNE +                                     ;;         +9C31          ;
                      LDY.W SSDATA_009BFE,X                     ;;         +9C33          ;
                    + STY.W !Layer2ScrollType                   ;;         +9C36          ;
SSCODE_009C3B:        REP #$10                                  ;;         +9C39          ;
                      LDY.W #$3D2E                              ;;         +9C3B          ;
                      LDA.B !TrueFrame                          ;;         +9C3E          ;
                      AND.B #$1F                                ;;         +9C40          ;
                      CMP.B #$18                                ;;         +9C42          ;
                      BCC +                                     ;;         +9C44          ;
                      LDY.W #$38FC                              ;;         +9C46          ;
                    + LDX.W #$0000                              ;;         +9C49          ;
                    - LDA.W SSDATA_009BE2,X                     ;;         +9C4C          ;
                      STA.L !DynamicStripeImage,X               ;;         +9C4F          ;
                      INX                                       ;;         +9C53          ;
                      CPX.W #$0013                              ;;         +9C54          ;
                      BNE -                                     ;;         +9C57          ;
                      LDX.W !Layer2ScrollType                   ;;         +9C59          ;
                      LDA.W SSDATA_009BF5,X                     ;;         +9C5C          ;
                      STA.L !DynamicStripeImage+$0D             ;;         +9C5F          ;
                      REP #$20                                  ;;         +9C63          ;
                      TYA                                       ;;         +9C65          ;
                      STA.L !DynamicStripeImage+$10             ;;         +9C66          ;
                      SEP #$30                                  ;;         +9C6A          ;
                      RTS                                       ;;         +9C6C          ;
                                                                ;;                        ;
SSCODE_009C6D:        LDA.B #!SFX_COIN                          ;;         +9C6D          ;
                      STA.W !SPCIO3                             ;;         +9C6F          ;
                      SEP #$10                                  ;;         +9C72          ;
                      LDA.W !Layer2ScrollType                   ;;         +9C74          ;
                      BEQ +                                     ;;         +9C77          ;
                      STZ.W !OverworldOverride                  ;;         +9C79          ;
                    + INC.W !GameMode                           ;;         +9C7C          ;
                      JSR CODE_WRITEOW                          ;;         +9C7F          ;
                   else                               ;<  ELSE  ;;------------------------; J, U, E0, & E1
GameMode08:           REP #$20                                  ;;9C6B|9CD1     /9CD6\9CD8; 16 bit A ; Accum (16 bit) 
                      LDA.W #$7393                              ;;9C6D|9CD3     /9CD8\9CDA;
                      LDY.B #$20                                ;;9C70|9CD6     /9CDB\9CDD;
                      JSR CODE_009D30                           ;;9C72|9CD8     /9CDD\9CDF;
                      LDY.B #$02                                ;;9C75|9CDB     /9CE0\9CE2;
                      JSR CODE_009ACB                           ;;9C77|9CDD     /9CE2\9CE4;
                      INC.W !GameMode                           ;;9C7A|9CE0     /9CE5\9CE7;
                      CPX.B #$03                                ;;9C7D|9CE3     /9CE8\9CEA;
                      BNE +                                     ;;9C7F|9CE5     /9CEA\9CEC;
                      STZ.W !SaveFileDelete                     ;;9C81|9CE7     /9CEC\9CEE;
                   if ver_is_japanese(!_VER)          ;\   IF   ;;++++++++++++++++++++++++; J
                      LDY.B #$0C                                ;;9C84                    ;
                   else                               ;<  ELSE  ;;------------------------; U, E0, & E1
                      LDX.B #$00                                ;;    |9CEA     /9CEF\9CF1;
                   endif                              ;/ ENDIF  ;;++++++++++++++++++++++++;
                      JMP CODE_009D3A                           ;;9C86|9CEC     /9CF1\9CF3;
                                                                ;;                        ;
                    + STX.W !SaveFile                           ;;9C89|9CEF     /9CF4\9CF6; Index (16 bit) Accum (8 bit) 
                      JSR CODE_009DB5                           ;;9C8C|9CF2     /9CF7\9CF9;
                      BNE CODE_009D22                           ;;9C8F|9CF5     /9CFA\9CFC;
                      PHX                                       ;;9C91|9CF7     /9CFC\9CFE;
                      STZ.W !OverworldOverride                  ;;9C92|9CF8     /9CFD\9CFF;
                      LDA.B #$8F                                ;;9C95|9CFB     /9D00\9D02;
                      STA.B !_0                                 ;;9C97|9CFD     /9D02\9D04;
                    - LDA.L !SaveData,X                         ;;9C99|9CFF     /9D04\9D06;
                      PHX                                       ;;9C9D|9D03     /9D08\9D0A;
                      TYX                                       ;;9C9E|9D04     /9D09\9D0B;
                      STA.L !SaveData,X                         ;;9C9F|9D05     /9D0A\9D0C;
                      PLX                                       ;;9CA3|9D09     /9D0E\9D10;
                      INX                                       ;;9CA4|9D0A     /9D0F\9D11;
                      INY                                       ;;9CA5|9D0B     /9D10\9D12;
                      DEC.B !_0                                 ;;9CA6|9D0C     /9D11\9D13;
                      BNE -                                     ;;9CA8|9D0E     /9D13\9D15;
                      PLX                                       ;;9CAA|9D10     /9D15\9D17;
                      LDY.W #$0000                              ;;9CAB|9D11     /9D16\9D18;
                    - LDA.L !SaveData,X                         ;;9CAE|9D14     /9D19\9D1B;
                      STA.W !SaveDataBuffer,Y                   ;;9CB2|9D18     /9D1D\9D1F;
                      INX                                       ;;9CB5|9D1B     /9D20\9D22;
                      INY                                       ;;9CB6|9D1C     /9D21\9D23;
                      CPY.W #$008D                              ;;9CB7|9D1D     /9D22\9D24;
                      BCC -                                     ;;9CBA|9D20     /9D25\9D27;
CODE_009D22:          SEP #$10                                  ;;9CBC|9D22     /9D27\9D29; Index (8 bit) 
                   endif                              ;/ ENDIF  ;;++++++++++++++++++++++++;
                      LDY.B #$12                                ;;9CBE|9D24+9C82/9D29\9D2B; \ Draw 1 PLAYER GAME/2 PLAYER GAME text 
                      INC.W !GameMode                           ;;9CC0|9D26+9C84/9D2B\9D2D;  |Increase Game Mode 
CODE_009D29:          STY.B !StripeImage                        ;;9CC3|9D29+9C87/9D2E\9D30; /  
                      LDX.B #$00                                ;;9CC5|9D2B+9C89/9D30\9D32;
                      JMP CODE_009ED4                           ;;9CC7|9D2D+9C8B/9D32\9D34;
                                                                ;;                        ;
CODE_009D30:          STA.W !BackgroundColor                    ;;9CCA|9D30+9C8E/9D35\9D37; Store A in BG color 
                      STY.B !ColorSettings                      ;;9CCD|9D33+9C91/9D38\9D3A; Store Y in CGADSUB 
                      SEP #$20                                  ;;9CCF|9D35+9C93/9D3A\9D3C; 8 bit A ; Accum (8 bit) 
                      RTS                                       ;;9CD1|9D37+9C95/9D3C\9D3E;
                                                                ;;                        ;
                   if ver_is_japanese(!_VER)          ;\   IF   ;;++++++++++++++++++++++++; J
DATA_009CD2:          db $D4,$31,$FC,$38,$9D,$31,$FC,$38        ;;9CD2                    ;
                      db $8D,$31,$FC,$38,$FC,$38,$FC,$38        ;;9CDA                    ;
                                                                ;;                        ;
CODE_009D3A:          STZ.B !_5                                 ;;9CE2                    ;
CODE_009D3C:          STY.B !_6                                 ;;9CE4                    ; Index (16 bit) 
                      LDX.B #$B0                                ;;9CE6                    ;
                    - LDA.L DATA_05B6FE-1,X                     ;;9CE8                    ; X =  read index 
                      STA.L !DynamicStripeImage-1,X             ;;9CEC                    ; Layer 3-related table 
                      DEX                                       ;;9CF0                    ;
                      BNE -                                     ;;9CF1                    ;
                      LDA.B #$76                                ;;9CF3                    ;
                   elseif ver_is_arcade(!_VER)        ;< ELSEIF ;;------------------------; SS
CODE_009D38:          LDX.B #$CB                                ;;         +9C96          ;
CODE_009D3C:          REP #$10                                  ;;         +9C98          ; Index (16 bit) 
                      LDY.W #$0000                              ;;         +9C9A          ;
                    - LDA.L DATA_05B6FE,X                       ;;         +9C9D          ; X =  read index 
                      PHX                                       ;;         +9CA1          ; Y = write index 
                      TYX                                       ;;         +9CA2          ;
                      STA.L !DynamicStripeImage,X               ;;         +9CA3          ; Layer 3-related table 
                      PLX                                       ;;         +9CA7          ;
                      INX                                       ;;         +9CA8          ;
                      INY                                       ;;         +9CA9          ;
                      CPY.W #$00CC                              ;;         +9CAA          ; If not at end of loop, continue 
                      BNE -                                     ;;         +9CAD          ;
                      SEP #$10                                  ;;         +9CAF          ; Index (8 bit) 
                   else                               ;<  ELSE  ;;------------------------; U, E0, & E1
CODE_009D38:          LDX.B #$CB                                ;;    |9D38     /9D3D\9D3F;
CODE_009D3A:          STZ.B !_5                                 ;;    |9D3A     /9D3F\9D41;
CODE_009D3C:          REP #$10                                  ;;    |9D3C     /9D41\9D43; Index (16 bit) 
                      LDY.W #$0000                              ;;    |9D3E     /9D43\9D45;
                    - LDA.L DATA_05B6FE,X                       ;;    |9D41     /9D46\9D48; X =  read index 
                      PHX                                       ;;    |9D45     /9D4A\9D4C; Y = write index 
                      TYX                                       ;;    |9D46     /9D4B\9D4D;
                      STA.L !DynamicStripeImage,X               ;;    |9D47     /9D4C\9D4E; Layer 3-related table 
                      PLX                                       ;;    |9D4B     /9D50\9D52;
                      INX                                       ;;    |9D4C     /9D51\9D53;
                      INY                                       ;;    |9D4D     /9D52\9D54;
                      CPY.W #$00CC                              ;;    |9D4E     /9D53\9D55; If not at end of loop, continue 
                      BNE -                                     ;;    |9D51     /9D56\9D58;
                      SEP #$10                                  ;;    |9D53     /9D58\9D5A; Index (8 bit) 
                      LDA.B #$84                                ;;    |9D55     /9D5A\9D5C;
                   endif                              ;/ ENDIF  ;;++++++++++++++++++++++++;
                                                                ;;                        ;
                   if ver_is_console(!_VER)           ;\   IF   ;;++++++++++++++++++++++++; J, U, E0, & E1
                      STA.B !_0                                 ;;9CF5|9D57     /9D5C\9D5E;
                      LDX.B #$02                                ;;9CF7|9D59     /9D5E\9D60;
CODE_009D5B:          STX.B !_4                                 ;;9CF9|9D5B     /9D60\9D62;
                      LSR.B !_5                                 ;;9CFB|9D5D     /9D62\9D64;  $05 = $05 / 2 
                      BCS CODE_009DA6                           ;;9CFD|9D5F     /9D64\9D66;
                      JSR CODE_009DB5                           ;;9CFF|9D61     /9D66\9D68;
                      BNE CODE_009DA6                           ;;9D02|9D64     /9D69\9D6B;
                      LDA.L !SaveDataChecksum,X                 ;;9D04|9D66     /9D6B\9D6D;
                      SEP #$10                                  ;;9D08|9D6A     /9D6F\9D71; Index (8 bit) 
                   if ver_is_english(!_VER)           ;\   IF   ;;++++++++++++++++++++++++; U, E0, & E1
                      CMP.B #$60                                ;;    |9D6C     /9D71\9D73;
                      BCC CODE_009D76                           ;;    |9D6E     /9D73\9D75;
                      LDY.B #$87                                ;;    |9D70     /9D75\9D77;
                      LDA.B #$88                                ;;    |9D72     /9D77\9D79;
                      BRA +                                     ;;    |9D74     /9D79\9D7B;
                   endif                              ;/ ENDIF  ;;++++++++++++++++++++++++;
                                                                ;;                        ;
CODE_009D76:          JSR HexToDec                              ;;9D0A|9D76     /9D7B\9D7D;
                      TXY                                       ;;9D0D|9D79     /9D7E\9D80;
                    + LDX.B !_0                                 ;;9D0E|9D7A     /9D7F\9D81;
                      STA.L !DynamicStripeImage+4,X             ;;9D10|9D7C     /9D81\9D83;
                      TYA                                       ;;9D14|9D80     /9D85\9D87;
                      BNE +                                     ;;9D15|9D81     /9D86\9D88;
                      LDY.B #$FC                                ;;9D17|9D83     /9D88\9D8A;
                    + TYA                                       ;;9D19|9D85     /9D8A\9D8C;
                      STA.L !DynamicStripeImage+2,X             ;;9D1A|9D86     /9D8B\9D8D;
                      LDA.B #$38                                ;;9D1E|9D8A     /9D8F\9D91;
                      STA.L !DynamicStripeImage+3,X             ;;9D20|9D8C     /9D91\9D93;
                      STA.L !DynamicStripeImage+5,X             ;;9D24|9D90     /9D95\9D97;
                      REP #$20                                  ;;9D28|9D94     /9D99\9D9B; Accum (16 bit) 
                   if ver_is_japanese(!_VER)          ;\   IF   ;;++++++++++++++++++++++++; J
                      LDA.W #$38FC                              ;;9D2A                    ;
                      STA.L !DynamicStripeImage+$12,X           ;;9D2D                    ;
                      LDY.B !_6                                 ;;9D31                    ;
                    - LDA.W DATA_009CD2,Y                       ;;9D33                    ;
                      STA.L !DynamicStripeImage+6,X             ;;9D36                    ;
                      INX                                       ;;9D3A                    ;
                      INX                                       ;;9D3B                    ;
                      DEY                                       ;;9D3C                    ;
                      DEY                                       ;;9D3D                    ;
                      DEY                                       ;;9D3E                    ;
                      DEY                                       ;;9D3F                    ;
                      BPL -                                     ;;9D40                    ;
                      SEP #$20                                  ;;9D42                    ; Accum (8 bit) 
CODE_009DA6:          SEP #$10                                  ;;9D44                    ; Index (8 bit) 
                      LDA.B !_0                                 ;;9D46                    ;
                      SEC                                       ;;9D48                    ;
                      SBC.B #$2A                                ;;9D49                    ;
                   else                               ;<  ELSE  ;;------------------------; U, E0, & E1
                      LDY.B #$03                                ;;    |9D96     /9D9B\9D9D;
                    - LDA.W #$38FC                              ;;    |9D98     /9D9D\9D9F;
                      STA.L !DynamicStripeImage+6,X             ;;    |9D9B     /9DA0\9DA2;
                      INX                                       ;;    |9D9F     /9DA4\9DA6;
                      INX                                       ;;    |9DA0     /9DA5\9DA7;
                      DEY                                       ;;    |9DA1     /9DA6\9DA8;
                      BNE -                                     ;;    |9DA2     /9DA7\9DA9;
                      SEP #$20                                  ;;    |9DA4     /9DA9\9DAB; Accum (8 bit) 
CODE_009DA6:          SEP #$10                                  ;;    |9DA6     /9DAB\9DAD; Index (8 bit) 
                      LDA.B !_0                                 ;;    |9DA8     /9DAD\9DAF;
                      SEC                                       ;;    |9DAA     /9DAF\9DB1;
                      SBC.B #$24                                ;;    |9DAB     /9DB0\9DB2;
                   endif                              ;/ ENDIF  ;;++++++++++++++++++++++++;
                      STA.B !_0                                 ;;9D4B|9DAD     /9DB2\9DB4;
                      LDX.B !_4                                 ;;9D4D|9DAF     /9DB4\9DB6;
                      DEX                                       ;;9D4F|9DB1     /9DB6\9DB8;
                      BPL CODE_009D5B                           ;;9D50|9DB2     /9DB7\9DB9;
                      RTS                                       ;;9D52|9DB4     /9DB9\9DBB;
                                                                ;;                        ;
CODE_009DB5:          LDA.W DATA_009CCB,X                       ;;9D53|9DB5     /9DBA\9DBC;
                      XBA                                       ;;9D56|9DB8     /9DBD\9DBF;
                      LDA.W DATA_009CCE,X                       ;;9D57|9DB9     /9DBE\9DC0;
                      REP #$30                                  ;;9D5A|9DBC     /9DC1\9DC3; Index (16 bit) Accum (16 bit) 
                      TAX                                       ;;9D5C|9DBE     /9DC3\9DC5;
                      CLC                                       ;;9D5D|9DBF     /9DC4\9DC6;
                      ADC.W #$01AD                              ;;9D5E|9DC0     /9DC5\9DC7;
                      TAY                                       ;;9D61|9DC3     /9DC8\9DCA;
CODE_009DC4:          PHX                                       ;;9D62|9DC4     /9DC9\9DCB;
                      PHY                                       ;;9D63|9DC5     /9DCA\9DCC;
                      LDA.L !SaveDataChecksum+1,X               ;;9D64|9DC6     /9DCB\9DCD;
                      STA.B !GraphicsCompPtr                    ;;9D68|9DCA     /9DCF\9DD1;
                      SEP #$20                                  ;;9D6A|9DCC     /9DD1\9DD3; Accum (8 bit) 
                      LDY.W #$008D                              ;;9D6C|9DCE     /9DD3\9DD5;
CODE_009DD1:          LDA.L !SaveData,X                         ;;9D6F|9DD1     /9DD6\9DD8;
                      CLC                                       ;;9D73|9DD5     /9DDA\9DDC;
                      ADC.B !GraphicsCompPtr                    ;;9D74|9DD6     /9DDB\9DDD;
                      STA.B !GraphicsCompPtr                    ;;9D76|9DD8     /9DDD\9DDF;
                      BCC +                                     ;;9D78|9DDA     /9DDF\9DE1;
                      INC.B !GraphicsCompPtr+1                  ;;9D7A|9DDC     /9DE1\9DE3;
                    + INX                                       ;;9D7C|9DDE     /9DE3\9DE5;
                      DEY                                       ;;9D7D|9DDF     /9DE4\9DE6;
                      BNE CODE_009DD1                           ;;9D7E|9DE0     /9DE5\9DE7;
                      REP #$20                                  ;;9D80|9DE2     /9DE7\9DE9; Accum (16 bit) 
                      PLY                                       ;;9D82|9DE4     /9DE9\9DEB;
                      PLX                                       ;;9D83|9DE5     /9DEA\9DEC;
                      LDA.B !GraphicsCompPtr                    ;;9D84|9DE6     /9DEB\9DED;
                      CMP.W #$5A5A                              ;;9D86|9DE8     /9DED\9DEF;
                      BEQ CODE_009DF7                           ;;9D89|9DEB     /9DF0\9DF2;
                      CPX.W #$01AC                              ;;9D8B|9DED     /9DF2\9DF4;
                      BCS CODE_009DF7                           ;;9D8E|9DF0     /9DF5\9DF7;
                      PHX                                       ;;9D90|9DF2     /9DF7\9DF9;
                      TYX                                       ;;9D91|9DF3     /9DF8\9DFA;
                      PLY                                       ;;9D92|9DF4     /9DF9\9DFB;
                      BRA CODE_009DC4                           ;;9D93|9DF5     /9DFA\9DFC;
                                                                ;;                        ;
CODE_009DF7:          SEP #$20                                  ;;9D95|9DF7     /9DFC\9DFE; Accum (8 bit) 
                      RTS                                       ;;9D97|9DF9     /9DFE\9E00;
                   else                               ;<  ELSE  ;;++++++++++++++++++++++++;
                      RTS                                       ;;         +9CB1          ;
                                                                ;;                        ;
                      RTS                                       ;;         +9CB2          ; unused?
                   endif                              ;/ ENDIF  ;;++++++++++++++++++++++++;
                                                                ;;                        ;
GameMode0A:           LDA.B !byetudlrFrame                      ;;9D98|9DFA+9CB3/9DFF\9E01; Index (8 bit) 
                      ORA.B !axlr0000Frame                      ;;9D9A|9DFC+9CB5/9E01\9E03;
                      AND.B #$40                                ;;9D9C|9DFE+9CB7/9E03\9E05;
                      BEQ +                                     ;;9D9E|9E00+9CB9/9E05\9E07;
                      DEC.W !GameMode                           ;;9DA0|9E02+9CBB/9E07\9E09;
                      JMP CODE_009B2C                           ;;9DA3|9E05+9CBE/9E0A\9E0C;
                                                                ;;                        ;
                    + LDY.B #$04                                ;;9DA6|9E08+9CC1/9E0D\9E0F;
                      JSR CODE_009ACB                           ;;9DA8|9E0A+9CC3/9E0F\9E11;
                      STX.W !IsTwoPlayerGame                    ;;9DAB|9E0D+9CC6/9E12\9E14;
                      JSR CODE_00A195                           ;;9DAE|9E10+9CC9/9E15\9E17;
                      JSL CODE_04DAAD                           ;;9DB1|9E13+9CCC/9E18\9E1A;
CODE_009E17:          LDA.B #!BGM_FADEOUT                       ;;9DB5|9E17+9CD0/9E1C\9E1E;
                      STA.W !SPCIO2                             ;;9DB7|9E19+9CD2/9E1E\9E20;
                      LDA.B #$FF                                ;;9DBA|9E1C+9CD5/9E21\9E23;
                      STA.W !SavedPlayerLives+1                 ;;9DBC|9E1E+9CD7/9E23\9E25;
                      LDX.W !IsTwoPlayerGame                    ;;9DBF|9E21+9CDA/9E26\9E28;
                      LDA.B #$04                                ;;9DC2|9E24+9CDD/9E29\9E2B;
                    - STA.W !SavedPlayerLives,X                 ;;9DC4|9E26+9CDF/9E2B\9E2D;
                      DEX                                       ;;9DC7|9E29+9CE2/9E2E\9E30;
                      BPL -                                     ;;9DC8|9E2A+9CE3/9E2F\9E31;
                      STA.W !PlayerLives                        ;;9DCA|9E2C+9CE5/9E31\9E33;
                      STZ.W !PlayerCoins                        ;;9DCD|9E2F+9CE8/9E34\9E36;
                      STZ.W !CarryYoshiThruLvls                 ;;9DD0|9E32+9CEB/9E37\9E39;
                      STZ.B !Powerup                            ;;9DD3|9E35+9CEE/9E3A\9E3C;
                      STZ.W !PlayerItembox                      ;;9DD5|9E37+9CF0/9E3C\9E3E;
                      STZ.W !ShowContinueEnd                    ;;9DD8|9E3A+9CF3/9E3F\9E41;
                      REP #$20                                  ;;9DDB|9E3D+9CF6/9E42\9E44; Accum (16 bit) 
                      STZ.W !SavedPlayerCoins                   ;;9DDD|9E3F+9CF8/9E44\9E46;
                      STZ.W !SavedPlayerPowerup                 ;;9DE0|9E42+9CFB/9E47\9E49;
                      STZ.W !SavedPlayerYoshi                   ;;9DE3|9E45+9CFE/9E4A\9E4C;
                      STZ.W !PlayerItembox                      ;;9DE6|9E48+9D01/9E4D\9E4F;
                      STZ.W !PlayerBonusStars                   ;;9DE9|9E4B+9D04/9E50\9E52;
                      STZ.W !PlayerScore                        ;;9DEC|9E4E+9D07/9E53\9E55;
                      STZ.W !PlayerScore+3                      ;;9DEF|9E51+9D0A/9E56\9E58;
                      SEP #$20                                  ;;9DF2|9E54+9D0D/9E59\9E5B; Accum (8 bit) 
                      STZ.W !PlayerScore+2                      ;;9DF4|9E56+9D0F/9E5B\9E5D;
                      STZ.W !PlayerScore+5                      ;;9DF7|9E59+9D12/9E5E\9E60;
                      STZ.W !OWLevelExitMode                    ;;9DFA|9E5C+9D15/9E61\9E63;
                      STZ.W !PlayerTurnLvl                      ;;9DFD|9E5F+9D18/9E64\9E66;
CODE_009E62:          JSR KeepModeActive                        ;;9E00|9E62+9D1B/9E67\9E69;
                      LDY.B #$0B                                ;;9E03|9E65+9D1E/9E6A\9E6C;
                      JMP CODE_009C8B                           ;;9E05|9E67+9D20/9E6C\9E6E;
                                                                ;;                        ;
CursorOptCount:       dw $0002                                  ;;9E08|9E6A+9D23/9E6F\9E71; continue/end
                      dw $0004                                  ;;9E0A|9E6C+9D25/9E71\9E73; file select
                      dw $0002                                  ;;9E0C|9E6E+9D27/9E73\9E75; 1/2 player
                      dw $0002                                  ;;9E0E|9E70+9D29/9E75\9E77; save/no save
                      dw $0004                                  ;;9E10|9E72+9D2B/9E77\9E79; erase file select
                                                                ;;                        ;
                   if ver_is_japanese(!_VER)          ;\   IF   ;;++++++++++++++++++++++++; J
CursorCoords:         dw $51CC                                  ;;9E12                    ; continue/end
                      dw $5208                                  ;;9E14                    ; file select
                      dw $5228                                  ;;9E16                    ; 1/2 player
                      dw $5208                                  ;;9E18                    ; save/no save
                      dw $5208                                  ;;9E1A                    ; erase file select
                   elseif ver_is_arcade(!_VER)        ;< ELSEIF ;;------------------------; SS
CursorCoords:         dw $51CB                                  ;;         +9D2D          ; continue/end
                      dw $5208                                  ;;         +9D2F          ; file select
                      dw $5208                                  ;;         +9D31          ; 1/2 player
                      dw $51C4                                  ;;         +9D33          ; save/no save
                      dw $5205                                  ;;         +9D35          ; erase file select
                   else                               ;<  ELSE  ;;------------------------; U, E0, & E1
CursorCoords:         dw $51CB                                  ;;    |9E74     /9E79\9E7B; continue/end
                      dw $51E8                                  ;;    |9E76     /9E7B\9E7D; file select
                      dw $5208                                  ;;    |9E78     /9E7D\9E7F; 1/2 player
                      dw $51C4                                  ;;    |9E7A     /9E7F\9E81; save/no save
                      dw $51E5                                  ;;    |9E7C     /9E81\9E83; erase file select
                   endif                              ;/ ENDIF  ;;++++++++++++++++++++++++;
                                                                ;;                        ;
DATA_009E7E:          db $01,$02,$04,$08                        ;;9E1C|9E7E+9D37/9E83\9E85;
                                                                ;;                        ;
CODE_009E82:          LDX.W !BlinkCursorPos                     ;;9E20|9E82+9D3B/9E87\9E89;
                      LDA.W DATA_009E7E,X                       ;;9E23|9E85+9D3E/9E8A\9E8C;
                      TAX                                       ;;9E26|9E88+9D41/9E8D\9E8F;
                      LDA.W !BlinkCursorTimer                   ;;9E27|9E89+9D42/9E8E\9E90;
                      EOR.B #$1F                                ;;9E2A|9E8C+9D45/9E91\9E93;
                      AND.B #$18                                ;;9E2C|9E8E+9D47/9E93\9E95;
                      BNE +                                     ;;9E2E|9E90+9D49/9E95\9E97;
                      LDX.B #$00                                ;;9E30|9E92+9D4B/9E97\9E99;
                    + STX.B !_0                                 ;;9E32|9E94+9D4D/9E99\9E9B;
                      LDA.L !DynStripeImgSize                   ;;9E34|9E96+9D4F/9E9B\9E9D;
                      TAX                                       ;;9E38|9E9A+9D53/9E9F\9EA1;
                      REP #$20                                  ;;9E39|9E9B+9D54/9EA0\9EA2; Accum (16 bit) 
                      LDA.W CursorOptCount,Y                    ;;9E3B|9E9D+9D56/9EA2\9EA4;
                      STA.B !GraphicsCompPtr                    ;;9E3E|9EA0+9D59/9EA5\9EA7;
                      STA.B !_2                                 ;;9E40|9EA2+9D5B/9EA7\9EA9;
                      LDA.W CursorCoords,Y                      ;;9E42|9EA4+9D5D/9EA9\9EAB;
CODE_009EA7:          XBA                                       ;;9E45|9EA7+9D60/9EAC\9EAE;
                      STA.L !DynamicStripeImage,X               ;;9E46|9EA8+9D61/9EAD\9EAF;
                      XBA                                       ;;9E4A|9EAC+9D65/9EB1\9EB3;
                      CLC                                       ;;9E4B|9EAD+9D66/9EB2\9EB4;
                      ADC.W #$0040                              ;;9E4C|9EAE+9D67/9EB3\9EB5;
                      PHA                                       ;;9E4F|9EB1+9D6A/9EB6\9EB8;
                      LDA.W #$0100                              ;;9E50|9EB2+9D6B/9EB7\9EB9;
                      STA.L !DynamicStripeImage+2,X             ;;9E53|9EB5+9D6E/9EBA\9EBC;
                      LDA.W #$38FC                              ;;9E57|9EB9+9D72/9EBE\9EC0;
                      LSR.B !_0                                 ;;9E5A|9EBC+9D75/9EC1\9EC3;
                      BCC +                                     ;;9E5C|9EBE+9D77/9EC3\9EC5;
                      LDA.W #$3D2E                              ;;9E5E|9EC0+9D79/9EC5\9EC7;
                    + STA.L !DynamicStripeImage+4,X             ;;9E61|9EC3+9D7C/9EC8\9ECA;
                      PLA                                       ;;9E65|9EC7+9D80/9ECC\9ECE;
                      INX                                       ;;9E66|9EC8+9D81/9ECD\9ECF;
                      INX                                       ;;9E67|9EC9+9D82/9ECE\9ED0;
                      INX                                       ;;9E68|9ECA+9D83/9ECF\9ED1;
                      INX                                       ;;9E69|9ECB+9D84/9ED0\9ED2;
                      INX                                       ;;9E6A|9ECC+9D85/9ED1\9ED3;
                      INX                                       ;;9E6B|9ECD+9D86/9ED2\9ED4;
                      DEC.B !_2                                 ;;9E6C|9ECE+9D87/9ED3\9ED5;
                      BNE CODE_009EA7                           ;;9E6E|9ED0+9D89/9ED5\9ED7;
                      SEP #$20                                  ;;9E70|9ED2+9D8B/9ED7\9ED9; Accum (8 bit) 
CODE_009ED4:          TXA                                       ;;9E72|9ED4+9D8D/9ED9\9EDB;
                      STA.L !DynStripeImgSize                   ;;9E73|9ED5+9D8E/9EDA\9EDC;
                      LDA.B #$FF                                ;;9E77|9ED9+9D92/9EDE\9EE0;
                      STA.L !DynamicStripeImage,X               ;;9E79|9EDB+9D94/9EE0\9EE2;
                      RTS                                       ;;9E7D|9EDF+9D98/9EE4\9EE6;
                                                                ;;                        ;
                   if ver_is_console(!_VER)           ;\   IF   ;;++++++++++++++++++++++++; J, U, E0, & E1
TBL_009EE0:           db $28,$03                                ;;9E7E|9EE0     /9EE5\9EE7; enable left/right on yoshi's house
                      db $4D,$01                                ;;9E80|9EE2     /9EE7\9EE9; enable right on special world star warp
                      db $52,$01                                ;;9E82|9EE4     /9EE9\9EEB; enable right on star world top star warp
                      db $53,$01                                ;;9E84|9EE6     /9EEB\9EED; enable right on star world left star warp
                      db $5B,$08                                ;;9E86|9EE8     /9EED\9EEF; enable up on star world bottom left star warp
                      db $5C,$02                                ;;9E88|9EEA     /9EEF\9EF1; enable left on star world bottom right star warp
                      db $57,$04                                ;;9E8A|9EEC     /9EF1\9EF3; enable down on star world right star warp
                      db $30,$01                                ;;9E8C|9EEE     /9EF3\9EF5; enable right on valley of bowser star warp
                                                                ;;                        ;
TBL_009EF0:           db $01,$01,$02,$00,$02,$00,$68,$00        ;;9E8E|9EF0     /9EF5\9EF7; players submap, animation
                      db $78,$00,$68,$00,$78,$00,$06,$00        ;;9E96|9EF8     /9EFD\9EFF; players overworld X & Y
                      db $07,$00,$06,$00,$07,$00                ;;9E9E|9F00     /9F05\9F07;
                                                                ;;                        ;
CODE_WRITEOW:         LDX.B #$8D                                ;;9EA4|9F06     /9F0B\9F0D; Index (8 bit) 
                    - STZ.W !SaveDataBuffer-1,X                 ;;9EA6|9F08     /9F0D\9F0F;
                      DEX                                       ;;9EA9|9F0B     /9F10\9F12;
                      BNE -                                     ;;9EAA|9F0C     /9F11\9F13;
                      LDX.B #$0E                                ;;9EAC|9F0E     /9F13\9F15;
                    - LDY.W TBL_009EE0,X                        ;;9EAE|9F10     /9F15\9F17; \ 
                      LDA.W TBL_009EE0+1,X                      ;;9EB1|9F13     /9F18\9F1A; |Write overworld settings to OW L1 table 
                      STA.W !SaveDataBuffer,Y                   ;;9EB4|9F16     /9F1B\9F1D; / 
                      DEX                                       ;;9EB7|9F19     /9F1E\9F20;
                      DEX                                       ;;9EB8|9F1A     /9F1F\9F21;
                      BPL -                                     ;;9EB9|9F1B     /9F20\9F22;
                      LDX.B #$15                                ;;9EBB|9F1D     /9F22\9F24;
                    - LDA.W TBL_009EF0,X                        ;;9EBD|9F1F     /9F24\9F26;
                      STA.W !SaveDataBufferSubmap,X             ;;9EC0|9F22     /9F27\9F29; <- This probably means that the table above ends at 1FB7 
                      DEX                                       ;;9EC3|9F25     /9F2A\9F2C;
                      BPL -                                     ;;9EC4|9F26     /9F2B\9F2D;
                      RTS                                       ;;9EC6|9F28     /9F2D\9F2F;
                   else                               ;<  ELSE  ;;------------------------; SS
TBL_009EE0:           db $28,$83,$4D,$81,$52,$81,$53,$81        ;;         +9D99          ;
                      db $5B,$88,$5C,$82,$57,$84,$30,$81        ;;         +9DA1          ;
                      db $29,$89,$2A,$8A,$27,$85,$26,$8C        ;;         +9DA9          ;
                      db $25,$89,$15,$04,$15,$86,$09,$8E        ;;         +9DB1          ;
                      db $04,$83,$05,$83,$06,$8A,$07,$8A        ;;         +9DB9          ;
                      db $3E,$04,$3E,$85,$3C,$8D,$2B,$85        ;;         +9DC1          ;
                      db $2E,$8C,$3D,$8C,$40,$8C,$0F,$02        ;;         +9DC9          ;
                      db $0F,$83,$10,$86,$0E,$85,$42,$08        ;;         +9DD1          ;
                      db $42,$89,$44,$8D,$47,$85,$20,$85        ;;         +9DD9          ;
                      db $22,$08,$22,$8A,$21,$85,$24,$8A        ;;         +9DE1          ;
                      db $23,$83,$1B,$85,$1D,$8A,$1C,$89        ;;         +9DE9          ;
                      db $1A,$8C,$18,$02                        ;;         +9DF1          ;
                                                                ;;                        ;
SSTBL_009DF5:         db $00,$10,$1C,$2A,$38,$40,$4A,$5C        ;;         +9DF5          ;
                                                                ;;                        ;
TBL_009EF0:           db $00,$00,$00,$00,$00,$00,$00,$00        ;;         +9DFD          ;
                      db $00,$00,$00,$00,$00,$00,$00,$01        ;;         +9E05          ;
                      db $01,$02,$00,$02,$00,$68,$00,$78        ;;         +9E0D          ;
                      db $00,$68,$00,$78,$00,$06,$00,$07        ;;         +9E15          ;
                      db $00,$06,$00,$07,$00,$00,$00,$00        ;;         +9E1D          ;
                      db $00,$7E,$00,$00,$00,$00,$00,$00        ;;         +9E25          ;
                      db $00,$00,$00,$00,$00,$00,$00,$00        ;;         +9E2D          ;
                      db $00,$00,$02,$00,$02,$00,$58,$00        ;;         +9E35          ;
                      db $18,$01,$58,$00,$18,$01,$05,$00        ;;         +9E3D          ;
                      db $11,$00,$05,$00,$11,$00,$00,$01        ;;         +9E45          ;
                      db $00,$00,$7F,$6F,$00,$00,$00,$80        ;;         +9E4D          ;
                      db $00,$00,$00,$00,$00,$00,$00,$00        ;;         +9E55          ;
                      db $00,$02,$02,$02,$00,$02,$00,$58        ;;         +9E5D          ;
                      db $00,$28,$01,$58,$00,$28,$01,$05        ;;         +9E65          ;
                      db $00,$12,$00,$05,$00,$12,$00,$01        ;;         +9E6D          ;
                      db $01,$00,$00,$7F,$6F,$05,$F8,$00        ;;         +9E75          ;
                      db $C0,$00,$00,$00,$00,$00,$00,$00        ;;         +9E7D          ;
                      db $00,$00,$00,$00,$02,$00,$02,$00        ;;         +9E85          ;
                      db $48,$01,$58,$00,$48,$01,$58,$00        ;;         +9E8D          ;
                      db $14,$00,$05,$00,$14,$00,$05,$00        ;;         +9E95          ;
                      db $01,$01,$00,$01,$7F,$6F,$05,$F8        ;;         +9E9D          ;
                      db $0D,$C0,$00,$00,$00,$00,$00,$00        ;;         +9EA5          ;
                      db $00,$00,$00,$03,$03,$02,$00,$02        ;;         +9EAD          ;
                      db $00,$88,$00,$78,$01,$88,$00,$78        ;;         +9EB5          ;
                      db $01,$08,$00,$17,$00,$08,$00,$17        ;;         +9EBD          ;
                      db $00,$01,$01,$00,$01,$7F,$6F,$05        ;;         +9EC5          ;
                      db $F8,$0D,$ED,$01,$00,$00,$00,$00        ;;         +9ECD          ;
                      db $00,$40,$00,$00,$00,$00,$02,$00        ;;         +9ED5          ;
                      db $02,$00,$88,$01,$68,$01,$88,$01        ;;         +9EDD          ;
                      db $68,$01,$18,$00,$16,$00,$18,$00        ;;         +9EE5          ;
                      db $16,$00,$01,$01,$01,$01,$7F,$6F        ;;         +9EED          ;
                      db $05,$F8,$0D,$ED,$01,$00,$02,$7C        ;;         +9EF5          ;
                      db $00,$00,$70,$00,$00,$00,$00,$02        ;;         +9EFD          ;
                      db $00,$02,$00,$E8,$00,$78,$01,$E8        ;;         +9F05          ;
                      db $00,$78,$01,$0E,$00,$17,$00,$0E        ;;         +9F0D          ;
                      db $00,$17,$00,$01,$01,$01,$01            ;;         +9F15          ;
                                                                ;;                        ;
SSTBL_009F1C:         dw $0028,$0051,$007A,$00A3                ;;         +9F1C          ;
                      dw $00CC,$00F5,$011E                      ;;         +9F24          ;
                                                                ;;                        ;
CODE_WRITEOW:         LDX.B #$8D                                ;;         +9F2A          ; Index (8 bit) 
                    - STZ.W !SaveDataBuffer-1,X                 ;;         +9F2C          ;
                      DEX                                       ;;         +9F2F          ;
                      BNE -                                     ;;         +9F30          ;
                      LDX.W !Layer2ScrollType                   ;;         +9F32          ;
                      LDA.W SSTBL_009DF5+1,X                    ;;         +9F35          ;
                      STA.B !_0                                 ;;         +9F38          ;
                      LDA.W SSTBL_009DF5                        ;;         +9F3A          ;
                      TAX                                       ;;         +9F3D          ;
                    - LDY.W TBL_009EE0,X                        ;;         +9F3E          ;
                      LDA.W TBL_009EE0+1,X                      ;;         +9F41          ;
                      STA.W !SaveDataBuffer,Y                   ;;         +9F44          ;
                      INX                                       ;;         +9F47          ;
                      INX                                       ;;         +9F48          ;
                      CPX.B !_0                                 ;;         +9F49          ;
                      BNE -                                     ;;         +9F4B          ;
                      REP #$30                                  ;;         +9F4D          ;
                      LDA.W !Layer2ScrollType                   ;;         +9F4F          ;
                      ASL A                                     ;;         +9F52          ;
                      TAX                                       ;;         +9F53          ;
                      LDY.W SSTBL_009F1C,X                      ;;         +9F54          ;
                      LDX.W #$0028                              ;;         +9F57          ;
                    - LDA.W TBL_009EF0,Y                        ;;         +9F5A          ;
                      STA.W !SaveDataBufferEvents,X             ;;         +9F5D          ;
                      DEY                                       ;;         +9F60          ;
                      DEX                                       ;;         +9F61          ;
                      BPL -                                     ;;         +9F62          ;
                      SEP #$30                                  ;;         +9F64          ;
                      RTS                                       ;;         +9F66          ;
                   endif                              ;/ ENDIF  ;;++++++++++++++++++++++++;
                                                                ;;                        ;
KeepModeActive:       LDA.B #$01                                ;;9EC7|9F29+9F67/9F2E\9F30;
CODE_009F2B:          STA.W !KeepModeActive                     ;;9EC9|9F2B+9F69/9F30\9F32;
                      RTS                                       ;;9ECC|9F2E+9F6C/9F33\9F35;
                                                                ;;                        ;
DATA_009F2F:          db $01,$FF                                ;;9ECD|9F2F+9F6D/9F34\9F36;
DATA_009F31:          db $F0,$10                                ;;9ECF|9F31+9F6F/9F36\9F38;
DATA_009F33:          db $0F,$00                                ;;9ED1|9F33+9F71/9F38\9F3A;
                      db $00,$F0                                ;;9ED3|9F35+9F73/9F3A\9F3C;
                                                                ;;                        ;
TempFade:             DEC.W !KeepModeActive                     ;;9ED5|9F37+9F75/9F3C\9F3E; \If 0DB1 = 0 Then Exit Ssub 
                      BPL Return009F6E                          ;;9ED8|9F3A+9F78/9F3F\9F41; /Decrease it either way. 
                      JSR KeepModeActive                        ;;9EDA|9F3C+9F7A/9F41\9F43; #$01 -> $0DB1 
                      LDY.W !MosaicDirection                    ;;9EDD|9F3F+9F7D/9F44\9F46;
                      LDA.W !MosaicSize                         ;;9EE0|9F42+9F80/9F47\9F49; \  
                      CLC                                       ;;9EE3|9F45+9F83/9F4A\9F4C;  |Increase $0DB0 (mosaic size) by $9F31,y 
                      ADC.W DATA_009F31,Y                       ;;9EE4|9F46+9F84/9F4B\9F4D;  | 
                      STA.W !MosaicSize                         ;;9EE7|9F49+9F87/9F4E\9F50; /  
CODE_009F4C:          LDA.W !Brightness                         ;;9EEA|9F4C+9F8A/9F51\9F53; Load Brightness byte from RAM 
                      CLC                                       ;;9EED|9F4F+9F8D/9F54\9F56; \Add $9F2F,Y 
                      ADC.W DATA_009F2F,Y                       ;;9EEE|9F50+9F8E/9F55\9F57; / 
                      STA.W !Brightness                         ;;9EF1|9F53+9F91/9F58\9F5A; Store back to brightness RAM byte 
                      CMP.W DATA_009F33,Y                       ;;9EF4|9F56+9F94/9F5B\9F5D;
                      BNE +                                     ;;9EF7|9F59+9F97/9F5E\9F60;
GM__Mosaic:           INC.W !GameMode                           ;;9EF9|9F5B+9F99/9F60\9F62; Game Mode += 1 
                      LDA.W !MosaicDirection                    ;;9EFC|9F5E+9F9C/9F63\9F65; \  
                      EOR.B #$01                                ;;9EFF|9F61+9F9F/9F66\9F68;  |$0DAF = $0DAF XOR 1 
                      STA.W !MosaicDirection                    ;;9F01|9F63+9FA1/9F68\9F6A; /  
                    + LDA.B #$03                                ;;9F04|9F66+9FA4/9F6B\9F6D; \  
                      ORA.W !MosaicSize                         ;;9F06|9F68+9FA6/9F6D\9F6F;  |Set mosaic size to $0DB0, enable mosaic on Layer 1 and 2. 
                      STA.W !HW_MOSAIC                          ;;9F09|9F6B+9FA9/9F70\9F72; /  ; Mosaic Size and BG Enable
Return009F6E:         RTS                                       ;;9F0C|9F6E+9FAC/9F73\9F75; I think we're done here 
                                                                ;;                        ;
GMTransition:         DEC.W !KeepModeActive                     ;;9F0D|9F6F+9FAD/9F74\9F76; Decrement something...  Seems like it might be a timing counter ; Index (8 bit) 
                      BPL Return009F6E                          ;;9F10|9F72+9FB0/9F77\9F79; If positive, return from subroutine. 
                      JSR KeepModeActive                        ;;9F12|9F74+9FB2/9F79\9F7B; Remain in this mode 
CODE_009F77:          LDY.W !MosaicDirection                    ;;9F15|9F77+9FB5/9F7C\9F7E; $0DAF -> Y, 
                      BRA CODE_009F4C                           ;;9F18|9F7A+9FB8/9F7F\9F81; BRA to the fade control routine 
                                                                ;;                        ;
GameMode28:           DEC.W !KeepModeActive                     ;;9F1A|9F7C+9FBA/9F81\9F83;
                      BPL Return009F6E                          ;;9F1D|9F7F+9FBD/9F84\9F86;
                      LDA.B #$08                                ;;9F1F|9F81+9FBF/9F86\9F88;
                      JSR CODE_009F2B                           ;;9F21|9F83+9FC1/9F88\9F8A;
                      BRA CODE_009F77                           ;;9F24|9F86+9FC4/9F8B\9F8D;
                                                                ;;                        ;
DATA_009F88:          db $01,$02,$C0                            ;;9F26|9F88+9FC6/9F8D\9F8F;
                      db $01,$80,$81                            ;;9F29|9F8B+9FC9/9F90\9F92;
                      db $01,$02,$C0                            ;;9F2C|9F8E+9FCC/9F93\9F95;
                      db $01,$02,$81                            ;;9F2F|9F91+9FCF/9F96\9F98;
                      db $01,$02,$80                            ;;9F32|9F94+9FD2/9F99\9F9B;
                      db $01,$02,$81                            ;;9F35|9F97+9FD5/9F9C\9F9E;
                      db $01,$02,$81                            ;;9F38|9F9A+9FD8/9F9F\9FA1;
                      db $01,$02,$C0                            ;;9F3B|9F9D+9FDB/9FA2\9FA4;
                      db $01,$02,$C0                            ;;9F3E|9FA0+9FDE/9FA5\9FA7;
                      db $01,$02,$81                            ;;9F41|9FA3+9FE1/9FA8\9FAA;
                      db $01,$02,$80                            ;;9F44|9FA6+9FE4/9FAB\9FAD;
                      db $01,$02,$80                            ;;9F47|9FA9+9FE7/9FAE\9FB0;
                      db $01,$02,$80                            ;;9F4A|9FAC+9FEA/9FB1\9FB3;
                      db $01,$02,$81                            ;;9F4D|9FAF+9FED/9FB4\9FB6;
                      db $01,$02,$81                            ;;9F50|9FB2+9FF0/9FB7\9FB9;
                      db $01,$02,$80                            ;;9F53|9FB5+9FF3/9FBA\9FBC;
                                                                ;;                        ;
CODE_009FB8:          LDA.W !ObjectTileset                      ;;9F56|9FB8+9FF6/9FBD\9FBF; \  
                      ASL A                                     ;;9F59|9FBB+9FF9/9FC0\9FC2;  |Get (Tileset*3), store in $00 
                      CLC                                       ;;9F5A|9FBC+9FFA/9FC1\9FC3;  | 
                      ADC.W !ObjectTileset                      ;;9F5B|9FBD+9FFB/9FC2\9FC4;  | 
                      STA.B !_0                                 ;;9F5E|9FC0+9FFE/9FC5\9FC7; /  
                      LDA.W !Layer3Setting                      ;;9F60|9FC2+A000/9FC7\9FC9;
                      BEQ CODE_00A012                           ;;9F63|9FC5+A003/9FCA\9FCC;
                      DEC A                                     ;;9F65|9FC7+A005/9FCC\9FCE;
                      CLC                                       ;;9F66|9FC8+A006/9FCD\9FCF;
                      ADC.B !_0                                 ;;9F67|9FC9+A007/9FCE\9FD0;
                      TAX                                       ;;9F69|9FCB+A009/9FD0\9FD2;
                      LDA.W DATA_009F88,X                       ;;9F6A|9FCC+A00A/9FD1\9FD3;
                      BMI CODE_009FEA                           ;;9F6D|9FCF+A00D/9FD4\9FD6;
                      STA.W !Layer3TideSetting                  ;;9F6F|9FD1+A00F/9FD6\9FD8;
                      LSR A                                     ;;9F72|9FD4+A012/9FD9\9FDB;
                      PHP                                       ;;9F73|9FD5+A013/9FDA\9FDC;
                      JSR CODE_00A045                           ;;9F74|9FD6+A014/9FDB\9FDD;
                      LDA.B #$70                                ;;9F77|9FD9+A017/9FDE\9FE0;
                      PLP                                       ;;9F79|9FDB+A019/9FE0\9FE2;
                      BEQ +                                     ;;9F7A|9FDC+A01A/9FE1\9FE3;
                      LDA.B #$40                                ;;9F7C|9FDE+A01C/9FE3\9FE5;
                    + STA.B !Layer3YPos                         ;;9F7E|9FE0+A01E/9FE5\9FE7;
                      STZ.B !Layer3YPos+1                       ;;9F80|9FE2+A020/9FE7\9FE9;
                      JSL CODE_05BC72                           ;;9F82|9FE4+A022/9FE9\9FEB;
                      BRA CODE_00A01B                           ;;9F86|9FE8+A026/9FED\9FEF;
                                                                ;;                        ;
CODE_009FEA:          ASL A                                     ;;9F88|9FEA+A028/9FEF\9FF1;
                      BMI CODE_00A012                           ;;9F89|9FEB+A029/9FF0\9FF2;
                      BEQ CODE_00A007                           ;;9F8B|9FED+A02B/9FF2\9FF4;
                      LDA.W !ObjectTileset                      ;;9F8D|9FEF+A02D/9FF4\9FF6;
                      CMP.B #$01                                ;;9F90|9FF2+A030/9FF7\9FF9;
                      BEQ CODE_009FFA                           ;;9F92|9FF4+A032/9FF9\9FFB;
                      CMP.B #$03                                ;;9F94|9FF6+A034/9FFB\9FFD;
                      BNE CODE_00A01F                           ;;9F96|9FF8+A036/9FFD\9FFF;
CODE_009FFA:          REP #$20                                  ;;9F98|9FFA+A038/9FFF\A001; Accum (16 bit) 
                      LDA.B !Layer1XPos                         ;;9F9A|9FFC+A03A/A001\A003;
                      LSR A                                     ;;9F9C|9FFE+A03C/A003\A005;
                      STA.B !Layer3XPos                         ;;9F9D|9FFF+A03D/A004\A006;
                      SEP #$20                                  ;;9F9F|A001+A03F/A006\A008; Accum (8 bit) 
                      LDA.B #$C0                                ;;9FA1|A003+A041/A008\A00A;
                      BRA CODE_00A017                           ;;9FA3|A005+A043/A00A\A00C;
                                                                ;;                        ;
CODE_00A007:          LDX.B #$07                                ;;9FA5|A007+A045/A00C\A00E;
                    - LDA.W BigCrusherColors,X                  ;;9FA7|A009+A047/A00E\A010;
                      STA.W !MainPalette+$18,X                  ;;9FAA|A00C+A04A/A011\A013;
                      DEX                                       ;;9FAD|A00F+A04D/A014\A016;
                      BPL -                                     ;;9FAE|A010+A04E/A015\A017;
CODE_00A012:          INC.W !Layer3ScrollType                   ;;9FB0|A012+A050/A017\A019;
                      LDA.B #$D0                                ;;9FB3|A015+A053/A01A\A01C;
CODE_00A017:          STA.B !Layer3YPos                         ;;9FB5|A017+A055/A01C\A01E;
                      STZ.B !Layer3YPos+1                       ;;9FB7|A019+A057/A01E\A020;
CODE_00A01B:          LDA.B #$04                                ;;9FB9|A01B+A059/A020\A022;
                      TRB.B !ColorSettings                      ;;9FBB|A01D+A05B/A022\A024;
CODE_00A01F:          LDA.W !Layer3Setting                      ;;9FBD|A01F+A05D/A024\A026;
                      BEQ +                                     ;;9FC0|A022+A060/A027\A029;
                      DEC A                                     ;;9FC2|A024+A062/A029\A02B;
                      CLC                                       ;;9FC3|A025+A063/A02A\A02C;
                      ADC.B !_0                                 ;;9FC4|A026+A064/A02B\A02D;
                      STA.B !_1                                 ;;9FC6|A028+A066/A02D\A02F;
                      ASL A                                     ;;9FC8|A02A+A068/A02F\A031;
                      CLC                                       ;;9FC9|A02B+A069/A030\A032;
                      ADC.B !_1                                 ;;9FCA|A02C+A06A/A031\A033;
                      TAX                                       ;;9FCC|A02E+A06C/A033\A035;
                      LDA.L Layer3Ptr,X                         ;;9FCD|A02F+A06D/A034\A036;
                      STA.B !_0                                 ;;9FD1|A033+A071/A038\A03A;
                      LDA.L Layer3Ptr+1,X                       ;;9FD3|A035+A073/A03A\A03C;
                      STA.B !_1                                 ;;9FD7|A039+A077/A03E\A040;
                      LDA.L Layer3Ptr+2,X                       ;;9FD9|A03B+A079/A040\A042;
                      STA.B !_2                                 ;;9FDD|A03F+A07D/A044\A046;
                      JSR CODE_00871E                           ;;9FDF|A041+A07F/A046\A048;
                    + RTS                                       ;;9FE2|A044+A082/A049\A04B;
                                                                ;;                        ;
CODE_00A045:          REP #$30                                  ;;9FE3|A045+A083/A04A\A04C; Index (16 bit) Accum (16 bit) 
                      LDX.W #$0100                              ;;9FE5|A047+A085/A04C\A04E;
CODE_00A04A:          LDY.W #$0058                              ;;9FE8|A04A+A088/A04F\A051;
                      LDA.W #$0000                              ;;9FEB|A04D+A08B/A052\A054;
                    - STA.L !OWLayer1VramBuffer-$100,X          ;;9FEE|A050+A08E/A055\A057;
                      INX                                       ;;9FF2|A054+A092/A059\A05B;
                      INX                                       ;;9FF3|A055+A093/A05A\A05C;
                      DEY                                       ;;9FF4|A056+A094/A05B\A05D;
                      BNE -                                     ;;9FF5|A057+A095/A05C\A05E;
                      TXA                                       ;;9FF7|A059+A097/A05E\A060;
                      CLC                                       ;;9FF8|A05A+A098/A05F\A061;
                      ADC.W #$0100                              ;;9FF9|A05B+A099/A060\A062;
                      TAX                                       ;;9FFC|A05E+A09C/A063\A065;
                      CPX.W #$1B00                              ;;9FFD|A05F+A09D/A064\A066;
                      BCC CODE_00A04A                           ;;A000|A062+A0A0/A067\A069;
                      SEP #$30                                  ;;A002|A064+A0A2/A069\A06B; Index (8 bit) Accum (8 bit) 
                      LDA.B #$80                                ;;A004|A066+A0A4/A06B\A06D;
                      TSB.B !ScreenMode                         ;;A006|A068+A0A6/A06D\A06F;
                      RTS                                       ;;A008|A06A+A0A8/A06F\A071;
                                                                ;;                        ;
                                                                ;;                        ;
DATA_00A06B:          dw $0000,$FFEF,$FFEF,$FFEF                ;;A009|A06B+A0A9/A070\A072;
                      dw $00F0,$00F0,$00F0                      ;;A011|A073+A0B1/A078\A07A;
                                                                ;;                        ;
DATA_00A079:          dw $0000,$FFD8,$0080,$0128                ;;A017|A079+A0B7/A07E\A080;
                      dw $FFD8,$0080,$0128                      ;;A01F|A081+A0BF/A086\A088;
                                                                ;;                        ;
GameMode0C:           JSR TurnOffIO                             ;;A025|A087+A0C5/A08C\A08E;
                      LDA.W !EnteringStarWarp                   ;;A028|A08A+A0C8/A08F\A091;
                      BEQ +                                     ;;A02B|A08D+A0CB/A092\A094;
                      JSL CODE_04853B                           ;;A02D|A08F+A0CD/A094\A096;
                    + JSR Clear_1A_13D3                         ;;A031|A093+A0D1/A098\A09A;
                      LDA.W !OverworldOverride                  ;;A034|A096+A0D4/A09B\A09D;
                      BEQ +                                     ;;A037|A099+A0D7/A09E\A0A0;
                      LDA.B #con($B0,$B0,$B0,$90,$90)           ;;A039|A09B+A0D9/A0A0\A0A2;
                      STA.W !VariousPromptTimer                 ;;A03B|A09D+A0DB/A0A2\A0A4;
                      STZ.W !OWPlayerSubmap                     ;;A03E|A0A0+A0DE/A0A5\A0A7;
                      LDA.B #$F0                                ;;A041|A0A3+A0E1/A0A8\A0AA;
                      STA.W !MosaicSize                         ;;A043|A0A5+A0E3/A0AA\A0AC;
                      LDA.B #$10                                ;;A046|A0A8+A0E6/A0AD\A0AF;
                      STA.W !GameMode                           ;;A048|A0AA+A0E8/A0AF\A0B1;
                      JMP Mode04Finish                          ;;A04B|A0AD+A0EB/A0B2\A0B4;
                                                                ;;                        ;
                    + JSR CODE_0085FA                           ;;A04E|A0B0+A0EE/A0B5\A0B7;
                      JSR UploadMusicBank1                      ;;A051|A0B3+A0F1/A0B8\A0BA;
                      JSR SetUpScreen                           ;;A054|A0B6+A0F4/A0BB\A0BD;
                      STZ.W !MusicBackup                        ;;A057|A0B9+A0F7/A0BE\A0C0;
                      LDX.W !PlayerTurnLvl                      ;;A05A|A0BC+A0FA/A0C1\A0C3;
                      LDA.W !PlayerLives                        ;;A05D|A0BF+A0FD/A0C4\A0C6;
                   if ver_is_console(!_VER)           ;\   IF   ;;++++++++++++++++++++++++; J, U, E0, & E1
                      BPL +                                     ;;A060|A0C2     /A0C7\A0C9;
                      INC.W !OverworldPromptProcess             ;;A062|A0C4     /A0C9\A0CB;
                   endif                              ;/ ENDIF  ;;++++++++++++++++++++++++;
                    + STA.W !SavedPlayerLives,X                 ;;A065|A0C7+A100/A0CC\A0CE;
                      LDA.B !Powerup                            ;;A068|A0CA+A103/A0CF\A0D1;
                      STA.W !SavedPlayerPowerup,X               ;;A06A|A0CC+A105/A0D1\A0D3;
                      LDA.W !PlayerCoins                        ;;A06D|A0CF+A108/A0D4\A0D6;
                      STA.W !SavedPlayerCoins,X                 ;;A070|A0D2+A10B/A0D7\A0D9;
                      LDA.W !CarryYoshiThruLvls                 ;;A073|A0D5+A10E/A0DA\A0DC;
                      BEQ +                                     ;;A076|A0D8+A111/A0DD\A0DF;
                      LDA.W !YoshiColor                         ;;A078|A0DA+A113/A0DF\A0E1;
                    + STA.W !SavedPlayerYoshi,X                 ;;A07B|A0DD+A116/A0E2\A0E4;
                      LDA.W !PlayerItembox                      ;;A07E|A0E0+A119/A0E5\A0E7;
                      STA.W !SavedPlayerItembox,X               ;;A081|A0E3+A11C/A0E8\A0EA;
                      LDA.B #$03                                ;;A084|A0E6+A11F/A0EB\A0ED;
                      STA.B !ColorAddition                      ;;A086|A0E8+A121/A0ED\A0EF;
                      LDA.B #$30                                ;;A088|A0EA+A123/A0EF\A0F1;
                      LDX.B #$15                                ;;A08A|A0EC+A125/A0F1\A0F3;
                      LDY.W !ShowContinueEnd                    ;;A08C|A0EE+A127/A0F3\A0F5;
                      BEQ CODE_00A11B                           ;;A08F|A0F1+A12A/A0F6\A0F8;
                   if ver_is_console(!_VER)           ;\   IF   ;;++++++++++++++++++++++++; J, U, E0, & E1
                      JSR CODE_00A195                           ;;A091|A0F3     /A0F8\A0FA;
                      LDA.W !ExitsCompleted                     ;;A094|A0F6     /A0FB\A0FD;
                      BNE +                                     ;;A097|A0F9     /A0FE\A100;
                      JSR CODE_009C89                           ;;A099|A0FB     /A100\A102;
                      JMP CODE_0093F4                           ;;A09C|A0FE     /A103\A105;
                                                                ;;                        ;
                    + JSL CODE_04DAAD                           ;;A09F|A101     /A106\A108;
                      REP #$20                                  ;;A0A3|A105     /A10A\A10C; Accum (16 bit) 
                      LDA.W #$318C                              ;;A0A5|A107     /A10C\A10E;
                      STA.W !BackgroundColor                    ;;A0A8|A10A     /A10F\A111;
                      SEP #$20                                  ;;A0AB|A10D     /A112\A114; Accum (8 bit) 
                      LDA.B #$30                                ;;A0AD|A10F     /A114\A116;
                      STA.B !OBJCWWindow                        ;;A0AF|A111     /A116\A118;
                      LDA.B #$20                                ;;A0B1|A113     /A118\A11A;
                      STA.B !ColorAddition                      ;;A0B3|A115     /A11A\A11C;
                      LDA.B #$B3                                ;;A0B5|A117     /A11C\A11E;
                      LDX.B #$17                                ;;A0B7|A119     /A11E\A120;
                   else                               ;<  ELSE  ;;------------------------; SS
                      JSR CODE_009C89                           ;;         +A12C          ;
                      JMP CODE_0093F4                           ;;         +A12F          ;
                   endif                              ;/ ENDIF  ;;++++++++++++++++++++++++;
CODE_00A11B:          LDY.B #$02                                ;;A0B9|A11B+A132/A120\A122;
                      JSR ScreenSettings                        ;;A0BB|A11D+A134/A122\A124;
                      STX.W !HW_TMW                             ;;A0BE|A120+A137/A125\A127; Window Mask Designation for Main Screen
                      STY.W !HW_TSW                             ;;A0C1|A123+A13A/A128\A12A; Window Mask Designation for Sub Screen
                      JSL CODE_04DC09                           ;;A0C4|A126+A13D/A12B\A12D;
                      LDX.W !PlayerTurnLvl                      ;;A0C8|A12A+A141/A12F\A131;
                      LDA.W !OWPlayerSubmap,X                   ;;A0CB|A12D+A144/A132\A134;
                      ASL A                                     ;;A0CE|A130+A147/A135\A137;
                      TAX                                       ;;A0CF|A131+A148/A136\A138;
                      REP #$20                                  ;;A0D0|A132+A149/A137\A139; Accum (16 bit) 
                      LDA.W DATA_00A06B,X                       ;;A0D2|A134+A14B/A139\A13B;
                      STA.B !Layer1XPos                         ;;A0D5|A137+A14E/A13C\A13E;
                      STA.B !Layer2XPos                         ;;A0D7|A139+A150/A13E\A140;
                      LDA.W DATA_00A079,X                       ;;A0D9|A13B+A152/A140\A142;
                      STA.B !Layer1YPos                         ;;A0DC|A13E+A155/A143\A145;
                      STA.B !Layer2YPos                         ;;A0DE|A140+A157/A145\A147;
                      SEP #$20                                  ;;A0E0|A142+A159/A147\A149; Accum (8 bit) 
                      JSR UploadSpriteGFX                       ;;A0E2|A144+A15B/A149\A14B;
                      LDY.B #$14                                ;;A0E5|A147+A15E/A14C\A14E;
                      JSL CODE_00BA28                           ;;A0E7|A149+A160/A14E\A150;
                      JSR CODE_00AD25                           ;;A0EB|A14D+A164/A152\A154;
                      JSR CODE_00922F                           ;;A0EE|A150+A167/A155\A157;
                      LDA.B #$06                                ;;A0F1|A153+A16A/A158\A15A; \ Load overworld border 
                      STA.B !StripeImage                        ;;A0F3|A155+A16C/A15A\A15C;  | 
                      JSR LoadScrnImage                         ;;A0F5|A157+A16E/A15C\A15E; /  
                      JSL CODE_05DBF2                           ;;A0F8|A15A+A171/A15F\A161;
                      JSR LoadScrnImage                         ;;A0FC|A15E+A175/A163\A165;
                      JSL CODE_048D91                           ;;A0FF|A161+A178/A166\A168;
                      JSL CODE_04D6E9                           ;;A103|A165+A17C/A16A\A16C;
                      LDA.B #$F0                                ;;A107|A169+A180/A16E\A170;
                      STA.B !OAMAddress                         ;;A109|A16B+A182/A170\A172;
                      JSR CODE_008494                           ;;A10B|A16D+A184/A172\A174;
                      JSR LoadScrnImage                         ;;A10E|A170+A187/A175\A177;
                      STZ.W !OverworldProcess                   ;;A111|A173+A18A/A178\A17A;
                      JSR KeepModeActive                        ;;A114|A176+A18D/A17B\A17D;
                      LDA.B #$02                                ;;A117|A179+A190/A17E\A180;
                      STA.W !IRQNMICommand                      ;;A119|A17B+A192/A180\A182;
                      REP #$10                                  ;;A11C|A17E+A195/A183\A185; Index (16 bit) 
                      LDX.W #con($01BE,$01BE,$01BE,$01BE,$01DE) ;;A11E|A180+A197/A185\A187;
                      LDA.B #$FF                                ;;A121|A183+A19A/A188\A18A;
                    - STZ.W !WindowTable,X                      ;;A123|A185+A19C/A18A\A18C;
                      STA.W !WindowTable+1,X                    ;;A126|A188+A19F/A18D\A18F;
                      DEX                                       ;;A129|A18B+A1A2/A190\A192;
                      DEX                                       ;;A12A|A18C+A1A3/A191\A193;
                      BPL -                                     ;;A12B|A18D+A1A4/A192\A194;
                      JSR CODE_0092A0                           ;;A12D|A18F+A1A6/A194\A196;
                      JMP CODE_0093F4                           ;;A130|A192+A1A9/A197\A199;
                                                                ;;                        ;
CODE_00A195:          REP #$10                                  ;;A133|A195+A1AC/A19A\A19C; Index (16 bit) 
                      LDX.W #$008C                              ;;A135|A197+A1AE/A19C\A19E;
                    - LDA.W !SaveDataBuffer,X                   ;;A138|A19A+A1B1/A19F\A1A1;
                      STA.W !OWLevelTileSettings,X              ;;A13B|A19D+A1B4/A1A2\A1A4;
                      DEX                                       ;;A13E|A1A0+A1B7/A1A5\A1A7;
                      BPL -                                     ;;A13F|A1A1+A1B8/A1A6\A1A8;
                      SEP #$10                                  ;;A141|A1A3+A1BA/A1A8\A1AA; Index (8 bit) 
                      RTS                                       ;;A143|A1A5+A1BC/A1AA\A1AC;
                                                                ;;                        ;
Clear_1A_13D3:        REP #$10                                  ;;A144|A1A6+A1BD/A1AB\A1AD; 16 bit X,Y ; Index (16 bit) 
                      SEP #$20                                  ;;A146|A1A8+A1BF/A1AD\A1AF; 8 bit A ; Accum (8 bit) 
                      LDX.W #$00BD                              ;;A148|A1AA+A1C1/A1AF\A1B1; \  
                    - STZ.B !Layer1XPos,X                       ;;A14B|A1AD+A1C4/A1B2\A1B4;  |Clear RAM addresses $1A-$D7 
                      DEX                                       ;;A14D|A1AF+A1C6/A1B4\A1B6;  | 
                      BPL -                                     ;;A14E|A1B0+A1C7/A1B5\A1B7; /  
                      LDX.W #$07CE                              ;;A150|A1B2+A1C9/A1B7\A1B9; \  
                    - STZ.W !PauseTimer,X                       ;;A153|A1B5+A1CC/A1BA\A1BC;  |Clear RAM addresses $13D3-$1BA1 
                      DEX                                       ;;A156|A1B8+A1CF/A1BD\A1BF;  | 
                      BPL -                                     ;;A157|A1B9+A1D0/A1BE\A1C0; /  
                      SEP #$10                                  ;;A159|A1BB+A1D2/A1C0\A1C2; 16 bit X,Y ; Index (8 bit) 
                      RTS                                       ;;A15B|A1BD+A1D4/A1C2\A1C4; Return 
                                                                ;;                        ;
GameMode0E:           JSR SetUp0DA0GM4                          ;;A15C|A1BE+A1D5/A1C3\A1C5;
                      INC.B !EffFrame                           ;;A15F|A1C1+A1D8/A1C6\A1C8; Increase alternate frame counter 
                      JSL !OAMResetRoutine                      ;;A161|A1C3+A1DA/A1C8\A1CA;
                      JSL GameMode_0E_Prim                      ;;A165|A1C7+A1DE/A1CC\A1CE; (Bank 4.asm) 
                      JMP CODE_008494                           ;;A169|A1CB+A1E2/A1D0\A1D2;
                                                                ;;                        ;
                                                                ;;                        ;
GrndShakeDispYLo:     db $FE,$00,$02,$00                        ;;A16C|A1CE+A1E5/A1D3\A1D5;
                                                                ;;                        ;
GrndShakeDispYHi:     db $FF,$00,$00,$00                        ;;A170|A1D2+A1E9/A1D7\A1D9;
                                                                ;;                        ;
                      db $12,$22,$12,$02                        ;;A174|A1D6+A1ED/A1DB\A1DD;
                                                                ;;                        ;
GameMode14:           LDA.W !MessageBoxTrigger                  ;;A178|A1DA+A1F1/A1DF\A1E1;
                      BEQ +                                     ;;A17B|A1DD+A1F4/A1E2\A1E4;
                      JSL CODE_05B10C                           ;;A17D|A1DF+A1F6/A1E4\A1E6;
                      RTS                                       ;;A181|A1E3+A1FA/A1E8\A1EA;
                                                                ;;                        ;
                    + LDA.W !BonusGameActivate                  ;;A182|A1E4+A1FB/A1E9\A1EB;
                      BEQ +                                     ;;A185|A1E7+A1FE/A1EC\A1EE;
                      LDA.W !BonusFinishTimer                   ;;A187|A1E9+A200/A1EE\A1F0;
                      BEQ +                                     ;;A18A|A1EC+A203/A1F1\A1F3;
                      CMP.B #con($40,$40,$40,$48,$48)           ;;A18C|A1EE+A205/A1F3\A1F5;
                      BCS +                                     ;;A18E|A1F0+A207/A1F5\A1F7;
                      JSR NoButtons                             ;;A190|A1F2+A209/A1F7\A1F9;
                      CMP.B #con($1C,$1C,$1C,$24,$24)           ;;A193|A1F5+A20C/A1FA\A1FC;
                      BCS +                                     ;;A195|A1F7+A20E/A1FC\A1FE;
                      JSR SetMarioPeaceImg                      ;;A197|A1F9+A210/A1FE\A200;
                      LDA.B #$0D                                ;;A19A|A1FC+A213/A201\A203;
                      STA.B !PlayerAnimation                    ;;A19C|A1FE+A215/A203\A205;
                    + ORA.B !PlayerAnimation                    ;;A19E|A200+A217/A205\A207;
                      ORA.W !EndLevelTimer                      ;;A1A0|A202+A219/A207\A209;
                      BEQ +                                     ;;A1A3|A205+A21C/A20A\A20C;
                      LDA.B #$04                                ;;A1A5|A207+A21E/A20C\A20E;
                      TRB.B !byetudlrHold                       ;;A1A7|A209+A220/A20E\A210;
                      LDA.B #$40                                ;;A1A9|A20B+A222/A210\A212;
                      TRB.B !byetudlrFrame                      ;;A1AB|A20D+A224/A212\A214;
                      TRB.B !axlr0000Frame                      ;;A1AD|A20F+A226/A214\A216;
                    + LDA.W !PauseTimer                         ;;A1AF|A211+A228/A216\A218;
                      BEQ CODE_00A21B                           ;;A1B2|A214+A22B/A219\A21B;
                      DEC.W !PauseTimer                         ;;A1B4|A216+A22D/A21B\A21D;
                      BRA CODE_00A242                           ;;A1B7|A219+A230/A21E\A220;
                                                                ;;                        ;
CODE_00A21B:          LDA.B !byetudlrFrame                      ;;A1B9|A21B+A232/A220\A222;
                      AND.B #$10                                ;;A1BB|A21D+A234/A222\A224;
                      BEQ CODE_00A242                           ;;A1BD|A21F+A236/A224\A226;
                      LDA.W !EndLevelTimer                      ;;A1BF|A221+A238/A226\A228;
                      BNE CODE_00A242                           ;;A1C2|A224+A23B/A229\A22B;
                      LDA.B !PlayerAnimation                    ;;A1C4|A226+A23D/A22B\A22D;
                      CMP.B #$09                                ;;A1C6|A228+A23F/A22D\A22F;
                      BCS CODE_00A242                           ;;A1C8|A22A+A241/A22F\A231;
                      LDA.B #$3C                                ;;A1CA|A22C+A243/A231\A233;
                      STA.W !PauseTimer                         ;;A1CC|A22E+A245/A233\A235;
                      LDY.B #!SFX_UNPAUSE                       ;;A1CF|A231+A248/A236\A238;
                      LDA.W !PauseFlag                          ;;A1D1|A233+A24A/A238\A23A;
                      EOR.B #$01                                ;;A1D4|A236+A24D/A23B\A23D;
                      STA.W !PauseFlag                          ;;A1D6|A238+A24F/A23D\A23F;
                      BEQ +                                     ;;A1D9|A23B+A252/A240\A242;
                      LDY.B #!SFX_PAUSE                         ;;A1DB|A23D+A254/A242\A244;
                    + STY.W !SPCIO0                             ;;A1DD|A23F+A256/A244\A246;
CODE_00A242:          LDA.W !PauseFlag                          ;;A1E0|A242+A259/A247\A249;
                      BEQ CODE_00A28A                           ;;A1E3|A245+A25C/A24A\A24C;
                      BRA CODE_00A25B                           ;;A1E5|A247+A25E/A24C\A24E;
                                                                ;;                        ;
                      BIT.W !byetudlrP2Frame                    ;;A1E7|A249+A260/A24E\A250; \ Unreachable 
                      BVS ADDR_00A259                           ;;A1EA|A24C+A263/A251\A253;  | Debug: Slow motion 
                      LDA.W !byetudlrP2Hold                     ;;A1EC|A24E+A265/A253\A255;  | 
                      BPL CODE_00A25B                           ;;A1EF|A251+A268/A256\A258;  | 
                      LDA.B !TrueFrame                          ;;A1F1|A253+A26A/A258\A25A;  | 
                      AND.B #$0F                                ;;A1F3|A255+A26C/A25A\A25C;  | 
                      BNE CODE_00A25B                           ;;A1F5|A257+A26E/A25C\A25E;  | 
ADDR_00A259:          BRA CODE_00A28A                           ;;A1F7|A259+A270/A25E\A260; / 
                                                                ;;                        ;
CODE_00A25B:                                                    ;;                        ;            
                   if ver_is_console(!_VER)           ;\   IF   ;;++++++++++++++++++++++++; J, U, E0, & E1
                      LDA.B !byetudlrHold                       ;;A1F9|A25B     /A260\A262;
                      AND.B #$20                                ;;A1FB|A25D     /A262\A264;
                      BEQ Return00A289                          ;;A1FD|A25F     /A264\A266;
                      LDY.W !TranslevelNo                       ;;A1FF|A261     /A266\A268;
                      LDA.W !OWLevelTileSettings,Y              ;;A202|A264     /A269\A26B;
                      BPL Return00A289                          ;;A205|A267     /A26C\A26E;
                      LDA.W !OWLevelExitMode                    ;;A207|A269     /A26E\A270;
                      BEQ CODE_00A270                           ;;A20A|A26C     /A271\A273;
                      BPL Return00A289                          ;;A20C|A26E     /A273\A275;
CODE_00A270:          LDA.B #$80                                ;;A20E|A270     /A275\A277;
                      BRA CODE_00A27E                           ;;A210|A272     /A277\A279;
                                                                ;;                        ;
                      LDA.B #$01                                ;;A212|A274     /A279\A27B; \ Unreachable 
                      BIT.B !byetudlrHold                       ;;A214|A276     /A27B\A27D;  | Debug: Beat level with Start+Select 
                      BPL +                                     ;;A216|A278     /A27D\A27F;  | 
                      INC A                                     ;;A218|A27A     /A27F\A281; / 
                    + STA.W !MidwayFlag                         ;;A219|A27B     /A280\A282;
CODE_00A27E:          STA.W !OWLevelExitMode                    ;;A21C|A27E     /A283\A285;
                      INC.W !CreditsScreenNumber                ;;A21F|A281     /A286\A288;
                      LDA.B #$0B                                ;;A222|A284     /A289\A28B;
                      STA.W !GameMode                           ;;A224|A286     /A28B\A28D;
                   endif                              ;/ ENDIF  ;;++++++++++++++++++++++++;
Return00A289:         RTS                                       ;;A227|A289+A272/A28E\A290;
                                                                ;;                        ;
CODE_00A28A:          LDA.W !IRQNMICommand                      ;;A228|A28A+A273/A28F\A291;
                      BPL +                                     ;;A22B|A28D+A276/A292\A294;
                      JSR CODE_00987D                           ;;A22D|A28F+A278/A294\A296;
                      JMP CODE_00A2A9                           ;;A230|A292+A27B/A297\A299;
                                                                ;;                        ;
                    + JSL !OAMResetRoutine                      ;;A233|A295+A27E/A29A\A29C;
                      JSL CODE_00F6DB                           ;;A237|A299+A282/A29E\A2A0;
                      JSL CODE_05BC00                           ;;A23B|A29D+A286/A2A2\A2A4;
                      JSL CODE_0586F1                           ;;A23F|A2A1+A28A/A2A6\A2A8;
                      JSL CODE_05BB39                           ;;A243|A2A5+A28E/A2AA\A2AC;
CODE_00A2A9:          LDA.B !Layer1YPos                         ;;A247|A2A9+A292/A2AE\A2B0;
                      PHA                                       ;;A249|A2AB+A294/A2B0\A2B2;
                      LDA.B !Layer1YPos+1                       ;;A24A|A2AC+A295/A2B1\A2B3;
                      PHA                                       ;;A24C|A2AE+A297/A2B3\A2B5;
                      STZ.W !ScreenShakeYOffset                 ;;A24D|A2AF+A298/A2B4\A2B6; \ Reset amout to shift level 
                      STZ.W !ScreenShakeYOffset+1               ;;A250|A2B2+A29B/A2B7\A2B9; / 
                      LDA.W !ScreenShakeTimer                   ;;A253|A2B5+A29E/A2BA\A2BC; \ If shake ground timer is set 
                      BEQ +                                     ;;A256|A2B8+A2A1/A2BD\A2BF;  | 
                      DEC.W !ScreenShakeTimer                   ;;A258|A2BA+A2A3/A2BF\A2C1;  | Decrement timer 
                      AND.B #$03                                ;;A25B|A2BD+A2A6/A2C2\A2C4;  | 
                      TAY                                       ;;A25D|A2BF+A2A8/A2C4\A2C6;  | 
                      LDA.W GrndShakeDispYLo,Y                  ;;A25E|A2C0+A2A9/A2C5\A2C7;  | 
                      STA.W !ScreenShakeYOffset                 ;;A261|A2C3+A2AC/A2C8\A2CA;  | $1888-$1889 = Amount to shift level 
                      CLC                                       ;;A264|A2C6+A2AF/A2CB\A2CD;  | 
                      ADC.B !Layer1YPos                         ;;A265|A2C7+A2B0/A2CC\A2CE;  | 
                      STA.B !Layer1YPos                         ;;A267|A2C9+A2B2/A2CE\A2D0;  | Adjust screen boundry accordingly 
                      LDA.W GrndShakeDispYHi,Y                  ;;A269|A2CB+A2B4/A2D0\A2D2;  | 
                      STA.W !ScreenShakeYOffset+1               ;;A26C|A2CE+A2B7/A2D3\A2D5;  | 
                      ADC.B !Layer1YPos+1                       ;;A26F|A2D1+A2BA/A2D6\A2D8;  | 
                      STA.B !Layer1YPos+1                       ;;A271|A2D3+A2BC/A2D8\A2DA; / 
                    + JSR CODE_008E1A                           ;;A273|A2D5+A2BE/A2DA\A2DC;
                      JSL CODE_00E2BD                           ;;A276|A2D8+A2C1/A2DD\A2DF;
                      JSR CODE_00A2F3                           ;;A27A|A2DC+A2C5/A2E1\A2E3;
                      JSR CODE_00C47E                           ;;A27D|A2DF+A2C8/A2E4\A2E6;
                      JSL CODE_01808C                           ;;A280|A2E2+A2CB/A2E7\A2E9;
                      JSL CODE_028AB1                           ;;A284|A2E6+A2CF/A2EB\A2ED;
                      PLA                                       ;;A288|A2EA+A2D3/A2EF\A2F1;
                      STA.B !Layer1YPos+1                       ;;A289|A2EB+A2D4/A2F0\A2F2;
                      PLA                                       ;;A28B|A2ED+A2D6/A2F2\A2F4;
                      STA.B !Layer1YPos                         ;;A28C|A2EE+A2D7/A2F3\A2F5;
                      JMP CODE_008494                           ;;A28E|A2F0+A2D9/A2F5\A2F7;
                                                                ;;                        ;
CODE_00A2F3:          REP #$20                                  ;;A291|A2F3+A2DC/A2F8\A2FA; Accum (16 bit) 
                      LDA.B !PlayerXPosNext                     ;;A293|A2F5+A2DE/A2FA\A2FC;
                      STA.B !PlayerXPosNow                      ;;A295|A2F7+A2E0/A2FC\A2FE;
                      LDA.B !PlayerYPosNext                     ;;A297|A2F9+A2E2/A2FE\A300;
                      STA.B !PlayerYPosNow                      ;;A299|A2FB+A2E4/A300\A302;
                      SEP #$20                                  ;;A29B|A2FD+A2E6/A302\A304; Accum (8 bit) 
                      RTS                                       ;;A29D|A2FF+A2E8/A304\A306;
                                                                ;;                        ;
MarioGFXDMA:          REP #$20                                  ;;A29E|A300+A2E9/A305\A307; 16 bit A ; Accum (16 bit) 
                      LDX.B #$04                                ;;A2A0|A302+A2EB/A307\A309; We're using DMA channel 2 
                      LDY.W !PlayerGfxTileCount                 ;;A2A2|A304+A2ED/A309\A30B;
                      BEQ +                                     ;;A2A5|A307+A2F0/A30C\A30E;
                      LDY.B #$86                                ;;A2A7|A309+A2F2/A30E\A310; \ Set Address for CG-RAM Write to x86 
                      STY.W !HW_CGADD                           ;;A2A9|A30B+A2F4/A310\A312; / ; Address for CG-RAM Write
                      LDA.W #$2200                              ;;A2AC|A30E+A2F7/A313\A315;
                      STA.W !HW_DMAPARAM+$20                    ;;A2AF|A311+A2FA/A316\A318; Parameters for DMA Transfer
                      LDA.W !PlayerPalletePtr                   ;;A2B2|A314+A2FD/A319\A31B; \ Get location of palette from $0D82-$0D83 
                      STA.W !HW_DMAADDR+$20                     ;;A2B5|A317+A300/A31C\A31E; / ; A Address (Low Byte)
                      LDY.B #$00                                ;;A2B8|A31A+A303/A31F\A321; \ Palette is stored in bank x00 
                      STY.W !HW_DMAADDR+$22                     ;;A2BA|A31C+A305/A321\A323; / ; A Address Bank
                      LDA.W #$0014                              ;;A2BD|A31F+A308/A324\A326; \ x14 bytes will be transferred 
                      STA.W !HW_DMACNT+$20                      ;;A2C0|A322+A30B/A327\A329; / ; Number Bytes to Transfer (Low Byte) (DMA)
                      STX.W !HW_MDMAEN                          ;;A2C3|A325+A30E/A32A\A32C; Transfer the colors ; Regular DMA Channel Enable
                    + LDY.B #$80                                ;;A2C6|A328+A311/A32D\A32F; \ Set VRAM Address Increment Value to x80 
                      STY.W !HW_VMAINC                          ;;A2C8|A32A+A313/A32F\A331; / ; VRAM Address Increment Value
                      LDA.W #$1801                              ;;A2CB|A32D+A316/A332\A334;
                      STA.W !HW_DMAPARAM+$20                    ;;A2CE|A330+A319/A335\A337; Parameters for DMA Transfer
                      LDA.W #$67F0                              ;;A2D1|A333+A31C/A338\A33A;
                      STA.W !HW_VMADD                           ;;A2D4|A336+A31F/A33B\A33D; Address for VRAM Read/Write (Low Byte)
                      LDA.W !DynGfxTile7FPtr                    ;;A2D7|A339+A322/A33E\A340;
                      STA.W !HW_DMAADDR+$20                     ;;A2DA|A33C+A325/A341\A343; A Address (Low Byte)
                      LDY.B #$7E                                ;;A2DD|A33F+A328/A344\A346; \ Set bank to x7E 
                      STY.W !HW_DMAADDR+$22                     ;;A2DF|A341+A32A/A346\A348; / ; A Address Bank
                      LDA.W #$0020                              ;;A2E2|A344+A32D/A349\A34B; \ x20 bytes will be transferred 
                      STA.W !HW_DMACNT+$20                      ;;A2E5|A347+A330/A34C\A34E; / ; Number Bytes to Transfer (Low Byte) (DMA)
                      STX.W !HW_MDMAEN                          ;;A2E8|A34A+A333/A34F\A351; Transfer ; Regular DMA Channel Enable
                      LDA.W #$6000                              ;;A2EB|A34D+A336/A352\A354; \ Set Address for VRAM Read/Write to x6000 
                      STA.W !HW_VMADD                           ;;A2EE|A350+A339/A355\A357; / ; Address for VRAM Read/Write (Low Byte)
                      LDX.B #$00                                ;;A2F1|A353+A33C/A358\A35A;
                    - LDA.W !DynGfxTilePtr,X                    ;;A2F3|A355+A33E/A35A\A35C; \ Get address of graphics to copy 
                      STA.W !HW_DMAADDR+$20                     ;;A2F6|A358+A341/A35D\A35F; / ; A Address (Low Byte)
                      LDA.W #$0040                              ;;A2F9|A35B+A344/A360\A362; \ x40 bytes will be transferred 
                      STA.W !HW_DMACNT+$20                      ;;A2FC|A35E+A347/A363\A365; / ; Number Bytes to Transfer (Low Byte) (DMA)
                      LDY.B #$04                                ;;A2FF|A361+A34A/A366\A368; \ Transfer 
                      STY.W !HW_MDMAEN                          ;;A301|A363+A34C/A368\A36A; / ; Regular DMA Channel Enable
                      INX                                       ;;A304|A366+A34F/A36B\A36D; \ Move to next address 
                      INX                                       ;;A305|A367+A350/A36C\A36E; /  
                      CPX.W !PlayerGfxTileCount                 ;;A306|A368+A351/A36D\A36F; \ Repeat last segment while X<$0D84 
                      BCC -                                     ;;A309|A36B+A354/A370\A372; /  
                      LDA.W #$6100                              ;;A30B|A36D+A356/A372\A374; \ Set Address for VRAM Read/Write to x6100 
                      STA.W !HW_VMADD                           ;;A30E|A370+A359/A375\A377; / ; Address for VRAM Read/Write (Low Byte)
                      LDX.B #$00                                ;;A311|A373+A35C/A378\A37A;
                    - LDA.W !DynGfxTilePtr+$0A,X                ;;A313|A375+A35E/A37A\A37C; \ Get address of graphics to copy 
                      STA.W !HW_DMAADDR+$20                     ;;A316|A378+A361/A37D\A37F; / ; A Address (Low Byte)
                      LDA.W #$0040                              ;;A319|A37B+A364/A380\A382; \ x40 bytes will be transferred 
                      STA.W !HW_DMACNT+$20                      ;;A31C|A37E+A367/A383\A385; / ; Number Bytes to Transfer (Low Byte) (DMA)
                      LDY.B #$04                                ;;A31F|A381+A36A/A386\A388; \ Transfer 
                      STY.W !HW_MDMAEN                          ;;A321|A383+A36C/A388\A38A; / ; Regular DMA Channel Enable
                      INX                                       ;;A324|A386+A36F/A38B\A38D; \ Move to next address 
                      INX                                       ;;A325|A387+A370/A38C\A38E; /  
                      CPX.W !PlayerGfxTileCount                 ;;A326|A388+A371/A38D\A38F; \ Repeat last segment while X<$0D84 
                      BCC -                                     ;;A329|A38B+A374/A390\A392; /  
                      SEP #$20                                  ;;A32B|A38D+A376/A392\A394; 8 bit A ; Accum (8 bit) 
                      RTS                                       ;;A32D|A38F+A378/A394\A396; Return 
                                                                ;;                        ;
CODE_00A390:          REP #$20                                  ;;A32E|A390+A379/A395\A397; Accum (16 bit) 
                      LDY.B #$80                                ;;A330|A392+A37B/A397\A399;
                      STY.W !HW_VMAINC                          ;;A332|A394+A37D/A399\A39B; VRAM Address Increment Value
                      LDA.W #$1801                              ;;A335|A397+A380/A39C\A39E;
                      STA.W !HW_DMAPARAM+$20                    ;;A338|A39A+A383/A39F\A3A1; Parameters for DMA Transfer
                      LDY.B #$7E                                ;;A33B|A39D+A386/A3A2\A3A4;
                      STY.W !HW_DMAADDR+$22                     ;;A33D|A39F+A388/A3A4\A3A6; A Address Bank
                      LDX.B #$04                                ;;A340|A3A2+A38B/A3A7\A3A9;
                      LDA.W !Gfx33DestAddrC                     ;;A342|A3A4+A38D/A3A9\A3AB;
                      BEQ +                                     ;;A345|A3A7+A390/A3AC\A3AE;
                      STA.W !HW_VMADD                           ;;A347|A3A9+A392/A3AE\A3B0; Address for VRAM Read/Write (Low Byte)
                      LDA.W !Gfx33SrcAddrC                      ;;A34A|A3AC+A395/A3B1\A3B3;
                      STA.W !HW_DMAADDR+$20                     ;;A34D|A3AF+A398/A3B4\A3B6; A Address (Low Byte)
                      LDA.W #$0080                              ;;A350|A3B2+A39B/A3B7\A3B9;
                      STA.W !HW_DMACNT+$20                      ;;A353|A3B5+A39E/A3BA\A3BC; Number Bytes to Transfer (Low Byte) (DMA)
                      STX.W !HW_MDMAEN                          ;;A356|A3B8+A3A1/A3BD\A3BF; Regular DMA Channel Enable
                    + LDA.W !Gfx33DestAddrB                     ;;A359|A3BB+A3A4/A3C0\A3C2;
                      BEQ +                                     ;;A35C|A3BE+A3A7/A3C3\A3C5;
                      STA.W !HW_VMADD                           ;;A35E|A3C0+A3A9/A3C5\A3C7; Address for VRAM Read/Write (Low Byte)
                      LDA.W !Gfx33SrcAddrB                      ;;A361|A3C3+A3AC/A3C8\A3CA;
                      STA.W !HW_DMAADDR+$20                     ;;A364|A3C6+A3AF/A3CB\A3CD; A Address (Low Byte)
                      LDA.W #$0080                              ;;A367|A3C9+A3B2/A3CE\A3D0;
                      STA.W !HW_DMACNT+$20                      ;;A36A|A3CC+A3B5/A3D1\A3D3; Number Bytes to Transfer (Low Byte) (DMA)
                      STX.W !HW_MDMAEN                          ;;A36D|A3CF+A3B8/A3D4\A3D6; Regular DMA Channel Enable
                    + LDA.W !Gfx33DestAddrA                     ;;A370|A3D2+A3BB/A3D7\A3D9;
                      BEQ CODE_00A418                           ;;A373|A3D5+A3BE/A3DA\A3DC;
                      STA.W !HW_VMADD                           ;;A375|A3D7+A3C0/A3DC\A3DE; Address for VRAM Read/Write (Low Byte)
                      CMP.W #$0800                              ;;A378|A3DA+A3C3/A3DF\A3E1;
                      BEQ CODE_00A3F0                           ;;A37B|A3DD+A3C6/A3E2\A3E4;
                      LDA.W !Gfx33SrcAddrA                      ;;A37D|A3DF+A3C8/A3E4\A3E6;
                      STA.W !HW_DMAADDR+$20                     ;;A380|A3E2+A3CB/A3E7\A3E9; A Address (Low Byte)
                      LDA.W #$0080                              ;;A383|A3E5+A3CE/A3EA\A3EC;
                      STA.W !HW_DMACNT+$20                      ;;A386|A3E8+A3D1/A3ED\A3EF; Number Bytes to Transfer (Low Byte) (DMA)
                      STX.W !HW_MDMAEN                          ;;A389|A3EB+A3D4/A3F0\A3F2; Regular DMA Channel Enable
                      BRA CODE_00A418                           ;;A38C|A3EE+A3D7/A3F3\A3F5;
                                                                ;;                        ;
CODE_00A3F0:          LDA.W !Gfx33SrcAddrA                      ;;A38E|A3F0+A3D9/A3F5\A3F7;
                      STA.W !HW_DMAADDR+$20                     ;;A391|A3F3+A3DC/A3F8\A3FA; A Address (Low Byte)
                      LDA.W #$0040                              ;;A394|A3F6+A3DF/A3FB\A3FD;
                      STA.W !HW_DMACNT+$20                      ;;A397|A3F9+A3E2/A3FE\A400; Number Bytes to Transfer (Low Byte) (DMA)
                      STX.W !HW_MDMAEN                          ;;A39A|A3FC+A3E5/A401\A403; Regular DMA Channel Enable
                      LDA.W #$0900                              ;;A39D|A3FF+A3E8/A404\A406;
                      STA.W !HW_VMADD                           ;;A3A0|A402+A3EB/A407\A409; Address for VRAM Read/Write (Low Byte)
                      LDA.W !Gfx33SrcAddrA                      ;;A3A3|A405+A3EE/A40A\A40C;
                      CLC                                       ;;A3A6|A408+A3F1/A40D\A40F;
                      ADC.W #$0040                              ;;A3A7|A409+A3F2/A40E\A410;
                      STA.W !HW_DMAADDR+$20                     ;;A3AA|A40C+A3F5/A411\A413; A Address (Low Byte)
                      LDA.W #$0040                              ;;A3AD|A40F+A3F8/A414\A416;
                      STA.W !HW_DMACNT+$20                      ;;A3B0|A412+A3FB/A417\A419; Number Bytes to Transfer (Low Byte) (DMA)
                      STX.W !HW_MDMAEN                          ;;A3B3|A415+A3FE/A41A\A41C; Regular DMA Channel Enable
CODE_00A418:          SEP #$20                                  ;;A3B6|A418+A401/A41D\A41F; Accum (8 bit) 
                      LDA.B #$64                                ;;A3B8|A41A+A403/A41F\A421;
CODE_00A41C:          STZ.B !_0                                 ;;A3BA|A41C+A405/A421\A423;
CODE_00A41E:          STA.W !HW_CGADD                           ;;A3BC|A41E+A407/A423\A425; Address for CG-RAM Write
                      LDA.B !EffFrame                           ;;A3BF|A421+A40A/A426\A428;
                      AND.B #$1C                                ;;A3C1|A423+A40C/A428\A42A;
                      LSR A                                     ;;A3C3|A425+A40E/A42A\A42C;
                      ADC.B !_0                                 ;;A3C4|A426+A40F/A42B\A42D;
                      TAY                                       ;;A3C6|A428+A411/A42D\A42F;
                      LDA.W FlashingColors,Y                    ;;A3C7|A429+A412/A42E\A430;
                      STA.W !HW_CGDATA                          ;;A3CA|A42C+A415/A431\A433; Data for CG-RAM Write
                      LDA.W FlashingColors+1,Y                  ;;A3CD|A42F+A418/A434\A436;
                      STA.W !HW_CGDATA                          ;;A3D0|A432+A41B/A437\A439; Data for CG-RAM Write
                      RTS                                       ;;A3D3|A435+A41E/A43A\A43C;
                                                                ;;                        ;
CODE_00A436:          LDA.W !MarioStartFlag                     ;;A3D4|A436+A41F/A43B\A43D;
                      BEQ +                                     ;;A3D7|A439+A422/A43E\A440;
                      STZ.W !MarioStartFlag                     ;;A3D9|A43B+A424/A440\A442;
                      REP #$20                                  ;;A3DC|A43E+A427/A443\A445; 16 bit A ; Accum (16 bit) 
                      LDY.B #$80                                ;;A3DE|A440+A429/A445\A447;
                      STY.W !HW_VMAINC                          ;;A3E0|A442+A42B/A447\A449; VRAM Address Increment Value
                      LDA.W #$64A0                              ;;A3E3|A445+A42E/A44A\A44C;
                      STA.W !HW_VMADD                           ;;A3E6|A448+A431/A44D\A44F; Address for VRAM Read/Write (Low Byte)
                      LDA.W #$1801                              ;;A3E9|A44B+A434/A450\A452;
                      STA.W !HW_DMAPARAM+$20                    ;;A3EC|A44E+A437/A453\A455; Parameters for DMA Transfer
                      LDA.W #$0BF6                              ;;A3EF|A451+A43A/A456\A458;
                      STA.W !HW_DMAADDR+$20                     ;;A3F2|A454+A43D/A459\A45B; A Address (Low Byte)
                      LDY.B #$00                                ;;A3F5|A457+A440/A45C\A45E;
                      STY.W !HW_DMAADDR+$22                     ;;A3F7|A459+A442/A45E\A460; A Address Bank
                      LDA.W #$00C0                              ;;A3FA|A45C+A445/A461\A463;
                      STA.W !HW_DMACNT+$20                      ;;A3FD|A45F+A448/A464\A466; Number Bytes to Transfer (Low Byte) (DMA)
                      LDX.B #$04                                ;;A400|A462+A44B/A467\A469;
                      STX.W !HW_MDMAEN                          ;;A402|A464+A44D/A469\A46B; Regular DMA Channel Enable
                      LDA.W #$65A0                              ;;A405|A467+A450/A46C\A46E;
                      STA.W !HW_VMADD                           ;;A408|A46A+A453/A46F\A471; Address for VRAM Read/Write (Low Byte)
                      LDA.W #$0CB6                              ;;A40B|A46D+A456/A472\A474;
                      STA.W !HW_DMAADDR+$20                     ;;A40E|A470+A459/A475\A477; A Address (Low Byte)
                      LDA.W #$00C0                              ;;A411|A473+A45C/A478\A47A;
                      STA.W !HW_DMACNT+$20                      ;;A414|A476+A45F/A47B\A47D; Number Bytes to Transfer (Low Byte) (DMA)
                      STX.W !HW_MDMAEN                          ;;A417|A479+A462/A47E\A480; Regular DMA Channel Enable
                      SEP #$20                                  ;;A41A|A47C+A465/A481\A483; 8 bit A ; Accum (8 bit) 
                    + RTS                                       ;;A41C|A47E+A467/A483\A485;
                                                                ;;                        ;
                                                                ;;                        ;
DATA_00A47F:          dl !DynPaletteTable&$FFFF                 ;;A41D|A47F+A468/A484\A486;
                      dl !CopyPalette&$FFFF                     ;;A420|A482+A46B/A487\A489;
                      dl !MainPalette&$FFFF                     ;;A423|A485+A46E/A48A\A48C;
                                                                ;;                        ;
CODE_00A488:          LDY.W !PaletteIndexTable                  ;;A426|A488+A471/A48D\A48F;
                      LDX.W DATA_00A47F+2,Y                     ;;A429|A48B+A474/A490\A492;
                      STX.B !_2                                 ;;A42C|A48E+A477/A493\A495;
                      STZ.B !_1                                 ;;A42E|A490+A479/A495\A497;
                      STZ.B !_0                                 ;;A430|A492+A47B/A497\A499;
                      STZ.B !_4                                 ;;A432|A494+A47D/A499\A49B;
                      LDA.W DATA_00A47F+1,Y                     ;;A434|A496+A47F/A49B\A49D;
                      XBA                                       ;;A437|A499+A482/A49E\A4A0;
                      LDA.W DATA_00A47F,Y                       ;;A438|A49A+A483/A49F\A4A1;
                      REP #$10                                  ;;A43B|A49D+A486/A4A2\A4A4; Index (16 bit) 
                      TAY                                       ;;A43D|A49F+A488/A4A4\A4A6;
CODE_00A4A0:          LDA.B [!_0],Y                             ;;A43E|A4A0+A489/A4A5\A4A7;
                      BEQ CODE_00A4CF                           ;;A440|A4A2+A48B/A4A7\A4A9;
                      STX.W !HW_DMAADDR+$22                     ;;A442|A4A4+A48D/A4A9\A4AB; A Address Bank
                      STA.W !HW_DMACNT+$20                      ;;A445|A4A7+A490/A4AC\A4AE; Number Bytes to Transfer (Low Byte) (DMA)
                      STA.B !_3                                 ;;A448|A4AA+A493/A4AF\A4B1;
                      STZ.W !HW_DMACNT+$21                      ;;A44A|A4AC+A495/A4B1\A4B3; Number Bytes to Transfer (High Byte) (DMA)
                      INY                                       ;;A44D|A4AF+A498/A4B4\A4B6;
                      LDA.B [!_0],Y                             ;;A44E|A4B0+A499/A4B5\A4B7;
                      STA.W !HW_CGADD                           ;;A450|A4B2+A49B/A4B7\A4B9; Address for CG-RAM Write
                      REP #$20                                  ;;A453|A4B5+A49E/A4BA\A4BC; Accum (16 bit) 
                      LDA.W #$2200                              ;;A455|A4B7+A4A0/A4BC\A4BE;
                      STA.W !HW_DMAPARAM+$20                    ;;A458|A4BA+A4A3/A4BF\A4C1; Parameters for DMA Transfer
                      INY                                       ;;A45B|A4BD+A4A6/A4C2\A4C4;
                      TYA                                       ;;A45C|A4BE+A4A7/A4C3\A4C5;
                      STA.W !HW_DMAADDR+$20                     ;;A45D|A4BF+A4A8/A4C4\A4C6; A Address (Low Byte)
                      CLC                                       ;;A460|A4C2+A4AB/A4C7\A4C9;
                      ADC.B !_3                                 ;;A461|A4C3+A4AC/A4C8\A4CA;
                      TAY                                       ;;A463|A4C5+A4AE/A4CA\A4CC;
                      SEP #$20                                  ;;A464|A4C6+A4AF/A4CB\A4CD; Accum (8 bit) 
                      LDA.B #$04                                ;;A466|A4C8+A4B1/A4CD\A4CF;
                      STA.W !HW_MDMAEN                          ;;A468|A4CA+A4B3/A4CF\A4D1; Regular DMA Channel Enable
                      BRA CODE_00A4A0                           ;;A46B|A4CD+A4B6/A4D2\A4D4;
                                                                ;;                        ;
CODE_00A4CF:          SEP #$10                                  ;;A46D|A4CF+A4B8/A4D4\A4D6; Index (8 bit) 
                      JSR CODE_00AE47                           ;;A46F|A4D1+A4BA/A4D6\A4D8;
                      LDA.W !PaletteIndexTable                  ;;A472|A4D4+A4BD/A4D9\A4DB;
                      BNE +                                     ;;A475|A4D7+A4C0/A4DC\A4DE;
                      STZ.W !DynPaletteIndex                    ;;A477|A4D9+A4C2/A4DE\A4E0;
                      STZ.W !DynPaletteTable                    ;;A47A|A4DC+A4C5/A4E1\A4E3;
                    + STZ.W !PaletteIndexTable                  ;;A47D|A4DF+A4C8/A4E4\A4E6;
                    - RTS                                       ;;A480|A4E2+A4CB/A4E7\A4E9;
                                                                ;;                        ;
CODE_00A4E3:          REP #$10                                  ;;A481|A4E3+A4CC/A4E8\A4EA; Index (16 bit) 
                      LDA.B #$80                                ;;A483|A4E5+A4CE/A4EA\A4EC;
                      STA.W !HW_VMAINC                          ;;A485|A4E7+A4D0/A4EC\A4EE; VRAM Address Increment Value
                      LDY.W #$0750                              ;;A488|A4EA+A4D3/A4EF\A4F1;
                      STY.W !HW_VMADD                           ;;A48B|A4ED+A4D6/A4F2\A4F4; Address for VRAM Read/Write (Low Byte)
                      LDY.W #$1801                              ;;A48E|A4F0+A4D9/A4F5\A4F7;
                      STY.W !HW_DMAPARAM+$20                    ;;A491|A4F3+A4DC/A4F8\A4FA; Parameters for DMA Transfer
                      LDY.W #!GfxDecompOWAni                    ;;A494|A4F6+A4DF/A4FB\A4FD;
                      STY.W !HW_DMAADDR+$20                     ;;A497|A4F9+A4E2/A4FE\A500; A Address (Low Byte)
                      STZ.W !HW_DMAADDR+$22                     ;;A49A|A4FC+A4E5/A501\A503; A Address Bank
                      LDY.W #$0160                              ;;A49D|A4FF+A4E8/A504\A506;
                      STY.W !HW_DMACNT+$20                      ;;A4A0|A502+A4EB/A507\A509; Number Bytes to Transfer (Low Byte) (DMA)
                      LDA.B #$04                                ;;A4A3|A505+A4EE/A50A\A50C;
                      STA.W !HW_MDMAEN                          ;;A4A5|A507+A4F0/A50C\A50E; Regular DMA Channel Enable
                      SEP #$10                                  ;;A4A8|A50A+A4F3/A50F\A511; Index (8 bit) 
                      LDA.W !OverworldProcess                   ;;A4AA|A50C+A4F5/A511\A513;
                      CMP.B #$0A                                ;;A4AD|A50F+A4F8/A514\A516;
                      BEQ -                                     ;;A4AF|A511+A4FA/A516\A518;
                      LDA.B #$6D                                ;;A4B1|A513+A4FC/A518\A51A;
                      JSR CODE_00A41C                           ;;A4B3|A515+A4FE/A51A\A51C;
                      LDA.B #$10                                ;;A4B6|A518+A501/A51D\A51F;
                      STA.B !_0                                 ;;A4B8|A51A+A503/A51F\A521;
                      LDA.B #$7D                                ;;A4BA|A51C+A505/A521\A523;
                      JMP CODE_00A41E                           ;;A4BC|A51E+A507/A523\A525;
                                                                ;;                        ;
                                                                ;;                        ;
DATA_00A521:          db $00,$04,$08,$0C                        ;;A4BF|A521+A50A/A526\A528;
DATA_00A525:          db $00,$08,$10,$18                        ;;A4C3|A525+A50E/A52A\A52C;
                                                                ;;                        ;
CODE_00A529:          LDA.B #$80                                ;;A4C7|A529+A512/A52E\A530;
                      STA.W !HW_VMAINC                          ;;A4C9|A52B+A514/A530\A532; VRAM Address Increment Value
                      STZ.W !HW_VMADD                           ;;A4CC|A52E+A517/A533\A535; Address for VRAM Read/Write (Low Byte)
                      LDA.B #$30                                ;;A4CF|A531+A51A/A536\A538;
                      CLC                                       ;;A4D1|A533+A51C/A538\A53A;
                      ADC.W DATA_00A521,Y                       ;;A4D2|A534+A51D/A539\A53B;
                      STA.W !HW_VMADD+1                         ;;A4D5|A537+A520/A53C\A53E; Address for VRAM Read/Write (High Byte)
                      LDX.B #$06                                ;;A4D8|A53A+A523/A53F\A541;
                    - LDA.W DATA_00A586,X                       ;;A4DA|A53C+A525/A541\A543;
                      STA.W !HW_DMAPARAM+$10,X                  ;;A4DD|A53F+A528/A544\A546;
                      DEX                                       ;;A4E0|A542+A52B/A547\A549;
                      BPL -                                     ;;A4E1|A543+A52C/A548\A54A;
                      LDA.W !PlayerTurnOW                       ;;A4E3|A545+A52E/A54A\A54C;
                      LSR A                                     ;;A4E6|A548+A531/A54D\A54F;
                      LSR A                                     ;;A4E7|A549+A532/A54E\A550;
                      TAX                                       ;;A4E8|A54A+A533/A54F\A551;
                      LDA.W !OWPlayerSubmap,X                   ;;A4E9|A54B+A534/A550\A552;
                      BEQ +                                     ;;A4EC|A54E+A537/A553\A555;
                      LDA.B #$60                                ;;A4EE|A550+A539/A555\A557;
                      STA.W !HW_DMAADDR+$11                     ;;A4F0|A552+A53B/A557\A559; A Address (High Byte)
                    + LDA.W !HW_DMAADDR+$11                     ;;A4F3|A555+A53E/A55A\A55C; A Address (High Byte)
                      CLC                                       ;;A4F6|A558+A541/A55D\A55F;
                      ADC.W DATA_00A525,Y                       ;;A4F7|A559+A542/A55E\A560;
                      STA.W !HW_DMAADDR+$11                     ;;A4FA|A55C+A545/A561\A563; A Address (High Byte)
                      LDA.B #$02                                ;;A4FD|A55F+A548/A564\A566;
                      STA.W !HW_MDMAEN                          ;;A4FF|A561+A54A/A566\A568; Regular DMA Channel Enable
                      LDA.B #$80                                ;;A502|A564+A54D/A569\A56B;
                      STA.W !HW_VMAINC                          ;;A504|A566+A54F/A56B\A56D; VRAM Address Increment Value
                      STZ.W !HW_VMADD                           ;;A507|A569+A552/A56E\A570; Address for VRAM Read/Write (Low Byte)
                      LDA.B #$20                                ;;A50A|A56C+A555/A571\A573;
                      CLC                                       ;;A50C|A56E+A557/A573\A575;
                      ADC.W DATA_00A521,Y                       ;;A50D|A56F+A558/A574\A576;
                      STA.W !HW_VMADD+1                         ;;A510|A572+A55B/A577\A579; Address for VRAM Read/Write (High Byte)
                      LDX.B #$06                                ;;A513|A575+A55E/A57A\A57C;
                    - LDA.W DATA_00A58D,X                       ;;A515|A577+A560/A57C\A57E;
                      STA.W !HW_DMAPARAM+$10,X                  ;;A518|A57A+A563/A57F\A581;
                      DEX                                       ;;A51B|A57D+A566/A582\A584;
                      BPL -                                     ;;A51C|A57E+A567/A583\A585;
                      LDA.B #$02                                ;;A51E|A580+A569/A585\A587;
                      STA.W !HW_MDMAEN                          ;;A520|A582+A56B/A587\A589; Regular DMA Channel Enable
                      RTS                                       ;;A523|A585+A56E/A58A\A58C;
                                                                ;;                        ;
                                                                ;;                        ;
DATA_00A586:          db $01,$18                                ;;A524|A586+A56F/A58B\A58D;
                      dl !OWLayer2Tilemap                       ;;A526|A588+A571/A58D\A58F;
                      dw $0800                                  ;;A529|A58B+A574/A590\A592;
                                                                ;;                        ;
DATA_00A58D:          db $01,$18                                ;;A52B|A58D+A576/A592\A594;
                      dl !OWLayer1VramBuffer                    ;;A52D|A58F+A578/A594\A596;
                      dw $0800                                  ;;A530|A592+A57B/A597\A599;
                                                                ;;                        ;
CODE_00A594:          PHB                                       ;;A532|A594+A57D/A599\A59B; Wrapper 
                      PHK                                       ;;A533|A595+A57E/A59A\A59C;
                      PLB                                       ;;A534|A596+A57F/A59B\A59D;
                      JSR CODE_00AD25                           ;;A535|A597+A580/A59C\A59E;
                      PLB                                       ;;A538|A59A+A583/A59F\A5A1;
                      RTL                                       ;;A539|A59B+A584/A5A0\A5A2;
                                                                ;;                        ;
GameMode12:           JSR CODE_0085FA                           ;;A53A|A59C+A585/A5A1\A5A3; gah, stupid keyboard >_< 
                      JSR NoButtons                             ;;A53D|A59F+A588/A5A4\A5A6;
                      STZ.W !UploadMarioStart                   ;;A540|A5A2+A58B/A5A7\A5A9;
                      JSR SetUpScreen                           ;;A543|A5A5+A58E/A5AA\A5AC;
                      JSR GM04DoDMA                             ;;A546|A5A8+A591/A5AD\A5AF;
                      JSL CODE_05809E                           ;;A549|A5AB+A594/A5B0\A5B2; ->here 
                      LDA.W !IRQNMICommand                      ;;A54D|A5AF+A598/A5B4\A5B6;
                      BPL CODE_00A5B9                           ;;A550|A5B2+A59B/A5B7\A5B9;
                      JSR CODE_0097BC                           ;;A552|A5B4+A59D/A5B9\A5BB; Working on this routine 
                      BRA +                                     ;;A555|A5B7+A5A0/A5BC\A5BE;
                                                                ;;                        ;
CODE_00A5B9:          JSR UploadSpriteGFX                       ;;A557|A5B9+A5A2/A5BE\A5C0;
                      JSR LoadPalette                           ;;A55A|A5BC+A5A5/A5C1\A5C3;
                      JSL CODE_05BE8A                           ;;A55D|A5BF+A5A8/A5C4\A5C6;
                      JSR CODE_009FB8                           ;;A561|A5C3+A5AC/A5C8\A5CA;
                      JSR CODE_00A5F9                           ;;A564|A5C6+A5AF/A5CB\A5CD;
                      JSR CODE_009260                           ;;A567|A5C9+A5B2/A5CE\A5D0;
                      JSR CODE_009860                           ;;A56A|A5CC+A5B5/A5D1\A5D3;
                    + JSR CODE_00922F                           ;;A56D|A5CF+A5B8/A5D4\A5D6;
                      JSR KeepModeActive                        ;;A570|A5D2+A5BB/A5D7\A5D9;
                      JSR CODE_008E1A                           ;;A573|A5D5+A5BE/A5DA\A5DC;
                      REP #$30                                  ;;A576|A5D8+A5C1/A5DD\A5DF; Index (16 bit) Accum (16 bit) 
                      PHB                                       ;;A578|A5DA+A5C3/A5DF\A5E1;
                      LDX.W #!MainPalette                       ;;A579|A5DB+A5C4/A5E0\A5E2;
                      LDY.W #!CopyPalette                       ;;A57C|A5DE+A5C7/A5E3\A5E5;
                      LDA.W #$01EF                              ;;A57F|A5E1+A5CA/A5E6\A5E8;
                      MVN $00,$00                               ;;A582|A5E4+A5CD/A5E9\A5EB;
                      PLB                                       ;;A585|A5E7+A5D0/A5EC\A5EE;
                      LDX.W !BackgroundColor                    ;;A586|A5E8+A5D1/A5ED\A5EF;
                      STX.W !CopyBGColor                        ;;A589|A5EB+A5D4/A5F0\A5F2;
                      SEP #$30                                  ;;A58C|A5EE+A5D7/A5F3\A5F5; Index (8 bit) Accum (8 bit) 
                      JSR CODE_00919B                           ;;A58E|A5F0+A5D9/A5F5\A5F7;
                      JSR CODE_008494                           ;;A591|A5F3+A5DC/A5F8\A5FA;
                      JMP CODE_0093F4                           ;;A594|A5F6+A5DF/A5FB\A5FD;
                                                                ;;                        ;
CODE_00A5F9:          LDA.B #$E7                                ;;A597|A5F9+A5E2/A5FE\A600;
                      TRB.B !EffFrame                           ;;A599|A5FB+A5E4/A600\A602;
                    - JSL CODE_05BB39                           ;;A59B|A5FD+A5E6/A602\A604;
                      JSR CODE_00A390                           ;;A59F|A601+A5EA/A606\A608;
                      INC.B !EffFrame                           ;;A5A2|A604+A5ED/A609\A60B;
                      LDA.B !EffFrame                           ;;A5A4|A606+A5EF/A60B\A60D;
                      AND.B #$07                                ;;A5A6|A608+A5F1/A60D\A60F;
                      BNE -                                     ;;A5A8|A60A+A5F3/A60F\A611;
                      RTS                                       ;;A5AA|A60C+A5F5/A611\A613;
                                                                ;;                        ;
                                                                ;;                        ;
DATA_00A60D:          dw $0100,$0101,$000D,$FFF3                ;;A5AB|A60D+A5F6/A612\A614;
                      dw $FFFE,$FFFE,$0000,$0000                ;;A5B3|A615+A5FE/A61A\A61C;
                                                                ;;                        ;
DATA_00A61D:          db $0A,$00,$00,$00,$1A,$1A,$0A,$0A        ;;A5BB|A61D+A606/A622\A624;
DATA_00A625:          db $00,$80,$40,$00,$01,$02,$40,$00        ;;A5C3|A625+A60E/A62A\A62C;
                      db $40,$00,$00,$00,$00,$02,$00,$00        ;;A5CB|A62D+A616/A632\A634;
                                                                ;;                        ;
CODE_00A635:          LDA.W !BluePSwitchTimer                   ;;A5D3|A635+A61E/A63A\A63C; If blue pow... 
                      ORA.W !SilverPSwitchTimer                 ;;A5D6|A638+A621/A63D\A63F; ...or silver pow... 
                      ORA.W !DirectCoinTimer                    ;;A5D9|A63B+A624/A640\A642;
                      BNE CODE_00A64A                           ;;A5DC|A63E+A627/A643\A645;
                      LDA.W !InvinsibilityTimer                 ;;A5DE|A640+A629/A645\A647; \ Branch if Mario doesn't have star 
                      BEQ CODE_00A660                           ;;A5E1|A643+A62C/A648\A64A; / 
                      LDA.W !MusicBackup                        ;;A5E3|A645+A62E/A64A\A64C;
                      BPL +                                     ;;A5E6|A648+A631/A64D\A64F;
CODE_00A64A:          LDA.W !MusicBackup                        ;;A5E8|A64A+A633/A64F\A651;
                      AND.B #$7F                                ;;A5EB|A64D+A636/A652\A654;
                    + ORA.B #$40                                ;;A5ED|A64F+A638/A654\A656;
                      STA.W !MusicBackup                        ;;A5EF|A651+A63A/A656\A658;
                      STZ.W !BluePSwitchTimer                   ;;A5F2|A654+A63D/A659\A65B; Zero out POW timer 
                      STZ.W !SilverPSwitchTimer                 ;;A5F5|A657+A640/A65C\A65E; Zero out silver POW timer 
                      STZ.W !DirectCoinTimer                    ;;A5F8|A65A+A643/A65F\A661;
                      STZ.W !InvinsibilityTimer                 ;;A5FB|A65D+A646/A662\A664; Zero out star timer 
CODE_00A660:          LDA.W !BonusRoomBlocks                    ;;A5FE|A660+A649/A665\A667;
                      ORA.W !BonusRoomBlocks+1                  ;;A601|A663+A64C/A668\A66A;
                      ORA.W !BonusRoomBlocks+2                  ;;A604|A666+A64F/A66B\A66D;
                      ORA.W !BonusRoomBlocks+3                  ;;A607|A669+A652/A66E\A670;
                      ORA.W !BonusRoomBlocks+4                  ;;A60A|A66C+A655/A671\A673;
                      BEQ +                                     ;;A60D|A66F+A658/A674\A676;
                      STA.W !DidPlayBonusGame                   ;;A60F|A671+A65A/A676\A678;
                    + LDX.B #$23                                ;;A612|A674+A65D/A679\A67B;
                    - STZ.B !Map16HighPtr+2,X                   ;;A614|A676+A65F/A67B\A67D;
                      DEX                                       ;;A616|A678+A661/A67D\A67F;
                      BNE -                                     ;;A617|A679+A662/A67E\A680;
                      LDX.B #$37                                ;;A619|A67B+A664/A680\A682;
                    - STZ.W !OverworldProcess,X                 ;;A61B|A67D+A666/A682\A684;
                      DEX                                       ;;A61E|A680+A669/A685\A687;
                      BNE -                                     ;;A61F|A681+A66A/A686\A688;
                      ASL.W !UnusedStarCounter                  ;;A621|A683+A66C/A688\A68A;
                      STZ.W !KickingTimer                       ;;A624|A686+A66F/A68B\A68D;
                      STZ.W !PickUpItemTimer                    ;;A627|A689+A672/A68E\A690;
                      STZ.W !ColorFadeTimer                     ;;A62A|A68C+A675/A691\A693;
                      STZ.W !YoshiInPipeSetting                 ;;A62D|A68F+A678/A694\A696;
                      LDY.B #$01                                ;;A630|A692+A67B/A697\A699;
                      LDX.W !ObjectTileset                      ;;A632|A694+A67D/A699\A69B;
                      CPX.B #$10                                ;;A635|A697+A680/A69C\A69E;
                      BCS CODE_00A6CC                           ;;A637|A699+A682/A69E\A6A0;
                      LDA.W DATA_00A625,X                       ;;A639|A69B+A684/A6A0\A6A2;
                      LSR A                                     ;;A63C|A69E+A687/A6A3\A6A5;
                      BEQ CODE_00A6CC                           ;;A63D|A69F+A688/A6A4\A6A6;
                      LDA.W !ShowMarioStart                     ;;A63F|A6A1+A68A/A6A6\A6A8;
                      ORA.W !SublevelCount                      ;;A642|A6A4+A68D/A6A9\A6AB;
                      ORA.W !DisableNoYoshiIntro                ;;A645|A6A7+A690/A6AC\A6AE;
                      BNE CODE_00A6CC                           ;;A648|A6AA+A693/A6AF\A6B1;
                      LDA.W !SkipMidwayCastleIntro              ;;A64A|A6AC+A695/A6B1\A6B3;
                      BEQ CODE_00A6B6                           ;;A64D|A6AF+A698/A6B4\A6B6;
                      JSR CODE_00C90A                           ;;A64F|A6B1+A69A/A6B6\A6B8;
                      BRA CODE_00A6CC                           ;;A652|A6B4+A69D/A6B9\A6BB;
                                                                ;;                        ;
CODE_00A6B6:          STZ.B !PlayerInAir                        ;;A654|A6B6+A69F/A6BB\A6BD;
                      STY.B !PlayerDirection                    ;;A656|A6B8+A6A1/A6BD\A6BF;
                      STY.B !PlayerPipeAction                   ;;A658|A6BA+A6A3/A6BF\A6C1;
                      LDX.B #$0A                                ;;A65A|A6BC+A6A5/A6C1\A6C3;
                      LDY.B #$00                                ;;A65C|A6BE+A6A7/A6C3\A6C5;
                      LDA.W !CarryYoshiThruLvls                 ;;A65E|A6C0+A6A9/A6C5\A6C7;
                      BEQ CODE_00A6C7                           ;;A661|A6C3+A6AC/A6C8\A6CA;
                      LDY.B #$0F                                ;;A663|A6C5+A6AE/A6CA\A6CC;
CODE_00A6C7:          STX.B !PlayerAnimation                    ;;A665|A6C7+A6B0/A6CC\A6CE;
                      STY.B !PipeTimer                          ;;A667|A6C9+A6B2/A6CE\A6D0;
                      RTS                                       ;;A669|A6CB+A6B4/A6D0\A6D2;
                                                                ;;                        ;
CODE_00A6CC:          LDA.B !Layer1YPos                         ;;A66A|A6CC+A6B5/A6D1\A6D3;
                      CMP.B #$C0                                ;;A66C|A6CE+A6B7/A6D3\A6D5;
                      BEQ +                                     ;;A66E|A6D0+A6B9/A6D5\A6D7;
                      INC.W !VerticalScrollEnabled              ;;A670|A6D2+A6BB/A6D7\A6D9;
                    + LDA.W !LevelEntranceType                  ;;A673|A6D5+A6BE/A6DA\A6DC;
                      BEQ CODE_00A6E0                           ;;A676|A6D8+A6C1/A6DD\A6DF;
                      CMP.B #$05                                ;;A678|A6DA+A6C3/A6DF\A6E1;
                      BNE CODE_00A716                           ;;A67A|A6DC+A6C5/A6E1\A6E3;
                      ROR.B !LevelIsSlippery                    ;;A67C|A6DE+A6C7/A6E3\A6E5;
CODE_00A6E0:          STY.B !PlayerDirection                    ;;A67E|A6E0+A6C9/A6E5\A6E7;
                      LDA.B #$24                                ;;A680|A6E2+A6CB/A6E7\A6E9;
                      STA.B !PlayerInAir                        ;;A682|A6E4+A6CD/A6E9\A6EB;
                      STZ.B !SpriteLock                         ;;A684|A6E6+A6CF/A6EB\A6ED;
                      LDA.W !KeyholeTimer                       ;;A686|A6E8+A6D1/A6ED\A6EF;
                      BEQ +                                     ;;A689|A6EB+A6D4/A6F0\A6F2;
                      LDA.W !MusicBackup                        ;;A68B|A6ED+A6D6/A6F2\A6F4;
                      ORA.B #$7F                                ;;A68E|A6F0+A6D9/A6F5\A6F7;
                      STA.W !MusicBackup                        ;;A690|A6F2+A6DB/A6F7\A6F9;
                      LDA.B !PlayerXPosNext                     ;;A693|A6F5+A6DE/A6FA\A6FC;
                      ORA.B #$04                                ;;A695|A6F7+A6E0/A6FC\A6FE;
                      STA.W !KeyholeXPos                        ;;A697|A6F9+A6E2/A6FE\A700;
                      LDA.B !PlayerYPosNext                     ;;A69A|A6FC+A6E5/A701\A703;
                      CLC                                       ;;A69C|A6FE+A6E7/A703\A705;
                      ADC.B #$10                                ;;A69D|A6FF+A6E8/A704\A706;
                      STA.W !KeyholeYPos                        ;;A69F|A701+A6EA/A706\A708;
                    + LDA.W !YoshiHeavenFlag                    ;;A6A2|A704+A6ED/A709\A70B;
                      BEQ +                                     ;;A6A5|A707+A6F0/A70C\A70E;
                      LDA.B #$08                                ;;A6A7|A709+A6F2/A70E\A710; \ Animation = Rise off screen, 
                      STA.B !PlayerAnimation                    ;;A6A9|A70B+A6F4/A710\A712; / for Yoshi Wing bonus stage 
                      LDA.B #$A0                                ;;A6AB|A70D+A6F6/A712\A714;
                      STA.B !PlayerYPosNext                     ;;A6AD|A70F+A6F8/A714\A716;
                      LDA.B #$90                                ;;A6AF|A711+A6FA/A716\A718; \ Set upward speed, #$90 
                      STA.B !PlayerYSpeed                       ;;A6B1|A713+A6FC/A718\A71A; / 
                    + RTS                                       ;;A6B3|A715+A6FE/A71A\A71C;
                                                                ;;                        ;
CODE_00A716:          CMP.B #$06                                ;;A6B4|A716+A6FF/A71B\A71D;
                      BCC CODE_00A740                           ;;A6B6|A718+A701/A71D\A71F;
                      BNE CODE_00A734                           ;;A6B8|A71A+A703/A71F\A721;
                      STY.B !PlayerDirection                    ;;A6BA|A71C+A705/A721\A723;
                      STY.W !PlayerCapePose                     ;;A6BC|A71E+A707/A723\A725;
                      LDA.B #$FF                                ;;A6BF|A721+A70A/A726\A728;
                      STA.W !YoshiInPipeSetting                 ;;A6C1|A723+A70C/A728\A72A;
                      LDA.B #$08                                ;;A6C4|A726+A70F/A72B\A72D;
                      TSB.B !PlayerXPosNext                     ;;A6C6|A728+A711/A72D\A72F;
                      LDA.B #$02                                ;;A6C8|A72A+A713/A72F\A731;
                      TSB.B !PlayerYPosNext                     ;;A6CA|A72C+A715/A731\A733;
                      LDX.B #$07                                ;;A6CC|A72E+A717/A733\A735;
                      LDY.B #$20                                ;;A6CE|A730+A719/A735\A737;
                      BRA CODE_00A6C7                           ;;A6D0|A732+A71B/A737\A739;
                                                                ;;                        ;
CODE_00A734:          STY.B !LevelIsWater                       ;;A6D2|A734+A71D/A739\A73B;
                      LDA.W !SkipMidwayCastleIntro              ;;A6D4|A736+A71F/A73B\A73D;
                      ORA.W !KeyholeTimer                       ;;A6D7|A739+A722/A73E\A740;
                      BNE CODE_00A6E0                           ;;A6DA|A73C+A725/A741\A743;
                      LDA.B #$04                                ;;A6DC|A73E+A727/A743\A745;
CODE_00A740:          CLC                                       ;;A6DE|A740+A729/A745\A747;
                      ADC.B #$03                                ;;A6DF|A741+A72A/A746\A748;
                      STA.B !PlayerPipeAction                   ;;A6E1|A743+A72C/A748\A74A;
                      TAY                                       ;;A6E3|A745+A72E/A74A\A74C;
                      LSR A                                     ;;A6E4|A746+A72F/A74B\A74D;
                      DEC A                                     ;;A6E5|A747+A730/A74C\A74E;
                      STA.W !YoshiInPipeSetting                 ;;A6E6|A748+A731/A74D\A74F;
                      LDA.W DATA_00A60D-4,Y                     ;;A6E9|A74B+A734/A750\A752;
                      STA.B !PlayerDirection                    ;;A6EC|A74E+A737/A753\A755;
                      LDX.B #$05                                ;;A6EE|A750+A739/A755\A757;
                      CPY.B #$06                                ;;A6F0|A752+A73B/A757\A759;
                      BCC CODE_00A768                           ;;A6F2|A754+A73D/A759\A75B;
                      LDA.B #$08                                ;;A6F4|A756+A73F/A75B\A75D;
                      TSB.B !PlayerXPosNext                     ;;A6F6|A758+A741/A75D\A75F;
                      LDX.B #$06                                ;;A6F8|A75A+A743/A75F\A761;
                      CPY.B #$07                                ;;A6FA|A75C+A745/A761\A763;
                      LDY.B #$1E                                ;;A6FC|A75E+A747/A763\A765;
                      BCC +                                     ;;A6FE|A760+A749/A765\A767;
                      LDY.B #$0F                                ;;A700|A762+A74B/A767\A769;
                      LDA.B !Powerup                            ;;A702|A764+A74D/A769\A76B;
                      BEQ +                                     ;;A704|A766+A74F/A76B\A76D;
CODE_00A768:          LDY.B #$1C                                ;;A706|A768+A751/A76D\A76F; \ Set downward speed, #$1C 
                    + STY.B !PlayerYSpeed                       ;;A708|A76A+A753/A76F\A771; / 
                      JSR CODE_00A6C7                           ;;A70A|A76C+A755/A771\A773;
                      LDA.W !PlayerRidingYoshi                  ;;A70D|A76F+A758/A774\A776;
                      BEQ +                                     ;;A710|A772+A75B/A777\A779;
                      LDX.B !PlayerPipeAction                   ;;A712|A774+A75D/A779\A77B;
                      LDA.B !PipeTimer                          ;;A714|A776+A75F/A77B\A77D;
                      CLC                                       ;;A716|A778+A761/A77D\A77F;
                      ADC.W DATA_00A61D,X                       ;;A717|A779+A762/A77E\A780;
                      STA.B !PipeTimer                          ;;A71A|A77C+A765/A781\A783;
                      TXA                                       ;;A71C|A77E+A767/A783\A785;
                      ASL A                                     ;;A71D|A77F+A768/A784\A786;
                      TAX                                       ;;A71E|A780+A769/A785\A787;
                      REP #$20                                  ;;A71F|A781+A76A/A786\A788; Accum (16 bit) 
                      LDA.B !PlayerXPosNext                     ;;A721|A783+A76C/A788\A78A;
                      CLC                                       ;;A723|A785+A76E/A78A\A78C;
                      ADC.W DATA_00A60D-4,X                     ;;A724|A786+A76F/A78B\A78D;
                      STA.B !PlayerXPosNext                     ;;A727|A789+A772/A78E\A790;
                      LDA.B !PlayerYPosNext                     ;;A729|A78B+A774/A790\A792;
                      CLC                                       ;;A72B|A78D+A776/A792\A794;
                      ADC.W DATA_00A60D+4,X                     ;;A72C|A78E+A777/A793\A795;
                      STA.B !PlayerYPosNext                     ;;A72F|A791+A77A/A796\A798;
                      SEP #$20                                  ;;A731|A793+A77C/A798\A79A; Accum (8 bit) 
                    + RTS                                       ;;A733|A795+A77E/A79A\A79C;
                                                                ;;                        ;
CODE_00A796:          REP #$20                                  ;;A734|A796+A77F/A79B\A79D; Accum (16 bit) 
                      LDY.W !VertLayer2Setting                  ;;A736|A798+A781/A79D\A79F;
                      BEQ CODE_00A7B9                           ;;A739|A79B+A784/A7A0\A7A2;
                      DEY                                       ;;A73B|A79D+A786/A7A2\A7A4;
                      BNE CODE_00A7A7                           ;;A73C|A79E+A787/A7A3\A7A5;
                      LDA.B !Layer2YPos                         ;;A73E|A7A0+A789/A7A5\A7A7;
                      SEC                                       ;;A740|A7A2+A78B/A7A7\A7A9;
                      SBC.B !Layer1YPos                         ;;A741|A7A3+A78C/A7A8\A7AA;
                      BRA CODE_00A7B6                           ;;A743|A7A5+A78E/A7AA\A7AC;
                                                                ;;                        ;
CODE_00A7A7:          LDA.B !Layer1YPos                         ;;A745|A7A7+A790/A7AC\A7AE;
                      LSR A                                     ;;A747|A7A9+A792/A7AE\A7B0;
                      DEY                                       ;;A748|A7AA+A793/A7AF\A7B1;
                      BEQ +                                     ;;A749|A7AB+A794/A7B0\A7B2;
                      LSR A                                     ;;A74B|A7AD+A796/A7B2\A7B4;
                      LSR A                                     ;;A74C|A7AE+A797/A7B3\A7B5;
                    + EOR.W #$FFFF                              ;;A74D|A7AF+A798/A7B4\A7B6;
                      INC A                                     ;;A750|A7B2+A79B/A7B7\A7B9;
                      CLC                                       ;;A751|A7B3+A79C/A7B8\A7BA;
                      ADC.B !Layer2YPos                         ;;A752|A7B4+A79D/A7B9\A7BB;
CODE_00A7B6:          STA.W !BackgroundVertOffset               ;;A754|A7B6+A79F/A7BB\A7BD;
CODE_00A7B9:          LDA.W #$0080                              ;;A757|A7B9+A7A2/A7BE\A7C0;
                      STA.W !CameraMoveTrigger                  ;;A75A|A7BC+A7A5/A7C1\A7C3;
                      SEP #$20                                  ;;A75D|A7BF+A7A8/A7C4\A7C6; Accum (8 bit) 
                      RTS                                       ;;A75F|A7C1+A7AA/A7C6\A7C8;
                                                                ;;                        ;
CODE_00A7C2:          REP #$20                                  ;;A760|A7C2+A7AB/A7C7\A7C9; 16 bit A ; Accum (16 bit) 
                      LDX.B #$80                                ;;A762|A7C4+A7AD/A7C9\A7CB;
                      STX.W !HW_VMAINC                          ;;A764|A7C6+A7AF/A7CB\A7CD; VRAM Address Increment Value
                      LDA.W #$6000                              ;;A767|A7C9+A7B2/A7CE\A7D0;
                      STA.W !HW_VMADD                           ;;A76A|A7CC+A7B5/A7D1\A7D3; Address for VRAM Read/Write (Low Byte)
                      LDA.W #$1801                              ;;A76D|A7CF+A7B8/A7D4\A7D6;
                      STA.W !HW_DMAPARAM+$20                    ;;A770|A7D2+A7BB/A7D7\A7D9; Parameters for DMA Transfer
                      LDA.W #!MarioStartGraphics                ;;A773|A7D5+A7BE/A7DA\A7DC;
                      STA.W !HW_DMAADDR+$20                     ;;A776|A7D8+A7C1/A7DD\A7DF; A Address (Low Byte)
                      LDX.B #!MarioStartGraphics>>16            ;;A779|A7DB+A7C4/A7E0\A7E2;
                      STX.W !HW_DMAADDR+$22                     ;;A77B|A7DD+A7C6/A7E2\A7E4; A Address Bank
                      LDA.W #$00C0                              ;;A77E|A7E0+A7C9/A7E5\A7E7;
                      STA.W !HW_DMACNT+$20                      ;;A781|A7E3+A7CC/A7E8\A7EA; Number Bytes to Transfer (Low Byte) (DMA)
                      LDX.B #$04                                ;;A784|A7E6+A7CF/A7EB\A7ED;
                      STX.W !HW_MDMAEN                          ;;A786|A7E8+A7D1/A7ED\A7EF; Regular DMA Channel Enable
                      LDA.W #$6100                              ;;A789|A7EB+A7D4/A7F0\A7F2;
                      STA.W !HW_VMADD                           ;;A78C|A7EE+A7D7/A7F3\A7F5; Address for VRAM Read/Write (Low Byte)
                      LDA.W #!MarioStartGraphics+$C0            ;;A78F|A7F1+A7DA/A7F6\A7F8;
                      STA.W !HW_DMAADDR+$20                     ;;A792|A7F4+A7DD/A7F9\A7FB; A Address (Low Byte)
                      LDA.W #$00C0                              ;;A795|A7F7+A7E0/A7FC\A7FE;
                      STA.W !HW_DMACNT+$20                      ;;A798|A7FA+A7E3/A7FF\A801; Number Bytes to Transfer (Low Byte) (DMA)
                      STX.W !HW_MDMAEN                          ;;A79B|A7FD+A7E6/A802\A804; Regular DMA Channel Enable
                      LDA.W #$64A0                              ;;A79E|A800+A7E9/A805\A807;
                      STA.W !HW_VMADD                           ;;A7A1|A803+A7EC/A808\A80A; Address for VRAM Read/Write (Low Byte)
                      LDA.W #!MarioStartGraphics+$180           ;;A7A4|A806+A7EF/A80B\A80D;
                      STA.W !HW_DMAADDR+$20                     ;;A7A7|A809+A7F2/A80E\A810; A Address (Low Byte)
                      LDA.W #$00C0                              ;;A7AA|A80C+A7F5/A811\A813;
                      STA.W !HW_DMACNT+$20                      ;;A7AD|A80F+A7F8/A814\A816; Number Bytes to Transfer (Low Byte) (DMA)
                      STX.W !HW_MDMAEN                          ;;A7B0|A812+A7FB/A817\A819; Regular DMA Channel Enable
                      LDA.W #$65A0                              ;;A7B3|A815+A7FE/A81A\A81C;
                      STA.W !HW_VMADD                           ;;A7B6|A818+A801/A81D\A81F; Address for VRAM Read/Write (Low Byte)
                      LDA.W #!MarioStartGraphics+$240           ;;A7B9|A81B+A804/A820\A822;
                      STA.W !HW_DMAADDR+$20                     ;;A7BC|A81E+A807/A823\A825; A Address (Low Byte)
                      LDA.W #$00C0                              ;;A7BF|A821+A80A/A826\A828;
                      STA.W !HW_DMACNT+$20                      ;;A7C2|A824+A80D/A829\A82B; Number Bytes to Transfer (Low Byte) (DMA)
                      STX.W !HW_MDMAEN                          ;;A7C5|A827+A810/A82C\A82E; Regular DMA Channel Enable
                      SEP #$20                                  ;;A7C8|A82A+A813/A82F\A831; 8 bit A ; Accum (8 bit) 
                      RTS                                       ;;A7CA|A82C+A815/A831\A833;
                                                                ;;                        ;
CODE_00A82D:          LDY.B #$0F                                ;;A7CB|A82D+A816/A832\A834;
                      JSL CODE_00BA28                           ;;A7CD|A82F+A818/A834\A836;
                      LDA.W !BonusGameActivate                  ;;A7D1|A833+A81C/A838\A83A;
                      REP #$30                                  ;;A7D4|A836+A81F/A83B\A83D; Index (16 bit) Accum (16 bit) 
                      BEQ +                                     ;;A7D6|A838+A821/A83D\A83F;
                      LDA.B !_0                                 ;;A7D8|A83A+A823/A83F\A841;
                      CLC                                       ;;A7DA|A83C+A825/A841\A843;
                      ADC.W #$0030                              ;;A7DB|A83D+A826/A842\A844;
                      STA.B !_0                                 ;;A7DE|A840+A829/A845\A847;
                    + LDX.W #$0000                              ;;A7E0|A842+A82B/A847\A849;
CODE_00A845:          LDY.W #$0008                              ;;A7E3|A845+A82E/A84A\A84C;
                    - LDA.B [!_0]                               ;;A7E6|A848+A831/A84D\A84F;
                      STA.L !MarioStartGraphics,X               ;;A7E8|A84A+A833/A84F\A851;
                      INX                                       ;;A7EC|A84E+A837/A853\A855;
                      INX                                       ;;A7ED|A84F+A838/A854\A856;
                      INC.B !_0                                 ;;A7EE|A850+A839/A855\A857;
                      INC.B !_0                                 ;;A7F0|A852+A83B/A857\A859;
                      DEY                                       ;;A7F2|A854+A83D/A859\A85B;
                      BNE -                                     ;;A7F3|A855+A83E/A85A\A85C;
                      LDY.W #$0008                              ;;A7F5|A857+A840/A85C\A85E;
                    - LDA.B [!_0]                               ;;A7F8|A85A+A843/A85F\A861;
                      AND.W #$00FF                              ;;A7FA|A85C+A845/A861\A863;
                      STA.L !MarioStartGraphics,X               ;;A7FD|A85F+A848/A864\A866;
                      INX                                       ;;A801|A863+A84C/A868\A86A;
                      INX                                       ;;A802|A864+A84D/A869\A86B;
                      INC.B !_0                                 ;;A803|A865+A84E/A86A\A86C;
                      DEY                                       ;;A805|A867+A850/A86C\A86E;
                      BNE -                                     ;;A806|A868+A851/A86D\A86F;
                      CPX.W #$0300                              ;;A808|A86A+A853/A86F\A871;
                      BCC CODE_00A845                           ;;A80B|A86D+A856/A872\A874;
                      SEP #$30                                  ;;A80D|A86F+A858/A874\A876; Index (8 bit) Accum (8 bit) 
                      LDY.B #$00                                ;;A80F|A871+A85A/A876\A878;
                      JSL CODE_00BA28                           ;;A811|A873+A85C/A878\A87A;
                      REP #$30                                  ;;A815|A877+A860/A87C\A87E; Index (16 bit) Accum (16 bit) 
                      LDA.W #$B3F0                              ;;A817|A879+A862/A87E\A880;
                      STA.B !_0                                 ;;A81A|A87C+A865/A881\A883;
                      LDA.W #$7EB3                              ;;A81C|A87E+A867/A883\A885;
                      STA.B !_1                                 ;;A81F|A881+A86A/A886\A888;
                      LDX.W #$0000                              ;;A821|A883+A86C/A888\A88A;
CODE_00A886:          LDY.W #$0008                              ;;A824|A886+A86F/A88B\A88D;
                    - LDA.B [!_0]                               ;;A827|A889+A872/A88E\A890;
                      STA.W !GfxDecompSP1,X                     ;;A829|A88B+A874/A890\A892;
                      INX                                       ;;A82C|A88E+A877/A893\A895;
                      INX                                       ;;A82D|A88F+A878/A894\A896;
                      INC.B !_0                                 ;;A82E|A890+A879/A895\A897;
                      INC.B !_0                                 ;;A830|A892+A87B/A897\A899;
                      DEY                                       ;;A832|A894+A87D/A899\A89B;
                      BNE -                                     ;;A833|A895+A87E/A89A\A89C;
                      LDY.W #$0008                              ;;A835|A897+A880/A89C\A89E;
                    - LDA.B [!_0]                               ;;A838|A89A+A883/A89F\A8A1;
                      AND.W #$00FF                              ;;A83A|A89C+A885/A8A1\A8A3;
                      STA.W !GfxDecompSP1,X                     ;;A83D|A89F+A888/A8A4\A8A6;
                      INX                                       ;;A840|A8A2+A88B/A8A7\A8A9;
                      INX                                       ;;A841|A8A3+A88C/A8A8\A8AA;
                      INC.B !_0                                 ;;A842|A8A4+A88D/A8A9\A8AB;
                      DEY                                       ;;A844|A8A6+A88F/A8AB\A8AD;
                      BNE -                                     ;;A845|A8A7+A890/A8AC\A8AE;
                      CPX.W #$00C0                              ;;A847|A8A9+A892/A8AE\A8B0;
                      BNE +                                     ;;A84A|A8AC+A895/A8B1\A8B3;
                      LDA.W #$B570                              ;;A84C|A8AE+A897/A8B3\A8B5;
                      STA.B !_0                                 ;;A84F|A8B1+A89A/A8B6\A8B8;
                    + CPX.W #$0180                              ;;A851|A8B3+A89C/A8B8\A8BA;
                      BCC CODE_00A886                           ;;A854|A8B6+A89F/A8BB\A8BD;
                      SEP #$30                                  ;;A856|A8B8+A8A1/A8BD\A8BF; Index (8 bit) Accum (8 bit) 
                      LDA.B #$01                                ;;A858|A8BA+A8A3/A8BF\A8C1;
                      STA.W !UploadMarioStart                   ;;A85A|A8BC+A8A5/A8C1\A8C3;
                      STA.W !MarioStartFlag                     ;;A85D|A8BF+A8A8/A8C4\A8C6;
                      RTS                                       ;;A860|A8C2+A8AB/A8C7\A8C9;
                                                                ;;                        ;
                                                                ;;                        ;
SPRITEGFXLIST:        db $00,$01,$13,$02                        ;;A861|A8C3+A8AC/A8C8\A8CA; Forest
                      db $00,$01,$12,$03                        ;;A865|A8C7+A8B0/A8CC\A8CE; Castle 
                      db $00,$01,$13,$05                        ;;A869|A8CB+A8B4/A8D0\A8D2; Mushroom
                      db $00,$01,$13,$04                        ;;A86D|A8CF+A8B8/A8D4\A8D6; Underground 
                      db $00,$01,$13,$06                        ;;A871|A8D3+A8BC/A8D8\A8DA; Water
                      db $00,$01,$13,$09                        ;;A875|A8D7+A8C0/A8DC\A8DE; Pokey 
                      db $00,$01,$13,$04                        ;;A879|A8DB+A8C4/A8E0\A8E2; Underground 2
                      db $00,$01,$06,$11                        ;;A87D|A8DF+A8C8/A8E4\A8E6; Ghost House 
                      db $00,$01,$13,$20                        ;;A881|A8E3+A8CC/A8E8\A8EA; Banzai Bill
                      db $00,$01,$13,$0F                        ;;A885|A8E7+A8D0/A8EC\A8EE; Yoshi's House 
                      db $00,$01,$13,$23                        ;;A889|A8EB+A8D4/A8F0\A8F2; Dino-Rhino
                      db $00,$01,$0D,$14                        ;;A88D|A8EF+A8D8/A8F4\A8F6; Switch Palace 
                      db $00,$01,$24,$0E                        ;;A891|A8F3+A8DC/A8F8\A8FA; Mechakoopa
                      db $00,$01,$0A,$22                        ;;A895|A8F7+A8E0/A8FC\A8FE; Wendy/Lemmy 
                      db $00,$01,$13,$0E                        ;;A899|A8FB+A8E4/A900\A902; Ninji
                      db $00,$01,$13,$14                        ;;A89D|A8FF+A8E8/A904\A906; Unused 
                      db $00,$00,$00,$08                        ;;A8A1|A903+A8EC/A908\A90A;
                      db $10,$0F,$1C,$1D                        ;;A8A5|A907+A8F0/A90C\A90E;
                      db $00,$01,$24,$22                        ;;A8A9|A90B+A8F4/A910\A912;
                      db $00,$01,$25,$22                        ;;A8AD|A90F+A8F8/A914\A916;
                      db $00,$22,$13,$2D                        ;;A8B1|A913+A8FC/A918\A91A;
                      db $00,$01,$0F,$22                        ;;A8B5|A917+A900/A91C\A91E;
                      db $00,$26,$2E,$22                        ;;A8B9|A91B+A904/A920\A922;
                      db $21,$0B,$25,$0A                        ;;A8BD|A91F+A908/A924\A926;
                      db $00,$0D,$24,$22                        ;;A8C1|A923+A90C/A928\A92A;
                      db $2C,$30,$2D,$0E                        ;;A8C5|A927+A910/A92C\A92E;
OBJECTGFXLIST:        db $14,$17,$19,$15                        ;;A8C9|A92B+A914/A930\A932; Normal 1
                      db $14,$17,$1B,$18                        ;;A8CD|A92F+A918/A934\A936; Castle 1 
                      db $14,$17,$1B,$16                        ;;A8D1|A933+A91C/A938\A93A; Rope 1
                      db $14,$17,$0C,$1A                        ;;A8D5|A937+A920/A93C\A93E; Underground 1 
                      db $14,$17,$1B,$08                        ;;A8D9|A93B+A924/A940\A942; Switch Palace 1
                      db $14,$17,$0C,$07                        ;;A8DD|A93F+A928/A944\A946; Ghost House 1 
                      db $14,$17,$0C,$16                        ;;A8E1|A943+A92C/A948\A94A; Rope 2
                      db $14,$17,$1B,$15                        ;;A8E5|A947+A930/A94C\A94E; Normal 2 
                      db $14,$17,$19,$16                        ;;A8E9|A94B+A934/A950\A952; Rope 3
                      db $14,$17,$0D,$1A                        ;;A8ED|A94F+A938/A954\A956; Underground 2 
                      db $14,$17,$1B,$08                        ;;A8F1|A953+A93C/A958\A95A; Switch Palace 2
                      db $14,$17,$1B,$18                        ;;A8F5|A957+A940/A95C\A95E; Castle 2 
                      db $14,$17,$19,$1F                        ;;A8F9|A95B+A944/A960\A962; Cloud/Forest
                      db $14,$17,$0D,$07                        ;;A8FD|A95F+A948/A964\A966; Ghost House 2 
                      db $14,$17,$19,$1A                        ;;A901|A963+A94C/A968\A96A; Underground 2 
                      db $14,$17,$14,$14                        ;;A905|A967+A950/A96C\A96E;
                      db $0E,$0F,$17,$17                        ;;A909|A96B+A954/A970\A972;
                      db $1C,$1D,$08,$1E                        ;;A90D|A96F+A958/A974\A976;
                      db $1C,$1D,$08,$1E                        ;;A911|A973+A95C/A978\A97A;
                      db $1C,$1D,$08,$1E                        ;;A915|A977+A960/A97C\A97E;
                      db $1C,$1D,$08,$1E                        ;;A919|A97B+A964/A980\A982;
                      db $1C,$1D,$08,$1E                        ;;A91D|A97F+A968/A984\A986;
                      db $1C,$1D,$08,$1E                        ;;A921|A983+A96C/A988\A98A;
                      db $1C,$1D,$08,$1E                        ;;A925|A987+A970/A98C\A98E;
                      db $14,$17,$19,$2C                        ;;A929|A98B+A974/A990\A992;
                      db $19,$17,$1B,$18                        ;;A92D|A98F+A978/A994\A996;
                                                                ;;                        ;
CODE_00A993:          STZ.W !HW_VMADD                           ;;A931|A993+A97C/A998\A99A; \  ; Address for VRAM Read/Write (Low Byte)
                      LDA.B #$40                                ;;A934|A996+A97F/A99B\A99D;  |Set "Address for VRAM Read/Write" to x4000 
                      STA.W !HW_VMADD+1                         ;;A936|A998+A981/A99D\A99F; /  ; Address for VRAM Read/Write (High Byte)
                      LDA.B #$03                                ;;A939|A99B+A984/A9A0\A9A2;
                      STA.B !_F                                 ;;A93B|A99D+A986/A9A2\A9A4;
                      LDA.B #$28                                ;;A93D|A99F+A988/A9A4\A9A6;
                      STA.B !_E                                 ;;A93F|A9A1+A98A/A9A6\A9A8;
CODE_00A9A3:          LDA.B !_E                                 ;;A941|A9A3+A98C/A9A8\A9AA;
                      TAY                                       ;;A943|A9A5+A98E/A9AA\A9AC;
                      JSL CODE_00BA28                           ;;A944|A9A6+A98F/A9AB\A9AD;
                      REP #$30                                  ;;A948|A9AA+A993/A9AF\A9B1; Index (16 bit) Accum (16 bit) 
                      LDX.W #$03FF                              ;;A94A|A9AC+A995/A9B1\A9B3;
                      LDY.W #$0000                              ;;A94D|A9AF+A998/A9B4\A9B6;
                    - LDA.B [!_0],Y                             ;;A950|A9B2+A99B/A9B7\A9B9;
                      STA.W !HW_VMDATA                          ;;A952|A9B4+A99D/A9B9\A9BB; Data for VRAM Write (Low Byte)
                      INY                                       ;;A955|A9B7+A9A0/A9BC\A9BE;
                      INY                                       ;;A956|A9B8+A9A1/A9BD\A9BF;
                      DEX                                       ;;A957|A9B9+A9A2/A9BE\A9C0;
                      BPL -                                     ;;A958|A9BA+A9A3/A9BF\A9C1;
                      SEP #$30                                  ;;A95A|A9BC+A9A5/A9C1\A9C3; Index (8 bit) Accum (8 bit) 
                      INC.B !_E                                 ;;A95C|A9BE+A9A7/A9C3\A9C5;
                      DEC.B !_F                                 ;;A95E|A9C0+A9A9/A9C5\A9C7;
                      BPL CODE_00A9A3                           ;;A960|A9C2+A9AB/A9C7\A9C9;
                      STZ.W !HW_VMADD                           ;;A962|A9C4+A9AD/A9C9\A9CB; \  ; Address for VRAM Read/Write (Low Byte)
                      LDA.B #$60                                ;;A965|A9C7+A9B0/A9CC\A9CE;  |Set "Address for VRAM Read/Write" to x6000 
                      STA.W !HW_VMADD+1                         ;;A967|A9C9+A9B2/A9CE\A9D0; /  ; Address for VRAM Read/Write (High Byte)
                      LDY.B #$00                                ;;A96A|A9CC+A9B5/A9D1\A9D3;
                      JSR UploadGFXFile                         ;;A96C|A9CE+A9B7/A9D3\A9D5;
                      RTS                                       ;;A96F|A9D1+A9BA/A9D6\A9D8;
                                                                ;;                        ;
                                                                ;;                        ;
DATA_00A9D2:          db $78,$70,$68,$60                        ;;A970|A9D2+A9BB/A9D7\A9D9;
DATA_00A9D6:          db $18,$10,$08,$00                        ;;A974|A9D6+A9BF/A9DB\A9DD;
                                                                ;;                        ;
UploadSpriteGFX:      LDA.B #$80                                ;;A978|A9DA+A9C3/A9DF\A9E1; Decompression as well? 
                      STA.W !HW_VMAINC                          ;;A97A|A9DC+A9C5/A9E1\A9E3; VRAM transfer control port ; VRAM Address Increment Value
                      LDX.B #$03                                ;;A97D|A9DF+A9C8/A9E4\A9E6;
                      LDA.W !SpriteTileset                      ;;A97F|A9E1+A9CA/A9E6\A9E8; $192B = current sprite GFX list index 
                      ASL A                                     ;;A982|A9E4+A9CD/A9E9\A9EB; \ 
                      ASL A                                     ;;A983|A9E5+A9CE/A9EA\A9EC;  }4A -> Y 
                      TAY                                       ;;A984|A9E6+A9CF/A9EB\A9ED; / 
                    - LDA.W SPRITEGFXLIST,Y                     ;;A985|A9E7+A9D0/A9EC\A9EE;  | 
                      STA.B !_4,X                               ;;A988|A9EA+A9D3/A9EF\A9F1;  | 
                      INY                                       ;;A98A|A9EC+A9D5/A9F1\A9F3;  | 
                      DEX                                       ;;A98B|A9ED+A9D6/A9F2\A9F4;  | 
                      BPL -                                     ;;A98C|A9EE+A9D7/A9F3\A9F5; / 
                      LDA.B #$03                                ;;A98E|A9F0+A9D9/A9F5\A9F7; #$03 -> A -> $0F 
                      STA.B !_F                                 ;;A990|A9F2+A9DB/A9F7\A9F9;
GFXTransferLoop:      LDX.B !_F                                 ;;A992|A9F4+A9DD/A9F9\A9FB; $0F -> X 
                      STZ.W !HW_VMADD                           ;;A994|A9F6+A9DF/A9FB\A9FD; #$00 -> $2116 ; Address for VRAM Read/Write (Low Byte)
                      LDA.W DATA_00A9D2,X                       ;;A997|A9F9+A9E2/A9FE\AA00; My guess: Locations in VRAM to upload GFX to 
                      STA.W !HW_VMADD+1                         ;;A99A|A9FC+A9E5/AA01\AA03; Set VRAM address to $??00 ; Address for VRAM Read/Write (High Byte)
                      LDY.B !_4,X                               ;;A99D|A9FF+A9E8/AA04\AA06; Y is possibly which GFX file 
                      LDA.W !SpriteGFXFile,X                    ;;A99F|AA01+A9EA/AA06\AA08; to upload to a section in VRAM, used in 
                      CMP.B !_4,X                               ;;A9A2|AA04+A9ED/AA09\AA0B; the subroutine $00:BA28 
                      BEQ +                                     ;;A9A4|AA06+A9EF/AA0B\AA0D; don't upload when it''s not needed 
                      JSR UploadGFXFile                         ;;A9A6|AA08+A9F1/AA0D\AA0F; JSR to a JSL... 
                    + DEC.B !_F                                 ;;A9A9|AA0B+A9F4/AA10\AA12; Decrement $0F 
                      BPL GFXTransferLoop                       ;;A9AB|AA0D+A9F6/AA12\AA14; if >= #$00, continue transfer 
                      LDX.B #$03                                ;;A9AD|AA0F+A9F8/AA14\AA16; \ 
                    - LDA.B !_4,X                               ;;A9AF|AA11+A9FA/AA16\AA18;  |Update $0101-$0104 to reflect the new sprite GFX 
                      STA.W !SpriteGFXFile,X                    ;;A9B1|AA13+A9FC/AA18\AA1A;  |That's loaded now. 
                      DEX                                       ;;A9B4|AA16+A9FF/AA1B\AA1D;  | 
                      BPL -                                     ;;A9B5|AA17+AA00/AA1C\AA1E; / 
                      LDA.W !ObjectTileset                      ;;A9B7|AA19+AA02/AA1E\AA20; LDA Tileset 
                      CMP.B #$FE                                ;;A9BA|AA1C+AA05/AA21\AA23;
                      BCS SetallFGBG80                          ;;A9BC|AA1E+AA07/AA23\AA25; Branch to a routine that uploads file #$80 to every slot in FG/BG 
                      LDX.B #$03                                ;;A9BE|AA20+AA09/AA25\AA27;
                      LDA.W !ObjectTileset                      ;;A9C0|AA22+AA0B/AA27\AA29; this routine is pretty close to the above 
                      ASL A                                     ;;A9C3|AA25+AA0E/AA2A\AA2C; one, I'm guessing this does 
                      ASL A                                     ;;A9C4|AA26+AA0F/AA2B\AA2D; object/BG GFX. 
                      TAY                                       ;;A9C5|AA27+AA10/AA2C\AA2E; 4A -> Y 
                    - LDA.W OBJECTGFXLIST,Y                     ;;A9C6|AA28+AA11/AA2D\AA2F; FG/BG GFX table 
                      STA.B !_4,X                               ;;A9C9|AA2B+AA14/AA30\AA32;
                      INY                                       ;;A9CB|AA2D+AA16/AA32\AA34;
                      DEX                                       ;;A9CC|AA2E+AA17/AA33\AA35;
                      BPL -                                     ;;A9CD|AA2F+AA18/AA34\AA36; FG/Bg to upload -> $04 - $07 
                      LDA.B #$03                                ;;A9CF|AA31+AA1A/AA36\AA38;
                      STA.B !_F                                 ;;A9D1|AA33+AA1C/AA38\AA3A; #$03 -> $0F 
CODE_00AA35:          LDX.B !_F                                 ;;A9D3|AA35+AA1E/AA3A\AA3C; $0F -> X 
                      STZ.W !HW_VMADD                           ;;A9D5|AA37+AA20/AA3C\AA3E; Address for VRAM Read/Write (Low Byte)
                      LDA.W DATA_00A9D6,X                       ;;A9D8|AA3A+AA23/AA3F\AA41; Load + Store VRAM upload positions 
                      STA.W !HW_VMADD+1                         ;;A9DB|AA3D+AA26/AA42\AA44; Address for VRAM Read/Write (High Byte)
                      LDY.B !_4,X                               ;;A9DE|AA40+AA29/AA45\AA47;
                      LDA.W !BackgroundGFXFile,X                ;;A9E0|AA42+AA2B/AA47\AA49; Check to see if the file to be uploaded already 
                      CMP.B !_4,X                               ;;A9E3|AA45+AA2E/AA4A\AA4C; exists in the slot in VRAM - if so, 
                      BEQ +                                     ;;A9E5|AA47+AA30/AA4C\AA4E; don't bother uploading it again. 
                      JSR UploadGFXFile                         ;;A9E7|AA49+AA32/AA4E\AA50; Upload the GFX file 
                    + DEC.B !_F                                 ;;A9EA|AA4C+AA35/AA51\AA53; Next GFX file 
                      BPL CODE_00AA35                           ;;A9EC|AA4E+AA37/AA53\AA55;
                      LDX.B #$03                                ;;A9EE|AA50+AA39/AA55\AA57;
                    - LDA.B !_4,X                               ;;A9F0|AA52+AA3B/AA57\AA59;
                      STA.W !BackgroundGFXFile,X                ;;A9F2|AA54+AA3D/AA59\AA5B;
                      DEX                                       ;;A9F5|AA57+AA40/AA5C\AA5E;
                      BPL -                                     ;;A9F6|AA58+AA41/AA5D\AA5F;
                      RTS                                       ;;A9F8|AA5A+AA43/AA5F\AA61; Return from uploading the GFX 
                                                                ;;                        ;
SetallFGBG80:         BEQ +                                     ;;A9F9|AA5B+AA44/AA60\AA62; If zero flag set, don't update the tileset 
                      JSR CODE_00AB42                           ;;A9FB|AA5D+AA46/AA62\AA64;
                    + LDX.B #$03                                ;;A9FE|AA60+AA49/AA65\AA67;
                      LDA.B #$80                                ;;AA00|AA62+AA4B/AA67\AA69; my guess is that it gets called in the same set of routines 
                    - STA.W !BackgroundGFXFile,X                ;;AA02|AA64+AA4D/AA69\AA6B;
                      DEX                                       ;;AA05|AA67+AA50/AA6C\AA6E;
                      BPL -                                     ;;AA06|AA68+AA51/AA6D\AA6F;
                      RTS                                       ;;AA08|AA6A+AA53/AA6F\AA71; Return 
                                                                ;;                        ;
UploadGFXFile:        JSL CODE_00BA28                           ;;AA09|AA6B+AA54/AA70\AA72;
                      CPY.B #$01                                ;;AA0D|AA6F+AA58/AA74\AA76;
                      BNE +                                     ;;AA0F|AA71+AA5A/AA76\AA78;
                      LDA.W !OWLevelTileSettings+$49            ;;AA11|AA73+AA5C/AA78\AA7A;
                      BPL +                                     ;;AA14|AA76+AA5F/AA7B\AA7D; handle the post-special world graphics and koopa color swap. 
                      LDY.B #$31                                ;;AA16|AA78+AA61/AA7D\AA7F;
                      JSL CODE_00BA28                           ;;AA18|AA7A+AA63/AA7F\AA81;
                      LDY.B #$01                                ;;AA1C|AA7E+AA67/AA83\AA85;
                    + REP #$20                                  ;;AA1E|AA80+AA69/AA85\AA87; A = 16bit ; Accum (16 bit) 
                      LDA.W #$0000                              ;;AA20|AA82+AA6B/AA87\AA89;
                      LDX.W !ObjectTileset                      ;;AA23|AA85+AA6E/AA8A\AA8C; LDX Tileset 
                      CPX.B #$11                                ;;AA26|AA88+AA71/AA8D\AA8F; CPX #$11 
                      BCC CODE_00AA90                           ;;AA28|AA8A+AA73/AA8F\AA91; If Tileset < #$11 skip to lower area 
                      CPY.B #$08                                ;;AA2A|AA8C+AA75/AA91\AA93; if Y = #$08 skip to JSR 
                      BEQ JumpTo_____                           ;;AA2C|AA8E+AA77/AA93\AA95;
CODE_00AA90:          CPY.B #$1E                                ;;AA2E|AA90+AA79/AA95\AA97; If Y = #$1E then 
                      BEQ JumpTo_____                           ;;AA30|AA92+AA7B/AA97\AA99; JMP otherwise 
                      BNE +                                     ;;AA32|AA94+AA7D/AA99\AA9B; don't JMP 
JumpTo_____:          JMP FilterSomeRAM                         ;;AA34|AA96+AA7F/AA9B\AA9D;
                                                                ;;                        ;
                    + STA.B !_A                                 ;;AA37|AA99+AA82/AA9E\AAA0;
                      LDA.W #$FFFF                              ;;AA39|AA9B+AA84/AAA0\AAA2;
                      CPY.B #$01                                ;;AA3C|AA9E+AA87/AAA3\AAA5;
                      BEQ +                                     ;;AA3E|AAA0+AA89/AAA5\AAA7;
                      CPY.B #$17                                ;;AA40|AAA2+AA8B/AAA7\AAA9;
                      BEQ +                                     ;;AA42|AAA4+AA8D/AAA9\AAAB;
                      LDA.W #$0000                              ;;AA44|AAA6+AA8F/AAAB\AAAD;
                    + STA.W !GfxBppConvertFlag                  ;;AA47|AAA9+AA92/AAAE\AAB0;
                      LDY.B #$7F                                ;;AA4A|AAAC+AA95/AAB1\AAB3;
CODE_00AAAE:          LDA.W !GfxBppConvertFlag                  ;;AA4C|AAAE+AA97/AAB3\AAB5;
                      BEQ CODE_00AACD                           ;;AA4F|AAB1+AA9A/AAB6\AAB8;
                      CPY.B #$7E                                ;;AA51|AAB3+AA9C/AAB8\AABA;
                      BCC CODE_00AABE                           ;;AA53|AAB5+AA9E/AABA\AABC;
CODE_00AAB7:          LDA.W #$FF00                              ;;AA55|AAB7+AAA0/AABC\AABE;
                      STA.B !_A                                 ;;AA58|AABA+AAA3/AABF\AAC1;
                      BNE CODE_00AACD                           ;;AA5A|AABC+AAA5/AAC1\AAC3;
CODE_00AABE:          CPY.B #$6E                                ;;AA5C|AABE+AAA7/AAC3\AAC5;
                      BCC CODE_00AAC8                           ;;AA5E|AAC0+AAA9/AAC5\AAC7;
                      CPY.B #$70                                ;;AA60|AAC2+AAAB/AAC7\AAC9;
                      BCS CODE_00AAC8                           ;;AA62|AAC4+AAAD/AAC9\AACB;
                      BCC CODE_00AAB7                           ;;AA64|AAC6+AAAF/AACB\AACD;
CODE_00AAC8:          LDA.W #$0000                              ;;AA66|AAC8+AAB1/AACD\AACF;
                      STA.B !_A                                 ;;AA69|AACB+AAB4/AAD0\AAD2;
CODE_00AACD:          LDX.B #$07                                ;;AA6B|AACD+AAB6/AAD2\AAD4;
                    - LDA.B [!_0]                               ;;AA6D|AACF+AAB8/AAD4\AAD6;
                      STA.W !HW_VMDATA                          ;;AA6F|AAD1+AABA/AAD6\AAD8; Data for VRAM Write (Low Byte)
                      XBA                                       ;;AA72|AAD4+AABD/AAD9\AADB;
                      ORA.B [!_0]                               ;;AA73|AAD5+AABE/AADA\AADC;
                      STA.W !GfxBppConvertBuffer,X              ;;AA75|AAD7+AAC0/AADC\AADE;
                      INC.B !_0                                 ;;AA78|AADA+AAC3/AADF\AAE1;
                      INC.B !_0                                 ;;AA7A|AADC+AAC5/AAE1\AAE3;
                      DEX                                       ;;AA7C|AADE+AAC7/AAE3\AAE5;
                      BPL -                                     ;;AA7D|AADF+AAC8/AAE4\AAE6;
                      LDX.B #$07                                ;;AA7F|AAE1+AACA/AAE6\AAE8;
                    - LDA.B [!_0]                               ;;AA81|AAE3+AACC/AAE8\AAEA;
                      AND.W #$00FF                              ;;AA83|AAE5+AACE/AAEA\AAEC;
                      STA.B !_C                                 ;;AA86|AAE8+AAD1/AAED\AAEF;
                      LDA.B [!_0]                               ;;AA88|AAEA+AAD3/AAEF\AAF1;
                      XBA                                       ;;AA8A|AAEC+AAD5/AAF1\AAF3;
                      ORA.W !GfxBppConvertBuffer,X              ;;AA8B|AAED+AAD6/AAF2\AAF4;
                      AND.B !_A                                 ;;AA8E|AAF0+AAD9/AAF5\AAF7;
                      ORA.B !_C                                 ;;AA90|AAF2+AADB/AAF7\AAF9;
                      STA.W !HW_VMDATA                          ;;AA92|AAF4+AADD/AAF9\AAFB; Data for VRAM Write (Low Byte)
                      INC.B !_0                                 ;;AA95|AAF7+AAE0/AAFC\AAFE;
                      DEX                                       ;;AA97|AAF9+AAE2/AAFE\AB00;
                      BPL -                                     ;;AA98|AAFA+AAE3/AAFF\AB01;
                      DEY                                       ;;AA9A|AAFC+AAE5/AB01\AB03;
                      BPL CODE_00AAAE                           ;;AA9B|AAFD+AAE6/AB02\AB04;
                      SEP #$20                                  ;;AA9D|AAFF+AAE8/AB04\AB06; Accum (8 bit) 
                      RTS                                       ;;AA9F|AB01+AAEA/AB06\AB08; Return 
                                                                ;;                        ;
FilterSomeRAM:        LDA.W #$FF00                              ;;AAA0|AB02+AAEB/AB07\AB09; Accum (16 bit) 
                      STA.B !_A                                 ;;AAA3|AB05+AAEE/AB0A\AB0C;
                      LDY.B #$7F                                ;;AAA5|AB07+AAF0/AB0C\AB0E;
Upload____ToVRAM:     CPY.B #$08                                ;;AAA7|AB09+AAF2/AB0E\AB10; \Completely pointless code. 
                      BCS +                                     ;;AAA9|AB0B+AAF4/AB10\AB12; /(Why not just NOPing it out, Nintendo?) 
                    + LDX.B #$07                                ;;AAAB|AB0D+AAF6/AB12\AB14;
                    - LDA.B [!_0]                               ;;AAAD|AB0F+AAF8/AB14\AB16; \ Okay, so take [$00], store 
                      STA.W !HW_VMDATA                          ;;AAAF|AB11+AAFA/AB16\AB18;  |it to VRAM, then bitwise ; Data for VRAM Write (Low Byte)
                      XBA                                       ;;AAB2|AB14+AAFD/AB19\AB1B;  |OR the high and low bytes together 
                      ORA.B [!_0]                               ;;AAB3|AB15+AAFE/AB1A\AB1C;  |store in both bytes of A 
                      STA.W !GfxBppConvertBuffer,X              ;;AAB5|AB17+AB00/AB1C\AB1E; /and store to $1BB2,x 
                      INC.B !_0                                 ;;AAB8|AB1A+AB03/AB1F\AB21; \Increment $7E:0000 by 2 
                      INC.B !_0                                 ;;AABA|AB1C+AB05/AB21\AB23; / 
                      DEX                                       ;;AABC|AB1E+AB07/AB23\AB25; \And continue on another 7 times (or 8 times total) 
                      BPL -                                     ;;AABD|AB1F+AB08/AB24\AB26; / 
                      LDX.B #$07                                ;;AABF|AB21+AB0A/AB26\AB28; hm..  It's like a FOR Y{FOR X{ } } thing ...yeah... 
                    - LDA.B [!_0]                               ;;AAC1|AB23+AB0C/AB28\AB2A;
                      AND.W #$00FF                              ;;AAC3|AB25+AB0E/AB2A\AB2C; A normal byte becomes 2 anti-compressed bytes. 
                      STA.B !_C                                 ;;AAC6|AB28+AB11/AB2D\AB2F; I'm going up, to try and find out what's supposed to set $00-$02 for this routine. 
                      LDA.B [!_0]                               ;;AAC8|AB2A+AB13/AB2F\AB31; AHA, check $00/BA28.  It writes a RAM address to $00-$02, $7EAD00 
                      XBA                                       ;;AACA|AB2C+AB15/AB31\AB33; So...  Now to find otu what sets *That* 
                      ORA.W !GfxBppConvertBuffer,X              ;;AACB|AB2D+AB16/AB32\AB34; ...this place gives me headaches... Can't we work on some other code? :( 
                      AND.B !_A                                 ;;AACE|AB30+AB19/AB35\AB37; Sure, go ahead.  anyways, this seems to upload the decompressed GFX 
                      ORA.B !_C                                 ;;AAD0|AB32+AB1B/AB37\AB39; while scrambling it afterwards (o_O). 
                      STA.W !HW_VMDATA                          ;;AAD2|AB34+AB1D/AB39\AB3B; Okay... WHAT THE HELL? ; Data for VRAM Write (Low Byte)
                      INC.B !_0                                 ;;AAD5|AB37+AB20/AB3C\AB3E; I'll have nightmares about this routine for a few years. :( 
                      DEX                                       ;;AAD7|AB39+AB22/AB3E\AB40;
                      BPL -                                     ;;AAD8|AB3A+AB23/AB3F\AB41; Ouch. 
                      DEY                                       ;;AADA|AB3C+AB25/AB41\AB43;
                      BPL Upload____ToVRAM                      ;;AADB|AB3D+AB26/AB42\AB44;
                      SEP #$20                                  ;;AADD|AB3F+AB28/AB44\AB46; Accum (8 bit) 
                      RTS                                       ;;AADF|AB41+AB2A/AB46\AB48; Return 
                                                                ;;                        ;
CODE_00AB42:          LDY.B #$27                                ;;AAE0|AB42+AB2B/AB47\AB49;
                      JSL CODE_00BA28                           ;;AAE2|AB44+AB2D/AB49\AB4B;
                      REP #$10                                  ;;AAE6|AB48+AB31/AB4D\AB4F; Index (16 bit) 
                      LDY.W #$0000                              ;;AAE8|AB4A+AB33/AB4F\AB51;
                      LDX.W #$03FF                              ;;AAEB|AB4D+AB36/AB52\AB54;
                    - LDA.B [!_0],Y                             ;;AAEE|AB50+AB39/AB55\AB57;
                      STA.B !_F                                 ;;AAF0|AB52+AB3B/AB57\AB59;
                      JSR CODE_00ABC4                           ;;AAF2|AB54+AB3D/AB59\AB5B;
                      LDA.B !_4                                 ;;AAF5|AB57+AB40/AB5C\AB5E;
                      STA.W !HW_VMDATA+1                        ;;AAF7|AB59+AB42/AB5E\AB60; Data for VRAM Write (High Byte)
                      JSR CODE_00ABC4                           ;;AAFA|AB5C+AB45/AB61\AB63;
                      LDA.B !_4                                 ;;AAFD|AB5F+AB48/AB64\AB66;
                      STA.W !HW_VMDATA+1                        ;;AAFF|AB61+AB4A/AB66\AB68; Data for VRAM Write (High Byte)
                      STZ.B !_4                                 ;;AB02|AB64+AB4D/AB69\AB6B;
                      ROL.B !_F                                 ;;AB04|AB66+AB4F/AB6B\AB6D;
                      ROL.B !_4                                 ;;AB06|AB68+AB51/AB6D\AB6F;
                      ROL.B !_F                                 ;;AB08|AB6A+AB53/AB6F\AB71;
                      ROL.B !_4                                 ;;AB0A|AB6C+AB55/AB71\AB73;
                      INY                                       ;;AB0C|AB6E+AB57/AB73\AB75;
                      LDA.B [!_0],Y                             ;;AB0D|AB6F+AB58/AB74\AB76;
                      STA.B !_F                                 ;;AB0F|AB71+AB5A/AB76\AB78;
                      ROL.B !_F                                 ;;AB11|AB73+AB5C/AB78\AB7A;
                      ROL.B !_4                                 ;;AB13|AB75+AB5E/AB7A\AB7C;
                      LDA.B !_4                                 ;;AB15|AB77+AB60/AB7C\AB7E;
                      STA.W !HW_VMDATA+1                        ;;AB17|AB79+AB62/AB7E\AB80; Data for VRAM Write (High Byte)
                      JSR CODE_00ABC4                           ;;AB1A|AB7C+AB65/AB81\AB83;
                      LDA.B !_4                                 ;;AB1D|AB7F+AB68/AB84\AB86;
                      STA.W !HW_VMDATA+1                        ;;AB1F|AB81+AB6A/AB86\AB88; Data for VRAM Write (High Byte)
                      JSR CODE_00ABC4                           ;;AB22|AB84+AB6D/AB89\AB8B;
                      LDA.B !_4                                 ;;AB25|AB87+AB70/AB8C\AB8E;
                      STA.W !HW_VMDATA+1                        ;;AB27|AB89+AB72/AB8E\AB90; Data for VRAM Write (High Byte)
                      STZ.B !_4                                 ;;AB2A|AB8C+AB75/AB91\AB93;
                      ROL.B !_F                                 ;;AB2C|AB8E+AB77/AB93\AB95;
                      ROL.B !_4                                 ;;AB2E|AB90+AB79/AB95\AB97;
                      INY                                       ;;AB30|AB92+AB7B/AB97\AB99;
                      LDA.B [!_0],Y                             ;;AB31|AB93+AB7C/AB98\AB9A;
                      STA.B !_F                                 ;;AB33|AB95+AB7E/AB9A\AB9C;
                      ROL.B !_F                                 ;;AB35|AB97+AB80/AB9C\AB9E;
                      ROL.B !_4                                 ;;AB37|AB99+AB82/AB9E\ABA0;
                      ROL.B !_F                                 ;;AB39|AB9B+AB84/ABA0\ABA2;
                      ROL.B !_4                                 ;;AB3B|AB9D+AB86/ABA2\ABA4;
                      LDA.B !_4                                 ;;AB3D|AB9F+AB88/ABA4\ABA6;
                      STA.W !HW_VMDATA+1                        ;;AB3F|ABA1+AB8A/ABA6\ABA8; Data for VRAM Write (High Byte)
                      JSR CODE_00ABC4                           ;;AB42|ABA4+AB8D/ABA9\ABAB;
                      LDA.B !_4                                 ;;AB45|ABA7+AB90/ABAC\ABAE;
                      STA.W !HW_VMDATA+1                        ;;AB47|ABA9+AB92/ABAE\ABB0; Data for VRAM Write (High Byte)
                      JSR CODE_00ABC4                           ;;AB4A|ABAC+AB95/ABB1\ABB3;
                      LDA.B !_4                                 ;;AB4D|ABAF+AB98/ABB4\ABB6;
                      STA.W !HW_VMDATA+1                        ;;AB4F|ABB1+AB9A/ABB6\ABB8; Data for VRAM Write (High Byte)
                      INY                                       ;;AB52|ABB4+AB9D/ABB9\ABBB;
                      DEX                                       ;;AB53|ABB5+AB9E/ABBA\ABBC;
                      BPL -                                     ;;AB54|ABB6+AB9F/ABBB\ABBD;
                      LDX.W #$2000                              ;;AB56|ABB8+ABA1/ABBD\ABBF;
                    - STZ.W !HW_VMDATA+1                        ;;AB59|ABBB+ABA4/ABC0\ABC2; Data for VRAM Write (High Byte)
                      DEX                                       ;;AB5C|ABBE+ABA7/ABC3\ABC5;
                      BNE -                                     ;;AB5D|ABBF+ABA8/ABC4\ABC6;
                      SEP #$10                                  ;;AB5F|ABC1+ABAA/ABC6\ABC8; Index (8 bit) 
                      RTS                                       ;;AB61|ABC3+ABAC/ABC8\ABCA; Return 
                                                                ;;                        ;
CODE_00ABC4:          STZ.B !_4                                 ;;AB62|ABC4+ABAD/ABC9\ABCB;
                      ROL.B !_F                                 ;;AB64|ABC6+ABAF/ABCB\ABCD;
                      ROL.B !_4                                 ;;AB66|ABC8+ABB1/ABCD\ABCF;
                      ROL.B !_F                                 ;;AB68|ABCA+ABB3/ABCF\ABD1;
                      ROL.B !_4                                 ;;AB6A|ABCC+ABB5/ABD1\ABD3;
                      ROL.B !_F                                 ;;AB6C|ABCE+ABB7/ABD3\ABD5;
                      ROL.B !_4                                 ;;AB6E|ABD0+ABB9/ABD5\ABD7;
                      RTS                                       ;;AB70|ABD2+ABBB/ABD7\ABD9; Return 
                                                                ;;                        ;
                                                                ;;                        ;
DATA_00ABD3:          db $00,$18,$30,$48,$60,$78,$90,$A8        ;;AB71|ABD3+ABBC/ABD8\ABDA; Offsets for FG, BG, Sprite Palettes
                                                                ;;                        ;
                      db $00,$14,$28,$3C                        ;;AB79|ABDB+ABC4/ABE0\ABE2; Offsets for The End Palettes?? 
                                                                ;;                        ;
DATA_00ABDF:          dw $0000,$0038,$0070,$00A8                ;;AB7D|ABDF+ABC8/ABE4\ABE6; Offsets for Overworld Palettes
                      dw $00E0,$0118,$0150                      ;;AB85|ABE7+ABD0/ABEC\ABEE;
                                                                ;;                        ;
LoadPalette:          REP #$30                                  ;;AB8B|ABED+ABD6/ABF2\ABF4; 16 bit A, X and Y ; Index (16 bit) Accum (16 bit) 
                      LDA.W #$7FDD                              ;;AB8D|ABEF+ABD8/ABF4\ABF6; \  
                      STA.B !_4                                 ;;AB90|ABF2+ABDB/ABF7\ABF9;  |Set color 1 in all object palettes to white 
                      LDX.W #$0002                              ;;AB92|ABF4+ABDD/ABF9\ABFB;  | 
                      JSR LoadCol8Pal                           ;;AB95|ABF7+ABE0/ABFC\ABFE; /  
                      LDA.W #$7FFF                              ;;AB98|ABFA+ABE3/ABFF\AC01; \  
                      STA.B !_4                                 ;;AB9B|ABFD+ABE6/AC02\AC04;  |Set color 1 in all sprite palettes to white 
                      LDX.W #$0102                              ;;AB9D|ABFF+ABE8/AC04\AC06;  | 
                      JSR LoadCol8Pal                           ;;ABA0|AC02+ABEB/AC07\AC09; /  
                      LDA.W #StatusBarColors                    ;;ABA3|AC05+ABEE/AC0A\AC0C; \  
                      STA.B !_0                                 ;;ABA6|AC08+ABF1/AC0D\AC0F;  | 
                      LDA.W #$0010                              ;;ABA8|AC0A+ABF3/AC0F\AC11;  |Load colors 8-16 in the first two object palettes from 00/B170 
                      STA.B !_4                                 ;;ABAB|AC0D+ABF6/AC12\AC14;  |(Layer 3 palettes) 
                      LDA.W #$0007                              ;;ABAD|AC0F+ABF8/AC14\AC16;  | 
                      STA.B !_6                                 ;;ABB0|AC12+ABFB/AC17\AC19;  | 
                      LDA.W #$0001                              ;;ABB2|AC14+ABFD/AC19\AC1B;  | 
                      STA.B !_8                                 ;;ABB5|AC17+AC00/AC1C\AC1E;  | 
                      JSR LoadColors                            ;;ABB7|AC19+AC02/AC1E\AC20; /  
                      LDA.W #StandardColors                     ;;ABBA|AC1C+AC05/AC21\AC23; \  
                      STA.B !_0                                 ;;ABBD|AC1F+AC08/AC24\AC26;  | 
                      LDA.W #$0084                              ;;ABBF|AC21+AC0A/AC26\AC28;  |Load colors 2-7 in palettes 4-D from 00/B250 
                      STA.B !_4                                 ;;ABC2|AC24+AC0D/AC29\AC2B;  |(Object and sprite palettes) 
                      LDA.W #$0005                              ;;ABC4|AC26+AC0F/AC2B\AC2D;  | 
                      STA.B !_6                                 ;;ABC7|AC29+AC12/AC2E\AC30;  | 
                      LDA.W #$0009                              ;;ABC9|AC2B+AC14/AC30\AC32;  | 
                      STA.B !_8                                 ;;ABCC|AC2E+AC17/AC33\AC35;  | 
                      JSR LoadColors                            ;;ABCE|AC30+AC19/AC35\AC37; /  
                      LDA.W !BackAreaColor                      ;;ABD1|AC33+AC1C/AC38\AC3A; \  
                      AND.W #$000F                              ;;ABD4|AC36+AC1F/AC3B\AC3D;  | 
                      ASL A                                     ;;ABD7|AC39+AC22/AC3E\AC40;  |Load background color 
                      TAY                                       ;;ABD8|AC3A+AC23/AC3F\AC41;  | 
                      LDA.W BackAreaColors,Y                    ;;ABD9|AC3B+AC24/AC40\AC42;  | 
                      STA.W !BackgroundColor                    ;;ABDC|AC3E+AC27/AC43\AC45; /  
                      LDA.W #ForegroundPalettes                 ;;ABDF|AC41+AC2A/AC46\AC48; \Store base address in $00, ... 
                      STA.B !_0                                 ;;ABE2|AC44+AC2D/AC49\AC4B; / 
                      LDA.W !ForegroundPalette                  ;;ABE4|AC46+AC2F/AC4B\AC4D; \...get current object palette, ... 
                      AND.W #$000F                              ;;ABE7|AC49+AC32/AC4E\AC50; / 
                      TAY                                       ;;ABEA|AC4C+AC35/AC51\AC53; \  
                      LDA.W DATA_00ABD3,Y                       ;;ABEB|AC4D+AC36/AC52\AC54;  | 
                      AND.W #$00FF                              ;;ABEE|AC50+AC39/AC55\AC57;  |...use it to figure out where to load from, ... 
                      CLC                                       ;;ABF1|AC53+AC3C/AC58\AC5A;  | 
                      ADC.B !_0                                 ;;ABF2|AC54+AC3D/AC59\AC5B;  |...add it to the base address... 
                      STA.B !_0                                 ;;ABF4|AC56+AC3F/AC5B\AC5D; / ...and store it in $00 
                      LDA.W #$0044                              ;;ABF6|AC58+AC41/AC5D\AC5F; \  
                      STA.B !_4                                 ;;ABF9|AC5B+AC44/AC60\AC62;  | 
                      LDA.W #$0005                              ;;ABFB|AC5D+AC46/AC62\AC64;  | 
                      STA.B !_6                                 ;;ABFE|AC60+AC49/AC65\AC67;  |Load colors 2-7 in object palettes 2 and 3 from the address in $00 
                      LDA.W #$0001                              ;;AC00|AC62+AC4B/AC67\AC69;  | 
                      STA.B !_8                                 ;;AC03|AC65+AC4E/AC6A\AC6C;  | 
                      JSR LoadColors                            ;;AC05|AC67+AC50/AC6C\AC6E; /  
                      LDA.W #SpriteColors                       ;;AC08|AC6A+AC53/AC6F\AC71; \Store base address in $00, ... 
                      STA.B !_0                                 ;;AC0B|AC6D+AC56/AC72\AC74; / 
                      LDA.W !SpritePalette                      ;;AC0D|AC6F+AC58/AC74\AC76; \...get current sprite palette, ... 
                      AND.W #$000F                              ;;AC10|AC72+AC5B/AC77\AC79; / 
                      TAY                                       ;;AC13|AC75+AC5E/AC7A\AC7C; \  
                      LDA.W DATA_00ABD3,Y                       ;;AC14|AC76+AC5F/AC7B\AC7D;  | 
                      AND.W #$00FF                              ;;AC17|AC79+AC62/AC7E\AC80;  |...use it to figure out where to load from, ... 
                      CLC                                       ;;AC1A|AC7C+AC65/AC81\AC83;  | 
                      ADC.B !_0                                 ;;AC1B|AC7D+AC66/AC82\AC84;  |...add it to the base address... 
                      STA.B !_0                                 ;;AC1D|AC7F+AC68/AC84\AC86; / ...and store it in $00 
                      LDA.W #$01C4                              ;;AC1F|AC81+AC6A/AC86\AC88; \  
                      STA.B !_4                                 ;;AC22|AC84+AC6D/AC89\AC8B;  | 
                      LDA.W #$0005                              ;;AC24|AC86+AC6F/AC8B\AC8D;  | 
                      STA.B !_6                                 ;;AC27|AC89+AC72/AC8E\AC90;  |Load colors 2-7 in sprite palettes 6 and 7 from the address in $00 
                      LDA.W #$0001                              ;;AC29|AC8B+AC74/AC90\AC92;  | 
                      STA.B !_8                                 ;;AC2C|AC8E+AC77/AC93\AC95;  | 
                      JSR LoadColors                            ;;AC2E|AC90+AC79/AC95\AC97; /  
                      LDA.W #BackgroundPalettes                 ;;AC31|AC93+AC7C/AC98\AC9A; \Store bade address in $00, ... 
                      STA.B !_0                                 ;;AC34|AC96+AC7F/AC9B\AC9D; / 
                      LDA.W !BackgroundPalette                  ;;AC36|AC98+AC81/AC9D\AC9F; \...get current background palette, ... 
                      AND.W #$000F                              ;;AC39|AC9B+AC84/ACA0\ACA2; / 
                      TAY                                       ;;AC3C|AC9E+AC87/ACA3\ACA5; \  
                      LDA.W DATA_00ABD3,Y                       ;;AC3D|AC9F+AC88/ACA4\ACA6;  | 
                      AND.W #$00FF                              ;;AC40|ACA2+AC8B/ACA7\ACA9;  |...use it to figure out where to load from, ... 
                      CLC                                       ;;AC43|ACA5+AC8E/ACAA\ACAC;  | 
                      ADC.B !_0                                 ;;AC44|ACA6+AC8F/ACAB\ACAD;  |...add it to the base address... 
                      STA.B !_0                                 ;;AC46|ACA8+AC91/ACAD\ACAF; / ...and store it in $00 
                      LDA.W #$0004                              ;;AC48|ACAA+AC93/ACAF\ACB1; \  
                      STA.B !_4                                 ;;AC4B|ACAD+AC96/ACB2\ACB4;  | 
                      LDA.W #$0005                              ;;AC4D|ACAF+AC98/ACB4\ACB6;  | 
                      STA.B !_6                                 ;;AC50|ACB2+AC9B/ACB7\ACB9;  |Load colors 2-7 in object palettes 0 and 1 from the address in $00 
                      LDA.W #$0001                              ;;AC52|ACB4+AC9D/ACB9\ACBB;  | 
                      STA.B !_8                                 ;;AC55|ACB7+ACA0/ACBC\ACBE;  | 
                      JSR LoadColors                            ;;AC57|ACB9+ACA2/ACBE\ACC0; /  
                      LDA.W #BerryColors                        ;;AC5A|ACBC+ACA5/ACC1\ACC3; \  
                      STA.B !_0                                 ;;AC5D|ACBF+ACA8/ACC4\ACC6;  | 
                      LDA.W #$0052                              ;;AC5F|ACC1+ACAA/ACC6\ACC8;  | 
                      STA.B !_4                                 ;;AC62|ACC4+ACAD/ACC9\ACCB;  | 
                      LDA.W #$0006                              ;;AC64|ACC6+ACAF/ACCB\ACCD;  |Load colors 9-F in object palettes 2-4 from 00/B674 
                      STA.B !_6                                 ;;AC67|ACC9+ACB2/ACCE\ACD0;  | 
                      LDA.W #$0002                              ;;AC69|ACCB+ACB4/ACD0\ACD2;  | 
                      STA.B !_8                                 ;;AC6C|ACCE+ACB7/ACD3\ACD5;  | 
                      JSR LoadColors                            ;;AC6E|ACD0+ACB9/ACD5\ACD7; /  
                      LDA.W #BerryColors                        ;;AC71|ACD3+ACBC/ACD8\ACDA; \  
                      STA.B !_0                                 ;;AC74|ACD6+ACBF/ACDB\ACDD;  | 
                      LDA.W #$0132                              ;;AC76|ACD8+ACC1/ACDD\ACDF;  | 
                      STA.B !_4                                 ;;AC79|ACDB+ACC4/ACE0\ACE2;  | 
                      LDA.W #$0006                              ;;AC7B|ACDD+ACC6/ACE2\ACE4;  |Load colors 9-F in sprite palettes 1-3 from 00/B674 
                      STA.B !_6                                 ;;AC7E|ACE0+ACC9/ACE5\ACE7;  | 
                      LDA.W #$0002                              ;;AC80|ACE2+ACCB/ACE7\ACE9;  | 
                      STA.B !_8                                 ;;AC83|ACE5+ACCE/ACEA\ACEC;  | 
                      JSR LoadColors                            ;;AC85|ACE7+ACD0/ACEC\ACEE; /  
                      SEP #$30                                  ;;AC88|ACEA+ACD3/ACEF\ACF1; 8 bit A, X and Y ; Index (8 bit) Accum (8 bit) 
                      RTS                                       ;;AC8A|ACEC+ACD5/ACF1\ACF3; Return 
                                                                ;;                        ;
LoadCol8Pal:          LDY.W #$0007                              ;;AC8B|ACED+ACD6/ACF2\ACF4; Index (16 bit) Accum (16 bit) 
                    - LDA.B !_4                                 ;;AC8E|ACF0+ACD9/ACF5\ACF7;
                      STA.W !MainPalette,X                      ;;AC90|ACF2+ACDB/ACF7\ACF9;
                      TXA                                       ;;AC93|ACF5+ACDE/ACFA\ACFC;
                      CLC                                       ;;AC94|ACF6+ACDF/ACFB\ACFD;
                      ADC.W #$0020                              ;;AC95|ACF7+ACE0/ACFC\ACFE;
                      TAX                                       ;;AC98|ACFA+ACE3/ACFF\AD01;
                      DEY                                       ;;AC99|ACFB+ACE4/AD00\AD02;
                      BPL -                                     ;;AC9A|ACFC+ACE5/AD01\AD03;
                      RTS                                       ;;AC9C|ACFE+ACE7/AD03\AD05; Return 
                                                                ;;                        ;
LoadColors:           LDX.B !_4                                 ;;AC9D|ACFF+ACE8/AD04\AD06;
                      LDY.B !_6                                 ;;AC9F|AD01+ACEA/AD06\AD08;
                    - LDA.B (!_0)                               ;;ACA1|AD03+ACEC/AD08\AD0A;
                      STA.W !MainPalette,X                      ;;ACA3|AD05+ACEE/AD0A\AD0C;
                      INC.B !_0                                 ;;ACA6|AD08+ACF1/AD0D\AD0F;
                      INC.B !_0                                 ;;ACA8|AD0A+ACF3/AD0F\AD11;
                      INX                                       ;;ACAA|AD0C+ACF5/AD11\AD13;
                      INX                                       ;;ACAB|AD0D+ACF6/AD12\AD14;
                      DEY                                       ;;ACAC|AD0E+ACF7/AD13\AD15;
                      BPL -                                     ;;ACAD|AD0F+ACF8/AD14\AD16;
                      LDA.B !_4                                 ;;ACAF|AD11+ACFA/AD16\AD18;
                      CLC                                       ;;ACB1|AD13+ACFC/AD18\AD1A;
                      ADC.W #$0020                              ;;ACB2|AD14+ACFD/AD19\AD1B;
                      STA.B !_4                                 ;;ACB5|AD17+AD00/AD1C\AD1E;
                      DEC.B !_8                                 ;;ACB7|AD19+AD02/AD1E\AD20;
                      BPL LoadColors                            ;;ACB9|AD1B+AD04/AD20\AD22;
                      RTS                                       ;;ACBB|AD1D+AD06/AD22\AD24; Return 
                                                                ;;                        ;
                                                                ;;                        ;
DATA_00AD1E:          db $01,$00,$03,$04,$03,$05,$02            ;;ACBC|AD1E+AD07/AD23\AD25; Palette Indices for Overworld Maps
                                                                ;;                        ;
CODE_00AD25:          REP #$30                                  ;;ACC3|AD25+AD0E/AD2A\AD2C; Index (16 bit) Accum (16 bit) 
                      LDY.W #OverworldColors                    ;;ACC5|AD27+AD10/AD2C\AD2E;
                      LDA.W !OWLevelTileSettings+$48            ;;ACC8|AD2A+AD13/AD2F\AD31;
                      BPL +                                     ;;ACCB|AD2D+AD16/AD32\AD34;
                      LDY.W #OWSpecialColors                    ;;ACCD|AD2F+AD18/AD34\AD36;
                    + STY.B !_0                                 ;;ACD0|AD32+AD1B/AD37\AD39;
                      LDA.W !ObjectTileset                      ;;ACD2|AD34+AD1D/AD39\AD3B;
                      AND.W #$000F                              ;;ACD5|AD37+AD20/AD3C\AD3E;
                      DEC A                                     ;;ACD8|AD3A+AD23/AD3F\AD41;
                      TAY                                       ;;ACD9|AD3B+AD24/AD40\AD42;
                      LDA.W DATA_00AD1E,Y                       ;;ACDA|AD3C+AD25/AD41\AD43;
                      AND.W #$00FF                              ;;ACDD|AD3F+AD28/AD44\AD46;
                      ASL A                                     ;;ACE0|AD42+AD2B/AD47\AD49;
                      TAY                                       ;;ACE1|AD43+AD2C/AD48\AD4A;
                      LDA.W DATA_00ABDF,Y                       ;;ACE2|AD44+AD2D/AD49\AD4B;
                      CLC                                       ;;ACE5|AD47+AD30/AD4C\AD4E;
                      ADC.B !_0                                 ;;ACE6|AD48+AD31/AD4D\AD4F;
                      STA.B !_0                                 ;;ACE8|AD4A+AD33/AD4F\AD51;
                      LDA.W #$0082                              ;;ACEA|AD4C+AD35/AD51\AD53;
                      STA.B !_4                                 ;;ACED|AD4F+AD38/AD54\AD56;
                      LDA.W #$0006                              ;;ACEF|AD51+AD3A/AD56\AD58;
                      STA.B !_6                                 ;;ACF2|AD54+AD3D/AD59\AD5B;
                      LDA.W #$0003                              ;;ACF4|AD56+AD3F/AD5B\AD5D;
                      STA.B !_8                                 ;;ACF7|AD59+AD42/AD5E\AD60;
                      JSR LoadColors                            ;;ACF9|AD5B+AD44/AD60\AD62;
                      LDA.W #OWStdColors                        ;;ACFC|AD5E+AD47/AD63\AD65;
                      STA.B !_0                                 ;;ACFF|AD61+AD4A/AD66\AD68;
                      LDA.W #$0052                              ;;AD01|AD63+AD4C/AD68\AD6A;
                      STA.B !_4                                 ;;AD04|AD66+AD4F/AD6B\AD6D;
                      LDA.W #$0006                              ;;AD06|AD68+AD51/AD6D\AD6F;
                      STA.B !_6                                 ;;AD09|AD6B+AD54/AD70\AD72;
                      LDA.W #$0005                              ;;AD0B|AD6D+AD56/AD72\AD74;
                      STA.B !_8                                 ;;AD0E|AD70+AD59/AD75\AD77;
                      JSR LoadColors                            ;;AD10|AD72+AD5B/AD77\AD79;
                      LDA.W #OWStdColors2                       ;;AD13|AD75+AD5E/AD7A\AD7C;
                      STA.B !_0                                 ;;AD16|AD78+AD61/AD7D\AD7F;
                      LDA.W #$0102                              ;;AD18|AD7A+AD63/AD7F\AD81;
                      STA.B !_4                                 ;;AD1B|AD7D+AD66/AD82\AD84;
                      LDA.W #$0006                              ;;AD1D|AD7F+AD68/AD84\AD86;
                      STA.B !_6                                 ;;AD20|AD82+AD6B/AD87\AD89;
                      LDA.W #$0007                              ;;AD22|AD84+AD6D/AD89\AD8B;
                      STA.B !_8                                 ;;AD25|AD87+AD70/AD8C\AD8E;
                      JSR LoadColors                            ;;AD27|AD89+AD72/AD8E\AD90;
                      LDA.W #OverworldHudColors                 ;;AD2A|AD8C+AD75/AD91\AD93;
                      STA.B !_0                                 ;;AD2D|AD8F+AD78/AD94\AD96;
                      LDA.W #$0010                              ;;AD2F|AD91+AD7A/AD96\AD98;
                      STA.B !_4                                 ;;AD32|AD94+AD7D/AD99\AD9B;
                      LDA.W #$0007                              ;;AD34|AD96+AD7F/AD9B\AD9D;
                      STA.B !_6                                 ;;AD37|AD99+AD82/AD9E\ADA0;
                      LDA.W #$0001                              ;;AD39|AD9B+AD84/ADA0\ADA2;
                      STA.B !_8                                 ;;AD3C|AD9E+AD87/ADA3\ADA5;
                      JSR LoadColors                            ;;AD3E|ADA0+AD89/ADA5\ADA7;
                      SEP #$30                                  ;;AD41|ADA3+AD8C/ADA8\ADAA; Index (8 bit) Accum (8 bit) 
                      RTS                                       ;;AD43|ADA5+AD8E/ADAA\ADAC; Return 
                                                                ;;                        ;
CODE_00ADA6:          REP #$30                                  ;;AD44|ADA6+AD8F/ADAB\ADAD; Index (16 bit) Accum (16 bit) 
                      LDA.W #TitleScreenColors+$10              ;;AD46|ADA8+AD91/ADAD\ADAF;
                      STA.B !_0                                 ;;AD49|ADAB+AD94/ADB0\ADB2;
                      LDA.W #$0010                              ;;AD4B|ADAD+AD96/ADB2\ADB4;
                      STA.B !_4                                 ;;AD4E|ADB0+AD99/ADB5\ADB7;
                      LDA.W #$0007                              ;;AD50|ADB2+AD9B/ADB7\ADB9;
                      STA.B !_6                                 ;;AD53|ADB5+AD9E/ADBA\ADBC;
                      LDA.W #$0000                              ;;AD55|ADB7+ADA0/ADBC\ADBE;
                      STA.B !_8                                 ;;AD58|ADBA+ADA3/ADBF\ADC1;
                      JSR LoadColors                            ;;AD5A|ADBC+ADA5/ADC1\ADC3;
                      LDA.W #TitleScreenColors                  ;;AD5D|ADBF+ADA8/ADC4\ADC6;
                      STA.B !_0                                 ;;AD60|ADC2+ADAB/ADC7\ADC9;
                      LDA.W #$0030                              ;;AD62|ADC4+ADAD/ADC9\ADCB;
                      STA.B !_4                                 ;;AD65|ADC7+ADB0/ADCC\ADCE;
                      LDA.W #$0007                              ;;AD67|ADC9+ADB2/ADCE\ADD0;
                      STA.B !_6                                 ;;AD6A|ADCC+ADB5/ADD1\ADD3;
                      LDA.W #$0000                              ;;AD6C|ADCE+ADB7/ADD3\ADD5;
                      STA.B !_8                                 ;;AD6F|ADD1+ADBA/ADD6\ADD8;
                      JSR LoadColors                            ;;AD71|ADD3+ADBC/ADD8\ADDA;
                      SEP #$30                                  ;;AD74|ADD6+ADBF/ADDB\ADDD; Index (8 bit) Accum (8 bit) 
                      RTS                                       ;;AD76|ADD8+ADC1/ADDD\ADDF; Return 
                                                                ;;                        ;
CODE_00ADD9:          JSR LoadPalette                           ;;AD77|ADD9+ADC2/ADDE\ADE0;
                      REP #$30                                  ;;AD7A|ADDC+ADC5/ADE1\ADE3; Index (16 bit) Accum (16 bit) 
                      LDA.W #$0017                              ;;AD7C|ADDE+ADC7/ADE3\ADE5;
                      STA.W !BackgroundColor                    ;;AD7F|ADE1+ADCA/ADE6\ADE8;
                      LDA.W #StatusBarColors                    ;;AD82|ADE4+ADCD/ADE9\ADEB;
                      STA.B !_0                                 ;;AD85|ADE7+ADD0/ADEC\ADEE;
                      LDA.W #$0010                              ;;AD87|ADE9+ADD2/ADEE\ADF0;
                      STA.B !_4                                 ;;AD8A|ADEC+ADD5/ADF1\ADF3;
                      LDA.W #$0007                              ;;AD8C|ADEE+ADD7/ADF3\ADF5;
                      STA.B !_6                                 ;;AD8F|ADF1+ADDA/ADF6\ADF8;
                      LDA.W #$0001                              ;;AD91|ADF3+ADDC/ADF8\ADFA;
                      STA.B !_8                                 ;;AD94|ADF6+ADDF/ADFB\ADFD;
                      JSR LoadColors                            ;;AD96|ADF8+ADE1/ADFD\ADFF;
                      LDA.W #IggyLarryPlatColors                ;;AD99|ADFB+ADE4/AE00\AE02;
                      STA.B !_0                                 ;;AD9C|ADFE+ADE7/AE03\AE05;
                      LDA.W #$0000                              ;;AD9E|AE00+ADE9/AE05\AE07;
                      STA.B !_4                                 ;;ADA1|AE03+ADEC/AE08\AE0A;
                      LDA.W #$0007                              ;;ADA3|AE05+ADEE/AE0A\AE0C;
                      STA.B !_6                                 ;;ADA6|AE08+ADF1/AE0D\AE0F;
                      LDA.W #$0000                              ;;ADA8|AE0A+ADF3/AE0F\AE11;
                      STA.B !_8                                 ;;ADAB|AE0D+ADF6/AE12\AE14;
                      JSR LoadColors                            ;;ADAD|AE0F+ADF8/AE14\AE16;
                      SEP #$30                                  ;;ADB0|AE12+ADFB/AE17\AE19; Index (8 bit) Accum (8 bit) 
                      RTS                                       ;;ADB2|AE14+ADFD/AE19\AE1B; Return 
                                                                ;;                        ;
CODE_00AE15:          LDA.B #$02                                ;;ADB3|AE15+ADFE/AE1A\AE1C;
                      STA.W !SpritePalette                      ;;ADB5|AE17+AE00/AE1C\AE1E;
                      LDA.B #$07                                ;;ADB8|AE1A+AE03/AE1F\AE21;
                      STA.W !ForegroundPalette                  ;;ADBA|AE1C+AE05/AE21\AE23;
                      JSR LoadPalette                           ;;ADBD|AE1F+AE08/AE24\AE26;
                      REP #$30                                  ;;ADC0|AE22+AE0B/AE27\AE29; Index (16 bit) Accum (16 bit) 
                      LDA.W #$0017                              ;;ADC2|AE24+AE0D/AE29\AE2B;
                      STA.W !BackgroundColor                    ;;ADC5|AE27+AE10/AE2C\AE2E;
                      LDA.W #OverworldHudColors+8               ;;ADC8|AE2A+AE13/AE2F\AE31;
                      STA.B !_0                                 ;;ADCB|AE2D+AE16/AE32\AE34;
                      LDA.W #$0018                              ;;ADCD|AE2F+AE18/AE34\AE36;
                      STA.B !_4                                 ;;ADD0|AE32+AE1B/AE37\AE39;
                      LDA.W #$0003                              ;;ADD2|AE34+AE1D/AE39\AE3B;
                      STA.B !_6                                 ;;ADD5|AE37+AE20/AE3C\AE3E;
                      STZ.B !_8                                 ;;ADD7|AE39+AE22/AE3E\AE40;
                      JSR LoadColors                            ;;ADD9|AE3B+AE24/AE40\AE42;
                      SEP #$30                                  ;;ADDC|AE3E+AE27/AE43\AE45; Index (8 bit) Accum (8 bit) 
                      RTS                                       ;;ADDE|AE40+AE29/AE45\AE47; Return 
                                                                ;;                        ;
                                                                ;;                        ;
DATA_00AE41:          db $00,$05,$0A                            ;;ADDF|AE41+AE2A/AE46\AE48;
DATA_00AE44:          db $20,$40,$80                            ;;ADE2|AE44+AE2D/AE49\AE4B;
                                                                ;;                        ;
CODE_00AE47:          LDX.B #$02                                ;;ADE5|AE47+AE30/AE4C\AE4E;
CODE_00AE49:          REP #$20                                  ;;ADE7|AE49+AE32/AE4E\AE50; Accum (16 bit) 
                      LDA.W !BackgroundColor                    ;;ADE9|AE4B+AE34/AE50\AE52;
                      LDY.W DATA_00AE41,X                       ;;ADEC|AE4E+AE37/AE53\AE55;
CODE_00AE51:          DEY                                       ;;ADEF|AE51+AE3A/AE56\AE58;
                      BMI CODE_00AE57                           ;;ADF0|AE52+AE3B/AE57\AE59;
                      LSR A                                     ;;ADF2|AE54+AE3D/AE59\AE5B;
                      BRA CODE_00AE51                           ;;ADF3|AE55+AE3E/AE5A\AE5C;
                                                                ;;                        ;
CODE_00AE57:          SEP #$20                                  ;;ADF5|AE57+AE40/AE5C\AE5E; Accum (8 bit) 
                      AND.B #$1F                                ;;ADF7|AE59+AE42/AE5E\AE60;
                      ORA.W DATA_00AE44,X                       ;;ADF9|AE5B+AE44/AE60\AE62;
                      STA.W !HW_COLDATA                         ;;ADFC|AE5E+AE47/AE63\AE65; Fixed Color Data
                      DEX                                       ;;ADFF|AE61+AE4A/AE66\AE68;
                      BPL CODE_00AE49                           ;;AE00|AE62+AE4B/AE67\AE69;
                      RTS                                       ;;AE02|AE64+AE4D/AE69\AE6B; Return 
                                                                ;;                        ;
                                                                ;;                        ;
DATA_00AE65:          dw $001F,$03E0,$7C00                      ;;AE03|AE65+AE4E/AE6A\AE6C;
                                                                ;;                        ;
DATA_00AE6B:          dw $FFFF,$FFE0,$FC00                      ;;AE09|AE6B+AE54/AE70\AE72;
                                                                ;;                        ;
DATA_00AE71:          dw $0001,$0020,$0400                      ;;AE0F|AE71+AE5A/AE76\AE78;
                                                                ;;                        ;
DATA_00AE77:          dw $0000,$0000,$0001,$0000                ;;AE15|AE77+AE60/AE7C\AE7E;
                      dw $8000,$8000,$8020,$0400                ;;AE1D|AE7F+AE68/AE84\AE86;
                      dw $8080,$8080,$8208,$1040                ;;AE25|AE87+AE70/AE8C\AE8E;
                      dw $8420,$8420,$8844,$2210                ;;AE2D|AE8F+AE78/AE94\AE96;
                      dw $8888,$8888,$9122,$4488                ;;AE35|AE97+AE80/AE9C\AE9E;
                      dw $9248,$9248,$A492,$4924                ;;AE3D|AE9F+AE88/AEA4\AEA6;
                      dw $A4A4,$A4A4,$A949,$5294                ;;AE45|AEA7+AE90/AEAC\AEAE;
                      dw $AAAA,$5294,$AAAA,$5554                ;;AE4D|AEAF+AE98/AEB4\AEB6;
                      dw $AAAA,$AAAA,$D5AA,$AAAA                ;;AE55|AEB7+AEA0/AEBC\AEBE;
                      dw $D5AA,$D5AA,$D6B5,$AD6A                ;;AE5D|AEBF+AEA8/AEC4\AEC6;
                      dw $DADA,$DADA,$DB6D,$B6DA                ;;AE65|AEC7+AEB0/AECC\AECE;
                      dw $EDB6,$EDB6,$EEDD,$BB76                ;;AE6D|AECF+AEB8/AED4\AED6;
                      dw $EEEE,$EEEE,$F7BB,$DDEE                ;;AE75|AED7+AEC0/AEDC\AEDE;
                      dw $FBDE,$FBDE,$FDF7,$EFBE                ;;AE7D|AEDF+AEC8/AEE4\AEE6;
                      dw $FEFE,$FEFE,$FFDF,$FBFE                ;;AE85|AEE7+AED0/AEEC\AEEE;
                      dw $FFFE,$FFFE,$FFFF,$FFFE                ;;AE8D|AEEF+AED8/AEF4\AEF6;
                                                                ;;                        ;
DATA_00AEF7:          dw $8000,$4000,$2000,$1000                ;;AE95|AEF7+AEE0/AEFC\AEFE;
                      dw $0800,$0400,$0200,$0100                ;;AE9D|AEFF+AEE8/AF04\AF06;
                      dw $0080,$0040,$0020,$0010                ;;AEA5|AF07+AEF0/AF0C\AF0E;
                      dw $0008,$0004,$0002,$0001                ;;AEAD|AF0F+AEF8/AF14\AF16;
                                                                ;;                        ;
GoalBackgroundFade:   LDY.W !EndLevelTimer                      ;;AEB5|AF17+AF00/AF1C\AF1E;
                      LDA.B !TrueFrame                          ;;AEB8|AF1A+AF03/AF1F\AF21;
                      LSR A                                     ;;AEBA|AF1C+AF05/AF21\AF23;
                      BCC +                                     ;;AEBB|AF1D+AF06/AF22\AF24;
                      DEY                                       ;;AEBD|AF1F+AF08/AF24\AF26;
                      BEQ +                                     ;;AEBE|AF20+AF09/AF25\AF27;
                      STY.W !EndLevelTimer                      ;;AEC0|AF22+AF0B/AF27\AF29;
                    + CPY.B #con($A0,$A0,$A0,$B0,$B0)           ;;AEC3|AF25+AF0E/AF2A\AF2C;
                      BCS CODE_00AF35                           ;;AEC5|AF27+AF10/AF2C\AF2E;
                      LDA.B #$04                                ;;AEC7|AF29+AF12/AF2E\AF30;
                      TRB.B !ColorSettings                      ;;AEC9|AF2B+AF14/AF30\AF32;
                      LDA.B #$09                                ;;AECB|AF2D+AF16/AF32\AF34;
                      STA.B !MainBGMode                         ;;AECD|AF2F+AF18/AF34\AF36;
                      JSL CODE_05CBFF                           ;;AECF|AF31+AF1A/AF36\AF38;
CODE_00AF35:          LDA.B !TrueFrame                          ;;AED3|AF35+AF1E/AF3A\AF3C;
                      AND.B #$03                                ;;AED5|AF37+AF20/AF3C\AF3E;
                      BNE Return00AFA2                          ;;AED7|AF39+AF22/AF3E\AF40;
                      LDA.W !ColorFadeTimer                     ;;AED9|AF3B+AF24/AF40\AF42;
                      CMP.B #$40                                ;;AEDC|AF3E+AF27/AF43\AF45;
                      BCS Return00AFA2                          ;;AEDE|AF40+AF29/AF45\AF47;
                      JSR CODE_00AFA3                           ;;AEE0|AF42+AF2B/AF47\AF49; Index (16 bit) Accum (16 bit) 
                      LDA.W #$01FE                              ;;AEE3|AF45+AF2E/AF4A\AF4C;
                      STA.W !CopyPalette                        ;;AEE6|AF48+AF31/AF4D\AF4F;
                      LDX.W #$00EE                              ;;AEE9|AF4B+AF34/AF50\AF52;
CODE_00AF4E:          LDA.W #$0007                              ;;AEEC|AF4E+AF37/AF53\AF55;
                      STA.B !_0                                 ;;AEEF|AF51+AF3A/AF56\AF58;
                    - LDA.W !CopyPalette,X                      ;;AEF1|AF53+AF3C/AF58\AF5A;
                      STA.B !_2                                 ;;AEF4|AF56+AF3F/AF5B\AF5D;
                      LDA.W !MainPalette,X                      ;;AEF6|AF58+AF41/AF5D\AF5F;
                      JSR CODE_00AFC0                           ;;AEF9|AF5B+AF44/AF60\AF62;
                      LDA.B !_4                                 ;;AEFC|AF5E+AF47/AF63\AF65;
                      STA.W !CopyPalette,X                      ;;AEFE|AF60+AF49/AF65\AF67;
                      DEX                                       ;;AF01|AF63+AF4C/AF68\AF6A;
                      DEX                                       ;;AF02|AF64+AF4D/AF69\AF6B;
                      DEC.B !_0                                 ;;AF03|AF65+AF4E/AF6A\AF6C;
                      BNE -                                     ;;AF05|AF67+AF50/AF6C\AF6E;
                      TXA                                       ;;AF07|AF69+AF52/AF6E\AF70;
                      SEC                                       ;;AF08|AF6A+AF53/AF6F\AF71;
                      SBC.W #$0012                              ;;AF09|AF6B+AF54/AF70\AF72;
                      TAX                                       ;;AF0C|AF6E+AF57/AF73\AF75;
                      BPL CODE_00AF4E                           ;;AF0D|AF6F+AF58/AF74\AF76;
                      LDX.W #$0004                              ;;AF0F|AF71+AF5A/AF76\AF78;
                    - LDA.W !CopyPalette+$1A,X                  ;;AF12|AF74+AF5D/AF79\AF7B;
                      STA.B !_2                                 ;;AF15|AF77+AF60/AF7C\AF7E;
                      LDA.W !MainPalette+$1A,X                  ;;AF17|AF79+AF62/AF7E\AF80;
                      JSR CODE_00AFC0                           ;;AF1A|AF7C+AF65/AF81\AF83;
                      LDA.B !_4                                 ;;AF1D|AF7F+AF68/AF84\AF86;
                      STA.W !CopyPalette+$1A,X                  ;;AF1F|AF81+AF6A/AF86\AF88;
                      DEX                                       ;;AF22|AF84+AF6D/AF89\AF8B;
                      DEX                                       ;;AF23|AF85+AF6E/AF8A\AF8C;
                      BPL -                                     ;;AF24|AF86+AF6F/AF8B\AF8D;
                      LDA.W !BackgroundColor                    ;;AF26|AF88+AF71/AF8D\AF8F;
                      STA.B !_2                                 ;;AF29|AF8B+AF74/AF90\AF92;
                      LDA.W !CopyBGColor                        ;;AF2B|AF8D+AF76/AF92\AF94;
                      JSR CODE_00AFC0                           ;;AF2E|AF90+AF79/AF95\AF97;
                      LDA.B !_4                                 ;;AF31|AF93+AF7C/AF98\AF9A;
                      STA.W !BackgroundColor                    ;;AF33|AF95+AF7E/AF9A\AF9C;
                      SEP #$30                                  ;;AF36|AF98+AF81/AF9D\AF9F; Index (8 bit) Accum (8 bit) 
                      STZ.W !CopyPalette+$100                   ;;AF38|AF9A+AF83/AF9F\AFA1;
                      LDA.B #$03                                ;;AF3B|AF9D+AF86/AFA2\AFA4;
                      STA.W !PaletteIndexTable                  ;;AF3D|AF9F+AF88/AFA4\AFA6;
Return00AFA2:         RTS                                       ;;AF40|AFA2+AF8B/AFA7\AFA9; Return 
                                                                ;;                        ;
CODE_00AFA3:          TAY                                       ;;AF41|AFA3+AF8C/AFA8\AFAA;
                      INC A                                     ;;AF42|AFA4+AF8D/AFA9\AFAB;
                      INC A                                     ;;AF43|AFA5+AF8E/AFAA\AFAC;
                      STA.W !ColorFadeTimer                     ;;AF44|AFA6+AF8F/AFAB\AFAD;
                      TYA                                       ;;AF47|AFA9+AF92/AFAE\AFB0;
                      LSR A                                     ;;AF48|AFAA+AF93/AFAF\AFB1;
                      LSR A                                     ;;AF49|AFAB+AF94/AFB0\AFB2;
                      LSR A                                     ;;AF4A|AFAC+AF95/AFB1\AFB3;
                      LSR A                                     ;;AF4B|AFAD+AF96/AFB2\AFB4;
                      REP #$30                                  ;;AF4C|AFAE+AF97/AFB3\AFB5; Index (16 bit) Accum (16 bit) 
                      AND.W #$0002                              ;;AF4E|AFB0+AF99/AFB5\AFB7;
                      STA.B !_C                                 ;;AF51|AFB3+AF9C/AFB8\AFBA;
                      TYA                                       ;;AF53|AFB5+AF9E/AFBA\AFBC;
                      AND.W #$001E                              ;;AF54|AFB6+AF9F/AFBB\AFBD;
                      TAY                                       ;;AF57|AFB9+AFA2/AFBE\AFC0;
                      LDA.W DATA_00AEF7,Y                       ;;AF58|AFBA+AFA3/AFBF\AFC1;
                      STA.B !_E                                 ;;AF5B|AFBD+AFA6/AFC2\AFC4;
                      RTS                                       ;;AF5D|AFBF+AFA8/AFC4\AFC6; Return 
                                                                ;;                        ;
CODE_00AFC0:          STA.B !_A                                 ;;AF5E|AFC0+AFA9/AFC5\AFC7;
                      AND.W #$001F                              ;;AF60|AFC2+AFAB/AFC7\AFC9;
                      ASL A                                     ;;AF63|AFC5+AFAE/AFCA\AFCC;
                      ASL A                                     ;;AF64|AFC6+AFAF/AFCB\AFCD;
                      STA.B !_6                                 ;;AF65|AFC7+AFB0/AFCC\AFCE;
                      LDA.B !_A                                 ;;AF67|AFC9+AFB2/AFCE\AFD0;
                      AND.W #$03E0                              ;;AF69|AFCB+AFB4/AFD0\AFD2;
                      LSR A                                     ;;AF6C|AFCE+AFB7/AFD3\AFD5;
                      LSR A                                     ;;AF6D|AFCF+AFB8/AFD4\AFD6;
                      LSR A                                     ;;AF6E|AFD0+AFB9/AFD5\AFD7;
                      STA.B !_8                                 ;;AF6F|AFD1+AFBA/AFD6\AFD8;
                      LDA.B !_B                                 ;;AF71|AFD3+AFBC/AFD8\AFDA;
                      AND.W #$007C                              ;;AF73|AFD5+AFBE/AFDA\AFDC;
                      STA.B !_A                                 ;;AF76|AFD8+AFC1/AFDD\AFDF;
                      STZ.B !_4                                 ;;AF78|AFDA+AFC3/AFDF\AFE1;
                      LDY.W #$0004                              ;;AF7A|AFDC+AFC5/AFE1\AFE3;
CODE_00AFDF:          PHY                                       ;;AF7D|AFDF+AFC8/AFE4\AFE6;
                      LDA.W !_6,Y                               ;;AF7E|AFE0+AFC9/AFE5\AFE7;
                      ORA.B !_C                                 ;;AF81|AFE3+AFCC/AFE8\AFEA;
                      TAY                                       ;;AF83|AFE5+AFCE/AFEA\AFEC;
                      LDA.W DATA_00AE77,Y                       ;;AF84|AFE6+AFCF/AFEB\AFED;
                      PLY                                       ;;AF87|AFE9+AFD2/AFEE\AFF0;
                      AND.B !_E                                 ;;AF88|AFEA+AFD3/AFEF\AFF1;
                      BEQ +                                     ;;AF8A|AFEC+AFD5/AFF1\AFF3;
                      LDA.W DATA_00AE6B,Y                       ;;AF8C|AFEE+AFD7/AFF3\AFF5;
                      BIT.W !EndLevelTimer                      ;;AF8F|AFF1+AFDA/AFF6\AFF8;
                      BPL +                                     ;;AF92|AFF4+AFDD/AFF9\AFFB;
                      LDA.W DATA_00AE71,Y                       ;;AF94|AFF6+AFDF/AFFB\AFFD;
                    + CLC                                       ;;AF97|AFF9+AFE2/AFFE\B000;
                      ADC.B !_2                                 ;;AF98|AFFA+AFE3/AFFF\B001;
                      AND.W DATA_00AE65,Y                       ;;AF9A|AFFC+AFE5/B001\B003;
                      TSB.B !_4                                 ;;AF9D|AFFF+AFE8/B004\B006;
                      DEY                                       ;;AF9F|B001+AFEA/B006\B008;
                      DEY                                       ;;AFA0|B002+AFEB/B007\B009;
                      BPL CODE_00AFDF                           ;;AFA1|B003+AFEC/B008\B00A;
                      RTS                                       ;;AFA3|B005+AFEE/B00A\B00C; Return 
                                                                ;;                        ;
CODE_00B006:          PHB                                       ;;AFA4|B006+AFEF/B00B\B00D;
                      PHK                                       ;;AFA5|B007+AFF0/B00C\B00E;
                      PLB                                       ;;AFA6|B008+AFF1/B00D\B00F;
                      JSR CODE_00AFA3                           ;;AFA7|B009+AFF2/B00E\B010;
                      LDX.W #$006E                              ;;AFAA|B00C+AFF5/B011\B013;
CODE_00B00F:          LDY.W #$0008                              ;;AFAD|B00F+AFF8/B014\B016;
                    - LDA.W !CopyPalette+2,X                    ;;AFB0|B012+AFFB/B017\B019;
                      STA.B !_2                                 ;;AFB3|B015+AFFE/B01A\B01C;
                      LDA.W !MainPalette+$80,X                  ;;AFB5|B017+B000/B01C\B01E;
                      PHY                                       ;;AFB8|B01A+B003/B01F\B021;
                      JSR CODE_00AFC0                           ;;AFB9|B01B+B004/B020\B022;
                      PLY                                       ;;AFBC|B01E+B007/B023\B025;
                      LDA.B !_4                                 ;;AFBD|B01F+B008/B024\B026;
                      STA.W !CopyPalette+2,X                    ;;AFBF|B021+B00A/B026\B028;
                      LDA.W !MainPalette+$80,X                  ;;AFC2|B024+B00D/B029\B02B;
                      SEC                                       ;;AFC5|B027+B010/B02C\B02E;
                      SBC.B !_4                                 ;;AFC6|B028+B011/B02D\B02F;
                      STA.W !CopyPalette+$74,X                  ;;AFC8|B02A+B013/B02F\B031;
                      DEX                                       ;;AFCB|B02D+B016/B032\B034;
                      DEX                                       ;;AFCC|B02E+B017/B033\B035;
                      DEY                                       ;;AFCD|B02F+B018/B034\B036;
                      BNE -                                     ;;AFCE|B030+B019/B035\B037;
                      TXA                                       ;;AFD0|B032+B01B/B037\B039;
                      SEC                                       ;;AFD1|B033+B01C/B038\B03A;
                      SBC.W #$0010                              ;;AFD2|B034+B01D/B039\B03B;
                      TAX                                       ;;AFD5|B037+B020/B03C\B03E;
                      BPL CODE_00B00F                           ;;AFD6|B038+B021/B03D\B03F;
                      SEP #$30                                  ;;AFD8|B03A+B023/B03F\B041; Index (8 bit) Accum (8 bit) 
                      PLB                                       ;;AFDA|B03C+B025/B041\B043;
                      RTL                                       ;;AFDB|B03D+B026/B042\B044; Return 
                                                                ;;                        ;
CODE_00B03E:          JSR CODE_00AF35                           ;;AFDC|B03E+B027/B043\B045;
                      LDA.W !PaletteIndexTable                  ;;AFDF|B041+B02A/B046\B048;
                      CMP.B #$03                                ;;AFE2|B044+B02D/B049\B04B;
                      BNE Return00B090                          ;;AFE4|B046+B02F/B04B\B04D;
                      LDA.B #$00                                ;;AFE6|B048+B031/B04D\B04F;
                      STA.B !_2                                 ;;AFE8|B04A+B033/B04F\B051;
                      REP #$30                                  ;;AFEA|B04C+B035/B051\B053; Index (16 bit) Accum (16 bit) 
                      LDA.W !PlayerPalletePtr                   ;;AFEC|B04E+B037/B053\B055;
                      STA.B !_0                                 ;;AFEF|B051+B03A/B056\B058;
                      LDY.W #$0014                              ;;AFF1|B053+B03C/B058\B05A;
                    - LDA.B [!_0],Y                             ;;AFF4|B056+B03F/B05B\B05D;
                      STA.W !CopyPalette+$10C,Y                 ;;AFF6|B058+B041/B05D\B05F;
                      DEY                                       ;;AFF9|B05B+B044/B060\B062;
                      DEY                                       ;;AFFA|B05C+B045/B061\B063;
                      BPL -                                     ;;AFFB|B05D+B046/B062\B064;
                      LDA.W #$81EE                              ;;AFFD|B05F+B048/B064\B066;
                      STA.W !CopyPalette+$100                   ;;B000|B062+B04B/B067\B069;
                      LDX.W #$00CE                              ;;B003|B065+B04E/B06A\B06C;
CODE_00B068:          LDA.W #$0007                              ;;B006|B068+B051/B06D\B06F;
                      STA.B !_0                                 ;;B009|B06B+B054/B070\B072;
                    - LDA.W !CopyPalette+$120,X                 ;;B00B|B06D+B056/B072\B074;
                      STA.B !_2                                 ;;B00E|B070+B059/B075\B077;
                      LDA.W !MainPalette+$120,X                 ;;B010|B072+B05B/B077\B079;
                      JSR CODE_00AFC0                           ;;B013|B075+B05E/B07A\B07C;
                      LDA.B !_4                                 ;;B016|B078+B061/B07D\B07F;
                      STA.W !CopyPalette+$120,X                 ;;B018|B07A+B063/B07F\B081;
                      DEX                                       ;;B01B|B07D+B066/B082\B084;
                      DEX                                       ;;B01C|B07E+B067/B083\B085;
                      DEC.B !_0                                 ;;B01D|B07F+B068/B084\B086;
                      BNE -                                     ;;B01F|B081+B06A/B086\B088;
                      TXA                                       ;;B021|B083+B06C/B088\B08A;
                      SEC                                       ;;B022|B084+B06D/B089\B08B;
                      SBC.W #$0012                              ;;B023|B085+B06E/B08A\B08C;
                      TAX                                       ;;B026|B088+B071/B08D\B08F;
                      BPL CODE_00B068                           ;;B027|B089+B072/B08E\B090;
                      SEP #$30                                  ;;B029|B08B+B074/B090\B092; Index (8 bit) Accum (8 bit) 
                      STZ.W !Empty0AF5                          ;;B02B|B08D+B076/B092\B094;
Return00B090:         RTS                                       ;;B02E|B090+B079/B095\B097; Return 
                                                                ;;                        ;
                      %insert_empty($11,$0F,$36,$1D,$1B)        ;;B02F|B091+B07A/B096\B098;
                                                                ;;                        ;
BackAreaColors:       dw $5B9F,$6FFB,$5D80,$0000                ;;B040|B0A0+B0B0/B0B3\B0B3; back area colors
                      dw $1D22,$24C3,$7393,$7FFF                ;;B048|B0A8+B0B8/B0BB\B0BB;
                                                                ;;                        ;
BackgroundPalettes:   dw $3A49,$428B,$4ACD,$530F                ;;B050|B0B0+B0C0/B0C3\B0C3; BG Palette 0
                      dw $5B51,$6393,$7FFF,$0000                ;;B058|B0B8+B0C8/B0CB\B0CB;
                      dw $7F20,$7F80,$7FE0,$7FE0                ;;B060|B0C0+B0D0/B0D3\B0D3;
                                                                ;;                        ;
                      dw $3942,$5208,$6ACE,$6312                ;;B068|B0C8+B0D8/B0DB\B0DB; BG Palette 1
                      dw $6B55,$7398,$3942,$5208                ;;B070|B0D0+B0E0/B0E3\B0E3;
                      dw $6ACE,$3942,$5208,$6ACE                ;;B078|B0D8+B0E8/B0EB\B0EB;
                                                                ;;                        ;
                      dw $4ED6,$5718,$5F5A,$679C                ;;B080|B0E0+B0F0/B0F3\B0F3; BG Palette 2
                      dw $6FDE,$77FF,$7FFF,$0000                ;;B088|B0E8+B0F8/B0FB\B0FB;
                      dw $7F20,$7F80,$7FE0,$7FE0                ;;B090|B0F0+B100/B103\B103;
                                                                ;;                        ;
                      dw $20A3,$3148,$3DAC,$39CE                ;;B098|B0F8+B108/B10B\B10B; BG Palette 3
                      dw $3E32,$4AB6,$20A2,$2D25                ;;B0A0|B100+B110/B113\B113;
                      dw $3568,$358A,$24E4,$4A52                ;;B0A8|B108+B118/B11B\B11B;
                                                                ;;                        ;
                      dw $50C8,$59CC,$526D,$58EB                ;;B0B0|B110+B120/B123\B123; BG Palette 4
                      dw $654C,$5AD0,$5D80,$7F39                ;;B0B8|B118+B128/B12B\B12B;
                      dw $7E93,$65A8,$5648,$5728                ;;B0C0|B120+B130/B133\B133;
                                                                ;;                        ;
                      dw $1462,$3546,$45A9,$520D                ;;B0C8|B128+B138/B13B\B13B; BG Palette 5
                      dw $62B1,$7B77,$0000,$7B1E                ;;B0D0|B130+B140/B143\B143;
                      dw $7B9F,$7F99,$7FF6,$7FFC                ;;B0D8|B138+B148/B14B\B14B;
                                                                ;;                        ;
                      dw $0000,$24C5,$2D49,$2DAD                ;;B0E0|B140+B150/B153\B153; BG Palette 6
                      dw $2253,$3F18,$1060,$1881                ;;B0E8|B148+B158/B15B\B15B;
                      dw $1CA3,$1CE4,$2909,$254B                ;;B0F0|B150+B160/B163\B163;
                                                                ;;                        ;
                      dw $0960,$01A4,$01E8,$022C                ;;B0F8|B158+B168/B16B\B16B; BG Palette 7
                      dw $0291,$02F5,$7FFF,$0000                ;;B100|B160+B170/B173\B173;
                      dw $7EE0,$7F20,$7F80,$7FE0                ;;B108|B168+B178/B17B\B17B;
                                                                ;;                        ;
StatusBarColors:      dw $7393,$0000,$0CFB,$2FEB                ;;B110|B170+B180/B183\B183; Palette 0 colors 8-F
                      dw $7393,$0000,$7FDD,$2D7F                ;;B118|B178+B188/B18B\B18B;
                                                                ;;                        ;
                      dw $7393,$0000,$7AAB,$7FFF                ;;B120|B180+B190/B193\B193; Palette 1 colors 8-F
                      dw $7393,$0000,$1E9B,$3B7F                ;;B128|B188+B198/B19B\B19B;
                                                                ;;                        ;
ForegroundPalettes:   dw $0000,$0DAF,$2E79,$25E0                ;;B130|B190+B1A0/B1A3\B1A3; FG Palette 0
                      dw $2B1C,$0320                            ;;B138|B198+B1A8/B1AB\B1AB;
                      dw $0000,$2D6B,$3DEF,$4E73                ;;B13C|B19C+B1AC/B1AF\B1AF;
                      dw $6318,$739C                            ;;B144|B1A4+B1B4/B1B7\B1B7;
                                                                ;;                        ;
                      dw $0000,$00E9,$220D,$058E                ;;B148|B1A8+B1B8/B1BB\B1BB; FG Palette 1
                      dw $1A33,$32B7                            ;;B150|B1B0+B1C0/B1C3\B1C3;
                      dw $0000,$2DE0,$52E0,$157F                ;;B154|B1B4+B1C4/B1C7\B1C7;
                      dw $325F,$4B3F                            ;;B15C|B1BC+B1CC/B1CF\B1CF;
                                                                ;;                        ;
                      dw $0000,$59C8,$72CE,$39CB                ;;B160|B1C0+B1D0/B1D3\B1D3; FG Palette 2
                      dw $3E30,$4AB3                            ;;B168|B1C8+B1D8/B1DB\B1DB;
                      dw $0000,$0016,$001B,$015F                ;;B16C|B1CC+B1DC/B1DF\B1DF;
                      dw $021F,$031F                            ;;B174|B1D4+B1E4/B1E7\B1E7;
                                                                ;;                        ;
                      dw $0000,$49EC,$524F,$5AB2                ;;B178|B1D8+B1E8/B1EB\B1EB; FG Palette 3
                      dw $6715,$7FDB                            ;;B180|B1E0+B1F0/B1F3\B1F3;
                      dw $0000,$0016,$001B,$015F                ;;B184|B1E4+B1F4/B1F7\B1F7;
                      dw $021F,$031F                            ;;B18C|B1EC+B1FC/B1FF\B1FF;
                                                                ;;                        ;
                      dw $0000,$08C9,$194E,$29D3                ;;B190|B1F0+B200/B203\B203; FG Palette 4
                      dw $3E78,$531D                            ;;B198|B1F8+B208/B20B\B20B;
                      dw $0000,$14C8,$1D09,$296C                ;;B19C|B1FC+B20C/B20F\B20F;
                      dw $35CF,$4232                            ;;B1A4|B204+B214/B217\B217;
                                                                ;;                        ;
                      dw $55EF,$6EB5,$76F7,$7F39                ;;B1A8|B208+B218/B21B\B21B; FG Palette 5
                      dw $7F7B,$7FBD                            ;;B1B0|B210+B220/B223\B223;
                      dw $0000,$2CC9,$414E,$55D3                ;;B1B4|B214+B224/B227\B227;
                      dw $6E78,$7F1D                            ;;B1BC|B21C+B22C/B22F\B22F;
                                                                ;;                        ;
                      dw $0000,$01E9,$02AC,$032F                ;;B1C0|B220+B230/B233\B233; FG Palette 6
                      dw $0399,$53FE                            ;;B1C8|B228+B238/B23B\B23B;
                      dw $0000,$0000,$0000,$3C8F                ;;B1CC|B22C+B23C/B23F\B23F;
                      dw $61D8,$7E7F                            ;;B1D4|B234+B244/B247\B247;
                                                                ;;                        ;
                      dw $0000,$24C5,$2D49,$2DAD                ;;B1D8|B238+B248/B24B\B24B; FG Palette 7
                      dw $2253,$3F18                            ;;B1E0|B240+B250/B253\B253;
                      dw $0000,$0016,$001B,$015F                ;;B1E4|B244+B254/B257\B257;
                      dw $021F,$031F                            ;;B1EC|B24C+B25C/B25F\B25F;
                                                                ;;                        ;
StandardColors:       dw $39CE,$0000,$6318,$7F34                ;;B1F0|B250+B260/B263\B263; Palette 4 Colors 2-7
                      dw $7F95,$7FF8                            ;;B1F8|B258+B268/B26B\B26B;
                                                                ;;                        ;
                      dw $0000,$32B7,$67FB,$0200                ;;B1FC|B25C+B26C/B26F\B26F; Palette 5 Colors 2-7
                      dw $0320,$03E0                            ;;B204|B264+B274/B277\B277;
                                                                ;;                        ;
                      dw $0000,$0D71,$7C3F,$1E9B                ;;B208|B268+B278/B27B\B27B; Palette 6 Colors 2-7
                      dw $137F,$03FF                            ;;B210|B270+B280/B283\B283;
                                                                ;;                        ;
                      dw $0000,$2817,$401F,$4529                ;;B214|B274+B284/B287\B287; Palette 7 Colors 2-7
                      dw $59AD,$6610                            ;;B21C|B27C+B28C/B28F\B28F;
                                                                ;;                        ;
                      dw $0000,$0D71,$1E9B,$3B7F                ;;B220|B280+B290/B293\B293; Palette 8 Colors 2-7
                      dw $7FFF,$7FFF                            ;;B228|B288+B298/B29B\B29B;
                                                                ;;                        ;
                      dw $0000,$39CE,$5294,$6318                ;;B22C|B28C+B29C/B29F\B29F; Palette 9 Colors 2-7
                      dw $739C,$2C5F                            ;;B234|B294+B2A4/B2A7\B2A7;
                                                                ;;                        ;
                      dw $0000,$01FF,$031F,$03FF                ;;B238|B298+B2A8/B2AB\B2AB; Palette A Colors 2-7
                      dw $00B7,$023F                            ;;B240|B2A0+B2B0/B2B3\B2B3;
                                                                ;;                        ;
                      dw $0000,$6D08,$6DAD,$7E31                ;;B244|B2A4+B2B4/B2B7\B2B7; Palette B Colors 2-7
                      dw $00B7,$023F                            ;;B24C|B2AC+B2BC/B2BF\B2BF;
                                                                ;;                        ;
                      dw $0000,$0011,$0017,$001F                ;;B250|B2B0+B2C0/B2C3\B2C3; Palette C Colors 2-7
                      dw $00B7,$023F                            ;;B258|B2B8+B2C8/B2CB\B2CB;
                                                                ;;                        ;
                      dw $0000,$01E0,$02E0,$03E0                ;;B25C|B2BC+B2CC/B2CF\B2CF; Palette D Colors 2-7
                      dw $00B7,$023F                            ;;B264|B2C4+B2D4/B2D7\B2D7;
                                                                ;;                        ;
PlayerColors:         dw $635F,$581D,$000A,$391F                ;;B268|B2C8+B2D8/B2DB\B2DB; Mario Palette
                      dw $44C4,$4E08,$6770,$30B6                ;;B270|B2D0+B2E0/B2E3\B2E3;
                      dw $35DF,$03FF                            ;;B278|B2D8+B2E8/B2EB\B2EB;
                                                                ;;                        ;
                      dw $4F3F,$581D,$1140,$3FE0                ;;B27C|B2DC+B2EC/B2EF\B2EF; Luigi Palette
                      dw $3C07,$7CAE,$7DB3,$2F00                ;;B284|B2E4+B2F4/B2F7\B2F7;
                      dw $165F,$03FF                            ;;B28C|B2EC+B2FC/B2FF\B2FF;
                                                                ;;                        ;
                      dw $635F,$581D,$2529,$7FFF                ;;B290|B2F0+B300/B303\B303; Fire Mario Palette
                      dw $0008,$0017,$001F,$577B                ;;B298|B2F8+B308/B30B\B30B;
                      dw $0DDF,$03FF                            ;;B2A0|B300+B310/B313\B313;
                                                                ;;                        ;
                      dw $3B1F,$581D,$2529,$7FFF                ;;B2A4|B304+B314/B317\B317; Fire Luigi Palette
                      dw $1140,$01E0,$02E0,$577B                ;;B2AC|B30C+B31C/B31F\B31F;
                      dw $0DDF,$03FF                            ;;B2B4|B314+B324/B327\B327;
                                                                ;;                        ;
SpriteColors:         dw $0000,$24C5,$2D49,$2DAD                ;;B2B8|B318+B328/B32B\B32B; Sprite Palette 0
                      dw $2253,$3F18                            ;;B2C0|B320+B330/B333\B333;
                      dw $2523,$35C4,$3E25,$4686                ;;B2C4|B324+B334/B337\B337;
                      dw $4EE7,$401F                            ;;B2CC|B32C+B33C/B33F\B33F;
                                                                ;;                        ;
                      dw $0000,$41C6,$7354,$7FFA                ;;B2D0|B330+B340/B343\B343; Sprite Palette 1
                      dw $7FFD,$6D08                            ;;B2D8|B338+B348/B34B\B34B;
                      dw $0000,$3434,$443A,$659F                ;;B2DC|B33C+B34C/B34F\B34F;
                      dw $0116,$027F                            ;;B2E4|B344+B354/B357\B357;
                                                                ;;                        ;
                      dw $0000,$24C5,$2D49,$2DAD                ;;B2E8|B348+B358/B35B\B35B; Sprite Palette 2
                      dw $2253,$3F18                            ;;B2F0|B350+B360/B363\B363;
                      dw $0000,$2DAE,$3E32,$4AB6                ;;B2F4|B354+B364/B367\B367;
                      dw $52F9,$2CF3                            ;;B2FC|B35C+B36C/B36F\B36F;
                                                                ;;                        ;
                      dw $0000,$516B,$4E6D,$4FB3                ;;B300|B360+B370/B373\B373; Sprite Palette 3
                      dw $30BF,$371D                            ;;B308|B368+B378/B37B\B37B;
                      dw $2E32,$4A0D,$1088,$214A                ;;B30C|B36C+B37C/B37F\B37F;
                      dw $296D,$3DCF                            ;;B314|B374+B384/B387\B387;
                                                                ;;                        ;
                      dw $0000,$2940,$3DE0,$5280                ;;B318|B378+B388/B38B\B38B; Sprite Palette 4
                      dw $00B7,$023F                            ;;B320|B380+B390/B393\B393;
                      dw $0000,$39CE,$5294,$6318                ;;B324|B384+B394/B397\B397;
                      dw $00B7,$023F                            ;;B32C|B38C+B39C/B39F\B39F;
                                                                ;;                        ;
                      dw $0000,$7E70,$7ED3,$7F36                ;;B330|B390+B3A0/B3A3\B3A3; Sprite Palette 5
                      dw $7F99,$401F                            ;;B338|B398+B3A8/B3AB\B3AB;
                      dw $0000,$39CE,$5294,$6318                ;;B33C|B39C+B3AC/B3AF\B3AF;
                      dw $739C,$2C5F                            ;;B344|B3A4+B3B4/B3B7\B3B7;
                                                                ;;                        ;
                      dw $0000,$4EDF,$5ADE,$66BD                ;;B348|B3A8+B3B8/B3BB\B3BB; Sprite Palette 6
                      dw $727C,$401F                            ;;B350|B3B0+B3C0/B3C3\B3C3;
                      dw $0000,$7FF5,$7FF7,$7FF9                ;;B354|B3B4+B3C4/B3C7\B3C7;
                      dw $7FFC,$7FFF                            ;;B35C|B3BC+B3CC/B3CF\B3CF;
                                                                ;;                        ;
                      dw $0000,$63FB,$030C,$020B                ;;B360|B3C0+B3D0/B3D3\B3D3; Sprite Palette 7
                      dw $1535,$1A5F                            ;;B368|B3C8+B3D8/B3DB\B3DB;
                      dw $0000,$3434,$443A,$659F                ;;B36C|B3CC+B3DC/B3DF\B3DF;
                      dw $0116,$027F                            ;;B374|B3D4+B3E4/B3E7\B3E7;
                                                                ;;                        ;
OverworldColors:      dw $0000,$1228,$12A8,$1348                ;;B378|B3D8+B3E8/B3EB\B3EB; Yoshi's Island
                      dw $327B,$5BBF,$7D60                      ;;B380|B3E0+B3F0/B3F3\B3F3;
                      dw $0000,$7BDE,$1348,$7D60                ;;B386|B3E6+B3F6/B3F9\B3F9;
                      dw $327B,$37BF,$2D7F                      ;;B38E|B3EE+B3FE/B401\B401;
                      dw $0000,$3268,$32E8,$1348                ;;B394|B3F4+B404/B407\B407;
                      dw $5EFF,$6F7F,$7D60                      ;;B39C|B3FC+B40C/B40F\B40F;
                      dw $0000,$7BDE,$573B,$7EA0                ;;B3A2|B402+B412/B415\B415;
                      dw $01F6,$12A8,$1348                      ;;B3AA|B40A+B41A/B41D\B41D;
                                                                ;;                        ;
                      dw $0000,$1228,$12A8,$1348                ;;B3B0|B410+B420/B423\B423; Main Overworld
                      dw $327B,$5BBF,$7E28                      ;;B3B8|B418+B428/B42B\B42B;
                      dw $0000,$7BDE,$1348,$7E28                ;;B3BE|B41E+B42E/B431\B431;
                      dw $327B,$37BF,$03FF                      ;;B3C6|B426+B436/B439\B439;
                      dw $0000,$3212,$3E75,$573B                ;;B3CC|B42C+B43C/B43F\B43F;
                      dw $327B,$5BBF,$7E28                      ;;B3D4|B434+B444/B447\B447;
                      dw $0000,$7BDE,$573B,$7E28                ;;B3DA|B43A+B44A/B44D\B44D;
                      dw $327B,$38C4,$1348                      ;;B3E2|B442+B452/B455\B455;
                                                                ;;                        ;
                      dw $2CC7,$69F0,$66B2,$67D5                ;;B3E8|B448+B458/B45B\B45B; Star World
                      dw $6634,$53DE,$7FFF                      ;;B3F0|B450+B460/B463\B463;
                      dw $2CC7,$4560,$6680,$7FF7                ;;B3F6|B456+B466/B469\B469;
                      dw $031F,$037F,$47FF                      ;;B3FE|B45E+B46E/B471\B471;
                      dw $412C,$69F0,$66B2,$67D5                ;;B404|B464+B474/B477\B477;
                      dw $001F,$7FFF,$2CC7                      ;;B40C|B46C+B47C/B47F\B47F;
                      dw $2CC7,$69F0,$66B2,$67D5                ;;B412|B472+B482/B485\B485;
                      dw $412C,$3AD5,$5B9C                      ;;B41A|B47A+B48A/B48D\B48D;
                                                                ;;                        ;
                      dw $0000,$49EC,$562E,$62F1                ;;B420|B480+B490/B493\B493; Vanilla Dome & Valley of Bowser
                      dw $3126,$5BBF,$0000                      ;;B428|B488+B498/B49B\B49B;
                      dw $0000,$7BDE,$5795,$7E28                ;;B42E|B48E+B49E/B4A1\B4A1;
                      dw $3126,$37BF,$2D7F                      ;;B436|B496+B4A6/B4A9\B4A9;
                      dw $0000,$3126,$3D89,$49EC                ;;B43C|B49C+B4AC/B4AF\B4AF;
                      dw $3126,$5BBF,$7E28                      ;;B444|B4A4+B4B4/B4B7\B4B7;
                      dw $0000,$7BDE,$573B,$32C6                ;;B44A|B4AA+B4BA/B4BD\B4BD;
                      dw $3126,$037F,$037F                      ;;B452|B4B2+B4C2/B4C5\B4C5;
                                                                ;;                        ;
                      dw $0000,$1A05,$0AC5,$22EF                ;;B458|B4B8+B4C8/B4CB\B4CB; Forest of Illusion
                      dw $1A75,$4359,$7D60                      ;;B460|B4C0+B4D0/B4D3\B4D3;
                      dw $0000,$7739,$22EF,$7D60                ;;B466|B4C6+B4D6/B4D9\B4D9;
                      dw $1E18,$375C,$7E09                      ;;B46E|B4CE+B4DE/B4E1\B4E1;
                      dw $0000,$3660,$4B20,$22EF                ;;B474|B4D4+B4E4/B4E7\B4E7;
                      dw $4E5A,$533A,$7D60                      ;;B47C|B4DC+B4EC/B4EF\B4EF;
                      dw $0000,$327B,$22EF,$2119                ;;B482|B4E2+B4F2/B4F5\B4F5;
                      dw $01F6,$2DE6,$36A8                      ;;B48A|B4EA+B4FA/B4FD\B4FD;
                                                                ;;                        ;
                      dw $2CC7,$69F0,$0000,$0000                ;;B490|B4F0+B500/B503\B503; Special World
                      dw $6634,$7FF9,$7FFF                      ;;B498|B4F8+B508/B50B\B50B;
                      dw $0000,$4560,$6680,$7FF7                ;;B49E|B4FE+B50E/B511\B511;
                      dw $031F,$037F,$47FF                      ;;B4A6|B506+B516/B519\B519;
                      dw $412C,$69F0,$66B2,$67D5                ;;B4AC|B50C+B51C/B51F\B51F;
                      dw $001F,$7FFF,$2CC7                      ;;B4B4|B514+B524/B527\B527;
                      dw $2CC7,$69F0,$66B2,$67D5                ;;B4BA|B51A+B52A/B52D\B52D;
                      dw $412C,$3AD5,$5B9C                      ;;B4C2|B522+B532/B535\B535;
                                                                ;;                        ;
OWStdColors:          dw $0000,$2CE7,$3D6B,$4DEF                ;;B4C8|B528+B538/B53B\B53B; Palette 2 Colors 9-F
                      dw $5E73,$6EF7,$7FFF                      ;;B4D0|B530+B540/B543\B543;
                                                                ;;                        ;
                      dw $7FF1,$01BF,$7E00,$03BF                ;;B4D6|B536+B546/B549\B549; Palette 3 Colors 9-F
                      dw $03E0,$7FFC,$7FFF                      ;;B4DE|B53E+B54E/B551\B551;
                                                                ;;                        ;
                      dw $0000,$194F,$3E78,$573E                ;;B4E4|B544+B554/B557\B557; Palette 4 Colors 9-F
                      dw $7E20,$7EE0,$7FE0                      ;;B4EC|B54C+B55C/B55F\B55F;
                                                                ;;                        ;
                      dw $0000,$5231,$66F6,$7B9C                ;;B4F2|B552+B562/B565\B565; Palette 5 Colors 9-F
                      dw $1685,$2F4B,$47F1                      ;;B4FA|B55A+B56A/B56D\B56D;
                                                                ;;                        ;
                      dw $0000,$194F,$3E78,$573E                ;;B500|B560+B570/B573\B573; Palette 6 Colors 9-F
                      dw $03FF,$7BDE,$7C1F                      ;;B508|B568+B578/B57B\B57B;
                                                                ;;                        ;
                      dw $0000,$194F,$3E78,$573E                ;;B50E|B56E+B57E/B581\B581; Palette 7 Colors 9-F
                      dw $2D7F,$2F4B,$47F1                      ;;B516|B576+B586/B589\B589;
                                                                ;;                        ;
OWStdColors2:         dw $7FFF,$0000,$0D71,$037F                ;;B51C|B57C+B58C/B58F\B58F; Palette 8 Colors 1-7
                      dw $4FFF,$4F3F,$7FE0                      ;;B524|B584+B594/B597\B597;
                                                                ;;                        ;
                      dw $7FFF,$0000,$01E0,$7DAD                ;;B52A|B58A+B59A/B59D\B59D; Palette 9 Colors 1-7
                      dw $0380,$00B7,$023F                      ;;B532|B592+B5A2/B5A5\B5A5;
                                                                ;;                        ;
                      dw $7FFF,$0000,$0016,$001F                ;;B538|B598+B5A8/B5AB\B5AB; Palette A Colors 1-7
                      dw $6D08,$2DDD,$635F                      ;;B540|B5A0+B5B0/B5B3\B5B3;
                                                                ;;                        ;
                      dw $7FFF,$0000,$0280,$03E0                ;;B546|B5A6+B5B6/B5B9\B5B9; Palette B Colors 1-7
                      dw $6D08,$261A,$573B                      ;;B54E|B5AE+B5BE/B5C1\B5C1;
                                                                ;;                        ;
                      dw $7FFF,$0000,$7EE0,$7F20                ;;B554|B5B4+B5C4/B5C7\B5C7; Palette C Colors 1-7
                      dw $7F80,$7FE0,$7FE0                      ;;B55C|B5BC+B5CC/B5CF\B5CF;
                                                                ;;                        ;
                      dw $7FFF,$0000,$7EE0,$7F20                ;;B562|B5C2+B5D2/B5D5\B5D5; Palette D Colors 1-7
                      dw $7F80,$7FE0,$7FE0                      ;;B56A|B5CA+B5DA/B5DD\B5DD;
                                                                ;;                        ;
                      dw $0000,$001B,$462D,$5EF3                ;;B570|B5D0+B5E0/B5E3\B5E3; Palette E Colors 1-7
                      dw $1685,$2F4B,$47F1                      ;;B578|B5D8+B5E8/B5EB\B5EB;
                                                                ;;                        ;
OverworldLightning:   dw $0000,$2CE7,$3D6B,$4DEF                ;;B57E|B5DE+B5EE/B5F1\B5F1; Also Palette F Colors 1-7
                      dw $5E73,$6EF7,$7FFF                      ;;B586|B5E6+B5F6/B5F9\B5F9;
                                                                ;;                        ;
OverworldHudColors:   dw $7393,$0000,$03FF,$573B                ;;B58C|B5EC+B5FC/B5FF\B5FF; Palette 0 Colors 8-F
                      dw $7393,$3E75,$3212,$25AF                ;;B594|B5F4+B604/B607\B607;
                                                                ;;                        ;
                      dw $7393,$573B,$7FFF,$0000                ;;B59C|B5FC+B60C/B60F\B60F; Palette 1 Colors 8-F
                      dw $7393,$0000,$573B,$7E6C                ;;B5A4|B604+B614/B617\B617;
                                                                ;;                        ;
FlashingColors:       dw $02DF,$035F,$27FF,$5FFF                ;;B5AC|B60C+B61C/B61F\B61F; Flashing Yellow
                      dw $73FF,$5FFF,$27FF,$035F                ;;B5B4|B614+B624/B627\B627;
                                                                ;;                        ;
                      dw $01BF,$001F,$001B,$0018                ;;B5BC|B61C+B62C/B62F\B62F; Flashing Red
                      dw $0018,$001B,$001F,$01BF                ;;B5C4|B624+B634/B637\B637;
                                                                ;;                        ;
TitleScreenColors:    dw $437F,$0000,$7F60,$173F                ;;B5CC|B62C+B63C/B63F\B63F; Palette 0 Colors 8-F
                      dw $437F,$0000,$1CFF,$0320                ;;B5D4|B634+B644/B647\B647;
                                                                ;;                        ;
                      dw $437F,$0000,$0320,$7F60                ;;B5DC|B63C+B64C/B64F\B64F; Palette 1 Colors 8-F
                      dw $437F,$5BBF,$327B,$08E7                ;;B5E4|B644+B654/B657\B657;
                                                                ;;                        ;
                      dw $7E00,$7E20,$7EA0,$7EE0                ;;B5EC|B64C+B65C/B65F\B65F; Unknown Blue Gradient
                      dw $7F20,$7F80,$7FE0,$7FE0                ;;B5F4|B654+B664/B667\B667;
                                                                ;;                        ;
IggyLarryPlatColors:  dw $0000,$1CE0,$3DE8,$5EF0                ;;B5FC|B65C+B66C/B66F\B66F; Palette 0 Colors 0-7
                      dw $7FF8,$7FFF,$1685,$2F4B                ;;B604|B664+B674/B677\B677;
                                                                ;;                        ;
BigCrusherColors:     dw $7393,$0000,$0D71,$1E9B                ;;B60C|B66C+B67C/B67F\B67F; Palette 0 Colors C-F
                                                                ;;                        ;
BerryColors:          dw $7FFF,$0000,$0320,$0016                ;;B614|B674+B684/B687\B687; Palette 2,9 Colors 9-F
                      dw $001F,$017F,$029F                      ;;B61C|B67C+B68C/B68F\B68F;
                                                                ;;                        ;
                      dw $7FFF,$0000,$0320,$347D                ;;B622|B682+B692/B695\B695; Palette 3,A Colors 9-F
                      dw $551E,$65FF,$7B1F                      ;;B62A|B68A+B69A/B69D\B69D;
                                                                ;;                        ;
                      dw $7FFF,$0000,$0320,$0380                ;;B630|B690+B6A0/B6A3\B6A3; Palette 4,B Colors 9-F
                      dw $1FF1,$03F9,$4FFF                      ;;B638|B698+B6A8/B6AB\B6AB;
                                                                ;;                        ;
BowserColors:         dw $7FFF,$18C0,$63FB,$030C                ;;B63E|B69E+B6AE/B6B1\B6B1; Palette 0 Colors 1-7
                      dw $020B,$1535,$1A5F                      ;;B646|B6A6+B6B6/B6B9\B6B9;
                      dw $779B,$1860,$5B97,$02A8                ;;B64C|B6AC+B6BC/B6BF\B6BF;
                      dw $01A7,$0CD1,$11FB                      ;;B654|B6B4+B6C4/B6C7\B6C7;
                      dw $6F37,$1800,$5333,$0245                ;;B65A|B6BA+B6CA/B6CD\B6CD;
                      dw $0143,$046E,$0997                      ;;B662|B6C2+B6D2/B6D5\B6D5;
                      dw $66D3,$1000,$4ACF,$01E1                ;;B668|B6C8+B6D8/B6DB\B6DB;
                      dw $00E0,$000A,$0133                      ;;B670|B6D0+B6E0/B6E3\B6E3;
                      dw $5E6F,$0000,$426B,$0180                ;;B676|B6D6+B6E6/B6E9\B6E9;
                      dw $0080,$0006,$00CF                      ;;B67E|B6DE+B6EE/B6F1\B6F1;
                      dw $560B,$0000,$3A07,$0120                ;;B684|B6E4+B6F4/B6F7\B6F7;
                      dw $0020,$0002,$006B                      ;;B68C|B6EC+B6FC/B6FF\B6FF;
                      dw $4DA7,$0000,$31A3,$00C0                ;;B692|B6F2+B702/B705\B705;
                      dw $0000,$0000,$0007                      ;;B69A|B6FA+B70A/B70D\B70D;
                      dw $4543,$0000,$2940,$0060                ;;B6A0|B700+B710/B713\B713;
                      dw $0000,$0000,$0003                      ;;B6A8|B708+B718/B71B\B71B;
                                                                ;;                        ;
TheEndColors:         dw $44C4,$0320,$4ADF,$0200                ;;B6AE|B70E+B71E/B721\B721; Palette D Colors 2-7
                      dw $013B,$4E08                            ;;B6B6|B716+B726/B729\B729;
                                                                ;;                        ;
                      dw $44C4,$391F,$4ADF,$2874                ;;B6BA|B71A+B72A/B72D\B72D; Palette E Colors 2-7
                      dw $013F,$4E08                            ;;B6C2|B722+B732/B735\B735;
                                                                ;;                        ;
                      dw $28D2,$551E,$635F,$7B1F                ;;B6C6|B726+B736/B739\B739; Palette F Colors 2-7
                      dw $01FB,$02DE                            ;;B6CE|B72E+B73E/B741\B741;
                                                                ;;                        ;
OWSpecialColors:      dw $0000,$1533,$25B7,$363B                ;;B6D2|B732+B742/B745\B745; Yoshi's Island
                      dw $25AF,$5BBF,$5AC6                      ;;B6DA|B73A+B74A/B74D\B74D;
                      dw $0000,$7BDE,$363B,$5AC6                ;;B6E0|B740+B750/B753\B753;
                      dw $25AF,$37BF,$2D7F                      ;;B6E8|B748+B758/B75B\B75B;
                      dw $0000,$1533,$25B7,$363B                ;;B6EE|B74E+B75E/B761\B761;
                      dw $5EFF,$6F7F,$5AC6                      ;;B6F6|B756+B766/B769\B769;
                      dw $0000,$7BDE,$573B,$5AC6                ;;B6FC|B75C+B76C/B76F\B76F;
                      dw $25AF,$12A8,$1348                      ;;B704|B764+B774/B777\B777;
                                                                ;;                        ;
                      dw $0000,$25B7,$363B,$46BF                ;;B70A|B76A+B77A/B77D\B77D; Main Overworld
                      dw $25AF,$5B5F,$5AC6                      ;;B712|B772+B782/B785\B785;
                      dw $0000,$7BDE,$46BF,$5AC6                ;;B718|B778+B788/B78B\B78B;
                      dw $25AF,$37BF,$03FF                      ;;B720|B780+B790/B793\B793;
                      dw $0000,$1685,$2F4B,$47F1                ;;B726|B786+B796/B799\B799;
                      dw $25AF,$5B5F,$5AC6                      ;;B72E|B78E+B79E/B7A1\B7A1;
                      dw $0000,$7BDE,$573B,$5AC6                ;;B734|B794+B7A4/B7A7\B7A7;
                      dw $25AF,$38C4,$1348                      ;;B73C|B79C+B7AC/B7AF\B7AF;
                                                                ;;                        ;
                      dw $1CE7,$19F3,$32B9,$4B7F                ;;B742|B7A2+B7B2/B7B5\B7B5; Star World
                      dw $7610,$2EB9,$7FFF                      ;;B74A|B7AA+B7BA/B7BD\B7BD;
                      dw $1CE7,$4560,$6680,$7FF7                ;;B750|B7B0+B7C0/B7C3\B7C3;
                      dw $031F,$037F,$47FF                      ;;B758|B7B8+B7C8/B7CB\B7CB;
                      dw $1CE7,$19F3,$32B9,$4B7F                ;;B75E|B7BE+B7CE/B7D1\B7D1;
                      dw $001F,$7FFF,$1CE7                      ;;B766|B7C6+B7D6/B7D9\B7D9;
                      dw $1CE7,$19F3,$32B9,$4B7F                ;;B76C|B7CC+B7DC/B7DF\B7DF;
                      dw $58C6,$3AD5,$5B9C                      ;;B774|B7D4+B7E4/B7E7\B7E7;
                                                                ;;                        ;
                      dw $0000,$1D6D,$29D0,$3633                ;;B77A|B7DA+B7EA/B7ED\B7ED; Vanilla Dome & Valley of Bowser
                      dw $2D6B,$4EF9,$0000                      ;;B782|B7E2+B7F2/B7F5\B7F5;
                      dw $0000,$7BDE,$3633,$3082                ;;B788|B7E8+B7F8/B7FB\B7FB;
                      dw $2D6B,$37BF,$2D7F                      ;;B790|B7F0+B800/B803\B803;
                      dw $0000,$00A7,$152B,$218E                ;;B796|B7F6+B806/B809\B809;
                      dw $2D6B,$4EF9,$3082                      ;;B79E|B7FE+B80E/B811\B811;
                      dw $0000,$7BDE,$4EF9,$3082                ;;B7A4|B804+B814/B817\B817;
                      dw $2D6B,$3082,$1348                      ;;B7AC|B80C+B81C/B81F\B81F;
                                                                ;;                        ;
                      dw $0000,$2171,$31F5,$3279                ;;B7B2|B812+B822/B825\B825; Forest of Illusion
                      dw $41F6,$573B,$7D60                      ;;B7BA|B81A+B82A/B82D\B82D;
                      dw $0000,$7739,$3279,$7D60                ;;B7C0|B820+B830/B833\B833;
                      dw $1E18,$375C,$7E09                      ;;B7C8|B828+B838/B83B\B83B;
                      dw $0000,$3660,$4B20,$22EF                ;;B7CE|B82E+B83E/B841\B841;
                      dw $527A,$533A,$7D60                      ;;B7D6|B836+B846/B849\B849;
                      dw $0000,$218E,$3279,$2119                ;;B7DC|B83C+B84C/B84F\B84F;
                      dw $3E75,$1135,$1D98                      ;;B7E4|B844+B854/B857\B857;
                                                                ;;                        ;
                      dw $2CC7,$69F0,$0000,$0000                ;;B7EA|B84A+B85A/B85D\B85D; Special World
                      dw $6634,$7FF9,$7FFF                      ;;B7F2|B852+B862/B865\B865;
                      dw $0000,$4560,$6680,$7FF7                ;;B7F8|B858+B868/B86B\B86B;
                      dw $031F,$037F,$47FF                      ;;B800|B860+B870/B873\B873;
                      dw $412C,$69F0,$66B2,$67D5                ;;B806|B866+B876/B879\B879;
                      dw $001F,$7FFF,$2CC7                      ;;B80E|B86E+B87E/B881\B881;
                      dw $2CC7,$69F0,$66B2,$67D5                ;;B814|B874+B884/B887\B887;
                      dw $412C,$3AD5,$5B9C                      ;;B81C|B87C+B88C/B88F\B88F;
                                                                ;;                        ;
                      dl GFX33&$7FFFFF                          ;;B822|B882+B892/B895\B895;
                      dl GFX32&$7FFFFF                          ;;B825|B885+B895/B898\B898;
                                                                ;;                        ;
CODE_00B888:          REP #$10                                  ;;B828|B888+B898/B89B\B89B; Index (16 bit) 
                      LDY.W #GFX33                              ;;B82A|B88A+B89A/B89D\B89D; \  
                      STY.B !GraphicsCompPtr                    ;;B82D|B88D+B89D/B8A0\B8A0;  |Store the address 08/BFC0 at $8A-$8C 
                      LDA.B #GFX33>>16&$7F                      ;;B82F|B88F+B89F/B8A2\B8A2;  | 
                      STA.B !GraphicsCompPtr+2                  ;;B831|B891+B8A1/B8A4\B8A4; /  
                      LDY.W #!MarioGraphics                     ;;B833|B893+B8A3/B8A6\B8A6; \  
                      STY.B !_0                                 ;;B836|B896+B8A6/B8A9\B8A9;  |Store the address 7E/2000 at $00-$02 
                      LDA.B #!MarioGraphics>>16&$7F             ;;B838|B898+B8A8/B8AB\B8AB;  | 
                      STA.B !_2                                 ;;B83A|B89A+B8AA/B8AD\B8AD; /  
                      JSR CODE_00B8DE                           ;;B83C|B89C+B8AC/B8AF\B8AF;
                      LDA.B #!MarioGraphics>>16&$7F             ;;B83F|B89F+B8AF/B8B2\B8B2; \  
                      STA.B !GraphicsUncompPtr+2                ;;B841|B8A1+B8B1/B8B4\B8B4;  | 
                      REP #$30                                  ;;B843|B8A3+B8B3/B8B6\B8B6;  |Store the address 7E/ACFE at $8D-$8F ; Index (16 bit) Accum (16 bit) 
                      LDA.W #!MarioGraphics+$8CFE               ;;B845|B8A5+B8B5/B8B8\B8B8;  | 
                      STA.B !GraphicsUncompPtr                  ;;B848|B8A8+B8B8/B8BB\B8BB; /  
                      LDX.W #$23FF                              ;;B84A|B8AA+B8BA/B8BD\B8BD;
CODE_00B8AD:          LDY.W #$0008                              ;;B84D|B8AD+B8BD/B8C0\B8C0;
                    - LDA.L !MarioGraphics,X                    ;;B850|B8B0+B8C0/B8C3\B8C3;
                      AND.W #$00FF                              ;;B854|B8B4+B8C4/B8C7\B8C7;
                      STA.B [!GraphicsUncompPtr]                ;;B857|B8B7+B8C7/B8CA\B8CA;
                      DEX                                       ;;B859|B8B9+B8C9/B8CC\B8CC;
                      DEC.B !GraphicsUncompPtr                  ;;B85A|B8BA+B8CA/B8CD\B8CD;
                      DEC.B !GraphicsUncompPtr                  ;;B85C|B8BC+B8CC/B8CF\B8CF;
                      DEY                                       ;;B85E|B8BE+B8CE/B8D1\B8D1;
                      BNE -                                     ;;B85F|B8BF+B8CF/B8D2\B8D2;
                      LDY.W #$0008                              ;;B861|B8C1+B8D1/B8D4\B8D4;
CODE_00B8C4:          DEX                                       ;;B864|B8C4+B8D4/B8D7\B8D7;
                      LDA.L !MarioGraphics,X                    ;;B865|B8C5+B8D5/B8D8\B8D8;
                      STA.B [!GraphicsUncompPtr]                ;;B869|B8C9+B8D9/B8DC\B8DC;
                      DEX                                       ;;B86B|B8CB+B8DB/B8DE\B8DE;
                      BMI CODE_00B8D7                           ;;B86C|B8CC+B8DC/B8DF\B8DF;
                      DEC.B !GraphicsUncompPtr                  ;;B86E|B8CE+B8DE/B8E1\B8E1;
                      DEC.B !GraphicsUncompPtr                  ;;B870|B8D0+B8E0/B8E3\B8E3;
                      DEY                                       ;;B872|B8D2+B8E2/B8E5\B8E5;
                      BNE CODE_00B8C4                           ;;B873|B8D3+B8E3/B8E6\B8E6;
                      BRA CODE_00B8AD                           ;;B875|B8D5+B8E5/B8E8\B8E8;
                                                                ;;                        ;
CODE_00B8D7:          LDA.W #$8000                              ;;B877|B8D7+B8E7/B8EA\B8EA;
                      STA.B !GraphicsCompPtr                    ;;B87A|B8DA+B8EA/B8ED\B8ED;
                      SEP #$20                                  ;;B87C|B8DC+B8EC/B8EF\B8EF; Accum (8 bit) 
CODE_00B8DE:          REP #$10                                  ;;B87E|B8DE+B8EE/B8F1\B8F1; Index (16 bit) 
                      LDY.W #$0000                              ;;B880|B8E0+B8F0/B8F3\B8F3; \  
CODE_00B8E3:          JSR ReadByte                              ;;B883|B8E3+B8F3/B8F6\B8F6;  | 
                      CMP.B #$FF                                ;;B886|B8E6+B8F6/B8F9\B8F9;  |If the next byte is xFF, return. 
                      BNE +                                     ;;B888|B8E8+B8F8/B8FB\B8FB;  |Compressed graphics files ends with xFF IIRC 
                      SEP #$10                                  ;;B88A|B8EA+B8FA/B8FD\B8FD;  | ; Index (8 bit) 
                      RTS                                       ;;B88C|B8EC+B8FC/B8FF\B8FF; /  
                                                                ;;                        ;
                    + STA.B !GraphicsUncompPtr+2                ;;B88D|B8ED+B8FD/B900\B900;
                      AND.B #$E0                                ;;B88F|B8EF+B8FF/B902\B902;
                      CMP.B #$E0                                ;;B891|B8F1+B901/B904\B904;
                      BEQ CODE_00B8FF                           ;;B893|B8F3+B903/B906\B906;
                      PHA                                       ;;B895|B8F5+B905/B908\B908;
                      LDA.B !GraphicsUncompPtr+2                ;;B896|B8F6+B906/B909\B909;
                      REP #$20                                  ;;B898|B8F8+B908/B90B\B90B; Accum (16 bit) 
                      AND.W #$001F                              ;;B89A|B8FA+B90A/B90D\B90D;
                      BRA +                                     ;;B89D|B8FD+B90D/B910\B910;
                                                                ;;                        ;
CODE_00B8FF:          LDA.B !GraphicsUncompPtr+2                ;;B89F|B8FF+B90F/B912\B912; Accum (8 bit) 
                      ASL A                                     ;;B8A1|B901+B911/B914\B914;
                      ASL A                                     ;;B8A2|B902+B912/B915\B915;
                      ASL A                                     ;;B8A3|B903+B913/B916\B916;
                      AND.B #$E0                                ;;B8A4|B904+B914/B917\B917;
                      PHA                                       ;;B8A6|B906+B916/B919\B919;
                      LDA.B !GraphicsUncompPtr+2                ;;B8A7|B907+B917/B91A\B91A;
                      AND.B #$03                                ;;B8A9|B909+B919/B91C\B91C;
                      XBA                                       ;;B8AB|B90B+B91B/B91E\B91E;
                      JSR ReadByte                              ;;B8AC|B90C+B91C/B91F\B91F;
                      REP #$20                                  ;;B8AF|B90F+B91F/B922\B922; Accum (16 bit) 
                    + INC A                                     ;;B8B1|B911+B921/B924\B924;
                      STA.B !GraphicsUncompPtr                  ;;B8B2|B912+B922/B925\B925;
                      SEP #$20                                  ;;B8B4|B914+B924/B927\B927; Accum (8 bit) 
                      PLA                                       ;;B8B6|B916+B926/B929\B929;
                      BEQ CODE_00B930                           ;;B8B7|B917+B927/B92A\B92A;
                      BMI CODE_00B966                           ;;B8B9|B919+B929/B92C\B92C;
                      ASL A                                     ;;B8BB|B91B+B92B/B92E\B92E;
                      BPL CODE_00B93F                           ;;B8BC|B91C+B92C/B92F\B92F;
                      ASL A                                     ;;B8BE|B91E+B92E/B931\B931;
                      BPL CODE_00B94C                           ;;B8BF|B91F+B92F/B932\B932;
                      JSR ReadByte                              ;;B8C1|B921+B931/B934\B934;
                      LDX.B !GraphicsUncompPtr                  ;;B8C4|B924+B934/B937\B937;
                    - STA.B [!_0],Y                             ;;B8C6|B926+B936/B939\B939;
                      INC A                                     ;;B8C8|B928+B938/B93B\B93B;
                      INY                                       ;;B8C9|B929+B939/B93C\B93C;
                      DEX                                       ;;B8CA|B92A+B93A/B93D\B93D;
                      BNE -                                     ;;B8CB|B92B+B93B/B93E\B93E;
                      JMP CODE_00B8E3                           ;;B8CD|B92D+B93D/B940\B940;
                                                                ;;                        ;
CODE_00B930:          JSR ReadByte                              ;;B8D0|B930+B940/B943\B943;
                      STA.B [!_0],Y                             ;;B8D3|B933+B943/B946\B946;
                      INY                                       ;;B8D5|B935+B945/B948\B948;
                      LDX.B !GraphicsUncompPtr                  ;;B8D6|B936+B946/B949\B949;
                      DEX                                       ;;B8D8|B938+B948/B94B\B94B;
                      STX.B !GraphicsUncompPtr                  ;;B8D9|B939+B949/B94C\B94C;
                      BNE CODE_00B930                           ;;B8DB|B93B+B94B/B94E\B94E;
                      BRA CODE_00B8E3                           ;;B8DD|B93D+B94D/B950\B950;
                                                                ;;                        ;
CODE_00B93F:          JSR ReadByte                              ;;B8DF|B93F+B94F/B952\B952;
                      LDX.B !GraphicsUncompPtr                  ;;B8E2|B942+B952/B955\B955;
                    - STA.B [!_0],Y                             ;;B8E4|B944+B954/B957\B957;
                      INY                                       ;;B8E6|B946+B956/B959\B959;
                      DEX                                       ;;B8E7|B947+B957/B95A\B95A;
                      BNE -                                     ;;B8E8|B948+B958/B95B\B95B;
                      BRA CODE_00B8E3                           ;;B8EA|B94A+B95A/B95D\B95D;
                                                                ;;                        ;
CODE_00B94C:          JSR ReadByte                              ;;B8EC|B94C+B95C/B95F\B95F;
                      XBA                                       ;;B8EF|B94F+B95F/B962\B962;
                      JSR ReadByte                              ;;B8F0|B950+B960/B963\B963;
                      LDX.B !GraphicsUncompPtr                  ;;B8F3|B953+B963/B966\B966;
CODE_00B955:          XBA                                       ;;B8F5|B955+B965/B968\B968;
                      STA.B [!_0],Y                             ;;B8F6|B956+B966/B969\B969;
                      INY                                       ;;B8F8|B958+B968/B96B\B96B;
                      DEX                                       ;;B8F9|B959+B969/B96C\B96C;
                      BEQ CODE_00B963                           ;;B8FA|B95A+B96A/B96D\B96D;
                      XBA                                       ;;B8FC|B95C+B96C/B96F\B96F;
                      STA.B [!_0],Y                             ;;B8FD|B95D+B96D/B970\B970;
                      INY                                       ;;B8FF|B95F+B96F/B972\B972;
                      DEX                                       ;;B900|B960+B970/B973\B973;
                      BNE CODE_00B955                           ;;B901|B961+B971/B974\B974;
CODE_00B963:          JMP CODE_00B8E3                           ;;B903|B963+B973/B976\B976;
                                                                ;;                        ;
CODE_00B966:          JSR ReadByte                              ;;B906|B966+B976/B979\B979;
                      XBA                                       ;;B909|B969+B979/B97C\B97C;
                      JSR ReadByte                              ;;B90A|B96A+B97A/B97D\B97D;
                   if ver_has_rev_gfx(!_VER)          ;\   IF   ;;++++++++++++++++++++++++; J & E1
                      XBA                                       ;;B90D               \B980; ThinkingFace
                   endif                              ;/ ENDIF  ;;++++++++++++++++++++++++;
                      TAX                                       ;;B90E|B96D+B97D/B980\B981;
                    - PHY                                       ;;B90F|B96E+B97E/B981\B982;
                      TXY                                       ;;B910|B96F+B97F/B982\B983;
                      LDA.B [!_0],Y                             ;;B911|B970+B980/B983\B984;
                      TYX                                       ;;B913|B972+B982/B985\B986;
                      PLY                                       ;;B914|B973+B983/B986\B987;
                      STA.B [!_0],Y                             ;;B915|B974+B984/B987\B988;
                      INY                                       ;;B917|B976+B986/B989\B98A;
                      INX                                       ;;B918|B977+B987/B98A\B98B;
                      REP #$20                                  ;;B919|B978+B988/B98B\B98C; Accum (16 bit) 
                      DEC.B !GraphicsUncompPtr                  ;;B91B|B97A+B98A/B98D\B98E;
                      SEP #$20                                  ;;B91D|B97C+B98C/B98F\B990; Accum (8 bit) 
                      BNE -                                     ;;B91F|B97E+B98E/B991\B992;
                      JMP CODE_00B8E3                           ;;B921|B980+B990/B993\B994;
                                                                ;;                        ;
ReadByte:             LDA.B [!GraphicsCompPtr]                  ;;B924|B983+B993/B996\B997; Read the byte ; Index (16 bit) 
                      LDX.B !GraphicsCompPtr                    ;;B926|B985+B995/B998\B999; \ Go to next byte 
                      INX                                       ;;B928|B987+B997/B99A\B99B;  | 
                      BNE +                                     ;;B929|B988+B998/B99B\B99C;  |   \  
                      LDX.W #$8000                              ;;B92B|B98A+B99A/B99D\B99E;  |    |Handle bank crossing 
                      INC.B !GraphicsCompPtr+2                  ;;B92E|B98D+B99D/B9A0\B9A1;  |   /  
                    + STX.B !GraphicsCompPtr                    ;;B930|B98F+B99F/B9A2\B9A3; /  
                      RTS                                       ;;B932|B991+B9A1/B9A4\B9A5; Return 
                                                                ;;                        ;
GFXFilesLow:          db GFX00                                  ;;B933|B992+B9A2/B9A5\B9A6;
                      db GFX01                                  ;;B934|B993+B9A3/B9A6\B9A7;
                      db GFX02                                  ;;B935|B994+B9A4/B9A7\B9A8;
                      db GFX03                                  ;;B936|B995+B9A5/B9A8\B9A9;
                      db GFX04                                  ;;B937|B996+B9A6/B9A9\B9AA;
                      db GFX05                                  ;;B938|B997+B9A7/B9AA\B9AB;
                      db GFX06                                  ;;B939|B998+B9A8/B9AB\B9AC;
                      db GFX07                                  ;;B93A|B999+B9A9/B9AC\B9AD;
                      db GFX08                                  ;;B93B|B99A+B9AA/B9AD\B9AE;
                      db GFX09                                  ;;B93C|B99B+B9AB/B9AE\B9AF;
                      db GFX0A                                  ;;B93D|B99C+B9AC/B9AF\B9B0;
                      db GFX0B                                  ;;B93E|B99D+B9AD/B9B0\B9B1;
                      db GFX0C                                  ;;B93F|B99E+B9AE/B9B1\B9B2;
                      db GFX0D                                  ;;B940|B99F+B9AF/B9B2\B9B3;
                      db GFX0E                                  ;;B941|B9A0+B9B0/B9B3\B9B4;
                      db GFX0F                                  ;;B942|B9A1+B9B1/B9B4\B9B5;
                      db GFX10                                  ;;B943|B9A2+B9B2/B9B5\B9B6;
                      db GFX11                                  ;;B944|B9A3+B9B3/B9B6\B9B7;
                      db GFX12                                  ;;B945|B9A4+B9B4/B9B7\B9B8;
                      db GFX13                                  ;;B946|B9A5+B9B5/B9B8\B9B9;
                      db GFX14                                  ;;B947|B9A6+B9B6/B9B9\B9BA;
                      db GFX15                                  ;;B948|B9A7+B9B7/B9BA\B9BB;
                      db GFX16                                  ;;B949|B9A8+B9B8/B9BB\B9BC;
                      db GFX17                                  ;;B94A|B9A9+B9B9/B9BC\B9BD;
                      db GFX18                                  ;;B94B|B9AA+B9BA/B9BD\B9BE;
                      db GFX19                                  ;;B94C|B9AB+B9BB/B9BE\B9BF;
                      db GFX1A                                  ;;B94D|B9AC+B9BC/B9BF\B9C0;
                      db GFX1B                                  ;;B94E|B9AD+B9BD/B9C0\B9C1;
                      db GFX1C                                  ;;B94F|B9AE+B9BE/B9C1\B9C2;
                      db GFX1D                                  ;;B950|B9AF+B9BF/B9C2\B9C3;
                      db GFX1E                                  ;;B951|B9B0+B9C0/B9C3\B9C4;
                      db GFX1F                                  ;;B952|B9B1+B9C1/B9C4\B9C5;
                      db GFX20                                  ;;B953|B9B2+B9C2/B9C5\B9C6;
                      db GFX21                                  ;;B954|B9B3+B9C3/B9C6\B9C7;
                      db GFX22                                  ;;B955|B9B4+B9C4/B9C7\B9C8;
                      db GFX23                                  ;;B956|B9B5+B9C5/B9C8\B9C9;
                      db GFX24                                  ;;B957|B9B6+B9C6/B9C9\B9CA;
                      db GFX25                                  ;;B958|B9B7+B9C7/B9CA\B9CB;
                      db GFX26                                  ;;B959|B9B8+B9C8/B9CB\B9CC;
                      db GFX27                                  ;;B95A|B9B9+B9C9/B9CC\B9CD;
                      db GFX28                                  ;;B95B|B9BA+B9CA/B9CD\B9CE;
                      db GFX29                                  ;;B95C|B9BB+B9CB/B9CE\B9CF;
                      db GFX2A                                  ;;B95D|B9BC+B9CC/B9CF\B9D0;
                      db GFX2B                                  ;;B95E|B9BD+B9CD/B9D0\B9D1;
                      db GFX2C                                  ;;B95F|B9BE+B9CE/B9D1\B9D2;
                      db GFX2D                                  ;;B960|B9BF+B9CF/B9D2\B9D3;
                      db GFX2E                                  ;;B961|B9C0+B9D0/B9D3\B9D4;
                      db GFX2F                                  ;;B962|B9C1+B9D1/B9D4\B9D5;
                      db GFX30                                  ;;B963|B9C2+B9D2/B9D5\B9D6;
                      db GFX31                                  ;;B964|B9C3+B9D3/B9D6\B9D7;
                                                                ;;                        ;
GFXFilesHigh:         db GFX00>>8                               ;;B965|B9C4+B9D4/B9D7\B9D8;
                      db GFX01>>8                               ;;B966|B9C5+B9D5/B9D8\B9D9;
                      db GFX02>>8                               ;;B967|B9C6+B9D6/B9D9\B9DA;
                      db GFX03>>8                               ;;B968|B9C7+B9D7/B9DA\B9DB;
                      db GFX04>>8                               ;;B969|B9C8+B9D8/B9DB\B9DC;
                      db GFX05>>8                               ;;B96A|B9C9+B9D9/B9DC\B9DD;
                      db GFX06>>8                               ;;B96B|B9CA+B9DA/B9DD\B9DE;
                      db GFX07>>8                               ;;B96C|B9CB+B9DB/B9DE\B9DF;
                      db GFX08>>8                               ;;B96D|B9CC+B9DC/B9DF\B9E0;
                      db GFX09>>8                               ;;B96E|B9CD+B9DD/B9E0\B9E1;
                      db GFX0A>>8                               ;;B96F|B9CE+B9DE/B9E1\B9E2;
                      db GFX0B>>8                               ;;B970|B9CF+B9DF/B9E2\B9E3;
                      db GFX0C>>8                               ;;B971|B9D0+B9E0/B9E3\B9E4;
                      db GFX0D>>8                               ;;B972|B9D1+B9E1/B9E4\B9E5;
                      db GFX0E>>8                               ;;B973|B9D2+B9E2/B9E5\B9E6;
                      db GFX0F>>8                               ;;B974|B9D3+B9E3/B9E6\B9E7;
                      db GFX10>>8                               ;;B975|B9D4+B9E4/B9E7\B9E8;
                      db GFX11>>8                               ;;B976|B9D5+B9E5/B9E8\B9E9;
                      db GFX12>>8                               ;;B977|B9D6+B9E6/B9E9\B9EA;
                      db GFX13>>8                               ;;B978|B9D7+B9E7/B9EA\B9EB;
                      db GFX14>>8                               ;;B979|B9D8+B9E8/B9EB\B9EC;
                      db GFX15>>8                               ;;B97A|B9D9+B9E9/B9EC\B9ED;
                      db GFX16>>8                               ;;B97B|B9DA+B9EA/B9ED\B9EE;
                      db GFX17>>8                               ;;B97C|B9DB+B9EB/B9EE\B9EF;
                      db GFX18>>8                               ;;B97D|B9DC+B9EC/B9EF\B9F0;
                      db GFX19>>8                               ;;B97E|B9DD+B9ED/B9F0\B9F1;
                      db GFX1A>>8                               ;;B97F|B9DE+B9EE/B9F1\B9F2;
                      db GFX1B>>8                               ;;B980|B9DF+B9EF/B9F2\B9F3;
                      db GFX1C>>8                               ;;B981|B9E0+B9F0/B9F3\B9F4;
                      db GFX1D>>8                               ;;B982|B9E1+B9F1/B9F4\B9F5;
                      db GFX1E>>8                               ;;B983|B9E2+B9F2/B9F5\B9F6;
                      db GFX1F>>8                               ;;B984|B9E3+B9F3/B9F6\B9F7;
                      db GFX20>>8                               ;;B985|B9E4+B9F4/B9F7\B9F8;
                      db GFX21>>8                               ;;B986|B9E5+B9F5/B9F8\B9F9;
                      db GFX22>>8                               ;;B987|B9E6+B9F6/B9F9\B9FA;
                      db GFX23>>8                               ;;B988|B9E7+B9F7/B9FA\B9FB;
                      db GFX24>>8                               ;;B989|B9E8+B9F8/B9FB\B9FC;
                      db GFX25>>8                               ;;B98A|B9E9+B9F9/B9FC\B9FD;
                      db GFX26>>8                               ;;B98B|B9EA+B9FA/B9FD\B9FE;
                      db GFX27>>8                               ;;B98C|B9EB+B9FB/B9FE\B9FF;
                      db GFX28>>8                               ;;B98D|B9EC+B9FC/B9FF\BA00;
                      db GFX29>>8                               ;;B98E|B9ED+B9FD/BA00\BA01;
                      db GFX2A>>8                               ;;B98F|B9EE+B9FE/BA01\BA02;
                      db GFX2B>>8                               ;;B990|B9EF+B9FF/BA02\BA03;
                      db GFX2C>>8                               ;;B991|B9F0+BA00/BA03\BA04;
                      db GFX2D>>8                               ;;B992|B9F1+BA01/BA04\BA05;
                      db GFX2E>>8                               ;;B993|B9F2+BA02/BA05\BA06;
                      db GFX2F>>8                               ;;B994|B9F3+BA03/BA06\BA07;
                      db GFX30>>8                               ;;B995|B9F4+BA04/BA07\BA08;
                      db GFX31>>8                               ;;B996|B9F5+BA05/BA08\BA09;
                                                                ;;                        ;
GFXFilesBank:         db GFX00>>16&$7F                          ;;B997|B9F6+BA06/BA09\BA0A;
                      db GFX01>>16&$7F                          ;;B998|B9F7+BA07/BA0A\BA0B;
                      db GFX02>>16&$7F                          ;;B999|B9F8+BA08/BA0B\BA0C;
                      db GFX03>>16&$7F                          ;;B99A|B9F9+BA09/BA0C\BA0D;
                      db GFX04>>16&$7F                          ;;B99B|B9FA+BA0A/BA0D\BA0E;
                      db GFX05>>16&$7F                          ;;B99C|B9FB+BA0B/BA0E\BA0F;
                      db GFX06>>16&$7F                          ;;B99D|B9FC+BA0C/BA0F\BA10;
                      db GFX07>>16&$7F                          ;;B99E|B9FD+BA0D/BA10\BA11;
                      db GFX08>>16&$7F                          ;;B99F|B9FE+BA0E/BA11\BA12;
                      db GFX09>>16&$7F                          ;;B9A0|B9FF+BA0F/BA12\BA13;
                      db GFX0A>>16&$7F                          ;;B9A1|BA00+BA10/BA13\BA14;
                      db GFX0B>>16&$7F                          ;;B9A2|BA01+BA11/BA14\BA15;
                      db GFX0C>>16&$7F                          ;;B9A3|BA02+BA12/BA15\BA16;
                      db GFX0D>>16&$7F                          ;;B9A4|BA03+BA13/BA16\BA17;
                      db GFX0E>>16&$7F                          ;;B9A5|BA04+BA14/BA17\BA18;
                      db GFX0F>>16&$7F                          ;;B9A6|BA05+BA15/BA18\BA19;
                      db GFX10>>16&$7F                          ;;B9A7|BA06+BA16/BA19\BA1A;
                      db GFX11>>16&$7F                          ;;B9A8|BA07+BA17/BA1A\BA1B;
                      db GFX12>>16&$7F                          ;;B9A9|BA08+BA18/BA1B\BA1C;
                      db GFX13>>16&$7F                          ;;B9AA|BA09+BA19/BA1C\BA1D;
                      db GFX14>>16&$7F                          ;;B9AB|BA0A+BA1A/BA1D\BA1E;
                      db GFX15>>16&$7F                          ;;B9AC|BA0B+BA1B/BA1E\BA1F;
                      db GFX16>>16&$7F                          ;;B9AD|BA0C+BA1C/BA1F\BA20;
                      db GFX17>>16&$7F                          ;;B9AE|BA0D+BA1D/BA20\BA21;
                      db GFX18>>16&$7F                          ;;B9AF|BA0E+BA1E/BA21\BA22;
                      db GFX19>>16&$7F                          ;;B9B0|BA0F+BA1F/BA22\BA23;
                      db GFX1A>>16&$7F                          ;;B9B1|BA10+BA20/BA23\BA24;
                      db GFX1B>>16&$7F                          ;;B9B2|BA11+BA21/BA24\BA25;
                      db GFX1C>>16&$7F                          ;;B9B3|BA12+BA22/BA25\BA26;
                      db GFX1D>>16&$7F                          ;;B9B4|BA13+BA23/BA26\BA27;
                      db GFX1E>>16&$7F                          ;;B9B5|BA14+BA24/BA27\BA28;
                      db GFX1F>>16&$7F                          ;;B9B6|BA15+BA25/BA28\BA29;
                      db GFX20>>16&$7F                          ;;B9B7|BA16+BA26/BA29\BA2A;
                      db GFX21>>16&$7F                          ;;B9B8|BA17+BA27/BA2A\BA2B;
                      db GFX22>>16&$7F                          ;;B9B9|BA18+BA28/BA2B\BA2C;
                      db GFX23>>16&$7F                          ;;B9BA|BA19+BA29/BA2C\BA2D;
                      db GFX24>>16&$7F                          ;;B9BB|BA1A+BA2A/BA2D\BA2E;
                      db GFX25>>16&$7F                          ;;B9BC|BA1B+BA2B/BA2E\BA2F;
                      db GFX26>>16&$7F                          ;;B9BD|BA1C+BA2C/BA2F\BA30;
                      db GFX27>>16&$7F                          ;;B9BE|BA1D+BA2D/BA30\BA31;
                      db GFX28>>16&$7F                          ;;B9BF|BA1E+BA2E/BA31\BA32;
                      db GFX29>>16&$7F                          ;;B9C0|BA1F+BA2F/BA32\BA33;
                      db GFX2A>>16&$7F                          ;;B9C1|BA20+BA30/BA33\BA34;
                      db GFX2B>>16&$7F                          ;;B9C2|BA21+BA31/BA34\BA35;
                      db GFX2C>>16&$7F                          ;;B9C3|BA22+BA32/BA35\BA36;
                      db GFX2D>>16&$7F                          ;;B9C4|BA23+BA33/BA36\BA37;
                      db GFX2E>>16&$7F                          ;;B9C5|BA24+BA34/BA37\BA38;
                      db GFX2F>>16&$7F                          ;;B9C6|BA25+BA35/BA38\BA39;
                      db GFX30>>16&$7F                          ;;B9C7|BA26+BA36/BA39\BA3A;
                      db GFX31>>16&$7F                          ;;B9C8|BA27+BA37/BA3A\BA3B;
                                                                ;;                        ;
CODE_00BA28:          PHB                                       ;;B9C9|BA28+BA38/BA3B\BA3C; Accum (8 bit) 
                      PHY                                       ;;B9CA|BA29+BA39/BA3C\BA3D;
                      PHK                                       ;;B9CB|BA2A+BA3A/BA3D\BA3E;
                      PLB                                       ;;B9CC|BA2B+BA3B/BA3E\BA3F;
                      LDA.W GFXFilesLow,Y                       ;;B9CD|BA2C+BA3C/BA3F\BA40;
                      STA.B !GraphicsCompPtr                    ;;B9D0|BA2F+BA3F/BA42\BA43;
                      LDA.W GFXFilesHigh,Y                      ;;B9D2|BA31+BA41/BA44\BA45;
                      STA.B !GraphicsCompPtr+1                  ;;B9D5|BA34+BA44/BA47\BA48;
                      LDA.W GFXFilesBank,Y                      ;;B9D7|BA36+BA46/BA49\BA4A;
                      STA.B !GraphicsCompPtr+2                  ;;B9DA|BA39+BA49/BA4C\BA4D;
                      LDA.B #$00                                ;;B9DC|BA3B+BA4B/BA4E\BA4F;
                      STA.B !_0                                 ;;B9DE|BA3D+BA4D/BA50\BA51;
                      LDA.B #$AD                                ;;B9E0|BA3F+BA4F/BA52\BA53;
                      STA.B !_1                                 ;;B9E2|BA41+BA51/BA54\BA55;
                      LDA.B #$7E                                ;;B9E4|BA43+BA53/BA56\BA57;
                      STA.B !_2                                 ;;B9E6|BA45+BA55/BA58\BA59;
                      JSR CODE_00B8DE                           ;;B9E8|BA47+BA57/BA5A\BA5B;
                      PLY                                       ;;B9EB|BA4A+BA5A/BA5D\BA5E;
                      PLB                                       ;;B9EC|BA4B+BA5B/BA5E\BA5F;
                      RTL                                       ;;B9ED|BA4C+BA5C/BA5F\BA60; Return 
                                                                ;;                        ;
                      %insert_empty($12,$13,$03,$00,$00)        ;;B9EE|BA4D+BA5D/BA60\BA61;
                                                                ;;                        ;
DATA_00BA60:          db !Map16TilesLow                         ;;BA00|BA60+BA60/BA60\BA61;
                      db !Map16TilesLow+$1B0                    ;;BA01|BA61+BA61/BA61\BA62;
                      db !Map16TilesLow+$360                    ;;BA02|BA62+BA62/BA62\BA63;
                      db !Map16TilesLow+$510                    ;;BA03|BA63+BA63/BA63\BA64;
                      db !Map16TilesLow+$6C0                    ;;BA04|BA64+BA64/BA64\BA65;
                      db !Map16TilesLow+$870                    ;;BA05|BA65+BA65/BA65\BA66;
                      db !Map16TilesLow+$A20                    ;;BA06|BA66+BA66/BA66\BA67;
                      db !Map16TilesLow+$BD0                    ;;BA07|BA67+BA67/BA67\BA68;
                      db !Map16TilesLow+$D80                    ;;BA08|BA68+BA68/BA68\BA69;
                      db !Map16TilesLow+$F30                    ;;BA09|BA69+BA69/BA69\BA6A;
                      db !Map16TilesLow+$10E0                   ;;BA0A|BA6A+BA6A/BA6A\BA6B;
                      db !Map16TilesLow+$1290                   ;;BA0B|BA6B+BA6B/BA6B\BA6C;
                      db !Map16TilesLow+$1440                   ;;BA0C|BA6C+BA6C/BA6C\BA6D;
                      db !Map16TilesLow+$15F0                   ;;BA0D|BA6D+BA6D/BA6D\BA6E;
                      db !Map16TilesLow+$17A0                   ;;BA0E|BA6E+BA6E/BA6E\BA6F;
                      db !Map16TilesLow+$1950                   ;;BA0F|BA6F+BA6F/BA6F\BA70;
DATA_00BA70:          db !Map16TilesLow+$1B00                   ;;BA10|BA70+BA70/BA70\BA71;
                      db !Map16TilesLow+$1CB0                   ;;BA11|BA71+BA71/BA71\BA72;
                      db !Map16TilesLow+$1E60                   ;;BA12|BA72+BA72/BA72\BA73;
                      db !Map16TilesLow+$2010                   ;;BA13|BA73+BA73/BA73\BA74;
                      db !Map16TilesLow+$21C0                   ;;BA14|BA74+BA74/BA74\BA75;
                      db !Map16TilesLow+$2370                   ;;BA15|BA75+BA75/BA75\BA76;
                      db !Map16TilesLow+$2520                   ;;BA16|BA76+BA76/BA76\BA77;
                      db !Map16TilesLow+$26D0                   ;;BA17|BA77+BA77/BA77\BA78;
                      db !Map16TilesLow+$2880                   ;;BA18|BA78+BA78/BA78\BA79;
                      db !Map16TilesLow+$2A30                   ;;BA19|BA79+BA79/BA79\BA7A;
                      db !Map16TilesLow+$2BE0                   ;;BA1A|BA7A+BA7A/BA7A\BA7B;
                      db !Map16TilesLow+$2D90                   ;;BA1B|BA7B+BA7B/BA7B\BA7C;
                      db !Map16TilesLow+$2F40                   ;;BA1C|BA7C+BA7C/BA7C\BA7D;
                      db !Map16TilesLow+$30F0                   ;;BA1D|BA7D+BA7D/BA7D\BA7E;
                      db !Map16TilesLow+$32A0                   ;;BA1E|BA7E+BA7E/BA7E\BA7F;
                      db !Map16TilesLow+$3450                   ;;BA1F|BA7F+BA7F/BA7F\BA80;
                                                                ;;                        ;
DATA_00BA80:          db !Map16TilesLow                         ;;BA20|BA80+BA80/BA80\BA81;
                      db !Map16TilesLow+$200                    ;;BA21|BA81+BA81/BA81\BA82;
                      db !Map16TilesLow+$400                    ;;BA22|BA82+BA82/BA82\BA83;
                      db !Map16TilesLow+$600                    ;;BA23|BA83+BA83/BA83\BA84;
                      db !Map16TilesLow+$800                    ;;BA24|BA84+BA84/BA84\BA85;
                      db !Map16TilesLow+$A00                    ;;BA25|BA85+BA85/BA85\BA86;
                      db !Map16TilesLow+$C00                    ;;BA26|BA86+BA86/BA86\BA87;
                      db !Map16TilesLow+$E00                    ;;BA27|BA87+BA87/BA87\BA88;
                      db !Map16TilesLow+$1000                   ;;BA28|BA88+BA88/BA88\BA89;
                      db !Map16TilesLow+$1200                   ;;BA29|BA89+BA89/BA89\BA8A;
                      db !Map16TilesLow+$1400                   ;;BA2A|BA8A+BA8A/BA8A\BA8B;
                      db !Map16TilesLow+$1600                   ;;BA2B|BA8B+BA8B/BA8B\BA8C;
                      db !Map16TilesLow+$1800                   ;;BA2C|BA8C+BA8C/BA8C\BA8D;
                      db !Map16TilesLow+$1A00                   ;;BA2D|BA8D+BA8D/BA8D\BA8E;
DATA_00BA8E:          db !Map16TilesLow+$1C00                   ;;BA2E|BA8E+BA8E/BA8E\BA8F;
                      db !Map16TilesLow+$1E00                   ;;BA2F|BA8F+BA8F/BA8F\BA90;
                      db !Map16TilesLow+$2000                   ;;BA30|BA90+BA90/BA90\BA91;
                      db !Map16TilesLow+$2200                   ;;BA31|BA91+BA91/BA91\BA92;
                      db !Map16TilesLow+$2400                   ;;BA32|BA92+BA92/BA92\BA93;
                      db !Map16TilesLow+$2600                   ;;BA33|BA93+BA93/BA93\BA94;
                      db !Map16TilesLow+$2800                   ;;BA34|BA94+BA94/BA94\BA95;
                      db !Map16TilesLow+$2A00                   ;;BA35|BA95+BA95/BA95\BA96;
                      db !Map16TilesLow+$2C00                   ;;BA36|BA96+BA96/BA96\BA97;
                      db !Map16TilesLow+$2E00                   ;;BA37|BA97+BA97/BA97\BA98;
                      db !Map16TilesLow+$3000                   ;;BA38|BA98+BA98/BA98\BA99;
                      db !Map16TilesLow+$3200                   ;;BA39|BA99+BA99/BA99\BA9A;
                      db !Map16TilesLow+$3400                   ;;BA3A|BA9A+BA9A/BA9A\BA9B;
                      db !Map16TilesLow+$3600                   ;;BA3B|BA9B+BA9B/BA9B\BA9C;
                                                                ;;                        ;
DATA_00BA9C:          db !Map16TilesLow>>8                      ;;BA3C|BA9C+BA9C/BA9C\BA9D;
                      db !Map16TilesLow+$1B0>>8                 ;;BA3D|BA9D+BA9D/BA9D\BA9E;
                      db !Map16TilesLow+$360>>8                 ;;BA3E|BA9E+BA9E/BA9E\BA9F;
                      db !Map16TilesLow+$510>>8                 ;;BA3F|BA9F+BA9F/BA9F\BAA0;
                      db !Map16TilesLow+$6C0>>8                 ;;BA40|BAA0+BAA0/BAA0\BAA1;
                      db !Map16TilesLow+$870>>8                 ;;BA41|BAA1+BAA1/BAA1\BAA2;
                      db !Map16TilesLow+$A20>>8                 ;;BA42|BAA2+BAA2/BAA2\BAA3;
                      db !Map16TilesLow+$BD0>>8                 ;;BA43|BAA3+BAA3/BAA3\BAA4;
                      db !Map16TilesLow+$D80>>8                 ;;BA44|BAA4+BAA4/BAA4\BAA5;
                      db !Map16TilesLow+$F30>>8                 ;;BA45|BAA5+BAA5/BAA5\BAA6;
                      db !Map16TilesLow+$10E0>>8                ;;BA46|BAA6+BAA6/BAA6\BAA7;
                      db !Map16TilesLow+$1290>>8                ;;BA47|BAA7+BAA7/BAA7\BAA8;
                      db !Map16TilesLow+$1440>>8                ;;BA48|BAA8+BAA8/BAA8\BAA9;
                      db !Map16TilesLow+$15F0>>8                ;;BA49|BAA9+BAA9/BAA9\BAAA;
                      db !Map16TilesLow+$17A0>>8                ;;BA4A|BAAA+BAAA/BAAA\BAAB;
                      db !Map16TilesLow+$1950>>8                ;;BA4B|BAAB+BAAB/BAAB\BAAC;
DATA_00BAAC:          db !Map16TilesLow+$1B00>>8                ;;BA4C|BAAC+BAAC/BAAC\BAAD;
                      db !Map16TilesLow+$1CB0>>8                ;;BA4D|BAAD+BAAD/BAAD\BAAE;
                      db !Map16TilesLow+$1E60>>8                ;;BA4E|BAAE+BAAE/BAAE\BAAF;
                      db !Map16TilesLow+$2010>>8                ;;BA4F|BAAF+BAAF/BAAF\BAB0;
                      db !Map16TilesLow+$21C0>>8                ;;BA50|BAB0+BAB0/BAB0\BAB1;
                      db !Map16TilesLow+$2370>>8                ;;BA51|BAB1+BAB1/BAB1\BAB2;
                      db !Map16TilesLow+$2520>>8                ;;BA52|BAB2+BAB2/BAB2\BAB3;
                      db !Map16TilesLow+$26D0>>8                ;;BA53|BAB3+BAB3/BAB3\BAB4;
                      db !Map16TilesLow+$2880>>8                ;;BA54|BAB4+BAB4/BAB4\BAB5;
                      db !Map16TilesLow+$2A30>>8                ;;BA55|BAB5+BAB5/BAB5\BAB6;
                      db !Map16TilesLow+$2BE0>>8                ;;BA56|BAB6+BAB6/BAB6\BAB7;
                      db !Map16TilesLow+$2D90>>8                ;;BA57|BAB7+BAB7/BAB7\BAB8;
                      db !Map16TilesLow+$2F40>>8                ;;BA58|BAB8+BAB8/BAB8\BAB9;
                      db !Map16TilesLow+$30F0>>8                ;;BA59|BAB9+BAB9/BAB9\BABA;
                      db !Map16TilesLow+$32A0>>8                ;;BA5A|BABA+BABA/BABA\BABB;
                      db !Map16TilesLow+$3450>>8                ;;BA5B|BABB+BABB/BABB\BABC;
                                                                ;;                        ;
DATA_00BABC:          db !Map16TilesLow>>8                      ;;BA5C|BABC+BABC/BABC\BABD;
                      db !Map16TilesLow+$200>>8                 ;;BA5D|BABD+BABD/BABD\BABE;
                      db !Map16TilesLow+$400>>8                 ;;BA5E|BABE+BABE/BABE\BABF;
                      db !Map16TilesLow+$600>>8                 ;;BA5F|BABF+BABF/BABF\BAC0;
                      db !Map16TilesLow+$800>>8                 ;;BA60|BAC0+BAC0/BAC0\BAC1;
                      db !Map16TilesLow+$A00>>8                 ;;BA61|BAC1+BAC1/BAC1\BAC2;
                      db !Map16TilesLow+$C00>>8                 ;;BA62|BAC2+BAC2/BAC2\BAC3;
                      db !Map16TilesLow+$E00>>8                 ;;BA63|BAC3+BAC3/BAC3\BAC4;
                      db !Map16TilesLow+$1000>>8                ;;BA64|BAC4+BAC4/BAC4\BAC5;
                      db !Map16TilesLow+$1200>>8                ;;BA65|BAC5+BAC5/BAC5\BAC6;
                      db !Map16TilesLow+$1400>>8                ;;BA66|BAC6+BAC6/BAC6\BAC7;
                      db !Map16TilesLow+$1600>>8                ;;BA67|BAC7+BAC7/BAC7\BAC8;
                      db !Map16TilesLow+$1800>>8                ;;BA68|BAC8+BAC8/BAC8\BAC9;
                      db !Map16TilesLow+$1A00>>8                ;;BA69|BAC9+BAC9/BAC9\BACA;
DATA_00BACA:          db !Map16TilesLow+$1C00>>8                ;;BA6A|BACA+BACA/BACA\BACB;
                      db !Map16TilesLow+$1E00>>8                ;;BA6B|BACB+BACB/BACB\BACC;
                      db !Map16TilesLow+$2000>>8                ;;BA6C|BACC+BACC/BACC\BACD;
                      db !Map16TilesLow+$2200>>8                ;;BA6D|BACD+BACD/BACD\BACE;
                      db !Map16TilesLow+$2400>>8                ;;BA6E|BACE+BACE/BACE\BACF;
                      db !Map16TilesLow+$2600>>8                ;;BA6F|BACF+BACF/BACF\BAD0;
                      db !Map16TilesLow+$2800>>8                ;;BA70|BAD0+BAD0/BAD0\BAD1;
                      db !Map16TilesLow+$2A00>>8                ;;BA71|BAD1+BAD1/BAD1\BAD2;
                      db !Map16TilesLow+$2C00>>8                ;;BA72|BAD2+BAD2/BAD2\BAD3;
                      db !Map16TilesLow+$2E00>>8                ;;BA73|BAD3+BAD3/BAD3\BAD4;
                      db !Map16TilesLow+$3000>>8                ;;BA74|BAD4+BAD4/BAD4\BAD5;
                      db !Map16TilesLow+$3200>>8                ;;BA75|BAD5+BAD5/BAD5\BAD6;
                      db !Map16TilesLow+$3400>>8                ;;BA76|BAD6+BAD6/BAD6\BAD7;
                      db !Map16TilesLow+$3600>>8                ;;BA77|BAD7+BAD7/BAD7\BAD8;
                                                                ;;                        ;
DATA_00BAD8:          dl !Map16TilesLow                         ;;BA78|BAD8+BAD8/BAD8\BAD9;
                      dl !Map16TilesLow+$1B0                    ;;BA7B|BADB+BADB/BADB\BADC;
                      dl !Map16TilesLow+$360                    ;;BA7E|BADE+BADE/BADE\BADF;
                      dl !Map16TilesLow+$510                    ;;BA81|BAE1+BAE1/BAE1\BAE2;
                      dl !Map16TilesLow+$6C0                    ;;BA84|BAE4+BAE4/BAE4\BAE5;
                      dl !Map16TilesLow+$870                    ;;BA87|BAE7+BAE7/BAE7\BAE8;
                      dl !Map16TilesLow+$A20                    ;;BA8A|BAEA+BAEA/BAEA\BAEB;
                      dl !Map16TilesLow+$BD0                    ;;BA8D|BAED+BAED/BAED\BAEE;
                      dl !Map16TilesLow+$D80                    ;;BA90|BAF0+BAF0/BAF0\BAF1;
                      dl !Map16TilesLow+$F30                    ;;BA93|BAF3+BAF3/BAF3\BAF4;
                      dl !Map16TilesLow+$10E0                   ;;BA96|BAF6+BAF6/BAF6\BAF7;
                      dl !Map16TilesLow+$1290                   ;;BA99|BAF9+BAF9/BAF9\BAFA;
                      dl !Map16TilesLow+$1440                   ;;BA9C|BAFC+BAFC/BAFC\BAFD;
                      dl !Map16TilesLow+$15F0                   ;;BA9F|BAFF+BAFF/BAFF\BB00;
                      dl !Map16TilesLow+$17A0                   ;;BAA2|BB02+BB02/BB02\BB03;
                      dl !Map16TilesLow+$1950                   ;;BAA5|BB05+BB05/BB05\BB06;
                                                                ;;                        ;
DATA_00BB08:          dl !Map16TilesLow+$1B00                   ;;BAA8|BB08+BB08/BB08\BB09;
                      dl !Map16TilesLow+$1CB0                   ;;BAAB|BB0B+BB0B/BB0B\BB0C;
                      dl !Map16TilesLow+$1E60                   ;;BAAE|BB0E+BB0E/BB0E\BB0F;
                      dl !Map16TilesLow+$2010                   ;;BAB1|BB11+BB11/BB11\BB12;
                      dl !Map16TilesLow+$21C0                   ;;BAB4|BB14+BB14/BB14\BB15;
                      dl !Map16TilesLow+$2370                   ;;BAB7|BB17+BB17/BB17\BB18;
                      dl !Map16TilesLow+$2520                   ;;BABA|BB1A+BB1A/BB1A\BB1B;
                      dl !Map16TilesLow+$26D0                   ;;BABD|BB1D+BB1D/BB1D\BB1E;
                      dl !Map16TilesLow+$2880                   ;;BAC0|BB20+BB20/BB20\BB21;
                      dl !Map16TilesLow+$2A30                   ;;BAC3|BB23+BB23/BB23\BB24;
                      dl !Map16TilesLow+$2BE0                   ;;BAC6|BB26+BB26/BB26\BB27;
                      dl !Map16TilesLow+$2D90                   ;;BAC9|BB29+BB29/BB29\BB2A;
                      dl !Map16TilesLow+$2F40                   ;;BACC|BB2C+BB2C/BB2C\BB2D;
                      dl !Map16TilesLow+$30F0                   ;;BACF|BB2F+BB2F/BB2F\BB30;
                      dl !Map16TilesLow+$32A0                   ;;BAD2|BB32+BB32/BB32\BB33;
                      dl !Map16TilesLow+$3450                   ;;BAD5|BB35+BB35/BB35\BB36;
                                                                ;;                        ;
DATA_00BB38:          dl !Map16TilesLow                         ;;BAD8|BB38+BB38/BB38\BB39;
                      dl !Map16TilesLow+$200                    ;;BADB|BB3B+BB3B/BB3B\BB3C;
                      dl !Map16TilesLow+$400                    ;;BADE|BB3E+BB3E/BB3E\BB3F;
                      dl !Map16TilesLow+$600                    ;;BAE1|BB41+BB41/BB41\BB42;
                      dl !Map16TilesLow+$800                    ;;BAE4|BB44+BB44/BB44\BB45;
                      dl !Map16TilesLow+$A00                    ;;BAE7|BB47+BB47/BB47\BB48;
                      dl !Map16TilesLow+$C00                    ;;BAEA|BB4A+BB4A/BB4A\BB4B;
                      dl !Map16TilesLow+$E00                    ;;BAED|BB4D+BB4D/BB4D\BB4E;
                      dl !Map16TilesLow+$1000                   ;;BAF0|BB50+BB50/BB50\BB51;
                      dl !Map16TilesLow+$1200                   ;;BAF3|BB53+BB53/BB53\BB54;
                      dl !Map16TilesLow+$1400                   ;;BAF6|BB56+BB56/BB56\BB57;
                      dl !Map16TilesLow+$1600                   ;;BAF9|BB59+BB59/BB59\BB5A;
                      dl !Map16TilesLow+$1800                   ;;BAFC|BB5C+BB5C/BB5C\BB5D;
                      dl !Map16TilesLow+$1A00                   ;;BAFF|BB5F+BB5F/BB5F\BB60;
                                                                ;;                        ;
DATA_00BB62:          dl !Map16TilesLow+$1B00                   ;;BB02|BB62+BB62/BB62\BB63;
                      dl !Map16TilesLow+$1CB0                   ;;BB05|BB65+BB65/BB65\BB66;
                      dl !Map16TilesLow+$1E60                   ;;BB08|BB68+BB68/BB68\BB69;
                      dl !Map16TilesLow+$2010                   ;;BB0B|BB6B+BB6B/BB6B\BB6C;
                      dl !Map16TilesLow+$21C0                   ;;BB0E|BB6E+BB6E/BB6E\BB6F;
                      dl !Map16TilesLow+$2370                   ;;BB11|BB71+BB71/BB71\BB72;
                      dl !Map16TilesLow+$2520                   ;;BB14|BB74+BB74/BB74\BB75;
                      dl !Map16TilesLow+$26D0                   ;;BB17|BB77+BB77/BB77\BB78;
                      dl !Map16TilesLow+$2880                   ;;BB1A|BB7A+BB7A/BB7A\BB7B;
                      dl !Map16TilesLow+$2A30                   ;;BB1D|BB7D+BB7D/BB7D\BB7E;
                      dl !Map16TilesLow+$2BE0                   ;;BB20|BB80+BB80/BB80\BB81;
                      dl !Map16TilesLow+$2D90                   ;;BB23|BB83+BB83/BB83\BB84;
                      dl !Map16TilesLow+$2F40                   ;;BB26|BB86+BB86/BB86\BB87;
                      dl !Map16TilesLow+$30F0                   ;;BB29|BB89+BB89/BB89\BB8A;
                      dl !Map16TilesLow+$32A0                   ;;BB2C|BB8C+BB8C/BB8C\BB8D;
                      dl !Map16TilesLow+$3450                   ;;BB2F|BB8F+BB8F/BB8F\BB90;
                                                                ;;                        ;
DATA_00BB92:          dl !Map16TilesLow                         ;;BB32|BB92+BB92/BB92\BB93;
                      dl !Map16TilesLow+$1B0                    ;;BB35|BB95+BB95/BB95\BB96;
                      dl !Map16TilesLow+$360                    ;;BB38|BB98+BB98/BB98\BB99;
                      dl !Map16TilesLow+$510                    ;;BB3B|BB9B+BB9B/BB9B\BB9C;
                      dl !Map16TilesLow+$6C0                    ;;BB3E|BB9E+BB9E/BB9E\BB9F;
                      dl !Map16TilesLow+$870                    ;;BB41|BBA1+BBA1/BBA1\BBA2;
                      dl !Map16TilesLow+$A20                    ;;BB44|BBA4+BBA4/BBA4\BBA5;
                      dl !Map16TilesLow+$BD0                    ;;BB47|BBA7+BBA7/BBA7\BBA8;
                      dl !Map16TilesLow+$D80                    ;;BB4A|BBAA+BBAA/BBAA\BBAB;
                      dl !Map16TilesLow+$F30                    ;;BB4D|BBAD+BBAD/BBAD\BBAE;
                      dl !Map16TilesLow+$10E0                   ;;BB50|BBB0+BBB0/BBB0\BBB1;
                      dl !Map16TilesLow+$1290                   ;;BB53|BBB3+BBB3/BBB3\BBB4;
                      dl !Map16TilesLow+$1440                   ;;BB56|BBB6+BBB6/BBB6\BBB7;
                      dl !Map16TilesLow+$15F0                   ;;BB59|BBB9+BBB9/BBB9\BBBA;
                      dl !Map16TilesLow+$17A0                   ;;BB5C|BBBC+BBBC/BBBC\BBBD;
                      dl !Map16TilesLow+$1950                   ;;BB5F|BBBF+BBBF/BBBF\BBC0;
                                                                ;;                        ;
DATA_00BBC2:          dl !Map16TilesLow+$1C00                   ;;BB62|BBC2+BBC2/BBC2\BBC3;
                      dl !Map16TilesLow+$1E00                   ;;BB65|BBC5+BBC5/BBC5\BBC6;
                      dl !Map16TilesLow+$2000                   ;;BB68|BBC8+BBC8/BBC8\BBC9;
                      dl !Map16TilesLow+$2200                   ;;BB6B|BBCB+BBCB/BBCB\BBCC;
                      dl !Map16TilesLow+$2400                   ;;BB6E|BBCE+BBCE/BBCE\BBCF;
                      dl !Map16TilesLow+$2600                   ;;BB71|BBD1+BBD1/BBD1\BBD2;
                      dl !Map16TilesLow+$2800                   ;;BB74|BBD4+BBD4/BBD4\BBD5;
                      dl !Map16TilesLow+$2A00                   ;;BB77|BBD7+BBD7/BBD7\BBD8;
                      dl !Map16TilesLow+$2C00                   ;;BB7A|BBDA+BBDA/BBDA\BBDB;
                      dl !Map16TilesLow+$2E00                   ;;BB7D|BBDD+BBDD/BBDD\BBDE;
                      dl !Map16TilesLow+$3000                   ;;BB80|BBE0+BBE0/BBE0\BBE1;
                      dl !Map16TilesLow+$3200                   ;;BB83|BBE3+BBE3/BBE3\BBE4;
                      dl !Map16TilesLow+$3400                   ;;BB86|BBE6+BBE6/BBE6\BBE7;
                      dl !Map16TilesLow+$3600                   ;;BB89|BBE9+BBE9/BBE9\BBEA;
                                                                ;;                        ;
DATA_00BBEC:          dl !Map16TilesLow                         ;;BB8C|BBEC+BBEC/BBEC\BBED;
                      dl !Map16TilesLow+$200                    ;;BB8F|BBEF+BBEF/BBEF\BBF0;
                      dl !Map16TilesLow+$400                    ;;BB92|BBF2+BBF2/BBF2\BBF3;
                      dl !Map16TilesLow+$600                    ;;BB95|BBF5+BBF5/BBF5\BBF6;
                      dl !Map16TilesLow+$800                    ;;BB98|BBF8+BBF8/BBF8\BBF9;
                      dl !Map16TilesLow+$A00                    ;;BB9B|BBFB+BBFB/BBFB\BBFC;
                      dl !Map16TilesLow+$C00                    ;;BB9E|BBFE+BBFE/BBFE\BBFF;
                      dl !Map16TilesLow+$E00                    ;;BBA1|BC01+BC01/BC01\BC02;
                      dl !Map16TilesLow+$1000                   ;;BBA4|BC04+BC04/BC04\BC05;
                      dl !Map16TilesLow+$1200                   ;;BBA7|BC07+BC07/BC07\BC08;
                      dl !Map16TilesLow+$1400                   ;;BBAA|BC0A+BC0A/BC0A\BC0B;
                      dl !Map16TilesLow+$1600                   ;;BBAD|BC0D+BC0D/BC0D\BC0E;
                      dl !Map16TilesLow+$1800                   ;;BBB0|BC10+BC10/BC10\BC11;
                      dl !Map16TilesLow+$1A00                   ;;BBB3|BC13+BC13/BC13\BC14;
                                                                ;;                        ;
DATA_00BC16:          dl !Map16TilesLow+$1C00                   ;;BBB6|BC16+BC16/BC16\BC17;
                      dl !Map16TilesLow+$1E00                   ;;BBB9|BC19+BC19/BC19\BC1A;
                      dl !Map16TilesLow+$2000                   ;;BBBC|BC1C+BC1C/BC1C\BC1D;
                      dl !Map16TilesLow+$2200                   ;;BBBF|BC1F+BC1F/BC1F\BC20;
                      dl !Map16TilesLow+$2400                   ;;BBC2|BC22+BC22/BC22\BC23;
                      dl !Map16TilesLow+$2600                   ;;BBC5|BC25+BC25/BC25\BC26;
                      dl !Map16TilesLow+$2800                   ;;BBC8|BC28+BC28/BC28\BC29;
                      dl !Map16TilesLow+$2A00                   ;;BBCB|BC2B+BC2B/BC2B\BC2C;
                      dl !Map16TilesLow+$2C00                   ;;BBCE|BC2E+BC2E/BC2E\BC2F;
                      dl !Map16TilesLow+$2E00                   ;;BBD1|BC31+BC31/BC31\BC32;
                      dl !Map16TilesLow+$3000                   ;;BBD4|BC34+BC34/BC34\BC35;
                      dl !Map16TilesLow+$3200                   ;;BBD7|BC37+BC37/BC37\BC38;
                      dl !Map16TilesLow+$3400                   ;;BBDA|BC3A+BC3A/BC3A\BC3B;
                      dl !Map16TilesLow+$3600                   ;;BBDD|BC3D+BC3D/BC3D\BC3E;
                                                                ;;                        ;
DATA_00BC40:          dl !Map16TilesHigh                        ;;BBE0|BC40+BC40/BC40\BC41;
                      dl !Map16TilesHigh+$1B0                   ;;BBE3|BC43+BC43/BC43\BC44;
                      dl !Map16TilesHigh+$360                   ;;BBE6|BC46+BC46/BC46\BC47;
                      dl !Map16TilesHigh+$510                   ;;BBE9|BC49+BC49/BC49\BC4A;
                      dl !Map16TilesHigh+$6C0                   ;;BBEC|BC4C+BC4C/BC4C\BC4D;
                      dl !Map16TilesHigh+$870                   ;;BBEF|BC4F+BC4F/BC4F\BC50;
                      dl !Map16TilesHigh+$A20                   ;;BBF2|BC52+BC52/BC52\BC53;
                      dl !Map16TilesHigh+$BD0                   ;;BBF5|BC55+BC55/BC55\BC56;
                      dl !Map16TilesHigh+$D80                   ;;BBF8|BC58+BC58/BC58\BC59;
                      dl !Map16TilesHigh+$F30                   ;;BBFB|BC5B+BC5B/BC5B\BC5C;
                      dl !Map16TilesHigh+$10E0                  ;;BBFE|BC5E+BC5E/BC5E\BC5F;
                      dl !Map16TilesHigh+$1290                  ;;BC01|BC61+BC61/BC61\BC62;
                      dl !Map16TilesHigh+$1440                  ;;BC04|BC64+BC64/BC64\BC65;
                      dl !Map16TilesHigh+$15F0                  ;;BC07|BC67+BC67/BC67\BC68;
                      dl !Map16TilesHigh+$17A0                  ;;BC0A|BC6A+BC6A/BC6A\BC6B;
                      dl !Map16TilesHigh+$1950                  ;;BC0D|BC6D+BC6D/BC6D\BC6E;
                                                                ;;                        ;
DATA_00BC70:          dl !Map16TilesHigh+$1B00                  ;;BC10|BC70+BC70/BC70\BC71;
                      dl !Map16TilesHigh+$1CB0                  ;;BC13|BC73+BC73/BC73\BC74;
                      dl !Map16TilesHigh+$1E60                  ;;BC16|BC76+BC76/BC76\BC77;
                      dl !Map16TilesHigh+$2010                  ;;BC19|BC79+BC79/BC79\BC7A;
                      dl !Map16TilesHigh+$21C0                  ;;BC1C|BC7C+BC7C/BC7C\BC7D;
                      dl !Map16TilesHigh+$2370                  ;;BC1F|BC7F+BC7F/BC7F\BC80;
                      dl !Map16TilesHigh+$2520                  ;;BC22|BC82+BC82/BC82\BC83;
                      dl !Map16TilesHigh+$26D0                  ;;BC25|BC85+BC85/BC85\BC86;
                      dl !Map16TilesHigh+$2880                  ;;BC28|BC88+BC88/BC88\BC89;
                      dl !Map16TilesHigh+$2A30                  ;;BC2B|BC8B+BC8B/BC8B\BC8C;
                      dl !Map16TilesHigh+$2BE0                  ;;BC2E|BC8E+BC8E/BC8E\BC8F;
                      dl !Map16TilesHigh+$2D90                  ;;BC31|BC91+BC91/BC91\BC92;
                      dl !Map16TilesHigh+$2F40                  ;;BC34|BC94+BC94/BC94\BC95;
                      dl !Map16TilesHigh+$30F0                  ;;BC37|BC97+BC97/BC97\BC98;
                      dl !Map16TilesHigh+$32A0                  ;;BC3A|BC9A+BC9A/BC9A\BC9B;
                      dl !Map16TilesHigh+$3450                  ;;BC3D|BC9D+BC9D/BC9D\BC9E;
                                                                ;;                        ;
DATA_00BCA0:          dl !Map16TilesHigh                        ;;BC40|BCA0+BCA0/BCA0\BCA1;
                      dl !Map16TilesHigh+$200                   ;;BC43|BCA3+BCA3/BCA3\BCA4;
                      dl !Map16TilesHigh+$400                   ;;BC46|BCA6+BCA6/BCA6\BCA7;
                      dl !Map16TilesHigh+$600                   ;;BC49|BCA9+BCA9/BCA9\BCAA;
                      dl !Map16TilesHigh+$800                   ;;BC4C|BCAC+BCAC/BCAC\BCAD;
                      dl !Map16TilesHigh+$A00                   ;;BC4F|BCAF+BCAF/BCAF\BCB0;
                      dl !Map16TilesHigh+$C00                   ;;BC52|BCB2+BCB2/BCB2\BCB3;
                      dl !Map16TilesHigh+$E00                   ;;BC55|BCB5+BCB5/BCB5\BCB6;
                      dl !Map16TilesHigh+$1000                  ;;BC58|BCB8+BCB8/BCB8\BCB9;
                      dl !Map16TilesHigh+$1200                  ;;BC5B|BCBB+BCBB/BCBB\BCBC;
                      dl !Map16TilesHigh+$1400                  ;;BC5E|BCBE+BCBE/BCBE\BCBF;
                      dl !Map16TilesHigh+$1600                  ;;BC61|BCC1+BCC1/BCC1\BCC2;
                      dl !Map16TilesHigh+$1800                  ;;BC64|BCC4+BCC4/BCC4\BCC5;
                      dl !Map16TilesHigh+$1A00                  ;;BC67|BCC7+BCC7/BCC7\BCC8;
                                                                ;;                        ;
DATA_00BCCA:          dl !Map16TilesHigh+$1B00                  ;;BC6A|BCCA+BCCA/BCCA\BCCB;
                      dl !Map16TilesHigh+$1CB0                  ;;BC6D|BCCD+BCCD/BCCD\BCCE;
                      dl !Map16TilesHigh+$1E60                  ;;BC70|BCD0+BCD0/BCD0\BCD1;
                      dl !Map16TilesHigh+$2010                  ;;BC73|BCD3+BCD3/BCD3\BCD4;
                      dl !Map16TilesHigh+$21C0                  ;;BC76|BCD6+BCD6/BCD6\BCD7;
                      dl !Map16TilesHigh+$2370                  ;;BC79|BCD9+BCD9/BCD9\BCDA;
                      dl !Map16TilesHigh+$2520                  ;;BC7C|BCDC+BCDC/BCDC\BCDD;
                      dl !Map16TilesHigh+$26D0                  ;;BC7F|BCDF+BCDF/BCDF\BCE0;
                      dl !Map16TilesHigh+$2880                  ;;BC82|BCE2+BCE2/BCE2\BCE3;
                      dl !Map16TilesHigh+$2A30                  ;;BC85|BCE5+BCE5/BCE5\BCE6;
                      dl !Map16TilesHigh+$2BE0                  ;;BC88|BCE8+BCE8/BCE8\BCE9;
                      dl !Map16TilesHigh+$2D90                  ;;BC8B|BCEB+BCEB/BCEB\BCEC;
                      dl !Map16TilesHigh+$2F40                  ;;BC8E|BCEE+BCEE/BCEE\BCEF;
                      dl !Map16TilesHigh+$30F0                  ;;BC91|BCF1+BCF1/BCF1\BCF2;
                      dl !Map16TilesHigh+$32A0                  ;;BC94|BCF4+BCF4/BCF4\BCF5;
                      dl !Map16TilesHigh+$3450                  ;;BC97|BCF7+BCF7/BCF7\BCF8;
                                                                ;;                        ;
DATA_00BCFA:          dl !Map16TilesHigh                        ;;BC9A|BCFA+BCFA/BCFA\BCFB;
                      dl !Map16TilesHigh+$1B0                   ;;BC9D|BCFD+BCFD/BCFD\BCFE;
                      dl !Map16TilesHigh+$360                   ;;BCA0|BD00+BD00/BD00\BD01;
                      dl !Map16TilesHigh+$510                   ;;BCA3|BD03+BD03/BD03\BD04;
                      dl !Map16TilesHigh+$6C0                   ;;BCA6|BD06+BD06/BD06\BD07;
                      dl !Map16TilesHigh+$870                   ;;BCA9|BD09+BD09/BD09\BD0A;
                      dl !Map16TilesHigh+$A20                   ;;BCAC|BD0C+BD0C/BD0C\BD0D;
                      dl !Map16TilesHigh+$BD0                   ;;BCAF|BD0F+BD0F/BD0F\BD10;
                      dl !Map16TilesHigh+$D80                   ;;BCB2|BD12+BD12/BD12\BD13;
                      dl !Map16TilesHigh+$F30                   ;;BCB5|BD15+BD15/BD15\BD16;
                      dl !Map16TilesHigh+$10E0                  ;;BCB8|BD18+BD18/BD18\BD19;
                      dl !Map16TilesHigh+$1290                  ;;BCBB|BD1B+BD1B/BD1B\BD1C;
                      dl !Map16TilesHigh+$1440                  ;;BCBE|BD1E+BD1E/BD1E\BD1F;
                      dl !Map16TilesHigh+$15F0                  ;;BCC1|BD21+BD21/BD21\BD22;
                      dl !Map16TilesHigh+$17A0                  ;;BCC4|BD24+BD24/BD24\BD25;
                      dl !Map16TilesHigh+$1950                  ;;BCC7|BD27+BD27/BD27\BD28;
                                                                ;;                        ;
DATA_00BD2A:          dl !Map16TilesHigh+$1C00                  ;;BCCA|BD2A+BD2A/BD2A\BD2B;
                      dl !Map16TilesHigh+$1E00                  ;;BCCD|BD2D+BD2D/BD2D\BD2E;
                      dl !Map16TilesHigh+$2000                  ;;BCD0|BD30+BD30/BD30\BD31;
                      dl !Map16TilesHigh+$2200                  ;;BCD3|BD33+BD33/BD33\BD34;
                      dl !Map16TilesHigh+$2400                  ;;BCD6|BD36+BD36/BD36\BD37;
                      dl !Map16TilesHigh+$2600                  ;;BCD9|BD39+BD39/BD39\BD3A;
                      dl !Map16TilesHigh+$2800                  ;;BCDC|BD3C+BD3C/BD3C\BD3D;
                      dl !Map16TilesHigh+$2A00                  ;;BCDF|BD3F+BD3F/BD3F\BD40;
                      dl !Map16TilesHigh+$2C00                  ;;BCE2|BD42+BD42/BD42\BD43;
                      dl !Map16TilesHigh+$2E00                  ;;BCE5|BD45+BD45/BD45\BD46;
                      dl !Map16TilesHigh+$3000                  ;;BCE8|BD48+BD48/BD48\BD49;
                      dl !Map16TilesHigh+$3200                  ;;BCEB|BD4B+BD4B/BD4B\BD4C;
                      dl !Map16TilesHigh+$3400                  ;;BCEE|BD4E+BD4E/BD4E\BD4F;
                      dl !Map16TilesHigh+$3600                  ;;BCF1|BD51+BD51/BD51\BD52;
                                                                ;;                        ;
DATA_00BD54:          dl !Map16TilesHigh                        ;;BCF4|BD54+BD54/BD54\BD55;
                      dl !Map16TilesHigh+$200                   ;;BCF7|BD57+BD57/BD57\BD58;
                      dl !Map16TilesHigh+$400                   ;;BCFA|BD5A+BD5A/BD5A\BD5B;
                      dl !Map16TilesHigh+$600                   ;;BCFD|BD5D+BD5D/BD5D\BD5E;
                      dl !Map16TilesHigh+$800                   ;;BD00|BD60+BD60/BD60\BD61;
                      dl !Map16TilesHigh+$A00                   ;;BD03|BD63+BD63/BD63\BD64;
                      dl !Map16TilesHigh+$C00                   ;;BD06|BD66+BD66/BD66\BD67;
                      dl !Map16TilesHigh+$E00                   ;;BD09|BD69+BD69/BD69\BD6A;
                      dl !Map16TilesHigh+$1000                  ;;BD0C|BD6C+BD6C/BD6C\BD6D;
                      dl !Map16TilesHigh+$1200                  ;;BD0F|BD6F+BD6F/BD6F\BD70;
                      dl !Map16TilesHigh+$1400                  ;;BD12|BD72+BD72/BD72\BD73;
                      dl !Map16TilesHigh+$1600                  ;;BD15|BD75+BD75/BD75\BD76;
                      dl !Map16TilesHigh+$1800                  ;;BD18|BD78+BD78/BD78\BD79;
                      dl !Map16TilesHigh+$1A00                  ;;BD1B|BD7B+BD7B/BD7B\BD7C;
                                                                ;;                        ;
DATA_00BD7E:          dl !Map16TilesHigh+$1C00                  ;;BD1E|BD7E+BD7E/BD7E\BD7F;
                      dl !Map16TilesHigh+$1E00                  ;;BD21|BD81+BD81/BD81\BD82;
                      dl !Map16TilesHigh+$2000                  ;;BD24|BD84+BD84/BD84\BD85;
                      dl !Map16TilesHigh+$2200                  ;;BD27|BD87+BD87/BD87\BD88;
                      dl !Map16TilesHigh+$2400                  ;;BD2A|BD8A+BD8A/BD8A\BD8B;
                      dl !Map16TilesHigh+$2600                  ;;BD2D|BD8D+BD8D/BD8D\BD8E;
                      dl !Map16TilesHigh+$2800                  ;;BD30|BD90+BD90/BD90\BD91;
                      dl !Map16TilesHigh+$2A00                  ;;BD33|BD93+BD93/BD93\BD94;
                      dl !Map16TilesHigh+$2C00                  ;;BD36|BD96+BD96/BD96\BD97;
                      dl !Map16TilesHigh+$2E00                  ;;BD39|BD99+BD99/BD99\BD9A;
                      dl !Map16TilesHigh+$3000                  ;;BD3C|BD9C+BD9C/BD9C\BD9D;
                      dl !Map16TilesHigh+$3200                  ;;BD3F|BD9F+BD9F/BD9F\BDA0;
                      dl !Map16TilesHigh+$3400                  ;;BD42|BDA2+BDA2/BDA2\BDA3;
                      dl !Map16TilesHigh+$3600                  ;;BD45|BDA5+BDA5/BDA5\BDA6;
                                                                ;;                        ;
Ptrs00BDA8:           dw DATA_00BAD8                            ;;BD48|BDA8+BDA8/BDA8\BDA9;
                      dw DATA_00BAD8                            ;;BD4A|BDAA+BDAA/BDAA\BDAB;
                      dw DATA_00BAD8                            ;;BD4C|BDAC+BDAC/BDAC\BDAD;
                      dw DATA_00BB38                            ;;BD4E|BDAE+BDAE/BDAE\BDAF;
                      dw DATA_00BB38                            ;;BD50|BDB0+BDB0/BDB0\BDB1;
                      dw DATA_00BB92                            ;;BD52|BDB2+BDB2/BDB2\BDB3;
                      dw DATA_00BB92                            ;;BD54|BDB4+BDB4/BDB4\BDB5;
                      dw DATA_00BBEC                            ;;BD56|BDB6+BDB6/BDB6\BDB7;
                      dw DATA_00BBEC                            ;;BD58|BDB8+BDB8/BDB8\BDB9;
                      dw $0000                                  ;;BD5A|BDBA+BDBA/BDBA\BDBB;
                      dw DATA_00BBEC                            ;;BD5C|BDBC+BDBC/BDBC\BDBD;
                      dw $0000                                  ;;BD5E|BDBE+BDBE/BDBE\BDBF;
                      dw DATA_00BAD8                            ;;BD60|BDC0+BDC0/BDC0\BDC1;
                      dw DATA_00BBEC                            ;;BD62|BDC2+BDC2/BDC2\BDC3;
                      dw DATA_00BAD8                            ;;BD64|BDC4+BDC4/BDC4\BDC5;
                      dw DATA_00BAD8                            ;;BD66|BDC6+BDC6/BDC6\BDC7;
                      dw $0000                                  ;;BD68|BDC8+BDC8/BDC8\BDC9;
                      dw DATA_00BAD8                            ;;BD6A|BDCA+BDCA/BDCA\BDCB;
                      dw $0000                                  ;;BD6C|BDCC+BDCC/BDCC\BDCD;
                      dw $0000                                  ;;BD6E|BDCE+BDCE/BDCE\BDCF;
                      dw $0000                                  ;;BD70|BDD0+BDD0/BDD0\BDD1;
                      dw $0000                                  ;;BD72|BDD2+BDD2/BDD2\BDD3;
                      dw $0000                                  ;;BD74|BDD4+BDD4/BDD4\BDD5;
                      dw $0000                                  ;;BD76|BDD6+BDD6/BDD6\BDD7;
                      dw $0000                                  ;;BD78|BDD8+BDD8/BDD8\BDD9;
                      dw $0000                                  ;;BD7A|BDDA+BDDA/BDDA\BDDB;
                      dw $0000                                  ;;BD7C|BDDC+BDDC/BDDC\BDDD;
                      dw $0000                                  ;;BD7E|BDDE+BDDE/BDDE\BDDF;
                      dw $0000                                  ;;BD80|BDE0+BDE0/BDE0\BDE1;
                      dw $0000                                  ;;BD82|BDE2+BDE2/BDE2\BDE3;
                      dw DATA_00BAD8                            ;;BD84|BDE4+BDE4/BDE4\BDE5;
                      dw DATA_00BAD8                            ;;BD86|BDE6+BDE6/BDE6\BDE7;
                                                                ;;                        ;
Ptrs00BDE8:           dw DATA_00BB08                            ;;BD88|BDE8+BDE8/BDE8\BDE9;
                      dw DATA_00BB08                            ;;BD8A|BDEA+BDEA/BDEA\BDEB;
                      dw DATA_00BB08                            ;;BD8C|BDEC+BDEC/BDEC\BDED;
                      dw DATA_00BB62                            ;;BD8E|BDEE+BDEE/BDEE\BDEF;
                      dw DATA_00BB62                            ;;BD90|BDF0+BDF0/BDF0\BDF1;
                      dw DATA_00BBC2                            ;;BD92|BDF2+BDF2/BDF2\BDF3;
                      dw DATA_00BBC2                            ;;BD94|BDF4+BDF4/BDF4\BDF5;
                      dw DATA_00BC16                            ;;BD96|BDF6+BDF6/BDF6\BDF7;
                      dw DATA_00BC16                            ;;BD98|BDF8+BDF8/BDF8\BDF9;
                      dw $0000                                  ;;BD9A|BDFA+BDFA/BDFA\BDFB;
                      dw DATA_00BC16                            ;;BD9C|BDFC+BDFC/BDFC\BDFD;
                      dw $0000                                  ;;BD9E|BDFE+BDFE/BDFE\BDFF;
                      dw DATA_00BB08                            ;;BDA0|BE00+BE00/BE00\BE01;
                      dw DATA_00BC16                            ;;BDA2|BE02+BE02/BE02\BE03;
                      dw DATA_00BB08                            ;;BDA4|BE04+BE04/BE04\BE05;
                      dw DATA_00BB08                            ;;BDA6|BE06+BE06/BE06\BE07;
                      dw $0000                                  ;;BDA8|BE08+BE08/BE08\BE09;
                      dw DATA_00BB08                            ;;BDAA|BE0A+BE0A/BE0A\BE0B;
                      dw $0000                                  ;;BDAC|BE0C+BE0C/BE0C\BE0D;
                      dw $0000                                  ;;BDAE|BE0E+BE0E/BE0E\BE0F;
                      dw $0000                                  ;;BDB0|BE10+BE10/BE10\BE11;
                      dw $0000                                  ;;BDB2|BE12+BE12/BE12\BE13;
                      dw $0000                                  ;;BDB4|BE14+BE14/BE14\BE15;
                      dw $0000                                  ;;BDB6|BE16+BE16/BE16\BE17;
                      dw $0000                                  ;;BDB8|BE18+BE18/BE18\BE19;
                      dw $0000                                  ;;BDBA|BE1A+BE1A/BE1A\BE1B;
                      dw $0000                                  ;;BDBC|BE1C+BE1C/BE1C\BE1D;
                      dw $0000                                  ;;BDBE|BE1E+BE1E/BE1E\BE1F;
                      dw $0000                                  ;;BDC0|BE20+BE20/BE20\BE21;
                      dw $0000                                  ;;BDC2|BE22+BE22/BE22\BE23;
                      dw DATA_00BB08                            ;;BDC4|BE24+BE24/BE24\BE25;
                      dw DATA_00BB08                            ;;BDC6|BE26+BE26/BE26\BE27;
                                                                ;;                        ;
Ptrs00BE28:           dw DATA_00BC40                            ;;BDC8|BE28+BE28/BE28\BE29;
                      dw DATA_00BC40                            ;;BDCA|BE2A+BE2A/BE2A\BE2B;
                      dw DATA_00BC40                            ;;BDCC|BE2C+BE2C/BE2C\BE2D;
                      dw DATA_00BCA0                            ;;BDCE|BE2E+BE2E/BE2E\BE2F;
                      dw DATA_00BCA0                            ;;BDD0|BE30+BE30/BE30\BE31;
                      dw DATA_00BCFA                            ;;BDD2|BE32+BE32/BE32\BE33;
                      dw DATA_00BCFA                            ;;BDD4|BE34+BE34/BE34\BE35;
                      dw DATA_00BD54                            ;;BDD6|BE36+BE36/BE36\BE37;
                      dw DATA_00BD54                            ;;BDD8|BE38+BE38/BE38\BE39;
                      dw $0000                                  ;;BDDA|BE3A+BE3A/BE3A\BE3B;
                      dw DATA_00BD54                            ;;BDDC|BE3C+BE3C/BE3C\BE3D;
                      dw $0000                                  ;;BDDE|BE3E+BE3E/BE3E\BE3F;
                      dw DATA_00BC40                            ;;BDE0|BE40+BE40/BE40\BE41;
                      dw DATA_00BD54                            ;;BDE2|BE42+BE42/BE42\BE43;
                      dw DATA_00BC40                            ;;BDE4|BE44+BE44/BE44\BE45;
                      dw DATA_00BC40                            ;;BDE6|BE46+BE46/BE46\BE47;
                      dw $0000                                  ;;BDE8|BE48+BE48/BE48\BE49;
                      dw DATA_00BC40                            ;;BDEA|BE4A+BE4A/BE4A\BE4B;
                      dw $0000                                  ;;BDEC|BE4C+BE4C/BE4C\BE4D;
                      dw $0000                                  ;;BDEE|BE4E+BE4E/BE4E\BE4F;
                      dw $0000                                  ;;BDF0|BE50+BE50/BE50\BE51;
                      dw $0000                                  ;;BDF2|BE52+BE52/BE52\BE53;
                      dw $0000                                  ;;BDF4|BE54+BE54/BE54\BE55;
                      dw $0000                                  ;;BDF6|BE56+BE56/BE56\BE57;
                      dw $0000                                  ;;BDF8|BE58+BE58/BE58\BE59;
                      dw $0000                                  ;;BDFA|BE5A+BE5A/BE5A\BE5B;
                      dw $0000                                  ;;BDFC|BE5C+BE5C/BE5C\BE5D;
                      dw $0000                                  ;;BDFE|BE5E+BE5E/BE5E\BE5F;
                      dw $0000                                  ;;BE00|BE60+BE60/BE60\BE61;
                      dw $0000                                  ;;BE02|BE62+BE62/BE62\BE63;
                      dw DATA_00BC40                            ;;BE04|BE64+BE64/BE64\BE65;
                      dw DATA_00BC40                            ;;BE06|BE66+BE66/BE66\BE67;
                                                                ;;                        ;
Ptrs00BE68:           dw DATA_00BC70                            ;;BE08|BE68+BE68/BE68\BE69;
                      dw DATA_00BC70                            ;;BE0A|BE6A+BE6A/BE6A\BE6B;
                      dw DATA_00BC70                            ;;BE0C|BE6C+BE6C/BE6C\BE6D;
                      dw DATA_00BCCA                            ;;BE0E|BE6E+BE6E/BE6E\BE6F;
                      dw DATA_00BCCA                            ;;BE10|BE70+BE70/BE70\BE71;
                      dw DATA_00BD2A                            ;;BE12|BE72+BE72/BE72\BE73;
                      dw DATA_00BD2A                            ;;BE14|BE74+BE74/BE74\BE75;
                      dw DATA_00BD7E                            ;;BE16|BE76+BE76/BE76\BE77;
                      dw DATA_00BD7E                            ;;BE18|BE78+BE78/BE78\BE79;
                      dw $0000                                  ;;BE1A|BE7A+BE7A/BE7A\BE7B;
                      dw DATA_00BD7E                            ;;BE1C|BE7C+BE7C/BE7C\BE7D;
                      dw $0000                                  ;;BE1E|BE7E+BE7E/BE7E\BE7F;
                      dw DATA_00BC70                            ;;BE20|BE80+BE80/BE80\BE81;
                      dw DATA_00BD7E                            ;;BE22|BE82+BE82/BE82\BE83;
                      dw DATA_00BC70                            ;;BE24|BE84+BE84/BE84\BE85;
                      dw DATA_00BC70                            ;;BE26|BE86+BE86/BE86\BE87;
                      dw $0000                                  ;;BE28|BE88+BE88/BE88\BE89;
                      dw DATA_00BC70                            ;;BE2A|BE8A+BE8A/BE8A\BE8B;
                      dw $0000                                  ;;BE2C|BE8C+BE8C/BE8C\BE8D;
                      dw $0000                                  ;;BE2E|BE8E+BE8E/BE8E\BE8F;
                      dw $0000                                  ;;BE30|BE90+BE90/BE90\BE91;
                      dw $0000                                  ;;BE32|BE92+BE92/BE92\BE93;
                      dw $0000                                  ;;BE34|BE94+BE94/BE94\BE95;
                      dw $0000                                  ;;BE36|BE96+BE96/BE96\BE97;
                      dw $0000                                  ;;BE38|BE98+BE98/BE98\BE99;
                      dw $0000                                  ;;BE3A|BE9A+BE9A/BE9A\BE9B;
                      dw $0000                                  ;;BE3C|BE9C+BE9C/BE9C\BE9D;
                      dw $0000                                  ;;BE3E|BE9E+BE9E/BE9E\BE9F;
                      dw $0000                                  ;;BE40|BEA0+BEA0/BEA0\BEA1;
                      dw $0000                                  ;;BE42|BEA2+BEA2/BEA2\BEA3;
                      dw DATA_00BC70                            ;;BE44|BEA4+BEA4/BEA4\BEA5;
                      dw DATA_00BC70                            ;;BE46|BEA6+BEA6/BEA6\BEA7;
                                                                ;;                        ;
LoadBlkPtrs:          dw Ptrs00BDA8                             ;;BE48|BEA8+BEA8/BEA8\BEA9;
                      dw Ptrs00BDE8                             ;;BE4A|BEAA+BEAA/BEAA\BEAB;
LoadBlkTable2:        dw Ptrs00BE28                             ;;BE4C|BEAC+BEAC/BEAC\BEAD;
                      dw Ptrs00BE68                             ;;BE4E|BEAE+BEAE/BEAE\BEAF;
                                                                ;;                        ;
GenerateTile:         PHP                                       ;;BE50|BEB0+BEB0/BEB0\BEB1;
                      REP #$30                                  ;;BE51|BEB1+BEB1/BEB1\BEB2; Index (16 bit) Accum (16 bit) 
                      PHX                                       ;;BE53|BEB3+BEB3/BEB3\BEB4;
                      LDA.B !Map16TileGenerate                  ;;BE54|BEB4+BEB4/BEB4\BEB5;
                      AND.W #$00FF                              ;;BE56|BEB6+BEB6/BEB6\BEB7;
                      BNE +                                     ;;BE59|BEB9+BEB9/BEB9\BEBA;
ADDR_00BEBB:          JMP CODE_00BFB9                           ;;BE5B|BEBB+BEBB/BEBB\BEBC;
                                                                ;;                        ;
                    + LDA.B !TouchBlockXPos                     ;;BE5E|BEBE+BEBE/BEBE\BEBF;
                      STA.B !_C                                 ;;BE60|BEC0+BEC0/BEC0\BEC1;
                      LDA.B !TouchBlockYPos                     ;;BE62|BEC2+BEC2/BEC2\BEC3;
                      STA.B !_E                                 ;;BE64|BEC4+BEC4/BEC4\BEC5;
                      LDA.W #$0000                              ;;BE66|BEC6+BEC6/BEC6\BEC7;
                      SEP #$20                                  ;;BE69|BEC9+BEC9/BEC9\BECA; Accum (8 bit) 
                      LDA.B !ScreenMode                         ;;BE6B|BECB+BECB/BECB\BECC;
                      STA.B !_9                                 ;;BE6D|BECD+BECD/BECD\BECE;
                      LDA.W !LayerProcessing                    ;;BE6F|BECF+BECF/BECF\BED0;
                      BEQ +                                     ;;BE72|BED2+BED2/BED2\BED3;
                      LSR.B !_9                                 ;;BE74|BED4+BED4/BED4\BED5;
                    + LDY.B !_E                                 ;;BE76|BED6+BED6/BED6\BED7;
                      LDA.B !_9                                 ;;BE78|BED8+BED8/BED8\BED9;
                      AND.B #$01                                ;;BE7A|BEDA+BEDA/BEDA\BEDB;
                      BEQ +                                     ;;BE7C|BEDC+BEDC/BEDC\BEDD;
                      LDA.B !TouchBlockXPos+1                   ;;BE7E|BEDE+BEDE/BEDE\BEDF;
                      STA.B !_0                                 ;;BE80|BEE0+BEE0/BEE0\BEE1;
                      LDA.B !TouchBlockYPos+1                   ;;BE82|BEE2+BEE2/BEE2\BEE3;
                      STA.B !TouchBlockXPos+1                   ;;BE84|BEE4+BEE4/BEE4\BEE5;
                      LDA.B !_0                                 ;;BE86|BEE6+BEE6/BEE6\BEE7;
                      STA.B !TouchBlockYPos+1                   ;;BE88|BEE8+BEE8/BEE8\BEE9;
                      LDY.B !_C                                 ;;BE8A|BEEA+BEEA/BEEA\BEEB;
                    + CPY.W #$0200                              ;;BE8C|BEEC+BEEC/BEEC\BEED;
                      BCS ADDR_00BEBB                           ;;BE8F|BEEF+BEEF/BEEF\BEF0;
                      LDA.W !LayerProcessing                    ;;BE91|BEF1+BEF1/BEF1\BEF2;
                      ASL A                                     ;;BE94|BEF4+BEF4/BEF4\BEF5;
                      TAX                                       ;;BE95|BEF5+BEF5/BEF5\BEF6;
                      LDA.L LoadBlkPtrs,X                       ;;BE96|BEF6+BEF6/BEF6\BEF7; Set low byte of pointer 
                      STA.B !Layer1DataPtr                      ;;BE9A|BEFA+BEFA/BEFA\BEFB;
                      LDA.L LoadBlkPtrs+1,X                     ;;BE9C|BEFC+BEFC/BEFC\BEFD; Set middle byte of pointer 
                      STA.B !Layer1DataPtr+1                    ;;BEA0|BF00+BF00/BF00\BF01;
                      STZ.B !Layer1DataPtr+2                    ;;BEA2|BF02+BF02/BF02\BF03; High byte of pointer = #$00 
                      LDA.W !LevelModeSetting                   ;;BEA4|BF04+BF04/BF04\BF05;
                      ASL A                                     ;;BEA7|BF07+BF07/BF07\BF08;
                      TAY                                       ;;BEA8|BF08+BF08/BF08\BF09;
                      LDA.B [!Layer1DataPtr],Y                  ;;BEA9|BF09+BF09/BF09\BF0A;
                      STA.B !_4                                 ;;BEAB|BF0B+BF0B/BF0B\BF0C;
                      INY                                       ;;BEAD|BF0D+BF0D/BF0D\BF0E;
                      LDA.B [!Layer1DataPtr],Y                  ;;BEAE|BF0E+BF0E/BF0E\BF0F;
                      STA.B !_5                                 ;;BEB0|BF10+BF10/BF10\BF11;
                      STZ.B !_6                                 ;;BEB2|BF12+BF12/BF12\BF13;
                      LDA.B !TouchBlockXPos+1                   ;;BEB4|BF14+BF14/BF14\BF15;
                      STA.B !_7                                 ;;BEB6|BF16+BF16/BF16\BF17;
                      ASL A                                     ;;BEB8|BF18+BF18/BF18\BF19;
                      CLC                                       ;;BEB9|BF19+BF19/BF19\BF1A;
                      ADC.B !_7                                 ;;BEBA|BF1A+BF1A/BF1A\BF1B;
                      TAY                                       ;;BEBC|BF1C+BF1C/BF1C\BF1D;
                      LDA.B [!_4],Y                             ;;BEBD|BF1D+BF1D/BF1D\BF1E;
                      STA.B !Map16LowPtr                        ;;BEBF|BF1F+BF1F/BF1F\BF20;
                      STA.B !Map16HighPtr                       ;;BEC1|BF21+BF21/BF21\BF22;
                      INY                                       ;;BEC3|BF23+BF23/BF23\BF24;
                      LDA.B [!_4],Y                             ;;BEC4|BF24+BF24/BF24\BF25;
                      STA.B !Map16LowPtr+1                      ;;BEC6|BF26+BF26/BF26\BF27;
                      STA.B !Map16HighPtr+1                     ;;BEC8|BF28+BF28/BF28\BF29;
                      LDA.B #$7E                                ;;BECA|BF2A+BF2A/BF2A\BF2B;
                      STA.B !Map16LowPtr+2                      ;;BECC|BF2C+BF2C/BF2C\BF2D;
                      INC A                                     ;;BECE|BF2E+BF2E/BF2E\BF2F;
                      STA.B !Map16HighPtr+2                     ;;BECF|BF2F+BF2F/BF2F\BF30;
                      LDA.B !_9                                 ;;BED1|BF31+BF31/BF31\BF32;
                      AND.B #$01                                ;;BED3|BF33+BF33/BF33\BF34;
                      BEQ +                                     ;;BED5|BF35+BF35/BF35\BF36;
                      LDA.B !TouchBlockYPos+1                   ;;BED7|BF37+BF37/BF37\BF38;
                      LSR A                                     ;;BED9|BF39+BF39/BF39\BF3A;
                      LDA.B !TouchBlockXPos+1                   ;;BEDA|BF3A+BF3A/BF3A\BF3B;
                      AND.B #$01                                ;;BEDC|BF3C+BF3C/BF3C\BF3D;
                      JMP CODE_00BF46                           ;;BEDE|BF3E+BF3E/BF3E\BF3F;
                                                                ;;                        ;
                    + LDA.B !TouchBlockXPos+1                   ;;BEE1|BF41+BF41/BF41\BF42;
                      LSR A                                     ;;BEE3|BF43+BF43/BF43\BF44;
                      LDA.B !TouchBlockYPos+1                   ;;BEE4|BF44+BF44/BF44\BF45;
CODE_00BF46:          ROL A                                     ;;BEE6|BF46+BF46/BF46\BF47;
                      ASL A                                     ;;BEE7|BF47+BF47/BF47\BF48;
                      ASL A                                     ;;BEE8|BF48+BF48/BF48\BF49;
                      ORA.B #$20                                ;;BEE9|BF49+BF49/BF49\BF4A;
                      STA.B !_4                                 ;;BEEB|BF4B+BF4B/BF4B\BF4C;
                      CPX.W #$0000                              ;;BEED|BF4D+BF4D/BF4D\BF4E;
                      BEQ +                                     ;;BEF0|BF50+BF50/BF50\BF51;
                      CLC                                       ;;BEF2|BF52+BF52/BF52\BF53;
                      ADC.B #$10                                ;;BEF3|BF53+BF53/BF53\BF54;
                      STA.B !_4                                 ;;BEF5|BF55+BF55/BF55\BF56;
                    + LDA.B !TouchBlockYPos                     ;;BEF7|BF57+BF57/BF57\BF58;
                      AND.B #$F0                                ;;BEF9|BF59+BF59/BF59\BF5A;
                      CLC                                       ;;BEFB|BF5B+BF5B/BF5B\BF5C;
                      ASL A                                     ;;BEFC|BF5C+BF5C/BF5C\BF5D;
                      ROL A                                     ;;BEFD|BF5D+BF5D/BF5D\BF5E;
                      STA.B !_5                                 ;;BEFE|BF5E+BF5E/BF5E\BF5F;
                      ROL A                                     ;;BF00|BF60+BF60/BF60\BF61;
                      AND.B #$03                                ;;BF01|BF61+BF61/BF61\BF62;
                      ORA.B !_4                                 ;;BF03|BF63+BF63/BF63\BF64;
                      STA.B !_6                                 ;;BF05|BF65+BF65/BF65\BF66;
                      LDA.B !TouchBlockXPos                     ;;BF07|BF67+BF67/BF67\BF68;
                      AND.B #$F0                                ;;BF09|BF69+BF69/BF69\BF6A;
                      LSR A                                     ;;BF0B|BF6B+BF6B/BF6B\BF6C;
                      LSR A                                     ;;BF0C|BF6C+BF6C/BF6C\BF6D;
                      LSR A                                     ;;BF0D|BF6D+BF6D/BF6D\BF6E;
                      STA.B !_4                                 ;;BF0E|BF6E+BF6E/BF6E\BF6F;
                      LDA.B !_5                                 ;;BF10|BF70+BF70/BF70\BF71;
                      AND.B #$C0                                ;;BF12|BF72+BF72/BF72\BF73;
                      ORA.B !_4                                 ;;BF14|BF74+BF74/BF74\BF75;
                      STA.B !_7                                 ;;BF16|BF76+BF76/BF76\BF77;
                      REP #$20                                  ;;BF18|BF78+BF78/BF78\BF79; Accum (16 bit) 
                      LDA.B !_9                                 ;;BF1A|BF7A+BF7A/BF7A\BF7B;
                      AND.W #$0001                              ;;BF1C|BF7C+BF7C/BF7C\BF7D;
                      BNE CODE_00BF9B                           ;;BF1F|BF7F+BF7F/BF7F\BF80;
                      LDA.B !Layer1XPos                         ;;BF21|BF81+BF81/BF81\BF82;
                      SEC                                       ;;BF23|BF83+BF83/BF83\BF84;
                      SBC.W #$0080                              ;;BF24|BF84+BF84/BF84\BF85;
                      TAX                                       ;;BF27|BF87+BF87/BF87\BF88;
                      LDY.B !Layer1YPos                         ;;BF28|BF88+BF88/BF88\BF89;
                      LDA.W !LayerProcessing                    ;;BF2A|BF8A+BF8A/BF8A\BF8B;
                      BEQ CODE_00BFB2                           ;;BF2D|BF8D+BF8D/BF8D\BF8E;
                      LDX.B !Layer2XPos                         ;;BF2F|BF8F+BF8F/BF8F\BF90;
                      LDA.B !Layer2YPos                         ;;BF31|BF91+BF91/BF91\BF92;
                      SEC                                       ;;BF33|BF93+BF93/BF93\BF94;
                      SBC.W #$0080                              ;;BF34|BF94+BF94/BF94\BF95;
                      TAY                                       ;;BF37|BF97+BF97/BF97\BF98;
                      JMP CODE_00BFB2                           ;;BF38|BF98+BF98/BF98\BF99;
                                                                ;;                        ;
CODE_00BF9B:          LDX.B !Layer1XPos                         ;;BF3B|BF9B+BF9B/BF9B\BF9C;
                      LDA.B !Layer1YPos                         ;;BF3D|BF9D+BF9D/BF9D\BF9E;
                      SEC                                       ;;BF3F|BF9F+BF9F/BF9F\BFA0;
                      SBC.W #$0080                              ;;BF40|BFA0+BFA0/BFA0\BFA1;
                      TAY                                       ;;BF43|BFA3+BFA3/BFA3\BFA4;
                      LDA.W !LayerProcessing                    ;;BF44|BFA4+BFA4/BFA4\BFA5;
                      BEQ CODE_00BFB2                           ;;BF47|BFA7+BFA7/BFA7\BFA8;
                      LDA.B !Layer2XPos                         ;;BF49|BFA9+BFA9/BFA9\BFAA;
                      SEC                                       ;;BF4B|BFAB+BFAB/BFAB\BFAC;
                      SBC.W #$0080                              ;;BF4C|BFAC+BFAC/BFAC\BFAD;
                      TAX                                       ;;BF4F|BFAF+BFAF/BFAF\BFB0;
                      LDY.B !Layer2YPos                         ;;BF50|BFB0+BFB0/BFB0\BFB1;
CODE_00BFB2:          STX.B !_8                                 ;;BF52|BFB2+BFB2/BFB2\BFB3;
                      STY.B !_A                                 ;;BF54|BFB4+BFB4/BFB4\BFB5;
                      JSR CODE_00BFBC                           ;;BF56|BFB6+BFB6/BFB6\BFB7;
CODE_00BFB9:          PLX                                       ;;BF59|BFB9+BFB9/BFB9\BFBA;
                      PLP                                       ;;BF5A|BFBA+BFBA/BFBA\BFBB;
                      RTL                                       ;;BF5B|BFBB+BFBB/BFBB\BFBC; Return 
                                                                ;;                        ;
CODE_00BFBC:          SEP #$30                                  ;;BF5C|BFBC+BFBC/BFBC\BFBD; Index (8 bit) Accum (8 bit) 
                      LDA.B !Map16TileGenerate                  ;;BF5E|BFBE+BFBE/BFBE\BFBF;
                      DEC A                                     ;;BF60|BFC0+BFC0/BFC0\BFC1;
                      PHK                                       ;;BF61|BFC1+BFC1/BFC1\BFC2;
                      PER $0003                                 ;;BF62|BFC2+BFC2/BFC2\BFC3;
                      JML ExecutePtr                            ;;BF65|BFC5+BFC5/BFC5\BFC6; $9C - Tile generated 
                                                                ;;                        ;
                                                                ;;                        ;
GeneratedTiles:       dw CODE_00C074                            ;;BF69|BFC9+BFC9/BFC9\BFCA; 01 - empty space 
                      dw CODE_00C077                            ;;BF6B|BFCB+BFCB/BFCB\BFCC; 02 - empty space 
                      dw CODE_00C077                            ;;BF6D|BFCD+BFCD/BFCD\BFCE; 03 - vine 
                      dw CODE_00C077                            ;;BF6F|BFCF+BFCF/BFCF\BFD0; 04 - tree background, for berries 
                      dw CODE_00C077                            ;;BF71|BFD1+BFD1/BFD1\BFD2; 05 - always turning block 
                      dw CODE_00C077                            ;;BF73|BFD3+BFD3/BFD3\BFD4; 06 - coin 
                      dw CODE_00C077                            ;;BF75|BFD5+BFD5/BFD5\BFD6; 07 - Mushroom scale base 
                      dw CODE_00C077                            ;;BF77|BFD7+BFD7/BFD7\BFD8; 08 - mole hole 
                      dw CODE_00C0C4                            ;;BF79|BFD9+BFD9/BFD9\BFDA; 09 - invisible solid 
                      dw CODE_00C0C4                            ;;BF7B|BFDB+BFDB/BFDB\BFDC; 0a - multiple coin turnblock 
                      dw CODE_00C0C4                            ;;BF7D|BFDD+BFDD/BFDD\BFDE; 0b - multiple coin q block 
                      dw CODE_00C0C4                            ;;BF7F|BFDF+BFDF/BFDF\BFE0; 0c - turn block 
                      dw CODE_00C0C4                            ;;BF81|BFE1+BFE1/BFE1\BFE2; 0d - used block 
                      dw CODE_00C0C4                            ;;BF83|BFE3+BFE3/BFE3\BFE4; 0e - music block 
                      dw CODE_00C0C4                            ;;BF85|BFE5+BFE5/BFE5\BFE6; 0f - music 
                      dw CODE_00C0C4                            ;;BF87|BFE7+BFE7/BFE7\BFE8; 10 - all way music block 
                      dw CODE_00C0C4                            ;;BF89|BFE9+BFE9/BFE9\BFEA; 11 - sideways turn block 
                      dw CODE_00C0C4                            ;;BF8B|BFEB+BFEB/BFEB\BFEC; 12 - tranlucent 
                      dw CODE_00C0C4                            ;;BF8D|BFED+BFED/BFED\BFEE; 13 - on off 
                      dw CODE_00C0C4                            ;;BF8F|BFEF+BFEF/BFEF\BFF0; 14 - side of pipe, left 
                      dw CODE_00C0C4                            ;;BF91|BFF1+BFF1/BFF1\BFF2; 15 - side of pipe, right 
                      dw CODE_00C0C1                            ;;BF93|BFF3+BFF3/BFF3\BFF4; 16 - used 
                      dw CODE_00C0C1                            ;;BF95|BFF5+BFF5/BFF5\BFF6; 17 - O block from 1up game 
                      dw CODE_00C1AC                            ;;BF97|BFF7+BFF7/BFF7\BFF8; 18 - invisible block containing wings 
                      dw CODE_00C334                            ;;BF99|BFF9+BFF9/BFF9\BFFA; 19 - cage 
                      dw CODE_00C334                            ;;BF9B|BFFB+BFFB/BFFB\BFFC; 1a - cage 
                      dw CODE_00C3D1                            ;;BF9D|BFFD+BFFD/BFFD\BFFE; 1b -  
                                                                ;;                        ;
DATA_00BFFF:          dw $0000,$0080,$0100                      ;;BF9F|BFFF+BFFF/BFFF\C000;
                                                                ;;                        ;
DATA_00C005:          db $80,$40,$20,$10,$08,$04,$02,$01        ;;BFA5|C005+C005/C005\C006;
                                                                ;;                        ;
CODE_00C00D:          REP #$30                                  ;;BFAD|C00D+C00D/C00D\C00E; Index (16 bit) Accum (16 bit) 
                      LDA.B !TouchBlockXPos                     ;;BFAF|C00F+C00F/C00F\C010;
                      AND.W #$FF00                              ;;BFB1|C011+C011/C011\C012;
                      LSR A                                     ;;BFB4|C014+C014/C014\C015;
                      LSR A                                     ;;BFB5|C015+C015/C015\C016;
                      LSR A                                     ;;BFB6|C016+C016/C016\C017;
                      LSR A                                     ;;BFB7|C017+C017/C017\C018;
                      LSR A                                     ;;BFB8|C018+C018/C018\C019;
                      LSR A                                     ;;BFB9|C019+C019/C019\C01A;
                      STA.B !_4                                 ;;BFBA|C01A+C01A/C01A\C01B;
                      LDA.B !TouchBlockXPos                     ;;BFBC|C01C+C01C/C01C\C01D;
                      AND.W #$0080                              ;;BFBE|C01E+C01E/C01E\C01F;
                      LSR A                                     ;;BFC1|C021+C021/C021\C022;
                      LSR A                                     ;;BFC2|C022+C022/C022\C023;
                      LSR A                                     ;;BFC3|C023+C023/C023\C024;
                      LSR A                                     ;;BFC4|C024+C024/C024\C025;
                      LSR A                                     ;;BFC5|C025+C025/C025\C026;
                      LSR A                                     ;;BFC6|C026+C026/C026\C027;
                      LSR A                                     ;;BFC7|C027+C027/C027\C028;
                      ORA.B !_4                                 ;;BFC8|C028+C028/C028\C029;
                      STA.B !_4                                 ;;BFCA|C02A+C02A/C02A\C02B;
                      LDA.B !TouchBlockYPos                     ;;BFCC|C02C+C02C/C02C\C02D;
                      AND.W #$0100                              ;;BFCE|C02E+C02E/C02E\C02F;
                      BEQ +                                     ;;BFD1|C031+C031/C031\C032;
                      LDA.B !_4                                 ;;BFD3|C033+C033/C033\C034;
                      ORA.W #$0002                              ;;BFD5|C035+C035/C035\C036;
                      STA.B !_4                                 ;;BFD8|C038+C038/C038\C039;
                    + LDA.W !ItemMemorySetting                  ;;BFDA|C03A+C03A/C03A\C03B;
                      AND.W #$000F                              ;;BFDD|C03D+C03D/C03D\C03E;
                      ASL A                                     ;;BFE0|C040+C040/C040\C041;
                      TAX                                       ;;BFE1|C041+C041/C041\C042;
                      LDA.L DATA_00BFFF,X                       ;;BFE2|C042+C042/C042\C043;
                      CLC                                       ;;BFE6|C046+C046/C046\C047;
                      ADC.B !_4                                 ;;BFE7|C047+C047/C047\C048;
                      STA.B !_4                                 ;;BFE9|C049+C049/C049\C04A;
                      TAY                                       ;;BFEB|C04B+C04B/C04B\C04C;
                      LDA.B !TouchBlockXPos                     ;;BFEC|C04C+C04C/C04C\C04D;
                      AND.W #$0070                              ;;BFEE|C04E+C04E/C04E\C04F;
                      LSR A                                     ;;BFF1|C051+C051/C051\C052;
                      LSR A                                     ;;BFF2|C052+C052/C052\C053;
                      LSR A                                     ;;BFF3|C053+C053/C053\C054;
                      LSR A                                     ;;BFF4|C054+C054/C054\C055;
                      TAX                                       ;;BFF5|C055+C055/C055\C056;
                      SEP #$20                                  ;;BFF6|C056+C056/C056\C057; Accum (8 bit) 
                      LDA.W !ItemMemoryTable,Y                  ;;BFF8|C058+C058/C058\C059;
                      ORA.L DATA_00C005,X                       ;;BFFB|C05B+C05B/C05B\C05C;
                      STA.W !ItemMemoryTable,Y                  ;;BFFF|C05F+C05F/C05F\C060;
                      RTS                                       ;;C002|C062+C062/C062\C063; Return 
                                                                ;;                        ;
                                                                ;;                        ;
                      db $7F,$BF,$DF,$EF,$F7,$FB,$FD,$FE        ;;C003|C063+C063/C063\C064;
TileToGeneratePg0:    db $25,$25,$25,$06,$49,$48,$2B,$A2        ;;C00B|C06B+C06B/C06B\C06C;
                      db $C6                                    ;;C013|C073+C073/C073\C074;
                                                                ;;                        ;
CODE_00C074:          JSR CODE_00C00D                           ;;C014|C074+C074/C074\C075;
CODE_00C077:          REP #$30                                  ;;C017|C077+C077/C077\C078; Index (16 bit) Accum (16 bit) 
                      LDA.B !TouchBlockYPos                     ;;C019|C079+C079/C079\C07A;
                      AND.W #$01F0                              ;;C01B|C07B+C07B/C07B\C07C;
                      STA.B !_4                                 ;;C01E|C07E+C07E/C07E\C07F;
                      LDA.B !TouchBlockXPos                     ;;C020|C080+C080/C080\C081;
                      LSR A                                     ;;C022|C082+C082/C082\C083;
                      LSR A                                     ;;C023|C083+C083/C083\C084;
                      LSR A                                     ;;C024|C084+C084/C084\C085;
                      LSR A                                     ;;C025|C085+C085/C085\C086;
                      AND.W #$000F                              ;;C026|C086+C086/C086\C087;
                      ORA.B !_4                                 ;;C029|C089+C089/C089\C08A;
                      TAY                                       ;;C02B|C08B+C08B/C08B\C08C;
                      LDA.B !Map16TileGenerate                  ;;C02C|C08C+C08C/C08C\C08D; \ X = index of tile to generate 
                      AND.W #$00FF                              ;;C02E|C08E+C08E/C08E\C08F;  | 
                      TAX                                       ;;C031|C091+C091/C091\C092; / 
                      SEP #$20                                  ;;C032|C092+C092/C092\C093; Accum (8 bit) 
                      LDA.B [!Map16HighPtr],Y                   ;;C034|C094+C094/C094\C095; \ Reset #$01 bit 
                      AND.B #$FE                                ;;C036|C096+C096/C096\C097;  | 
                      STA.B [!Map16HighPtr],Y                   ;;C038|C098+C098/C098\C099; / 
                      LDA.L TileToGeneratePg0,X                 ;;C03A|C09A+C09A/C09A\C09B; \ Store tile 
                      STA.B [!Map16LowPtr],Y                    ;;C03E|C09E+C09E/C09E\C09F; / 
                      REP #$20                                  ;;C040|C0A0+C0A0/C0A0\C0A1; Accum (16 bit) 
                      AND.W #$00FF                              ;;C042|C0A2+C0A2/C0A2\C0A3;
                      ASL A                                     ;;C045|C0A5+C0A5/C0A5\C0A6;
                      TAY                                       ;;C046|C0A6+C0A6/C0A6\C0A7;
                      JMP CODE_00C0FB                           ;;C047|C0A7+C0A7/C0A7\C0A8;
                                                                ;;                        ;
                                                                ;;                        ;
                      db $80,$40,$20,$10,$08,$04,$02,$01        ;;C04A|C0AA+C0AA/C0AA\C0AB;
TileToGeneratePg1:    db $52,$1B,$23,$1E,$32,$13,$15,$16        ;;C052|C0B2+C0B2/C0B2\C0B3;
                      db $2B,$2C,$12,$68,$69,$32,$5E            ;;C05A|C0BA+C0BA/C0BA\C0BB;
                                                                ;;                        ;
CODE_00C0C1:          JSR CODE_00C00D                           ;;C061|C0C1+C0C1/C0C1\C0C2;
CODE_00C0C4:          REP #$30                                  ;;C064|C0C4+C0C4/C0C4\C0C5; Index (16 bit) Accum (16 bit) 
                      LDA.B !TouchBlockYPos                     ;;C066|C0C6+C0C6/C0C6\C0C7;
                      AND.W #$01F0                              ;;C068|C0C8+C0C8/C0C8\C0C9;
                      STA.B !_4                                 ;;C06B|C0CB+C0CB/C0CB\C0CC;
                      LDA.B !TouchBlockXPos                     ;;C06D|C0CD+C0CD/C0CD\C0CE;
                      LSR A                                     ;;C06F|C0CF+C0CF/C0CF\C0D0;
                      LSR A                                     ;;C070|C0D0+C0D0/C0D0\C0D1;
                      LSR A                                     ;;C071|C0D1+C0D1/C0D1\C0D2;
                      LSR A                                     ;;C072|C0D2+C0D2/C0D2\C0D3;
                      AND.W #$000F                              ;;C073|C0D3+C0D3/C0D3\C0D4;
                      ORA.B !_4                                 ;;C076|C0D6+C0D6/C0D6\C0D7;
                      TAY                                       ;;C078|C0D8+C0D8/C0D8\C0D9;
                      LDA.B !Map16TileGenerate                  ;;C079|C0D9+C0D9/C0D9\C0DA; \ X = index of tile to generate 
                      SEC                                       ;;C07B|C0DB+C0DB/C0DB\C0DC;  | 
                      SBC.W #$0009                              ;;C07C|C0DC+C0DC/C0DC\C0DD;  | 
                      AND.W #$00FF                              ;;C07F|C0DF+C0DF/C0DF\C0E0;  | 
                      TAX                                       ;;C082|C0E2+C0E2/C0E2\C0E3; / 
                      SEP #$20                                  ;;C083|C0E3+C0E3/C0E3\C0E4; Accum (8 bit) 
                      LDA.B [!Map16HighPtr],Y                   ;;C085|C0E5+C0E5/C0E5\C0E6; \ Set #$01 bit 
                      ORA.B #$01                                ;;C087|C0E7+C0E7/C0E7\C0E8;  | 
                      STA.B [!Map16HighPtr],Y                   ;;C089|C0E9+C0E9/C0E9\C0EA; / 
                      LDA.L TileToGeneratePg1,X                 ;;C08B|C0EB+C0EB/C0EB\C0EC; \ Store tile 
                      STA.B [!Map16LowPtr],Y                    ;;C08F|C0EF+C0EF/C0EF\C0F0; / 
                      REP #$20                                  ;;C091|C0F1+C0F1/C0F1\C0F2; Accum (16 bit) 
                      AND.W #$00FF                              ;;C093|C0F3+C0F3/C0F3\C0F4;
                      ORA.W #$0100                              ;;C096|C0F6+C0F6/C0F6\C0F7;
                      ASL A                                     ;;C099|C0F9+C0F9/C0F9\C0FA;
                      TAY                                       ;;C09A|C0FA+C0FA/C0FA\C0FB;
CODE_00C0FB:          LDA.B !ScreenMode                         ;;C09B|C0FB+C0FB/C0FB\C0FC;
                      STA.B !_0                                 ;;C09D|C0FD+C0FD/C0FD\C0FE;
                      LDA.W !LayerProcessing                    ;;C09F|C0FF+C0FF/C0FF\C100;
                      BEQ +                                     ;;C0A2|C102+C102/C102\C103;
                      LSR.B !_0                                 ;;C0A4|C104+C104/C104\C105;
                    + LDA.B !_0                                 ;;C0A6|C106+C106/C106\C107;
                      AND.W #$0001                              ;;C0A8|C108+C108/C108\C109;
                      BNE CODE_00C127                           ;;C0AB|C10B+C10B/C10B\C10C;
                      LDA.B !_8                                 ;;C0AD|C10D+C10D/C10D\C10E;
                      AND.W #$FFF0                              ;;C0AF|C10F+C10F/C10F\C110;
                      BMI CODE_00C11A                           ;;C0B2|C112+C112/C112\C113;
                      CMP.B !_C                                 ;;C0B4|C114+C114/C114\C115;
                      BEQ CODE_00C13E                           ;;C0B6|C116+C116/C116\C117;
                      BCS CODE_00C124                           ;;C0B8|C118+C118/C118\C119;
CODE_00C11A:          CLC                                       ;;C0BA|C11A+C11A/C11A\C11B;
                      ADC.W #$0200                              ;;C0BB|C11B+C11B/C11B\C11C;
                      CMP.B !_C                                 ;;C0BE|C11E+C11E/C11E\C11F;
                      BEQ CODE_00C124                           ;;C0C0|C120+C120/C120\C121;
                      BCS CODE_00C13E                           ;;C0C2|C122+C122/C122\C123;
CODE_00C124:          JMP Return00C1AB                          ;;C0C4|C124+C124/C124\C125;
                                                                ;;                        ;
CODE_00C127:          LDA.B !_A                                 ;;C0C7|C127+C127/C127\C128;
                      AND.W #$FFF0                              ;;C0C9|C129+C129/C129\C12A;
                      BMI CODE_00C134                           ;;C0CC|C12C+C12C/C12C\C12D;
                      CMP.B !_E                                 ;;C0CE|C12E+C12E/C12E\C12F;
                      BEQ CODE_00C13E                           ;;C0D0|C130+C130/C130\C131;
                      BCS Return00C1AB                          ;;C0D2|C132+C132/C132\C133;
CODE_00C134:          CLC                                       ;;C0D4|C134+C134/C134\C135;
                      ADC.W #$0200                              ;;C0D5|C135+C135/C135\C136;
                      CMP.B !_E                                 ;;C0D8|C138+C138/C138\C139;
                      BEQ Return00C1AB                          ;;C0DA|C13A+C13A/C13A\C13B;
                      BCC Return00C1AB                          ;;C0DC|C13C+C13C/C13C\C13D;
CODE_00C13E:          LDA.L !DynStripeImgSize                   ;;C0DE|C13E+C13E/C13E\C13F;
                      TAX                                       ;;C0E2|C142+C142/C142\C143;
                      SEP #$20                                  ;;C0E3|C143+C143/C143\C144; Accum (8 bit) 
                      LDA.B !_6                                 ;;C0E5|C145+C145/C145\C146;
                      STA.L !DynamicStripeImage,X               ;;C0E7|C147+C147/C147\C148;
                      STA.L !DynamicStripeImage+8,X             ;;C0EB|C14B+C14B/C14B\C14C;
                      LDA.B !_7                                 ;;C0EF|C14F+C14F/C14F\C150;
                      STA.L !DynamicStripeImage+1,X             ;;C0F1|C151+C151/C151\C152;
                      CLC                                       ;;C0F5|C155+C155/C155\C156;
                      ADC.B #$20                                ;;C0F6|C156+C156/C156\C157;
                      STA.L !DynamicStripeImage+9,X             ;;C0F8|C158+C158/C158\C159;
                      LDA.B #$00                                ;;C0FC|C15C+C15C/C15C\C15D;
                      STA.L !DynamicStripeImage+2,X             ;;C0FE|C15E+C15E/C15E\C15F;
                      STA.L !DynamicStripeImage+$0A,X           ;;C102|C162+C162/C162\C163;
                      LDA.B #$03                                ;;C106|C166+C166/C166\C167;
                      STA.L !DynamicStripeImage+3,X             ;;C108|C168+C168/C168\C169;
                      STA.L !DynamicStripeImage+$0B,X           ;;C10C|C16C+C16C/C16C\C16D;
                      LDA.B #$FF                                ;;C110|C170+C170/C170\C171;
                      STA.L !DynamicStripeImage+$10,X           ;;C112|C172+C172/C172\C173;
                      LDA.B #$0D                                ;;C116|C176+C176/C176\C177;
                      STA.B !_6                                 ;;C118|C178+C178/C178\C179;
                      REP #$20                                  ;;C11A|C17A+C17A/C17A\C17B; Accum (16 bit) 
                      LDA.W !Map16Pointers,Y                    ;;C11C|C17C+C17C/C17C\C17D;
                      STA.B !_4                                 ;;C11F|C17F+C17F/C17F\C180;
                      LDY.W #$0000                              ;;C121|C181+C181/C181\C182;
                      LDA.B [!_4],Y                             ;;C124|C184+C184/C184\C185;
                      STA.L !DynamicStripeImage+4,X             ;;C126|C186+C186/C186\C187;
                      INY                                       ;;C12A|C18A+C18A/C18A\C18B;
                      INY                                       ;;C12B|C18B+C18B/C18B\C18C;
                      LDA.B [!_4],Y                             ;;C12C|C18C+C18C/C18C\C18D;
                      STA.L !DynamicStripeImage+$0C,X           ;;C12E|C18E+C18E/C18E\C18F;
                      INY                                       ;;C132|C192+C192/C192\C193;
                      INY                                       ;;C133|C193+C193/C193\C194;
                      LDA.B [!_4],Y                             ;;C134|C194+C194/C194\C195;
                      STA.L !DynamicStripeImage+6,X             ;;C136|C196+C196/C196\C197;
                      INY                                       ;;C13A|C19A+C19A/C19A\C19B;
                      INY                                       ;;C13B|C19B+C19B/C19B\C19C;
                      LDA.B [!_4],Y                             ;;C13C|C19C+C19C/C19C\C19D;
                      STA.L !DynamicStripeImage+$0E,X           ;;C13E|C19E+C19E/C19E\C19F;
                      TXA                                       ;;C142|C1A2+C1A2/C1A2\C1A3;
                      CLC                                       ;;C143|C1A3+C1A3/C1A3\C1A4;
                      ADC.W #$0010                              ;;C144|C1A4+C1A4/C1A4\C1A5;
                      STA.L !DynStripeImgSize                   ;;C147|C1A7+C1A7/C1A7\C1A8;
Return00C1AB:         RTS                                       ;;C14B|C1AB+C1AB/C1AB\C1AC; Return 
                                                                ;;                        ;
CODE_00C1AC:          JSR CODE_00C00D                           ;;C14C|C1AC+C1AC/C1AC\C1AD;
                      REP #$30                                  ;;C14F|C1AF+C1AF/C1AF\C1B0; Index (16 bit) Accum (16 bit) 
                      LDA.B !TouchBlockYPos                     ;;C151|C1B1+C1B1/C1B1\C1B2;
                      AND.W #$01F0                              ;;C153|C1B3+C1B3/C1B3\C1B4;
                      STA.B !_4                                 ;;C156|C1B6+C1B6/C1B6\C1B7;
                      LDA.B !TouchBlockXPos                     ;;C158|C1B8+C1B8/C1B8\C1B9;
                      LSR A                                     ;;C15A|C1BA+C1BA/C1BA\C1BB;
                      LSR A                                     ;;C15B|C1BB+C1BB/C1BB\C1BC;
                      LSR A                                     ;;C15C|C1BC+C1BC/C1BC\C1BD;
                      LSR A                                     ;;C15D|C1BD+C1BD/C1BD\C1BE;
                      AND.W #$000F                              ;;C15E|C1BE+C1BE/C1BE\C1BF;
                      ORA.B !_4                                 ;;C161|C1C1+C1C1/C1C1\C1C2;
                      TAY                                       ;;C163|C1C3+C1C3/C1C3\C1C4;
                      SEP #$20                                  ;;C164|C1C4+C1C4/C1C4\C1C5; Accum (8 bit) 
                      LDA.B #$25                                ;;C166|C1C6+C1C6/C1C6\C1C7;
                      STA.B [!Map16LowPtr],Y                    ;;C168|C1C8+C1C8/C1C8\C1C9;
                      REP #$20                                  ;;C16A|C1CA+C1CA/C1CA\C1CB; Accum (16 bit) 
                      TYA                                       ;;C16C|C1CC+C1CC/C1CC\C1CD;
                      CLC                                       ;;C16D|C1CD+C1CD/C1CD\C1CE;
                      ADC.W #$0010                              ;;C16E|C1CE+C1CE/C1CE\C1CF;
                      TAY                                       ;;C171|C1D1+C1D1/C1D1\C1D2;
                      SEP #$20                                  ;;C172|C1D2+C1D2/C1D2\C1D3; Accum (8 bit) 
                      LDA.B #$25                                ;;C174|C1D4+C1D4/C1D4\C1D5;
                      STA.B [!Map16LowPtr],Y                    ;;C176|C1D6+C1D6/C1D6\C1D7;
                      REP #$20                                  ;;C178|C1D8+C1D8/C1D8\C1D9; Accum (16 bit) 
                      AND.W #$00FF                              ;;C17A|C1DA+C1DA/C1DA\C1DB;
                      ASL A                                     ;;C17D|C1DD+C1DD/C1DD\C1DE;
                      TAY                                       ;;C17E|C1DE+C1DE/C1DE\C1DF;
                      LDA.B !ScreenMode                         ;;C17F|C1DF+C1DF/C1DF\C1E0;
                      STA.B !_0                                 ;;C181|C1E1+C1E1/C1E1\C1E2;
                      LDA.W !LayerProcessing                    ;;C183|C1E3+C1E3/C1E3\C1E4;
                      BEQ +                                     ;;C186|C1E6+C1E6/C1E6\C1E7;
                      LSR.B !_0                                 ;;C188|C1E8+C1E8/C1E8\C1E9;
                    + LDA.B !_0                                 ;;C18A|C1EA+C1EA/C1EA\C1EB;
                      AND.W #$0001                              ;;C18C|C1EC+C1EC/C1EC\C1ED;
                      BNE CODE_00C20B                           ;;C18F|C1EF+C1EF/C1EF\C1F0;
                      LDA.B !_8                                 ;;C191|C1F1+C1F1/C1F1\C1F2;
                      AND.W #$FFF0                              ;;C193|C1F3+C1F3/C1F3\C1F4;
                      BMI CODE_00C1FE                           ;;C196|C1F6+C1F6/C1F6\C1F7;
                      CMP.B !_C                                 ;;C198|C1F8+C1F8/C1F8\C1F9;
                      BEQ CODE_00C222                           ;;C19A|C1FA+C1FA/C1FA\C1FB;
                      BCS Return00C1AB                          ;;C19C|C1FC+C1FC/C1FC\C1FD;
CODE_00C1FE:          CLC                                       ;;C19E|C1FE+C1FE/C1FE\C1FF;
                      ADC.W #$0200                              ;;C19F|C1FF+C1FF/C1FF\C200;
                      CMP.B !_C                                 ;;C1A2|C202+C202/C202\C203;
                      BCC Return00C1AB                          ;;C1A4|C204+C204/C204\C205;
                      BEQ Return00C1AB                          ;;C1A6|C206+C206/C206\C207;
                      JMP CODE_00C222                           ;;C1A8|C208+C208/C208\C209;
                                                                ;;                        ;
CODE_00C20B:          LDA.B !_A                                 ;;C1AB|C20B+C20B/C20B\C20C;
                      AND.W #$FFF0                              ;;C1AD|C20D+C20D/C20D\C20E;
                      BMI CODE_00C218                           ;;C1B0|C210+C210/C210\C211;
                      CMP.B !_E                                 ;;C1B2|C212+C212/C212\C213;
                      BEQ CODE_00C222                           ;;C1B4|C214+C214/C214\C215;
                      BCS Return00C1AB                          ;;C1B6|C216+C216/C216\C217;
CODE_00C218:          CLC                                       ;;C1B8|C218+C218/C218\C219;
                      ADC.W #$0200                              ;;C1B9|C219+C219/C219\C21A;
                      CMP.B !_E                                 ;;C1BC|C21C+C21C/C21C\C21D;
                      BEQ Return00C1AB                          ;;C1BE|C21E+C21E/C21E\C21F;
                      BCC Return00C1AB                          ;;C1C0|C220+C220/C220\C221;
CODE_00C222:          LDA.L !DynStripeImgSize                   ;;C1C2|C222+C222/C222\C223;
                      TAX                                       ;;C1C6|C226+C226/C226\C227;
                      SEP #$20                                  ;;C1C7|C227+C227/C227\C228; Accum (8 bit) 
                      LDA.B !_6                                 ;;C1C9|C229+C229/C229\C22A;
                      STA.L !DynamicStripeImage,X               ;;C1CB|C22B+C22B/C22B\C22C;
                      STA.L !DynamicStripeImage+$0C,X           ;;C1CF|C22F+C22F/C22F\C230;
                      LDA.B !_7                                 ;;C1D3|C233+C233/C233\C234;
                      STA.L !DynamicStripeImage+1,X             ;;C1D5|C235+C235/C235\C236;
                      INC A                                     ;;C1D9|C239+C239/C239\C23A;
                      STA.L !DynamicStripeImage+$0D,X           ;;C1DA|C23A+C23A/C23A\C23B;
                      LDA.B #$80                                ;;C1DE|C23E+C23E/C23E\C23F;
                      STA.L !DynamicStripeImage+2,X             ;;C1E0|C240+C240/C240\C241;
                      STA.L !DynamicStripeImage+$0E,X           ;;C1E4|C244+C244/C244\C245;
                      LDA.B #$07                                ;;C1E8|C248+C248/C248\C249;
                      STA.L !DynamicStripeImage+3,X             ;;C1EA|C24A+C24A/C24A\C24B;
                      STA.L !DynamicStripeImage+$0F,X           ;;C1EE|C24E+C24E/C24E\C24F;
                      LDA.B #$FF                                ;;C1F2|C252+C252/C252\C253;
                      STA.L !DynamicStripeImage+$18,X           ;;C1F4|C254+C254/C254\C255;
                      LDA.B #$0D                                ;;C1F8|C258+C258/C258\C259;
                      STA.B !_6                                 ;;C1FA|C25A+C25A/C25A\C25B;
                      REP #$20                                  ;;C1FC|C25C+C25C/C25C\C25D; Accum (16 bit) 
                      LDA.W !Map16Pointers,Y                    ;;C1FE|C25E+C25E/C25E\C25F;
                      STA.B !_4                                 ;;C201|C261+C261/C261\C262;
                      LDY.W #$0000                              ;;C203|C263+C263/C263\C264;
                      LDA.B [!_4],Y                             ;;C206|C266+C266/C266\C267;
                      STA.L !DynamicStripeImage+4,X             ;;C208|C268+C268/C268\C269;
                      STA.L !DynamicStripeImage+8,X             ;;C20C|C26C+C26C/C26C\C26D;
                      INY                                       ;;C210|C270+C270/C270\C271;
                      INY                                       ;;C211|C271+C271/C271\C272;
                      LDA.B [!_4],Y                             ;;C212|C272+C272/C272\C273;
                      STA.L !DynamicStripeImage+$10,X           ;;C214|C274+C274/C274\C275;
                      STA.L !DynamicStripeImage+$14,X           ;;C218|C278+C278/C278\C279;
                      INY                                       ;;C21C|C27C+C27C/C27C\C27D;
                      INY                                       ;;C21D|C27D+C27D/C27D\C27E;
                      LDA.B [!_4],Y                             ;;C21E|C27E+C27E/C27E\C27F;
                      STA.L !DynamicStripeImage+6,X             ;;C220|C280+C280/C280\C281;
                      STA.L !DynamicStripeImage+$0A,X           ;;C224|C284+C284/C284\C285;
                      INY                                       ;;C228|C288+C288/C288\C289;
                      INY                                       ;;C229|C289+C289/C289\C28A;
                      LDA.B [!_4],Y                             ;;C22A|C28A+C28A/C28A\C28B;
                      STA.L !DynamicStripeImage+$12,X           ;;C22C|C28C+C28C/C28C\C28D;
                      STA.L !DynamicStripeImage+$16,X           ;;C230|C290+C290/C290\C291;
                      TXA                                       ;;C234|C294+C294/C294\C295;
                      CLC                                       ;;C235|C295+C295/C295\C296;
                      ADC.W #$0018                              ;;C236|C296+C296/C296\C297;
                      STA.L !DynStripeImgSize                   ;;C239|C299+C299/C299\C29A;
                      RTS                                       ;;C23D|C29D+C29D/C29D\C29E; Return 
                                                                ;;                        ;
                                                                ;;                        ;
DATA_00C29E:          db $99,$9C,$8B,$1C,$8B,$1C,$8B,$1C        ;;C23E|C29E+C29E/C29E\C29F;
                      db $8B,$1C,$99,$DC,$9B,$1C,$F8,$1C        ;;C246|C2A6+C2A6/C2A6\C2A7;
                      db $F8,$1C,$F8,$1C,$F8,$1C,$9B,$5C        ;;C24E|C2AE+C2AE/C2AE\C2AF;
                      db $9B,$1C,$F8,$1C,$F8,$1C,$F8,$1C        ;;C256|C2B6+C2B6/C2B6\C2B7;
                      db $F8,$1C,$9B,$5C,$9B,$1C,$F8,$1C        ;;C25E|C2BE+C2BE/C2BE\C2BF;
                      db $F8,$1C,$F8,$1C,$F8,$1C,$9B,$5C        ;;C266|C2C6+C2C6/C2C6\C2C7;
                      db $9B,$1C,$F8,$1C,$F8,$1C,$F8,$1C        ;;C26E|C2CE+C2CE/C2CE\C2CF;
                      db $F8,$1C,$9B,$5C,$99,$1C,$8B,$9C        ;;C276|C2D6+C2D6/C2D6\C2D7;
                      db $8B,$9C,$8B,$9C,$8B,$9C,$99,$5C        ;;C27E|C2DE+C2DE/C2DE\C2DF;
DATA_00C2E6:          db $BA,$9C,$AB,$1C,$AB,$1C,$AB,$1C        ;;C286|C2E6+C2E6/C2E6\C2E7;
                      db $AB,$1C,$BA,$DC,$AA,$1C,$82,$1C        ;;C28E|C2EE+C2EE/C2EE\C2EF;
                      db $82,$1C,$82,$1C,$82,$1C,$AA,$5C        ;;C296|C2F6+C2F6/C2F6\C2F7;
                      db $AA,$1C,$82,$1C,$82,$1C,$82,$1C        ;;C29E|C2FE+C2FE/C2FE\C2FF;
                      db $82,$1C,$AA,$5C,$AA,$1C,$82,$1C        ;;C2A6|C306+C306/C306\C307;
                      db $82,$1C,$82,$1C,$82,$1C,$AA,$5C        ;;C2AE|C30E+C30E/C30E\C30F;
                      db $AA,$1C,$82,$1C,$82,$1C,$82,$1C        ;;C2B6|C316+C316/C316\C317;
                      db $82,$1C,$AA,$5C,$BA,$1C,$AB,$9C        ;;C2BE|C31E+C31E/C31E\C31F;
                      db $AB,$9C,$AB,$9C,$AB,$9C,$BA,$5C        ;;C2C6|C326+C326/C326\C327;
                                                                ;;                        ;
DATA_00C32E:          dl DATA_00C29E                            ;;C2CE|C32E+C32E/C32E\C32F;
                      dl DATA_00C2E6                            ;;C2D1|C331+C331/C331\C332;
                                                                ;;                        ;
CODE_00C334:          INC.B !_7                                 ;;C2D4|C334+C334/C334\C335; Accum (8 bit) 
                      LDA.B !_7                                 ;;C2D6|C336+C336/C336\C337;
                      CLC                                       ;;C2D8|C338+C338/C338\C339;
                      ADC.B #$20                                ;;C2D9|C339+C339/C339\C33A;
                      STA.B !_7                                 ;;C2DB|C33B+C33B/C33B\C33C;
                      LDA.B !_6                                 ;;C2DD|C33D+C33D/C33D\C33E;
                      ADC.B #$00                                ;;C2DF|C33F+C33F/C33F\C340;
                      STA.B !_6                                 ;;C2E1|C341+C341/C341\C342;
                      LDA.B !Map16TileGenerate                  ;;C2E3|C343+C343/C343\C344;
                      SEC                                       ;;C2E5|C345+C345/C345\C346;
                      SBC.B #$19                                ;;C2E6|C346+C346/C346\C347;
                      STA.B !_0                                 ;;C2E8|C348+C348/C348\C349;
                      ASL A                                     ;;C2EA|C34A+C34A/C34A\C34B;
                      CLC                                       ;;C2EB|C34B+C34B/C34B\C34C;
                      ADC.B !_0                                 ;;C2EC|C34C+C34C/C34C\C34D;
                      TAX                                       ;;C2EE|C34E+C34E/C34E\C34F;
                      LDA.L DATA_00C32E+2,X                     ;;C2EF|C34F+C34F/C34F\C350;
                      STA.B !_4                                 ;;C2F3|C353+C353/C353\C354;
                      REP #$30                                  ;;C2F5|C355+C355/C355\C356; Index (16 bit) Accum (16 bit) 
                      LDA.L DATA_00C32E,X                       ;;C2F7|C357+C357/C357\C358;
                      STA.B !_2                                 ;;C2FB|C35B+C35B/C35B\C35C;
                      LDA.L !DynStripeImgSize                   ;;C2FD|C35D+C35D/C35D\C35E;
                      TAX                                       ;;C301|C361+C361/C361\C362;
                      LDY.W #$0005                              ;;C302|C362+C362/C362\C363;
                    - SEP #$20                                  ;;C305|C365+C365/C365\C366; Accum (8 bit) 
                      LDA.B !_6                                 ;;C307|C367+C367/C367\C368;
                      STA.L !DynamicStripeImage,X               ;;C309|C369+C369/C369\C36A;
                      LDA.B !_7                                 ;;C30D|C36D+C36D/C36D\C36E;
                      STA.L !DynamicStripeImage+1,X             ;;C30F|C36F+C36F/C36F\C370;
                      LDA.B #$00                                ;;C313|C373+C373/C373\C374;
                      STA.L !DynamicStripeImage+2,X             ;;C315|C375+C375/C375\C376;
                      LDA.B #$0B                                ;;C319|C379+C379/C379\C37A;
                      STA.L !DynamicStripeImage+3,X             ;;C31B|C37B+C37B/C37B\C37C;
                      LDA.B !_7                                 ;;C31F|C37F+C37F/C37F\C380;
                      CLC                                       ;;C321|C381+C381/C381\C382;
                      ADC.B #$20                                ;;C322|C382+C382/C382\C383;
                      STA.B !_7                                 ;;C324|C384+C384/C384\C385;
                      LDA.B !_6                                 ;;C326|C386+C386/C386\C387;
                      ADC.B #$00                                ;;C328|C388+C388/C388\C389;
                      STA.B !_6                                 ;;C32A|C38A+C38A/C38A\C38B;
                      REP #$20                                  ;;C32C|C38C+C38C/C38C\C38D; Accum (16 bit) 
                      TXA                                       ;;C32E|C38E+C38E/C38E\C38F;
                      CLC                                       ;;C32F|C38F+C38F/C38F\C390;
                      ADC.W #$0010                              ;;C330|C390+C390/C390\C391;
                      TAX                                       ;;C333|C393+C393/C393\C394;
                      DEY                                       ;;C334|C394+C394/C394\C395;
                      BPL -                                     ;;C335|C395+C395/C395\C396;
                      LDA.L !DynStripeImgSize                   ;;C337|C397+C397/C397\C398;
                      TAX                                       ;;C33B|C39B+C39B/C39B\C39C;
                      LDY.W #$0000                              ;;C33C|C39C+C39C/C39C\C39D;
CODE_00C39F:          LDA.W #$0005                              ;;C33F|C39F+C39F/C39F\C3A0;
                      STA.B !_0                                 ;;C342|C3A2+C3A2/C3A2\C3A3;
                    - LDA.B [!_2],Y                             ;;C344|C3A4+C3A4/C3A4\C3A5;
                      STA.L !DynamicStripeImage+4,X             ;;C346|C3A6+C3A6/C3A6\C3A7;
                      INY                                       ;;C34A|C3AA+C3AA/C3AA\C3AB;
                      INY                                       ;;C34B|C3AB+C3AB/C3AB\C3AC;
                      INX                                       ;;C34C|C3AC+C3AC/C3AC\C3AD;
                      INX                                       ;;C34D|C3AD+C3AD/C3AD\C3AE;
                      DEC.B !_0                                 ;;C34E|C3AE+C3AE/C3AE\C3AF;
                      BPL -                                     ;;C350|C3B0+C3B0/C3B0\C3B1;
                      TXA                                       ;;C352|C3B2+C3B2/C3B2\C3B3;
                      CLC                                       ;;C353|C3B3+C3B3/C3B3\C3B4;
                      ADC.W #$0004                              ;;C354|C3B4+C3B4/C3B4\C3B5;
                      TAX                                       ;;C357|C3B7+C3B7/C3B7\C3B8;
                      CPY.W #$0048                              ;;C358|C3B8+C3B8/C3B8\C3B9;
                      BNE CODE_00C39F                           ;;C35B|C3BB+C3BB/C3BB\C3BC;
                      LDA.W #$00FF                              ;;C35D|C3BD+C3BD/C3BD\C3BE;
                      STA.L !DynamicStripeImage,X               ;;C360|C3C0+C3C0/C3C0\C3C1;
                      LDA.L !DynStripeImgSize                   ;;C364|C3C4+C3C4/C3C4\C3C5;
                      CLC                                       ;;C368|C3C8+C3C8/C3C8\C3C9;
                      ADC.W #$0060                              ;;C369|C3C9+C3C9/C3C9\C3CA;
                      STA.L !DynStripeImgSize                   ;;C36C|C3CC+C3CC/C3CC\C3CD;
                      RTS                                       ;;C370|C3D0+C3D0/C3D0\C3D1; Return 
                                                                ;;                        ;
CODE_00C3D1:          REP #$30                                  ;;C371|C3D1+C3D1/C3D1\C3D2; Index (16 bit) Accum (16 bit) 
                      LDA.B !TouchBlockYPos                     ;;C373|C3D3+C3D3/C3D3\C3D4;
                      AND.W #$01F0                              ;;C375|C3D5+C3D5/C3D5\C3D6;
                      STA.B !_4                                 ;;C378|C3D8+C3D8/C3D8\C3D9;
                      LDA.B !TouchBlockXPos                     ;;C37A|C3DA+C3DA/C3DA\C3DB;
                      LSR A                                     ;;C37C|C3DC+C3DC/C3DC\C3DD;
                      LSR A                                     ;;C37D|C3DD+C3DD/C3DD\C3DE;
                      LSR A                                     ;;C37E|C3DE+C3DE/C3DE\C3DF;
                      LSR A                                     ;;C37F|C3DF+C3DF/C3DF\C3E0;
                      AND.W #$000F                              ;;C380|C3E0+C3E0/C3E0\C3E1;
                      ORA.B !_4                                 ;;C383|C3E3+C3E3/C3E3\C3E4;
                      TAY                                       ;;C385|C3E5+C3E5/C3E5\C3E6;
                      LDA.L !DynStripeImgSize                   ;;C386|C3E6+C3E6/C3E6\C3E7;
                      TAX                                       ;;C38A|C3EA+C3EA/C3EA\C3EB;
                      SEP #$20                                  ;;C38B|C3EB+C3EB/C3EB\C3EC; Accum (8 bit) 
                      LDA.B #$25                                ;;C38D|C3ED+C3ED/C3ED\C3EE;
                      STA.B [!Map16LowPtr],Y                    ;;C38F|C3EF+C3EF/C3EF\C3F0;
                      INY                                       ;;C391|C3F1+C3F1/C3F1\C3F2;
                      LDA.B #$25                                ;;C392|C3F2+C3F2/C3F2\C3F3;
                      STA.B [!Map16LowPtr],Y                    ;;C394|C3F4+C3F4/C3F4\C3F5;
                      REP #$20                                  ;;C396|C3F6+C3F6/C3F6\C3F7; Accum (16 bit) 
                      TYA                                       ;;C398|C3F8+C3F8/C3F8\C3F9;
                      CLC                                       ;;C399|C3F9+C3F9/C3F9\C3FA;
                      ADC.W #$0010                              ;;C39A|C3FA+C3FA/C3FA\C3FB;
                      TAY                                       ;;C39D|C3FD+C3FD/C3FD\C3FE;
                      SEP #$20                                  ;;C39E|C3FE+C3FE/C3FE\C3FF; Accum (8 bit) 
                      LDA.B #$25                                ;;C3A0|C400+C400/C400\C401;
                      STA.B [!Map16LowPtr],Y                    ;;C3A2|C402+C402/C402\C403;
                      DEY                                       ;;C3A4|C404+C404/C404\C405;
                      LDA.B #$25                                ;;C3A5|C405+C405/C405\C406;
                      STA.B [!Map16LowPtr],Y                    ;;C3A7|C407+C407/C407\C408;
                      LDY.W #$0003                              ;;C3A9|C409+C409/C409\C40A;
                    - LDA.B !_6                                 ;;C3AC|C40C+C40C/C40C\C40D;
                      STA.L !DynamicStripeImage,X               ;;C3AE|C40E+C40E/C40E\C40F;
                      LDA.B !_7                                 ;;C3B2|C412+C412/C412\C413;
                      STA.L !DynamicStripeImage+1,X             ;;C3B4|C414+C414/C414\C415;
                      LDA.B #$40                                ;;C3B8|C418+C418/C418\C419;
                      STA.L !DynamicStripeImage+2,X             ;;C3BA|C41A+C41A/C41A\C41B;
                      LDA.B #$06                                ;;C3BE|C41E+C41E/C41E\C41F;
                      STA.L !DynamicStripeImage+3,X             ;;C3C0|C420+C420/C420\C421;
                      REP #$20                                  ;;C3C4|C424+C424/C424\C425; Accum (16 bit) 
                      LDA.W #$18F8                              ;;C3C6|C426+C426/C426\C427;
                      STA.L !DynamicStripeImage+4,X             ;;C3C9|C429+C429/C429\C42A;
                      TXA                                       ;;C3CD|C42D+C42D/C42D\C42E;
                      CLC                                       ;;C3CE|C42E+C42E/C42E\C42F;
                      ADC.W #$0006                              ;;C3CF|C42F+C42F/C42F\C430;
                      TAX                                       ;;C3D2|C432+C432/C432\C433;
                      SEP #$20                                  ;;C3D3|C433+C433/C433\C434; Accum (8 bit) 
                      LDA.B !_7                                 ;;C3D5|C435+C435/C435\C436;
                      CLC                                       ;;C3D7|C437+C437/C437\C438;
                      ADC.B #$20                                ;;C3D8|C438+C438/C438\C439;
                      STA.B !_7                                 ;;C3DA|C43A+C43A/C43A\C43B;
                      LDA.B !_6                                 ;;C3DC|C43C+C43C/C43C\C43D;
                      ADC.B #$00                                ;;C3DE|C43E+C43E/C43E\C43F;
                      STA.B !_6                                 ;;C3E0|C440+C440/C440\C441;
                      DEY                                       ;;C3E2|C442+C442/C442\C443;
                      BPL -                                     ;;C3E3|C443+C443/C443\C444;
                      LDA.B #$FF                                ;;C3E5|C445+C445/C445\C446;
                      STA.L !DynamicStripeImage,X               ;;C3E7|C447+C447/C447\C448;
                      REP #$20                                  ;;C3EB|C44B+C44B/C44B\C44C; Accum (16 bit) 
                      TXA                                       ;;C3ED|C44D+C44D/C44D\C44E;
                      STA.L !DynStripeImgSize                   ;;C3EE|C44E+C44E/C44E\C44F;
                      RTS                                       ;;C3F2|C452+C452/C452\C453; Return 
                                                                ;;                        ;
                      %insert_empty($0D,$0D,$0D,$0D,$0C)        ;;C3F3|C453+C453/C453\C454;
                                                                ;;                        ;
                      db $80,$40,$20,$10,$08,$04,$02,$01        ;;C400|C460+C460/C460\C460;
                      db $80,$40,$20,$10,$08,$04,$02,$01        ;;C408|C468+C468/C468\C468;
                                                                ;;                        ;
DATA_00C470:          db $90,$00,$90,$00                        ;;C410|C470+C470/C470\C470;
                                                                ;;                        ;
DATA_00C474:          db $04,$FC,$04,$FC                        ;;C414|C474+C474/C474\C474;
                                                                ;;                        ;
DATA_00C478:          db $30,$33,$33,$30,$01,$00                ;;C418|C478+C478/C478\C478;
                                                                ;;                        ;
CODE_00C47E:          STZ.B !PlayerHiddenTiles                  ;;C41E|C47E+C47E/C47E\C47E; Index (8 bit) Accum (8 bit) 
                      LDA.W !UnusedStarCounter                  ;;C420|C480+C480/C480\C480;
                      BPL +                                     ;;C423|C483+C483/C483\C483;
                      JSL CODE_01C580                           ;;C425|C485+C485/C485\C485;
                      STZ.W !UnusedStarCounter                  ;;C429|C489+C489/C489\C489;
                    + LDY.W !KeyholeTimer                       ;;C42C|C48C+C48C/C48C\C48C;
                      BEQ CODE_00C4BA                           ;;C42F|C48F+C48F/C48F\C48F;
                      STY.W !PlayerIsFrozen                     ;;C431|C491+C491/C491\C491;
                      STY.B !SpriteLock                         ;;C434|C494+C494/C494\C494;
                      LDX.W !KeyholeDirection                   ;;C436|C496+C496/C496\C496;
                      LDA.W !SpotlightSize                      ;;C439|C499+C499/C499\C499;
                      CMP.W DATA_00C470,X                       ;;C43C|C49C+C49C/C49C\C49C;
                      BNE CODE_00C4BC                           ;;C43F|C49F+C49F/C49F\C49F;
                      DEY                                       ;;C441|C4A1+C4A1/C4A1\C4A1;
                      BNE CODE_00C4B7                           ;;C442|C4A2+C4A2/C4A2\C4A2;
                      INC.W !KeyholeDirection                   ;;C444|C4A4+C4A4/C4A4\C4A4;
                      TXA                                       ;;C447|C4A7+C4A7/C4A7\C4A7;
                      LSR A                                     ;;C448|C4A8+C4A8/C4A8\C4A8;
                      BCC +                                     ;;C449|C4A9+C4A9/C4A9\C4A9;
                      JSR CODE_00FCEC                           ;;C44B|C4AB+C4AB/C4AB\C4AB;
                      LDA.B #$02                                ;;C44E|C4AE+C4AE/C4AE\C4AE;
                      LDY.B #$0B                                ;;C450|C4B0+C4B0/C4B0\C4B0;
                      JSR CODE_00C9FE                           ;;C452|C4B2+C4B2/C4B2\C4B2;
                      LDY.B #$00                                ;;C455|C4B5+C4B5/C4B5\C4B5;
CODE_00C4B7:          STY.W !KeyholeTimer                       ;;C457|C4B7+C4B7/C4B7\C4B7;
CODE_00C4BA:          BRA +                                     ;;C45A|C4BA+C4BA/C4BA\C4BA;
                                                                ;;                        ;
CODE_00C4BC:          CLC                                       ;;C45C|C4BC+C4BC/C4BC\C4BC;
                      ADC.W DATA_00C474,X                       ;;C45D|C4BD+C4BD/C4BD\C4BD;
                      STA.W !SpotlightSize                      ;;C460|C4C0+C4C0/C4C0\C4C0;
                      LDA.B #$22                                ;;C463|C4C3+C4C3/C4C3\C4C3;
                      STA.B !Layer12Window                      ;;C465|C4C5+C4C5/C4C5\C4C5;
                      LDA.B #$02                                ;;C467|C4C7+C4C7/C4C7\C4C7;
                      STA.B !Layer34Window                      ;;C469|C4C9+C4C9/C4C9\C4C9;
                      LDA.W DATA_00C478,X                       ;;C46B|C4CB+C4CB/C4CB\C4CB;
                      STA.B !OBJCWWindow                        ;;C46E|C4CE+C4CE/C4CE\C4CE;
                      LDA.B #$12                                ;;C470|C4D0+C4D0/C4D0\C4D0;
                      STA.B !ColorAddition                      ;;C472|C4D2+C4D2/C4D2\C4D2;
                      REP #$20                                  ;;C474|C4D4+C4D4/C4D4\C4D4; Accum (16 bit) 
                      LDA.W #DATA_00CB93                        ;;C476|C4D6+C4D6/C4D6\C4D6;
                      STA.B !_4                                 ;;C479|C4D9+C4D9/C4D9\C4D9;
                      STZ.B !_6                                 ;;C47B|C4DB+C4DB/C4DB\C4DB;
                      SEP #$20                                  ;;C47D|C4DD+C4DD/C4DD\C4DD; Accum (8 bit) 
                      LDA.W !KeyholeXPos                        ;;C47F|C4DF+C4DF/C4DF\C4DF;
                      SEC                                       ;;C482|C4E2+C4E2/C4E2\C4E2;
                      SBC.B !Layer1XPos                         ;;C483|C4E3+C4E3/C4E3\C4E3;
                      CLC                                       ;;C485|C4E5+C4E5/C4E5\C4E5;
                      ADC.B #$04                                ;;C486|C4E6+C4E6/C4E6\C4E6;
                      STA.B !_0                                 ;;C488|C4E8+C4E8/C4E8\C4E8;
                      LDA.W !KeyholeYPos                        ;;C48A|C4EA+C4EA/C4EA\C4EA;
                      SEC                                       ;;C48D|C4ED+C4ED/C4ED\C4ED;
                      SBC.B !Layer1YPos                         ;;C48E|C4EE+C4EE/C4EE\C4EE;
                      CLC                                       ;;C490|C4F0+C4F0/C4F0\C4F0;
                      ADC.B #$10                                ;;C491|C4F1+C4F1/C4F1\C4F1;
                      STA.B !_1                                 ;;C493|C4F3+C4F3/C4F3\C4F3;
                      JSR CODE_00CA88                           ;;C495|C4F5+C4F5/C4F5\C4F5;
                    + LDA.W !PlayerIsFrozen                     ;;C498|C4F8+C4F8/C4F8\C4F8;
                      BEQ +                                     ;;C49B|C4FB+C4FB/C4FB\C4FB;
                      JMP CODE_00C58F                           ;;C49D|C4FD+C4FD/C4FD\C4FD;
                                                                ;;                        ;
                    + LDA.B !SpriteLock                         ;;C4A0|C500+C500/C500\C500; \ Branch if sprites locked 
                      BNE CODE_00C569                           ;;C4A2|C502+C502/C502\C502; / 
                      INC.B !EffFrame                           ;;C4A4|C504+C504/C504\C504;
                      LDX.B #$13                                ;;C4A6|C506+C506/C506\C506;
CODE_00C508:          LDA.W !ColorFadeTimer,X                   ;;C4A8|C508+C508/C508\C508;
                      BEQ +                                     ;;C4AB|C50B+C50B/C50B\C50B;
                      DEC.W !ColorFadeTimer,X                   ;;C4AD|C50D+C50D/C50D\C50D;
                    + DEX                                       ;;C4B0|C510+C510/C510\C510;
                      BNE CODE_00C508                           ;;C4B1|C511+C511/C511\C511;
                      LDA.B !EffFrame                           ;;C4B3|C513+C513/C513\C513;
                      AND.B #$03                                ;;C4B5|C515+C515/C515\C515;
                      BNE CODE_00C569                           ;;C4B7|C517+C517/C517\C517;
                      LDA.W !BonusGameActivate                  ;;C4B9|C519+C519/C519\C519;
                      BEQ CODE_00C533                           ;;C4BC|C51C+C51C/C51C\C51C;
                      LDA.W !BonusFinishTimer                   ;;C4BE|C51E+C51E/C51E\C51E;
                      CMP.B #$44                                ;;C4C1|C521+C521/C521\C521;
                      BNE +                                     ;;C4C3|C523+C523/C523\C523;
                      LDY.B #!BGM_BONUSOVER                     ;;C4C5|C525+C525/C525\C525;
                      STY.W !SPCIO2                             ;;C4C7|C527+C527/C527\C527; / Change music 
                    + CMP.B #con($01,$01,$01,$08,$08)           ;;C4CA|C52A+C52A/C52A\C52A;
                      BNE CODE_00C533                           ;;C4CC|C52C+C52C/C52C\C52C;
                      LDY.B #$0B                                ;;C4CE|C52E+C52E/C52E\C52E;
                      STY.W !GameMode                           ;;C4D0|C530+C530/C530\C530;
CODE_00C533:          LDY.W !BluePSwitchTimer                   ;;C4D3|C533+C533/C533\C533;
                      CPY.W !SilverPSwitchTimer                 ;;C4D6|C536+C536/C536\C536;
                      BCS +                                     ;;C4D9|C539+C539/C539\C539;
                      LDY.W !SilverPSwitchTimer                 ;;C4DB|C53B+C53B/C53B\C53B;
                    + LDA.W !MusicBackup                        ;;C4DE|C53E+C53E/C53E\C53E;
                      BMI +                                     ;;C4E1|C541+C541/C541\C541;
                      CPY.B #$01                                ;;C4E3|C543+C543/C543\C543;
                      BNE +                                     ;;C4E5|C545+C545/C545\C545;
                      LDY.W !DirectCoinTimer                    ;;C4E7|C547+C547/C547\C547;
                      BNE +                                     ;;C4EA|C54A+C54A/C54A\C54A;
                      STA.W !SPCIO2                             ;;C4EC|C54C+C54C/C54C\C54C; / Change music 
                    + CMP.B #$FF                                ;;C4EF|C54F+C54F/C54F\C54F;
                      BEQ +                                     ;;C4F1|C551+C551/C551\C551;
                      CPY.B #con($1E,$1E,$1E,$18,$18)           ;;C4F3|C553+C553/C553\C553;
                      BNE +                                     ;;C4F5|C555+C555/C555\C555;
                      LDA.B #!SFX_RUNNINGOUT                    ;;C4F7|C557+C557/C557\C557; \ Play sound effect 
                      STA.W !SPCIO3                             ;;C4F9|C559+C559/C559\C559; / 
                    + LDX.B #$06                                ;;C4FC|C55C+C55C/C55C\C55C;
CODE_00C55E:          LDA.W !EmptyTimer14A8,X                   ;;C4FE|C55E+C55E/C55E\C55E;
                      BEQ +                                     ;;C501|C561+C561/C561\C561;
                      DEC.W !EmptyTimer14A8,X                   ;;C503|C563+C563/C563\C563;
                    + DEX                                       ;;C506|C566+C566/C566\C566;
                      BNE CODE_00C55E                           ;;C507|C567+C567/C567\C567;
CODE_00C569:          JSR CODE_00C593                           ;;C509|C569+C569/C569\C569;
                      LDA.B !byetudlrFrame                      ;;C50C|C56C+C56C/C56C\C56C;
                      AND.B #$20                                ;;C50E|C56E+C56E/C56E\C56E;
                      BEQ CODE_00C58F                           ;;C510|C570+C570/C570\C570;
                   if ver_is_ntsc(!_VER)              ;\   IF   ;;++++++++++++++++++++++++; J, U, & SS
                      LDA.B !byetudlrHold                       ;;C512|C572+C572          ;
                      AND.B #$08                                ;;C514|C574+C574          ;
                      BRA CODE_00C585                           ;;C516|C576+C576          ; Change to BEQ to reach debug routine below 
                                                                ;;                        ;
                      LDA.B !Powerup                            ;;C518|C578+C578          ; \ Unreachable 
                      INC A                                     ;;C51A|C57A+C57A          ;  | Debug: Cycle through powerups 
                      CMP.B #$04                                ;;C51B|C57B+C57B          ;  | 
                      BCC +                                     ;;C51D|C57D+C57D          ;  | 
                      LDA.B #$00                                ;;C51F|C57F+C57F          ;  | 
                    + STA.B !Powerup                            ;;C521|C581+C581          ;  | 
                      BRA CODE_00C58F                           ;;C523|C583+C583          ; / 
                   endif                              ;/ ENDIF  ;;++++++++++++++++++++++++;
                                                                ;;                        ;
CODE_00C585:          PHB                                       ;;C525|C585+C585/C572\C572;
                      LDA.B #$02                                ;;C526|C586+C586/C573\C573;
                      PHA                                       ;;C528|C588+C588/C575\C575;
                      PLB                                       ;;C529|C589+C589/C576\C576;
                      JSL CODE_028008                           ;;C52A|C58A+C58A/C577\C577;
                      PLB                                       ;;C52E|C58E+C58E/C57B\C57B;
CODE_00C58F:          STZ.W !NoteBlockActive                    ;;C52F|C58F+C58F/C57C\C57C;
Return00C592:         RTS                                       ;;C532|C592+C592/C57F\C57F; Return 
                                                                ;;                        ;
CODE_00C593:          LDA.B !PlayerAnimation                    ;;C533|C593+C593/C580\C580;
                      JSL ExecutePtr                            ;;C535|C595+C595/C582\C582;
                                                                ;;                        ;
                      dw ResetAni                               ;;C539|C599+C599/C586\C586; 0 - Reset                        
                      dw PowerDownAni                           ;;C53B|C59B+C59B/C588\C588; 1 - Power down                   
                      dw MushroomAni                            ;;C53D|C59D+C59D/C58A\C58A; 2 - Mushroom power up            
                      dw CapeAni                                ;;C53F|C59F+C59F/C58C\C58C; 3 - Cape power up                
                      dw FlowerAni                              ;;C541|C5A1+C5A1/C58E\C58E; 4 - Flower power up              
                      dw DoorPipeAni                            ;;C543|C5A3+C5A3/C590\C590; 5 - Door/Horizontal pipe exit    
                      dw VertPipeAni                            ;;C545|C5A5+C5A5/C592\C592; 6 - Vertical pipe exit           
                      dw PipeCannonAni                          ;;C547|C5A7+C5A7/C594\C594; 7 - Shot out of diagonal pipe    
                      dw YoshiWingsAni                          ;;C549|C5A9+C5A9/C596\C596; 8 - Yoshi wings exit             
                      dw MarioDeathAni                          ;;C54B|C5AB+C5AB/C598\C598; 9 - Mario Death                  
                      dw EnterCastleAni                         ;;C54D|C5AD+C5AD/C59A\C59A; A - Enter Castle                 
                      dw UnknownAniB                            ;;C54F|C5AF+C5AF/C59C\C59C; B - freeze forever               
                      dw UnknownAniC                            ;;C551|C5B1+C5B1/C59E\C59E; C - random movement??            
                      dw Return00C592                           ;;C553|C5B3+C5B3/C5A0\C5A0; D - freeze forever               
                                                                ;;                        ;
UnknownAniB:          STZ.W !PlayerOverworldPose                ;;C555|C5B5+C5B5/C5A2\C5A2;
                      STZ.W !PlayerSlopePose                    ;;C558|C5B8+C5B8/C5A5\C5A5;
                      LDA.W !EndLevelTimer                      ;;C55B|C5BB+C5BB/C5A8\C5A8;
                      BEQ CODE_00C5CE                           ;;C55E|C5BE+C5BE/C5AB\C5AB;
                      JSL CODE_0CAB13                           ;;C560|C5C0+C5C0/C5AD\C5AD;
                      LDA.W !GameMode                           ;;C564|C5C4+C5C4/C5B1\C5B1;
                      CMP.B #$14                                ;;C567|C5C7+C5C7/C5B4\C5B4;
                      BEQ +                                     ;;C569|C5C9+C5C9/C5B6\C5B6;
                      JMP CODE_00C95B                           ;;C56B|C5CB+C5CB/C5B8\C5B8;
                                                                ;;                        ;
CODE_00C5CE:          STZ.W !HDMAEnable                         ;;C56E|C5CE+C5CE/C5BB\C5BB;
                    + LDA.B #$01                                ;;C571|C5D1+C5D1/C5BE\C5BE;
                      STA.W !MessageBoxExpand                   ;;C573|C5D3+C5D3/C5C0\C5C0;
                      LDA.B #$07                                ;;C576|C5D6+C5D6/C5C3\C5C3;
                      STA.W !LevelLoadObject                    ;;C578|C5D8+C5D8/C5C5\C5C5;
                      JSR NoButtons                             ;;C57B|C5DB+C5DB/C5C8\C5C8;
                      JMP CODE_00CD24                           ;;C57E|C5DE+C5DE/C5CB\C5CB;
                                                                ;;                        ;
                                                                ;;                        ;
DATA_00C5E1:          db $10,$30,$31,$32,$33,$34,$0E            ;;C581|C5E1+C5E1/C5CE\C5CE;
                                                                ;;                        ;
                   if ver_is_ntsc(!_VER)              ;\   IF   ;;++++++++++++++++++++++++; J, U, & SS
DATA_00C5E8:          db $26,$11,$02,$48,$00,$60,$01,$09        ;;C588|C5E8+C5E8          ;
                      db $80,$08,$00,$20,$04,$60,$00,$01        ;;C590|C5F0+C5F0          ;
                      db $FF,$01                                ;;C598|C5F8+C5F8          ;
                                                                ;;                        ;
DATA_00C5F9:          db $02,$48,$00,$60,$41,$2C,$C1,$04        ;;C59A|C5FA+C5FA          ;
                      db $27,$04,$2F,$08,$25,$01,$2F,$04        ;;C5A2|C602+C602          ;
                      db $27,$04,$00,$08,$41,$1B,$C1,$04        ;;C5AA|C60A+C60A          ;
                      db $27,$04,$2F,$08,$25,$01,$2F,$04        ;;C5B2|C612+C612          ;
                      db $27,$04,$00,$04,$01,$08,$20,$01        ;;C5BA|C61A+C61A          ;
                      db $01,$10,$00,$08,$41,$12,$81,$0A        ;;C5C2|C622+C622          ;
                      db $00,$40,$82,$10,$02,$20,$00,$30        ;;C5CA|C62A+C62A          ;
                      db $01,$01,$00,$50,$22,$01,$FF,$01        ;;C5D2|C632+C632          ;
                                                                ;;                        ;
DATA_00C639:          db $02,$48,$00,$60,$01,$09,$80,$08        ;;C5DA|C63A+C63A          ;
                      db $00,$20,$04,$60,$00,$20,$10,$20        ;;C5E2|C642+C642          ;
                      db $01,$58,$00,$2C,$31,$01,$3A,$10        ;;C5EA|C64A+C64A          ;
                      db $31,$01,$3A,$10,$31,$01,$3A,$20        ;;C5F2|C652+C652          ;
                      db $28,$A0,$28,$40,$29,$04,$28,$04        ;;C5FA|C65A+C65A          ;
                      db $29,$04,$28,$04,$29,$04,$28,$40        ;;C602|C662+C662          ;
                      db $22,$01,$FF,$01                        ;;C60A|C66A+C66A          ;
                                                                ;;                        ;
DATA_00C66D:          db $02,$48,$00,$60,$01,$09,$80,$08        ;;C60E|C66E+C66E          ;
                      db $00,$20,$04,$60,$10,$20,$31,$01        ;;C616|C676+C676          ;
                      db $18,$60,$31,$01,$3B,$80,$31,$01        ;;C61E|C67E+C67E          ;
                      db $3C,$40,$FF,$01                        ;;C626|C686+C686          ;
                                                                ;;                        ;
DATA_00C689:          db $02,$48,$00,$60,$02,$30,$01,$84        ;;C62A|C68A+C68A          ;
                      db $00,$20,$23,$01,$01,$16,$02,$20        ;;C632|C692+C692          ;
                      db $20,$01,$01,$20,$02,$20,$01,$02        ;;C63A|C69A+C69A          ;
                      db $00,$80,$FF,$01                        ;;C642|C6A2+C6A2          ;
                                                                ;;                        ;
DATA_00C6A5:          db $02,$48,$00,$60,$02,$28,$01,$83        ;;C646|C6A6+C6A6          ;
                      db $00,$28,$24,$01,$02,$01,$00,$FF        ;;C64E|C6AE+C6AE          ;
                      db $00,$40,$20,$01,$00,$40,$02,$60        ;;C656|C6B6+C6B6          ;
                      db $00,$30,$FF,$01                        ;;C65E|C6BE+C6BE          ;
                                                                ;;                        ;
DATA_00C6C1:          db $02,$48,$00,$60,$01,$4E,$00,$40        ;;C662|C6C2+C6C2          ;
                      db $26,$01,$00,$1E,$20,$01,$00,$20        ;;C66A|C6CA+C6CA          ;
                      db $08,$10,$20,$01,$2D,$18,$00,$A0        ;;C672|C6D2+C6D2          ;
                      db $20,$01,$2E,$01,$FF,$01                ;;C67A|C6DA+C6DA          ;
                   else                               ;<  ELSE  ;;------------------------; E0 & E1
DATA_00C5E8:          db $26,$11,$02,$3E,$00,$60,$01,$09        ;;              /C5D5\C5D5;
                      db $80,$08,$00,$20,$04,$60,$00,$01        ;;              /C5DD\C5DD;
                      db $FF,$01                                ;;              /C5E5\C5E5;
                                                                ;;                        ;
DATA_00C5F9:          db $02,$3E,$00,$60,$41,$25,$C1,$04        ;;              /C5E7\C5E7;
                      db $27,$04,$2F,$08,$25,$01,$2F,$04        ;;              /C5EF\C5EF;
                      db $27,$04,$00,$08,$41,$16,$C1,$04        ;;              /C5F7\C5F7;
                      db $27,$04,$2F,$08,$25,$01,$2F,$04        ;;              /C5FF\C5FF;
                      db $27,$04,$00,$04,$01,$04,$20,$01        ;;              /C607\C607;
                      db $01,$04,$00,$08,$41,$14,$81,$1A        ;;              /C60F\C60F;
                      db $00,$40,$82,$10,$02,$20,$00,$30        ;;              /C617\C617;
                      db $01,$01,$00,$50,$22,$01,$FF,$01        ;;              /C61F\C61F;
                                                                ;;                        ;
DATA_00C639:          db $02,$3E,$00,$60,$01,$09,$80,$08        ;;              /C627\C627;
                      db $00,$20,$04,$60,$00,$20,$10,$20        ;;              /C62F\C62F;
                      db $01,$44,$00,$2C,$31,$01,$3A,$10        ;;              /C637\C637;
                      db $31,$01,$3A,$10,$31,$01,$3A,$20        ;;              /C63F\C63F;
                      db $28,$A0,$28,$40,$29,$04,$28,$04        ;;              /C647\C647;
                      db $29,$04,$28,$04,$29,$04,$28,$40        ;;              /C64F\C64F;
                      db $22,$01,$FF,$01                        ;;              /C657\C657;
                                                                ;;                        ;
DATA_00C66D:          db $02,$3E,$00,$60,$01,$09,$80,$08        ;;              /C65B\C65B;
                      db $00,$20,$04,$60,$10,$20,$31,$01        ;;              /C663\C663;
                      db $18,$60,$31,$01,$3B,$80,$31,$01        ;;              /C66B\C66B;
                      db $3C,$40,$FF,$01                        ;;              /C673\C673;
                                                                ;;                        ;
DATA_00C689:          db $02,$3E,$00,$60,$02,$30,$01,$6E        ;;              /C677\C677;
                      db $00,$20,$23,$01,$01,$16,$02,$20        ;;              /C67F\C67F;
                      db $20,$01,$01,$20,$02,$20,$01,$02        ;;              /C687\C687;
                      db $00,$80,$FF,$01                        ;;              /C68F\C68F;
                                                                ;;                        ;
DATA_00C6A5:          db $02,$3E,$00,$60,$02,$27,$01,$69        ;;              /C693\C693;
                      db $00,$28,$24,$01,$02,$01,$00,$FF        ;;              /C69B\C69B;
                      db $00,$40,$20,$01,$00,$30,$02,$40        ;;              /C6A3\C6A3;
                      db $00,$30,$FF,$01                        ;;              /C6AB\C6AB;
                                                                ;;                        ;
DATA_00C6C1:          db $02,$3E,$00,$4C,$01,$43,$00,$40        ;;              /C6AF\C6AF;
                      db $26,$01,$00,$1E,$20,$01,$00,$20        ;;              /C6B7\C6B7;
                      db $08,$10,$20,$01,$2D,$18,$00,$A0        ;;              /C6BF\C6BF;
                      db $20,$01,$2E,$01,$FF,$01                ;;              /C6C7\C6C7;
                   endif                              ;/ ENDIF  ;;++++++++++++++++++++++++;
                                                                ;;                        ;
DATA_00C6E0:          db DATA_00C5E8-DATA_00C5E8                ;;C680|C6E0+C6E0/C6CD\C6CD;
                      db DATA_00C5F9-DATA_00C5E8-2              ;;C681|C6E1+C6E1/C6CE\C6CE;
                      db DATA_00C689-DATA_00C5E8-2              ;;C682|C6E2+C6E2/C6CF\C6CF;
                      db DATA_00C66D-DATA_00C5E8-2              ;;C683|C6E3+C6E3/C6D0\C6D0;
                      db DATA_00C639-DATA_00C5E8-2              ;;C684|C6E4+C6E4/C6D1\C6D1;
                      db DATA_00C6A5-DATA_00C5E8-2              ;;C685|C6E5+C6E5/C6D2\C6D2;
                      db DATA_00C6C1-DATA_00C5E8-2              ;;C686|C6E6+C6E6/C6D3\C6D3;
                                                                ;;                        ;
UnknownAniC:          JSR NoButtons                             ;;C687|C6E7+C6E7/C6D4\C6D4;
                      STZ.W !PlayerOverworldPose                ;;C68A|C6EA+C6EA/C6D7\C6D7;
                      JSR CODE_00DC2D                           ;;C68D|C6ED+C6ED/C6DA\C6DA;
                      LDA.B !PlayerYSpeed                       ;;C690|C6F0+C6F0/C6DD\C6DD; \ Branch if Mario has upward speed 
                      BMI CODE_00C73F                           ;;C692|C6F2+C6F2/C6DF\C6DF; / 
                      LDA.B !PlayerYPosNext                     ;;C694|C6F4+C6F4/C6E1\C6E1;
                      CMP.B #$58                                ;;C696|C6F6+C6F6/C6E3\C6E3;
                      BCS CODE_00C739                           ;;C698|C6F8+C6F8/C6E5\C6E5;
                      LDY.B !PlayerXPosNext                     ;;C69A|C6FA+C6FA/C6E7\C6E7;
                      CPY.B #$40                                ;;C69C|C6FC+C6FC/C6E9\C6E9;
                      BCC CODE_00C73F                           ;;C69E|C6FE+C6FE/C6EB\C6EB;
                      CPY.B #$60                                ;;C6A0|C700+C700/C6ED\C6ED;
                      BCC CODE_00C71C                           ;;C6A2|C702+C702/C6EF\C6EF;
                      LDY.B !Layer1YPos                         ;;C6A4|C704+C704/C6F1\C6F1;
                      BEQ CODE_00C73F                           ;;C6A6|C706+C706/C6F3\C6F3;
                      CLC                                       ;;C6A8|C708+C708/C6F5\C6F5;
                      ADC.B !Layer1YPos                         ;;C6A9|C709+C709/C6F6\C6F6;
                      CMP.B #$1C                                ;;C6AB|C70B+C70B/C6F8\C6F8;
                      BMI CODE_00C73F                           ;;C6AD|C70D+C70D/C6FA\C6FA;
                      SEC                                       ;;C6AF|C70F+C70F/C6FC\C6FC;
                      SBC.B !Layer1YPos                         ;;C6B0|C710+C710/C6FD\C6FD;
                      LDX.B #$D0                                ;;C6B2|C712+C712/C6FF\C6FF;
                      LDY.B !PlayerDirection                    ;;C6B4|C714+C714/C701\C701;
                      BEQ CODE_00C730                           ;;C6B6|C716+C716/C703\C703;
                      LDY.B #$00                                ;;C6B8|C718+C718/C705\C705;
                      BRA CODE_00C72E                           ;;C6BA|C71A+C71A/C707\C707;
                                                                ;;                        ;
CODE_00C71C:          CMP.B #$4C                                ;;C6BC|C71C+C71C/C709\C709;
                      BCC CODE_00C73F                           ;;C6BE|C71E+C71E/C70B\C70B;
                      LDA.B #!SFX_CUTSCENEFUSE                  ;;C6C0|C720+C720/C70D\C70D; \ Play sound effect 
                      STA.W !SPCIO3                             ;;C6C2|C722+C722/C70F\C70F; / 
                      INC.W !Layer1ScrollCmd                    ;;C6C5|C725+C725/C712\C712;
                      LDA.B #$4C                                ;;C6C8|C728+C728/C715\C715;
                      LDY.B #$F4                                ;;C6CA|C72A+C72A/C717\C717;
                      LDX.B #$C0                                ;;C6CC|C72C+C72C/C719\C719;
CODE_00C72E:          STY.B !PlayerXSpeed                       ;;C6CE|C72E+C72E/C71B\C71B;
CODE_00C730:          STX.B !PlayerYSpeed                       ;;C6D0|C730+C730/C71D\C71D;
                      LDX.B #!SFX_BONK                          ;;C6D2|C732+C732/C71F\C71F; \ Play sound effect 
                      STX.W !SPCIO0                             ;;C6D4|C734+C734/C721\C721; / 
                      BRA +                                     ;;C6D7|C737+C737/C724\C724;
                                                                ;;                        ;
CODE_00C739:          STZ.B !PlayerInAir                        ;;C6D9|C739+C739/C726\C726;
                      LDA.B #$58                                ;;C6DB|C73B+C73B/C728\C728;
                    + STA.B !PlayerYPosNext                     ;;C6DD|C73D+C73D/C72A\C72A;
CODE_00C73F:          LDX.W !CutsceneID                         ;;C6DF|C73F+C73F/C72C\C72C;
                      LDA.B !GraphicsUncompPtr+2                ;;C6E2|C742+C742/C72F\C72F;
                      CLC                                       ;;C6E4|C744+C744/C731\C731;
                      ADC.W DATA_00C6E0-1,X                     ;;C6E5|C745+C745/C732\C732;
                      TAX                                       ;;C6E8|C748+C748/C735\C735;
                      LDA.B !PipeTimer                          ;;C6E9|C749+C749/C736\C736;
                      BNE +                                     ;;C6EB|C74B+C74B/C738\C738;
                      INC.B !GraphicsUncompPtr+2                ;;C6ED|C74D+C74D/C73A\C73A;
                      INC.B !GraphicsUncompPtr+2                ;;C6EF|C74F+C74F/C73C\C73C;
                      INX                                       ;;C6F1|C751+C751/C73E\C73E;
                      INX                                       ;;C6F2|C752+C752/C73F\C73F;
                      LDA.W DATA_00C5E8+1,X                     ;;C6F3|C753+C753/C740\C740;
                      STA.B !PipeTimer                          ;;C6F6|C756+C756/C743\C743;
                      LDA.W DATA_00C5E8,X                       ;;C6F8|C758+C758/C745\C745;
                      CMP.B #$2D                                ;;C6FB|C75B+C75B/C748\C748;
                      BNE +                                     ;;C6FD|C75D+C75D/C74A\C74A;
                      LDA.B #!SFX_PBALLOON                      ;;C6FF|C75F+C75F/C74C\C74C; \ Play sound effect 
                      STA.W !SPCIO0                             ;;C701|C761+C761/C74E\C74E; / 
                    + LDA.W DATA_00C5E8,X                       ;;C704|C764+C764/C751\C751;
                      CMP.B #$FF                                ;;C707|C767+C767/C754\C754;
                      BNE +                                     ;;C709|C769+C769/C756\C756;
                      JMP Return00C7F8                          ;;C70B|C76B+C76B/C758\C758;
                                                                ;;                        ;
                    + PHA                                       ;;C70E|C76E+C76E/C75B\C75B;
                      AND.B #$10                                ;;C70F|C76F+C76F/C75C\C75C;
                      BEQ +                                     ;;C711|C771+C771/C75E\C75E;
                      JSL CODE_0CD4A4                           ;;C713|C773+C773/C760\C760;
                    + PLA                                       ;;C717|C777+C777/C764\C764;
                      TAY                                       ;;C718|C778+C778/C765\C765;
                      AND.B #$20                                ;;C719|C779+C779/C766\C766;
                      BNE CODE_00C789                           ;;C71B|C77B+C77B/C768\C768;
                      STY.B !byetudlrHold                       ;;C71D|C77D+C77D/C76A\C76A;
                      TYA                                       ;;C71F|C77F+C77F/C76C\C76C;
                      AND.B #$BF                                ;;C720|C780+C780/C76D\C76D;
                      STA.B !byetudlrFrame                      ;;C722|C782+C782/C76F\C76F;
                      JSR CODE_00CD39                           ;;C724|C784+C784/C771\C771;
                      BRA CODE_00C7F6                           ;;C727|C787+C787/C774\C774;
                                                                ;;                        ;
CODE_00C789:          TYA                                       ;;C729|C789+C789/C776\C776;
                      AND.B #$0F                                ;;C72A|C78A+C78A/C777\C777;
                      CMP.B #$07                                ;;C72C|C78C+C78C/C779\C779;
                      BCS CODE_00C7E9                           ;;C72E|C78E+C78E/C77B\C77B;
                      DEC A                                     ;;C730|C790+C790/C77D\C77D;
                      BPL CODE_00C7A2                           ;;C731|C791+C791/C77E\C77E;
                      LDA.W !PickUpItemTimer                    ;;C733|C793+C793/C780\C780;
                      BEQ CODE_00C79D                           ;;C736|C796+C796/C783\C783;
                      LDA.B #!SFX_CAPE                          ;;C738|C798+C798/C785\C785; \ Play sound effect 
                      STA.W !SPCIO0                             ;;C73A|C79A+C79A/C787\C787; / 
CODE_00C79D:          INC.W !Layer1ScrollCmd                    ;;C73D|C79D+C79D/C78A\C78A;
                      BRA CODE_00C7F6                           ;;C740|C7A0+C7A0/C78D\C78D;
                                                                ;;                        ;
CODE_00C7A2:          BNE CODE_00C7A9                           ;;C742|C7A2+C7A2/C78F\C78F;
                      INC.W !Layer2ScrollTimer                  ;;C744|C7A4+C7A4/C791\C791;
                      BRA CODE_00C7F6                           ;;C747|C7A7+C7A7/C794\C794;
                                                                ;;                        ;
CODE_00C7A9:          DEC A                                     ;;C749|C7A9+C7A9/C796\C796;
                      BNE CODE_00C7B6                           ;;C74A|C7AA+C7AA/C797\C797;
                      LDA.B #!SFX_SWIM                          ;;C74C|C7AC+C7AC/C799\C799; \ Play sound effect 
                      STA.W !SPCIO0                             ;;C74E|C7AE+C7AE/C79B\C79B; / 
                      INC.W !Layer1ScrollXSpeed                 ;;C751|C7B1+C7B1/C79E\C79E;
                      BRA CODE_00C7F6                           ;;C754|C7B4+C7B4/C7A1\C7A1;
                                                                ;;                        ;
CODE_00C7B6:          DEC A                                     ;;C756|C7B6+C7B6/C7A3\C7A3;
                      BNE CODE_00C7C0                           ;;C757|C7B7+C7B7/C7A4\C7A4;
                      LDY.B #$88                                ;;C759|C7B9+C7B9/C7A6\C7A6;
                      STY.W !Layer2ScrollTimer                  ;;C75B|C7BB+C7BB/C7A8\C7A8;
                      BRA CODE_00C7F6                           ;;C75E|C7BE+C7BE/C7AB\C7AB;
                                                                ;;                        ;
CODE_00C7C0:          DEC A                                     ;;C760|C7C0+C7C0/C7AD\C7AD;
                      BNE CODE_00C7CE                           ;;C761|C7C1+C7C1/C7AE\C7AE;
                      LDA.B #$38                                ;;C763|C7C3+C7C3/C7B0\C7B0;
                      STA.W !Layer1ScrollXSpeed                 ;;C765|C7C5+C7C5/C7B2\C7B2;
                      LDA.B #$07                                ;;C768|C7C8+C7C8/C7B5\C7B5;
                      TRB.B !PlayerXPosNext                     ;;C76A|C7CA+C7CA/C7B7\C7B7;
                      BRA CODE_00C7F6                           ;;C76C|C7CC+C7CC/C7B9\C7B9;
                                                                ;;                        ;
CODE_00C7CE:          DEC A                                     ;;C76E|C7CE+C7CE/C7BB\C7BB;
                      BNE CODE_00C7DF                           ;;C76F|C7CF+C7CF/C7BC\C7BC;
                      LDA.B #!SFX_KAPOW                         ;;C771|C7D1+C7D1/C7BE\C7BE; \ Play sound effect 
                      STA.W !SPCIO3                             ;;C773|C7D3+C7D3/C7C0\C7C0; / 
                      LDA.B #con($D8,$D8,$D8,$D2,$D2)           ;;C776|C7D6+C7D6/C7C3\C7C3;
                      STA.B !PlayerXSpeed                       ;;C778|C7D8+C7D8/C7C5\C7C5;
                      INC.W !Layer1ScrollCmd                    ;;C77A|C7DA+C7DA/C7C7\C7C7;
                      BRA CODE_00C79D                           ;;C77D|C7DD+C7DD/C7CA\C7CA;
                                                                ;;                        ;
CODE_00C7DF:          LDA.B #$20                                ;;C77F|C7DF+C7DF/C7CC\C7CC;
                      STA.W !PickUpItemTimer                    ;;C781|C7E1+C7E1/C7CE\C7CE;
                      INC.W !IsCarryingItem                     ;;C784|C7E4+C7E4/C7D1\C7D1;
                      BRA CODE_00C7F6                           ;;C787|C7E7+C7E7/C7D4\C7D4;
                                                                ;;                        ;
CODE_00C7E9:          TAY                                       ;;C789|C7E9+C7E9/C7D6\C7D6;
                      LDA.W DATA_00C5E1-7,Y                     ;;C78A|C7EA+C7EA/C7D7\C7D7;
                      STA.W !PlayerPose                         ;;C78D|C7ED+C7ED/C7DA\C7DA;
                      STZ.W !IsCarryingItem                     ;;C790|C7F0+C7F0/C7DD\C7DD;
                      JSR CODE_00D7E4                           ;;C793|C7F3+C7F3/C7E0\C7E0;
CODE_00C7F6:          DEC.B !PipeTimer                          ;;C796|C7F6+C7F6/C7E3\C7E3;
Return00C7F8:         RTS                                       ;;C798|C7F8+C7F8/C7E5\C7E5; Return 
                                                                ;;                        ;
                                                                ;;                        ;
DATA_00C7F9:          db $C0,$FF,$A0,$00                        ;;C799|C7F9+C7F9/C7E6\C7E6;
                                                                ;;                        ;
YoshiWingsAni:        JSR NoButtons                             ;;C79D|C7FD+C7FD/C7EA\C7EA;
                      LDA.B #$0B                                ;;C7A0|C800+C800/C7ED\C7ED;
                      STA.B !PlayerInAir                        ;;C7A2|C802+C802/C7EF\C7EF;
                      JSR CODE_00D7E4                           ;;C7A4|C804+C804/C7F1\C7F1;
                      LDA.B !PlayerYSpeed                       ;;C7A7|C807+C807/C7F4\C7F4; \ Branch if Mario has downward speed 
                      BPL CODE_00C80F                           ;;C7A9|C809+C809/C7F6\C7F6; / 
                      CMP.B #$90                                ;;C7AB|C80B+C80B/C7F8\C7F8; \ Branch if Y speed < #$90 
                      BCC +                                     ;;C7AD|C80D+C80D/C7FA\C7FA; / 
CODE_00C80F:          SEC                                       ;;C7AF|C80F+C80F/C7FC\C7FC; \ Y Speed -= #$0D 
                      SBC.B #con($0D,$0D,$0D,$0F,$0F)           ;;C7B0|C810+C810/C7FD\C7FD;  | 
                      STA.B !PlayerYSpeed                       ;;C7B2|C812+C812/C7FF\C7FF; / 
                    + LDA.B #$02                                ;;C7B4|C814+C814/C801\C801;
                      LDY.B !PlayerXSpeed                       ;;C7B6|C816+C816/C803\C803;
                      BEQ CODE_00C827                           ;;C7B8|C818+C818/C805\C805;
                      BMI +                                     ;;C7BA|C81A+C81A/C807\C807;
                      LDA.B #$FE                                ;;C7BC|C81C+C81C/C809\C809;
                    + CLC                                       ;;C7BE|C81E+C81E/C80B\C80B;
                      ADC.B !PlayerXSpeed                       ;;C7BF|C81F+C81F/C80C\C80C;
                      STA.B !PlayerXSpeed                       ;;C7C1|C821+C821/C80E\C80E;
                      BVC CODE_00C827                           ;;C7C3|C823+C823/C810\C810;
                      STZ.B !PlayerXSpeed                       ;;C7C5|C825+C825/C812\C812;
CODE_00C827:          JSR CODE_00DC2D                           ;;C7C7|C827+C827/C814\C814;
                      REP #$20                                  ;;C7CA|C82A+C82A/C817\C817; Accum (16 bit) 
                      LDY.W !YoshiHeavenFlag                    ;;C7CC|C82C+C82C/C819\C819;
                      LDA.B !PlayerYPosScrRel                   ;;C7CF|C82F+C82F/C81C\C81C;
                      CMP.W DATA_00C7F9,Y                       ;;C7D1|C831+C831/C81E\C81E;
                      SEP #$20                                  ;;C7D4|C834+C834/C821\C821; Accum (8 bit) 
                      BPL +                                     ;;C7D6|C836+C836/C823\C823;
                      STZ.B !PlayerAnimation                    ;;C7D8|C838+C838/C825\C825;
                      TYA                                       ;;C7DA|C83A+C83A/C827\C827;
                      BNE +                                     ;;C7DB|C83B+C83B/C828\C828;
                      INY                                       ;;C7DD|C83D+C83D/C82A\C82A;
                      INY                                       ;;C7DE|C83E+C83E/C82B\C82B;
                      STY.W !YoshiHeavenFlag                    ;;C7DF|C83F+C83F/C82C\C82C;
                      JSR CODE_00D273                           ;;C7E2|C842+C842/C82F\C82F;
                    + JMP CODE_00CD8F                           ;;C7E5|C845+C845/C832\C832;
                                                                ;;                        ;
                   if ver_is_ntsc(!_VER)              ;\   IF   ;;++++++++++++++++++++++++; J, U, & SS
DATA_00C848:          db $01,$5F,$00,$30,$08,$30,$00,$20        ;;C7E8|C848+C848          ;
                      db $40,$01,$00,$30,$01,$80,$FF,$01        ;;C7F0|C850+C850          ;
                      db $3F,$00,$30,$20,$01,$80,$06,$00        ;;C7F8|C858+C858          ;
                      db $3A,$01,$38,$00,$30,$08,$30,$00        ;;C800|C860+C860          ;
                      db $20,$40,$01,$00,$30,$01,$80,$FF        ;;C808|C868+C868          ;
                   else                               ;<  ELSE  ;;------------------------; E0 & E1
DATA_00C848:          db $01,$4C,$00,$30,$08,$30,$00,$20        ;;              /C835\C835;
                      db $40,$01,$00,$30,$01,$80,$FF,$01        ;;              /C83D\C83D;
                      db $2C,$00,$30,$20,$01,$80,$06,$00        ;;              /C845\C845;
                      db $3A,$01,$30,$00,$30,$08,$30,$00        ;;              /C84D\C84D;
                      db $20,$40,$01,$00,$30,$01,$80,$FF        ;;              /C855\C855;
                   endif                              ;/ ENDIF  ;;++++++++++++++++++++++++;
                                                                ;;                        ;
EnterCastleAni:       STZ.W !SpinjumpFireball                   ;;C810|C870+C870/C85D\C85D;
                      LDX.W !ObjectTileset                      ;;C813|C873+C873/C860\C860;
                      BIT.W DATA_00A625,X                       ;;C816|C876+C876/C863\C863;
                      BMI CODE_00C889                           ;;C819|C879+C879/C866\C866;
                      BVS ADDR_00C883                           ;;C81B|C87B+C87B/C868\C868;
                      JSL CODE_02F57C                           ;;C81D|C87D+C87D/C86A\C86A;
                      BRA +                                     ;;C821|C881+C881/C86E\C86E;
                                                                ;;                        ;
ADDR_00C883:          JSL ADDR_02F58C                           ;;C823|C883+C883/C870\C870;
                      BRA +                                     ;;C827|C887+C887/C874\C874;
                                                                ;;                        ;
CODE_00C889:          JSL CODE_02F584                           ;;C829|C889+C889/C876\C876;
                    + LDX.B !PipeTimer                          ;;C82D|C88D+C88D/C87A\C87A;
                      LDA.B !byetudlrFrame                      ;;C82F|C88F+C88F/C87C\C87C;
                      ORA.B !axlr0000Frame                      ;;C831|C891+C891/C87E\C87E;
                      JSR NoButtons                             ;;C833|C893+C893/C880\C880;
                      BMI CODE_00C8FB                           ;;C836|C896+C896/C883\C883;
                      STZ.W !PlayerOverworldPose                ;;C838|C898+C898/C885\C885;
                      DEC.B !PlayerPipeAction                   ;;C83B|C89B+C89B/C888\C888;
                      BNE +                                     ;;C83D|C89D+C89D/C88A\C88A;
                      INX                                       ;;C83F|C89F+C89F/C88C\C88C;
                      INX                                       ;;C840|C8A0+C8A0/C88D\C88D;
                      STX.B !PipeTimer                          ;;C841|C8A1+C8A1/C88E\C88E;
                      LDA.W DATA_00C848-1,X                     ;;C843|C8A3+C8A3/C890\C890;
                      STA.B !PlayerPipeAction                   ;;C846|C8A6+C8A6/C893\C893;
                    + LDA.W DATA_00C848-2,X                     ;;C848|C8A8+C8A8/C895\C895;
                      CMP.B #$FF                                ;;C84B|C8AB+C8AB/C898\C898;
                      BEQ CODE_00C8FB                           ;;C84D|C8AD+C8AD/C89A\C89A;
                      AND.B #$DF                                ;;C84F|C8AF+C8AF/C89C\C89C;
                      STA.B !byetudlrHold                       ;;C851|C8B1+C8B1/C89E\C89E;
                      CMP.W DATA_00C848-2,X                     ;;C853|C8B3+C8B3/C8A0\C8A0;
                      BEQ +                                     ;;C856|C8B6+C8B6/C8A3\C8A3;
                      LDY.B #$80                                ;;C858|C8B8+C8B8/C8A5\C8A5;
                      STY.B !axlr0000Frame                      ;;C85A|C8BA+C8BA/C8A7\C8A7;
                    + ASL A                                     ;;C85C|C8BC+C8BC/C8A9\C8A9;
                      BPL CODE_00C8D1                           ;;C85D|C8BD+C8BD/C8AA\C8AA;
                      JSR NoButtons                             ;;C85F|C8BF+C8BF/C8AC\C8AC;
                      LDY.B #$B0                                ;;C862|C8C2+C8C2/C8AF\C8AF;
                      LDX.W !ObjectTileset                      ;;C864|C8C4+C8C4/C8B1\C8B1;
                      BIT.W DATA_00A625,X                       ;;C867|C8C7+C8C7/C8B4\C8B4;
                      BMI +                                     ;;C86A|C8CA+C8CA/C8B7\C8B7;
                      LDY.B #$7F                                ;;C86C|C8CC+C8CC/C8B9\C8B9;
                    + STY.W !NoYoshiIntroTimer                  ;;C86E|C8CE+C8CE/C8BB\C8BB;
CODE_00C8D1:          JSR CODE_00DC2D                           ;;C871|C8D1+C8D1/C8BE\C8BE;
                      LDA.B #$24                                ;;C874|C8D4+C8D4/C8C1\C8C1;
                      STA.B !PlayerInAir                        ;;C876|C8D6+C8D6/C8C3\C8C3;
                      LDA.B #$6F                                ;;C878|C8D8+C8D8/C8C5\C8C5;
                      LDY.W !PlayerRidingYoshi                  ;;C87A|C8DA+C8DA/C8C7\C8C7;
                      BEQ +                                     ;;C87D|C8DD+C8DD/C8CA\C8CA;
                      LDA.B #$5F                                ;;C87F|C8DF+C8DF/C8CC\C8CC;
                    + LDX.W !ObjectTileset                      ;;C881|C8E1+C8E1/C8CE\C8CE;
                      BIT.W DATA_00A625,X                       ;;C884|C8E4+C8E4/C8D1\C8D1;
                      BVC +                                     ;;C887|C8E7+C8E7/C8D4\C8D4;
                      SEC                                       ;;C889|C8E9+C8E9/C8D6\C8D6;
                      SBC.B #$10                                ;;C88A|C8EA+C8EA/C8D7\C8D7;
                    + CMP.B !PlayerYPosNext                     ;;C88C|C8EC+C8EC/C8D9\C8D9;
                      BCS +                                     ;;C88E|C8EE+C8EE/C8DB\C8DB;
                      INC A                                     ;;C890|C8F0+C8F0/C8DD\C8DD;
                      STA.B !PlayerYPosNext                     ;;C891|C8F1+C8F1/C8DE\C8DE;
                      STZ.B !PlayerInAir                        ;;C893|C8F3+C8F3/C8E0\C8E0;
                      STZ.W !SpinJumpFlag                       ;;C895|C8F5+C8F5/C8E2\C8E2;
                    + JMP CODE_00CD82                           ;;C898|C8F8+C8F8/C8E5\C8E5;
                                                                ;;                        ;
CODE_00C8FB:          INC.W !ShowMarioStart                     ;;C89B|C8FB+C8FB/C8E8\C8E8;
                      LDA.B #$0F                                ;;C89E|C8FE+C8FE/C8EB\C8EB;
                      STA.W !GameMode                           ;;C8A0|C900+C900/C8ED\C8ED;
                      CPX.B #$11                                ;;C8A3|C903+C903/C8F0\C8F0;
                      BCC CODE_00C90A                           ;;C8A5|C905+C905/C8F2\C8F2;
                      INC.W !CarryYoshiThruLvls                 ;;C8A7|C907+C907/C8F4\C8F4;
CODE_00C90A:          LDA.B #$01                                ;;C8AA|C90A+C90A/C8F7\C8F7;
                      STA.W !RemoveYoshiFlag                    ;;C8AC|C90C+C90C/C8F9\C8F9;
                      LDA.B #!SFX_YOSHIDRUMOFF                  ;;C8AF|C90F+C90F/C8FC\C8FC; \ Play sound effect 
                      STA.W !SPCIO1                             ;;C8B1|C911+C911/C8FE\C8FE; / 
                      RTS                                       ;;C8B4|C914+C914/C901\C901; Return 
                                                                ;;                        ;
EndLevelRoutine:      JSR NoButtons                             ;;C8B5|C915+C915/C902\C902;
                      STZ.W !PlayerInCloud                      ;;C8B8|C918+C918/C905\C905;
                      STZ.W !PlayerOverworldPose                ;;C8BB|C91B+C91B/C908\C908;
                      STZ.W !PlayerSlopePose                    ;;C8BE|C91E+C91E/C90B\C90B;
                      LDA.B !ScreenMode                         ;;C8C1|C921+C921/C90E\C90E;
                      LSR A                                     ;;C8C3|C923+C923/C910\C910;
                      BCS CODE_00C944                           ;;C8C4|C924+C924/C911\C911;
                      LDA.W !CutsceneID                         ;;C8C6|C926+C926/C913\C913;
                      ORA.W !SwitchPalaceColor                  ;;C8C9|C929+C929/C916\C916;
                      BEQ GoalRoutine                           ;;C8CC|C92C+C92C/C919\C919;
                      LDA.B !PlayerInAir                        ;;C8CE|C92E+C92E/C91B\C91B;
                      BEQ +                                     ;;C8D0|C930+C930/C91D\C91D;
                      JSR CODE_00CCE0                           ;;C8D2|C932+C932/C91F\C91F;
                    + LDA.W !SwitchPalaceColor                  ;;C8D5|C935+C935/C922\C922;
                      BNE CODE_00C948                           ;;C8D8|C938+C938/C925\C925;
                      JSR CODE_00B03E                           ;;C8DA|C93A+C93A/C927\C927;
                      LDA.W !ColorFadeTimer                     ;;C8DD|C93D+C93D/C92A\C92A;
                      CMP.B #$40                                ;;C8E0|C940+C940/C92D\C92D;
                      BCC Return00C96A                          ;;C8E2|C942+C942/C92F\C92F;
CODE_00C944:          JSL CODE_05CBFF                           ;;C8E4|C944+C944/C931\C931;
CODE_00C948:          LDY.B #$01                                ;;C8E8|C948+C948/C935\C935;
                      STY.B !SpriteLock                         ;;C8EA|C94A+C94A/C937\C937;
                      LDA.B !TrueFrame                          ;;C8EC|C94C+C94C/C939\C939;
                      LSR A                                     ;;C8EE|C94E+C94E/C93B\C93B;
                      BCC Return00C96A                          ;;C8EF|C94F+C94F/C93C\C93C;
                      DEC.W !EndLevelTimer                      ;;C8F1|C951+C951/C93E\C93E;
                   if ver_is_ntsc(!_VER)              ;\   IF   ;;++++++++++++++++++++++++; J, U, & SS
                      BNE Return00C96A                          ;;C8F4|C954+C954          ;
                   else                               ;<  ELSE  ;;------------------------; E0 & E1
                      LDA.W !EndLevelTimer                      ;;              /C941\C941;
                      CMP.B #$50                                ;;              /C944\C944;
                      BCS Return00C96A                          ;;              /C946\C946;
                   endif                              ;/ ENDIF  ;;++++++++++++++++++++++++;
                      LDA.W !SwitchPalaceColor                  ;;C8F6|C956+C956/C948\C948;
                      BNE +                                     ;;C8F9|C959+C959/C94B\C94B;
CODE_00C95B:          LDY.B #$0B                                ;;C8FB|C95B+C95B/C94D\C94D;
                      LDA.B #$01                                ;;C8FD|C95D+C95D/C94F\C94F;
                      JMP CODE_00C9FE                           ;;C8FF|C95F+C95F/C951\C951;
                                                                ;;                        ;
                    + LDA.B #con($70,$A0,$A0,$6A,$6A)           ;;C902|C962+C962/C954\C954;
                      STA.W !VariousPromptTimer                 ;;C904|C964+C964/C956\C956;
                      INC.W !MessageBoxTrigger                  ;;C907|C967+C967/C959\C959;
Return00C96A:         RTS                                       ;;C90A|C96A+C96A/C95C\C95C; Return 
                                                                ;;                        ;
GoalRoutine:          JSR GoalBackgroundFade                    ;;C90B|C96B+C96B/C95D\C95D;
                      LDA.W !ShowPeaceSign                      ;;C90E|C96E+C96E/C960\C960;
                      BNE SetPeaceSpotlightSFX                  ;;C911|C971+C971/C963\C963;
                      LDA.W !EndLevelTimer                      ;;C913|C973+C973/C965\C965;
                      CMP.B #con($28,$28,$28,$50,$50)           ;;C916|C976+C976/C968\C968;
                      BCC +                                     ;;C918|C978+C978/C96A\C96A;
                      LDA.B #$01                                ;;C91A|C97A+C97A/C96C\C96C;
                      STA.B !PlayerDirection                    ;;C91C|C97C+C97C/C96E\C96E;
                      STA.B !byetudlrHold                       ;;C91E|C97E+C97E/C970\C970;
                      LDA.B #$05                                ;;C920|C980+C980/C972\C972;
                      STA.B !PlayerXSpeed                       ;;C922|C982+C982/C974\C974;
                    + LDA.B !PlayerInAir                        ;;C924|C984+C984/C976\C976;
                      BEQ +                                     ;;C926|C986+C986/C978\C978;
                      JSR CODE_00D76B                           ;;C928|C988+C988/C97A\C97A;
                    + LDA.B !PlayerXSpeed                       ;;C92B|C98B+C98B/C97D\C97D;
                      BNE +                                     ;;C92D|C98D+C98D/C97F\C97F;
                      STZ.W !HorizLayer1Setting                 ;;C92F|C98F+C98F/C981\C981;
                      JSR SetSpotlightSizeToF0                  ;;C932|C992+C992/C984\C984;
                      INC.W !ShowPeaceSign                      ;;C935|C995+C995/C987\C987;
                      LDA.B #con($40,$40,$40,$6E,$6E)           ;;C938|C998+C998/C98A\C98A;
                      STA.W !PlayerPeaceSignTimer               ;;C93A|C99A+C99A/C98C\C98C;
                   if ver_is_ntsc(!_VER)              ;\   IF   ;;++++++++++++++++++++++++; J, U, & SS
                      ASL A                                     ;;C93D|C99D+C99D          ;
                   else                               ;<  ELSE  ;;------------------------; E0 & E1
                      LDA.B #$80                                ;;              /C98F\C98F;
                   endif                              ;/ ENDIF  ;;++++++++++++++++++++++++;
                      STA.W !ColorFadeDir                       ;;C93E|C99E+C99E/C991\C991;
                      STZ.W !ColorFadeTimer                     ;;C941|C9A1+C9A1/C994\C994;
                    + JMP CODE_00CD24                           ;;C944|C9A4+C9A4/C997\C997;
                                                                ;;                        ;
DATA_00C9A7:          db $25,$07,$40,$0E,$20,$1A,$34,$32        ;;C947|C9A7+C9A7/C99A\C99A;
                                                                ;;                        ;
SetPeaceSpotlightSFX: JSR SetMarioPeaceImg                      ;;C94F|C9AF+C9AF/C9A2\C9A2;
                      LDA.W !PlayerPeaceSignTimer               ;;C952|C9B2+C9B2/C9A5\C9A5;
                      BEQ GoalFinishPostPeace                   ;;C955|C9B5+C9B5/C9A8\C9A8;
                      DEC.W !PlayerPeaceSignTimer               ;;C957|C9B7+C9B7/C9AA\C9AA;
                      BNE +                                     ;;C95A|C9BA+C9BA/C9AD\C9AD;
                      LDA.B #!BGM_SPOTLIGHT                     ;;C95C|C9BC+C9BC/C9AF\C9AF;
                      STA.W !SPCIO2                             ;;C95E|C9BE+C9BE/C9B1\C9B1; / Change music 
                    + RTS                                       ;;C961|C9C1+C9C1/C9B4\C9B4; Return 
                                                                ;;                        ;
GoalFinishPostPeace:  JSR GoalCheckSpotlight                    ;;C962|C9C2+C9C2/C9B5\C9B5;
                      LDA.B #$01                                ;;C965|C9C5+C9C5/C9B8\C9B8;
                      STA.B !byetudlrHold                       ;;C967|C9C7+C9C7/C9BA\C9BA;
                      JSR CODE_00CD24                           ;;C969|C9C9+C9C9/C9BC\C9BC;
                      LDA.W !SpotlightSize                      ;;C96C|C9CC+C9CC/C9BF\C9BF;
                      BNE Return00CA30                          ;;C96F|C9CF+C9CF/C9C2\C9C2;
                      LDA.W !SecretGoalTape                     ;;C971|C9D1+C9D1/C9C4\C9C4; \ Branch if Goal Tape extra bits == #$02 
                      INC A                                     ;;C974|C9D4+C9D4/C9C7\C9C7;  | (never happens) 
                      CMP.B #$03                                ;;C975|C9D5+C9D5/C9C8\C9C8;  | 
                      BNE +                                     ;;C977|C9D7+C9D7/C9CA\C9CA; / 
                      LDA.B #$01                                ;;C979|C9D9+C9D9/C9CC\C9CC; \ Unreachable 
                      STA.W !OWPlayerSubmap                     ;;C97B|C9DB+C9DB/C9CE\C9CE;  | Set submap to be Yoshi's Island 
                      LSR A                                     ;;C97E|C9DE+C9DE/C9D1\C9D1; / 
                    + LDY.B #$0C                                ;;C97F|C9DF+C9DF/C9D2\C9D2;
                      LDX.W !BonusGameActivate                  ;;C981|C9E1+C9E1/C9D4\C9D4;
                      BEQ +                                     ;;C984|C9E4+C9E4/C9D7\C9D7;
                      LDX.B #$FF                                ;;C986|C9E6+C9E6/C9D9\C9D9;
                      STX.W !BonusGameActivate                  ;;C988|C9E8+C9E8/C9DB\C9DB;
                      LDX.B #$F0                                ;;C98B|C9EB+C9EB/C9DE\C9DE;
                      STX.W !MosaicSize                         ;;C98D|C9ED+C9ED/C9E0\C9E0;
                      STZ.W !EndLevelTimer                      ;;C990|C9F0+C9F0/C9E3\C9E3;
                      STZ.W !MusicBackup                        ;;C993|C9F3+C9F3/C9E6\C9E6;
                      LDY.B #$10                                ;;C996|C9F6+C9F6/C9E9\C9E9;
                    + STZ.W !Brightness                         ;;C998|C9F8+C9F8/C9EB\C9EB;
                      STZ.W !MosaicDirection                    ;;C99B|C9FB+C9FB/C9EE\C9EE;
CODE_00C9FE:          STA.W !OWLevelExitMode                    ;;C99E|C9FE+C9FE/C9F1\C9F1; Store secret/normal exit info 
                      LDA.W !CutsceneID                         ;;C9A1|CA01+CA01/C9F4\C9F4;
                      BEQ CODE_00CA25                           ;;C9A4|CA04+CA04/C9F7\C9F7;
                      LDX.B #$08                                ;;C9A6|CA06+CA06/C9F9\C9F9;
                      LDA.W !TranslevelNo                       ;;C9A8|CA08+CA08/C9FB\C9FB;
                      CMP.B #$13                                ;;C9AB|CA0B+CA0B/C9FE\C9FE;
                      BNE +                                     ;;C9AD|CA0D+CA0D/CA00\CA00;
                      INC.W !OWLevelExitMode                    ;;C9AF|CA0F+CA0F/CA02\CA02;
                    + CMP.B #$31                                ;;C9B2|CA12+CA12/CA05\CA05;
                      BEQ CODE_00CA20                           ;;C9B4|CA14+CA14/CA07\CA07;
CODE_00CA16:          CMP.W DATA_00C9A7-1,X                     ;;C9B6|CA16+CA16/CA09\CA09;
                      BEQ CODE_00CA20                           ;;C9B9|CA19+CA19/CA0C\CA0C;
                      DEX                                       ;;C9BB|CA1B+CA1B/CA0E\CA0E;
                      BNE CODE_00CA16                           ;;C9BC|CA1C+CA1C/CA0F\CA0F;
                      BRA CODE_00CA25                           ;;C9BE|CA1E+CA1E/CA11\CA11;
                                                                ;;                        ;
CODE_00CA20:          STX.W !CutsceneID                         ;;C9C0|CA20+CA20/CA13\CA13;
                      LDY.B #$18                                ;;C9C3|CA23+CA23/CA16\CA16;
CODE_00CA25:          STY.W !GameMode                           ;;C9C5|CA25+CA25/CA18\CA18;
                      INC.W !CreditsScreenNumber                ;;C9C8|CA28+CA28/CA1B\CA1B;
CODE_00CA2B:          LDA.B #$01                                ;;C9CB|CA2B+CA2B/CA1E\CA1E;
                      STA.W !MidwayFlag                         ;;C9CD|CA2D+CA2D/CA20\CA20;
Return00CA30:         RTS                                       ;;C9D0|CA30+CA30/CA23\CA23; Return 
                                                                ;;                        ;
SetMarioPeaceImg:     LDA.B #$26                                ;;C9D1|CA31+CA31/CA24\CA24; \ Mario's image = Peace Sign, or 
                      LDY.W !PlayerRidingYoshi                  ;;C9D3|CA33+CA33/CA26\CA26;  | 
                      BEQ +                                     ;;C9D6|CA36+CA36/CA29\CA29;  | 
                      LDA.B #$14                                ;;C9D8|CA38+CA38/CA2B\CA2B;  | Mario's image = Peace Sign on Yoshi 
                    + STA.W !PlayerPose                         ;;C9DA|CA3A+CA3A/CA2D\CA2D; / 
                      RTS                                       ;;C9DD|CA3D+CA3D/CA30\CA30; Return 
                                                                ;;                        ;
SetSpotlightSizeToF0: LDA.B #$F0                                ;;C9DE|CA3E+CA3E/CA31\CA31;
                      STA.W !SpotlightSize                      ;;C9E0|CA40+CA40/CA33\CA33;
                      RTS                                       ;;C9E3|CA43+CA43/CA36\CA36; Return 
                                                                ;;                        ;
GoalCheckSpotlight:   LDA.W !SpotlightSize                      ;;C9E4|CA44+CA44/CA37\CA37;
                      BNE +                                     ;;C9E7|CA47+CA47/CA3A\CA3A;
                      RTS                                       ;;C9E9|CA49+CA49/CA3C\CA3C; Return 
                                                                ;;                        ;
                    + JSR CODE_00CA61                           ;;C9EA|CA4A+CA4A/CA3D\CA3D;
                      LDA.B #$FC                                ;;C9ED|CA4D+CA4D/CA40\CA40;
                      JSR CODE_00CA6D                           ;;C9EF|CA4F+CA4F/CA42\CA42;
                      LDA.B #$33                                ;;C9F2|CA52+CA52/CA45\CA45;
                      STA.B !Layer12Window                      ;;C9F4|CA54+CA54/CA47\CA47;
                      STA.B !OBJCWWindow                        ;;C9F6|CA56+CA56/CA49\CA49;
                      LDA.B #$03                                ;;C9F8|CA58+CA58/CA4B\CA4B;
                      STA.B !Layer34Window                      ;;C9FA|CA5A+CA5A/CA4D\CA4D;
                      LDA.B #$22                                ;;C9FC|CA5C+CA5C/CA4F\CA4F;
                      STA.B !ColorAddition                      ;;C9FE|CA5E+CA5E/CA51\CA51;
                      RTS                                       ;;CA00|CA60+CA60/CA53\CA53; Return 
                                                                ;;                        ;
CODE_00CA61:          REP #$20                                  ;;CA01|CA61+CA61/CA54\CA54; 16 bit A ; Accum (16 bit) 
                      LDA.W #DATA_00CB12                        ;;CA03|CA63+CA63/CA56\CA56; \  
                      STA.B !_4                                 ;;CA06|CA66+CA66/CA59\CA59;  |Load xCB12 into $04 and $06 
                      STA.B !_6                                 ;;CA08|CA68+CA68/CA5B\CA5B; /  
                      SEP #$20                                  ;;CA0A|CA6A+CA6A/CA5D\CA5D; 8 bit A ; Accum (8 bit) 
                      RTS                                       ;;CA0C|CA6C+CA6C/CA5F\CA5F; Return 
                                                                ;;                        ;
CODE_00CA6D:          CLC                                       ;;CA0D|CA6D+CA6D/CA60\CA60;
                      ADC.W !SpotlightSize                      ;;CA0E|CA6E+CA6E/CA61\CA61;
                      STA.W !SpotlightSize                      ;;CA11|CA71+CA71/CA64\CA64;
                      LDA.B !PlayerXPosScrRel                   ;;CA14|CA74+CA74/CA67\CA67;
                      CLC                                       ;;CA16|CA76+CA76/CA69\CA69;
                      ADC.B #$08                                ;;CA17|CA77+CA77/CA6A\CA6A;
                      STA.B !_0                                 ;;CA19|CA79+CA79/CA6C\CA6C;
                      LDA.B #$18                                ;;CA1B|CA7B+CA7B/CA6E\CA6E;
                      LDY.B !Powerup                            ;;CA1D|CA7D+CA7D/CA70\CA70;
                      BEQ +                                     ;;CA1F|CA7F+CA7F/CA72\CA72;
                      LDA.B #$10                                ;;CA21|CA81+CA81/CA74\CA74;
                    + CLC                                       ;;CA23|CA83+CA83/CA76\CA76;
                      ADC.B !PlayerYPosScrRel                   ;;CA24|CA84+CA84/CA77\CA77;
                      STA.B !_1                                 ;;CA26|CA86+CA86/CA79\CA79;
CODE_00CA88:          REP #$30                                  ;;CA28|CA88+CA88/CA7B\CA7B; 16 bit A ; Index (16 bit) Accum (16 bit) 
                      AND.W #$00FF                              ;;CA2A|CA8A+CA8A/CA7D\CA7D; Keep lower byte of A 
                      ASL A                                     ;;CA2D|CA8D+CA8D/CA80\CA80; \  
                      DEC A                                     ;;CA2E|CA8E+CA8E/CA81\CA81;  |Set Y to ((2A-1)*2) 
                      ASL A                                     ;;CA2F|CA8F+CA8F/CA82\CA82;  | 
                      TAY                                       ;;CA30|CA90+CA90/CA83\CA83; /  
                      SEP #$20                                  ;;CA31|CA91+CA91/CA84\CA84; 8 bit A ; Accum (8 bit) 
                      LDX.W #$0000                              ;;CA33|CA93+CA93/CA86\CA86;
CODE_00CA96:          LDA.B !_1                                 ;;CA36|CA96+CA96/CA89\CA89;
                      CMP.W !SpotlightSize                      ;;CA38|CA98+CA98/CA8B\CA8B;
                      BCC CODE_00CABD                           ;;CA3B|CA9B+CA9B/CA8E\CA8E;
                      LDA.B #$FF                                ;;CA3D|CA9D+CA9D/CA90\CA90;
                      STA.W !WindowTable,X                      ;;CA3F|CA9F+CA9F/CA92\CA92;
                      STZ.W !WindowTable+1,X                    ;;CA42|CAA2+CAA2/CA95\CA95;
                      CPY.W #con($01C0,$01C0,$01C0,$01C0,$01E0) ;;CA45|CAA5+CAA5/CA98\CA98;
                      BCS +                                     ;;CA48|CAA8+CAA8/CA9B\CA9B;
                      STA.W !WindowTable,Y                      ;;CA4A|CAAA+CAAA/CA9D\CA9D;
                      INC A                                     ;;CA4D|CAAD+CAAD/CAA0\CAA0;
                      STA.W !WindowTable+1,Y                    ;;CA4E|CAAE+CAAE/CAA1\CAA1;
                    + INX                                       ;;CA51|CAB1+CAB1/CAA4\CAA4;
                      INX                                       ;;CA52|CAB2+CAB2/CAA5\CAA5;
                      DEY                                       ;;CA53|CAB3+CAB3/CAA6\CAA6;
                      DEY                                       ;;CA54|CAB4+CAB4/CAA7\CAA7;
                      LDA.B !_1                                 ;;CA55|CAB5+CAB5/CAA8\CAA8;
                      BEQ CODE_00CB0A                           ;;CA57|CAB7+CAB7/CAAA\CAAA;
                      DEC.B !_1                                 ;;CA59|CAB9+CAB9/CAAC\CAAC;
                      BRA CODE_00CA96                           ;;CA5B|CABB+CABB/CAAE\CAAE;
                                                                ;;                        ;
CODE_00CABD:          JSR CODE_00CC14                           ;;CA5D|CABD+CABD/CAB0\CAB0;
                      CLC                                       ;;CA60|CAC0+CAC0/CAB3\CAB3;
                      ADC.B !_0                                 ;;CA61|CAC1+CAC1/CAB4\CAB4;
                      BCC +                                     ;;CA63|CAC3+CAC3/CAB6\CAB6;
                      LDA.B #$FF                                ;;CA65|CAC5+CAC5/CAB8\CAB8;
                    + STA.W !WindowTable+1,X                    ;;CA67|CAC7+CAC7/CABA\CABA;
                      LDA.B !_0                                 ;;CA6A|CACA+CACA/CABD\CABD;
                      SEC                                       ;;CA6C|CACC+CACC/CABF\CABF;
                      SBC.B !_2                                 ;;CA6D|CACD+CACD/CAC0\CAC0;
                      BCS +                                     ;;CA6F|CACF+CACF/CAC2\CAC2;
                      LDA.B #$00                                ;;CA71|CAD1+CAD1/CAC4\CAC4;
                    + STA.W !WindowTable,X                      ;;CA73|CAD3+CAD3/CAC6\CAC6;
                      CPY.W #$01E0                              ;;CA76|CAD6+CAD6/CAC9\CAC9;
                      BCS CODE_00CAFE                           ;;CA79|CAD9+CAD9/CACC\CACC;
                      LDA.B !_7                                 ;;CA7B|CADB+CADB/CACE\CACE;
                      BNE CODE_00CAE7                           ;;CA7D|CADD+CADD/CAD0\CAD0;
                      LDA.B #$00                                ;;CA7F|CADF+CADF/CAD2\CAD2;
                      STA.W !WindowTable+1,Y                    ;;CA81|CAE1+CAE1/CAD4\CAD4;
                      DEC A                                     ;;CA84|CAE4+CAE4/CAD7\CAD7;
                      BRA CODE_00CAFB                           ;;CA85|CAE5+CAE5/CAD8\CAD8;
                                                                ;;                        ;
CODE_00CAE7:          LDA.B !_3                                 ;;CA87|CAE7+CAE7/CADA\CADA;
                      ADC.B !_0                                 ;;CA89|CAE9+CAE9/CADC\CADC;
                      BCC +                                     ;;CA8B|CAEB+CAEB/CADE\CADE;
                      LDA.B #$FF                                ;;CA8D|CAED+CAED/CAE0\CAE0;
                    + STA.W !WindowTable+1,Y                    ;;CA8F|CAEF+CAEF/CAE2\CAE2;
                      LDA.B !_0                                 ;;CA92|CAF2+CAF2/CAE5\CAE5;
                      SEC                                       ;;CA94|CAF4+CAF4/CAE7\CAE7;
                      SBC.B !_3                                 ;;CA95|CAF5+CAF5/CAE8\CAE8;
                      BCS CODE_00CAFB                           ;;CA97|CAF7+CAF7/CAEA\CAEA;
                      LDA.B #$00                                ;;CA99|CAF9+CAF9/CAEC\CAEC;
CODE_00CAFB:          STA.W !WindowTable,Y                      ;;CA9B|CAFB+CAFB/CAEE\CAEE;
CODE_00CAFE:          INX                                       ;;CA9E|CAFE+CAFE/CAF1\CAF1;
                      INX                                       ;;CA9F|CAFF+CAFF/CAF2\CAF2;
                      DEY                                       ;;CAA0|CB00+CB00/CAF3\CAF3;
                      DEY                                       ;;CAA1|CB01+CB01/CAF4\CAF4;
                      LDA.B !_1                                 ;;CAA2|CB02+CB02/CAF5\CAF5;
                      BEQ CODE_00CB0A                           ;;CAA4|CB04+CB04/CAF7\CAF7;
                      DEC.B !_1                                 ;;CAA6|CB06+CB06/CAF9\CAF9;
                      BNE CODE_00CABD                           ;;CAA8|CB08+CB08/CAFB\CAFB;
CODE_00CB0A:          LDA.B #$80                                ;;CAAA|CB0A+CB0A/CAFD\CAFD;
                      STA.W !HDMAEnable                         ;;CAAC|CB0C+CB0C/CAFF\CAFF;
                      SEP #$10                                  ;;CAAF|CB0F+CB0F/CB02\CB02; Index (8 bit) 
                      RTS                                       ;;CAB1|CB11+CB11/CB04\CB04; Return 
                                                                ;;                        ;
                                                                ;;                        ;
DATA_00CB12:          db $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF        ;;CAB2|CB12+CB12/CB05\CB05;
                      db $FF,$FF,$FF,$FF,$FE,$FE,$FE,$FE        ;;CABA|CB1A+CB1A/CB0D\CB0D;
                      db $FD,$FD,$FD,$FD,$FC,$FC,$FC,$FB        ;;CAC2|CB22+CB22/CB15\CB15;
                      db $FB,$FB,$FA,$FA,$F9,$F9,$F8,$F8        ;;CACA|CB2A+CB2A/CB1D\CB1D;
                      db $F7,$F7,$F6,$F6,$F5,$F5,$F4,$F3        ;;CAD2|CB32+CB32/CB25\CB25;
                      db $F3,$F2,$F1,$F1,$F0,$EF,$EE,$EE        ;;CADA|CB3A+CB3A/CB2D\CB2D;
                      db $ED,$EC,$EB,$EA,$E9,$E9,$E8,$E7        ;;CAE2|CB42+CB42/CB35\CB35;
                      db $E6,$E5,$E4,$E3,$E2,$E1,$DF,$DE        ;;CAEA|CB4A+CB4A/CB3D\CB3D;
                      db $DD,$DC,$DB,$DA,$D8,$D7,$D6,$D5        ;;CAF2|CB52+CB52/CB45\CB45;
                      db $D3,$D2,$D0,$CF,$CD,$CC,$CA,$C9        ;;CAFA|CB5A+CB5A/CB4D\CB4D;
                      db $C7,$C6,$C4,$C2,$C1,$BF,$BD,$BB        ;;CB02|CB62+CB62/CB55\CB55;
                      db $B9,$B7,$B6,$B4,$B1,$AF,$AD,$AB        ;;CB0A|CB6A+CB6A/CB5D\CB5D;
                      db $A9,$A7,$A4,$A2,$9F,$9D,$9A,$97        ;;CB12|CB72+CB72/CB65\CB65;
                      db $95,$92,$8F,$8C,$89,$86,$82,$7F        ;;CB1A|CB7A+CB7A/CB6D\CB6D;
                      db $7B,$78,$74,$70,$6C,$67,$63,$5E        ;;CB22|CB82+CB82/CB75\CB75;
                      db $59,$53,$4D,$46,$3F,$37,$2D,$1F        ;;CB2A|CB8A+CB8A/CB7D\CB7D;
                      db $00                                    ;;CB32|CB92+CB92/CB85\CB85;
                                                                ;;                        ;
DATA_00CB93:          db $54,$53,$52,$52,$51,$50,$50            ;;CB33|CB93+CB93/CB86\CB86;
                      db $4F,$4E,$4E,$4D,$4C,$4C,$4B,$4A        ;;CB3A|CB9A+CB9A/CB8D\CB8D;
                      db $4A,$4B,$48,$48,$47,$46,$46,$45        ;;CB42|CBA2+CBA2/CB95\CB95;
                      db $44,$44,$43,$42,$42,$41,$40,$40        ;;CB4A|CBAA+CBAA/CB9D\CB9D;
                      db $3F,$3E,$3E,$3D,$3C,$3C,$3B,$3A        ;;CB52|CBB2+CBB2/CBA5\CBA5;
                      db $3A,$39,$38,$38,$37,$36,$36,$35        ;;CB5A|CBBA+CBBA/CBAD\CBAD;
                      db $34,$34,$33,$32,$32,$31,$33,$35        ;;CB62|CBC2+CBC2/CBB5\CBB5;
                      db $38,$3A,$3C,$3E,$3F,$41,$43,$44        ;;CB6A|CBCA+CBCA/CBBD\CBBD;
                      db $45,$47,$48,$49,$4A,$4B,$4C,$4D        ;;CB72|CBD2+CBD2/CBC5\CBC5;
                      db $4E,$4E,$4F,$50,$50,$51,$51,$52        ;;CB7A|CBDA+CBDA/CBCD\CBCD;
                      db $52,$53,$53,$53,$53,$53,$53,$53        ;;CB82|CBE2+CBE2/CBD5\CBD5;
                      db $53,$53,$53,$53,$53,$53,$52,$52        ;;CB8A|CBEA+CBEA/CBDD\CBDD;
                      db $51,$51,$50,$50,$4F,$4E,$4E,$4D        ;;CB92|CBF2+CBF2/CBE5\CBE5;
                      db $4C,$4B,$4A,$49,$48,$47,$45,$44        ;;CB9A|CBFA+CBFA/CBED\CBED;
                      db $43,$41,$3F,$3E,$3C,$3A,$38,$35        ;;CBA2|CC02+CC02/CBF5\CBF5;
                      db $33,$30,$2D,$2A,$26,$23,$1E,$18        ;;CBAA|CC0A+CC0A/CBFD\CBFD;
                      db $11,$00                                ;;CBB2|CC12+CC12/CC05\CC05;
                                                                ;;                        ;
CODE_00CC14:          PHY                                       ;;CBB4|CC14+CC14/CC07\CC07;
                      LDA.B !_1                                 ;;CBB5|CC15+CC15/CC08\CC08;
                      STA.W !HW_WRDIV+1                         ;;CBB7|CC17+CC17/CC0A\CC0A; Dividend (High-Byte)
                      STZ.W !HW_WRDIV                           ;;CBBA|CC1A+CC1A/CC0D\CC0D; Dividend (Low Byte)
                      LDA.W !SpotlightSize                      ;;CBBD|CC1D+CC1D/CC10\CC10;
                      STA.W !HW_WRDIV+2                         ;;CBC0|CC20+CC20/CC13\CC13; Divisor B
                      NOP                                       ;;CBC3|CC23+CC23/CC16\CC16;
                      NOP                                       ;;CBC4|CC24+CC24/CC17\CC17;
                      NOP                                       ;;CBC5|CC25+CC25/CC18\CC18;
                      NOP                                       ;;CBC6|CC26+CC26/CC19\CC19;
                      NOP                                       ;;CBC7|CC27+CC27/CC1A\CC1A;
                      NOP                                       ;;CBC8|CC28+CC28/CC1B\CC1B;
                      REP #$20                                  ;;CBC9|CC29+CC29/CC1C\CC1C; Accum (16 bit) 
                      LDA.W !HW_RDDIV                           ;;CBCB|CC2B+CC2B/CC1E\CC1E; Quotient of Divide Result (Low Byte)
                      LSR A                                     ;;CBCE|CC2E+CC2E/CC21\CC21;
                      TAY                                       ;;CBCF|CC2F+CC2F/CC22\CC22;
                      SEP #$20                                  ;;CBD0|CC30+CC30/CC23\CC23; Accum (8 bit) 
                      LDA.B (!_6),Y                             ;;CBD2|CC32+CC32/CC25\CC25;
                      STA.W !HW_WRMPYA                          ;;CBD4|CC34+CC34/CC27\CC27; Multiplicand A
                      LDA.W !SpotlightSize                      ;;CBD7|CC37+CC37/CC2A\CC2A;
                      STA.W !HW_WRMPYB                          ;;CBDA|CC3A+CC3A/CC2D\CC2D; Multplier B
                      NOP                                       ;;CBDD|CC3D+CC3D/CC30\CC30;
                      NOP                                       ;;CBDE|CC3E+CC3E/CC31\CC31;
                      NOP                                       ;;CBDF|CC3F+CC3F/CC32\CC32;
                      NOP                                       ;;CBE0|CC40+CC40/CC33\CC33;
                      LDA.W !HW_RDMPY+1                         ;;CBE1|CC41+CC41/CC34\CC34; Product/Remainder Result (High Byte)
                      STA.B !_3                                 ;;CBE4|CC44+CC44/CC37\CC37;
                      LDA.B (!_4),Y                             ;;CBE6|CC46+CC46/CC39\CC39;
                      STA.W !HW_WRMPYA                          ;;CBE8|CC48+CC48/CC3B\CC3B; Multiplicand A
                      LDA.W !SpotlightSize                      ;;CBEB|CC4B+CC4B/CC3E\CC3E;
                      STA.W !HW_WRMPYB                          ;;CBEE|CC4E+CC4E/CC41\CC41; Multplier B
                      NOP                                       ;;CBF1|CC51+CC51/CC44\CC44;
                      NOP                                       ;;CBF2|CC52+CC52/CC45\CC45;
                      NOP                                       ;;CBF3|CC53+CC53/CC46\CC46;
                      NOP                                       ;;CBF4|CC54+CC54/CC47\CC47;
                      LDA.W !HW_RDMPY+1                         ;;CBF5|CC55+CC55/CC48\CC48; Product/Remainder Result (High Byte)
                      STA.B !_2                                 ;;CBF8|CC58+CC58/CC4B\CC4B;
                      PLY                                       ;;CBFA|CC5A+CC5A/CC4D\CC4D;
                      RTS                                       ;;CBFB|CC5B+CC5B/CC4E\CC4E; Return 
                                                                ;;                        ;
                                                                ;;                        ;
DATA_00CC5C:          db $00,$00,$00,$00,$02,$00,$06,$00        ;;CBFC|CC5C+CC5C/CC4F\CC4F;
                      db $FE,$FF,$FA,$FF                        ;;CC04|CC64+CC64/CC57\CC57;
                                                                ;;                        ;
ResetAni:                                                       ;;                        ;
                   if ver_is_ntsc(!_VER)              ;\   IF   ;;++++++++++++++++++++++++; J, U, & SS
                      LDA.B !axlr0000Hold                       ;;CC08|CC68+CC68          ;
                      AND.B #$20                                ;;CC0A|CC6A+CC6A          ;
                      BEQ +                                     ;;CC0C|CC6C+CC6C          ;
                      LDA.B !axlr0000Frame                      ;;CC0E|CC6E+CC6E          ;
                      CMP.B #$80                                ;;CC10|CC70+CC70          ;
                      BNE +                                     ;;CC12|CC72+CC72          ;
                      INC.W !DebugFreeRoam                      ;;CC14|CC74+CC74          ;
                      LDA.W !DebugFreeRoam                      ;;CC17|CC77+CC77          ;
                      CMP.B #$03                                ;;CC1A|CC7A+CC7A          ;
                      BCC +                                     ;;CC1C|CC7C+CC7C          ;
                      STZ.W !DebugFreeRoam                      ;;CC1E|CC7E+CC7E          ;
                    + LDA.W !DebugFreeRoam                      ;;CC21|CC81+CC81          ;
                      BRA CODE_00CCBB                           ;;CC24|CC84+CC84          ; Change to BEQ to enable debug code below 
                                                                ;;                        ;
                      LSR A                                     ;;CC26|CC86+CC86          ; \ Unreachable 
                      BEQ ADDR_00CCB3                           ;;CC27|CC87+CC87          ;  | Debug: Free roaming mode 
                      LDA.B #$FF                                ;;CC29|CC89+CC89          ;  | 
                      STA.W !IFrameTimer                        ;;CC2B|CC8B+CC8B          ;  | 
                      LDA.B !byetudlrHold                       ;;CC2E|CC8E+CC8E          ;  | 
                      AND.B #$03                                ;;CC30|CC90+CC90          ;  | 
                      ASL A                                     ;;CC32|CC92+CC92          ;  | 
                      ASL A                                     ;;CC33|CC93+CC93          ;  | 
                      LDX.B #$00                                ;;CC34|CC94+CC94          ;  | 
                      JSR ADDR_00CC9F                           ;;CC36|CC96+CC96          ;  | 
                      LDA.B !byetudlrHold                       ;;CC39|CC99+CC99          ;  | 
                      AND.B #$0C                                ;;CC3B|CC9B+CC9B          ;  | 
                      LDX.B #$02                                ;;CC3D|CC9D+CC9D          ;  | 
ADDR_00CC9F:          BIT.B !byetudlrHold                       ;;CC3F|CC9F+CC9F          ;  | 
                      BVC +                                     ;;CC41|CCA1+CCA1          ;  | 
                      ORA.B #$02                                ;;CC43|CCA3+CCA3          ;  | 
                    + TAY                                       ;;CC45|CCA5+CCA5          ;  | 
                      REP #$20                                  ;;CC46|CCA6+CCA6          ;  | Accum (16 bit) ; Accum (16 bit) 
                      LDA.B !PlayerXPosNext,X                   ;;CC48|CCA8+CCA8          ;  | 
                      CLC                                       ;;CC4A|CCAA+CCAA          ;  | 
                      ADC.W DATA_00CC5C,Y                       ;;CC4B|CCAB+CCAB          ;  | 
                      STA.B !PlayerXPosNext,X                   ;;CC4E|CCAE+CCAE          ;  | 
                      SEP #$20                                  ;;CC50|CCB0+CCB0          ;  | Accum (8 bit) ; Accum (8 bit) 
                      RTS                                       ;;CC52|CCB2+CCB2          ; / Return 
                                                                ;;                        ;
ADDR_00CCB3:          LDA.B #$70                                ;;CC53|CCB3+CCB3          ;
                      STA.W !PlayerPMeter                       ;;CC55|CCB5+CCB5          ;
                      STA.W !TakeoffTimer                       ;;CC58|CCB8+CCB8          ;
                   endif                              ;/ ENDIF  ;;++++++++++++++++++++++++;
CODE_00CCBB:          LDA.W !EndLevelTimer                      ;;CC5B|CCBB+CCBB/CC5B\CC5B;
                      BEQ +                                     ;;CC5E|CCBE+CCBE/CC5E\CC5E;
                      JMP EndLevelRoutine                       ;;CC60|CCC0+CCC0/CC60\CC60;
                                                                ;;                        ;
                    + JSR CODE_00CDDD                           ;;CC63|CCC3+CCC3/CC63\CC63;
                      LDA.B !SpriteLock                         ;;CC66|CCC6+CCC6/CC66\CC66; \ Branch if sprites locked 
                      BNE Return00CCDF                          ;;CC68|CCC8+CCC8/CC68\CC68; / 
                      STZ.W !CapeInteracts                      ;;CC6A|CCCA+CCCA/CC6A\CC6A;
                      STZ.W !PlayerOverworldPose                ;;CC6D|CCCD+CCCD/CC6D\CC6D;
                      LDA.W !PlayerStunnedTimer                 ;;CC70|CCD0+CCD0/CC70\CC70; \ If lock Mario timer is set... 
                      BEQ CODE_00CCE0                           ;;CC73|CCD3+CCD3/CC73\CC73;  | 
                      DEC.W !PlayerStunnedTimer                 ;;CC75|CCD5+CCD5/CC75\CC75;  | Decrease the timer 
                      STZ.B !PlayerXSpeed                       ;;CC78|CCD8+CCD8/CC78\CC78;  | X speed = 0 
                      LDA.B #$0F                                ;;CC7A|CCDA+CCDA/CC7A\CC7A;  | Mario's image = Going down tube 
                      STA.W !PlayerPose                         ;;CC7C|CCDC+CCDC/CC7C\CC7C; / 
Return00CCDF:         RTS                                       ;;CC7F|CCDF+CCDF/CC7F\CC7F; Return 
                                                                ;;                        ;
CODE_00CCE0:          LDA.W !IRQNMICommand                      ;;CC80|CCE0+CCE0/CC80\CC80;
                      BPL CODE_00CD24                           ;;CC83|CCE3+CCE3/CC83\CC83;
                      LSR A                                     ;;CC85|CCE5+CCE5/CC85\CC85;
                      BCS CODE_00CD24                           ;;CC86|CCE6+CCE6/CC86\CC86;
                      BIT.W !IRQNMICommand                      ;;CC88|CCE8+CCE8/CC88\CC88;
                      BVS CODE_00CD1C                           ;;CC8B|CCEB+CCEB/CC8B\CC8B;
                      LDA.B !PlayerInAir                        ;;CC8D|CCED+CCED/CC8D\CC8D;
                      BNE CODE_00CD1C                           ;;CC8F|CCEF+CCEF/CC8F\CC8F;
                      REP #$20                                  ;;CC91|CCF1+CCF1/CC91\CC91; Accum (16 bit) 
                      LDA.W !KeyholeXPos                        ;;CC93|CCF3+CCF3/CC93\CC93;
                      STA.B !PlayerXPosNext                     ;;CC96|CCF6+CCF6/CC96\CC96;
                      LDA.W !KeyholeYPos                        ;;CC98|CCF8+CCF8/CC98\CC98;
                      STA.B !PlayerYPosNext                     ;;CC9B|CCFB+CCFB/CC9B\CC9B;
                      SEP #$20                                  ;;CC9D|CCFD+CCFD/CC9D\CC9D; Accum (8 bit) 
                      JSR CODE_00DC2D                           ;;CC9F|CCFF+CCFF/CC9F\CC9F;
                      REP #$20                                  ;;CCA2|CD02+CD02/CCA2\CCA2; Accum (16 bit) 
                      LDA.B !PlayerXPosNext                     ;;CCA4|CD04+CD04/CCA4\CCA4;
                      STA.W !KeyholeXPos                        ;;CCA6|CD06+CD06/CCA6\CCA6;
                      STA.W !BrSwingXDist                       ;;CCA9|CD09+CD09/CCA9\CCA9;
                      LDA.B !PlayerYPosNext                     ;;CCAC|CD0C+CD0C/CCAC\CCAC;
                      AND.W #$FFF0                              ;;CCAE|CD0E+CD0E/CCAE\CCAE;
                      STA.W !KeyholeYPos                        ;;CCB1|CD11+CD11/CCB1\CCB1;
                      STA.W !BrSwingYDist                       ;;CCB4|CD14+CD14/CCB4\CCB4;
                      JSR CODE_00F9C9                           ;;CCB7|CD17+CD17/CCB7\CCB7;
                      BRA +                                     ;;CCBA|CD1A+CD1A/CCBA\CCBA;
                                                                ;;                        ;
CODE_00CD1C:          JSR CODE_00DC2D                           ;;CCBC|CD1C+CD1C/CCBC\CCBC; Accum (8 bit) 
                    + JSR CODE_00F8F2                           ;;CCBF|CD1F+CD1F/CCBF\CCBF;
                      BRA CODE_00CD36                           ;;CCC2|CD22+CD22/CCC2\CCC2;
                                                                ;;                        ;
CODE_00CD24:          LDA.B !PlayerYSpeed                       ;;CCC4|CD24+CD24/CCC4\CCC4; \ Branch if Mario has downward speed 
                      BPL +                                     ;;CCC6|CD26+CD26/CCC6\CCC6; / 
                      LDA.B !PlayerBlockedDir                   ;;CCC8|CD28+CD28/CCC8\CCC8;
                      AND.B #$08                                ;;CCCA|CD2A+CD2A/CCCA\CCCA;
                      BEQ +                                     ;;CCCC|CD2C+CD2C/CCCC\CCCC;
                      STZ.B !PlayerYSpeed                       ;;CCCE|CD2E+CD2E/CCCE\CCCE; Y speed = 0 
                    + JSR CODE_00DC2D                           ;;CCD0|CD30+CD30/CCD0\CCD0;
                      JSR CODE_00E92B                           ;;CCD3|CD33+CD33/CCD3\CCD3;
CODE_00CD36:          JSR CODE_00F595                           ;;CCD6|CD36+CD36/CCD6\CCD6;
CODE_00CD39:          STZ.W !PlayerTurningPose                  ;;CCD9|CD39+CD39/CCD9\CCD9;
                      LDY.W !PBalloonInflating                  ;;CCDC|CD3C+CD3C/CCDC\CCDC;
                      BNE CODE_00CD95                           ;;CCDF|CD3F+CD3F/CCDF\CCDF;
                      LDA.W !PlayerClimbingRope                 ;;CCE1|CD41+CD41/CCE1\CCE1;
                      BEQ +                                     ;;CCE4|CD44+CD44/CCE4\CCE4;
                      LDA.B #$1F                                ;;CCE6|CD46+CD46/CCE6\CCE6;
                      STA.B !GraphicsCompPtr+1                  ;;CCE8|CD48+CD48/CCE8\CCE8;
                    + LDA.B !PlayerIsClimbing                   ;;CCEA|CD4A+CD4A/CCEA\CCEA;
                      BNE CODE_00CD72                           ;;CCEC|CD4C+CD4C/CCEC\CCEC;
                      LDA.W !IsCarryingItem                     ;;CCEE|CD4E+CD4E/CCEE\CCEE;
                      ORA.W !PlayerRidingYoshi                  ;;CCF1|CD51+CD51/CCF1\CCF1;
                      BNE CODE_00CD79                           ;;CCF4|CD54+CD54/CCF4\CCF4;
                      LDA.B !GraphicsCompPtr+1                  ;;CCF6|CD56+CD56/CCF6\CCF6;
                      AND.B #$1B                                ;;CCF8|CD58+CD58/CCF8\CCF8;
                      CMP.B #$1B                                ;;CCFA|CD5A+CD5A/CCFA\CCFA;
                      BNE CODE_00CD79                           ;;CCFC|CD5C+CD5C/CCFC\CCFC;
                      LDA.B !byetudlrHold                       ;;CCFE|CD5E+CD5E/CCFE\CCFE;
                      AND.B #$0C                                ;;CD00|CD60+CD60/CD00\CD00;
                      BEQ CODE_00CD79                           ;;CD02|CD62+CD62/CD02\CD02;
                      LDY.B !PlayerInAir                        ;;CD04|CD64+CD64/CD04\CD04;
                      BNE CODE_00CD72                           ;;CD06|CD66+CD66/CD06\CD06;
                      AND.B #$08                                ;;CD08|CD68+CD68/CD08\CD08;
                      BNE CODE_00CD72                           ;;CD0A|CD6A+CD6A/CD0A\CD0A;
                      LDA.B !GraphicsCompPtr+1                  ;;CD0C|CD6C+CD6C/CD0C\CD0C;
                      AND.B #$04                                ;;CD0E|CD6E+CD6E/CD0E\CD0E;
                      BEQ CODE_00CD79                           ;;CD10|CD70+CD70/CD10\CD10;
CODE_00CD72:          LDA.B !GraphicsCompPtr+1                  ;;CD12|CD72+CD72/CD12\CD12;
                      STA.B !PlayerIsClimbing                   ;;CD14|CD74+CD74/CD14\CD14;
                      JMP CODE_00DB17                           ;;CD16|CD76+CD76/CD16\CD16;
                                                                ;;                        ;
CODE_00CD79:          LDA.B !PlayerInWater                      ;;CD19|CD79+CD79/CD19\CD19;
                      BEQ CODE_00CD82                           ;;CD1B|CD7B+CD7B/CD1B\CD1B;
                      JSR CODE_00D988                           ;;CD1D|CD7D+CD7D/CD1D\CD1D;
                      BRA CODE_00CD8F                           ;;CD20|CD80+CD80/CD20\CD20;
                                                                ;;                        ;
CODE_00CD82:          JSR CODE_00D5F2                           ;;CD22|CD82+CD82/CD22\CD22;
                      JSR CODE_00D062                           ;;CD25|CD85+CD85/CD25\CD25;
                      JSR CODE_00D7E4                           ;;CD28|CD88+CD88/CD28\CD28;
CODE_00CD8B:          JSL CODE_00CEB1                           ;;CD2B|CD8B+CD8B/CD2B\CD2B;
CODE_00CD8F:          LDY.W !PlayerRidingYoshi                  ;;CD2F|CD8F+CD8F/CD2F\CD2F;
                      BNE CODE_00CDAD                           ;;CD32|CD92+CD92/CD32\CD32;
                      RTS                                       ;;CD34|CD94+CD94/CD34\CD34; Return 
                                                                ;;                        ;
CODE_00CD95:          LDA.B #$42                                ;;CD35|CD95+CD95/CD35\CD35;
                      LDX.B !Powerup                            ;;CD37|CD97+CD97/CD37\CD37;
                      BEQ +                                     ;;CD39|CD99+CD99/CD39\CD39;
                      LDA.B #$43                                ;;CD3B|CD9B+CD9B/CD3B\CD3B;
                    + DEY                                       ;;CD3D|CD9D+CD9D/CD3D\CD3D;
                      BEQ +                                     ;;CD3E|CD9E+CD9E/CD3E\CD3E;
                      STY.W !PBalloonInflating                  ;;CD40|CDA0+CDA0/CD40\CD40;
                      LDA.B #$0F                                ;;CD43|CDA3+CDA3/CD43\CD43; \ Mario's image = Going down tube 
                    + STA.W !PlayerPose                         ;;CD45|CDA5+CDA5/CD45\CD45; / 
CODE_00CDA8:          RTS                                       ;;CD48|CDA8+CDA8/CD48\CD48;
                                                                ;;                        ;
                                                                ;;                        ;
                      db $20,$21,$27,$28                        ;;CD49|CDA9+CDA9/CD49\CD49;
                                                                ;;                        ;
CODE_00CDAD:          LDX.W !YoshiTongueTimer                   ;;CD4D|CDAD+CDAD/CD4D\CD4D;
                      BEQ +                                     ;;CD50|CDB0+CDB0/CD50\CD50;
                      LDY.B #$03                                ;;CD52|CDB2+CDB2/CD52\CD52;
                      CPX.B #$0C                                ;;CD54|CDB4+CDB4/CD54\CD54;
                      BCS +                                     ;;CD56|CDB6+CDB6/CD56\CD56;
                      LDY.B #$04                                ;;CD58|CDB8+CDB8/CD58\CD58;
                    + LDA.W CODE_00CDA8,Y                       ;;CD5A|CDBA+CDBA/CD5A\CD5A;
                      DEY                                       ;;CD5D|CDBD+CDBD/CD5D\CD5D;
                      BNE +                                     ;;CD5E|CDBE+CDBE/CD5E\CD5E;
                      LDY.B !PlayerIsDucking                    ;;CD60|CDC0+CDC0/CD60\CD60;
                      BEQ +                                     ;;CD62|CDC2+CDC2/CD62\CD62;
                      LDA.B #$1D                                ;;CD64|CDC4+CDC4/CD64\CD64; \ Mario's image = Picking up object 
                    + STA.W !PlayerPose                         ;;CD66|CDC6+CDC6/CD66\CD66; / 
                      LDA.W !YoshiHasWingsEvt                   ;;CD69|CDC9+CDC9/CD69\CD69; \ Check Yoshi wing ability address for #$01, 
                      CMP.B #$01                                ;;CD6C|CDCC+CDCC/CD6C\CD6C; / but this is an impossible value 
                      BNE Return00CDDC                          ;;CD6E|CDCE+CDCE/CD6E\CD6E; \ Unreachable/unused code 
                      BIT.B !byetudlrFrame                      ;;CD70|CDD0+CDD0/CD70\CD70;  | Lets Mario (any power) shoot fireballs while on Yoshi 
                      BVC Return00CDDC                          ;;CD72|CDD2+CDD2/CD72\CD72;  | 
                      LDA.B #$08                                ;;CD74|CDD4+CDD4/CD74\CD74;  | 
                      STA.W !Empty18DB                          ;;CD76|CDD6+CDD6/CD76\CD76;  | 
                      JSR ShootFireball                         ;;CD79|CDD9+CDD9/CD79\CD79; / 
Return00CDDC:         RTS                                       ;;CD7C|CDDC+CDDC/CD7C\CD7C; Return 
                                                                ;;                        ;
CODE_00CDDD:          LDA.W !HorizLayer1Setting                 ;;CD7D|CDDD+CDDD/CD7D\CD7D;
                      BEQ Return00CDDC                          ;;CD80|CDE0+CDE0/CD80\CD80;
                      LDY.W !CameraScrollDir                    ;;CD82|CDE2+CDE2/CD82\CD82;
                      LDA.W !CameraIsScrolling                  ;;CD85|CDE5+CDE5/CD85\CD85;
                      STA.B !SpriteLock                         ;;CD88|CDE8+CDE8/CD88\CD88;
                      BNE CODE_00CE4C                           ;;CD8A|CDEA+CDEA/CD8A\CD8A;
                      LDA.W !CameraProperMove                   ;;CD8C|CDEC+CDEC/CD8C\CD8C;
                      BEQ CODE_00CDF6                           ;;CD8F|CDEF+CDEF/CD8F\CD8F;
                      STZ.W !CameraScrollDir                    ;;CD91|CDF1+CDF1/CD91\CD91;
                      BRA CODE_00CE48                           ;;CD94|CDF4+CDF4/CD94\CD94;
                                                                ;;                        ;
CODE_00CDF6:          LDA.B !axlr0000Hold                       ;;CD96|CDF6+CDF6/CD96\CD96; \ Branch if anything besides L/R being held 
                      AND.B #$CF                                ;;CD98|CDF8+CDF8/CD98\CD98;  | 
                      ORA.B !byetudlrHold                       ;;CD9A|CDFA+CDFA/CD9A\CD9A;  | 
                      BNE CODE_00CE49                           ;;CD9C|CDFC+CDFC/CD9C\CD9C; / 
                      LDA.B !axlr0000Hold                       ;;CD9E|CDFE+CDFE/CD9E\CD9E; \ Branch if L/R not being held 
                      AND.B #$30                                ;;CDA0|CE00+CE00/CDA0\CDA0;  | 
                      BEQ CODE_00CE49                           ;;CDA2|CE02+CE02/CDA2\CDA2;  | 
                      CMP.B #$30                                ;;CDA4|CE04+CE04/CDA4\CDA4;  | 
                      BEQ CODE_00CE49                           ;;CDA6|CE06+CE06/CDA6\CDA6; / 
                      LSR A                                     ;;CDA8|CE08+CE08/CDA8\CDA8;
                      LSR A                                     ;;CDA9|CE09+CE09/CDA9\CDA9;
                      LSR A                                     ;;CDAA|CE0A+CE0A/CDAA\CDAA;
                      INC.W !CameraScrollTimer                  ;;CDAB|CE0B+CE0B/CDAB\CDAB;
                      LDX.W !CameraScrollTimer                  ;;CDAE|CE0E+CE0E/CDAE\CDAE;
                      CPX.B #$10                                ;;CDB1|CE11+CE11/CDB1\CDB1;
                      BCC CODE_00CE4C                           ;;CDB3|CE13+CE13/CDB3\CDB3;
                      TAX                                       ;;CDB5|CE15+CE15/CDB5\CDB5;
                      REP #$20                                  ;;CDB6|CE16+CE16/CDB6\CDB6; Accum (16 bit) 
                      LDA.W !CameraMoveTrigger                  ;;CDB8|CE18+CE18/CDB8\CDB8;
                      CMP.W DATA_00F6CB,X                       ;;CDBB|CE1B+CE1B/CDBB\CDBB;
                      SEP #$20                                  ;;CDBE|CE1E+CE1E/CDBE\CDBE; Accum (8 bit) 
                      BEQ CODE_00CE4C                           ;;CDC0|CE20+CE20/CDC0\CDC0;
                      LDA.B #$01                                ;;CDC2|CE22+CE22/CDC2\CDC2;
                      TRB.W !CameraMoveTrigger                  ;;CDC4|CE24+CE24/CDC4\CDC4;
                      INC.W !CameraIsScrolling                  ;;CDC7|CE27+CE27/CDC7\CDC7;
                      LDA.B #$00                                ;;CDCA|CE2A+CE2A/CDCA\CDCA;
                      CPX.B #$02                                ;;CDCC|CE2C+CE2C/CDCC\CDCC;
                      BNE +                                     ;;CDCE|CE2E+CE2E/CDCE\CDCE;
                      LDA.B !LastScreenHoriz                    ;;CDD0|CE30+CE30/CDD0\CDD0;
                      DEC A                                     ;;CDD2|CE32+CE32/CDD2\CDD2;
                    + REP #$20                                  ;;CDD3|CE33+CE33/CDD3\CDD3; Accum (16 bit) 
                      XBA                                       ;;CDD5|CE35+CE35/CDD5\CDD5;
                      AND.W #$FF00                              ;;CDD6|CE36+CE36/CDD6\CDD6;
                      CMP.B !Layer1XPos                         ;;CDD9|CE39+CE39/CDD9\CDD9;
                      SEP #$20                                  ;;CDDB|CE3B+CE3B/CDDB\CDDB; Accum (8 bit) 
                      BEQ +                                     ;;CDDD|CE3D+CE3D/CDDD\CDDD;
                      LDY.B #!SFX_SCREENSCROLL                  ;;CDDF|CE3F+CE3F/CDDF\CDDF; \ Play sound effect 
                      STY.W !SPCIO3                             ;;CDE1|CE41+CE41/CDE1\CDE1; / 
                    + TXA                                       ;;CDE4|CE44+CE44/CDE4\CDE4;
                      STA.W !CameraScrollDir                    ;;CDE5|CE45+CE45/CDE5\CDE5;
CODE_00CE48:          TAY                                       ;;CDE8|CE48+CE48/CDE8\CDE8;
CODE_00CE49:          STZ.W !CameraScrollTimer                  ;;CDE9|CE49+CE49/CDE9\CDE9;
CODE_00CE4C:          LDX.B #$00                                ;;CDEC|CE4C+CE4C/CDEC\CDEC;
                      LDA.B !PlayerDirection                    ;;CDEE|CE4E+CE4E/CDEE\CDEE;
                      ASL A                                     ;;CDF0|CE50+CE50/CDF0\CDF0;
                      STA.W !CameraScrollPlayerDir              ;;CDF1|CE51+CE51/CDF1\CDF1;
                      REP #$20                                  ;;CDF4|CE54+CE54/CDF4\CDF4; Accum (16 bit) 
                      LDA.W !CameraMoveTrigger                  ;;CDF6|CE56+CE56/CDF6\CDF6;
                      CMP.W DATA_00F6CB,Y                       ;;CDF9|CE59+CE59/CDF9\CDF9;
                      BEQ CODE_00CE6D                           ;;CDFC|CE5C+CE5C/CDFC\CDFC;
                      CLC                                       ;;CDFE|CE5E+CE5E/CDFE\CDFE;
                      ADC.W DATA_00F6BF,Y                       ;;CDFF|CE5F+CE5F/CDFF\CDFF;
                      LDY.W !CameraScrollPlayerDir              ;;CE02|CE62+CE62/CE02\CE02;
                      CMP.W DATA_00F6B3,Y                       ;;CE05|CE65+CE65/CE05\CE05;
                      BNE +                                     ;;CE08|CE68+CE68/CE08\CE08;
                      STX.W !CameraScrollDir                    ;;CE0A|CE6A+CE6A/CE0A\CE0A;
CODE_00CE6D:          STX.W !CameraIsScrolling                  ;;CE0D|CE6D+CE6D/CE0D\CE0D;
                    + STA.W !CameraMoveTrigger                  ;;CE10|CE70+CE70/CE10\CE10;
                      STX.W !CameraProperMove                   ;;CE13|CE73+CE73/CE13\CE13;
                      SEP #$20                                  ;;CE16|CE76+CE76/CE16\CE16; Accum (8 bit) 
CODE_00CE78:          RTS                                       ;;CE18|CE78+CE78/CE18\CE18;
                                                                ;;                        ;
                                                                ;;                        ;
                      db $2A,$2B,$2C,$2D,$2E,$2F                ;;CE19|CE79+CE79/CE19\CE19;
                                                                ;;                        ;
DATA_00CE7F:          db $2C,$2C,$2C,$2B,$2B,$2C,$2C,$2B        ;;CE1F|CE7F+CE7F/CE1F\CE1F;
                      db $2B,$2C,$2D,$2A,$2A,$2D,$2D,$2A        ;;CE27|CE87+CE87/CE27\CE27;
                      db $2A,$2D,$2D,$2A,$2A,$2D,$2E,$2A        ;;CE2F|CE8F+CE8F/CE2F\CE2F;
                      db $2A,$2E                                ;;CE37|CE97+CE97/CE37\CE37;
                                                                ;;                        ;
DATA_00CE99:          db $00,$00,$25,$44,$00,$00,$0F,$45        ;;CE39|CE99+CE99/CE39\CE39;
DATA_00CEA1:          db $00,$00,$00,$00,$01,$01,$01,$01        ;;CE41|CEA1+CEA1/CE41\CE41;
DATA_00CEA9:          db $02,$07,$06,$09,$02,$07,$06,$09        ;;CE49|CEA9+CEA9/CE49\CE49;
                                                                ;;                        ;
CODE_00CEB1:          LDA.W !CapeAniTimer                       ;;CE51|CEB1+CEB1/CE51\CE51; Related to cape animation? 
                      BNE lbl14A2Not0                           ;;CE54|CEB4+CEB4/CE54\CE54;
                      LDX.W !PlayerCapePose                     ;;CE56|CEB6+CEB6/CE56\CE56; Cape image 
                      LDA.B !PlayerInAir                        ;;CE59|CEB9+CEB9/CE59\CE59; If Mario isn't in air, branch to $CEDE 
                      BEQ MarioAnimAir                          ;;CE5B|CEBB+CEBB/CE5B\CE5B; branch to $CEDE 
                      LDY.B #$04                                ;;CE5D|CEBD+CEBD/CE5D\CE5D;
                      BIT.B !PlayerYSpeed                       ;;CE5F|CEBF+CEBF/CE5F\CE5F; \ If Mario is falling (and thus not on ground) 
                      BPL CODE_00CECD                           ;;CE61|CEC1+CEC1/CE61\CE61; / branch down 
                      CMP.B #$0C                                ;;CE63|CEC3+CEC3/CE63\CE63; \ If making a "run jump", 
                      BEQ CODE_00CEFD                           ;;CE65|CEC5+CEC5/CE65\CE65; / branch to $CEFD 
                      LDA.B !PlayerInWater                      ;;CE67|CEC7+CEC7/CE67\CE67; \ If Mario is in water, 
                      BNE CODE_00CEFD                           ;;CE69|CEC9+CEC9/CE69\CE69;  |branch to $CEFD 
                      BRA MrioNtInWtr                           ;;CE6B|CECB+CECB/CE6B\CE6B; / otherwise, branch to $CEE4 
                                                                ;;                        ;
CODE_00CECD:          INX                                       ;;CE6D|CECD+CECD/CE6D\CE6D; \  
                      CPX.B #$05                                ;;CE6E|CECE+CECE/CE6E\CE6E;  |if X >= #$04 and != #$FF then jump down <- counting the INX 
                      BCS CODE_00CED6                           ;;CE70|CED0+CED0/CE70\CE70; /  
                      LDX.B #$05                                ;;CE72|CED2+CED2/CE72\CE72; X = #$05 
                      BRA CODE_00CF0A                           ;;CE74|CED4+CED4/CE74\CE74; Branch to $CF04 
                                                                ;;                        ;
CODE_00CED6:          CPX.B #$0B                                ;;CE76|CED6+CED6/CE76\CE76; \ If X is less than #$0B, 
                      BCC CODE_00CF0A                           ;;CE78|CED8+CED8/CE78\CE78; / branch to $CF0A 
                      LDX.B #$07                                ;;CE7A|CEDA+CEDA/CE7A\CE7A; X = #$07 
                      BRA CODE_00CF0A                           ;;CE7C|CEDC+CEDC/CE7C\CE7C; Mario is not in the air, branch to $CF0A 
                                                                ;;                        ;
MarioAnimAir:         LDA.B !PlayerXSpeed                       ;;CE7E|CEDE+CEDE/CE7E\CE7E; \ If Mario X speed isn't 0, 
                      BNE CODE_00CEF0                           ;;CE80|CEE0+CEE0/CE80\CE80; / branch to $CEF0 
                      LDY.B #$08                                ;;CE82|CEE2+CEE2/CE82\CE82; Otherwise Y = #$08 
MrioNtInWtr:          TXA                                       ;;CE84|CEE4+CEE4/CE84\CE84; A = X = #13DF 
                      BEQ CODE_00CF0A                           ;;CE85|CEE5+CEE5/CE85\CE85; If $13DF (now A) = 0 branch to $CF04 
                      DEX                                       ;;CE87|CEE7+CEE7/CE87\CE87; \  
                      CPX.B #$03                                ;;CE88|CEE8+CEE8/CE88\CE88;  |If X - 1 < #$03 Then Branch $CF04 
                      BCC CODE_00CF0A                           ;;CE8A|CEEA+CEEA/CE8A\CE8A; /  
                      LDX.B #$02                                ;;CE8C|CEEC+CEEC/CE8C\CE8C; X = #$02 
                      BRA CODE_00CF0A                           ;;CE8E|CEEE+CEEE/CE8E\CE8E; Branch to $CF04 
                                                                ;;                        ;
CODE_00CEF0:          BPL +                                     ;;CE90|CEF0+CEF0/CE90\CE90; \  
                      EOR.B #$FF                                ;;CE92|CEF2+CEF2/CE92\CE92;  |A = abs(A) 
                      INC A                                     ;;CE94|CEF4+CEF4/CE94\CE94;  | 
                    + LSR A                                     ;;CE95|CEF5+CEF5/CE95\CE95; \  
                      LSR A                                     ;;CE96|CEF6+CEF6/CE96\CE96;  |Divide a by 8 
                      LSR A                                     ;;CE97|CEF7+CEF7/CE97\CE97; /  
                      TAY                                       ;;CE98|CEF8+CEF8/CE98\CE98; Y = A 
                      LDA.W DATA_00DC7C,Y                       ;;CE99|CEF9+CEF9/CE99\CE99; A = Mario animation speed? (I didn't know it was a table...) 
                      TAY                                       ;;CE9C|CEFC+CEFC/CE9C\CE9C; Load Y with this table 
CODE_00CEFD:          INX                                       ;;CE9D|CEFD+CEFD/CE9D\CE9D; \  
                      CPX.B #$03                                ;;CE9E|CEFE+CEFE/CE9E\CE9E;  | 
                      BCS +                                     ;;CEA0|CF00+CF00/CEA0\CEA0;  |If X is < #$02 and != #$FF <- counting the INX 
                      LDX.B #$05                                ;;CEA2|CF02+CF02/CEA2\CEA2;  |then X = #$05 
                    + CPX.B #$07                                ;;CEA4|CF04+CF04/CEA4\CEA4; \  
                      BCC CODE_00CF0A                           ;;CEA6|CF06+CF06/CEA6\CEA6;  |If X is greater than or equal to #$07 then X = #$03 
                      LDX.B #$03                                ;;CEA8|CF08+CF08/CEA8\CEA8;  | 
CODE_00CF0A:          STX.W !PlayerCapePose                     ;;CEAA|CF0A+CF0A/CEAA\CEAA; And X goes right back into $13DF (cape image) after being modified 
                      TYA                                       ;;CEAD|CF0D+CF0D/CEAD\CEAD; Now Y goes back into A 
                      LDY.B !PlayerInWater                      ;;CEAE|CF0E+CF0E/CEAE\CEAE; \  
                      BEQ +                                     ;;CEB0|CF10+CF10/CEB0\CEB0;  |If mario is in water then A = 2A 
                      ASL A                                     ;;CEB2|CF12+CF12/CEB2\CEB2;  | 
                    + STA.W !CapeAniTimer                       ;;CEB3|CF13+CF13/CEB3\CEB3; A -> $14A2 (do we know this byte yet?) no. 
lbl14A2Not0:          LDA.W !SpinJumpFlag                       ;;CEB6|CF16+CF16/CEB6\CEB6; A = Spin Jump Flag 
                      ORA.W !CapeSpinTimer                      ;;CEB9|CF19+CF19/CEB9\CEB9;
                      BEQ CODE_00CF4E                           ;;CEBC|CF1C+CF1C/CEBC\CEBC; If $140D OR $14A6 = 0 then branch to $CF4E 
                      STZ.B !PlayerIsDucking                    ;;CEBE|CF1E+CF1E/CEBE\CEBE; 0 -> Ducking while jumping flag 
                      LDA.B !EffFrame                           ;;CEC0|CF20+CF20/CEC0\CEC0; \  
                      AND.B #$06                                ;;CEC2|CF22+CF22/CEC2\CEC2;  |X = Y = Alternate frame counter AND #$06 
                      TAX                                       ;;CEC4|CF24+CF24/CEC4\CEC4;  | 
                      TAY                                       ;;CEC5|CF25+CF25/CEC5\CEC5; /  
                      LDA.B !PlayerInAir                        ;;CEC6|CF26+CF26/CEC6\CEC6; \ If on ground branch down 
                      BEQ +                                     ;;CEC8|CF28+CF28/CEC8\CEC8; /  
                      LDA.B !PlayerYSpeed                       ;;CECA|CF2A+CF2A/CECA\CECA; \ If Mario moving upwards branch down 
                      BMI +                                     ;;CECC|CF2C+CF2C/CECC\CECC; /  
                      INY                                       ;;CECE|CF2E+CF2E/CECE\CECE; Y = Y + 1 
                    + LDA.W DATA_00CEA9,Y                       ;;CECF|CF2F+CF2F/CECF\CECF; \ After loading from this table, 
                      STA.W !PlayerCapePose                     ;;CED2|CF32+CF32/CED2\CED2; / Store A in cape image 
                      LDA.B !Powerup                            ;;CED5|CF35+CF35/CED5\CED5; A = Mario's powerup status 
                      BEQ +                                     ;;CED7|CF37+CF37/CED7\CED7; \  
                      INX                                       ;;CED9|CF39+CF39/CED9\CED9;  |If not small, increase X 
                    + LDA.W DATA_00CEA1,X                       ;;CEDA|CF3A+CF3A/CEDA\CEDA; \ Load from another table 
                      STA.B !PlayerDirection                    ;;CEDD|CF3D+CF3D/CEDD\CEDD; / store to Mario's Direction 
                      LDY.B !Powerup                            ;;CEDF|CF3F+CF3F/CEDF\CEDF; \  
                      CPY.B #$02                                ;;CEE1|CF41+CF41/CEE1\CEE1;  | 
                      BNE +                                     ;;CEE3|CF43+CF43/CEE3\CEE3;  |If Mario has cape, JSR 
                      JSR CODE_00D044                           ;;CEE5|CF45+CF45/CEE5\CEE5;  |to possibly the graphics handler 
                    + LDA.W DATA_00CE99,X                       ;;CEE8|CF48+CF48/CEE8\CEE8; \ Load from a table again 
                      JMP CODE_00D01A                           ;;CEEB|CF4B+CF4B/CEEB\CEEB; / And jump 
                                                                ;;                        ;
CODE_00CF4E:          LDA.W !PlayerSlopePose                    ;;CEEE|CF4E+CF4E/CEEE\CEEE; \ If $13ED is #$01 - #$7F then 
                      BEQ CODE_00CF62                           ;;CEF1|CF51+CF51/CEF1\CEF1;  |branch to $CF85 
                      BPL CODE_00CF85                           ;;CEF3|CF53+CF53/CEF3\CEF3;  | 
                      LDA.W !SlopeType                          ;;CEF5|CF55+CF55/CEF5\CEF5;
                      LSR A                                     ;;CEF8|CF58+CF58/CEF8\CEF8;
                      LSR A                                     ;;CEF9|CF59+CF59/CEF9\CEF9;
                      ORA.B !PlayerDirection                    ;;CEFA|CF5A+CF5A/CEFA\CEFA;
                      TAY                                       ;;CEFC|CF5C+CF5C/CEFC\CEFC;
                      LDA.W DATA_00CE7F,Y                       ;;CEFD|CF5D+CF5D/CEFD\CEFD;
                      BRA CODE_00CF85                           ;;CF00|CF60+CF60/CF00\CF00;
                                                                ;;                        ;
CODE_00CF62:          LDA.B #$3C                                ;;CF02|CF62+CF62/CF02\CF02; \ Select Case $148F 
                      LDY.W !IsCarryingItem                     ;;CF04|CF64+CF64/CF04\CF04;  |Case 0:A = #$3C 
                      BEQ +                                     ;;CF07|CF67+CF67/CF07\CF07;  |Case Else: A = #$1D 
                      LDA.B #$1D                                ;;CF09|CF69+CF69/CF09\CF09;  |End Select 
                    + LDY.B !PlayerIsDucking                    ;;CF0B|CF6B+CF6B/CF0B\CF0B; \ If Ducking while jumping 
                      BNE CODE_00CF85                           ;;CF0D|CF6D+CF6D/CF0D\CF0D; / Branch to $CF85 
                      LDA.W !ShootFireTimer                     ;;CF0F|CF6F+CF6F/CF0F\CF0F; \ If (Unknown) = 0 
                      BEQ CODE_00CF7E                           ;;CF12|CF72+CF72/CF12\CF12; / Branch to $CF7E 
                      LDA.B #$3F                                ;;CF14|CF74+CF74/CF14\CF14; A = #$3F 
                      LDY.B !PlayerInAir                        ;;CF16|CF76+CF76/CF16\CF16; \ If Mario isn't in air,  
                      BEQ CODE_00CF85                           ;;CF18|CF78+CF78/CF18\CF18;  |branch to $CF85 
                      LDA.B #$16                                ;;CF1A|CF7A+CF7A/CF1A\CF1A;  |Otherwise, set A to #$16 and 
                      BRA CODE_00CF85                           ;;CF1C|CF7C+CF7C/CF1C\CF1C; / branch to $CF85 
                                                                ;;                        ;
CODE_00CF7E:          LDA.B #$0E                                ;;CF1E|CF7E+CF7E/CF1E\CF1E; A = #$0E 
                      LDY.W !KickingTimer                       ;;CF20|CF80+CF80/CF20\CF20; \ If Time to show Mario's current pose is 00, 
                      BEQ +                                     ;;CF23|CF83+CF83/CF23\CF23;  | Don't jump to $D01A 
CODE_00CF85:          JMP CODE_00D01A                           ;;CF25|CF85+CF85/CF25\CF25;  | 
                                                                ;;                        ;
                    + LDA.B #$1D                                ;;CF28|CF88+CF88/CF28\CF28; A = #$1D 
                      LDY.W !PickUpItemTimer                    ;;CF2A|CF8A+CF8A/CF2A\CF2A; \ If $1499 != 0 then Jump to $D01A 
                      BNE CODE_00CF85                           ;;CF2D|CF8D+CF8D/CF2D\CF2D; /  
                      LDA.B #$0F                                ;;CF2F|CF8F+CF8F/CF2F\CF2F; A = #$0F 
                      LDY.W !FaceScreenTimer                    ;;CF31|CF91+CF91/CF31\CF31; \ If $1499 != 0 then Jump to $D01A 
                      BNE CODE_00CF85                           ;;CF34|CF94+CF94/CF34\CF34; /  
                      LDA.B #$00                                ;;CF36|CF96+CF96/CF36\CF36; A = #$00 
                      LDX.W !PlayerInCloud                      ;;CF38|CF98+CF98/CF38\CF38; X = $18C2 (Unknown) 
                      BNE MarioAnimNoAbs1                       ;;CF3B|CF9B+CF9B/CF3B\CF3B; If X != 0 then branch down 
                      LDA.B !PlayerInAir                        ;;CF3D|CF9D+CF9D/CF3D\CF3D; \ If Mario is flying branch down 
                      BEQ CODE_00CFB7                           ;;CF3F|CF9F+CF9F/CF3F\CF3F; /  
                      LDY.W !RunTakeoffTimer                    ;;CF41|CFA1+CFA1/CF41\CF41; \ If $14A0 != 0 then 
                      BNE CODE_00CFBC                           ;;CF44|CFA4+CFA4/CF44\CF44; / Skip down 
                      LDY.W !FlightPhase                        ;;CF46|CFA6+CFA6/CF46\CF46; Spaghetticode(tm) 
                      BEQ +                                     ;;CF49|CFA9+CFA9/CF49\CF49;
                      LDA.W CODE_00CE78,Y                       ;;CF4B|CFAB+CFAB/CF4B\CF4B;
                    + LDY.W !IsCarryingItem                     ;;CF4E|CFAE+CFAE/CF4E\CF4E; \ If Mario isn't holding something, 
                      BEQ CODE_00D01A                           ;;CF51|CFB1+CFB1/CF51\CF51;  |branch to $D01A 
                      LDA.B #$09                                ;;CF53|CFB3+CFB3/CF53\CF53;  |Otherwise, set A to #$09 and 
                      BRA CODE_00D01A                           ;;CF55|CFB5+CFB5/CF55\CF55; / branch to $D01A 
                                                                ;;                        ;
CODE_00CFB7:          LDA.W !PlayerTurningPose                  ;;CF57|CFB7+CFB7/CF57\CF57;
                      BNE CODE_00D01A                           ;;CF5A|CFBA+CFBA/CF5A\CF5A;
CODE_00CFBC:          LDA.B !PlayerXSpeed                       ;;CF5C|CFBC+CFBC/CF5C\CF5C; \  
                      BPL MarioAnimNoAbs1                       ;;CF5E|CFBE+CFBE/CF5E\CF5E;  | 
                      EOR.B #$FF                                ;;CF60|CFC0+CFC0/CF60\CF60;  |Set A to absolute value of Mario's X speed 
                      INC A                                     ;;CF62|CFC2+CFC2/CF62\CF62;  | 
MarioAnimNoAbs1:      TAX                                       ;;CF63|CFC3+CFC3/CF63\CF63; Copy A to X 
                      BNE CODE_00CFD4                           ;;CF64|CFC4+CFC4/CF64\CF64; If Mario isn't standing still, branch to $CFD4 
                      XBA                                       ;;CF66|CFC6+CFC6/CF66\CF66; "Push" A 
                      LDA.B !byetudlrHold                       ;;CF67|CFC7+CFC7/CF67\CF67; \  
                      AND.B #$08                                ;;CF69|CFC9+CFC9/CF69\CF69;  |If player isn't pressing up, 
                      BEQ CODE_00D002                           ;;CF6B|CFCB+CFCB/CF6B\CF6B;  |branch to $D002 
                      LDA.B #$03                                ;;CF6D|CFCD+CFCD/CF6D\CF6D;  |Otherwise, store x03 in $13DE and 
                      STA.W !PlayerOverworldPose                ;;CF6F|CFCF+CFCF/CF6F\CF6F;  |branch to $D002 
                      BRA CODE_00D002                           ;;CF72|CFD2+CFD2/CF72\CF72; /  
                                                                ;;                        ;
CODE_00CFD4:          LDA.B !LevelIsSlippery                    ;;CF74|CFD4+CFD4/CF74\CF74; \ If level isn't slippery, 
                      BEQ CODE_00CFE3                           ;;CF76|CFD6+CFD6/CF76\CF76; / branch to $CFE3 
                      LDA.B !byetudlrHold                       ;;CF78|CFD8+CFD8/CF78\CF78;
                      AND.B #$03                                ;;CF7A|CFDA+CFDA/CF7A\CF7A;
                      BEQ CODE_00D003                           ;;CF7C|CFDC+CFDC/CF7C\CF7C;
                      LDA.B #$68                                ;;CF7E|CFDE+CFDE/CF7E\CF7E;
                      STA.W !PlayerPoseLenTimer                 ;;CF80|CFE0+CFE0/CF80\CF80;
CODE_00CFE3:          LDA.W !PlayerWalkingPose                  ;;CF83|CFE3+CFE3/CF83\CF83; A = $13DB 
                      LDY.W !PlayerAniTimer                     ;;CF86|CFE6+CFE6/CF86\CF86; \ If Mario is hurt (flashing), 
                      BNE CODE_00D003                           ;;CF89|CFE9+CFE9/CF89\CF89; / branch to $D003 
                      DEC A                                     ;;CF8B|CFEB+CFEB/CF8B\CF8B; A = A - 1 
                      BPL +                                     ;;CF8C|CFEC+CFEC/CF8C\CF8C; \If bit 7 is clear, 
                      LDY.B !Powerup                            ;;CF8E|CFEE+CFEE/CF8E\CF8E;  | Load amount of walking frames 
                      LDA.W NumWalkingFrames,Y                  ;;CF90|CFF0+CFF0/CF90\CF90;  | for current powerup 
                    + XBA                                       ;;CF93|CFF3+CFF3/CF93\CF93; \ >>-This code puts together an index to a table further down-<< 
                      TXA                                       ;;CF94|CFF4+CFF4/CF94\CF94;  |-\ Above Line: "Push" frame amount 
                      LSR A                                     ;;CF95|CFF5+CFF5/CF95\CF95;  |  |A = X / 8 
                      LSR A                                     ;;CF96|CFF6+CFF6/CF96\CF96;  |  | 
                      LSR A                                     ;;CF97|CFF7+CFF7/CF97\CF97;  |-/  
                      ORA.W !PlayerPoseLenTimer                 ;;CF98|CFF8+CFF8/CF98\CF98;  |ORA with $13E5 
                      TAY                                       ;;CF9B|CFFB+CFFB/CF9B\CF9B;  |And store A to Y 
                      LDA.W DATA_00DC7C,Y                       ;;CF9C|CFFC+CFFC/CF9C\CF9C;  | 
                      STA.W !PlayerAniTimer                     ;;CF9F|CFFF+CFFF/CF9F\CF9F; /  
CODE_00D002:          XBA                                       ;;CFA2|D002+D002/CFA2\CFA2; \ Switch in frame amount and store it to $13DB 
CODE_00D003:          STA.W !PlayerWalkingPose                  ;;CFA3|D003+D003/CFA3\CFA3; /  
                      CLC                                       ;;CFA6|D006+D006/CFA6\CFA6; \ Add walking animation type 
                      ADC.W !PlayerOverworldPose                ;;CFA7|D007+D007/CFA7\CFA7; / (Walking, running...) 
                      LDY.W !IsCarryingItem                     ;;CFAA|D00A+D00A/CFAA\CFAA; \  
                      BEQ CODE_00D014                           ;;CFAD|D00D+D00D/CFAD\CFAD;  | 
                      CLC                                       ;;CFAF|D00F+D00F/CFAF\CFAF;  |If Mario is carrying something, add #$07 
                      ADC.B #$07                                ;;CFB0|D010+D010/CFB0\CFB0;  | 
                      BRA CODE_00D01A                           ;;CFB2|D012+D012/CFB2\CFB2;  | 
                                                                ;;                        ;
CODE_00D014:          CPX.B #con($2F,$2F,$2F,$3A,$3A)           ;;CFB4|D014+D014/CFB4\CFB4; \  
                      BCC CODE_00D01A                           ;;CFB6|D016+D016/CFB6\CFB6;  |If X is greater than #$2F, add #$04 
                      ADC.B #$03                                ;;CFB8|D018+D018/CFB8\CFB8; / <-Carry is always set here, adding #$01 to (#$03 + A) 
CODE_00D01A:          LDY.W !WallrunningType                    ;;CFBA|D01A+D01A/CFBA\CFBA; \ If Mario isn't rotated 45 degrees (triangle 
                      BEQ +                                     ;;CFBD|D01D+D01D/CFBD\CFBD; / block), branch to $D030 
                      TYA                                       ;;CFBF|D01F+D01F/CFBF\CFBF; \ Y AND #$01 -> Mario's Direction RAM Byte 
                      AND.B #$01                                ;;CFC0|D020+D020/CFC0\CFC0;  | 
                      STA.B !PlayerDirection                    ;;CFC2|D022+D022/CFC2\CFC2; /  
                      LDA.B #$10                                ;;CFC4|D024+D024/CFC4\CFC4; \  
                      CPY.B #$06                                ;;CFC6|D026+D026/CFC6\CFC6;  |If Y < 6 then 
                      BCC +                                     ;;CFC8|D028+D028/CFC8\CFC8;  |    A = #13DB + $11 
                      LDA.W !PlayerWalkingPose                  ;;CFCA|D02A+D02A/CFCA\CFCA;  |Else 
                      CLC                                       ;;CFCD|D02D+D02D/CFCD\CFCD;  |    A = #$10 
                      ADC.B #$11                                ;;CFCE|D02E+D02E/CFCE\CFCE;  |End If 
                    + STA.W !PlayerPose                         ;;CFD0|D030+D030/CFD0\CFD0; Store in Current animation frame 
                      RTL                                       ;;CFD3|D033+D033/CFD3\CFD3; And Finish 
                                                                ;;                        ;
                                                                ;;                        ;
DATA_00D034:          db $0C,$00,$F4,$FF,$08,$00,$F8,$FF        ;;CFD4|D034+D034/CFD4\CFD4;
DATA_00D03C:          db $10,$00,$10,$00,$02,$00,$02,$00        ;;CFDC|D03C+D03C/CFDC\CFDC;
                                                                ;;                        ;
CODE_00D044:          LDY.B #$01                                ;;CFE4|D044+D044/CFE4\CFE4;
                      STY.W !CapeInteracts                      ;;CFE6|D046+D046/CFE6\CFE6;
                      ASL A                                     ;;CFE9|D049+D049/CFE9\CFE9;
                      TAY                                       ;;CFEA|D04A+D04A/CFEA\CFEA;
                      REP #$20                                  ;;CFEB|D04B+D04B/CFEB\CFEB; 16 bit A ; Accum (16 bit) 
                      LDA.B !PlayerXPosNext                     ;;CFED|D04D+D04D/CFED\CFED; \  
                      CLC                                       ;;CFEF|D04F+D04F/CFEF\CFEF;  | 
                      ADC.W DATA_00D034,Y                       ;;CFF0|D050+D050/CFF0\CFF0;  | 
                      STA.W !CapeInteractionXPos                ;;CFF3|D053+D053/CFF3\CFF3;  |Set cape<->sprite collision coordinates 
                      LDA.B !PlayerYPosNext                     ;;CFF6|D056+D056/CFF6\CFF6;  | 
                      CLC                                       ;;CFF8|D058+D058/CFF8\CFF8;  | 
                      ADC.W DATA_00D03C,Y                       ;;CFF9|D059+D059/CFF9\CFF9;  | 
                      STA.W !CapeInteractionYPos                ;;CFFC|D05C+D05C/CFFC\CFFC; /  
                      SEP #$20                                  ;;CFFF|D05F+D05F/CFFF\CFFF; 8 bit A ; Accum (8 bit) 
                      RTS                                       ;;D001|D061+D061/D001\D001; Return 
                                                                ;;                        ;
CODE_00D062:          LDA.B !Powerup                            ;;D002|D062+D062/D002\D002;
                      CMP.B #$02                                ;;D004|D064+D064/D004\D004;
                      BNE CODE_00D081                           ;;D006|D066+D066/D006\D006;
                      BIT.B !byetudlrFrame                      ;;D008|D068+D068/D008\D008;
                      BVC Return00D0AD                          ;;D00A|D06A+D06A/D00A\D00A;
                      LDA.B !PlayerIsDucking                    ;;D00C|D06C+D06C/D00C\D00C;
                      ORA.W !PlayerRidingYoshi                  ;;D00E|D06E+D06E/D00E\D00E;
                      ORA.W !SpinJumpFlag                       ;;D011|D071+D071/D011\D011;
                      BNE Return00D0AD                          ;;D014|D074+D074/D014\D014;
                      LDA.B #$12                                ;;D016|D076+D076/D016\D016;
                      STA.W !CapeSpinTimer                      ;;D018|D078+D078/D018\D018;
                      LDA.B #!SFX_SPIN                          ;;D01B|D07B+D07B/D01B\D01B; \ Play sound effect 
                      STA.W !SPCIO3                             ;;D01D|D07D+D07D/D01D\D01D; / 
                      RTS                                       ;;D020|D080+D080/D020\D020; Return 
                                                                ;;                        ;
CODE_00D081:          CMP.B #$03                                ;;D021|D081+D081/D021\D021;
                      BNE Return00D0AD                          ;;D023|D083+D083/D023\D023;
                      LDA.B !PlayerIsDucking                    ;;D025|D085+D085/D025\D025;
                      ORA.W !PlayerRidingYoshi                  ;;D027|D087+D087/D027\D027;
                      BNE Return00D0AD                          ;;D02A|D08A+D08A/D02A\D02A;
                      BIT.B !byetudlrFrame                      ;;D02C|D08C+D08C/D02C\D02C;
                      BVS CODE_00D0AA                           ;;D02E|D08E+D08E/D02E\D02E;
                      LDA.W !SpinJumpFlag                       ;;D030|D090+D090/D030\D030;
                      BEQ Return00D0AD                          ;;D033|D093+D093/D033\D033;
                      INC.W !SpinjumpFireball                   ;;D035|D095+D095/D035\D035;
                      LDA.W !SpinjumpFireball                   ;;D038|D098+D098/D038\D038;
                      AND.B #$0F                                ;;D03B|D09B+D09B/D03B\D03B;
                      BNE Return00D0AD                          ;;D03D|D09D+D09D/D03D\D03D;
                      TAY                                       ;;D03F|D09F+D09F/D03F\D03F;
                      LDA.W !SpinjumpFireball                   ;;D040|D0A0+D0A0/D040\D040;
                      AND.B #$10                                ;;D043|D0A3+D0A3/D043\D043;
                      BEQ +                                     ;;D045|D0A5+D0A5/D045\D045;
                      INY                                       ;;D047|D0A7+D0A7/D047\D047;
                    + STY.B !PlayerDirection                    ;;D048|D0A8+D0A8/D048\D048;
CODE_00D0AA:          JSR ShootFireball                         ;;D04A|D0AA+D0AA/D04A\D04A; haha, I read this as "FEAR" at first 
Return00D0AD:         RTS                                       ;;D04D|D0AD+D0AD/D04D\D04D; Return 
                                                                ;;                        ;
                                                                ;;                        ;
                      db $7C,$00,$80,$00,$00,$06,$00,$01        ;;D04E|D0AE+D0AE/D04E\D04E;
                                                                ;;                        ;
MarioDeathAni:        STZ.B !Powerup                            ;;D056|D0B6+D0B6/D056\D056; Set powerup to 0 
                      LDA.B #$3E                                ;;D058|D0B8+D0B8/D058\D058; \  
                      STA.W !PlayerPose                         ;;D05A|D0BA+D0BA/D05A\D05A; / Set Mario image to death image 
                      LDA.B !TrueFrame                          ;;D05D|D0BD+D0BD/D05D\D05D; \  
                      AND.B #$03                                ;;D05F|D0BF+D0BF/D05F\D05F;  |Decrease "Death fall timer" every four frames 
                      BNE +                                     ;;D061|D0C1+D0C1/D061\D061;  | 
                      DEC.W !PlayerAniTimer                     ;;D063|D0C3+D0C3/D063\D063;  | 
                    + LDA.W !PlayerAniTimer                     ;;D066|D0C6+D0C6/D066\D066; \ If Death fall timer isn't #$00, 
                      BNE DeathNotDone                          ;;D069|D0C9+D0C9/D069\D069; / branch to $D108 
                      LDA.B #$80                                ;;D06B|D0CB+D0CB/D06B\D06B;
                      STA.W !OWLevelExitMode                    ;;D06D|D0CD+D0CD/D06D\D06D;
                      LDA.W !RemoveYoshiFlag                    ;;D070|D0D0+D0D0/D070\D070;
                      BNE +                                     ;;D073|D0D3+D0D3/D073\D073;
                      STZ.W !CarryYoshiThruLvls                 ;;D075|D0D5+D0D5/D075\D075; Set reserve item to 0 
                    + DEC.W !PlayerLives                        ;;D078|D0D8+D0D8/D078\D078; Decrease amount of lifes 
                      BPL DeathNotGameOver                      ;;D07B|D0DB+D0DB/D07B\D07B; If not Game Over, branch to $D0E6 
                      LDA.B #!BGM_GAMEOVER                      ;;D07D|D0DD+D0DD/D07D\D07D;
                      STA.W !SPCIO2                             ;;D07F|D0DF+D0DF/D07F\D07F; / Change music 
                      LDX.B #$14                                ;;D082|D0E2+D0E2/D082\D082; Set X (Death message) to x14 (Game Over) 
                      BRA DeathShowMessage                      ;;D084|D0E4+D0E4/D084\D084;
                                                                ;;                        ;
DeathNotGameOver:     LDY.B #$0B                                ;;D086|D0E6+D0E6/D086\D086; Set Y (game mode) to x0B (Fade to overworld) 
                      LDA.W !InGameTimerHundreds                ;;D088|D0E8+D0E8/D088\D088; \  
                      ORA.W !InGameTimerTens                    ;;D08B|D0EB+D0EB/D08B\D08B;  |If time isn't zero, 
                      ORA.W !InGameTimerOnes                    ;;D08E|D0EE+D0EE/D08E\D08E;  |branch to $D104 
                      BNE +                                     ;;D091|D0F1+D0F1/D091\D091; /  
                      LDX.B #$1D                                ;;D093|D0F3+D0F3/D093\D093; Set X (Death message) to x1D (Time Up) 
DeathShowMessage:     STX.W !DeathMessage                       ;;D095|D0F5+D0F5/D095\D095; Store X in Death message 
                      LDA.B #$C0                                ;;D098|D0F8+D0F8/D098\D098; \ Set Death message animation to xC0 
                      STA.W !GameOverAnimation                  ;;D09A|D0FA+D0FA/D09A\D09A; /(Must be divisable by 4) 
                      LDA.B #$FF                                ;;D09D|D0FD+D0FD/D09D\D09D; \ Set Death message timer to xFF 
                      STA.W !GameOverTimer                      ;;D09F|D0FF+D0FF/D09F\D09F; / 
                      LDY.B #$15                                ;;D0A2|D102+D102/D0A2\D0A2; Set Y (game mode) to x15 (Fade to Game Over) 
                    + STY.W !GameMode                           ;;D0A4|D104+D104/D0A4\D0A4; Store Y in Game Mode 
                      RTS                                       ;;D0A7|D107+D107/D0A7\D0A7; Return 
                                                                ;;                        ;
DeathNotDone:         CMP.B #$26                                ;;D0A8|D108+D108/D0A8\D0A8; \ If Death fall timer >= x26, 
                      BCS +                                     ;;D0AA|D10A+D10A/D0AA\D0AA; / return 
                      STZ.B !PlayerXSpeed                       ;;D0AC|D10C+D10C/D0AC\D0AC; Set Mario X speed to 0 
                      JSR CODE_00DC2D                           ;;D0AE|D10E+D10E/D0AE\D0AE;
                      JSR CODE_00D92E                           ;;D0B1|D111+D111/D0B1\D0B1;
                      LDA.B !TrueFrame                          ;;D0B4|D114+D114/D0B4\D0B4; \  
                      LSR A                                     ;;D0B6|D116+D116/D0B6\D0B6;  | 
                      LSR A                                     ;;D0B7|D117+D117/D0B7\D0B7;  |Flip death image every four frames 
                      AND.B #$01                                ;;D0B8|D118+D118/D0B8\D0B8;  | 
                      STA.B !PlayerDirection                    ;;D0BA|D11A+D11A/D0BA\D0BA; /  
                    + RTS                                       ;;D0BC|D11C+D11C/D0BC\D0BC;
                                                                ;;                        ;
                                                                ;;                        ;
GrowingAniImgs:       db $00,$3D,$00,$3D,$00,$3D,$46,$3D        ;;D0BD|D11D+D11D/D0BD\D0BD;
                      db $46,$3D,$46,$3D                        ;;D0C5|D125+D125/D0C5\D0C5;
                                                                ;;                        ;
PowerDownAni:         LDA.W !PlayerAniTimer                     ;;D0C9|D129+D129/D0C9\D0C9;
                      BEQ CODE_00D140                           ;;D0CC|D12C+D12C/D0CC\D0CC;
                      LSR A                                     ;;D0CE|D12E+D12E/D0CE\D0CE;
                      LSR A                                     ;;D0CF|D12F+D12F/D0CF\D0CF;
CODE_00D130:          TAY                                       ;;D0D0|D130+D130/D0D0\D0D0;
                      LDA.W GrowingAniImgs,Y                    ;;D0D1|D131+D131/D0D1\D0D1; \ Set Mario's image 
                      STA.W !PlayerPose                         ;;D0D4|D134+D134/D0D4\D0D4; / 
CODE_00D137:          LDA.W !PlayerAniTimer                     ;;D0D7|D137+D137/D0D7\D0D7;
                      BEQ +                                     ;;D0DA|D13A+D13A/D0DA\D0DA;
                      DEC.W !PlayerAniTimer                     ;;D0DC|D13C+D13C/D0DC\D0DC;
                    + RTS                                       ;;D0DF|D13F+D13F/D0DF\D0DF; Return 
                                                                ;;                        ;
CODE_00D140:          LDA.B #$7F                                ;;D0E0|D140+D140/D0E0\D0E0;
                      STA.W !IFrameTimer                        ;;D0E2|D142+D142/D0E2\D0E2;
                      BRA CODE_00D158                           ;;D0E5|D145+D145/D0E5\D0E5;
                                                                ;;                        ;
MushroomAni:          LDA.W !PlayerAniTimer                     ;;D0E7|D147+D147/D0E7\D0E7;
                      BEQ CODE_00D156                           ;;D0EA|D14A+D14A/D0EA\D0EA;
                      LSR A                                     ;;D0EC|D14C+D14C/D0EC\D0EC;
                      LSR A                                     ;;D0ED|D14D+D14D/D0ED\D0ED;
                      EOR.B #$FF                                ;;D0EE|D14E+D14E/D0EE\D0EE;
                      INC A                                     ;;D0F0|D150+D150/D0F0\D0F0;
                      CLC                                       ;;D0F1|D151+D151/D0F1\D0F1;
                      ADC.B #$0B                                ;;D0F2|D152+D152/D0F2\D0F2;
                      BRA CODE_00D130                           ;;D0F4|D154+D154/D0F4\D0F4;
                                                                ;;                        ;
CODE_00D156:          INC.B !Powerup                            ;;D0F6|D156+D156/D0F6\D0F6;
CODE_00D158:          LDA.B #$00                                ;;D0F8|D158+D158/D0F8\D0F8;
                      STA.B !PlayerAnimation                    ;;D0FA|D15A+D15A/D0FA\D0FA;
                      STZ.B !SpriteLock                         ;;D0FC|D15C+D15C/D0FC\D0FC;
                    - RTS                                       ;;D0FE|D15E+D15E/D0FE\D0FE; Return 
                                                                ;;                        ;
CapeAni:              LDA.B #$7F                                ;;D0FF|D15F+D15F/D0FF\D0FF;
                      STA.B !PlayerHiddenTiles                  ;;D101|D161+D161/D101\D101;
                      DEC.W !PlayerAniTimer                     ;;D103|D163+D163/D103\D103;
                      BNE -                                     ;;D106|D166+D166/D106\D106;
                      LDA.B !Powerup                            ;;D108|D168+D168/D108\D108;
                      LSR A                                     ;;D10A|D16A+D16A/D10A\D10A;
                      BEQ CODE_00D140                           ;;D10B|D16B+D16B/D10B\D10B;
                      BNE CODE_00D158                           ;;D10D|D16D+D16D/D10D\D10D;
FlowerAni:            LDA.W !PlayerSlopePose                    ;;D10F|D16F+D16F/D10F\D10F;
                      AND.B #$80                                ;;D112|D172+D172/D112\D112;
                      ORA.W !FlightPhase                        ;;D114|D174+D174/D114\D114;
                      BEQ +                                     ;;D117|D177+D177/D117\D117;
                      STZ.W !FlightPhase                        ;;D119|D179+D179/D119\D119;
                      LDA.W !PlayerSlopePose                    ;;D11C|D17C+D17C/D11C\D11C;
                      AND.B #$7F                                ;;D11F|D17F+D17F/D11F\D11F;
                      STA.W !PlayerSlopePose                    ;;D121|D181+D181/D121\D121;
                      STZ.W !PlayerPose                         ;;D124|D184+D184/D124\D124;
                    + DEC.W !CyclePaletteTimer                  ;;D127|D187+D187/D127\D127;
                      BEQ CODE_00D158                           ;;D12A|D18A+D18A/D12A\D12A;
                      RTS                                       ;;D12C|D18C+D18C/D12C\D12C; Return 
                                                                ;;                        ;
                                                                ;;                        ;
PipeSpeed:            db $F8,$08                                ;;D12D|D18D+D18D/D12D\D12D; horizontal pipe X speed
                      db $00,$00                                ;;D12F|D18F+D18F/D12F\D12F; horizontal pipe Y speed, vertical pipe X speed
                   if ver_is_ntsc(!_VER)              ;\   IF   ;;++++++++++++++++++++++++; J, U, & SS
                      db $F0,$10                                ;;D131|D191+D191          ; vertical pipe Y speed
                   else                               ;<  ELSE  ;;------------------------; E0 & E1
                      db $F2,$0E                                ;;              /D131\D131; vertical pipe Y speed
                   endif                              ;/ ENDIF  ;;++++++++++++++++++++++++;
                                                                ;;                        ;
DATA_00D193:          db $00,$63,$1C,$00                        ;;D133|D193+D193/D133\D133;
                                                                ;;                        ;
DoorPipeAni:          JSR NoButtons                             ;;D137|D197+D197/D137\D137;
                      STZ.W !PlayerOverworldPose                ;;D13A|D19A+D19A/D13A\D13A;
                      JSL CODE_00CEB1                           ;;D13D|D19D+D19D/D13D\D13D;
                      JSL CODE_00CFBC                           ;;D141|D1A1+D1A1/D141\D141;
                      JSR CODE_00D1F4                           ;;D145|D1A5+D1A5/D145\D145;
                      LDA.W !PlayerRidingYoshi                  ;;D148|D1A8+D1A8/D148\D148;
                      BEQ +                                     ;;D14B|D1AB+D1AB/D14B\D14B;
                      LDA.B #$29                                ;;D14D|D1AD+D1AD/D14D\D14D; \ Mario's image = Entering horizontal pipe on Yoshi 
                      STA.W !PlayerPose                         ;;D14F|D1AF+D1AF/D14F\D14F; / 
                    + REP #$20                                  ;;D152|D1B2+D1B2/D152\D152; Accum (16 bit) 
                      LDA.B !PlayerYPosNext                     ;;D154|D1B4+D1B4/D154\D154;
                      SEC                                       ;;D156|D1B6+D1B6/D156\D156;
                      SBC.W #$0008                              ;;D157|D1B7+D1B7/D157\D157;
                      AND.W #$FFF0                              ;;D15A|D1BA+D1BA/D15A\D15A;
                      ORA.W #$000E                              ;;D15D|D1BD+D1BD/D15D\D15D;
                      STA.B !PlayerYPosNext                     ;;D160|D1C0+D1C0/D160\D160;
                      SEP #$20                                  ;;D162|D1C2+D1C2/D162\D162; Accum (8 bit) 
                      LDA.B !PlayerPipeAction                   ;;D164|D1C4+D1C4/D164\D164;
                      LSR A                                     ;;D166|D1C6+D1C6/D166\D166;
                      TAY                                       ;;D167|D1C7+D1C7/D167\D167;
                      INY                                       ;;D168|D1C8+D1C8/D168\D168;
                      LDA.W DATA_00D193-1,Y                     ;;D169|D1C9+D1C9/D169\D169;
                      LDX.W !IsCarryingItem                     ;;D16C|D1CC+D1CC/D16C\D16C;
                      BEQ +                                     ;;D16F|D1CF+D1CF/D16F\D16F;
                      EOR.B #$1C                                ;;D171|D1D1+D1D1/D171\D171;
                      DEC.W !FaceScreenTimer                    ;;D173|D1D3+D1D3/D173\D173;
                      BPL +                                     ;;D176|D1D6+D1D6/D176\D176;
                      INC.W !FaceScreenTimer                    ;;D178|D1D8+D1D8/D178\D178;
                    + LDX.B !PipeTimer                          ;;D17B|D1DB+D1DB/D17B\D17B;
                      CPX.B #$1D                                ;;D17D|D1DD+D1DD/D17D\D17D;
                      BCS CODE_00D1F0                           ;;D17F|D1DF+D1DF/D17F\D17F;
                      CPY.B #$03                                ;;D181|D1E1+D1E1/D181\D181;
                      BCC +                                     ;;D183|D1E3+D1E3/D183\D183;
                      REP #$20                                  ;;D185|D1E5+D1E5/D185\D185; Accum (16 bit) 
                      INC.B !PlayerYPosNext                     ;;D187|D1E7+D1E7/D187\D187;
                      INC.B !PlayerYPosNext                     ;;D189|D1E9+D1E9/D189\D189;
                      SEP #$20                                  ;;D18B|D1EB+D1EB/D18B\D18B; Accum (8 bit) 
                    + LDA.W DATA_00D193,Y                       ;;D18D|D1ED+D1ED/D18D\D18D;
CODE_00D1F0:          STA.B !PlayerHiddenTiles                  ;;D190|D1F0+D1F0/D190\D190;
                      BRA CODE_00D22D                           ;;D192|D1F2+D1F2/D192\D192;
                                                                ;;                        ;
CODE_00D1F4:          LDA.W !CapeAniTimer                       ;;D194|D1F4+D1F4/D194\D194;
                      BEQ +                                     ;;D197|D1F7+D1F7/D197\D197;
                      DEC.W !CapeAniTimer                       ;;D199|D1F9+D1F9/D199\D199;
                    + JMP CODE_00D137                           ;;D19C|D1FC+D1FC/D19C\D19C;
                                                                ;;                        ;
                                                                ;;                        ;
PipeCntrBoundryX:     db $0A,$06                                ;;D19F|D1FF+D1FF/D19F\D19F;
                                                                ;;                        ;
PipeCntringSpeed:     db $FF,$01                                ;;D1A1|D201+D201/D1A1\D1A1;
                                                                ;;                        ;
VertPipeAni:          JSR NoButtons                             ;;D1A3|D203+D203/D1A3\D1A3;
                      STZ.W !PlayerCapePose                     ;;D1A6|D206+D206/D1A6\D1A6;
                      LDA.B #$0F                                ;;D1A9|D209+D209/D1A9\D1A9;
                      LDY.W !PlayerRidingYoshi                  ;;D1AB|D20B+D20B/D1AB\D1AB;
                      BEQ CODE_00D22A                           ;;D1AE|D20E+D20E/D1AE\D1AE;
                      LDX.B #$00                                ;;D1B0|D210+D210/D1B0\D1B0;
                      LDY.B !PlayerDirection                    ;;D1B2|D212+D212/D1B2\D1B2; \ 
                      LDA.B !PlayerXPosNext                     ;;D1B4|D214+D214/D1B4\D1B4;  | If not relativly centered on the pipe... 
                      AND.B #$0F                                ;;D1B6|D216+D216/D1B6\D1B6;  | 
                      CMP.W PipeCntrBoundryX,Y                  ;;D1B8|D218+D218/D1B8\D1B8;  | 
                      BEQ CODE_00D228                           ;;D1BB|D21B+D21B/D1BB\D1BB;  | 
                      BPL +                                     ;;D1BD|D21D+D21D/D1BD\D1BD;  | 
                      INX                                       ;;D1BF|D21F+D21F/D1BF\D1BF;  | 
                    + LDA.B !PlayerXPosNext                     ;;D1C0|D220+D220/D1C0\D1C0;  | ...adjust Mario's X postion 
                      CLC                                       ;;D1C2|D222+D222/D1C2\D1C2;  | 
                      ADC.W PipeCntringSpeed,X                  ;;D1C3|D223+D223/D1C3\D1C3;  | 
                      STA.B !PlayerXPosNext                     ;;D1C6|D226+D226/D1C6\D1C6; / 
CODE_00D228:          LDA.B #$21                                ;;D1C8|D228+D228/D1C8\D1C8; \ Mario's image = going down pipe 
CODE_00D22A:          STA.W !PlayerPose                         ;;D1CA|D22A+D22A/D1CA\D1CA; / 
CODE_00D22D:          LDA.B #$40                                ;;D1CD|D22D+D22D/D1CD\D1CD; \ Set holding X/Y on controller 
                      STA.B !byetudlrHold                       ;;D1CF|D22F+D22F/D1CF\D1CF; / 
                      LDA.B #$02                                ;;D1D1|D231+D231/D1D1\D1D1; \ Set behind scenery flag 
                      STA.W !PlayerBehindNet                    ;;D1D3|D233+D233/D1D3\D1D3; / 
                      LDA.B !PlayerPipeAction                   ;;D1D6|D236+D236/D1D6\D1D6;
                      CMP.B #$04                                ;;D1D8|D238+D238/D1D8\D1D8;
                      LDY.B !PipeTimer                          ;;D1DA|D23A+D23A/D1DA\D1DA;
                      BEQ CODE_00D268                           ;;D1DC|D23C+D23C/D1DC\D1DC;
                      AND.B #$03                                ;;D1DE|D23E+D23E/D1DE\D1DE;
                      TAY                                       ;;D1E0|D240+D240/D1E0\D1E0;
                      DEC.B !PipeTimer                          ;;D1E1|D241+D241/D1E1\D1E1;
                      BNE +                                     ;;D1E3|D243+D243/D1E3\D1E3;
                      BCS +                                     ;;D1E5|D245+D245/D1E5\D1E5;
                      LDA.B #$7F                                ;;D1E7|D247+D247/D1E7\D1E7;
                      STA.B !PlayerHiddenTiles                  ;;D1E9|D249+D249/D1E9\D1E9;
                      INC.W !DrawYoshiInPipe                    ;;D1EB|D24B+D24B/D1EB\D1EB;
                    + LDA.B !PlayerXSpeed                       ;;D1EE|D24E+D24E/D1EE\D1EE; \ If Mario has no speed... 
                      ORA.B !PlayerYSpeed                       ;;D1F0|D250+D250/D1F0\D1F0;  | 
                      BNE +                                     ;;D1F2|D252+D252/D1F2\D1F2;  | 
                      LDA.B #!SFX_PIPE                          ;;D1F4|D254+D254/D1F4\D1F4;  | ...play sound effect 
                      STA.W !SPCIO0                             ;;D1F6|D256+D256/D1F6\D1F6; / 
                    + LDA.W PipeSpeed,Y                         ;;D1F9|D259+D259/D1F9\D1F9; \ Set X speed 
                      STA.B !PlayerXSpeed                       ;;D1FC|D25C+D25C/D1FC\D1FC; / 
                      LDA.W PipeSpeed+2,Y                       ;;D1FE|D25E+D25E/D1FE\D1FE; \ Set Y speed 
                      STA.B !PlayerYSpeed                       ;;D201|D261+D261/D201\D201; / 
                      STZ.B !PlayerInAir                        ;;D203|D263+D263/D203\D203; Mario flying = false 
                      JMP CODE_00DC2D                           ;;D205|D265+D265/D205\D205;
                                                                ;;                        ;
CODE_00D268:          BCC CODE_00D273                           ;;D208|D268+D268/D208\D208;
CODE_00D26A:          STZ.W !PlayerBehindNet                    ;;D20A|D26A+D26A/D20A\D20A; \ In new level, reset values 
                      STZ.W !YoshiInPipeSetting                 ;;D20D|D26D+D26D/D20D\D20D; / 
                      JMP CODE_00D158                           ;;D210|D270+D270/D210\D210;
                                                                ;;                        ;
CODE_00D273:          INC.W !SublevelCount                      ;;D213|D273+D273/D213\D213;
                      LDA.B #$0F                                ;;D216|D276+D276/D216\D216;
                      STA.W !GameMode                           ;;D218|D278+D278/D218\D218;
                      RTS                                       ;;D21B|D27B+D27B/D21B\D21B; Return 
                                                                ;;                        ;
                      LDA.B !PlayerYPosNext                     ;;D21C|D27C+D27C/D21C\D21C; \ Unreachable 
                      SEC                                       ;;D21E|D27E+D27E/D21E\D21E;  | 
                      SBC.B !PlayerYPosNow                      ;;D21F|D27F+D27F/D21F\D21F;  | 
                      CLC                                       ;;D221|D281+D281/D221\D221;  | 
                      ADC.B !PipeTimer                          ;;D222|D282+D282/D222\D222;  | 
                      STA.B !PipeTimer                          ;;D224|D284+D284/D224\D224;  | 
                      RTS                                       ;;D226|D286+D286/D226\D226; / Return 
                                                                ;;                        ;
PipeCannonAni:        JSR NoButtons                             ;;D227|D287+D287/D227\D227;
                      LDA.B #$02                                ;;D22A|D28A+D28A/D22A\D22A;
                      STA.W !PlayerBehindNet                    ;;D22C|D28C+D28C/D22C\D22C;
                      LDA.B #$0C                                ;;D22F|D28F+D28F/D22F\D22F;
                      STA.B !PlayerInAir                        ;;D231|D291+D291/D231\D231;
                      JSR CODE_00CD8B                           ;;D233|D293+D293/D233\D233;
                      DEC.B !PipeTimer                          ;;D236|D296+D296/D236\D236;
                      BNE +                                     ;;D238|D298+D298/D238\D238;
                      JMP CODE_00D26A                           ;;D23A|D29A+D29A/D23A\D23A;
                                                                ;;                        ;
                    + LDA.B !PipeTimer                          ;;D23D|D29D+D29D/D23D\D23D;
                      CMP.B #$18                                ;;D23F|D29F+D29F/D23F\D23F;
                      BCC CODE_00D2AA                           ;;D241|D2A1+D2A1/D241\D241;
                      BNE +                                     ;;D243|D2A3+D2A3/D243\D243;
                      LDA.B #!SFX_KAPOW                         ;;D245|D2A5+D2A5/D245\D245; \ Play sound effect 
                      STA.W !SPCIO3                             ;;D247|D2A7+D2A7/D247\D247; / 
CODE_00D2AA:          STZ.W !PlayerBehindNet                    ;;D24A|D2AA+D2AA/D24A\D24A;
                      STZ.W !YoshiInPipeSetting                 ;;D24D|D2AD+D2AD/D24D\D24D;
                      STZ.B !SpriteLock                         ;;D250|D2B0+D2B0/D250\D250; Set sprites not locked 
                    + LDA.B #$40                                ;;D252|D2B2+D2B2/D252\D252; \ X speed = #$40 
                      STA.B !PlayerXSpeed                       ;;D254|D2B4+D2B4/D254\D254; / 
                      LDA.B #$C0                                ;;D256|D2B6+D2B6/D256\D256; \ Y speed = #$C0 
                      STA.B !PlayerYSpeed                       ;;D258|D2B8+D2B8/D258\D258; / 
                      JMP CODE_00DC2D                           ;;D25A|D2BA+D2BA/D25A\D25A;
                                                                ;;                        ;
                                                                ;;                        ;
DATA_00D2BD:          db $B0,$B6,$AE,$B4,$AB,$B2,$A9,$B0        ;;D25D|D2BD+D2BD/D25D\D25D;
                      db $A6,$AE,$A4,$AB,$A1,$A9,$9F,$A6        ;;D265|D2C5+D2C5/D265\D265;
                                                                ;;                        ;
                   if ver_is_ntsc(!_VER)              ;\   IF   ;;++++++++++++++++++++++++; J, U, & SS
DATA_00D2CD:          dw $FF00,$0100,$FF00,$0100                ;;D26D|D2CD+D2CD          ;
                      dw $FF00,$0100,$FE80,$00C0                ;;D275|D2D5+D2D5          ;
                      dw $FF40,$0180,$FE00,$0040                ;;D27D|D2DD+D2DD          ;
                      dw $FFC0,$0200,$FE00,$0040                ;;D285|D2E5+D2E5          ;
                      dw $FE00,$0040,$FFC0,$0200                ;;D28D|D2ED+D2ED          ;
                      dw $FFC0,$0200,$FC00,$FF00                ;;D295|D2F5+D2F5          ;
                      dw $0100,$0400,$FF00,$0100                ;;D29D|D2FD+D2FD          ;
                      dw $FF00,$0100                            ;;D2A5|D305+D305          ;
                                                                ;;                        ;
DATA_00D309:          dw $FFE0,$0020,$FFE0,$0020                ;;D2A9|D309+D309          ;
                      dw $FFE0,$0020,$FFC0,$0020                ;;D2B1|D311+D311          ;
                      dw $FFE0,$0040,$FF80,$0020                ;;D2B9|D319+D319          ;
                      dw $FFE0,$0080,$FF80,$0020                ;;D2C1|D321+D321          ;
                      dw $FF80,$0020,$FFE0,$0080                ;;D2C9|D329+D329          ;
                      dw $FFE0,$0080,$FE00,$FF80                ;;D2D1|D331+D331          ;
                      dw $0080,$0200,$FF00,$0100                ;;D2D9|D339+D339          ;
                      dw $FF00,$0100                            ;;D2E1|D341+D341          ;
                                                                ;;                        ;
MarioAccel_:          dw $FE80,$FE80,$0180,$0180                ;;D2E5|D345+D345          ;
                      dw $FE80,$FE80,$0180,$0180                ;;D2ED|D34D+D34D          ;
                      dw $FE80,$FE80,$0180,$0180                ;;D2F5|D355+D355          ;
                      dw $FE80,$FE80,$0140,$0140                ;;D2FD|D35D+D35D          ;
                      dw $FEC0,$FEC0,$0180,$0180                ;;D305|D365+D365          ;
                      dw $FE80,$FE80,$0100,$0100                ;;D30D|D36D+D36D          ;
                      dw $FF00,$FF00,$0180,$0180                ;;D315|D375+D375          ;
                      dw $FE80,$FE80,$0100,$0100                ;;D31D|D37D+D37D          ;
                      dw $FE80,$FE80,$0100,$0100                ;;D325|D385+D385          ;
                      dw $FF00,$FF00,$0180,$0180                ;;D32D|D38D+D38D          ;
                      dw $FF00,$FF00,$0180,$0180                ;;D335|D395+D395          ;
                      dw $FC00,$FC00,$FD00,$FD00                ;;D33D|D39D+D39D          ;
                      dw $0300,$0300,$0400,$0400                ;;D345|D3A5+D3A5          ;
                      dw $FC00,$FC00,$0600,$0600                ;;D34D|D3AD+D3AD          ;
                      dw $FA00,$FA00,$0400,$0400                ;;D355|D3B5+D3B5          ;
                      dw $FF80,$0080,$FF00,$0100                ;;D35D|D3BD+D3BD          ;
                      dw $FE80,$0180,$FE80,$FE80                ;;D365|D3C5+D3C5          ;
                      dw $0180,$0180,$FE80,$0280                ;;D36D|D3CD+D3CD          ;
                      dw $FD80,$FB00,$0280,$0500                ;;D375|D3D5+D3D5          ;
                      dw $FD80,$FB00,$0280,$0500                ;;D37D|D3DD+D3DD          ;
                      dw $FD80,$FB00,$0280,$0500                ;;D385|D3E5+D3E5          ;
                      dw $FD40,$FA80,$0240,$0480                ;;D38D|D3ED+D3ED          ;
                      dw $FDC0,$FB80,$02C0,$0580                ;;D395|D3F5+D3F5          ;
                      dw $FD00,$FA00,$0200,$0400                ;;D39D|D3FD+D3FD          ;
                      dw $FE00,$FC00,$0300,$0600                ;;D3A5|D405+D405          ;
                      dw $FD00,$FA00,$0200,$0400                ;;D3AD|D40D+D40D          ;
                      dw $FD00,$FA00,$0200,$0400                ;;D3B5|D415+D415          ;
                      dw $FE00,$FC00,$0300,$0600                ;;D3BD|D41D+D41D          ;
                      dw $FE00,$FC00,$0300,$0600                ;;D3C5|D425+D425          ;
                      dw $FD00,$FA00,$FD00,$FA00                ;;D3CD|D42D+D42D          ;
                      dw $0300,$0600,$0300,$0600                ;;D3D5|D435+D435          ;
                                                                ;;                        ;
DATA_00D43D:          dw $FF80,$FE80,$0080,$0180                ;;D3DD|D43D+D43D          ;
                      dw $FF80,$FE80,$0080,$0180                ;;D3E5|D445+D445          ;
                      dw $FF80,$FE80,$0080,$0180                ;;D3ED|D44D+D44D          ;
                      dw $FE80,$FE80,$0080,$0140                ;;D3F5|D455+D455          ;
                      dw $FF80,$FEC0,$0180,$0180                ;;D3FD|D45D+D45D          ;
                      dw $FE80,$FE80,$0080,$0100                ;;D405|D465+D465          ;
                      dw $FF80,$FF00,$0180,$0180                ;;D40D|D46D+D46D          ;
                      dw $FE80,$FE80,$0080,$0100                ;;D415|D475+D475          ;
                      dw $FE80,$FE80,$0080,$0100                ;;D41D|D47D+D47D          ;
                      dw $FF80,$FF00,$0180,$0180                ;;D425|D485+D485          ;
                      dw $FF80,$FF00,$0180,$0180                ;;D42D|D48D+D48D          ;
                      dw $FC00,$FC00,$FE00,$FD00                ;;D435|D495+D495          ;
                      dw $0300,$0300,$0400,$0400                ;;D43D|D49D+D49D          ;
                      dw $FC00,$FC00,$0080,$0080                ;;D445|D4A5+D4A5          ;
                      dw $FF80,$FF80,$0400,$0400                ;;D44D|D4AD+D4AD          ;
                      dw $FF80,$0080,$FF00,$0100                ;;D455|D4B5+D4B5          ;
                      dw $FE80,$0180,$FE80,$FE80                ;;D45D|D4BD+D4BD          ;
                      dw $0180,$0180,$FE80,$0280                ;;D465|D4C5+D4C5          ;
                      dw $FFC0,$FD80,$0040,$0280                ;;D46D|D4CD+D4CD          ;
                      dw $FFC0,$FD80,$0040,$0280                ;;D475|D4D5+D4D5          ;
                      dw $FFC0,$FD80,$0040,$0280                ;;D47D|D4DD+D4DD          ;
                      dw $FF80,$FD40,$0040,$0240                ;;D485|D4E5+D4E5          ;
                      dw $FFC0,$FDC0,$0080,$02C0                ;;D48D|D4ED+D4ED          ;
                      dw $FD00,$FD00,$0040,$0200                ;;D495|D4F5+D4F5          ;
                      dw $FFC0,$FE00,$0300,$0300                ;;D49D|D4FD+D4FD          ;
                      dw $FD00,$FD00,$0040,$0200                ;;D4A5|D505+D505          ;
                      dw $FD00,$FD00,$0040,$0200                ;;D4AD|D50D+D50D          ;
                      dw $FFC0,$FE00,$0300,$0300                ;;D4B5|D515+D515          ;
                      dw $FFC0,$FE00,$0300,$0300                ;;D4BD|D51D+D51D          ;
                      dw $FD00,$FD00,$FD00,$FD00                ;;D4C5|D525+D525          ;
                      dw $0300,$0300,$0300,$0300                ;;D4CD|D52D+D52D          ;
                                                                ;;                        ;
DATA_00D535:          db $EC,$14,$DC,$24,$DC,$24,$D0,$30        ;;D4D5|D535+D535          ;
                      db $EC,$14,$DC,$24,$DC,$24,$D0,$30        ;;D4DD|D53D+D53D          ;
                      db $EC,$14,$DC,$24,$DC,$24,$D0,$30        ;;D4E5|D545+D545          ;
                      db $E8,$12,$DC,$20,$DC,$20,$D0,$2C        ;;D4ED|D54D+D54D          ;
                      db $EE,$18,$E0,$24,$E0,$24,$D4,$30        ;;D4F5|D555+D555          ;
                      db $DC,$10,$DC,$1C,$DC,$1C,$D0,$28        ;;D4FD|D55D+D55D          ;
                      db $F0,$24,$E4,$24,$E4,$24,$D8,$30        ;;D505|D565+D565          ;
                      db $DC,$10,$DC,$1C,$DC,$1C,$D0,$28        ;;D50D|D56D+D56D          ;
                      db $DC,$10,$DC,$1C,$DC,$1C,$D0,$28        ;;D515|D575+D575          ;
                      db $F0,$24,$E4,$24,$E4,$24,$D8,$30        ;;D51D|D57D+D57D          ;
                      db $F0,$24,$E4,$24,$E4,$24,$D8,$30        ;;D525|D585+D585          ;
                      db $DC,$F0,$DC,$F8,$DC,$F8,$D0,$FC        ;;D52D|D58D+D58D          ;
                      db $10,$24,$08,$24,$08,$24,$04,$30        ;;D535|D595+D595          ;
                      db $D0,$08,$D0,$08,$D0,$08,$D0,$08        ;;D53D|D59D+D59D          ;
                      db $F8,$30,$F8,$30,$F8,$30,$F8,$30        ;;D545|D5A5+D5A5          ;
                      db $F8,$08,$F0,$10,$F4,$04,$E8,$08        ;;D54D|D5AD+D5AD          ;
                      db $F0,$10,$E0,$20,$EC,$0C,$D8,$18        ;;D555|D5B5+D5B5          ;
                      db $D8,$28,$D4,$2C,$D0,$30,$D0,$D0        ;;D55D|D5BD+D5BD          ;
                      db $30,$30,$E0,$20                        ;;D565|D5C5+D5C5          ;
                                                                ;;                        ;
DATA_00D5C9:          db $00,$00,$00,$00,$00,$00,$00,$00        ;;D569|D5C9+D5C9          ;
                      db $00,$00,$00,$F0,$00,$10,$00,$00        ;;D571|D5D1+D5D1          ;
                      db $00,$00,$00,$00,$00,$00,$00,$E0        ;;D579|D5D9+D5D9          ;
                      db $00,$20,$00,$00,$00,$00,$00,$F0        ;;D581|D5E1+D5E1          ;
                      db $00,$F8                                ;;D589|D5E9+D5E9          ;
                   else                               ;<  ELSE  ;;------------------------; E0 & E1
DATA_00D2CD:          dw $FEC0,$0140,$FEC0,$0140                ;;              /D26D\D26D;
                      dw $FEC0,$0140,$FE20,$00F0                ;;              /D275\D275;
                      dw $FF10,$01E0,$FD80,$0050                ;;              /D27D\D27D;
                      dw $FFB0,$0280,$FD80,$0050                ;;              /D285\D285;
                      dw $FD80,$0050,$FFB0,$0280                ;;              /D28D\D28D;
                      dw $FFB0,$0280,$FB00,$FEC0                ;;              /D295\D295;
                      dw $0140,$0500,$FEC0,$0140                ;;              /D29D\D29D;
                      dw $FEC0,$0140                            ;;              /D2A5\D2A5;
                                                                ;;                        ;
DATA_00D309:          dw $FFD8,$0028,$FFD8,$0028                ;;              /D2A9\D2A9;
                      dw $FFD8,$0028,$FFB0,$0028                ;;              /D2B1\D2B1;
                      dw $FFD8,$0050,$FF60,$0028                ;;              /D2B9\D2B9;
                      dw $FFD8,$00A0,$FF60,$0028                ;;              /D2C1\D2C1;
                      dw $FF60,$0028,$FFD8,$00A0                ;;              /D2C9\D2C9;
                      dw $FFD8,$00A0,$FD80,$FF60                ;;              /D2D1\D2D1;
                      dw $00A0,$0280,$FEC0,$0140                ;;              /D2D9\D2D9;
                      dw $FEC0,$0140                            ;;              /D2E1\D2E1;
                                                                ;;                        ;
MarioAccel_:          dw $FE20,$FE20,$01E0,$01E0                ;;              /D2E5\D2E5;
                      dw $FE20,$FE20,$01E0,$01E0                ;;              /D2ED\D2ED;
                      dw $FE20,$FE20,$01E0,$01E0                ;;              /D2F5\D2F5;
                      dw $FE20,$FE20,$0190,$0190                ;;              /D2FD\D2FD;
                      dw $FE70,$FE70,$01E0,$01E0                ;;              /D305\D305;
                      dw $FE20,$FE20,$0140,$0140                ;;              /D30D\D30D;
                      dw $FEC0,$FEC0,$01E0,$01E0                ;;              /D315\D315;
                      dw $FE20,$FE20,$0140,$0140                ;;              /D31D\D31D;
                      dw $FE20,$FE20,$0140,$0140                ;;              /D325\D325;
                      dw $FEC0,$FEC0,$01E0,$01E0                ;;              /D32D\D32D;
                      dw $FEC0,$FEC0,$01E0,$01E0                ;;              /D335\D335;
                      dw $FB00,$FB00,$FC40,$FC40                ;;              /D33D\D33D;
                      dw $03C0,$03C0,$0500,$0500                ;;              /D345\D345;
                      dw $FB00,$FB00,$0780,$0780                ;;              /D34D\D34D;
                      dw $F880,$F880,$0500,$0500                ;;              /D355\D355;
                      dw $FF60,$00A0,$FEC0,$0140                ;;              /D35D\D35D;
                      dw $FE20,$01E0,$FE20,$FE20                ;;              /D365\D365;
                      dw $01E0,$01E0,$FE20,$0320                ;;              /D36D\D36D;
                      dw $FCE0,$F9C0,$0320,$0640                ;;              /D375\D375;
                      dw $FCE0,$F9C0,$0320,$0640                ;;              /D37D\D37D;
                      dw $FCE0,$F9C0,$0320,$0640                ;;              /D385\D385;
                      dw $FC90,$F920,$02D0,$05A0                ;;              /D38D\D38D;
                      dw $FDC0,$F920,$0370,$06E0                ;;              /D395\D395;
                      dw $FC40,$F880,$0280,$0500                ;;              /D39D\D39D;
                      dw $FD80,$FB00,$03C0,$0780                ;;              /D3A5\D3A5;
                      dw $FC40,$F880,$0280,$0500                ;;              /D3AD\D3AD;
                      dw $FC40,$F880,$0280,$0500                ;;              /D3B5\D3B5;
                      dw $FD80,$FB00,$03C0,$0780                ;;              /D3BD\D3BD;
                      dw $FD80,$FB00,$03C0,$0780                ;;              /D3C5\D3C5;
                      dw $FC40,$F880,$FC40,$F880                ;;              /D3CD\D3CD;
                      dw $03C0,$0780,$03C0,$0780                ;;              /D3D5\D3D5;
                                                                ;;                        ;
DATA_00D43D:          dw $FF60,$FE20,$00A0,$01E0                ;;              /D3DD\D3DD;
                      dw $FF60,$FE20,$00A0,$01E0                ;;              /D3E5\D3E5;
                      dw $FF60,$FE20,$00A0,$01E0                ;;              /D3ED\D3ED;
                      dw $FE20,$FE20,$00A0,$0190                ;;              /D3F5\D3F5;
                      dw $FF60,$FE70,$01E0,$01E0                ;;              /D3FD\D3FD;
                      dw $FE20,$FE20,$00A0,$0140                ;;              /D405\D405;
                      dw $FF60,$FEC0,$01E0,$01E0                ;;              /D40D\D40D;
                      dw $FE20,$FE20,$00A0,$0140                ;;              /D415\D415;
                      dw $FE20,$FE20,$00A0,$0140                ;;              /D41D\D41D;
                      dw $FF60,$FEC0,$01E0,$01E0                ;;              /D425\D425;
                      dw $FF60,$FEC0,$01E0,$01E0                ;;              /D42D\D42D;
                      dw $FB00,$FB00,$FD80,$FC40                ;;              /D435\D435;
                      dw $03C0,$03C0,$0500,$0500                ;;              /D43D\D43D;
                      dw $FB00,$FB00,$00A0,$00A0                ;;              /D445\D445;
                      dw $FF60,$FF60,$0500,$0500                ;;              /D44D\D44D;
                      dw $FF60,$00A0,$FEC0,$0140                ;;              /D455\D455;
                      dw $FE20,$01E0,$FE20,$FE20                ;;              /D45D\D45D;
                      dw $01E0,$01E0,$FE20,$0320                ;;              /D465\D465;
                      dw $FFB0,$FCE0,$0050,$0320                ;;              /D46D\D46D;
                      dw $FFB0,$FCE0,$0050,$0320                ;;              /D475\D475;
                      dw $FFB0,$FCE0,$0050,$0320                ;;              /D47D\D47D;
                      dw $FF60,$FC90,$0050,$02D0                ;;              /D485\D485;
                      dw $FFB0,$FD30,$00A0,$0370                ;;              /D48D\D48D;
                      dw $FC40,$FC40,$0050,$0280                ;;              /D495\D495;
                      dw $FFB0,$FD80,$03C0,$03C0                ;;              /D49D\D49D;
                      dw $FC40,$FC40,$0050,$0280                ;;              /D4A5\D4A5;
                      dw $FC40,$FC40,$0050,$0280                ;;              /D4AD\D4AD;
                      dw $FFB0,$FD80,$03C0,$03C0                ;;              /D4B5\D4B5;
                      dw $FFB0,$FD80,$03C0,$03C0                ;;              /D4BD\D4BD;
                      dw $FC40,$FC40,$FC40,$FC40                ;;              /D4C5\D4C5;
                      dw $03C0,$03C0,$03C0,$03C0                ;;              /D4CD\D4CD;
                                                                ;;                        ;
DATA_00D535:          db $E7,$19,$D3,$2D,$D3,$2D,$C4,$3C        ;;              /D4D5\D4D5;
                      db $E7,$19,$D3,$2D,$D3,$2D,$C4,$3C        ;;              /D4DD\D4DD;
                      db $E7,$19,$D3,$2D,$D3,$2D,$C4,$3C        ;;              /D4E5\D4E5;
                      db $E2,$16,$D3,$28,$D3,$28,$C4,$38        ;;              /D4ED\D4ED;
                      db $EA,$1E,$D8,$2D,$D8,$2D,$C8,$3C        ;;              /D4F5\D4F5;
                      db $D3,$14,$D3,$23,$D3,$23,$C4,$34        ;;              /D4FD\D4FD;
                      db $EC,$2D,$DD,$2D,$DD,$2D,$CC,$3C        ;;              /D505\D505;
                      db $D3,$14,$D3,$23,$D3,$23,$C4,$34        ;;              /D50D\D50D;
                      db $D3,$14,$D3,$23,$D3,$23,$C4,$34        ;;              /D515\D515;
                      db $EC,$2D,$DD,$2D,$DD,$2D,$CC,$3C        ;;              /D51D\D51D;
                      db $EC,$2D,$DD,$2D,$DD,$2D,$CC,$3C        ;;              /D525\D525;
                      db $D3,$EC,$D3,$F6,$D3,$F6,$C4,$FC        ;;              /D52D\D52D;
                      db $14,$2D,$0A,$2D,$0A,$2D,$05,$3C        ;;              /D535\D535;
                      db $C4,$0A,$C4,$0A,$C4,$0A,$C4,$0A        ;;              /D53D\D53D;
                      db $F6,$3C,$F6,$3C,$F6,$3C,$F6,$3C        ;;              /D545\D545;
                      db $F6,$0A,$EC,$14,$F1,$05,$E2,$0A        ;;              /D54D\D54D;
                      db $EC,$14,$D8,$28,$E7,$0F,$CE,$1E        ;;              /D555\D555;
                      db $CE,$32,$C9,$37,$C4,$3C,$C4,$C4        ;;              /D55D\D55D;
                      db $3C,$3C,$D8,$28                        ;;              /D565\D565;
                                                                ;;                        ;
DATA_00D5C9:          db $00,$00,$00,$00,$00,$00,$00,$00        ;;              /D569\D569;
                      db $00,$00,$00,$EC,$00,$14,$00,$00        ;;              /D571\D571;
                      db $00,$00,$00,$00,$00,$00,$00,$D8        ;;              /D579\D579;
                      db $00,$28,$00,$00,$00,$00,$00,$EC        ;;              /D581\D581;
                      db $00,$F6                                ;;              /D589\D589;
                   endif                              ;/ ENDIF  ;;++++++++++++++++++++++++;
                                                                ;;                        ;
                   if ver_is_lores(!_VER)             ;\   IF   ;;++++++++++++++++++++++++; J, U, SS, & E0
DATA_00D5EB:          db $FF,$FF,$02                            ;;D58B|D5EB+D5EB/D58B     ;
                   else                               ;<  ELSE  ;;------------------------; E1
DATA_00D5EB:          db $FF,$FF,$03                            ;;                   \D58B;
                   endif                              ;/ ENDIF  ;;++++++++++++++++++++++++;
                                                                ;;                        ;
DATA_00D5EE:          db $68,$70                                ;;D58E|D5EE+D5EE/D58E\D58E;
                                                                ;;                        ;
DATA_00D5F0:          db $1C,$0C                                ;;D590|D5F0+D5F0/D590\D590;
                                                                ;;                        ;
CODE_00D5F2:          LDA.B !PlayerInAir                        ;;D592|D5F2+D5F2/D592\D592;
                      BEQ +                                     ;;D594|D5F4+D5F4/D594\D594;
                      JMP CODE_00D682                           ;;D596|D5F6+D5F6/D596\D596;
                                                                ;;                        ;
                    + STZ.B !PlayerIsDucking                    ;;D599|D5F9+D5F9/D599\D599;
                      LDA.W !PlayerSlopePose                    ;;D59B|D5FB+D5FB/D59B\D59B;
                      BNE +                                     ;;D59E|D5FE+D5FE/D59E\D59E;
                      LDA.B !byetudlrHold                       ;;D5A0|D600+D600/D5A0\D5A0;
                      AND.B #$04                                ;;D5A2|D602+D602/D5A2\D5A2;
                      BEQ +                                     ;;D5A4|D604+D604/D5A4\D5A4;
                      STA.B !PlayerIsDucking                    ;;D5A6|D606+D606/D5A6\D5A6;
                      STZ.W !CapeInteracts                      ;;D5A8|D608+D608/D5A8\D5A8;
                    + LDA.W !StandOnSolidSprite                 ;;D5AB|D60B+D60B/D5AB\D5AB;
                      CMP.B #$02                                ;;D5AE|D60E+D60E/D5AE\D5AE;
                      BEQ CODE_00D61E                           ;;D5B0|D610+D610/D5B0\D5B0;
                      LDA.B !PlayerBlockedDir                   ;;D5B2|D612+D612/D5B2\D5B2;
                      AND.B #$08                                ;;D5B4|D614+D614/D5B4\D5B4;
                      BNE CODE_00D61E                           ;;D5B6|D616+D616/D5B6\D5B6;
                      LDA.B !byetudlrFrame                      ;;D5B8|D618+D618/D5B8\D5B8;
                      ORA.B !axlr0000Frame                      ;;D5BA|D61A+D61A/D5BA\D5BA;
                      BMI CODE_00D630                           ;;D5BC|D61C+D61C/D5BC\D5BC;
CODE_00D61E:          LDA.B !PlayerIsDucking                    ;;D5BE|D61E+D61E/D5BE\D5BE;
                      BEQ CODE_00D682                           ;;D5C0|D620+D620/D5C0\D5C0;
                      LDA.B !PlayerXSpeed                       ;;D5C2|D622+D622/D5C2\D5C2;
                      BEQ +                                     ;;D5C4|D624+D624/D5C4\D5C4;
                      LDA.B !LevelIsSlippery                    ;;D5C6|D626+D626/D5C6\D5C6;
                      BNE +                                     ;;D5C8|D628+D628/D5C8\D5C8;
                      JSR CODE_00FE4A                           ;;D5CA|D62A+D62A/D5CA\D5CA;
                    + JMP CODE_00D764                           ;;D5CD|D62D+D62D/D5CD\D5CD;
                                                                ;;                        ;
CODE_00D630:          LDA.B !PlayerXSpeed                       ;;D5D0|D630+D630/D5D0\D5D0;
                      BPL +                                     ;;D5D2|D632+D632/D5D2\D5D2;
                      EOR.B #$FF                                ;;D5D4|D634+D634/D5D4\D5D4;
                      INC A                                     ;;D5D6|D636+D636/D5D6\D5D6;
                    + LSR A                                     ;;D5D7|D637+D637/D5D7\D5D7;
                      LSR A                                     ;;D5D8|D638+D638/D5D8\D5D8;
                      AND.B #$FE                                ;;D5D9|D639+D639/D5D9\D5D9;
                      TAX                                       ;;D5DB|D63B+D63B/D5DB\D5DB;
                      LDA.B !axlr0000Frame                      ;;D5DC|D63C+D63C/D5DC\D5DC;
                      BPL CODE_00D65E                           ;;D5DE|D63E+D63E/D5DE\D5DE;
                      LDA.W !IsCarryingItem                     ;;D5E0|D640+D640/D5E0\D5E0;
                      BNE CODE_00D65E                           ;;D5E3|D643+D643/D5E3\D5E3;
                      INC A                                     ;;D5E5|D645+D645/D5E5\D5E5;
                      STA.W !SpinJumpFlag                       ;;D5E6|D646+D646/D5E6\D5E6;
                      LDA.B #!SFX_SPIN                          ;;D5E9|D649+D649/D5E9\D5E9; \ Play sound effect 
                      STA.W !SPCIO3                             ;;D5EB|D64B+D64B/D5EB\D5EB; / 
                      LDY.B !PlayerDirection                    ;;D5EE|D64E+D64E/D5EE\D5EE;
                      LDA.W DATA_00D5F0,Y                       ;;D5F0|D650+D650/D5F0\D5F0;
                      STA.W !SpinjumpFireball                   ;;D5F3|D653+D653/D5F3\D5F3;
                      LDA.W !PlayerRidingYoshi                  ;;D5F6|D656+D656/D5F6\D5F6;
                      BNE CODE_00D682                           ;;D5F9|D659+D659/D5F9\D5F9;
                      INX                                       ;;D5FB|D65B+D65B/D5FB\D5FB;
                      BRA +                                     ;;D5FC|D65C+D65C/D5FC\D5FC;
                                                                ;;                        ;
CODE_00D65E:          LDA.B #!SFX_JUMP                          ;;D5FE|D65E+D65E/D5FE\D5FE; \ Play sound effect 
                      STA.W !SPCIO1                             ;;D600|D660+D660/D600\D600; / 
                    + LDA.W DATA_00D2BD,X                       ;;D603|D663+D663/D603\D603;
                      STA.B !PlayerYSpeed                       ;;D606|D666+D666/D606\D606;
                      LDA.B #$0B                                ;;D608|D668+D668/D608\D608;
                      LDY.W !PlayerPMeter                       ;;D60A|D66A+D66A/D60A\D60A;
                      CPY.B #con($70,$70,$70,$40,$68)           ;;D60D|D66D+D66D/D60D\D60D;
                      BCC CODE_00D67D                           ;;D60F|D66F+D66F/D60F\D60F;
                      LDA.W !TakeoffTimer                       ;;D611|D671+D671/D611\D611;
                      BNE +                                     ;;D614|D674+D674/D614\D614;
                      LDA.B #$50                                ;;D616|D676+D676/D616\D616;
                      STA.W !TakeoffTimer                       ;;D618|D678+D678/D618\D618;
                    + LDA.B #$0C                                ;;D61B|D67B+D67B/D61B\D61B;
CODE_00D67D:          STA.B !PlayerInAir                        ;;D61D|D67D+D67D/D61D\D61D;
                      STZ.W !PlayerSlopePose                    ;;D61F|D67F+D67F/D61F\D61F;
CODE_00D682:          LDA.W !PlayerSlopePose                    ;;D622|D682+D682/D622\D622;
                      BMI CODE_00D692                           ;;D625|D685+D685/D625\D625;
                      LDA.B !byetudlrHold                       ;;D627|D687+D687/D627\D627;
                      AND.B #$03                                ;;D629|D689+D689/D629\D629;
                      BNE CODE_00D6B1                           ;;D62B|D68B+D68B/D62B\D62B;
CODE_00D68D:          LDA.W !PlayerSlopePose                    ;;D62D|D68D+D68D/D62D\D62D;
                      BEQ +                                     ;;D630|D690+D690/D630\D630;
CODE_00D692:          JSR CODE_00FE4A                           ;;D632|D692+D692/D632\D632;
                      LDA.W !CurrentSlope                       ;;D635|D695+D695/D635\D635;
                      BEQ +                                     ;;D638|D698+D698/D638\D638;
                      JSR CODE_00D968                           ;;D63A|D69A+D69A/D63A\D63A;
                      LDA.W !SlopeType                          ;;D63D|D69D+D69D/D63D\D63D;
                      LSR A                                     ;;D640|D6A0+D6A0/D640\D640;
                      LSR A                                     ;;D641|D6A1+D6A1/D641\D641;
                      TAY                                       ;;D642|D6A2+D6A2/D642\D642;
                      ADC.B #$76                                ;;D643|D6A3+D6A3/D643\D643;
                      TAX                                       ;;D645|D6A5+D6A5/D645\D645;
                      TYA                                       ;;D646|D6A6+D6A6/D646\D646;
                      LSR A                                     ;;D647|D6A7+D6A7/D647\D647;
                      ADC.B #$87                                ;;D648|D6A8+D6A8/D648\D648;
                      TAY                                       ;;D64A|D6AA+D6AA/D64A\D64A;
                      JMP CODE_00D742                           ;;D64B|D6AB+D6AB/D64B\D64B;
                                                                ;;                        ;
                    + JMP CODE_00D764                           ;;D64E|D6AE+D6AE/D64E\D64E;
                                                                ;;                        ;
CODE_00D6B1:          STZ.W !PlayerSlopePose                    ;;D651|D6B1+D6B1/D651\D651;
                      AND.B #$01                                ;;D654|D6B4+D6B4/D654\D654;
                      LDY.W !FlightPhase                        ;;D656|D6B6+D6B6/D656\D656;
                      BEQ CODE_00D6D5                           ;;D659|D6B9+D6B9/D659\D659;
                      CMP.B !PlayerDirection                    ;;D65B|D6BB+D6BB/D65B\D65B;
                      BEQ CODE_00D6C3                           ;;D65D|D6BD+D6BD/D65D\D65D;
                      LDY.B !byetudlrFrame                      ;;D65F|D6BF+D6BF/D65F\D65F;
                      BPL CODE_00D68D                           ;;D661|D6C1+D6C1/D661\D661;
CODE_00D6C3:          LDX.B !PlayerDirection                    ;;D663|D6C3+D6C3/D663\D663;
                      LDY.W DATA_00D5EE,X                       ;;D665|D6C5+D6C5/D665\D665;
                      STY.W !SlopeType                          ;;D668|D6C8+D6C8/D668\D668;
                      STA.B !_1                                 ;;D66B|D6CB+D6CB/D66B\D66B;
                      ASL A                                     ;;D66D|D6CD+D6CD/D66D\D66D;
                      ASL A                                     ;;D66E|D6CE+D6CE/D66E\D66E;
                      ORA.W !SlopeType                          ;;D66F|D6CF+D6CF/D66F\D66F;
                      TAX                                       ;;D672|D6D2+D6D2/D672\D672;
                      BRA CODE_00D713                           ;;D673|D6D3+D6D3/D673\D673;
                                                                ;;                        ;
CODE_00D6D5:          LDY.B !PlayerDirection                    ;;D675|D6D5+D6D5/D675\D675;
                      CMP.B !PlayerDirection                    ;;D677|D6D7+D6D7/D677\D677;
                      BEQ CODE_00D6EC                           ;;D679|D6D9+D6D9/D679\D679;
                      LDY.W !IsCarryingItem                     ;;D67B|D6DB+D6DB/D67B\D67B;
                      BEQ CODE_00D6EA                           ;;D67E|D6DE+D6DE/D67E\D67E;
                      LDY.W !FaceScreenTimer                    ;;D680|D6E0+D6E0/D680\D680;
                      BNE CODE_00D6EC                           ;;D683|D6E3+D6E3/D683\D683;
                      LDY.B #$08                                ;;D685|D6E5+D6E5/D685\D685;
                      STY.W !FaceScreenTimer                    ;;D687|D6E7+D6E7/D687\D687;
CODE_00D6EA:          STA.B !PlayerDirection                    ;;D68A|D6EA+D6EA/D68A\D68A;
CODE_00D6EC:          STA.B !_1                                 ;;D68C|D6EC+D6EC/D68C\D68C;
                      ASL A                                     ;;D68E|D6EE+D6EE/D68E\D68E;
                      ASL A                                     ;;D68F|D6EF+D6EF/D68F\D68F;
                      ORA.W !SlopeType                          ;;D690|D6F0+D6F0/D690\D690;
                      TAX                                       ;;D693|D6F3+D6F3/D693\D693;
                      LDA.B !PlayerXSpeed                       ;;D694|D6F4+D6F4/D694\D694;
                      BEQ CODE_00D713                           ;;D696|D6F6+D6F6/D696\D696;
                      EOR.W MarioAccel_+1,X                     ;;D698|D6F8+D6F8/D698\D698;
                      BPL CODE_00D713                           ;;D69B|D6FB+D6FB/D69B\D69B;
                      LDA.W !SkidTurnTimer                      ;;D69D|D6FD+D6FD/D69D\D69D;
                      BNE CODE_00D713                           ;;D6A0|D700+D700/D6A0\D6A0;
                      LDA.B !LevelIsSlippery                    ;;D6A2|D702+D702/D6A2\D6A2;
                      BNE +                                     ;;D6A4|D704+D704/D6A4\D6A4;
                      LDA.B #$0D                                ;;D6A6|D706+D706/D6A6\D6A6;
                      STA.W !PlayerTurningPose                  ;;D6A8|D708+D708/D6A8\D6A8;
                      JSR CODE_00FE4A                           ;;D6AB|D70B+D70B/D6AB\D6AB;
                    + TXA                                       ;;D6AE|D70E+D70E/D6AE\D6AE;
                      CLC                                       ;;D6AF|D70F+D70F/D6AF\D6AF;
                      ADC.B #$90                                ;;D6B0|D710+D710/D6B0\D6B0;
                      TAX                                       ;;D6B2|D712+D712/D6B2\D6B2;
CODE_00D713:          LDY.B #$00                                ;;D6B3|D713+D713/D6B3\D6B3;
                      BIT.B !byetudlrHold                       ;;D6B5|D715+D715/D6B5\D6B5;
                      BVC CODE_00D737                           ;;D6B7|D717+D717/D6B7\D6B7;
                      INX                                       ;;D6B9|D719+D719/D6B9\D6B9;
                      INX                                       ;;D6BA|D71A+D71A/D6BA\D6BA;
                      INY                                       ;;D6BB|D71B+D71B/D6BB\D6BB;
                      LDA.B !PlayerXSpeed                       ;;D6BC|D71C+D71C/D6BC\D6BC;
                      BPL +                                     ;;D6BE|D71E+D71E/D6BE\D6BE;
                      EOR.B #$FF                                ;;D6C0|D720+D720/D6C0\D6C0;
                      INC A                                     ;;D6C2|D722+D722/D6C2\D6C2;
                    + CMP.B #con($23,$23,$23,$2C,$2C)           ;;D6C3|D723+D723/D6C3\D6C3;
                      BMI CODE_00D737                           ;;D6C5|D725+D725/D6C5\D6C5;
                      LDA.B !PlayerInAir                        ;;D6C7|D727+D727/D6C7\D6C7;
                      BNE CODE_00D732                           ;;D6C9|D729+D729/D6C9\D6C9;
                      LDA.B #$10                                ;;D6CB|D72B+D72B/D6CB\D6CB;
                      STA.W !RunTakeoffTimer                    ;;D6CD|D72D+D72D/D6CD\D6CD;
                      BRA CODE_00D736                           ;;D6D0|D730+D730/D6D0\D6D0;
                                                                ;;                        ;
CODE_00D732:          CMP.B #$0C                                ;;D6D2|D732+D732/D6D2\D6D2;
                      BNE CODE_00D737                           ;;D6D4|D734+D734/D6D4\D6D4;
CODE_00D736:          INY                                       ;;D6D6|D736+D736/D6D6\D6D6;
CODE_00D737:          JSR CODE_00D96A                           ;;D6D7|D737+D737/D6D7\D6D7;
                      TYA                                       ;;D6DA|D73A+D73A/D6DA\D6DA;
                      ASL A                                     ;;D6DB|D73B+D73B/D6DB\D6DB;
                      ORA.W !SlopeType                          ;;D6DC|D73C+D73C/D6DC\D6DC;
                      ORA.B !_1                                 ;;D6DF|D73F+D73F/D6DF\D6DF;
                      TAY                                       ;;D6E1|D741+D741/D6E1\D6E1;
CODE_00D742:          LDA.B !PlayerXSpeed                       ;;D6E2|D742+D742/D6E2\D6E2;
                      SEC                                       ;;D6E4|D744+D744/D6E4\D6E4;
                      SBC.W DATA_00D535,Y                       ;;D6E5|D745+D745/D6E5\D6E5;
                      BEQ CODE_00D76B                           ;;D6E8|D748+D748/D6E8\D6E8;
                      EOR.W DATA_00D535,Y                       ;;D6EA|D74A+D74A/D6EA\D6EA;
                      BPL CODE_00D76B                           ;;D6ED|D74D+D74D/D6ED\D6ED;
                      REP #$20                                  ;;D6EF|D74F+D74F/D6EF\D6EF; Accum (16 bit) 
                      LDA.W MarioAccel_,X                       ;;D6F1|D751+D751/D6F1\D6F1;
                      LDY.B !LevelIsSlippery                    ;;D6F4|D754+D754/D6F4\D6F4;
                      BEQ +                                     ;;D6F6|D756+D756/D6F6\D6F6;
                      LDY.B !PlayerInAir                        ;;D6F8|D758+D758/D6F8\D6F8;
                      BNE +                                     ;;D6FA|D75A+D75A/D6FA\D6FA;
                      LDA.W DATA_00D43D,X                       ;;D6FC|D75C+D75C/D6FC\D6FC;
                    + CLC                                       ;;D6FF|D75F+D75F/D6FF\D6FF;
                      ADC.B !PlayerXPosSpx                      ;;D700|D760+D760/D700\D700;
                      BRA CODE_00D7A0                           ;;D702|D762+D762/D702\D702;
                                                                ;;                        ;
CODE_00D764:          JSR CODE_00D968                           ;;D704|D764+D764/D704\D704;
                      LDA.B !PlayerInAir                        ;;D707|D767+D767/D707\D707;
                      BNE Return00D7A4                          ;;D709|D769+D769/D709\D709;
CODE_00D76B:          LDA.W !SlopeType                          ;;D70B|D76B+D76B/D70B\D70B;
                      LSR A                                     ;;D70E|D76E+D76E/D70E\D70E;
                      TAY                                       ;;D70F|D76F+D76F/D70F\D70F;
                      LSR A                                     ;;D710|D770+D770/D710\D710;
                      TAX                                       ;;D711|D771+D771/D711\D711;
CODE_00D772:          LDA.B !PlayerXSpeed                       ;;D712|D772+D772/D712\D712;
                      SEC                                       ;;D714|D774+D774/D714\D714;
                      SBC.W DATA_00D5C9+1,X                     ;;D715|D775+D775/D715\D715;
                      BPL +                                     ;;D718|D778+D778/D718\D718;
                      INY                                       ;;D71A|D77A+D77A/D71A\D71A;
                      INY                                       ;;D71B|D77B+D77B/D71B\D71B;
                    + LDA.W !EndLevelTimer                      ;;D71C|D77C+D77C/D71C\D71C;
                      ORA.B !PlayerInAir                        ;;D71F|D77F+D77F/D71F\D71F;
                      REP #$20                                  ;;D721|D781+D781/D721\D721; Accum (16 bit) 
                      BNE CODE_00D78C                           ;;D723|D783+D783/D723\D723;
                      LDA.W DATA_00D309,Y                       ;;D725|D785+D785/D725\D725;
                      BIT.B !LevelIsWater                       ;;D728|D788+D788/D728\D728;
                      BMI +                                     ;;D72A|D78A+D78A/D72A\D72A;
CODE_00D78C:          LDA.W DATA_00D2CD,Y                       ;;D72C|D78C+D78C/D72C\D72C;
                    + CLC                                       ;;D72F|D78F+D78F/D72F\D72F;
                      ADC.B !PlayerXPosSpx                      ;;D730|D790+D790/D730\D730;
                      STA.B !PlayerXPosSpx                      ;;D732|D792+D792/D732\D732;
                      SEC                                       ;;D734|D794+D794/D734\D734;
                      SBC.W DATA_00D5C9,X                       ;;D735|D795+D795/D735\D735;
                      EOR.W DATA_00D2CD,Y                       ;;D738|D798+D798/D738\D738;
                      BMI +                                     ;;D73B|D79B+D79B/D73B\D73B;
                      LDA.W DATA_00D5C9,X                       ;;D73D|D79D+D79D/D73D\D73D;
CODE_00D7A0:          STA.B !PlayerXPosSpx                      ;;D740|D7A0+D7A0/D740\D740;
                    + SEP #$20                                  ;;D742|D7A2+D7A2/D742\D742; Accum (8 bit) 
Return00D7A4:         RTS                                       ;;D744|D7A4+D7A4/D744\D744; Return 
                                                                ;;                        ;
                                                                ;;                        ;
                   if ver_is_ntsc(!_VER)              ;\   IF   ;;++++++++++++++++++++++++; J, U, & SS
DATA_00D7A5:          db $06,$03,$04,$10,$F4,$01,$03,$04        ;;D745|D7A5+D7A5          ;
                      db $05,$06                                ;;D74D|D7AD+D7AD          ;
                                                                ;;                        ;
DATA_00D7AF:          db $40,$40,$20,$40,$40,$40,$40,$40        ;;D74F|D7AF+D7AF          ;
                      db $40,$40                                ;;D757|D7B7+D7B7          ;
                                                                ;;                        ;
DATA_00D7B9:          db $10,$C8,$E0,$02,$03,$03,$04,$03        ;;D759|D7B9+D7B9          ;
                      db $02,$00,$01,$00,$00,$00,$00            ;;D761|D7C1+D7C1          ;
                                                                ;;                        ;
DATA_00D7C8:          db $01,$10,$30,$30,$38,$38,$40            ;;D768|D7C8+D7C8          ;
                   else                               ;<  ELSE  ;;------------------------; E0 & E1
DATA_00D7A5:          dw $06E6,$0373,$0499,$1266                ;;              /D745\D745;
                      dw $F220,$0126,$0373,$0499                ;;              /D74D\D74D;
                      dw $05C0,$06E6                            ;;              /D755\D755;
                                                                ;;                        ;
DATA_00D7AF:          dw $4000,$4000,$2000,$4000                ;;              /D759\D759;
                      dw $4000,$4000,$4000,$4000                ;;              /D761\D761;
                      dw $4000,$4000                            ;;              /D769\D769;
                                                                ;;                        ;
DATA_00D7B9:          db $10,$C8,$E0,$02,$03,$03,$04,$03        ;;              /D76D\D76D;
                      db $02,$00,$01,$00,$00,$00,$00            ;;              /D775\D775;
                                                                ;;                        ;
DATA_00D7C8:          dw $0001,$0010,$0030,$0030                ;;              /D77C\D77C;
                      dw $0038,$0038                            ;;              /D784\D784;
                      db $40                                    ;;              /D788\D788;
                   endif                              ;/ ENDIF  ;;++++++++++++++++++++++++;
                                                                ;;                        ;
CapeSpeed:            db $FF,$01,$01,$FF,$FF                    ;;D76F|D7CF+D7CF/D789\D789;
                                                                ;;                        ;
DATA_00D7D4:          db $01,$06,$03,$01,$00                    ;;D774|D7D4+D7D4/D78E\D78E;
                                                                ;;                        ;
DATA_00D7D9:          db $00,$00,$00,$F8,$F8,$F8,$F4,$F0        ;;D779|D7D9+D7D9/D793\D793;
                      db $C8,$02,$01                            ;;D781|D7E1+D7E1/D79B\D79B;
                                                                ;;                        ;
CODE_00D7E4:          LDY.W !FlightPhase                        ;;D784|D7E4+D7E4/D79E\D79E;
                      BNE CODE_00D824                           ;;D787|D7E7+D7E7/D7A1\D7A1;
                      LDA.B !PlayerInAir                        ;;D789|D7E9+D7E9/D7A3\D7A3;
                      BEQ CODE_00D811                           ;;D78B|D7EB+D7EB/D7A5\D7A5;
                      LDA.W !IsCarryingItem                     ;;D78D|D7ED+D7ED/D7A7\D7A7;
                      ORA.W !PlayerRidingYoshi                  ;;D790|D7F0+D7F0/D7AA\D7AA;
                      ORA.W !SpinJumpFlag                       ;;D793|D7F3+D7F3/D7AD\D7AD;
                      BNE CODE_00D811                           ;;D796|D7F6+D7F6/D7B0\D7B0;
                      LDA.W !PlayerSlopePose                    ;;D798|D7F8+D7F8/D7B2\D7B2;
                      BMI CODE_00D7FF                           ;;D79B|D7FB+D7FB/D7B5\D7B5;
                      BNE CODE_00D811                           ;;D79D|D7FD+D7FD/D7B7\D7B7;
CODE_00D7FF:          STZ.W !PlayerSlopePose                    ;;D79F|D7FF+D7FF/D7B9\D7B9;
                      LDX.B !Powerup                            ;;D7A2|D802+D802/D7BC\D7BC;
                      CPX.B #$02                                ;;D7A4|D804+D804/D7BE\D7BE;
                      BNE CODE_00D811                           ;;D7A6|D806+D806/D7C0\D7C0;
                      LDA.B !PlayerYSpeed                       ;;D7A8|D808+D808/D7C2\D7C2;
                      BMI CODE_00D811                           ;;D7AA|D80A+D80A/D7C4\D7C4;
                      LDA.W !TakeoffTimer                       ;;D7AC|D80C+D80C/D7C6\D7C6;
                      BNE +                                     ;;D7AF|D80F+D80F/D7C9\D7C9;
CODE_00D811:          JMP CODE_00D8CD                           ;;D7B1|D811+D811/D7CB\D7CB;
                                                                ;;                        ;
                    + STZ.B !PlayerIsDucking                    ;;D7B4|D814+D814/D7CE\D7CE;
                      LDA.B #$0B                                ;;D7B6|D816+D816/D7D0\D7D0;
                      STA.B !PlayerInAir                        ;;D7B8|D818+D818/D7D2\D7D2;
                      STZ.W !MaxStageOfFlight                   ;;D7BA|D81A+D81A/D7D4\D7D4;
                      JSR CODE_00D94F                           ;;D7BD|D81D+D81D/D7D7\D7D7;
                      LDX.B #$02                                ;;D7C0|D820+D820/D7DA\D7DA;
                      BRA CODE_00D85B                           ;;D7C2|D822+D822/D7DC\D7DC;
                                                                ;;                        ;
CODE_00D824:          CPY.B #$02                                ;;D7C4|D824+D824/D7DE\D7DE;
                      BCC +                                     ;;D7C6|D826+D826/D7E0\D7E0;
                      JSR CODE_00D94F                           ;;D7C8|D828+D828/D7E2\D7E2;
                    + LDX.W !NextFlightPhase                    ;;D7CB|D82B+D82B/D7E5\D7E5;
                      CPX.B #$04                                ;;D7CE|D82E+D82E/D7E8\D7E8;
                      BEQ CODE_00D856                           ;;D7D0|D830+D830/D7EA\D7EA;
                      LDX.B #$03                                ;;D7D2|D832+D832/D7EC\D7EC;
                      LDY.B !PlayerYSpeed                       ;;D7D4|D834+D834/D7EE\D7EE;
                      BMI CODE_00D856                           ;;D7D6|D836+D836/D7F0\D7F0;
                      LDA.B !byetudlrHold                       ;;D7D8|D838+D838/D7F2\D7F2;
                      AND.B #$03                                ;;D7DA|D83A+D83A/D7F4\D7F4;
                      TAY                                       ;;D7DC|D83C+D83C/D7F6\D7F6;
                      BNE CODE_00D849                           ;;D7DD|D83D+D83D/D7F7\D7F7;
                      LDA.W !FlightPhase                        ;;D7DF|D83F+D83F/D7F9\D7F9;
                      CMP.B #$04                                ;;D7E2|D842+D842/D7FC\D7FC;
                      BCS CODE_00D856                           ;;D7E4|D844+D844/D7FE\D7FE;
                      DEX                                       ;;D7E6|D846+D846/D800\D800;
                      BRA CODE_00D856                           ;;D7E7|D847+D847/D801\D801;
                                                                ;;                        ;
CODE_00D849:          LSR A                                     ;;D7E9|D849+D849/D803\D803;
                      LDY.B !PlayerDirection                    ;;D7EA|D84A+D84A/D804\D804;
                      BEQ +                                     ;;D7EC|D84C+D84C/D806\D806;
                      EOR.B #$01                                ;;D7EE|D84E+D84E/D808\D808;
                    + TAX                                       ;;D7F0|D850+D850/D80A\D80A;
                      CPX.W !NextFlightPhase                    ;;D7F1|D851+D851/D80B\D80B;
                      BNE CODE_00D85B                           ;;D7F4|D854+D854/D80E\D80E;
CODE_00D856:          LDA.W !CapePumpTimer                      ;;D7F6|D856+D856/D810\D810;
                      BNE CODE_00D87E                           ;;D7F9|D859+D859/D813\D813;
CODE_00D85B:          BIT.B !byetudlrHold                       ;;D7FB|D85B+D85B/D815\D815;
                      BVS +                                     ;;D7FD|D85D+D85D/D817\D817;
                      LDX.B #$04                                ;;D7FF|D85F+D85F/D819\D819;
                    + LDA.W !FlightPhase                        ;;D801|D861+D861/D81B\D81B;
                      CMP.W DATA_00D7D4,X                       ;;D804|D864+D864/D81E\D81E;
                      BEQ CODE_00D87E                           ;;D807|D867+D867/D821\D821;
                      CLC                                       ;;D809|D869+D869/D823\D823;
                      ADC.W CapeSpeed,X                         ;;D80A|D86A+D86A/D824\D824;
                      STA.W !FlightPhase                        ;;D80D|D86D+D86D/D827\D827;
                      LDA.B #$08                                ;;D810|D870+D870/D82A\D82A;
                      LDY.W !MaxStageOfFlight                   ;;D812|D872+D872/D82C\D82C;
                      CPY.B #$C8                                ;;D815|D875+D875/D82F\D82F;
                      BNE +                                     ;;D817|D877+D877/D831\D831;
                      LDA.B #$02                                ;;D819|D879+D879/D833\D833;
                    + STA.W !CapePumpTimer                      ;;D81B|D87B+D87B/D835\D835;
CODE_00D87E:          STX.W !NextFlightPhase                    ;;D81E|D87E+D87E/D838\D838;
                      LDY.W !FlightPhase                        ;;D821|D881+D881/D83B\D83B;
                      BEQ CODE_00D8CD                           ;;D824|D884+D884/D83E\D83E;
                   if ver_is_ntsc(!_VER)              ;\   IF   ;;++++++++++++++++++++++++; J, U, & SS
                      LDA.B !PlayerYSpeed                       ;;D826|D886+D886          ;
                      BPL CODE_00D892                           ;;D828|D888+D888          ;
                      CMP.B #$C8                                ;;D82A|D88A+D88A          ;
                      BCS +                                     ;;D82C|D88C+D88C          ;
                      LDA.B #$C8                                ;;D82E|D88E+D88E          ;
                      BRA +                                     ;;D830|D890+D890          ;
                                                                ;;                        ;
CODE_00D892:          CMP.W DATA_00D7C8,Y                       ;;D832|D892+D892          ;
                      BCC +                                     ;;D835|D895+D895          ;
                      LDA.W DATA_00D7C8,Y                       ;;D837|D897+D897          ;
                    + PHA                                       ;;D83A|D89A+D89A          ;
                      CPY.B #$01                                ;;D83B|D89B+D89B          ;
                      BNE CODE_00D8C6                           ;;D83D|D89D+D89D          ;
                      LDX.W !MaxStageOfFlight                   ;;D83F|D89F+D89F          ;
                      BEQ CODE_00D8C4                           ;;D842|D8A2+D8A2          ;
                      LDA.B !PlayerYSpeed                       ;;D844|D8A4+D8A4          ;
                      BMI CODE_00D8AF                           ;;D846|D8A6+D8A6          ;
                      LDA.B #!SFX_CAPE                          ;;D848|D8A8+D8A8          ; \ Play sound effect 
                      STA.W !SPCIO0                             ;;D84A|D8AA+D8AA          ; / 
                      BRA +                                     ;;D84D|D8AD+D8AD          ;
                                                                ;;                        ;
CODE_00D8AF:          CMP.W !MaxStageOfFlight                   ;;D84F|D8AF+D8AF          ;
                      BCS +                                     ;;D852|D8B2+D8B2          ;
                      STX.B !PlayerYSpeed                       ;;D854|D8B4+D8B4          ;
                      STZ.W !MaxStageOfFlight                   ;;D856|D8B6+D8B6          ;
                    + LDX.B !PlayerDirection                    ;;D859|D8B9+D8B9          ;
                      LDA.B !PlayerXSpeed                       ;;D85B|D8BB+D8BB          ;
                      BEQ CODE_00D8C4                           ;;D85D|D8BD+D8BD          ;
                      EOR.W DATA_00D535,X                       ;;D85F|D8BF+D8BF          ;
                      BPL CODE_00D8C6                           ;;D862|D8C2+D8C2          ;
CODE_00D8C4:          LDY.B #$02                                ;;D864|D8C4+D8C4          ;
CODE_00D8C6:          PLA                                       ;;D866|D8C6+D8C6          ;
                      INY                                       ;;D867|D8C7+D8C7          ;
                      INY                                       ;;D868|D8C8+D8C8          ;
                      INY                                       ;;D869|D8C9+D8C9          ;
                   else                               ;<  ELSE  ;;------------------------; E0 & E1
                      PHY                                       ;;              /D840\D840;
                      TYA                                       ;;              /D841\D841;
                      ASL A                                     ;;              /D842\D842;
                      TAY                                       ;;              /D843\D843;
                      REP #$20                                  ;;              /D844\D844;
                      LDA.B !PlayerYPosSpx                      ;;              /D846\D846;
                      BPL CODE_00D892                           ;;              /D848\D848;
                      CMP.W #$00C8                              ;;              /D84A\D84A;
                      BCS +                                     ;;              /D84D\D84D;
                      LDA.W #$00C8                              ;;              /D84F\D84F;
                      BRA +                                     ;;              /D852\D852;
                                                                ;;                        ;
CODE_00D892:          CMP.W DATA_00D7C8-1,Y                     ;;              /D854\D854;
                      BCC +                                     ;;              /D857\D857;
                      LDA.W DATA_00D7C8-1,Y                     ;;              /D859\D859;
                    + PLY                                       ;;              /D85C\D85C;
                      PHA                                       ;;              /D85D\D85D;
                      SEP #$20                                  ;;              /D85E\D85E;
                      CPY.B #$01                                ;;              /D860\D860;
                      BNE CODE_00D8C6                           ;;              /D862\D862;
                      LDX.W !MaxStageOfFlight                   ;;              /D864\D864;
                      BEQ CODE_00D8C4                           ;;              /D867\D867;
                      LDA.B !PlayerYSpeed                       ;;              /D869\D869;
                      BMI CODE_00D8AF                           ;;              /D86B\D86B;
                      LDA.B #!SFX_CAPE                          ;;              /D86D\D86D;
                      STA.W !SPCIO0                             ;;              /D86F\D86F;
                      BRA +                                     ;;              /D872\D872;
                                                                ;;                        ;
CODE_00D8AF:          CMP.W !MaxStageOfFlight                   ;;              /D874\D874;
                      BCS +                                     ;;              /D877\D877;
                      STX.B !PlayerYSpeed                       ;;              /D879\D879;
                      STZ.W !MaxStageOfFlight                   ;;              /D87B\D87B;
                    + LDX.B !PlayerDirection                    ;;              /D87E\D87E;
                      LDA.B !PlayerXSpeed                       ;;              /D880\D880;
                      BEQ CODE_00D8C4                           ;;              /D882\D882;
                      EOR.W DATA_00D535,X                       ;;              /D884\D884;
                      BPL CODE_00D8C6                           ;;              /D887\D887;
CODE_00D8C4:          LDY.B #$02                                ;;              /D889\D889;
CODE_00D8C6:          INY                                       ;;              /D88B\D88B;
                      INY                                       ;;              /D88C\D88C;
                      INY                                       ;;              /D88D\D88D;
                      TYA                                       ;;              /D88E\D88E;
                      ASL A                                     ;;              /D88F\D88F;
                      TAY                                       ;;              /D890\D890;
                      REP #$20                                  ;;              /D891\D891;
                      PLA                                       ;;              /D893\D893;
                   endif                              ;/ ENDIF  ;;++++++++++++++++++++++++;
                      JMP CODE_00D948                           ;;D86A|D8CA+D8CA/D894\D894;
                                                                ;;                        ;
CODE_00D8CD:          LDA.B !PlayerInAir                        ;;D86D|D8CD+D8CD/D897\D897; \ Branch if not flying 
                      BEQ CODE_00D928                           ;;D86F|D8CF+D8CF/D899\D899; / 
                      LDX.B #$00                                ;;D871|D8D1+D8D1/D89B\D89B; X = #$00 
                      LDA.W !PlayerRidingYoshi                  ;;D873|D8D3+D8D3/D89D\D89D; \ Branch if not on Yoshi 
                      BEQ CODE_00D8E7                           ;;D876|D8D6+D8D6/D8A0\D8A0; / 
                      LDA.W !YoshiHasWingsEvt                   ;;D878|D8D8+D8D8/D8A2\D8A2; \ Branch if not winged Yoshi 
                      LSR A                                     ;;D87B|D8DB+D8DB/D8A5\D8A5;  | 
                      BEQ CODE_00D8E7                           ;;D87C|D8DC+D8DC/D8A6\D8A6; / 
                      LDY.B #$02                                ;;D87E|D8DE+D8DE/D8A8\D8A8; \ Branch if not Caped Mario 
                      CPY.B !Powerup                            ;;D880|D8E0+D8E0/D8AA\D8AA;  | 
                      BEQ +                                     ;;D882|D8E2+D8E2/D8AC\D8AC; / 
                      INX                                       ;;D884|D8E4+D8E4/D8AE\D8AE; X= #$01 
                    + BRA CODE_00D8FF                           ;;D885|D8E5+D8E5/D8AF\D8AF;
                                                                ;;                        ;
CODE_00D8E7:          LDA.B !Powerup                            ;;D887|D8E7+D8E7/D8B1\D8B1; \ Branch if not Caped Mario 
                      CMP.B #$02                                ;;D889|D8E9+D8E9/D8B3\D8B3;  | 
                      BNE CODE_00D928                           ;;D88B|D8EB+D8EB/D8B5\D8B5; / 
                      LDA.B !PlayerInAir                        ;;D88D|D8ED+D8ED/D8B7\D8B7; \ Branch if $72 != 0C 
                      CMP.B #$0C                                ;;D88F|D8EF+D8EF/D8B9\D8B9;  | 
                      BNE CODE_00D8FD                           ;;D891|D8F1+D8F1/D8BB\D8BB; / 
                      LDY.B #$01                                ;;D893|D8F3+D8F3/D8BD\D8BD;
                      CPY.W !TakeoffTimer                       ;;D895|D8F5+D8F5/D8BF\D8BF;
                      BCC CODE_00D8FF                           ;;D898|D8F8+D8F8/D8C2\D8C2;
                      INC.W !TakeoffTimer                       ;;D89A|D8FA+D8FA/D8C4\D8C4;
CODE_00D8FD:          LDY.B #$00                                ;;D89D|D8FD+D8FD/D8C7\D8C7;
CODE_00D8FF:          LDA.W !CapeFloatTimer                     ;;D89F|D8FF+D8FF/D8C9\D8C9;
                      BNE CODE_00D90D                           ;;D8A2|D902+D902/D8CC\D8CC;
                      LDA.B !byetudlrHold,X                     ;;D8A4|D904+D904/D8CE\D8CE;
                      BPL CODE_00D924                           ;;D8A6|D906+D906/D8D0\D8D0;
                      LDA.B #$10                                ;;D8A8|D908+D908/D8D2\D8D2;
                      STA.W !CapeFloatTimer                     ;;D8AA|D90A+D90A/D8D4\D8D4;
CODE_00D90D:          LDA.B !PlayerYSpeed                       ;;D8AD|D90D+D90D/D8D7\D8D7;
                      BPL CODE_00D91B                           ;;D8AF|D90F+D90F/D8D9\D8D9;
                      LDX.W DATA_00D7B9,Y                       ;;D8B1|D911+D911/D8DB\D8DB;
                      BPL CODE_00D924                           ;;D8B4|D914+D914/D8DE\D8DE;
                      CMP.W DATA_00D7B9,Y                       ;;D8B6|D916+D916/D8E0\D8E0;
                      BCC CODE_00D924                           ;;D8B9|D919+D919/D8E3\D8E3;
CODE_00D91B:          LDA.W DATA_00D7B9,Y                       ;;D8BB|D91B+D91B/D8E5\D8E5;
                      CMP.B !PlayerYSpeed                       ;;D8BE|D91E+D91E/D8E8\D8E8;
                      BEQ CODE_00D94C                           ;;D8C0|D920+D920/D8EA\D8EA;
                      BMI CODE_00D94C                           ;;D8C2|D922+D922/D8EC\D8EC;
CODE_00D924:          CPY.B #$02                                ;;D8C4|D924+D924/D8EE\D8EE;
                      BEQ +                                     ;;D8C6|D926+D926/D8F0\D8F0;
CODE_00D928:          LDY.B #$01                                ;;D8C8|D928+D928/D8F2\D8F2;
                      LDA.B !byetudlrHold                       ;;D8CA|D92A+D92A/D8F4\D8F4;
                      BMI +                                     ;;D8CC|D92C+D92C/D8F6\D8F6;
CODE_00D92E:          LDY.B #$00                                ;;D8CE|D92E+D92E/D8F8\D8F8;
                   if ver_is_ntsc(!_VER)              ;\   IF   ;;++++++++++++++++++++++++; J, U, & SS
                    + LDA.B !PlayerYSpeed                       ;;D8D0|D930+D930          ; \ If Mario's Y speed is negative (up), 
                      BMI CODE_00D948                           ;;D8D2|D932+D932          ; / branch to $D948 
                      CMP.W DATA_00D7AF,Y                       ;;D8D4|D934+D934          ;
                      BCC +                                     ;;D8D7|D937+D937          ;
                      LDA.W DATA_00D7AF,Y                       ;;D8D9|D939+D939          ;
                    + LDX.B !PlayerInAir                        ;;D8DC|D93C+D93C          ;
                      BEQ CODE_00D948                           ;;D8DE|D93E+D93E          ;
                      CPX.B #$0B                                ;;D8E0|D940+D940          ;
                      BNE CODE_00D948                           ;;D8E2|D942+D942          ;
                      LDX.B #$24                                ;;D8E4|D944+D944          ;
                      STX.B !PlayerInAir                        ;;D8E6|D946+D946          ;
CODE_00D948:          CLC                                       ;;D8E8|D948+D948          ;
                      ADC.W DATA_00D7A5,Y                       ;;D8E9|D949+D949          ;
                   else                               ;<  ELSE  ;;------------------------; E0 & E1
                    + TYA                                       ;;              /D8FA\D8FA;
                      ASL A                                     ;;              /D8FB\D8FB;
                      TAY                                       ;;              /D8FC\D8FC;
                      REP #$20                                  ;;              /D8FD\D8FD;
                      LDA.B !PlayerYPosSpx                      ;;              /D8FF\D8FF;
                      BMI CODE_00D948                           ;;              /D901\D901;
                      CMP.W DATA_00D7AF,Y                       ;;              /D903\D903;
                      BCC +                                     ;;              /D906\D906;
                      LDA.W DATA_00D7AF,Y                       ;;              /D908\D908;
                    + LDX.B !PlayerInAir                        ;;              /D90B\D90B;
                      BEQ CODE_00D948                           ;;              /D90D\D90D;
                      CPX.B #$0B                                ;;              /D90F\D90F;
                      BNE CODE_00D948                           ;;              /D911\D911;
                      LDX.B #$24                                ;;              /D913\D913;
                      STX.B !PlayerInAir                        ;;              /D915\D915;
CODE_00D948:          CLC                                       ;;              /D917\D917;
                      ADC.W DATA_00D7A5,Y                       ;;              /D918\D918;
                      SEP #$20                                  ;;              /D91B\D91B;
                      STA.B !PlayerYPosSpx                      ;;              /D91D\D91D;
                      XBA                                       ;;              /D91F\D91F;
                   endif                              ;/ ENDIF  ;;++++++++++++++++++++++++;
CODE_00D94C:          STA.B !PlayerYSpeed                       ;;D8EC|D94C+D94C/D920\D920;
                      RTS                                       ;;D8EE|D94E+D94E/D922\D922; Return 
                                                                ;;                        ;
CODE_00D94F:          STZ.W !Empty_140A                         ;;D8EF|D94F+D94F/D923\D923;
                      LDA.B !PlayerYSpeed                       ;;D8F2|D952+D952/D926\D926;
                      BPL +                                     ;;D8F4|D954+D954/D928\D928;
                      LDA.B #$00                                ;;D8F6|D956+D956/D92A\D92A;
                    + LSR A                                     ;;D8F8|D958+D958/D92C\D92C;
                      LSR A                                     ;;D8F9|D959+D959/D92D\D92D;
                      LSR A                                     ;;D8FA|D95A+D95A/D92E\D92E;
                      TAY                                       ;;D8FB|D95B+D95B/D92F\D92F;
                      LDA.W DATA_00D7D9,Y                       ;;D8FC|D95C+D95C/D930\D930;
                      CMP.W !MaxStageOfFlight                   ;;D8FF|D95F+D95F/D933\D933;
                      BPL +                                     ;;D902|D962+D962/D936\D936;
                      STA.W !MaxStageOfFlight                   ;;D904|D964+D964/D938\D938;
                    + RTS                                       ;;D907|D967+D967/D93B\D93B; Return 
                                                                ;;                        ;
CODE_00D968:          LDY.B #$00                                ;;D908|D968+D968/D93C\D93C;
CODE_00D96A:          LDA.W !PlayerPMeter                       ;;D90A|D96A+D96A/D93E\D93E;
                      CLC                                       ;;D90D|D96D+D96D/D941\D941;
                      ADC.W DATA_00D5EB,Y                       ;;D90E|D96E+D96E/D942\D942;
                      BPL +                                     ;;D911|D971+D971/D945\D945;
                      LDA.B #$00                                ;;D913|D973+D973/D947\D947;
                    + CMP.B #con($70,$70,$70,$40,$68)           ;;D915|D975+D975/D949\D949;
                      BCC +                                     ;;D917|D977+D977/D94B\D94B;
                      INY                                       ;;D919|D979+D979/D94D\D94D;
                      LDA.B #con($70,$70,$70,$40,$68)           ;;D91A|D97A+D97A/D94E\D94E;
                    + STA.W !PlayerPMeter                       ;;D91C|D97C+D97C/D950\D950;
                      RTS                                       ;;D91F|D97F+D97F/D953\D953; Return 
                                                                ;;                        ;
                                                                ;;                        ;
DATA_00D980:          db $16,$1A,$1A,$18                        ;;D920|D980+D980/D954\D954;
                                                                ;;                        ;
DATA_00D984:          db $E8,$F8,$D0,$D0                        ;;D924|D984+D984/D958\D958;
                                                                ;;                        ;
CODE_00D988:          STZ.W !PlayerSlopePose                    ;;D928|D988+D988/D95C\D95C;
                      STZ.B !PlayerIsDucking                    ;;D92B|D98B+D98B/D95F\D95F;
                      STZ.W !FlightPhase                        ;;D92D|D98D+D98D/D961\D961;
                      STZ.W !SpinJumpFlag                       ;;D930|D990+D990/D964\D964;
                      LDY.B !PlayerYSpeed                       ;;D933|D993+D993/D967\D967;
                      LDA.W !IsCarryingItem                     ;;D935|D995+D995/D969\D969;
                      BEQ CODE_00D9EB                           ;;D938|D998+D998/D96C\D96C;
                      LDA.B !PlayerInAir                        ;;D93A|D99A+D99A/D96E\D96E;
                      BNE CODE_00D9AF                           ;;D93C|D99C+D99C/D970\D970;
                      LDA.B !byetudlrFrame                      ;;D93E|D99E+D99E/D972\D972;
                      ORA.B !axlr0000Frame                      ;;D940|D9A0+D9A0/D974\D974;
                      BPL CODE_00D9AF                           ;;D942|D9A2+D9A2/D976\D976;
                      LDA.B #$0B                                ;;D944|D9A4+D9A4/D978\D978;
                      STA.B !PlayerInAir                        ;;D946|D9A6+D9A6/D97A\D97A;
                      STZ.W !PlayerSlopePose                    ;;D948|D9A8+D9A8/D97C\D97C;
                      LDY.B #$F0                                ;;D94B|D9AB+D9AB/D97F\D97F;
                      BRA CODE_00D9B5                           ;;D94D|D9AD+D9AD/D981\D981;
                                                                ;;                        ;
CODE_00D9AF:          LDA.B !byetudlrHold                       ;;D94F|D9AF+D9AF/D983\D983;
                      AND.B #$04                                ;;D951|D9B1+D9B1/D985\D985;
                      BEQ +                                     ;;D953|D9B3+D9B3/D987\D987;
CODE_00D9B5:          JSR CODE_00DAA9                           ;;D955|D9B5+D9B5/D989\D989;
                      TYA                                       ;;D958|D9B8+D9B8/D98C\D98C;
                      CLC                                       ;;D959|D9B9+D9B9/D98D\D98D;
                      ADC.B #$08                                ;;D95A|D9BA+D9BA/D98E\D98E;
                      TAY                                       ;;D95C|D9BC+D9BC/D990\D990;
                    + INY                                       ;;D95D|D9BD+D9BD/D991\D991;
                      LDA.W !PlayerCanJumpWater                 ;;D95E|D9BE+D9BE/D992\D992;
                      BNE +                                     ;;D961|D9C1+D9C1/D995\D995;
                      DEY                                       ;;D963|D9C3+D9C3/D997\D997;
                      LDA.B !EffFrame                           ;;D964|D9C4+D9C4/D998\D998;
                      AND.B #$03                                ;;D966|D9C6+D9C6/D99A\D99A;
                      BNE +                                     ;;D968|D9C8+D9C8/D99C\D99C;
                      DEY                                       ;;D96A|D9CA+D9CA/D99E\D99E;
                      DEY                                       ;;D96B|D9CB+D9CB/D99F\D99F;
                    + TYA                                       ;;D96C|D9CC+D9CC/D9A0\D9A0;
                      BMI CODE_00D9D7                           ;;D96D|D9CD+D9CD/D9A1\D9A1;
                      CMP.B #$10                                ;;D96F|D9CF+D9CF/D9A3\D9A3;
                      BCC +                                     ;;D971|D9D1+D9D1/D9A5\D9A5;
                      LDA.B #$10                                ;;D973|D9D3+D9D3/D9A7\D9A7;
                      BRA +                                     ;;D975|D9D5+D9D5/D9A9\D9A9;
                                                                ;;                        ;
CODE_00D9D7:          CMP.B #$F0                                ;;D977|D9D7+D9D7/D9AB\D9AB;
                      BCS +                                     ;;D979|D9D9+D9D9/D9AD\D9AD;
                      LDA.B #$F0                                ;;D97B|D9DB+D9DB/D9AF\D9AF;
                    + STA.B !PlayerYSpeed                       ;;D97D|D9DD+D9DD/D9B1\D9B1;
                      LDY.B #$80                                ;;D97F|D9DF+D9DF/D9B3\D9B3;
                      LDA.B !byetudlrHold                       ;;D981|D9E1+D9E1/D9B5\D9B5;
                      AND.B #$03                                ;;D983|D9E3+D9E3/D9B7\D9B7;
                      BNE CODE_00DA48                           ;;D985|D9E5+D9E5/D9B9\D9B9;
                      LDA.B !PlayerDirection                    ;;D987|D9E7+D9E7/D9BB\D9BB;
                      BRA CODE_00DA46                           ;;D989|D9E9+D9E9/D9BD\D9BD;
                                                                ;;                        ;
CODE_00D9EB:          LDA.B !byetudlrFrame                      ;;D98B|D9EB+D9EB/D9BF\D9BF;
                      ORA.B !axlr0000Frame                      ;;D98D|D9ED+D9ED/D9C1\D9C1;
                      BPL CODE_00DA0B                           ;;D98F|D9EF+D9EF/D9C3\D9C3;
                      LDA.W !PlayerCanJumpWater                 ;;D991|D9F1+D9F1/D9C5\D9C5;
                      BNE CODE_00DA0B                           ;;D994|D9F4+D9F4/D9C8\D9C8;
                      JSR CODE_00DAA9                           ;;D996|D9F6+D9F6/D9CA\D9CA;
                      LDA.B !PlayerInAir                        ;;D999|D9F9+D9F9/D9CD\D9CD;
                      BNE +                                     ;;D99B|D9FB+D9FB/D9CF\D9CF;
                      LDA.B #$0B                                ;;D99D|D9FD+D9FD/D9D1\D9D1;
                      STA.B !PlayerInAir                        ;;D99F|D9FF+D9FF/D9D3\D9D3;
                      STZ.W !PlayerSlopePose                    ;;D9A1|DA01+DA01/D9D5\D9D5;
                      LDY.B #$F0                                ;;D9A4|DA04+DA04/D9D8\D9D8;
                    + TYA                                       ;;D9A6|DA06+DA06/D9DA\D9DA;
                      SEC                                       ;;D9A7|DA07+DA07/D9DB\D9DB;
                      SBC.B #$20                                ;;D9A8|DA08+DA08/D9DC\D9DC;
                      TAY                                       ;;D9AA|DA0A+DA0A/D9DE\D9DE;
CODE_00DA0B:          LDA.B !EffFrame                           ;;D9AB|DA0B+DA0B/D9DF\D9DF;
                      AND.B #$03                                ;;D9AD|DA0D+DA0D/D9E1\D9E1;
                      BNE +                                     ;;D9AF|DA0F+DA0F/D9E3\D9E3;
                      INY                                       ;;D9B1|DA11+DA11/D9E5\D9E5;
                      INY                                       ;;D9B2|DA12+DA12/D9E6\D9E6;
                    + LDA.B !byetudlrHold                       ;;D9B3|DA13+DA13/D9E7\D9E7;
                      AND.B #$0C                                ;;D9B5|DA15+DA15/D9E9\D9E9;
                      LSR A                                     ;;D9B7|DA17+DA17/D9EB\D9EB;
                      LSR A                                     ;;D9B8|DA18+DA18/D9EC\D9EC;
                      TAX                                       ;;D9B9|DA19+DA19/D9ED\D9ED;
                      TYA                                       ;;D9BA|DA1A+DA1A/D9EE\D9EE;
                      BMI CODE_00DA25                           ;;D9BB|DA1B+DA1B/D9EF\D9EF;
                      CMP.B #$40                                ;;D9BD|DA1D+DA1D/D9F1\D9F1;
                      BCC +                                     ;;D9BF|DA1F+DA1F/D9F3\D9F3;
                      LDA.B #$40                                ;;D9C1|DA21+DA21/D9F5\D9F5;
                      BRA +                                     ;;D9C3|DA23+DA23/D9F7\D9F7;
                                                                ;;                        ;
CODE_00DA25:          CMP.W DATA_00D984,X                       ;;D9C5|DA25+DA25/D9F9\D9F9;
                      BCS +                                     ;;D9C8|DA28+DA28/D9FC\D9FC;
                      LDA.W DATA_00D984,X                       ;;D9CA|DA2A+DA2A/D9FE\D9FE;
                    + STA.B !PlayerYSpeed                       ;;D9CD|DA2D+DA2D/DA01\DA01;
                      LDA.B !PlayerInAir                        ;;D9CF|DA2F+DA2F/DA03\DA03;
                      BNE CODE_00DA40                           ;;D9D1|DA31+DA31/DA05\DA05;
                      LDA.B !byetudlrHold                       ;;D9D3|DA33+DA33/DA07\DA07;
                      AND.B #$04                                ;;D9D5|DA35+DA35/DA09\DA09;
                      BEQ CODE_00DA40                           ;;D9D7|DA37+DA37/DA0B\DA0B;
                      STZ.W !CapeInteracts                      ;;D9D9|DA39+DA39/DA0D\DA0D;
                      INC.B !PlayerIsDucking                    ;;D9DC|DA3C+DA3C/DA10\DA10;
                      BRA CODE_00DA69                           ;;D9DE|DA3E+DA3E/DA12\DA12;
                                                                ;;                        ;
CODE_00DA40:          LDA.B !byetudlrHold                       ;;D9E0|DA40+DA40/DA14\DA14;
                      AND.B #$03                                ;;D9E2|DA42+DA42/DA16\DA16;
                      BEQ CODE_00DA69                           ;;D9E4|DA44+DA44/DA18\DA18;
CODE_00DA46:          LDY.B #$78                                ;;D9E6|DA46+DA46/DA1A\DA1A;
CODE_00DA48:          STY.B !_0                                 ;;D9E8|DA48+DA48/DA1C\DA1C;
                      AND.B #$01                                ;;D9EA|DA4A+DA4A/DA1E\DA1E;
                      STA.B !PlayerDirection                    ;;D9EC|DA4C+DA4C/DA20\DA20;
                      PHA                                       ;;D9EE|DA4E+DA4E/DA22\DA22;
                      ASL A                                     ;;D9EF|DA4F+DA4F/DA23\DA23;
                      ASL A                                     ;;D9F0|DA50+DA50/DA24\DA24;
                      TAX                                       ;;D9F1|DA51+DA51/DA25\DA25;
                      PLA                                       ;;D9F2|DA52+DA52/DA26\DA26;
                      ORA.B !_0                                 ;;D9F3|DA53+DA53/DA27\DA27;
                      LDY.W !Layer3TideSetting                  ;;D9F5|DA55+DA55/DA29\DA29;
                      BEQ +                                     ;;D9F8|DA58+DA58/DA2C\DA2C;
                      CLC                                       ;;D9FA|DA5A+DA5A/DA2E\DA2E;
                      ADC.B #$04                                ;;D9FB|DA5B+DA5B/DA2F\DA2F;
                    + TAY                                       ;;D9FD|DA5D+DA5D/DA31\DA31;
                      LDA.B !PlayerInAir                        ;;D9FE|DA5E+DA5E/DA32\DA32;
                      BEQ +                                     ;;DA00|DA60+DA60/DA34\DA34;
                      INY                                       ;;DA02|DA62+DA62/DA36\DA36;
                      INY                                       ;;DA03|DA63+DA63/DA37\DA37;
                    + JSR CODE_00D742                           ;;DA04|DA64+DA64/DA38\DA38;
                      BRA CODE_00DA7C                           ;;DA07|DA67+DA67/DA3B\DA3B;
                                                                ;;                        ;
CODE_00DA69:          LDY.B #$00                                ;;DA09|DA69+DA69/DA3D\DA3D;
                      TYX                                       ;;DA0B|DA6B+DA6B/DA3F\DA3F;
                      LDA.W !Layer3TideSetting                  ;;DA0C|DA6C+DA6C/DA40\DA40;
                      BEQ +                                     ;;DA0F|DA6F+DA6F/DA43\DA43;
                      LDX.B #$1E                                ;;DA11|DA71+DA71/DA45\DA45;
                      LDA.B !PlayerInAir                        ;;DA13|DA73+DA73/DA47\DA47;
                      BNE +                                     ;;DA15|DA75+DA75/DA49\DA49;
                      INX                                       ;;DA17|DA77+DA77/DA4B\DA4B;
                      INX                                       ;;DA18|DA78+DA78/DA4C\DA4C;
                    + JSR CODE_00D772                           ;;DA19|DA79+DA79/DA4D\DA4D;
CODE_00DA7C:          JSR CODE_00D062                           ;;DA1C|DA7C+DA7C/DA50\DA50;
                      JSL CODE_00CEB1                           ;;DA1F|DA7F+DA7F/DA53\DA53;
                      LDA.W !CapeSpinTimer                      ;;DA23|DA83+DA83/DA57\DA57;
                      BNE Return00DA8C                          ;;DA26|DA86+DA86/DA5A\DA5A;
                      LDA.B !PlayerInAir                        ;;DA28|DA88+DA88/DA5C\DA5C;
                      BNE +                                     ;;DA2A|DA8A+DA8A/DA5E\DA5E;
Return00DA8C:         RTS                                       ;;DA2C|DA8C+DA8C/DA60\DA60; Return 
                                                                ;;                        ;
                    + LDA.B #$18                                ;;DA2D|DA8D+DA8D/DA61\DA61;
                      LDY.W !ShootFireTimer                     ;;DA2F|DA8F+DA8F/DA63\DA63;
                      BNE +                                     ;;DA32|DA92+DA92/DA66\DA66;
                      LDA.W !PlayerAniTimer                     ;;DA34|DA94+DA94/DA68\DA68;
                      LSR A                                     ;;DA37|DA97+DA97/DA6B\DA6B;
                      LSR A                                     ;;DA38|DA98+DA98/DA6C\DA6C;
                      AND.B #$03                                ;;DA39|DA99+DA99/DA6D\DA6D;
                      TAY                                       ;;DA3B|DA9B+DA9B/DA6F\DA6F;
                      LDA.W DATA_00D980,Y                       ;;DA3C|DA9C+DA9C/DA70\DA70;
                    + LDY.W !IsCarryingItem                     ;;DA3F|DA9F+DA9F/DA73\DA73;
                      BEQ +                                     ;;DA42|DAA2+DAA2/DA76\DA76;
                      INC A                                     ;;DA44|DAA4+DAA4/DA78\DA78;
                    + STA.W !PlayerPose                         ;;DA45|DAA5+DAA5/DA79\DA79;
                      RTS                                       ;;DA48|DAA8+DAA8/DA7C\DA7C; Return 
                                                                ;;                        ;
CODE_00DAA9:          LDA.B #!SFX_SWIM                          ;;DA49|DAA9+DAA9/DA7D\DA7D; \ Play sound effect 
                      STA.W !SPCIO0                             ;;DA4B|DAAB+DAAB/DA7F\DA7F; / 
                      LDA.W !PlayerAniTimer                     ;;DA4E|DAAE+DAAE/DA82\DA82;
                      ORA.B #$10                                ;;DA51|DAB1+DAB1/DA85\DA85;
                      STA.W !PlayerAniTimer                     ;;DA53|DAB3+DAB3/DA87\DA87;
                      RTS                                       ;;DA56|DAB6+DAB6/DA8A\DA8A; Return 
                                                                ;;                        ;
                                                                ;;                        ;
DATA_00DAB7:          db $10,$08,$F0,$F8                        ;;DA57|DAB7+DAB7/DA8B\DA8B;
                                                                ;;                        ;
DATA_00DABB:          db $B0,$F0                                ;;DA5B|DABB+DABB/DA8F\DA8F;
                                                                ;;                        ;
DATA_00DABD:          db $00,$01,$00,$01,$01,$01,$01,$01        ;;DA5D|DABD+DABD/DA91\DA91;
                      db $01,$01,$01,$01,$01,$01,$01,$01        ;;DA65|DAC5+DAC5/DA99\DA99;
DATA_00DACD:          db $22,$15,$22,$15,$21,$1F,$20,$20        ;;DA6D|DACD+DACD/DAA1\DAA1;
                      db $20,$20,$1F,$21,$1F,$21                ;;DA75|DAD5+DAD5/DAA9\DAA9;
                                                                ;;                        ;
ClimbingImgs:         db $15,$22                                ;;DA7B|DADB+DADB/DAAF\DAAF;
                                                                ;;                        ;
ClimbPunchingImgs:    db $1E,$23                                ;;DA7D|DADD+DADD/DAB1\DAB1;
                                                                ;;                        ;
DATA_00DADF:          db $10,$0F,$0E,$0D,$0C,$0B,$0A,$09        ;;DA7F|DADF+DADF/DAB3\DAB3;
                      db $08,$07,$06,$05,$05,$05,$05,$05        ;;DA87|DAE7+DAE7/DABB\DABB;
                      db $05,$05                                ;;DA8F|DAEF+DAEF/DAC3\DAC3;
                                                                ;;                        ;
DATA_00DAF1:          db $20,$01,$40,$01,$2A,$01,$2A,$01        ;;DA91|DAF1+DAF1/DAC5\DAC5;
                      db $30,$01,$33,$01,$32,$01,$34,$01        ;;DA99|DAF9+DAF9/DACD\DACD;
                      db $36,$01,$38,$01,$3A,$01,$3B,$01        ;;DAA1|DB01+DB01/DAD5\DAD5;
                      db $45,$01,$45,$01,$45,$01,$45,$01        ;;DAA9|DB09+DB09/DADD\DADD;
                      db $45,$01,$45,$01,$08,$F8                ;;DAB1|DB11+DB11/DAE5\DAE5;
                                                                ;;                        ;
CODE_00DB17:          STZ.B !PlayerInAir                        ;;DAB7|DB17+DB17/DAEB\DAEB;
                      STZ.B !PlayerYSpeed                       ;;DAB9|DB19+DB19/DAED\DAED;
                      STZ.W !PlayerCapePose                     ;;DABB|DB1B+DB1B/DAEF\DAEF;
                      STZ.W !SpinJumpFlag                       ;;DABE|DB1E+DB1E/DAF2\DAF2;
                      LDY.W !NetDoorTimer                       ;;DAC1|DB21+DB21/DAF5\DAF5;
                      BEQ CODE_00DB7D                           ;;DAC4|DB24+DB24/DAF8\DAF8;
                      LDA.W !NetDoorPlayerXOffset               ;;DAC6|DB26+DB26/DAFA\DAFA;
                      BPL +                                     ;;DAC9|DB29+DB29/DAFD\DAFD;
                      EOR.B #$FF                                ;;DACB|DB2B+DB2B/DAFF\DAFF;
                      INC A                                     ;;DACD|DB2D+DB2D/DB01\DB01;
                    + TAX                                       ;;DACE|DB2E+DB2E/DB02\DB02;
                      CPY.B #$1E                                ;;DACF|DB2F+DB2F/DB03\DB03;
                      BCC CODE_00DB45                           ;;DAD1|DB31+DB31/DB05\DB05;
                      LDA.W DATA_00DADF,X                       ;;DAD3|DB33+DB33/DB07\DB07;
                      BIT.W !NetDoorPlayerXOffset               ;;DAD6|DB36+DB36/DB0A\DB0A;
                      BPL +                                     ;;DAD9|DB39+DB39/DB0D\DB0D;
                      EOR.B #$FF                                ;;DADB|DB3B+DB3B/DB0F\DB0F;
                      INC A                                     ;;DADD|DB3D+DB3D/DB11\DB11;
                    + STA.B !PlayerXSpeed                       ;;DADE|DB3E+DB3E/DB12\DB12;
                      STZ.B !PlayerXPosSpx                      ;;DAE0|DB40+DB40/DB14\DB14;
                      STZ.W !PlayerXSpeedFPSpx                  ;;DAE2|DB42+DB42/DB16\DB16;
CODE_00DB45:          TXA                                       ;;DAE5|DB45+DB45/DB19\DB19;
                      ASL A                                     ;;DAE6|DB46+DB46/DB1A\DB1A;
                      TAX                                       ;;DAE7|DB47+DB47/DB1B\DB1B;
                      LDA.W !NetDoorPlayerXOffset               ;;DAE8|DB48+DB48/DB1C\DB1C;
                      CPY.B #$08                                ;;DAEB|DB4B+DB4B/DB1F\DB1F;
                      BCS +                                     ;;DAED|DB4D+DB4D/DB21\DB21;
                      EOR.B #$80                                ;;DAEF|DB4F+DB4F/DB23\DB23;
                    + ASL A                                     ;;DAF1|DB51+DB51/DB25\DB25;
                      REP #$20                                  ;;DAF2|DB52+DB52/DB26\DB26; Accum (16 bit) 
                      LDA.W DATA_00DAF1,X                       ;;DAF4|DB54+DB54/DB28\DB28;
                      BCS +                                     ;;DAF7|DB57+DB57/DB2B\DB2B;
                      EOR.W #$FFFF                              ;;DAF9|DB59+DB59/DB2D\DB2D;
                      INC A                                     ;;DAFC|DB5C+DB5C/DB30\DB30;
                    + CLC                                       ;;DAFD|DB5D+DB5D/DB31\DB31;
                      ADC.B !PlayerXPosSpx                      ;;DAFE|DB5E+DB5E/DB32\DB32;
                      STA.B !PlayerXPosSpx                      ;;DB00|DB60+DB60/DB34\DB34;
                      SEP #$20                                  ;;DB02|DB62+DB62/DB36\DB36; Accum (8 bit) 
                      TYA                                       ;;DB04|DB64+DB64/DB38\DB38;
                      LSR A                                     ;;DB05|DB65+DB65/DB39\DB39;
                      AND.B #$0E                                ;;DB06|DB66+DB66/DB3A\DB3A;
                      ORA.W !NetDoorDirIndex                    ;;DB08|DB68+DB68/DB3C\DB3C;
                      TAY                                       ;;DB0B|DB6B+DB6B/DB3F\DB3F;
                      LDA.W DATA_00DABD,Y                       ;;DB0C|DB6C+DB6C/DB40\DB40;
                      BIT.W !NetDoorPlayerXOffset               ;;DB0F|DB6F+DB6F/DB43\DB43;
                      BMI +                                     ;;DB12|DB72+DB72/DB46\DB46;
                      EOR.B #$01                                ;;DB14|DB74+DB74/DB48\DB48;
                    + STA.B !PlayerDirection                    ;;DB16|DB76+DB76/DB4A\DB4A;
                      LDA.W DATA_00DACD,Y                       ;;DB18|DB78+DB78/DB4C\DB4C;
                      BRA CODE_00DB92                           ;;DB1B|DB7B+DB7B/DB4F\DB4F;
                                                                ;;                        ;
CODE_00DB7D:          STZ.B !PlayerXSpeed                       ;;DB1D|DB7D+DB7D/DB51\DB51;
                      STZ.B !PlayerXPosSpx                      ;;DB1F|DB7F+DB7F/DB53\DB53;
                      LDX.W !PlayerBehindNet                    ;;DB21|DB81+DB81/DB55\DB55;
                      LDA.W !PunchNetTimer                      ;;DB24|DB84+DB84/DB58\DB58;
                      BEQ +                                     ;;DB27|DB87+DB87/DB5B\DB5B;
                      TXA                                       ;;DB29|DB89+DB89/DB5D\DB5D;
                      INC A                                     ;;DB2A|DB8A+DB8A/DB5E\DB5E;
                      INC A                                     ;;DB2B|DB8B+DB8B/DB5F\DB5F;
                      JSR CODE_00D044                           ;;DB2C|DB8C+DB8C/DB60\DB60;
                      LDA.W ClimbPunchingImgs,X                 ;;DB2F|DB8F+DB8F/DB63\DB63;
CODE_00DB92:          STA.W !PlayerPose                         ;;DB32|DB92+DB92/DB66\DB66;
                      RTS                                       ;;DB35|DB95+DB95/DB69\DB69; Return 
                                                                ;;                        ;
                    + LDY.B !PlayerInWater                      ;;DB36|DB96+DB96/DB6A\DB6A; Mario is in Water flag 
                      BIT.B !byetudlrFrame                      ;;DB38|DB98+DB98/DB6C\DB6C;
                      BPL CODE_00DBAC                           ;;DB3A|DB9A+DB9A/DB6E\DB6E;
                      LDA.B #$0B                                ;;DB3C|DB9C+DB9C/DB70\DB70;
                      STA.B !PlayerInAir                        ;;DB3E|DB9E+DB9E/DB72\DB72;
                      LDA.W DATA_00DABB,Y                       ;;DB40|DBA0+DBA0/DB74\DB74;
                      STA.B !PlayerYSpeed                       ;;DB43|DBA3+DBA3/DB77\DB77;
                      LDA.B #!SFX_JUMP                          ;;DB45|DBA5+DBA5/DB79\DB79; \ Play sound effect 
                      STA.W !SPCIO1                             ;;DB47|DBA7+DBA7/DB7B\DB7B; / 
                      BRA CODE_00DC00                           ;;DB4A|DBAA+DBAA/DB7E\DB7E;
                                                                ;;                        ;
CODE_00DBAC:          BVC +                                     ;;DB4C|DBAC+DBAC/DB80\DB80;
                      LDA.B !PlayerIsClimbing                   ;;DB4E|DBAE+DBAE/DB82\DB82;
                      BPL +                                     ;;DB50|DBB0+DBB0/DB84\DB84;
                      LDA.B #!SFX_BONK                          ;;DB52|DBB2+DBB2/DB86\DB86; \ Play sound effect 
                      STA.W !SPCIO0                             ;;DB54|DBB4+DBB4/DB88\DB88; / 
                      STX.W !NetDoorDirIndex                    ;;DB57|DBB7+DBB7/DB8B\DB8B;
                      LDA.B !PlayerXPosNext                     ;;DB5A|DBBA+DBBA/DB8E\DB8E; Mario X 
                      AND.B #$08                                ;;DB5C|DBBC+DBBC/DB90\DB90;
                      LSR A                                     ;;DB5E|DBBE+DBBE/DB92\DB92;
                      LSR A                                     ;;DB5F|DBBF+DBBF/DB93\DB93;
                      LSR A                                     ;;DB60|DBC0+DBC0/DB94\DB94;
                      EOR.B #$01                                ;;DB61|DBC1+DBC1/DB95\DB95;
                      STA.B !PlayerDirection                    ;;DB63|DBC3+DBC3/DB97\DB97; Mario's Direction 
                      LDA.B #$08                                ;;DB65|DBC5+DBC5/DB99\DB99;
                      STA.W !PunchNetTimer                      ;;DB67|DBC7+DBC7/DB9B\DB9B;
                    + LDA.W ClimbingImgs,X                      ;;DB6A|DBCA+DBCA/DB9E\DB9E;
                      STA.W !PlayerPose                         ;;DB6D|DBCD+DBCD/DBA1\DBA1; Store A in Mario image 
                      LDA.B !byetudlrHold                       ;;DB70|DBD0+DBD0/DBA4\DBA4;
                      AND.B #$03                                ;;DB72|DBD2+DBD2/DBA6\DBA6;
                      BEQ CODE_00DBF2                           ;;DB74|DBD4+DBD4/DBA8\DBA8;
                      LSR A                                     ;;DB76|DBD6+DBD6/DBAA\DBAA;
                      TAX                                       ;;DB77|DBD7+DBD7/DBAB\DBAB;
                      LDA.B !GraphicsCompPtr+1                  ;;DB78|DBD8+DBD8/DBAC\DBAC;
                      AND.B #$18                                ;;DB7A|DBDA+DBDA/DBAE\DBAE;
                      CMP.B #$18                                ;;DB7C|DBDC+DBDC/DBB0\DBB0;
                      BEQ CODE_00DBE8                           ;;DB7E|DBDE+DBDE/DBB2\DBB2;
                      LDA.B !PlayerIsClimbing                   ;;DB80|DBE0+DBE0/DBB4\DBB4;
                      BPL CODE_00DC00                           ;;DB82|DBE2+DBE2/DBB6\DBB6;
                      CPX.B !GraphicsCompPtr+2                  ;;DB84|DBE4+DBE4/DBB8\DBB8;
                      BEQ CODE_00DBF2                           ;;DB86|DBE6+DBE6/DBBA\DBBA;
CODE_00DBE8:          TXA                                       ;;DB88|DBE8+DBE8/DBBC\DBBC;
                      ASL A                                     ;;DB89|DBE9+DBE9/DBBD\DBBD;
                      ORA.B !PlayerInWater                      ;;DB8A|DBEA+DBEA/DBBE\DBBE;
                      TAX                                       ;;DB8C|DBEC+DBEC/DBC0\DBC0;
                      LDA.W DATA_00DAB7,X                       ;;DB8D|DBED+DBED/DBC1\DBC1;
                      STA.B !PlayerXSpeed                       ;;DB90|DBF0+DBF0/DBC4\DBC4;
CODE_00DBF2:          LDA.B !byetudlrHold                       ;;DB92|DBF2+DBF2/DBC6\DBC6; \ 
                      AND.B #$0C                                ;;DB94|DBF4+DBF4/DBC8\DBC8;  |If up or down isn't pressed, branch to $DC16 
                      BEQ CODE_00DC16                           ;;DB96|DBF6+DBF6/DBCA\DBCA; / 
                      AND.B #$08                                ;;DB98|DBF8+DBF8/DBCC\DBCC; \ If up is pressed, branch to $DC03 
                      BNE CODE_00DC03                           ;;DB9A|DBFA+DBFA/DBCE\DBCE; / 
                      LSR.B !GraphicsCompPtr+1                  ;;DB9C|DBFC+DBFC/DBD0\DBD0;
                      BCS CODE_00DC0B                           ;;DB9E|DBFE+DBFE/DBD2\DBD2;
CODE_00DC00:          STZ.B !PlayerIsClimbing                   ;;DBA0|DC00+DC00/DBD4\DBD4; Mario isn't climbing 
                      RTS                                       ;;DBA2|DC02+DC02/DBD6\DBD6; Return 
                                                                ;;                        ;
CODE_00DC03:          INY                                       ;;DBA3|DC03+DC03/DBD7\DBD7;
                      INY                                       ;;DBA4|DC04+DC04/DBD8\DBD8;
                      LDA.B !GraphicsCompPtr+1                  ;;DBA5|DC05+DC05/DBD9\DBD9;
                      AND.B #$02                                ;;DBA7|DC07+DC07/DBDB\DBDB;
                      BEQ CODE_00DC16                           ;;DBA9|DC09+DC09/DBDD\DBDD;
CODE_00DC0B:          LDA.B !PlayerIsClimbing                   ;;DBAB|DC0B+DC0B/DBDF\DBDF;
                      BMI +                                     ;;DBAD|DC0D+DC0D/DBE1\DBE1;
                      STZ.B !PlayerXSpeed                       ;;DBAF|DC0F+DC0F/DBE3\DBE3;
                    + LDA.W DATA_00DAB7,Y                       ;;DBB1|DC11+DC11/DBE5\DBE5;
                      STA.B !PlayerYSpeed                       ;;DBB4|DC14+DC14/DBE8\DBE8;
CODE_00DC16:          ORA.B !PlayerXSpeed                       ;;DBB6|DC16+DC16/DBEA\DBEA;
                      BEQ +                                     ;;DBB8|DC18+DC18/DBEC\DBEC;
                      LDA.W !PlayerAniTimer                     ;;DBBA|DC1A+DC1A/DBEE\DBEE;
                      ORA.B #$08                                ;;DBBD|DC1D+DC1D/DBF1\DBF1;
                      STA.W !PlayerAniTimer                     ;;DBBF|DC1F+DC1F/DBF3\DBF3;
                      AND.B #$07                                ;;DBC2|DC22+DC22/DBF6\DBF6;
                      BNE +                                     ;;DBC4|DC24+DC24/DBF8\DBF8;
                      LDA.B !PlayerDirection                    ;;DBC6|DC26+DC26/DBFA\DBFA;
                      EOR.B #$01                                ;;DBC8|DC28+DC28/DBFC\DBFC;
                      STA.B !PlayerDirection                    ;;DBCA|DC2A+DC2A/DBFE\DBFE;
                    + RTS                                       ;;DBCC|DC2C+DC2C/DC00\DC00; Return 
                                                                ;;                        ;
CODE_00DC2D:          LDA.B !PlayerYSpeed                       ;;DBCD|DC2D+DC2D/DC01\DC01; \ Store Mario's Y speed in $8A 
                      STA.B !GraphicsCompPtr                    ;;DBCF|DC2F+DC2F/DC03\DC03; /  
                      LDA.W !WallrunningType                    ;;DBD1|DC31+DC31/DC05\DC05;
                      BEQ CODE_00DC40                           ;;DBD4|DC34+DC34/DC08\DC08;
                      LSR A                                     ;;DBD6|DC36+DC36/DC0A\DC0A;
                      LDA.B !PlayerXSpeed                       ;;DBD7|DC37+DC37/DC0B\DC0B;
                      BCC +                                     ;;DBD9|DC39+DC39/DC0D\DC0D;
                      EOR.B #$FF                                ;;DBDB|DC3B+DC3B/DC0F\DC0F;
                      INC A                                     ;;DBDD|DC3D+DC3D/DC11\DC11;
                    + STA.B !PlayerYSpeed                       ;;DBDE|DC3E+DC3E/DC12\DC12;
CODE_00DC40:          LDX.B #$00                                ;;DBE0|DC40+DC40/DC14\DC14;
                      JSR CODE_00DC4F                           ;;DBE2|DC42+DC42/DC16\DC16;
                      LDX.B #$02                                ;;DBE5|DC45+DC45/DC19\DC19;
                      JSR CODE_00DC4F                           ;;DBE7|DC47+DC47/DC1B\DC1B;
                      LDA.B !GraphicsCompPtr                    ;;DBEA|DC4A+DC4A/DC1E\DC1E;
                      STA.B !PlayerYSpeed                       ;;DBEC|DC4C+DC4C/DC20\DC20;
                      RTS                                       ;;DBEE|DC4E+DC4E/DC22\DC22; Return 
                                                                ;;                        ;
                   if ver_is_ntsc(!_VER)              ;\   IF   ;;++++++++++++++++++++++++; J, U, & SS
CODE_00DC4F:          LDA.B !PlayerXSpeed,X                     ;;DBEF|DC4F+DC4F          ;
                      ASL A                                     ;;DBF1|DC51+DC51          ;
                      ASL A                                     ;;DBF2|DC52+DC52          ;
                      ASL A                                     ;;DBF3|DC53+DC53          ;
                      ASL A                                     ;;DBF4|DC54+DC54          ;
                      CLC                                       ;;DBF5|DC55+DC55          ;
                      ADC.W !PlayerXSpeedFPSpx,X                ;;DBF6|DC56+DC56          ;
                      STA.W !PlayerXSpeedFPSpx,X                ;;DBF9|DC59+DC59          ;
                      REP #$20                                  ;;DBFC|DC5C+DC5C          ; Accum (16 bit) 
                      PHP                                       ;;DBFE|DC5E+DC5E          ;
                      LDA.B !PlayerXSpeed,X                     ;;DBFF|DC5F+DC5F          ;
                      LSR A                                     ;;DC01|DC61+DC61          ;
                      LSR A                                     ;;DC02|DC62+DC62          ;
                      LSR A                                     ;;DC03|DC63+DC63          ;
                      LSR A                                     ;;DC04|DC64+DC64          ;
                      AND.W #$000F                              ;;DC05|DC65+DC65          ;
                      CMP.W #$0008                              ;;DC08|DC68+DC68          ;
                      BCC +                                     ;;DC0B|DC6B+DC6B          ;
                      ORA.W #$FFF0                              ;;DC0D|DC6D+DC6D          ;
                    + PLP                                       ;;DC10|DC70+DC70          ;
                      ADC.B !PlayerXPosNext,X                   ;;DC11|DC71+DC71          ;
                      STA.B !PlayerXPosNext,X                   ;;DC13|DC73+DC73          ;
                      SEP #$20                                  ;;DC15|DC75+DC75          ; Accum (8 bit) 
                      RTS                                       ;;DC17|DC77+DC77          ; Return 
                   else                               ;<  ELSE  ;;------------------------; E0 & E1
CODE_00DC4F:          LDA.B !PlayerXSpeed,X                     ;;              /DC23\DC23;
                      BPL +                                     ;;              /DC25\DC25;
                      EOR.B #$FF                                ;;              /DC27\DC27;
                      INC A                                     ;;              /DC29\DC29;
                    + STA.B !_1                                 ;;              /DC2A\DC2A;
                      STZ.B !_0                                 ;;              /DC2C\DC2C;
                      STA.W !HW_WRMPYA                          ;;              /DC2E\DC2E;
                      TXA                                       ;;              /DC31\DC31;
                      BEQ +                                     ;;              /DC32\DC32;
                      LDA.B #$28                                ;;              /DC34\DC34;
                    + STA.W !HW_WRMPYB                          ;;              /DC36\DC36;
                      NOP                                       ;;              /DC39\DC39;
                      REP #$20                                  ;;              /DC3A\DC3A;
                      LDA.B !_0                                 ;;              /DC3C\DC3C;
                      CLC                                       ;;              /DC3E\DC3E;
                      ADC.W !HW_RDMPY                           ;;              /DC3F\DC3F;
                      LSR A                                     ;;              /DC42\DC42;
                      LSR A                                     ;;              /DC43\DC43;
                      LSR A                                     ;;              /DC44\DC44;
                      LSR A                                     ;;              /DC45\DC45;
                      STZ.B !_2                                 ;;              /DC46\DC46;
                      BIT.B !PlayerXPosSpx,X                    ;;              /DC48\DC48;
                      BPL +                                     ;;              /DC4A\DC4A;
                      DEC.B !_2                                 ;;              /DC4C\DC4C;
                      EOR.W #$FFFF                              ;;              /DC4E\DC4E;
                      INC A                                     ;;              /DC51\DC51;
                    + STA.B !_0                                 ;;              /DC52\DC52;
                      SEP #$20                                  ;;              /DC54\DC54;
                      CLC                                       ;;              /DC56\DC56;
                      ADC.W !PlayerXSpeedFPSpx,X                ;;              /DC57\DC57;
                      STA.W !PlayerXSpeedFPSpx,X                ;;              /DC5A\DC5A;
                      REP #$20                                  ;;              /DC5D\DC5D;
                      LDA.B !_1                                 ;;              /DC5F\DC5F;
                      ADC.B !PlayerXPosNext,X                   ;;              /DC61\DC61;
                      STA.B !PlayerXPosNext,X                   ;;              /DC63\DC63;
                      SEP #$20                                  ;;              /DC65\DC65;
                      RTS                                       ;;              /DC67\DC67;
                   endif                              ;/ ENDIF  ;;++++++++++++++++++++++++;
                                                                ;;                        ;
                                                                ;;                        ;
NumWalkingFrames:     db $01,$02,$02,$02                        ;;DC18|DC78+DC78/DC68\DC68;
                                                                ;;                        ;
                   if ver_is_ntsc(!_VER)              ;\   IF   ;;++++++++++++++++++++++++; J, U, & SS
DATA_00DC7C:          db $0A,$08,$06,$04,$03,$02,$01,$01        ;;DC1C|DC7C+DC7C          ;
                      db $0A,$08,$06,$04,$03,$02,$01,$01        ;;DC24|DC84+DC84          ;
                      db $0A,$08,$06,$04,$03,$02,$01,$01        ;;DC2C|DC8C+DC8C          ;
                      db $08,$06,$04,$03,$02,$01,$01,$01        ;;DC34|DC94+DC94          ;
                      db $08,$06,$04,$03,$02,$01,$01,$01        ;;DC3C|DC9C+DC9C          ;
                      db $05,$04,$03,$02,$01,$01,$01,$01        ;;DC44|DCA4+DCA4          ;
                      db $05,$04,$03,$02,$01,$01,$01,$01        ;;DC4C|DCAC+DCAC          ;
                      db $05,$04,$03,$02,$01,$01,$01,$01        ;;DC54|DCB4+DCB4          ;
                      db $05,$04,$03,$02,$01,$01,$01,$01        ;;DC5C|DCBC+DCBC          ;
                      db $05,$04,$03,$02,$01,$01,$01,$01        ;;DC64|DCC4+DCC4          ;
                      db $05,$04,$03,$02,$01,$01,$01,$01        ;;DC6C|DCCC+DCCC          ;
                      db $04,$03,$02,$01,$01,$01,$01,$01        ;;DC74|DCD4+DCD4          ;
                      db $04,$03,$02,$01,$01,$01,$01,$01        ;;DC7C|DCDC+DCDC          ;
                      db $02,$02,$02,$02,$02,$02,$02,$02        ;;DC84|DCE4+DCE4          ;
                   elseif ver_is_hires(!_VER)         ;< ELSEIF ;;------------------------; E1
DATA_00DC7C:          db $09,$08,$06,$05,$04,$03,$03,$02        ;;                   \DC6C;
                      db $09,$08,$06,$05,$04,$03,$03,$02        ;;                   \DC74;
                      db $09,$08,$06,$05,$04,$03,$03,$02        ;;                   \DC7C;
                      db $07,$06,$05,$04,$03,$03,$02,$01        ;;                   \DC84;
                      db $07,$06,$05,$04,$03,$03,$02,$01        ;;                   \DC8C;
                      db $05,$04,$04,$03,$03,$02,$01,$01        ;;                   \DC94;
                      db $05,$04,$03,$03,$02,$02,$01,$01        ;;                   \DC9C;
                      db $05,$04,$03,$03,$02,$02,$01,$01        ;;                   \DCA4;
                      db $05,$04,$03,$03,$02,$02,$01,$01        ;;                   \DCAC;
                      db $05,$04,$03,$03,$02,$02,$01,$01        ;;                   \DCB4;
                      db $05,$04,$03,$03,$02,$02,$01,$01        ;;                   \DCBC;
                      db $04,$03,$03,$02,$02,$01,$01,$01        ;;                   \DCC4;
                      db $04,$03,$03,$02,$02,$01,$01,$01        ;;                   \DCCC;
                      db $02,$02,$02,$02,$02,$02,$02,$02        ;;                   \DCD4;
                   else                               ;<  ELSE  ;;------------------------; E0
DATA_00DC7C:          db $0A,$08,$07,$06,$05,$04,$03,$02        ;;              /DC6C     ;
                      db $0A,$08,$07,$06,$05,$04,$03,$02        ;;              /DC74     ;
                      db $0A,$08,$07,$06,$05,$04,$03,$02        ;;              /DC7C     ;
                      db $08,$07,$06,$05,$04,$03,$02,$01        ;;              /DC84     ;
                      db $08,$07,$06,$05,$04,$03,$02,$01        ;;              /DC8C     ;
                      db $05,$04,$04,$03,$03,$02,$01,$01        ;;              /DC94     ;
                      db $05,$04,$03,$03,$02,$02,$01,$01        ;;              /DC9C     ;
                      db $05,$04,$03,$03,$02,$02,$01,$01        ;;              /DCA4     ;
                      db $05,$04,$03,$03,$02,$02,$01,$01        ;;              /DCAC     ;
                      db $05,$04,$03,$03,$02,$02,$01,$01        ;;              /DCB4     ;
                      db $05,$04,$03,$03,$02,$02,$01,$01        ;;              /DCBC     ;
                      db $04,$03,$03,$02,$02,$01,$01,$01        ;;              /DCC4     ;
                      db $04,$03,$03,$02,$02,$01,$01,$01        ;;              /DCCC     ;
                      db $02,$02,$02,$02,$02,$02,$02,$02        ;;              /DCD4     ;
                   endif                              ;/ ENDIF  ;;++++++++++++++++++++++++;
                                                                ;;                        ;
DATA_00DCEC:          db $00,$00,$00,$00,$00,$00,$00,$00        ;;DC8C|DCEC+DCEC/DCDC\DCDC;
                      db $00,$00,$00,$00,$00,$00,$00,$00        ;;DC94|DCF4+DCF4/DCE4\DCE4;
                      db $02,$04,$04,$04,$0E,$08,$00,$00        ;;DC9C|DCFC+DCFC/DCEC\DCEC;
                      db $00,$00,$00,$00,$00,$00,$08,$08        ;;DCA4|DD04+DD04/DCF4\DCF4;
                      db $08,$08,$08,$08,$00,$00,$00,$00        ;;DCAC|DD0C+DD0C/DCFC\DCFC;
                      db $0C,$10,$12,$14,$16,$18,$1A,$00        ;;DCB4|DD14+DD14/DD04\DD04;
                      db $00,$00,$00,$00,$00,$00,$00,$00        ;;DCBC|DD1C+DD1C/DD0C\DD0C;
                      db $00,$00,$00,$00,$00,$06,$00,$00        ;;DCC4|DD24+DD24/DD14\DD14;
                      db $00,$00,$00,$0A,$00,$00                ;;DCCC|DD2C+DD2C/DD1C\DD1C;
                                                                ;;                        ;
DATA_00DD32:          db $00,$08,$10,$14,$18,$1E,$24,$24        ;;DCD2|DD32+DD32/DD22\DD22;
                      db $28,$30,$38,$3E,$44,$4A,$50,$54        ;;DCDA|DD3A+DD3A/DD2A\DD2A;
                      db $58,$58,$5C,$60,$64,$68,$6C,$70        ;;DCE2|DD42+DD42/DD32\DD32;
                      db $74,$78,$7C,$80                        ;;DCEA|DD4A+DD4A/DD3A\DD3A;
                                                                ;;                        ;
DATA_00DD4E:          db $00,$00,$00,$00,$10,$00,$10,$00        ;;DCEE|DD4E+DD4E/DD3E\DD3E;
                      db $00,$00,$00,$00,$F8,$FF,$F8,$FF        ;;DCF6|DD56+DD56/DD46\DD46;
                      db $0E,$00,$06,$00,$F2,$FF,$FA,$FF        ;;DCFE|DD5E+DD5E/DD4E\DD4E;
                      db $17,$00,$07,$00,$0F,$00,$EA,$FF        ;;DD06|DD66+DD66/DD56\DD56;
                      db $FA,$FF,$FA,$FF,$00,$00,$00,$00        ;;DD0E|DD6E+DD6E/DD5E\DD5E;
                      db $00,$00,$00,$00,$10,$00,$10,$00        ;;DD16|DD76+DD76/DD66\DD66;
                      db $00,$00,$00,$00,$F8,$FF,$F8,$FF        ;;DD1E|DD7E+DD7E/DD6E\DD6E;
                      db $00,$00,$F8,$FF,$08,$00,$00,$00        ;;DD26|DD86+DD86/DD76\DD76;
                      db $08,$00,$F8,$FF,$00,$00,$00,$00        ;;DD2E|DD8E+DD8E/DD7E\DD7E;
                      db $F8,$FF,$00,$00,$00,$00,$10,$00        ;;DD36|DD96+DD96/DD86\DD86;
                      db $02,$00,$00,$00,$FE,$FF,$00,$00        ;;DD3E|DD9E+DD9E/DD8E\DD8E;
                      db $00,$00,$00,$00,$FC,$FF,$05,$00        ;;DD46|DDA6+DDA6/DD96\DD96;
                      db $04,$00,$FB,$FF,$FB,$FF,$06,$00        ;;DD4E|DDAE+DDAE/DD9E\DD9E;
                      db $05,$00,$FA,$FF,$F9,$FF,$09,$00        ;;DD56|DDB6+DDB6/DDA6\DDA6;
                      db $07,$00,$F7,$FF,$FD,$FF,$FD,$FF        ;;DD5E|DDBE+DDBE/DDAE\DDAE;
                      db $03,$00,$03,$00,$FF,$FF,$07,$00        ;;DD66|DDC6+DDC6/DDB6\DDB6;
                      db $01,$00,$F9,$FF,$0A,$00,$F6,$FF        ;;DD6E|DDCE+DDCE/DDBE\DDBE;
                      db $08,$00,$F8,$FF,$08,$00,$F8,$FF        ;;DD76|DDD6+DDD6/DDC6\DDC6;
                      db $00,$00,$04,$00,$FC,$FF,$FE,$FF        ;;DD7E|DDDE+DDDE/DDCE\DDCE;
                      db $02,$00,$0B,$00,$F5,$FF,$14,$00        ;;DD86|DDE6+DDE6/DDD6\DDD6;
                      db $EC,$FF,$0E,$00,$F3,$FF,$08,$00        ;;DD8E|DDEE+DDEE/DDDE\DDDE;
                      db $F8,$FF,$0C,$00,$14,$00,$FD,$FF        ;;DD96|DDF6+DDF6/DDE6\DDE6;
                      db $F4,$FF,$F4,$FF,$0B,$00,$0B,$00        ;;DD9E|DDFE+DDFE/DDEE\DDEE;
                      db $03,$00,$13,$00,$F5,$FF,$05,$00        ;;DDA6|DE06+DE06/DDF6\DDF6;
                      db $F5,$FF,$09,$00,$01,$00,$01,$00        ;;DDAE|DE0E+DE0E/DDFE\DDFE;
                      db $F7,$FF,$07,$00,$07,$00,$05,$00        ;;DDB6|DE16+DE16/DE06\DE06;
                      db $0D,$00,$0D,$00,$FB,$FF,$FB,$FF        ;;DDBE|DE1E+DE1E/DE0E\DE0E;
                      db $FB,$FF,$FF,$FF,$0F,$00,$01,$00        ;;DDC6|DE26+DE26/DE16\DE16;
                      db $F9,$FF,$00,$00                        ;;DDCE|DE2E+DE2E/DE1E\DE1E;
                                                                ;;                        ;
DATA_00DE32:          db $01,$00,$11,$00,$11,$00,$19,$00        ;;DDD2|DE32+DE32/DE22\DE22;
                      db $01,$00,$11,$00,$11,$00,$19,$00        ;;DDDA|DE3A+DE3A/DE2A\DE2A;
                      db $0C,$00,$14,$00,$0C,$00,$14,$00        ;;DDE2|DE42+DE42/DE32\DE32;
                      db $18,$00,$18,$00,$28,$00,$18,$00        ;;DDEA|DE4A+DE4A/DE3A\DE3A;
                      db $18,$00,$28,$00,$06,$00,$16,$00        ;;DDF2|DE52+DE52/DE42\DE42;
                      db $01,$00,$11,$00,$09,$00,$11,$00        ;;DDFA|DE5A+DE5A/DE4A\DE4A;
                      db $01,$00,$11,$00,$09,$00,$11,$00        ;;DE02|DE62+DE62/DE52\DE52;
                      db $01,$00,$11,$00,$11,$00,$01,$00        ;;DE0A|DE6A+DE6A/DE5A\DE5A;
                      db $11,$00,$11,$00,$01,$00,$11,$00        ;;DE12|DE72+DE72/DE62\DE62;
                      db $11,$00,$01,$00,$11,$00,$11,$00        ;;DE1A|DE7A+DE7A/DE6A\DE6A;
                      db $01,$00,$11,$00,$01,$00,$11,$00        ;;DE22|DE82+DE82/DE72\DE72;
                      db $11,$00,$05,$00,$04,$00,$14,$00        ;;DE2A|DE8A+DE8A/DE7A\DE7A;
                      db $04,$00,$14,$00,$0C,$00,$14,$00        ;;DE32|DE92+DE92/DE82\DE82;
                      db $0C,$00,$14,$00,$10,$00,$10,$00        ;;DE3A|DE9A+DE9A/DE8A\DE8A;
                      db $10,$00,$10,$00,$10,$00,$00,$00        ;;DE42|DEA2+DEA2/DE92\DE92;
                      db $10,$00,$00,$00,$10,$00,$00,$00        ;;DE4A|DEAA+DEAA/DE9A\DE9A;
                      db $10,$00,$00,$00,$0B,$00,$0B,$00        ;;DE52|DEB2+DEB2/DEA2\DEA2;
                      db $11,$00,$11,$00,$FF,$FF,$FF,$FF        ;;DE5A|DEBA+DEBA/DEAA\DEAA;
                      db $10,$00,$10,$00,$10,$00,$10,$00        ;;DE62|DEC2+DEC2/DEB2\DEB2;
                      db $10,$00,$10,$00,$10,$00,$15,$00        ;;DE6A|DECA+DECA/DEBA\DEBA;
                      db $15,$00,$25,$00,$25,$00,$04,$00        ;;DE72|DED2+DED2/DEC2\DEC2;
                      db $04,$00,$04,$00,$14,$00,$14,$00        ;;DE7A|DEDA+DEDA/DECA\DECA;
                      db $04,$00,$14,$00,$14,$00,$04,$00        ;;DE82|DEE2+DEE2/DED2\DED2;
                      db $04,$00,$14,$00,$04,$00,$04,$00        ;;DE8A|DEEA+DEEA/DEDA\DEDA;
                      db $14,$00,$00,$00,$08,$00,$00,$00        ;;DE92|DEF2+DEF2/DEE2\DEE2;
                      db $00,$00,$08,$00,$00,$00,$00,$00        ;;DE9A|DEFA+DEFA/DEEA\DEEA;
                      db $10,$00,$18,$00,$00,$00,$10,$00        ;;DEA2|DF02+DF02/DEF2\DEF2;
                      db $18,$00,$00,$00,$10,$00,$00,$00        ;;DEAA|DF0A+DF0A/DEFA\DEFA;
                      db $10,$00,$F8,$FF                        ;;DEB2|DF12+DF12/DF02\DF02;
                                                                ;;                        ;
TilesetIndex:         db $00,$46,$83,$46                        ;;DEB6|DF16+DF16/DF06\DF06;
                                                                ;;                        ;
TileExpansion_:       db $00,$00,$00,$00,$00,$00,$00,$00        ;;DEBA|DF1A+DF1A/DF0A\DF0A;
                      db $00,$00,$00,$00,$00,$00,$00,$00        ;;DEC2|DF22+DF22/DF12\DF12;
                      db $00,$00,$00,$00,$00,$00,$00,$00        ;;DECA|DF2A+DF2A/DF1A\DF1A;
                      db $00,$00,$00,$00,$00,$00,$00,$00        ;;DED2|DF32+DF32/DF22\DF22;
                      db $00,$00,$00,$00,$00,$00,$00,$00        ;;DEDA|DF3A+DF3A/DF2A\DF2A;
                      db $00,$00,$00,$00,$00,$00,$00,$00        ;;DEE2|DF42+DF42/DF32\DF32;
                      db $00,$00,$00,$00,$00,$00,$00,$00        ;;DEEA|DF4A+DF4A/DF3A\DF3A;
                      db $00,$00,$00,$00,$00,$00,$00,$00        ;;DEF2|DF52+DF52/DF42\DF42;
                      db $00,$00,$00,$28,$00,$00,$00,$00        ;;DEFA|DF5A+DF5A/DF4A\DF4A;
                      db $00,$00,$04,$04,$04,$00,$00,$00        ;;DF02|DF62+DF62/DF52\DF52;
                      db $00,$00,$08,$00,$00,$00,$00,$0C        ;;DF0A|DF6A+DF6A/DF5A\DF5A;
                      db $0C,$0C,$00,$00,$10,$10,$14,$14        ;;DF12|DF72+DF72/DF62\DF62;
                      db $18,$18,$00,$00,$1C,$00,$00,$00        ;;DF1A|DF7A+DF7A/DF6A\DF6A;
                      db $00,$20,$00,$00,$00,$00,$24,$00        ;;DF22|DF82+DF82/DF72\DF72;
                      db $00,$00,$00,$00,$00,$00,$00,$00        ;;DF2A|DF8A+DF8A/DF7A\DF7A;
                      db $00,$00,$00,$00,$00,$00,$00,$00        ;;DF32|DF92+DF92/DF82\DF82;
                      db $00,$00,$00,$00,$00,$00,$00,$04        ;;DF3A|DF9A+DF9A/DF8A\DF8A;
                      db $04,$04,$00,$00,$00,$00,$00,$08        ;;DF42|DFA2+DFA2/DF92\DF92;
                      db $00,$00,$00,$00,$0C,$0C,$0C,$00        ;;DF4A|DFAA+DFAA/DF9A\DF9A;
                      db $00,$10,$10,$14,$14,$18,$18,$00        ;;DF52|DFB2+DFB2/DFA2\DFA2;
                      db $00,$1C,$00,$00,$00,$00,$20,$00        ;;DF5A|DFBA+DFBA/DFAA\DFAA;
                      db $00,$00,$00,$24,$00,$00,$00,$00        ;;DF62|DFC2+DFC2/DFB2\DFB2;
                      db $00,$00,$00,$00,$00,$00,$00,$00        ;;DF6A|DFCA+DFCA/DFBA\DFBA;
                      db $00,$00,$00,$00,$00,$00,$00,$00        ;;DF72|DFD2+DFD2/DFC2\DFC2;
Mario8x8Tiles:        db $00,$02,$80,$80,$00,$02,$0C,$80        ;;DF7A|DFDA+DFDA/DFCA\DFCA;
                      db $00,$02,$1A,$1B,$00,$02,$0D,$80        ;;DF82|DFE2+DFE2/DFD2\DFD2;
                      db $00,$02,$22,$23,$00,$02,$32,$33        ;;DF8A|DFEA+DFEA/DFDA\DFDA;
                      db $00,$02,$0A,$0B,$00,$02,$30,$31        ;;DF92|DFF2+DFF2/DFE2\DFE2;
                      db $00,$02,$20,$21,$00,$02,$7E,$80        ;;DF9A|DFFA+DFFA/DFEA\DFEA;
                      db $00,$02,$02,$80,$04,$7F,$4A,$5B        ;;DFA2|E002+E002/DFF2\DFF2;
                      db $4B,$5A                                ;;DFAA|E00A+E00A/DFFA\DFFA;
                                                                ;;                        ;
DATA_00E00C:          db $50,$50,$50,$09,$50,$50,$50,$50        ;;DFAC|E00C+E00C/DFFC\DFFC;
                      db $50,$50,$09,$2B,$50,$2D,$50,$D5        ;;DFB4|E014+E014/E004\E004;
                      db $2E,$C4,$C4,$C4,$D6,$B6,$50,$50        ;;DFBC|E01C+E01C/E00C\E00C;
                      db $50,$50,$50,$50,$50,$C5,$D7,$2A        ;;DFC4|E024+E024/E014\E014;
                      db $E0,$50,$D5,$29,$2C,$B6,$D6,$28        ;;DFCC|E02C+E02C/E01C\E01C;
                      db $E0,$E0,$C5,$C5,$C5,$C5,$C5,$C5        ;;DFD4|E034+E034/E024\E024;
                      db $5C,$5C,$50,$5A,$B6,$50,$28,$28        ;;DFDC|E03C+E03C/E02C\E02C;
                      db $C5,$D7,$28,$70,$C5,$70,$1C,$93        ;;DFE4|E044+E044/E034\E034;
                      db $C5,$C5,$0B,$85,$90,$84,$70,$70        ;;DFEC|E04C+E04C/E03C\E03C;
                      db $70,$A0,$70,$70,$70,$70,$70,$70        ;;DFF4|E054+E054/E044\E044;
                      db $A0,$74,$70,$80,$70,$84,$17,$A4        ;;DFFC|E05C+E05C/E04C\E04C;
                      db $A4,$A4,$B3,$B0,$70,$70,$70,$70        ;;E004|E064+E064/E054\E054;
                      db $70,$70,$70,$E2,$72,$0F,$61,$70        ;;E00C|E06C+E06C/E05C\E05C;
                      db $63,$82,$C7,$90,$B3,$D4,$A5,$C0        ;;E014|E074+E074/E064\E064;
                      db $08,$54,$0C,$0E,$1B,$51,$49,$4A        ;;E01C|E07C+E07C/E06C\E06C;
                      db $48,$4B,$4C,$5D,$5E,$5F,$E3,$90        ;;E024|E084+E084/E074\E074;
                      db $5F,$5F,$C5,$70,$70,$70,$A0,$70        ;;E02C|E08C+E08C/E07C\E07C;
                      db $70,$70,$70,$70,$70,$A0,$74,$70        ;;E034|E094+E094/E084\E084;
                      db $80,$70,$84,$17,$A4,$A4,$A4,$B3        ;;E03C|E09C+E09C/E08C\E08C;
                      db $B0,$70,$70,$70,$70,$70,$70,$70        ;;E044|E0A4+E0A4/E094\E094;
                      db $E2,$72,$0F,$61,$70,$63,$82,$C7        ;;E04C|E0AC+E0AC/E09C\E09C;
                      db $90,$B3,$D4,$A5,$C0,$08,$64,$0C        ;;E054|E0B4+E0B4/E0A4\E0A4;
                      db $0E,$1B,$51,$49,$4A,$48,$4B,$4C        ;;E05C|E0BC+E0BC/E0AC\E0AC;
                      db $5D,$5E,$5F,$E3,$90,$5F,$5F,$C5        ;;E064|E0C4+E0C4/E0B4\E0B4;
DATA_00E0CC:          db $71,$60,$60,$19,$94,$96,$96,$A2        ;;E06C|E0CC+E0CC/E0BC\E0BC;
                      db $97,$97,$18,$3B,$B4,$3D,$A7,$E5        ;;E074|E0D4+E0D4/E0C4\E0C4;
                      db $2F,$D3,$C3,$C3,$F6,$D0,$B1,$81        ;;E07C|E0DC+E0DC/E0CC\E0CC;
                      db $B2,$86,$B4,$87,$A6,$D1,$F7,$3A        ;;E084|E0E4+E0E4/E0D4\E0D4;
                      db $F0,$F4,$F5,$39,$3C,$C6,$E6,$38        ;;E08C|E0EC+E0EC/E0DC\E0DC;
                      db $F1,$F0,$C5,$C5,$C5,$C5,$C5,$C5        ;;E094|E0F4+E0F4/E0E4\E0E4;
                      db $6C,$4D,$71,$6A,$6B,$60,$38,$F1        ;;E09C|E0FC+E0FC/E0EC\E0EC;
                      db $5B,$69,$F1,$F1,$4E,$E1,$1D,$A3        ;;E0A4|E104+E104/E0F4\E0F4;
                      db $C5,$C5,$1A,$95,$10,$07,$02,$01        ;;E0AC|E10C+E10C/E0FC\E0FC;
                      db $00,$02,$14,$13,$12,$30,$27,$26        ;;E0B4|E114+E114/E104\E104;
                      db $30,$03,$15,$04,$31,$07,$E7,$25        ;;E0BC|E11C+E11C/E10C\E10C;
                      db $24,$23,$62,$36,$33,$91,$34,$92        ;;E0C4|E124+E124/E114\E114;
                      db $35,$A1,$32,$F2,$73,$1F,$C0,$C1        ;;E0CC|E12C+E12C/E11C\E11C;
                      db $C2,$83,$D2,$10,$B7,$E4,$B5,$61        ;;E0D4|E134+E134/E124\E124;
                      db $0A,$55,$0D,$75,$77,$1E,$59,$59        ;;E0DC|E13C+E13C/E12C\E12C;
                      db $58,$02,$02,$6D,$6E,$6F,$F3,$68        ;;E0E4|E144+E144/E134\E134;
                      db $6F,$6F,$06,$02,$01,$00,$02,$14        ;;E0EC|E14C+E14C/E13C\E13C;
                      db $13,$12,$30,$27,$26,$30,$03,$15        ;;E0F4|E154+E154/E144\E144;
                      db $04,$31,$07,$E7,$25,$24,$23,$62        ;;E0FC|E15C+E15C/E14C\E14C;
                      db $36,$33,$91,$34,$92,$35,$A1,$32        ;;E104|E164+E164/E154\E154;
                      db $F2,$73,$1F,$C0,$C1,$C2,$83,$D2        ;;E10C|E16C+E16C/E15C\E15C;
                      db $10,$B7,$E4,$B5,$61,$0A,$55,$0D        ;;E114|E174+E174/E164\E164;
                      db $75,$77,$1E,$59,$59,$58,$02,$02        ;;E11C|E17C+E17C/E16C\E16C;
                      db $6D,$6E,$6F,$F3,$68,$6F,$6F,$06        ;;E124|E184+E184/E174\E174;
MarioPalIndex:        db $00,$40                                ;;E12C|E18C+E18C/E17C\E17C;
                                                                ;;                        ;
DATA_00E18E:          db $00,$00,$00,$00,$00,$00,$00,$00        ;;E12E|E18E+E18E/E17E\E17E;
                      db $00,$00,$00,$00,$00,$0D,$00,$10        ;;E136|E196+E196/E186\E186;
                      db $13,$22,$25,$28,$00,$16,$00,$00        ;;E13E|E19E+E19E/E18E\E18E;
                      db $00,$00,$00,$00,$00,$08,$19,$1C        ;;E146|E1A6+E1A6/E196\E196;
                      db $04,$1F,$10,$10,$00,$16,$10,$06        ;;E14E|E1AE+E1AE/E19E\E19E;
                      db $04,$08,$2B,$30,$35,$3A,$3F,$43        ;;E156|E1B6+E1B6/E1A6\E1A6;
                      db $00,$00,$00,$00,$00,$00,$00,$00        ;;E15E|E1BE+E1BE/E1AE\E1AE;
                      db $16,$16,$00,$00,$08,$00,$00,$00        ;;E166|E1C6+E1C6/E1B6\E1B6;
                      db $00,$00,$00,$10,$04,$00                ;;E16E|E1CE+E1CE/E1BE\E1BE;
                                                                ;;                        ;
DATA_00E1D4:          db $06                                    ;;E174|E1D4+E1D4/E1C4\E1C4;
                                                                ;;                        ;
DATA_00E1D5:          db $00                                    ;;E175|E1D5+E1D5/E1C5\E1C5;
                                                                ;;                        ;
DATA_00E1D6:          db $06                                    ;;E176|E1D6+E1D6/E1C6\E1C6;
                                                                ;;                        ;
DATA_00E1D7:          db $00                                    ;;E177|E1D7+E1D7/E1C7\E1C7;
                                                                ;;                        ;
DATA_00E1D8:          db $86,$02,$06,$03,$06,$01,$06,$CE        ;;E178|E1D8+E1D8/E1C8\E1C8;
                      db $06,$06,$40,$00,$06,$2C,$06,$06        ;;E180|E1E0+E1E0/E1D0\E1D0;
                      db $44,$0E,$86,$2C,$06,$86,$2C,$0A        ;;E188|E1E8+E1E8/E1D8\E1D8;
                      db $86,$84,$08,$06,$0A,$02,$06,$AC        ;;E190|E1F0+E1F0/E1E0\E1E0;
                      db $10,$06,$CC,$10,$06,$AE,$10,$00        ;;E198|E1F8+E1F8/E1E8\E1E8;
                      db $8C,$14,$80,$2E,$00,$CA,$16,$91        ;;E1A0|E200+E200/E1F0\E1F0;
                      db $2F,$00,$8E,$18,$81,$30,$00,$EB        ;;E1A8|E208+E208/E1F8\E1F8;
                      db $1A,$90,$31,$04,$ED,$1C,$82,$06        ;;E1B0|E210+E210/E200\E200;
                      db $92,$1E                                ;;E1B8|E218+E218/E208\E208;
                                                                ;;                        ;
DATA_00E21A:          db $84,$86,$88,$8A,$8C,$8E,$90,$90        ;;E1BA|E21A+E21A/E20A\E20A;
                      db $92,$94,$96,$98,$9A,$9C,$9E,$A0        ;;E1C2|E222+E222/E212\E212;
                      db $A2,$A4,$A6,$A8,$AA,$B0,$B6,$BC        ;;E1CA|E22A+E22A/E21A\E21A;
                      db $C2,$C8,$CE,$D4,$DA,$DE,$E2,$E2        ;;E1D2|E232+E232/E222\E222;
DATA_00E23A:          db $0A,$0A,$84,$0A,$88,$88,$88,$88        ;;E1DA|E23A+E23A/E22A\E22A;
                      db $8A,$8A,$8A,$8A,$44,$44,$44,$44        ;;E1E2|E242+E242/E232\E232;
                      db $42,$42,$42,$42,$40,$40,$40,$40        ;;E1EA|E24A+E24A/E23A\E23A;
                      db $22,$22,$22,$22,$A4,$A4,$A4,$A4        ;;E1F2|E252+E252/E242\E242;
                      db $A6,$A6,$A6,$A6,$86,$86,$86,$86        ;;E1FA|E25A+E25A/E24A\E24A;
                      db $6E,$6E,$6E,$6E                        ;;E202|E262+E262/E252\E252;
                                                                ;;                        ;
DATA_00E266:          db $02,$02,$02,$0C,$00,$00,$00,$00        ;;E206|E266+E266/E256\E256;
                      db $00,$00,$00,$00,$00,$00,$00,$00        ;;E20E|E26E+E26E/E25E\E25E;
                      db $00,$00,$00,$00,$00,$00,$00,$00        ;;E216|E276+E276/E266\E266;
                      db $00,$00,$00,$00,$04,$12,$04,$04        ;;E21E|E27E+E27E/E26E\E26E;
                      db $04,$12,$04,$04,$04,$12,$04,$04        ;;E226|E286+E286/E276\E276;
                      db $04,$12,$04,$04                        ;;E22E|E28E+E28E/E27E\E27E;
                                                                ;;                        ;
DATA_00E292:          db $01,$01,$01,$01,$02,$02,$02,$02        ;;E232|E292+E292/E282\E282;
                      db $04,$04,$04,$04,$08,$08,$08,$08        ;;E23A|E29A+E29A/E28A\E28A;
                                                                ;;                        ;
DATA_00E2A2:          dw PlayerColors                           ;;E242|E2A2+E2A2/E292\E292;
                      dw PlayerColors+$14                       ;;E244|E2A4+E2A4/E294\E294;
                      dw PlayerColors                           ;;E246|E2A6+E2A6/E296\E296;
                      dw PlayerColors+$14                       ;;E248|E2A8+E2A8/E298\E298;
                      dw PlayerColors                           ;;E24A|E2AA+E2AA/E29A\E29A;
                      dw PlayerColors+$14                       ;;E24C|E2AC+E2AC/E29C\E29C;
                      dw PlayerColors+$28                       ;;E24E|E2AE+E2AE/E29E\E29E;
                      dw PlayerColors+$3C                       ;;E250|E2B0+E2B0/E2A0\E2A0;
                                                                ;;                        ;
DATA_00E2B2:          db $10,$D4,$10,$E8                        ;;E252|E2B2+E2B2/E2A2\E2A2;
                                                                ;;                        ;
DATA_00E2B6:          db $08,$CC,$08                            ;;E256|E2B6+E2B6/E2A6\E2A6;
                                                                ;;                        ;
DATA_00E2B9:          db $E0,$10,$10,$30                        ;;E259|E2B9+E2B9/E2A9\E2A9;
                                                                ;;                        ;
CODE_00E2BD:          PHB                                       ;;E25D|E2BD+E2BD/E2AD\E2AD;
                      PHK                                       ;;E25E|E2BE+E2BE/E2AE\E2AE;
                      PLB                                       ;;E25F|E2BF+E2BF/E2AF\E2AF;
                      LDA.B !PlayerHiddenTiles                  ;;E260|E2C0+E2C0/E2B0\E2B0;
                      CMP.B #$FF                                ;;E262|E2C2+E2C2/E2B2\E2B2;
                      BEQ +                                     ;;E264|E2C4+E2C4/E2B4\E2B4;
                      JSL CODE_01EA70                           ;;E266|E2C6+E2C6/E2B6\E2B6;
                    + LDY.W !CyclePaletteTimer                  ;;E26A|E2CA+E2CA/E2BA\E2BA;
                      BNE CODE_00E308                           ;;E26D|E2CD+E2CD/E2BD\E2BD;
                      LDY.W !InvinsibilityTimer                 ;;E26F|E2CF+E2CF/E2BF\E2BF; \ Branch if Mario doesn't have star 
                      BEQ CODE_00E314                           ;;E272|E2D2+E2D2/E2C2\E2C2; / 
                      LDA.B !PlayerHiddenTiles                  ;;E274|E2D4+E2D4/E2C4\E2C4;
                      CMP.B #$FF                                ;;E276|E2D6+E2D6/E2C6\E2C6;
                      BEQ +                                     ;;E278|E2D8+E2D8/E2C8\E2C8;
                      LDA.B !EffFrame                           ;;E27A|E2DA+E2DA/E2CA\E2CA;
                      AND.B #$03                                ;;E27C|E2DC+E2DC/E2CC\E2CC;
                      BNE +                                     ;;E27E|E2DE+E2DE/E2CE\E2CE;
                      DEC.W !InvinsibilityTimer                 ;;E280|E2E0+E2E0/E2D0\E2D0; Decrease star timer 
                    + LDA.B !TrueFrame                          ;;E283|E2E3+E2E3/E2D3\E2D3;
                      CPY.B #con($1E,$1E,$1E,$18,$18)           ;;E285|E2E5+E2E5/E2D5\E2D5;
                      BCC CODE_00E30A                           ;;E287|E2E7+E2E7/E2D7\E2D7;
                      BNE CODE_00E30C                           ;;E289|E2E9+E2E9/E2D9\E2D9;
                      LDA.W !MusicBackup                        ;;E28B|E2EB+E2EB/E2DB\E2DB;
                      CMP.B #$FF                                ;;E28E|E2EE+E2EE/E2DE\E2DE;
                      BEQ CODE_00E308                           ;;E290|E2F0+E2F0/E2E0\E2E0;
                      AND.B #$7F                                ;;E292|E2F2+E2F2/E2E2\E2E2;
                      STA.W !MusicBackup                        ;;E294|E2F4+E2F4/E2E4\E2E4;
                      TAX                                       ;;E297|E2F7+E2F7/E2E7\E2E7;
                      LDA.W !BluePSwitchTimer                   ;;E298|E2F8+E2F8/E2E8\E2E8;
                      ORA.W !SilverPSwitchTimer                 ;;E29B|E2FB+E2FB/E2EB\E2EB;
                      ORA.W !DirectCoinTimer                    ;;E29E|E2FE+E2FE/E2EE\E2EE;
                      BEQ +                                     ;;E2A1|E301+E301/E2F1\E2F1;
                      LDX.B #!BGM_PSWITCH                       ;;E2A3|E303+E303/E2F3\E2F3;
                    + STX.W !SPCIO2                             ;;E2A5|E305+E305/E2F5\E2F5; / Change music 
CODE_00E308:          LDA.B !TrueFrame                          ;;E2A8|E308+E308/E2F8\E2F8;
CODE_00E30A:          LSR A                                     ;;E2AA|E30A+E30A/E2FA\E2FA;
                      LSR A                                     ;;E2AB|E30B+E30B/E2FB\E2FB;
CODE_00E30C:          AND.B #$03                                ;;E2AC|E30C+E30C/E2FC\E2FC;
                      INC A                                     ;;E2AE|E30E+E30E/E2FE\E2FE;
                      INC A                                     ;;E2AF|E30F+E30F/E2FF\E2FF;
                      INC A                                     ;;E2B0|E310+E310/E300\E300;
                      INC A                                     ;;E2B1|E311+E311/E301\E301;
                      BRA +                                     ;;E2B2|E312+E312/E302\E302;
                                                                ;;                        ;
CODE_00E314:          LDA.B !Powerup                            ;;E2B4|E314+E314/E304\E304;
                      ASL A                                     ;;E2B6|E316+E316/E306\E306;
                      ORA.W !PlayerTurnLvl                      ;;E2B7|E317+E317/E307\E307;
                    + ASL A                                     ;;E2BA|E31A+E31A/E30A\E30A;
                      TAY                                       ;;E2BB|E31B+E31B/E30B\E30B;
                      REP #$20                                  ;;E2BC|E31C+E31C/E30C\E30C; Accum (16 bit) 
                      LDA.W DATA_00E2A2,Y                       ;;E2BE|E31E+E31E/E30E\E30E;
                      STA.W !PlayerPalletePtr                   ;;E2C1|E321+E321/E311\E311;
                      SEP #$20                                  ;;E2C4|E324+E324/E314\E314; Accum (8 bit) 
                      LDX.W !PlayerPose                         ;;E2C6|E326+E326/E316\E316;
                      LDA.B #$05                                ;;E2C9|E329+E329/E319\E319;
                      CMP.W !WallrunningType                    ;;E2CB|E32B+E32B/E31B\E31B;
                      BCS CODE_00E33E                           ;;E2CE|E32E+E32E/E31E\E31E;
                      LDA.W !WallrunningType                    ;;E2D0|E330+E330/E320\E320;
                      LDY.B !Powerup                            ;;E2D3|E333+E333/E323\E323;
                      BEQ CODE_00E33B                           ;;E2D5|E335+E335/E325\E325;
                      CPX.B #$13                                ;;E2D7|E337+E337/E327\E327;
                      BNE +                                     ;;E2D9|E339+E339/E329\E329;
CODE_00E33B:          EOR.B #$01                                ;;E2DB|E33B+E33B/E32B\E32B;
                    + LSR A                                     ;;E2DD|E33D+E33D/E32D\E32D;
CODE_00E33E:          REP #$20                                  ;;E2DE|E33E+E33E/E32E\E32E; Accum (16 bit) 
                      LDA.B !PlayerXPosNext                     ;;E2E0|E340+E340/E330\E330;
                      SBC.B !Layer1XPos                         ;;E2E2|E342+E342/E332\E332;
                      STA.B !PlayerXPosScrRel                   ;;E2E4|E344+E344/E334\E334;
                      LDA.W !ScrShakePlayerYOffset              ;;E2E6|E346+E346/E336\E336;
                      AND.W #$00FF                              ;;E2E9|E349+E349/E339\E339;
                      CLC                                       ;;E2EC|E34C+E34C/E33C\E33C;
                      ADC.B !PlayerYPosNext                     ;;E2ED|E34D+E34D/E33D\E33D;
                      LDY.B !Powerup                            ;;E2EF|E34F+E34F/E33F\E33F;
                      CPY.B #$01                                ;;E2F1|E351+E351/E341\E341;
                      LDY.B #$01                                ;;E2F3|E353+E353/E343\E343;
                      BCS +                                     ;;E2F5|E355+E355/E345\E345;
                      DEC A                                     ;;E2F7|E357+E357/E347\E347;
                      DEY                                       ;;E2F8|E358+E358/E348\E348;
                    + CPX.B #$0A                                ;;E2F9|E359+E359/E349\E349;
                      BCS +                                     ;;E2FB|E35B+E35B/E34B\E34B;
                      CPY.W !PlayerWalkingPose                  ;;E2FD|E35D+E35D/E34D\E34D;
                    + SBC.B !Layer1YPos                         ;;E300|E360+E360/E350\E350;
                      CPX.B #$1C                                ;;E302|E362+E362/E352\E352;
                      BNE +                                     ;;E304|E364+E364/E354\E354;
                      ADC.W #$0001                              ;;E306|E366+E366/E356\E356;
                    + STA.B !PlayerYPosScrRel                   ;;E309|E369+E369/E359\E359;
                      SEP #$20                                  ;;E30B|E36B+E36B/E35B\E35B; Accum (8 bit) 
                      LDA.W !IFrameTimer                        ;;E30D|E36D+E36D/E35D\E35D;
                      BEQ +                                     ;;E310|E370+E370/E360\E360;
                      LSR A                                     ;;E312|E372+E372/E362\E362;
                      LSR A                                     ;;E313|E373+E373/E363\E363;
                      LSR A                                     ;;E314|E374+E374/E364\E364;
                      TAY                                       ;;E315|E375+E375/E365\E365;
                      LDA.W DATA_00E292,Y                       ;;E316|E376+E376/E366\E366;
                      AND.W !IFrameTimer                        ;;E319|E379+E379/E369\E369;
                      ORA.B !SpriteLock                         ;;E31C|E37C+E37C/E36C\E36C;
                      ORA.W !PlayerIsFrozen                     ;;E31E|E37E+E37E/E36E\E36E;
                      BNE +                                     ;;E321|E381+E381/E371\E371;
                      PLB                                       ;;E323|E383+E383/E373\E373;
                      RTL                                       ;;E324|E384+E384/E374\E374; Return 
                                                                ;;                        ;
                    + LDA.B #$C8                                ;;E325|E385+E385/E375\E375;
                      CPX.B #$43                                ;;E327|E387+E387/E377\E377;
                      BNE +                                     ;;E329|E389+E389/E379\E379;
                      LDA.B #$E8                                ;;E32B|E38B+E38B/E37B\E37B;
                    + STA.B !_4                                 ;;E32D|E38D+E38D/E37D\E37D;
                      CPX.B #$29                                ;;E32F|E38F+E38F/E37F\E37F;
                      BNE +                                     ;;E331|E391+E391/E381\E381;
                      LDA.B !Powerup                            ;;E333|E393+E393/E383\E383;
                      BNE +                                     ;;E335|E395+E395/E385\E385;
                      LDX.B #$20                                ;;E337|E397+E397/E387\E387;
                    + LDA.W DATA_00DCEC,X                       ;;E339|E399+E399/E389\E389;
                      ORA.B !PlayerDirection                    ;;E33C|E39C+E39C/E38C\E38C;
                      TAY                                       ;;E33E|E39E+E39E/E38E\E38E;
                      LDA.W DATA_00DD32,Y                       ;;E33F|E39F+E39F/E38F\E38F;
                      STA.B !_5                                 ;;E342|E3A2+E3A2/E392\E392;
                      LDY.B !Powerup                            ;;E344|E3A4+E3A4/E394\E394;
                      LDA.W !PlayerPose                         ;;E346|E3A6+E3A6/E396\E396;
                      CMP.B #$3D                                ;;E349|E3A9+E3A9/E399\E399;
                      BCS +                                     ;;E34B|E3AB+E3AB/E39B\E39B;
                      ADC.W TilesetIndex,Y                      ;;E34D|E3AD+E3AD/E39D\E39D;
                    + TAY                                       ;;E350|E3B0+E3B0/E3A0\E3A0;
                      LDA.W TileExpansion_,Y                    ;;E351|E3B1+E3B1/E3A1\E3A1;
                      STA.B !_6                                 ;;E354|E3B4+E3B4/E3A4\E3A4;
                      LDA.W DATA_00E00C,Y                       ;;E356|E3B6+E3B6/E3A6\E3A6;
                      STA.B !_A                                 ;;E359|E3B9+E3B9/E3A9\E3A9;
                      LDA.W DATA_00E0CC,Y                       ;;E35B|E3BB+E3BB/E3AB\E3AB;
                      STA.B !_B                                 ;;E35E|E3BE+E3BE/E3AE\E3AE;
                      LDA.B !SpriteProperties                   ;;E360|E3C0+E3C0/E3B0\E3B0;
                      LDX.W !PlayerBehindNet                    ;;E362|E3C2+E3C2/E3B2\E3B2;
                      BEQ +                                     ;;E365|E3C5+E3C5/E3B5\E3B5;
                      LDA.W DATA_00E2B9,X                       ;;E367|E3C7+E3C7/E3B7\E3B7;
                    + LDY.W DATA_00E2B2,X                       ;;E36A|E3CA+E3CA/E3BA\E3BA;
                      LDX.B !PlayerDirection                    ;;E36D|E3CD+E3CD/E3BD\E3BD;
                      ORA.W MarioPalIndex,X                     ;;E36F|E3CF+E3CF/E3BF\E3BF;
                      STA.W !OAMTileAttr+$100,Y                 ;;E372|E3D2+E3D2/E3C2\E3C2;
                      STA.W !OAMTileAttr+$104,Y                 ;;E375|E3D5+E3D5/E3C5\E3C5;
                      STA.W !OAMTileAttr+$10C,Y                 ;;E378|E3D8+E3D8/E3C8\E3C8;
                      STA.W !OAMTileAttr+$110,Y                 ;;E37B|E3DB+E3DB/E3CB\E3CB;
                      STA.W !OAMTileAttr+$F8,Y                  ;;E37E|E3DE+E3DE/E3CE\E3CE;
                      STA.W !OAMTileAttr+$FC,Y                  ;;E381|E3E1+E3E1/E3D1\E3D1;
                      LDX.B !_4                                 ;;E384|E3E4+E3E4/E3D4\E3D4;
                      CPX.B #$E8                                ;;E386|E3E6+E3E6/E3D6\E3D6;
                      BNE +                                     ;;E388|E3E8+E3E8/E3D8\E3D8;
                      EOR.B #$40                                ;;E38A|E3EA+E3EA/E3DA\E3DA;
                    + STA.W !OAMTileAttr+$108,Y                 ;;E38C|E3EC+E3EC/E3DC\E3DC;
                      JSR CODE_00E45D                           ;;E38F|E3EF+E3EF/E3DF\E3DF;
                      JSR CODE_00E45D                           ;;E392|E3F2+E3F2/E3E2\E3E2;
                      JSR CODE_00E45D                           ;;E395|E3F5+E3F5/E3E5\E3E5;
                      JSR CODE_00E45D                           ;;E398|E3F8+E3F8/E3E8\E3E8;
                      LDA.B !Powerup                            ;;E39B|E3FB+E3FB/E3EB\E3EB;
                      CMP.B #$02                                ;;E39D|E3FD+E3FD/E3ED\E3ED;
                      BNE CODE_00E458                           ;;E39F|E3FF+E3FF/E3EF\E3EF;
                      PHY                                       ;;E3A1|E401+E401/E3F1\E3F1;
                      LDA.B #$2C                                ;;E3A2|E402+E402/E3F2\E3F2;
                      STA.B !_6                                 ;;E3A4|E404+E404/E3F4\E3F4;
                      LDX.W !PlayerPose                         ;;E3A6|E406+E406/E3F6\E3F6;
                      LDA.W DATA_00E18E,X                       ;;E3A9|E409+E409/E3F9\E3F9;
                      TAX                                       ;;E3AC|E40C+E40C/E3FC\E3FC;
                      LDA.W DATA_00E1D7,X                       ;;E3AD|E40D+E40D/E3FD\E3FD;
                      STA.B !_D                                 ;;E3B0|E410+E410/E400\E400;
                      LDA.W DATA_00E1D8,X                       ;;E3B2|E412+E412/E402\E402;
                      STA.B !_E                                 ;;E3B5|E415+E415/E405\E405;
                      LDA.W DATA_00E1D5,X                       ;;E3B7|E417+E417/E407\E407;
                      STA.B !_C                                 ;;E3BA|E41A+E41A/E40A\E40A;
                      CMP.B #$04                                ;;E3BC|E41C+E41C/E40C\E40C;
                      BCS CODE_00E432                           ;;E3BE|E41E+E41E/E40E\E40E;
                      LDA.W !PlayerCapePose                     ;;E3C0|E420+E420/E410\E410;
                      ASL A                                     ;;E3C3|E423+E423/E413\E413;
                      ASL A                                     ;;E3C4|E424+E424/E414\E414;
                      ORA.B !_C                                 ;;E3C5|E425+E425/E415\E415;
                      TAY                                       ;;E3C7|E427+E427/E417\E417;
                      LDA.W DATA_00E23A,Y                       ;;E3C8|E428+E428/E418\E418;
                      STA.B !_C                                 ;;E3CB|E42B+E42B/E41B\E41B;
                      LDA.W DATA_00E266,Y                       ;;E3CD|E42D+E42D/E41D\E41D;
                      BRA +                                     ;;E3D0|E430+E430/E420\E420;
                                                                ;;                        ;
CODE_00E432:          LDA.W DATA_00E1D6,X                       ;;E3D2|E432+E432/E422\E422;
                    + ORA.B !PlayerDirection                    ;;E3D5|E435+E435/E425\E425;
                      TAY                                       ;;E3D7|E437+E437/E427\E427;
                      LDA.W DATA_00E21A,Y                       ;;E3D8|E438+E438/E428\E428;
                      STA.B !_5                                 ;;E3DB|E43B+E43B/E42B\E42B;
                      PLY                                       ;;E3DD|E43D+E43D/E42D\E42D;
                      LDA.W DATA_00E1D4,X                       ;;E3DE|E43E+E43E/E42E\E42E;
                      TSB.B !PlayerHiddenTiles                  ;;E3E1|E441+E441/E431\E431;
                      BMI +                                     ;;E3E3|E443+E443/E433\E433;
                      JSR CODE_00E45D                           ;;E3E5|E445+E445/E435\E435;
                    + LDX.W !PlayerBehindNet                    ;;E3E8|E448+E448/E438\E438;
                      LDY.W DATA_00E2B6,X                       ;;E3EB|E44B+E44B/E43B\E43B;
                      JSR CODE_00E45D                           ;;E3EE|E44E+E44E/E43E\E43E;
                      LDA.B !_E                                 ;;E3F1|E451+E451/E441\E441;
                      STA.B !_6                                 ;;E3F3|E453+E453/E443\E443;
                      JSR CODE_00E45D                           ;;E3F5|E455+E455/E445\E445;
CODE_00E458:          JSR CODE_00F636                           ;;E3F8|E458+E458/E448\E448;
                      PLB                                       ;;E3FB|E45B+E45B/E44B\E44B;
                      RTL                                       ;;E3FC|E45C+E45C/E44C\E44C; Return 
                                                                ;;                        ;
CODE_00E45D:          LSR.B !PlayerHiddenTiles                  ;;E3FD|E45D+E45D/E44D\E44D;
                      BCS +                                     ;;E3FF|E45F+E45F/E44F\E44F;
                      LDX.B !_6                                 ;;E401|E461+E461/E451\E451;
                      LDA.W Mario8x8Tiles,X                     ;;E403|E463+E463/E453\E453;
                      BMI +                                     ;;E406|E466+E466/E456\E456;
                      STA.W !OAMTileNo+$100,Y                   ;;E408|E468+E468/E458\E458;
                      LDX.B !_5                                 ;;E40B|E46B+E46B/E45B\E45B;
                      REP #$20                                  ;;E40D|E46D+E46D/E45D\E45D; Accum (16 bit) 
                      LDA.B !PlayerYPosScrRel                   ;;E40F|E46F+E46F/E45F\E45F;
                      CLC                                       ;;E411|E471+E471/E461\E461;
                      ADC.W DATA_00DE32,X                       ;;E412|E472+E472/E462\E462;
                      PHA                                       ;;E415|E475+E475/E465\E465;
                      CLC                                       ;;E416|E476+E476/E466\E466;
                      ADC.W #$0010                              ;;E417|E477+E477/E467\E467;
                      CMP.W #$0100                              ;;E41A|E47A+E47A/E46A\E46A;
                      PLA                                       ;;E41D|E47D+E47D/E46D\E46D;
                      SEP #$20                                  ;;E41E|E47E+E47E/E46E\E46E; Accum (8 bit) 
                      BCS +                                     ;;E420|E480+E480/E470\E470;
                      STA.W !OAMTileYPos+$100,Y                 ;;E422|E482+E482/E472\E472;
                      REP #$20                                  ;;E425|E485+E485/E475\E475; Accum (16 bit) 
                      LDA.B !PlayerXPosScrRel                   ;;E427|E487+E487/E477\E477;
                      CLC                                       ;;E429|E489+E489/E479\E479;
                      ADC.W DATA_00DD4E,X                       ;;E42A|E48A+E48A/E47A\E47A;
                      PHA                                       ;;E42D|E48D+E48D/E47D\E47D;
                      CLC                                       ;;E42E|E48E+E48E/E47E\E47E;
                      ADC.W #$0080                              ;;E42F|E48F+E48F/E47F\E47F;
                      CMP.W #$0200                              ;;E432|E492+E492/E482\E482;
                      PLA                                       ;;E435|E495+E495/E485\E485;
                      SEP #$20                                  ;;E436|E496+E496/E486\E486; Accum (8 bit) 
                      BCS +                                     ;;E438|E498+E498/E488\E488;
                      STA.W !OAMTileXPos+$100,Y                 ;;E43A|E49A+E49A/E48A\E48A;
                      XBA                                       ;;E43D|E49D+E49D/E48D\E48D;
                      LSR A                                     ;;E43E|E49E+E49E/E48E\E48E;
                    + PHP                                       ;;E43F|E49F+E49F/E48F\E48F;
                      TYA                                       ;;E440|E4A0+E4A0/E490\E490;
                      LSR A                                     ;;E441|E4A1+E4A1/E491\E491;
                      LSR A                                     ;;E442|E4A2+E4A2/E492\E492;
                      TAX                                       ;;E443|E4A3+E4A3/E493\E493;
                      ASL.B !_4                                 ;;E444|E4A4+E4A4/E494\E494;
                      ROL A                                     ;;E446|E4A6+E4A6/E496\E496;
                      PLP                                       ;;E447|E4A7+E4A7/E497\E497;
                      ROL A                                     ;;E448|E4A8+E4A8/E498\E498;
                      AND.B #$03                                ;;E449|E4A9+E4A9/E499\E499;
                      STA.W !OAMTileSize+$40,X                  ;;E44B|E4AB+E4AB/E49B\E49B;
                      INY                                       ;;E44E|E4AE+E4AE/E49E\E49E;
                      INY                                       ;;E44F|E4AF+E4AF/E49F\E49F;
                      INY                                       ;;E450|E4B0+E4B0/E4A0\E4A0;
                      INY                                       ;;E451|E4B1+E4B1/E4A1\E4A1;
                      INC.B !_5                                 ;;E452|E4B2+E4B2/E4A2\E4A2;
                      INC.B !_5                                 ;;E454|E4B4+E4B4/E4A4\E4A4;
                      INC.B !_6                                 ;;E456|E4B6+E4B6/E4A6\E4A6;
                      RTS                                       ;;E458|E4B8+E4B8/E4A8\E4A8; Return 
                                                                ;;                        ;
                                                                ;;                        ;
DATA_00E4B9:          db $08,$08,$08,$08,$10,$10,$10,$10        ;;E459|E4B9+E4B9/E4A9\E4A9;
                      db $18,$18,$20,$20,$28,$30,$08,$10        ;;E461|E4C1+E4C1/E4B1\E4B1;
                      db $00,$00,$28,$00,$00,$00,$00,$00        ;;E469|E4C9+E4C9/E4B9\E4B9;
                      db $38,$50,$48,$40,$58,$58,$60,$60        ;;E471|E4D1+E4D1/E4C1\E4C1;
                      db $00                                    ;;E479|E4D9+E4D9/E4C9\E4C9;
                                                                ;;                        ;
DATA_00E4DA:          db $10,$10,$10,$10,$10,$10,$10,$10        ;;E47A|E4DA+E4DA/E4CA\E4CA;
                      db $20,$20,$20,$20,$30,$30,$40,$30        ;;E482|E4E2+E4E2/E4D2\E4D2;
                      db $30,$30,$30,$00,$00,$00,$00,$00        ;;E48A|E4EA+E4EA/E4DA\E4DA;
                      db $30,$30,$30,$30,$40,$40,$40,$40        ;;E492|E4F2+E4F2/E4E2\E4E2;
                      db $00                                    ;;E49A|E4FA+E4FA/E4EA\E4EA;
                                                                ;;                        ;
DATA_00E4FB:          db $00,$00,$00,$00,$00,$00,$00,$00        ;;E49B|E4FB+E4FB/E4EB\E4EB;
                      db $EC,$EC,$EE,$EE,$DA,$DA,$00,$00        ;;E4A3|E503+E503/E4F3\E4F3;
                      db $00,$00,$00,$00,$00,$00,$00,$00        ;;E4AB|E50B+E50B/E4FB\E4FB;
                      db $DA,$DA,$DA,$DA,$00,$00,$00,$00        ;;E4B3|E513+E513/E503\E503;
                      db $00                                    ;;E4BB|E51B+E51B/E50B\E50B;
                                                                ;;                        ;
DATA_00E51C:          db $08,$08,$08,$08,$08,$08,$08,$08        ;;E4BC|E51C+E51C/E50C\E50C;
                      db $09,$09,$09,$09,$0B,$0B,$0B,$0B        ;;E4C4|E524+E524/E514\E514;
                      db $0B,$0B,$0B,$00,$00,$00,$00,$00        ;;E4CC|E52C+E52C/E51C\E51C;
                      db $0B,$0B,$0B,$0B,$14,$14,$14,$14        ;;E4D4|E534+E534/E524\E524;
                      db $06                                    ;;E4DC|E53C+E53C/E52C\E52C;
                                                                ;;                        ;
DATA_00E53D:          db $FF,$FF,$FF,$FF,$01,$01,$01,$01        ;;E4DD|E53D+E53D/E52D\E52D;
                      db $FE,$FE,$02,$02,$FD,$03,$FD,$03        ;;E4E5|E545+E545/E535\E535;
                      db $FD,$03,$FD,$00,$00,$00,$00,$00        ;;E4ED|E54D+E54D/E53D\E53D;
                      db $08,$08,$F8,$F8,$FC,$FC,$04,$04        ;;E4F5|E555+E555/E545\E545;
                      db $00                                    ;;E4FD|E55D+E55D/E54D\E54D;
                                                                ;;                        ;
DATA_00E55E:          db $00,$00,$00,$00,$00,$01,$01            ;;E4FE|E55E+E55E/E54E\E54E;
                      db $01,$01,$01,$02,$02,$02,$02,$02        ;;E505|E565+E565/E555\E555;
                      db $03,$03,$03,$03,$03,$04,$04,$04        ;;E50D|E56D+E56D/E55D\E55D;
                      db $04,$04,$05,$05,$05,$05,$05,$06        ;;E515|E575+E575/E565\E565;
                      db $06,$06,$06,$06,$07,$07,$07,$07        ;;E51D|E57D+E57D/E56D\E56D;
                      db $07,$08,$08,$08,$08,$08,$09,$09        ;;E525|E585+E585/E575\E575;
                      db $09,$09,$09,$0A,$0A,$0A,$0A,$0A        ;;E52D|E58D+E58D/E57D\E57D;
                      db $0B,$0B,$0B,$0B,$0B,$0C,$0C,$0C        ;;E535|E595+E595/E585\E585;
                      db $0C,$0C,$0D,$0D,$0D,$0D,$0D,$0E        ;;E53D|E59D+E59D/E58D\E58D;
                      db $0F,$10,$11,$03,$03,$04,$04,$09        ;;E545|E5A5+E5A5/E595\E595;
                      db $09,$0A,$0A,$0C,$0C,$0D,$0D,$12        ;;E54D|E5AD+E5AD/E59D\E59D;
                      db $13,$14,$15,$16,$17,$1C,$1D,$1E        ;;E555|E5B5+E5B5/E5A5\E5A5;
                      db $1F,$18,$19,$1A,$1B,$08,$09,$0A        ;;E55D|E5BD+E5BD/E5AD\E5AD;
                      db $0B,$0C,$0D                            ;;E565|E5C5+E5C5/E5B5\E5B5;
                                                                ;;                        ;
DATA_00E5C8:          db $00,$00,$00,$00,$00                    ;;E568|E5C8+E5C8/E5B8\E5B8;
                      db $01,$01,$01,$01,$01,$02,$02,$02        ;;E56D|E5CD+E5CD/E5BD\E5BD;
                      db $02,$02,$03,$03,$03,$03,$03,$04        ;;E575|E5D5+E5D5/E5C5\E5C5;
                      db $04,$04,$04,$04,$05,$05,$05,$05        ;;E57D|E5DD+E5DD/E5CD\E5CD;
                      db $05,$06,$06,$06,$06,$06,$07,$07        ;;E585|E5E5+E5E5/E5D5\E5D5;
                      db $07,$07,$07,$08,$08,$08,$08,$08        ;;E58D|E5ED+E5ED/E5DD\E5DD;
                      db $09,$09,$09,$09,$09,$0A,$0A,$0A        ;;E595|E5F5+E5F5/E5E5\E5E5;
                      db $0A,$0A,$0B,$0B,$0B,$0B,$0B,$0C        ;;E59D|E5FD+E5FD/E5ED\E5ED;
                      db $0C,$0C,$0C,$0C,$0D,$0D,$0D,$0D        ;;E5A5|E605+E605/E5F5\E5F5;
                      db $0D,$0E,$0F,$10,$11,$03,$03,$04        ;;E5AD|E60D+E60D/E5FD\E5FD;
                      db $04,$09,$09,$0A,$0A,$0C,$0C,$0D        ;;E5B5|E615+E615/E605\E605;
                      db $0D,$0C,$0D,$0D,$0C,$16,$17,$1C        ;;E5BD|E61D+E61D/E60D\E60D;
                      db $1D,$1E,$1F,$18,$19,$1A,$1B,$08        ;;E5C5|E625+E625/E615\E615;
                      db $09,$0A,$0B,$0C,$0D                    ;;E5CD|E62D+E62D/E61D\E61D;
                                                                ;;                        ;
DATA_00E632:          db $0F,$0F,$0F,$0F,$0E,$0E,$0E,$0E        ;;E5D2|E632+E632/E622\E622;
                      db $0D,$0D,$0D,$0D,$0C,$0C,$0C,$0C        ;;E5DA|E63A+E63A/E62A\E62A;
                      db $0B,$0B,$0B,$0B,$0A,$0A,$0A,$0A        ;;E5E2|E642+E642/E632\E632;
                      db $09,$09,$09,$09,$08,$08,$08,$08        ;;E5EA|E64A+E64A/E63A\E63A;
                      db $07,$07,$07,$07,$06,$06,$06,$06        ;;E5F2|E652+E652/E642\E642;
                      db $05,$05,$05,$05,$04,$04,$04,$04        ;;E5FA|E65A+E65A/E64A\E64A;
                      db $03,$03,$03,$03,$02,$02,$02,$02        ;;E602|E662+E662/E652\E652;
                      db $01,$01,$01,$01,$00,$00,$00,$00        ;;E60A|E66A+E66A/E65A\E65A;
                      db $00,$00,$00,$00,$01,$01,$01,$01        ;;E612|E672+E672/E662\E662;
                      db $02,$02,$02,$02,$03,$03,$03,$03        ;;E61A|E67A+E67A/E66A\E66A;
                      db $04,$04,$04,$04,$05,$05,$05,$05        ;;E622|E682+E682/E672\E672;
                      db $06,$06,$06,$06,$07,$07,$07,$07        ;;E62A|E68A+E68A/E67A\E67A;
                      db $08,$08,$08,$08,$09,$09,$09,$09        ;;E632|E692+E692/E682\E682;
                      db $0A,$0A,$0A,$0A,$0B,$0B,$0B,$0B        ;;E63A|E69A+E69A/E68A\E68A;
                      db $0C,$0C,$0C,$0C,$0D,$0D,$0D,$0D        ;;E642|E6A2+E6A2/E692\E692;
                      db $0E,$0E,$0E,$0E,$0F,$0F,$0F,$0F        ;;E64A|E6AA+E6AA/E69A\E69A;
                      db $0F,$0F,$0E,$0E,$0D,$0D,$0C,$0C        ;;E652|E6B2+E6B2/E6A2\E6A2;
                      db $0B,$0B,$0A,$0A,$09,$09,$08,$08        ;;E65A|E6BA+E6BA/E6AA\E6AA;
                      db $07,$07,$06,$06,$05,$05,$04,$04        ;;E662|E6C2+E6C2/E6B2\E6B2;
                      db $03,$03,$02,$02,$01,$01,$00,$00        ;;E66A|E6CA+E6CA/E6BA\E6BA;
                      db $00,$00,$01,$01,$02,$02,$03,$03        ;;E672|E6D2+E6D2/E6C2\E6C2;
                      db $04,$04,$05,$05,$06,$06,$07,$07        ;;E67A|E6DA+E6DA/E6CA\E6CA;
                      db $08,$08,$09,$09,$0A,$0A,$0B,$0B        ;;E682|E6E2+E6E2/E6D2\E6D2;
                      db $0C,$0C,$0D,$0D,$0E,$0E,$0F,$0F        ;;E68A|E6EA+E6EA/E6DA\E6DA;
                      db $0F,$0E,$0D,$0C,$0B,$0A,$09,$08        ;;E692|E6F2+E6F2/E6E2\E6E2;
                      db $07,$06,$05,$04,$03,$02,$01,$00        ;;E69A|E6FA+E6FA/E6EA\E6EA;
                      db $00,$01,$02,$03,$04,$05,$06,$07        ;;E6A2|E702+E702/E6F2\E6F2;
                      db $08,$09,$0A,$0B,$0C,$0D,$0E,$0F        ;;E6AA|E70A+E70A/E6FA\E6FA;
                      db $0F,$0E,$0D,$0C,$0B,$0A,$09,$08        ;;E6B2|E712+E712/E702\E702;
                      db $07,$06,$05,$04,$03,$02,$01,$00        ;;E6BA|E71A+E71A/E70A\E70A;
                      db $00,$01,$02,$03,$04,$05,$06,$07        ;;E6C2|E722+E722/E712\E712;
                      db $08,$09,$0A,$0B,$0C,$0D,$0E,$0F        ;;E6CA|E72A+E72A/E71A\E71A;
                      db $08,$06,$04,$03,$02,$02,$01,$01        ;;E6D2|E732+E732/E722\E722;
                      db $00,$00,$00,$00,$00,$00,$00,$00        ;;E6DA|E73A+E73A/E72A\E72A;
                      db $00,$00,$00,$00,$00,$00,$00,$00        ;;E6E2|E742+E742/E732\E732;
                      db $01,$01,$02,$02,$03,$04,$06,$08        ;;E6EA|E74A+E74A/E73A\E73A;
                      db $FF,$FE,$FD,$FC,$FB,$FA,$F9,$F8        ;;E6F2|E752+E752/E742\E742;
                      db $F7,$F6,$F5,$F4,$F3,$F2,$F1,$F0        ;;E6FA|E75A+E75A/E74A\E74A;
                      db $F0,$F1,$F2,$F3,$F4,$F5,$F6,$F7        ;;E702|E762+E762/E752\E752;
                      db $F8,$F9,$FA,$FB,$FC,$FD,$FE,$FF        ;;E70A|E76A+E76A/E75A\E75A;
                      db $FF,$FF,$FE,$FE,$FD,$FD,$FC,$FC        ;;E712|E772+E772/E762\E762;
                      db $FB,$FB,$FA,$FA,$F9,$F9,$F8,$F8        ;;E71A|E77A+E77A/E76A\E76A;
                      db $F7,$F7,$F6,$F6,$F5,$F5,$F4,$F4        ;;E722|E782+E782/E772\E772;
                      db $F3,$F3,$F2,$F2,$F1,$F1,$F0,$F0        ;;E72A|E78A+E78A/E77A\E77A;
                      db $F0,$F0,$F1,$F1,$F2,$F2,$F3,$F3        ;;E732|E792+E792/E782\E782;
                      db $F4,$F4,$F5,$F5,$F6,$F6,$F7,$F7        ;;E73A|E79A+E79A/E78A\E78A;
                      db $F8,$F8,$F9,$F9,$FA,$FA,$FB,$FB        ;;E742|E7A2+E7A2/E792\E792;
                      db $FC,$FC,$FD,$FD,$FE,$FE,$FF,$FF        ;;E74A|E7AA+E7AA/E79A\E79A;
                      db $0F,$0E,$0D,$0C,$0B,$0A,$09,$08        ;;E752|E7B2+E7B2/E7A2\E7A2;
                      db $07,$06,$05,$04,$03,$02,$01,$00        ;;E75A|E7BA+E7BA/E7AA\E7AA;
                      db $00,$01,$02,$03,$04,$05,$06,$07        ;;E762|E7C2+E7C2/E7B2\E7B2;
                      db $08,$09,$0A,$0B,$0C,$0D,$0E,$0F        ;;E76A|E7CA+E7CA/E7BA\E7BA;
                      db $00,$01,$02,$03,$04,$05,$06,$07        ;;E772|E7D2+E7D2/E7C2\E7C2;
                      db $08,$09,$0A,$0B,$0C,$0D,$0E,$0F        ;;E77A|E7DA+E7DA/E7CA\E7CA;
                      db $0F,$0E,$0D,$0C,$0B,$0A,$09,$08        ;;E782|E7E2+E7E2/E7D2\E7D2;
                      db $07,$06,$05,$04,$03,$02,$01,$00        ;;E78A|E7EA+E7EA/E7DA\E7DA;
                      db $10,$10,$10,$10,$10,$10,$10,$10        ;;E792|E7F2+E7F2/E7E2\E7E2;
                      db $0E,$0C,$0A,$08,$06,$04,$02,$00        ;;E79A|E7FA+E7FA/E7EA\E7EA;
                      db $0E,$0C,$0A,$08,$06,$04,$02,$00        ;;E7A2|E802+E802/E7F2\E7F2;
                      db $FE,$FC,$FA,$F8,$F6,$F4,$F2,$F0        ;;E7AA|E80A+E80A/E7FA\E7FA;
                      db $00,$02,$04,$06,$08,$0A,$0C,$0E        ;;E7B2|E812+E812/E802\E802;
                      db $10,$10,$10,$10,$10,$10,$10,$10        ;;E7BA|E81A+E81A/E80A\E80A;
                      db $F0,$F2,$F4,$F6,$F8,$FA,$FC,$FE        ;;E7C2|E822+E822/E812\E812;
                      db $00,$02,$04,$06,$08,$0A                ;;E7CA|E82A+E82A/E81A\E81A;
                                                                ;;                        ;
DATA_00E830:          db $0C,$0E,$08,$00,$0E,$00,$0E,$00        ;;E7D0|E830+E830/E820\E820;
                      db $08,$00,$05,$00,$0B,$00,$08,$00        ;;E7D8|E838+E838/E828\E828;
                      db $02,$00,$02,$00,$08,$00,$0B,$00        ;;E7E0|E840+E840/E830\E830;
                      db $05,$00,$08,$00,$0E,$00,$0E,$00        ;;E7E8|E848+E848/E838\E838;
                      db $08,$00,$05,$00,$0B,$00,$08,$00        ;;E7F0|E850+E850/E840\E840;
                      db $02,$00,$02,$00,$08,$00,$0B,$00        ;;E7F8|E858+E858/E848\E848;
                      db $05,$00,$08,$00,$0E,$00,$0E,$00        ;;E800|E860+E860/E850\E850;
                      db $08,$00,$05,$00,$0B,$00,$08,$00        ;;E808|E868+E868/E858\E858;
                      db $02,$00,$02,$00,$08,$00,$0B,$00        ;;E810|E870+E870/E860\E860;
                      db $05,$00,$08,$00,$0E,$00,$0E,$00        ;;E818|E878+E878/E868\E868;
                      db $08,$00,$05,$00,$0B,$00,$08,$00        ;;E820|E880+E880/E870\E870;
                      db $02,$00,$02,$00,$08,$00,$0B,$00        ;;E828|E888+E888/E878\E878;
                      db $05,$00,$10,$00,$20,$00,$07,$00        ;;E830|E890+E890/E880\E880;
                      db $00,$00,$F0,$FF                        ;;E838|E898+E898/E888\E888;
                                                                ;;                        ;
DATA_00E89C:          db $08,$00,$18,$00,$1A,$00,$16,$00        ;;E83C|E89C+E89C/E88C\E88C;
DATA_00E8A4:          db $10,$00,$20,$00,$20,$00,$18,$00        ;;E844|E8A4+E8A4/E894\E894;
                      db $1A,$00,$16,$00,$10,$00,$20,$00        ;;E84C|E8AC+E8AC/E89C\E89C;
                      db $20,$00,$12,$00,$1A,$00,$0F,$00        ;;E854|E8B4+E8B4/E8A4\E8A4;
                      db $08,$00,$20,$00,$20,$00,$12,$00        ;;E85C|E8BC+E8BC/E8AC\E8AC;
                      db $1A,$00,$0F,$00,$08,$00,$20,$00        ;;E864|E8C4+E8C4/E8B4\E8B4;
                      db $20,$00,$1D,$00,$28,$00,$19,$00        ;;E86C|E8CC+E8CC/E8BC\E8BC;
                      db $13,$00,$30,$00,$30,$00,$1D,$00        ;;E874|E8D4+E8D4/E8C4\E8C4;
                      db $28,$00,$19,$00,$13,$00,$30,$00        ;;E87C|E8DC+E8DC/E8CC\E8CC;
                      db $30,$00,$1A,$00,$28,$00,$16,$00        ;;E884|E8E4+E8E4/E8D4\E8D4;
                      db $10,$00,$30,$00,$30,$00,$1A,$00        ;;E88C|E8EC+E8EC/E8DC\E8DC;
                      db $28,$00,$16,$00,$10,$00,$30,$00        ;;E894|E8F4+E8F4/E8E4\E8E4;
                      db $30,$00,$18,$00,$18,$00,$18,$00        ;;E89C|E8FC+E8FC/E8EC\E8EC;
                      db $18,$00,$18,$00,$18,$00                ;;E8A4|E904+E904/E8F4\E8F4;
                                                                ;;                        ;
DATA_00E90A:          db $01,$02,$11                            ;;E8AA|E90A+E90A/E8FA\E8FA;
                                                                ;;                        ;
DATA_00E90D:          db $FF                                    ;;E8AD|E90D+E90D/E8FD\E8FD;
                                                                ;;                        ;
DATA_00E90E:          db $FF,$01,$00                            ;;E8AE|E90E+E90E/E8FE\E8FE;
                                                                ;;                        ;
DATA_00E911:          db $02,$0D                                ;;E8B1|E911+E911/E901\E901;
                                                                ;;                        ;
DATA_00E913:          db $01,$00,$FF,$FF,$01,$00,$01,$00        ;;E8B3|E913+E913/E903\E903;
                      db $FF,$FF,$FF,$FF                        ;;E8BB|E91B+E91B/E90B\E90B;
                                                                ;;                        ;
DATA_00E91F:          db $00,$00,$00,$00,$FF,$FF,$01,$00        ;;E8BF|E91F+E91F/E90F\E90F;
                      db $FF,$FF,$01,$00                        ;;E8C7|E927+E927/E917\E917;
                                                                ;;                        ;
CODE_00E92B:          JSR CODE_00EAA6                           ;;E8CB|E92B+E92B/E91B\E91B;
                      LDA.W !PlayerDisableObjInt                ;;E8CE|E92E+E92E/E91E\E91E;
                      BEQ CODE_00E938                           ;;E8D1|E931+E931/E921\E921;
                      JSR CODE_00EE1D                           ;;E8D3|E933+E933/E923\E923;
                      BRA CODE_00E98C                           ;;E8D6|E936+E936/E926\E926;
                                                                ;;                        ;
CODE_00E938:          LDA.W !PlayerIsOnGround                   ;;E8D8|E938+E938/E928\E928;
                      STA.B !GraphicsUncompPtr                  ;;E8DB|E93B+E93B/E92B\E92B;
                      STZ.W !PlayerIsOnGround                   ;;E8DD|E93D+E93D/E92D\E92D;
                      LDA.B !PlayerInAir                        ;;E8E0|E940+E940/E930\E930;
                      STA.B !GraphicsUncompPtr+2                ;;E8E2|E942+E942/E932\E932;
                      LDA.B !ScreenMode                         ;;E8E4|E944+E944/E934\E934;
                      BPL +                                     ;;E8E6|E946+E946/E936\E936;
                      AND.B #$82                                ;;E8E8|E948+E948/E938\E938;
                      STA.B !GraphicsUncompPtr+1                ;;E8EA|E94A+E94A/E93A\E93A;
                      LDA.B #$01                                ;;E8EC|E94C+E94C/E93C\E93C;
                      STA.W !LayerProcessing                    ;;E8EE|E94E+E94E/E93E\E93E;
                      REP #$20                                  ;;E8F1|E951+E951/E941\E941; Accum (16 bit) 
                      LDA.B !PlayerXPosNext                     ;;E8F3|E953+E953/E943\E943;
                      CLC                                       ;;E8F5|E955+E955/E945\E945;
                      ADC.B !Layer23XRelPos                     ;;E8F6|E956+E956/E946\E946;
                      STA.B !PlayerXPosNext                     ;;E8F8|E958+E958/E948\E948;
                      LDA.B !PlayerYPosNext                     ;;E8FA|E95A+E95A/E94A\E94A;
                      CLC                                       ;;E8FC|E95C+E95C/E94C\E94C;
                      ADC.B !Layer23YRelPos                     ;;E8FD|E95D+E95D/E94D\E94D;
                      STA.B !PlayerYPosNext                     ;;E8FF|E95F+E95F/E94F\E94F;
                      SEP #$20                                  ;;E901|E961+E961/E951\E951; Accum (8 bit) 
                      JSR CODE_00EADB                           ;;E903|E963+E963/E953\E953;
                      REP #$20                                  ;;E906|E966+E966/E956\E956; Accum (16 bit) 
                      LDA.B !PlayerXPosNext                     ;;E908|E968+E968/E958\E958;
                      SEC                                       ;;E90A|E96A+E96A/E95A\E95A;
                      SBC.B !Layer23XRelPos                     ;;E90B|E96B+E96B/E95B\E95B;
                      STA.B !PlayerXPosNext                     ;;E90D|E96D+E96D/E95D\E95D;
                      LDA.B !PlayerYPosNext                     ;;E90F|E96F+E96F/E95F\E95F;
                      SEC                                       ;;E911|E971+E971/E961\E961;
                      SBC.B !Layer23YRelPos                     ;;E912|E972+E972/E962\E962;
                      STA.B !PlayerYPosNext                     ;;E914|E974+E974/E964\E964;
                      SEP #$20                                  ;;E916|E976+E976/E966\E966; Accum (8 bit) 
                    + ASL.W !PlayerIsOnGround                   ;;E918|E978+E978/E968\E968;
                      LDA.B !ScreenMode                         ;;E91B|E97B+E97B/E96B\E96B;
                      AND.B #$41                                ;;E91D|E97D+E97D/E96D\E96D;
                      STA.B !GraphicsUncompPtr+1                ;;E91F|E97F+E97F/E96F\E96F;
                      ASL A                                     ;;E921|E981+E981/E971\E971;
                      BMI CODE_00E98C                           ;;E922|E982+E982/E972\E972;
                      STZ.W !LayerProcessing                    ;;E924|E984+E984/E974\E974;
                      ASL.B !GraphicsUncompPtr                  ;;E927|E987+E987/E977\E977;
                      JSR CODE_00EADB                           ;;E929|E989+E989/E979\E979;
CODE_00E98C:          LDA.W !SideExitEnabled                    ;;E92C|E98C+E98C/E97C\E97C;
                      BEQ CODE_00E9A1                           ;;E92F|E98F+E98F/E97F\E97F;
                      REP #$20                                  ;;E931|E991+E991/E981\E981; Accum (16 bit) 
                      LDA.B !PlayerXPosScrRel                   ;;E933|E993+E993/E983\E983;
                      CMP.W #$00FA                              ;;E935|E995+E995/E985\E985;
                      SEP #$20                                  ;;E938|E998+E998/E988\E988; Accum (8 bit) 
                      BCC CODE_00E9FB                           ;;E93A|E99A+E99A/E98A\E98A;
                      JSL SubSideExit                           ;;E93C|E99C+E99C/E98C\E98C;
                      RTS                                       ;;E940|E9A0+E9A0/E990\E990; Return 
                                                                ;;                        ;
CODE_00E9A1:          LDA.B !PlayerXPosScrRel                   ;;E941|E9A1+E9A1/E991\E991;
                      CMP.B #$F0                                ;;E943|E9A3+E9A3/E993\E993;
                      BCS CODE_00EA08                           ;;E945|E9A5+E9A5/E995\E995;
                      LDA.B !PlayerBlockedDir                   ;;E947|E9A7+E9A7/E997\E997;
                      AND.B #$03                                ;;E949|E9A9+E9A9/E999\E999;
                      BNE CODE_00E9FB                           ;;E94B|E9AB+E9AB/E99B\E99B;
                      REP #$20                                  ;;E94D|E9AD+E9AD/E99D\E99D; Accum (16 bit) 
                      LDY.B #$00                                ;;E94F|E9AF+E9AF/E99F\E99F;
                      LDA.W !NextLayer1XPos                     ;;E951|E9B1+E9B1/E9A1\E9A1;
                      CLC                                       ;;E954|E9B4+E9B4/E9A4\E9A4;
                      ADC.W #$00E8                              ;;E955|E9B5+E9B5/E9A5\E9A5;
                      CMP.B !PlayerXPosNext                     ;;E958|E9B8+E9B8/E9A8\E9A8;
                      BEQ CODE_00E9C8                           ;;E95A|E9BA+E9BA/E9AA\E9AA;
                      BMI CODE_00E9C8                           ;;E95C|E9BC+E9BC/E9AC\E9AC;
                      INY                                       ;;E95E|E9BE+E9BE/E9AE\E9AE;
                      LDA.B !PlayerXPosNext                     ;;E95F|E9BF+E9BF/E9AF\E9AF;
                      SEC                                       ;;E961|E9C1+E9C1/E9B1\E9B1;
                      SBC.W #$0008                              ;;E962|E9C2+E9C2/E9B2\E9B2;
                      CMP.W !NextLayer1XPos                     ;;E965|E9C5+E9C5/E9B5\E9B5;
CODE_00E9C8:          SEP #$20                                  ;;E968|E9C8+E9C8/E9B8\E9B8; Accum (8 bit) 
                      BEQ CODE_00E9FB                           ;;E96A|E9CA+E9CA/E9BA\E9BA;
                      BPL CODE_00E9FB                           ;;E96C|E9CC+E9CC/E9BC\E9BC;
                      LDA.W !HorizLayer1Setting                 ;;E96E|E9CE+E9CE/E9BE\E9BE;
                      BNE +                                     ;;E971|E9D1+E9D1/E9C1\E9C1;
                      LDA.B #$80                                ;;E973|E9D3+E9D3/E9C3\E9C3;
                      TSB.B !PlayerBlockedDir                   ;;E975|E9D5+E9D5/E9C5\E9C5;
                      REP #$20                                  ;;E977|E9D7+E9D7/E9C7\E9C7; Accum (16 bit) 
                      LDA.W !Layer1ScrollXSpeed                 ;;E979|E9D9+E9D9/E9C9\E9C9;
                      LSR A                                     ;;E97C|E9DC+E9DC/E9CC\E9CC;
                      LSR A                                     ;;E97D|E9DD+E9DD/E9CD\E9CD;
                      LSR A                                     ;;E97E|E9DE+E9DE/E9CE\E9CE;
                      LSR A                                     ;;E97F|E9DF+E9DF/E9CF\E9CF;
                      SEP #$20                                  ;;E980|E9E0+E9E0/E9D0\E9D0; Accum (8 bit) 
                      STA.B !_0                                 ;;E982|E9E2+E9E2/E9D2\E9D2;
                      SEC                                       ;;E984|E9E4+E9E4/E9D4\E9D4;
                      SBC.B !PlayerXSpeed                       ;;E985|E9E5+E9E5/E9D5\E9D5;
                      EOR.W DATA_00E90E,Y                       ;;E987|E9E7+E9E7/E9D7\E9D7;
                      BMI +                                     ;;E98A|E9EA+E9EA/E9DA\E9DA;
                      LDA.B !_0                                 ;;E98C|E9EC+E9EC/E9DC\E9DC;
                      STA.B !PlayerXSpeed                       ;;E98E|E9EE+E9EE/E9DE\E9DE;
                      LDA.W !Layer1ScrollXPosUpd                ;;E990|E9F0+E9F0/E9E0\E9E0;
                      STA.W !PlayerXSpeedFPSpx                  ;;E993|E9F3+E9F3/E9E3\E9E3;
                    + LDA.W DATA_00E90A,Y                       ;;E996|E9F6+E9F6/E9E6\E9E6;
                      TSB.B !PlayerBlockedDir                   ;;E999|E9F9+E9F9/E9E9\E9E9;
CODE_00E9FB:          LDA.B !PlayerBlockedDir                   ;;E99B|E9FB+E9FB/E9EB\E9EB;
                      AND.B #$1C                                ;;E99D|E9FD+E9FD/E9ED\E9ED;
                      CMP.B #$1C                                ;;E99F|E9FF+E9FF/E9EF\E9EF;
                      BNE CODE_00EA0D                           ;;E9A1|EA01+EA01/E9F1\E9F1;
                      LDA.W !StandOnSolidSprite                 ;;E9A3|EA03+EA03/E9F3\E9F3;
                      BNE CODE_00EA0D                           ;;E9A6|EA06+EA06/E9F6\E9F6;
CODE_00EA08:          JSR CODE_00F629                           ;;E9A8|EA08+EA08/E9F8\E9F8;
                      BRA CODE_00EA32                           ;;E9AB|EA0B+EA0B/E9FB\E9FB;
                                                                ;;                        ;
CODE_00EA0D:          LDA.B !PlayerBlockedDir                   ;;E9AD|EA0D+EA0D/E9FD\E9FD;
                      AND.B #$03                                ;;E9AF|EA0F+EA0F/E9FF\E9FF;
                      BEQ +                                     ;;E9B1|EA11+EA11/EA01\EA01;
                      AND.B #$02                                ;;E9B3|EA13+EA13/EA03\EA03;
                      TAY                                       ;;E9B5|EA15+EA15/EA05\EA05;
                      REP #$20                                  ;;E9B6|EA16+EA16/EA06\EA06; Accum (16 bit) 
                      LDA.B !PlayerXPosNext                     ;;E9B8|EA18+EA18/EA08\EA08;
                      CLC                                       ;;E9BA|EA1A+EA1A/EA0A\EA0A;
                      ADC.W DATA_00E90D,Y                       ;;E9BB|EA1B+EA1B/EA0B\EA0B;
                      STA.B !PlayerXPosNext                     ;;E9BE|EA1E+EA1E/EA0E\EA0E;
                      SEP #$20                                  ;;E9C0|EA20+EA20/EA10\EA10; Accum (8 bit) 
                      LDA.B !PlayerBlockedDir                   ;;E9C2|EA22+EA22/EA12\EA12;
                      BMI +                                     ;;E9C4|EA24+EA24/EA14\EA14;
                      LDA.B #$03                                ;;E9C6|EA26+EA26/EA16\EA16;
                      STA.W !PlayerPoseLenTimer                 ;;E9C8|EA28+EA28/EA18\EA18;
                      LDA.B !PlayerXSpeed                       ;;E9CB|EA2B+EA2B/EA1B\EA1B;
                      EOR.W DATA_00E90D,Y                       ;;E9CD|EA2D+EA2D/EA1D\EA1D;
                      BPL +                                     ;;E9D0|EA30+EA30/EA20\EA20;
CODE_00EA32:          STZ.B !PlayerXSpeed                       ;;E9D2|EA32+EA32/EA22\EA22;
                    + LDA.W !PlayerBehindNet                    ;;E9D4|EA34+EA34/EA24\EA24;
                      CMP.B #$01                                ;;E9D7|EA37+EA37/EA27\EA27;
                      BNE +                                     ;;E9D9|EA39+EA39/EA29\EA29;
                      LDA.B !GraphicsCompPtr+1                  ;;E9DB|EA3B+EA3B/EA2B\EA2B;
                      BNE +                                     ;;E9DD|EA3D+EA3D/EA2D\EA2D;
                      STZ.W !PlayerBehindNet                    ;;E9DF|EA3F+EA3F/EA2F\EA2F;
                    + STZ.W !PlayerCanJumpWater                 ;;E9E2|EA42+EA42/EA32\EA32;
                      LDA.B !LevelIsWater                       ;;E9E5|EA45+EA45/EA35\EA35;
                      BNE CODE_00EA5E                           ;;E9E7|EA47+EA47/EA37\EA37;
                      LSR.B !GraphicsCompPtr                    ;;E9E9|EA49+EA49/EA39\EA39;
                      BCC CODE_00EAA3                           ;;E9EB|EA4B+EA4B/EA3B\EA3B;
                      LDA.B !PlayerInWater                      ;;E9ED|EA4D+EA4D/EA3D\EA3D;
                      BNE CODE_00EA65                           ;;E9EF|EA4F+EA4F/EA3F\EA3F;
                      LDA.B !PlayerYSpeed                       ;;E9F1|EA51+EA51/EA41\EA41;
                      BMI CODE_00EA65                           ;;E9F3|EA53+EA53/EA43\EA43;
                      LSR.B !GraphicsCompPtr                    ;;E9F5|EA55+EA55/EA45\EA45;
                      BCC Return00EAA5                          ;;E9F7|EA57+EA57/EA47\EA47;
                      JSR CODE_00FDA5                           ;;E9F9|EA59+EA59/EA49\EA49;
                      STZ.B !PlayerYSpeed                       ;;E9FC|EA5C+EA5C/EA4C\EA4C;
CODE_00EA5E:          LDA.B #$01                                ;;E9FE|EA5E+EA5E/EA4E\EA4E;
                      STA.B !PlayerInWater                      ;;EA00|EA60+EA60/EA50\EA50;
CODE_00EA62:          JMP CODE_00FD08                           ;;EA02|EA62+EA62/EA52\EA52;
                                                                ;;                        ;
CODE_00EA65:          LSR.B !GraphicsCompPtr                    ;;EA05|EA65+EA65/EA55\EA55;
                      BCS CODE_00EA5E                           ;;EA07|EA67+EA67/EA57\EA57;
                      LDA.B !PlayerInWater                      ;;EA09|EA69+EA69/EA59\EA59;
                      BEQ Return00EAA5                          ;;EA0B|EA6B+EA6B/EA5B\EA5B;
                      LDA.B #$FC                                ;;EA0D|EA6D+EA6D/EA5D\EA5D;
                      CMP.B !PlayerYSpeed                       ;;EA0F|EA6F+EA6F/EA5F\EA5F;
                      BMI +                                     ;;EA11|EA71+EA71/EA61\EA61;
                      STA.B !PlayerYSpeed                       ;;EA13|EA73+EA73/EA63\EA63;
                    + INC.W !PlayerCanJumpWater                 ;;EA15|EA75+EA75/EA65\EA65;
                      LDA.B !byetudlrHold                       ;;EA18|EA78+EA78/EA68\EA68;
                      AND.B #$88                                ;;EA1A|EA7A+EA7A/EA6A\EA6A;
                      CMP.B #$88                                ;;EA1C|EA7C+EA7C/EA6C\EA6C;
                      BNE CODE_00EA62                           ;;EA1E|EA7E+EA7E/EA6E\EA6E;
                      LDA.B !axlr0000Hold                       ;;EA20|EA80+EA80/EA70\EA70;
                      BPL +                                     ;;EA22|EA82+EA82/EA72\EA72;
                      LDA.W !IsCarryingItem                     ;;EA24|EA84+EA84/EA74\EA74;
                      BNE +                                     ;;EA27|EA87+EA87/EA77\EA77;
                      INC A                                     ;;EA29|EA89+EA89/EA79\EA79;
                      STA.W !SpinJumpFlag                       ;;EA2A|EA8A+EA8A/EA7A\EA7A;
                      LDA.B #!SFX_SPIN                          ;;EA2D|EA8D+EA8D/EA7D\EA7D; \ Play sound effect 
                      STA.W !SPCIO3                             ;;EA2F|EA8F+EA8F/EA7F\EA7F; / 
                    + LDA.B !PlayerBlockedDir                   ;;EA32|EA92+EA92/EA82\EA82;
                      AND.B #$08                                ;;EA34|EA94+EA94/EA84\EA84;
                      BNE CODE_00EA62                           ;;EA36|EA96+EA96/EA86\EA86;
                      JSR CODE_00FDA5                           ;;EA38|EA98+EA98/EA88\EA88;
                      LDA.B #$0B                                ;;EA3B|EA9B+EA9B/EA8B\EA8B;
                      STA.B !PlayerInAir                        ;;EA3D|EA9D+EA9D/EA8D\EA8D;
                      LDA.B #$AA                                ;;EA3F|EA9F+EA9F/EA8F\EA8F;
                      STA.B !PlayerYSpeed                       ;;EA41|EAA1+EAA1/EA91\EA91;
CODE_00EAA3:          STZ.B !PlayerInWater                      ;;EA43|EAA3+EAA3/EA93\EA93;
Return00EAA5:         RTS                                       ;;EA45|EAA5+EAA5/EA95\EA95; Return 
                                                                ;;                        ;
CODE_00EAA6:          STZ.W !PlayerPoseLenTimer                 ;;EA46|EAA6+EAA6/EA96\EA96;
                      STZ.B !PlayerBlockedDir                   ;;EA49|EAA9+EAA9/EA99\EA99;
                      STZ.W !SlopeType                          ;;EA4B|EAAB+EAAB/EA9B\EA9B;
                      STZ.W !CurrentSlope                       ;;EA4E|EAAE+EAAE/EA9E\EA9E;
                      STZ.B !GraphicsCompPtr                    ;;EA51|EAB1+EAB1/EAA1\EAA1;
                      STZ.B !GraphicsCompPtr+1                  ;;EA53|EAB3+EAB3/EAA3\EAA3;
                      STZ.W !Layer2Touched                      ;;EA55|EAB5+EAB5/EAA5\EAA5;
                      RTS                                       ;;EA58|EAB8+EAB8/EAA8\EAA8; Return 
                                                                ;;                        ;
                                                                ;;                        ;
                   if ver_is_ntsc(!_VER)              ;\   IF   ;;++++++++++++++++++++++++; J, U, & SS
DATA_00EAB9:          db $DE,$23                                ;;EA59|EAB9+EAB9          ;
                   else                               ;<  ELSE  ;;------------------------; E0 & E1
DATA_00EAB9:          db $D6,$2B                                ;;              /EAA9\EAA9;
                   endif                              ;/ ENDIF  ;;++++++++++++++++++++++++;
                                                                ;;                        ;
DATA_00EABB:          db $20,$E0                                ;;EA5B|EABB+EABB/EAAB\EAAB;
                                                                ;;                        ;
DATA_00EABD:          db $08,$00,$F8,$FF                        ;;EA5D|EABD+EABD/EAAD\EAAD;
                                                                ;;                        ;
DATA_00EAC1:          db $71,$72,$76,$77,$7B,$7C,$81,$86        ;;EA61|EAC1+EAC1/EAB1\EAB1;
                      db $8A,$8B,$8F,$90,$94,$95,$99,$9A        ;;EA69|EAC9+EAC9/EAB9\EAB9;
                      db $9E,$9F,$A3,$A4,$A8,$A9,$AD,$AE        ;;EA71|EAD1+EAD1/EAC1\EAC1;
                      db $B2,$B3                                ;;EA79|EAD9+EAD9/EAC9\EAC9;
                                                                ;;                        ;
CODE_00EADB:          LDA.B !PlayerYPosNext                     ;;EA7B|EADB+EADB/EACB\EACB;
                      AND.B #$0F                                ;;EA7D|EADD+EADD/EACD\EACD;
                      STA.B !PlayerYPosInBlock                  ;;EA7F|EADF+EADF/EACF\EACF;
                      LDA.W !WallrunningType                    ;;EA81|EAE1+EAE1/EAD1\EAD1;
                      BNE +                                     ;;EA84|EAE4+EAE4/EAD4\EAD4;
                      JMP CODE_00EB77                           ;;EA86|EAE6+EAE6/EAD6\EAD6;
                                                                ;;                        ;
                    + AND.B #$01                                ;;EA89|EAE9+EAE9/EAD9\EAD9;
                      TAY                                       ;;EA8B|EAEB+EAEB/EADB\EADB;
                      LDA.B !PlayerXSpeed                       ;;EA8C|EAEC+EAEC/EADC\EADC;
                      SEC                                       ;;EA8E|EAEE+EAEE/EADE\EADE;
                      SBC.W DATA_00EAB9,Y                       ;;EA8F|EAEF+EAEF/EADF\EADF;
                      EOR.W DATA_00EAB9,Y                       ;;EA92|EAF2+EAF2/EAE2\EAE2;
                      BMI CODE_00EB48                           ;;EA95|EAF5+EAF5/EAE5\EAE5;
                      LDA.B !PlayerInAir                        ;;EA97|EAF7+EAF7/EAE7\EAE7;
                      ORA.W !IsCarryingItem                     ;;EA99|EAF9+EAF9/EAE9\EAE9;
                      ORA.B !PlayerIsDucking                    ;;EA9C|EAFC+EAFC/EAEC\EAEC;
                      ORA.W !PlayerRidingYoshi                  ;;EA9E|EAFE+EAFE/EAEE\EAEE;
                      BNE CODE_00EB48                           ;;EAA1|EB01+EB01/EAF1\EAF1;
                      LDA.W !WallrunningType                    ;;EAA3|EB03+EB03/EAF3\EAF3;
                      CMP.B #$06                                ;;EAA6|EB06+EB06/EAF6\EAF6;
                      BCS CODE_00EB22                           ;;EAA8|EB08+EB08/EAF8\EAF8;
                      LDX.B !PlayerYPosInBlock                  ;;EAAA|EB0A+EB0A/EAFA\EAFA;
                      CPX.B #$08                                ;;EAAC|EB0C+EB0C/EAFC\EAFC;
                      BCC Return00EB76                          ;;EAAE|EB0E+EB0E/EAFE\EAFE;
                      CMP.B #$04                                ;;EAB0|EB10+EB10/EB00\EB00;
                      BCS CODE_00EB73                           ;;EAB2|EB12+EB12/EB02\EB02;
                      ORA.B #$04                                ;;EAB4|EB14+EB14/EB04\EB04;
                      STA.W !WallrunningType                    ;;EAB6|EB16+EB16/EB06\EB06;
CODE_00EB19:          LDA.B !PlayerXPosNext                     ;;EAB9|EB19+EB19/EB09\EB09;
                      AND.B #$F0                                ;;EABB|EB1B+EB1B/EB0B\EB0B;
                      ORA.B #$08                                ;;EABD|EB1D+EB1D/EB0D\EB0D;
                      STA.B !PlayerXPosNext                     ;;EABF|EB1F+EB1F/EB0F\EB0F;
                      RTS                                       ;;EAC1|EB21+EB21/EB11\EB11; Return 
                                                                ;;                        ;
CODE_00EB22:          LDX.B #$60                                ;;EAC2|EB22+EB22/EB12\EB12;
                      TYA                                       ;;EAC4|EB24+EB24/EB14\EB14;
                      BEQ +                                     ;;EAC5|EB25+EB25/EB15\EB15;
                      LDX.B #$66                                ;;EAC7|EB27+EB27/EB17\EB17;
                    + JSR CODE_00EFE8                           ;;EAC9|EB29+EB29/EB19\EB19;
                      LDA.B !Powerup                            ;;EACC|EB2C+EB2C/EB1C\EB1C;
                      BNE CODE_00EB34                           ;;EACE|EB2E+EB2E/EB1E\EB1E;
                      INX                                       ;;EAD0|EB30+EB30/EB20\EB20;
                      INX                                       ;;EAD1|EB31+EB31/EB21\EB21;
                      BRA +                                     ;;EAD2|EB32+EB32/EB22\EB22;
                                                                ;;                        ;
CODE_00EB34:          JSR CODE_00EFE8                           ;;EAD4|EB34+EB34/EB24\EB24;
                    + JSR CODE_00F44D                           ;;EAD7|EB37+EB37/EB27\EB27;
                      BNE CODE_00EB19                           ;;EADA|EB3A+EB3A/EB2A\EB2A;
                      LDA.B #$02                                ;;EADC|EB3C+EB3C/EB2C\EB2C;
                      TRB.W !WallrunningType                    ;;EADE|EB3E+EB3E/EB2E\EB2E;
                      RTS                                       ;;EAE1|EB41+EB41/EB31\EB31; Return 
                                                                ;;                        ;
ADDR_00EB42:          LDA.W !WallrunningType                    ;;EAE2|EB42+EB42/EB32\EB32;
                      AND.B #$01                                ;;EAE5|EB45+EB45/EB35\EB35;
                      TAY                                       ;;EAE7|EB47+EB47/EB37\EB37;
CODE_00EB48:          LDA.W DATA_00EABB,Y                       ;;EAE8|EB48+EB48/EB38\EB38;
                      STA.B !PlayerXSpeed                       ;;EAEB|EB4B+EB4B/EB3B\EB3B;
                      TYA                                       ;;EAED|EB4D+EB4D/EB3D\EB3D;
                      ASL A                                     ;;EAEE|EB4E+EB4E/EB3E\EB3E;
                      TAY                                       ;;EAEF|EB4F+EB4F/EB3F\EB3F;
                      REP #$20                                  ;;EAF0|EB50+EB50/EB40\EB40; Accum (16 bit) 
                      LDA.B !PlayerXPosNext                     ;;EAF2|EB52+EB52/EB42\EB42;
                      CLC                                       ;;EAF4|EB54+EB54/EB44\EB44;
                      ADC.W DATA_00EABD,Y                       ;;EAF5|EB55+EB55/EB45\EB45;
                      STA.B !PlayerXPosNext                     ;;EAF8|EB58+EB58/EB48\EB48;
                      LDA.W #$0008                              ;;EAFA|EB5A+EB5A/EB4A\EB4A;
                      LDY.B !Powerup                            ;;EAFD|EB5D+EB5D/EB4D\EB4D;
                      BEQ +                                     ;;EAFF|EB5F+EB5F/EB4F\EB4F;
                      LDA.W #$0010                              ;;EB01|EB61+EB61/EB51\EB51;
                    + CLC                                       ;;EB04|EB64+EB64/EB54\EB54;
                      ADC.B !PlayerYPosNext                     ;;EB05|EB65+EB65/EB55\EB55;
                      STA.B !PlayerYPosNext                     ;;EB07|EB67+EB67/EB57\EB57;
                      SEP #$20                                  ;;EB09|EB69+EB69/EB59\EB59; Accum (8 bit) 
                      LDA.B #$24                                ;;EB0B|EB6B+EB6B/EB5B\EB5B;
                      STA.B !PlayerInAir                        ;;EB0D|EB6D+EB6D/EB5D\EB5D;
                      LDA.B #$E0                                ;;EB0F|EB6F+EB6F/EB5F\EB5F;
                      STA.B !PlayerYSpeed                       ;;EB11|EB71+EB71/EB61\EB61;
CODE_00EB73:          STZ.W !WallrunningType                    ;;EB13|EB73+EB73/EB63\EB63;
Return00EB76:         RTS                                       ;;EB16|EB76+EB76/EB66\EB66; Return 
                                                                ;;                        ;
CODE_00EB77:          LDX.B #$00                                ;;EB17|EB77+EB77/EB67\EB67;
                      LDA.B !Powerup                            ;;EB19|EB79+EB79/EB69\EB69;
                      BEQ +                                     ;;EB1B|EB7B+EB7B/EB6B\EB6B;
                      LDA.B !PlayerIsDucking                    ;;EB1D|EB7D+EB7D/EB6D\EB6D;
                      BNE +                                     ;;EB1F|EB7F+EB7F/EB6F\EB6F;
                      LDX.B #$18                                ;;EB21|EB81+EB81/EB71\EB71;
                    + LDA.W !PlayerRidingYoshi                  ;;EB23|EB83+EB83/EB73\EB73;
                      BEQ +                                     ;;EB26|EB86+EB86/EB76\EB76;
                      TXA                                       ;;EB28|EB88+EB88/EB78\EB78;
                      CLC                                       ;;EB29|EB89+EB89/EB79\EB79;
                      ADC.B #$30                                ;;EB2A|EB8A+EB8A/EB7A\EB7A;
                      TAX                                       ;;EB2C|EB8C+EB8C/EB7C\EB7C;
                    + LDA.B !PlayerXPosNext                     ;;EB2D|EB8D+EB8D/EB7D\EB7D;
                      AND.B #$0F                                ;;EB2F|EB8F+EB8F/EB7F\EB7F;
                      TAY                                       ;;EB31|EB91+EB91/EB81\EB81;
                      CLC                                       ;;EB32|EB92+EB92/EB82\EB82;
                      ADC.B #$08                                ;;EB33|EB93+EB93/EB83\EB83;
                      AND.B #$0F                                ;;EB35|EB95+EB95/EB85\EB85;
                      STA.B !PlayerXPosInBlock                  ;;EB37|EB97+EB97/EB87\EB87;
                      STZ.B !PlayerBlockXSide                   ;;EB39|EB99+EB99/EB89\EB89;
                      CPY.B #$08                                ;;EB3B|EB9B+EB9B/EB8B\EB8B;
                      BCC +                                     ;;EB3D|EB9D+EB9D/EB8D\EB8D;
                      TXA                                       ;;EB3F|EB9F+EB9F/EB8F\EB8F;
                      ADC.B #$0B                                ;;EB40|EBA0+EBA0/EB90\EB90;
                      TAX                                       ;;EB42|EBA2+EBA2/EB92\EB92;
                      INC.B !PlayerBlockXSide                   ;;EB43|EBA3+EBA3/EB93\EB93;
                    + LDA.B !PlayerYPosInBlock                  ;;EB45|EBA5+EBA5/EB95\EB95;
                      CLC                                       ;;EB47|EBA7+EBA7/EB97\EB97;
                      ADC.W DATA_00E8A4,X                       ;;EB48|EBA8+EBA8/EB98\EB98;
                      AND.B #$0F                                ;;EB4B|EBAB+EBAB/EB9B\EB9B;
                      STA.B !PlayerBlockMoveY                   ;;EB4D|EBAD+EBAD/EB9D\EB9D;
                      JSR CODE_00F44D                           ;;EB4F|EBAF+EBAF/EB9F\EB9F;
                      BEQ CODE_00EBDD                           ;;EB52|EBB2+EBB2/EBA2\EBA2;
                      CPY.B #$11                                ;;EB54|EBB4+EBB4/EBA4\EBA4;
                      BCC CODE_00EC24                           ;;EB56|EBB6+EBB6/EBA6\EBA6;
                      CPY.B #$6E                                ;;EB58|EBB8+EBB8/EBA8\EBA8;
                      BCC CODE_00EBC9                           ;;EB5A|EBBA+EBBA/EBAA\EBAA;
                      TYA                                       ;;EB5C|EBBC+EBBC/EBAC\EBAC;
                      JSL CODE_00F04D                           ;;EB5D|EBBD+EBBD/EBAD\EBAD;
                      BCC CODE_00EC24                           ;;EB61|EBC1+EBC1/EBB1\EBB1;
                      LDA.B #$01                                ;;EB63|EBC3+EBC3/EBB3\EBB3;
                      TSB.B !GraphicsCompPtr                    ;;EB65|EBC5+EBC5/EBB5\EBB5;
                      BRA CODE_00EC24                           ;;EB67|EBC7+EBC7/EBB7\EBB7;
                                                                ;;                        ;
CODE_00EBC9:          INX                                       ;;EB69|EBC9+EBC9/EBB9\EBB9;
                      INX                                       ;;EB6A|EBCA+EBCA/EBBA\EBBA;
                      INX                                       ;;EB6B|EBCB+EBCB/EBBB\EBBB;
                      INX                                       ;;EB6C|EBCC+EBCC/EBBC\EBBC;
                      TYA                                       ;;EB6D|EBCD+EBCD/EBBD\EBBD;
                      LDY.B #$00                                ;;EB6E|EBCE+EBCE/EBBE\EBBE;
                      CMP.B #$1E                                ;;EB70|EBD0+EBD0/EBC0\EBC0;
                      BEQ +                                     ;;EB72|EBD2+EBD2/EBC2\EBC2;
                      CMP.B #$52                                ;;EB74|EBD4+EBD4/EBC4\EBC4;
                      BEQ +                                     ;;EB76|EBD6+EBD6/EBC6\EBC6;
                      LDY.B #$02                                ;;EB78|EBD8+EBD8/EBC8\EBC8;
                    + JMP CODE_00EC6F                           ;;EB7A|EBDA+EBDA/EBCA\EBCA;
                                                                ;;                        ;
CODE_00EBDD:          CPY.B #$9C                                ;;EB7D|EBDD+EBDD/EBCD\EBCD;
                      BNE CODE_00EBE8                           ;;EB7F|EBDF+EBDF/EBCF\EBCF;
                      LDA.W !ObjectTileset                      ;;EB81|EBE1+EBE1/EBD1\EBD1;
                      CMP.B #$01                                ;;EB84|EBE4+EBE4/EBD4\EBD4;
                      BEQ CODE_00EC06                           ;;EB86|EBE6+EBE6/EBD6\EBD6;
CODE_00EBE8:          CPY.B #$20                                ;;EB88|EBE8+EBE8/EBD8\EBD8;
                      BEQ CODE_00EC01                           ;;EB8A|EBEA+EBEA/EBDA\EBDA;
                      CPY.B #$1F                                ;;EB8C|EBEC+EBEC/EBDC\EBDC;
                      BEQ CODE_00EBFD                           ;;EB8E|EBEE+EBEE/EBDE\EBDE;
                      LDA.W !BluePSwitchTimer                   ;;EB90|EBF0+EBF0/EBE0\EBE0;
                      BEQ CODE_00EC21                           ;;EB93|EBF3+EBF3/EBE3\EBE3;
                      CPY.B #$28                                ;;EB95|EBF5+EBF5/EBE5\EBE5;
                      BEQ CODE_00EC01                           ;;EB97|EBF7+EBF7/EBE7\EBE7;
                      CPY.B #$27                                ;;EB99|EBF9+EBF9/EBE9\EBE9;
                      BNE CODE_00EC21                           ;;EB9B|EBFB+EBFB/EBEB\EBEB;
CODE_00EBFD:          LDA.B !Powerup                            ;;EB9D|EBFD+EBFD/EBED\EBED;
                      BNE CODE_00EC24                           ;;EB9F|EBFF+EBFF/EBEF\EBEF;
CODE_00EC01:          JSR CODE_00F443                           ;;EBA1|EC01+EC01/EBF1\EBF1;
                      BCS CODE_00EC24                           ;;EBA4|EC04+EC04/EBF4\EBF4;
CODE_00EC06:          LDA.B !GraphicsUncompPtr+2                ;;EBA6|EC06+EC06/EBF6\EBF6;
                      BNE CODE_00EC24                           ;;EBA8|EC08+EC08/EBF8\EBF8;
                      LDA.B !byetudlrFrame                      ;;EBAA|EC0A+EC0A/EBFA\EBFA;
                      AND.B #$08                                ;;EBAC|EC0C+EC0C/EBFC\EBFC;
                      BEQ CODE_00EC24                           ;;EBAE|EC0E+EC0E/EBFE\EBFE;
                      LDA.B #!BGM_KEYHOLE                       ;;EBB0|EC10+EC10/EC00\EC00; \ Play sound effect 
                      STA.W !SPCIO3                             ;;EBB2|EC12+EC12/EC02\EC02; / 
                      JSR CODE_00D273                           ;;EBB5|EC15+EC15/EC05\EC05;
                      LDA.B #$0D                                ;;EBB8|EC18+EC18/EC08\EC08;
                      STA.B !PlayerAnimation                    ;;EBBA|EC1A+EC1A/EC0A\EC0A;
                      JSR NoButtons                             ;;EBBC|EC1C+EC1C/EC0C\EC0C;
                      BRA CODE_00EC24                           ;;EBBF|EC1F+EC1F/EC0F\EC0F;
                                                                ;;                        ;
CODE_00EC21:          JSR CODE_00F28C                           ;;EBC1|EC21+EC21/EC11\EC11;
CODE_00EC24:          JSR CODE_00F44D                           ;;EBC4|EC24+EC24/EC14\EC14;
                      BEQ CODE_00EC35                           ;;EBC7|EC27+EC27/EC17\EC17;
                      CPY.B #$11                                ;;EBC9|EC29+EC29/EC19\EC19;
                      BCC CODE_00EC3A                           ;;EBCB|EC2B+EC2B/EC1B\EC1B;
                      CPY.B #$6E                                ;;EBCD|EC2D+EC2D/EC1D\EC1D;
                      BCS CODE_00EC3A                           ;;EBCF|EC2F+EC2F/EC1F\EC1F;
                      INX                                       ;;EBD1|EC31+EC31/EC21\EC21;
                      INX                                       ;;EBD2|EC32+EC32/EC22\EC22;
                      BRA CODE_00EC4E                           ;;EBD3|EC33+EC33/EC23\EC23;
                                                                ;;                        ;
CODE_00EC35:          LDA.B #$10                                ;;EBD5|EC35+EC35/EC25\EC25;
                      JSR CODE_00F2C9                           ;;EBD7|EC37+EC37/EC27\EC27;
CODE_00EC3A:          JSR CODE_00F44D                           ;;EBDA|EC3A+EC3A/EC2A\EC2A;
                      BNE CODE_00EC46                           ;;EBDD|EC3D+EC3D/EC2D\EC2D;
                      LDA.B #$08                                ;;EBDF|EC3F+EC3F/EC2F\EC2F;
                      JSR CODE_00F2C9                           ;;EBE1|EC41+EC41/EC31\EC31;
                      BRA CODE_00EC8A                           ;;EBE4|EC44+EC44/EC34\EC34;
                                                                ;;                        ;
CODE_00EC46:          CPY.B #$11                                ;;EBE6|EC46+EC46/EC36\EC36;
                      BCC CODE_00EC8A                           ;;EBE8|EC48+EC48/EC38\EC38;
                      CPY.B #$6E                                ;;EBEA|EC4A+EC4A/EC3A\EC3A;
                      BCS CODE_00EC8A                           ;;EBEC|EC4C+EC4C/EC3C\EC3C;
CODE_00EC4E:          LDA.B !PlayerDirection                    ;;EBEE|EC4E+EC4E/EC3E\EC3E;
                      CMP.B !PlayerBlockXSide                   ;;EBF0|EC50+EC50/EC40\EC40;
                      BEQ +                                     ;;EBF2|EC52+EC52/EC42\EC42;
                      JSR CODE_00F3C4                           ;;EBF4|EC54+EC54/EC44\EC44;
                      PHX                                       ;;EBF7|EC57+EC57/EC47\EC47;
                      JSR CODE_00F267                           ;;EBF8|EC58+EC58/EC48\EC48;
                      LDY.W !Map16TileNumber                    ;;EBFB|EC5B+EC5B/EC4B\EC4B; Current MAP16 tile number 
                      PLX                                       ;;EBFE|EC5E+EC5E/EC4E\EC4E;
                    + LDA.B #$03                                ;;EBFF|EC5F+EC5F/EC4F\EC4F;
                      STA.W !PlayerPoseLenTimer                 ;;EC01|EC61+EC61/EC51\EC51;
                      LDY.B !PlayerBlockXSide                   ;;EC04|EC64+EC64/EC54\EC54;
                      LDA.B !PlayerXPosNext                     ;;EC06|EC66+EC66/EC56\EC56;
                      AND.B #$0F                                ;;EC08|EC68+EC68/EC58\EC58;
                      CMP.W DATA_00E911,Y                       ;;EC0A|EC6A+EC6A/EC5A\EC5A;
                      BEQ CODE_00EC8A                           ;;EC0D|EC6D+EC6D/EC5D\EC5D;
CODE_00EC6F:          LDA.W !NoteBlockActive                    ;;EC0F|EC6F+EC6F/EC5F\EC5F;
                      BEQ CODE_00EC7B                           ;;EC12|EC72+EC72/EC62\EC62;
                      LDA.W !Map16TileNumber                    ;;EC14|EC74+EC74/EC64\EC64;
                      CMP.B #$52                                ;;EC17|EC77+EC77/EC67\EC67;
                      BEQ CODE_00EC8A                           ;;EC19|EC79+EC79/EC69\EC69;
CODE_00EC7B:          LDA.W DATA_00E90A,Y                       ;;EC1B|EC7B+EC7B/EC6B\EC6B;
                      TSB.B !PlayerBlockedDir                   ;;EC1E|EC7E+EC7E/EC6E\EC6E;
                      AND.B #$03                                ;;EC20|EC80+EC80/EC70\EC70;
                      TAY                                       ;;EC22|EC82+EC82/EC72\EC72;
                      LDA.W !Map16TileNumber                    ;;EC23|EC83+EC83/EC73\EC73; Current MAP16 tile number 
                      JSL CODE_00F127                           ;;EC26|EC86+EC86/EC76\EC76;
CODE_00EC8A:          JSR CODE_00F44D                           ;;EC2A|EC8A+EC8A/EC7A\EC7A;
                      BNE CODE_00ECB1                           ;;EC2D|EC8D+EC8D/EC7D\EC7D;
                      LDA.B #$02                                ;;EC2F|EC8F+EC8F/EC7F\EC7F;
                      JSR CODE_00F2C2                           ;;EC31|EC91+EC91/EC81\EC81;
                      LDY.B !PlayerYSpeed                       ;;EC34|EC94+EC94/EC84\EC84;
                      BPL CODE_00ECA3                           ;;EC36|EC96+EC96/EC86\EC86;
                      LDA.W !Map16TileNumber                    ;;EC38|EC98+EC98/EC88\EC88; Current MAP16 tile number 
                      CMP.B #$21                                ;;EC3B|EC9B+EC9B/EC8B\EC8B;
                      BCC CODE_00ECA3                           ;;EC3D|EC9D+EC9D/EC8D\EC8D;
                      CMP.B #$25                                ;;EC3F|EC9F+EC9F/EC8F\EC8F;
                      BCC +                                     ;;EC41|ECA1+ECA1/EC91\EC91;
CODE_00ECA3:          JMP CODE_00ED4A                           ;;EC43|ECA3+ECA3/EC93\EC93;
                                                                ;;                        ;
                    + SEC                                       ;;EC46|ECA6+ECA6/EC96\EC96;
                      SBC.B #$04                                ;;EC47|ECA7+ECA7/EC97\EC97;
                      LDY.B #$00                                ;;EC49|ECA9+ECA9/EC99\EC99;
                      JSL CODE_00F17F                           ;;EC4B|ECAB+ECAB/EC9B\EC9B;
                      BRA CODE_00ED0D                           ;;EC4F|ECAF+ECAF/EC9F\EC9F;
                                                                ;;                        ;
CODE_00ECB1:          CPY.B #$11                                ;;EC51|ECB1+ECB1/ECA1\ECA1;
                      BCC CODE_00ECA3                           ;;EC53|ECB3+ECB3/ECA3\ECA3;
                      CPY.B #$6E                                ;;EC55|ECB5+ECB5/ECA5\ECA5;
                      BCC CODE_00ECFA                           ;;EC57|ECB7+ECB7/ECA7\ECA7;
                      CPY.B #$D8                                ;;EC59|ECB9+ECB9/ECA9\ECA9;
                      BCC CODE_00ECDA                           ;;EC5B|ECBB+ECBB/ECAB\ECAB;
                      REP #$20                                  ;;EC5D|ECBD+ECBD/ECAD\ECAD; Accum (16 bit) 
                      LDA.B !TouchBlockYPos                     ;;EC5F|ECBF+ECBF/ECAF\ECAF;
                      CLC                                       ;;EC61|ECC1+ECC1/ECB1\ECB1;
                      ADC.W #$0010                              ;;EC62|ECC2+ECC2/ECB2\ECB2;
                      STA.B !TouchBlockYPos                     ;;EC65|ECC5+ECC5/ECB5\ECB5;
                      JSR CODE_00F461                           ;;EC67|ECC7+ECC7/ECB7\ECB7;
                      BEQ CODE_00ECF8                           ;;EC6A|ECCA+ECCA/ECBA\ECBA;
                      CPY.B #$6E                                ;;EC6C|ECCC+ECCC/ECBC\ECBC;
                      BCC CODE_00ED4A                           ;;EC6E|ECCE+ECCE/ECBE\ECBE;
                      CPY.B #$D8                                ;;EC70|ECD0+ECD0/ECC0\ECC0;
                      BCS CODE_00ED4A                           ;;EC72|ECD2+ECD2/ECC2\ECC2;
                      LDA.B !PlayerBlockMoveY                   ;;EC74|ECD4+ECD4/ECC4\ECC4; Accum (8 bit) 
                      SBC.B #$0F                                ;;EC76|ECD6+ECD6/ECC6\ECC6;
                      STA.B !PlayerBlockMoveY                   ;;EC78|ECD8+ECD8/ECC8\ECC8;
CODE_00ECDA:          TYA                                       ;;EC7A|ECDA+ECDA/ECCA\ECCA;
                      SEC                                       ;;EC7B|ECDB+ECDB/ECCB\ECCB;
                      SBC.B #$6E                                ;;EC7C|ECDC+ECDC/ECCC\ECCC;
                      TAY                                       ;;EC7E|ECDE+ECDE/ECCE\ECCE;
                      REP #$20                                  ;;EC7F|ECDF+ECDF/ECCF\ECCF; Accum (16 bit) 
                      LDA.B [!SlopesPtr],Y                      ;;EC81|ECE1+ECE1/ECD1\ECD1;
                      AND.W #$00FF                              ;;EC83|ECE3+ECE3/ECD3\ECD3;
                      ASL A                                     ;;EC86|ECE6+ECE6/ECD6\ECD6;
                      ASL A                                     ;;EC87|ECE7+ECE7/ECD7\ECD7;
                      ASL A                                     ;;EC88|ECE8+ECE8/ECD8\ECD8;
                      ASL A                                     ;;EC89|ECE9+ECE9/ECD9\ECD9;
                      SEP #$20                                  ;;EC8A|ECEA+ECEA/ECDA\ECDA; Accum (8 bit) 
                      ORA.B !PlayerXPosInBlock                  ;;EC8C|ECEC+ECEC/ECDC\ECDC;
                      REP #$10                                  ;;EC8E|ECEE+ECEE/ECDE\ECDE; Index (16 bit) 
                      TAY                                       ;;EC90|ECF0+ECF0/ECE0\ECE0;
                      LDA.W DATA_00E632,Y                       ;;EC91|ECF1+ECF1/ECE1\ECE1;
                      SEP #$10                                  ;;EC94|ECF4+ECF4/ECE4\ECE4; Index (8 bit) 
                      BMI CODE_00ED0F                           ;;EC96|ECF6+ECF6/ECE6\ECE6;
CODE_00ECF8:          BRA CODE_00ED4A                           ;;EC98|ECF8+ECF8/ECE8\ECE8;
                                                                ;;                        ;
CODE_00ECFA:          LDA.B #$02                                ;;EC9A|ECFA+ECFA/ECEA\ECEA;
                      JSR CODE_00F3E9                           ;;EC9C|ECFC+ECFC/ECEC\ECEC;
                      TYA                                       ;;EC9F|ECFF+ECFF/ECEF\ECEF;
                      LDY.B #$00                                ;;ECA0|ED00+ED00/ECF0\ECF0;
                      JSL CODE_00F127                           ;;ECA2|ED02+ED02/ECF2\ECF2;
                      LDA.W !Map16TileNumber                    ;;ECA6|ED06+ED06/ECF6\ECF6; Current MAP16 tile number 
                      CMP.B #$1E                                ;;ECA9|ED09+ED09/ECF9\ECF9; \ If block is turn block, branch to $ED3B 
                      BEQ CODE_00ED3B                           ;;ECAB|ED0B+ED0B/ECFB\ECFB; /  
CODE_00ED0D:          LDA.B #$F0                                ;;ECAD|ED0D+ED0D/ECFD\ECFD;
CODE_00ED0F:          CLC                                       ;;ECAF|ED0F+ED0F/ECFF\ECFF;
                      ADC.B !PlayerBlockMoveY                   ;;ECB0|ED10+ED10/ED00\ED00;
                      BPL CODE_00ED4A                           ;;ECB2|ED12+ED12/ED02\ED02;
                      CMP.B #$F9                                ;;ECB4|ED14+ED14/ED04\ED04;
                      BCS CODE_00ED28                           ;;ECB6|ED16+ED16/ED06\ED06;
                      LDY.B !PlayerInAir                        ;;ECB8|ED18+ED18/ED08\ED08;
                      BNE CODE_00ED28                           ;;ECBA|ED1A+ED1A/ED0A\ED0A;
                      LDA.B !PlayerBlockedDir                   ;;ECBC|ED1C+ED1C/ED0C\ED0C;
                      AND.B #$FC                                ;;ECBE|ED1E+ED1E/ED0E\ED0E;
                      ORA.B #$09                                ;;ECC0|ED20+ED20/ED10\ED10;
                      STA.B !PlayerBlockedDir                   ;;ECC2|ED22+ED22/ED12\ED12;
                      STZ.B !PlayerXSpeed                       ;;ECC4|ED24+ED24/ED14\ED14;
                      BRA CODE_00ED3B                           ;;ECC6|ED26+ED26/ED16\ED16;
                                                                ;;                        ;
CODE_00ED28:          LDY.B !PlayerInAir                        ;;ECC8|ED28+ED28/ED18\ED18;
                      BEQ +                                     ;;ECCA|ED2A+ED2A/ED1A\ED1A;
                      EOR.B #$FF                                ;;ECCC|ED2C+ED2C/ED1C\ED1C;
                      CLC                                       ;;ECCE|ED2E+ED2E/ED1E\ED1E;
                      ADC.B !PlayerYPosNext                     ;;ECCF|ED2F+ED2F/ED1F\ED1F;
                      STA.B !PlayerYPosNext                     ;;ECD1|ED31+ED31/ED21\ED21;
                      BCC +                                     ;;ECD3|ED33+ED33/ED23\ED23;
                      INC.B !PlayerYPosNext+1                   ;;ECD5|ED35+ED35/ED25\ED25;
                    + LDA.B #$08                                ;;ECD7|ED37+ED37/ED27\ED27;
                      TSB.B !PlayerBlockedDir                   ;;ECD9|ED39+ED39/ED29\ED29;
CODE_00ED3B:          LDA.B !PlayerYSpeed                       ;;ECDB|ED3B+ED3B/ED2B\ED2B;
                      BPL CODE_00ED4A                           ;;ECDD|ED3D+ED3D/ED2D\ED2D;
                      STZ.B !PlayerYSpeed                       ;;ECDF|ED3F+ED3F/ED2F\ED2F;
                      LDA.W !SPCIO0                             ;;ECE1|ED41+ED41/ED31\ED31; / Play sound effect 
                      BNE CODE_00ED4A                           ;;ECE4|ED44+ED44/ED34\ED34;
                      INC A                                     ;;ECE6|ED46+ED46/ED36\ED36; play bonk only if no other sound was queued
                      STA.W !SPCIO0                             ;;ECE7|ED47+ED47/ED37\ED37; / Play sound effect 
CODE_00ED4A:          JSR CODE_00F44D                           ;;ECEA|ED4A+ED4A/ED3A\ED3A;
                      BNE +                                     ;;ECED|ED4D+ED4D/ED3D\ED3D;
                      JMP CODE_00EDDB                           ;;ECEF|ED4F+ED4F/ED3F\ED3F;
                                                                ;;                        ;
                    + CPY.B #$6E                                ;;ECF2|ED52+ED52/ED42\ED42;
                      BCS +                                     ;;ECF4|ED54+ED54/ED44\ED44;
                      LDA.B #$03                                ;;ECF6|ED56+ED56/ED46\ED46;
                      JSR CODE_00F3E9                           ;;ECF8|ED58+ED58/ED48\ED48;
                      JMP CODE_00EDF7                           ;;ECFB|ED5B+ED5B/ED4B\ED4B;
                                                                ;;                        ;
                    + CPY.B #$D8                                ;;ECFE|ED5E+ED5E/ED4E\ED4E;
                      BCC CODE_00ED86                           ;;ED00|ED60+ED60/ED50\ED50;
                      CPY.B #$FB                                ;;ED02|ED62+ED62/ED52\ED52;
                      BCC +                                     ;;ED04|ED64+ED64/ED54\ED54;
                      JMP CODE_00F629                           ;;ED06|ED66+ED66/ED56\ED56;
                                                                ;;                        ;
                    + REP #$20                                  ;;ED09|ED69+ED69/ED59\ED59; Accum (16 bit) 
                      LDA.B !TouchBlockYPos                     ;;ED0B|ED6B+ED6B/ED5B\ED5B;
                      SEC                                       ;;ED0D|ED6D+ED6D/ED5D\ED5D;
                      SBC.W #$0010                              ;;ED0E|ED6E+ED6E/ED5E\ED5E;
                      STA.B !TouchBlockYPos                     ;;ED11|ED71+ED71/ED61\ED61;
                      JSR CODE_00F461                           ;;ED13|ED73+ED73/ED63\ED63;
                      BEQ CODE_00EDE9                           ;;ED16|ED76+ED76/ED66\ED66;
                      CPY.B #$6E                                ;;ED18|ED78+ED78/ED68\ED68;
                      BCC CODE_00EDE9                           ;;ED1A|ED7A+ED7A/ED6A\ED6A;
                      CPY.B #$D8                                ;;ED1C|ED7C+ED7C/ED6C\ED6C;
                      BCS CODE_00EDE9                           ;;ED1E|ED7E+ED7E/ED6E\ED6E;
                      LDA.B !PlayerYPosInBlock                  ;;ED20|ED80+ED80/ED70\ED70; Accum (8 bit) 
                      ADC.B #$10                                ;;ED22|ED82+ED82/ED72\ED72;
                      STA.B !PlayerYPosInBlock                  ;;ED24|ED84+ED84/ED74\ED74;
CODE_00ED86:          LDA.W !ObjectTileset                      ;;ED26|ED86+ED86/ED76\ED76;
                      CMP.B #$03                                ;;ED29|ED89+ED89/ED79\ED79;
                      BEQ CODE_00ED91                           ;;ED2B|ED8B+ED8B/ED7B\ED7B;
                      CMP.B #$0E                                ;;ED2D|ED8D+ED8D/ED7D\ED7D;
                      BNE CODE_00ED95                           ;;ED2F|ED8F+ED8F/ED7F\ED7F;
CODE_00ED91:          CPY.B #$D2                                ;;ED31|ED91+ED91/ED81\ED81;
                      BCS CODE_00EDE9                           ;;ED33|ED93+ED93/ED83\ED83;
CODE_00ED95:          TYA                                       ;;ED35|ED95+ED95/ED85\ED85;
                      SEC                                       ;;ED36|ED96+ED96/ED86\ED86;
                      SBC.B #$6E                                ;;ED37|ED97+ED97/ED87\ED87;
                      TAY                                       ;;ED39|ED99+ED99/ED89\ED89;
                      LDA.B [!SlopesPtr],Y                      ;;ED3A|ED9A+ED9A/ED8A\ED8A;
                      PHA                                       ;;ED3C|ED9C+ED9C/ED8C\ED8C;
                      REP #$20                                  ;;ED3D|ED9D+ED9D/ED8D\ED8D; Accum (16 bit) 
                      AND.W #$00FF                              ;;ED3F|ED9F+ED9F/ED8F\ED8F;
                      ASL A                                     ;;ED42|EDA2+EDA2/ED92\ED92;
                      ASL A                                     ;;ED43|EDA3+EDA3/ED93\ED93;
                      ASL A                                     ;;ED44|EDA4+EDA4/ED94\ED94;
                      ASL A                                     ;;ED45|EDA5+EDA5/ED95\ED95;
                      SEP #$20                                  ;;ED46|EDA6+EDA6/ED96\ED96; Accum (8 bit) 
                      ORA.B !PlayerXPosInBlock                  ;;ED48|EDA8+EDA8/ED98\ED98;
                      PHX                                       ;;ED4A|EDAA+EDAA/ED9A\ED9A;
                      REP #$10                                  ;;ED4B|EDAB+EDAB/ED9B\ED9B; Index (16 bit) 
                      TAX                                       ;;ED4D|EDAD+EDAD/ED9D\ED9D;
                      LDA.B !PlayerYPosInBlock                  ;;ED4E|EDAE+EDAE/ED9E\ED9E;
                      SEC                                       ;;ED50|EDB0+EDB0/EDA0\EDA0;
                      SBC.W DATA_00E632,X                       ;;ED51|EDB1+EDB1/EDA1\EDA1;
                      BPL +                                     ;;ED54|EDB4+EDB4/EDA4\EDA4;
                      INC.W !PlayerIsOnGround                   ;;ED56|EDB6+EDB6/EDA6\EDA6;
                    + SEP #$10                                  ;;ED59|EDB9+EDB9/EDA9\EDA9; Index (8 bit) 
                      PLX                                       ;;ED5B|EDBB+EDBB/EDAB\EDAB;
                      PLY                                       ;;ED5C|EDBC+EDBC/EDAC\EDAC;
                      CMP.W DATA_00E51C,Y                       ;;ED5D|EDBD+EDBD/EDAD\EDAD;
                      BCS CODE_00EDE9                           ;;ED60|EDC0+EDC0/EDB0\EDB0;
                      STA.B !PlayerBlockMoveY                   ;;ED62|EDC2+EDC2/EDB2\EDB2;
                      STZ.B !PlayerYPosInBlock                  ;;ED64|EDC4+EDC4/EDB4\EDB4;
                      JSR CODE_00F005                           ;;ED66|EDC6+EDC6/EDB6\EDB6;
                      CPY.B #$1C                                ;;ED69|EDC9+EDC9/EDB9\EDB9;
                      BCC +                                     ;;ED6B|EDCB+EDCB/EDBB\EDBB;
                      LDA.B #$08                                ;;ED6D|EDCD+EDCD/EDBD\EDBD;
                      STA.W !SkidTurnTimer                      ;;ED6F|EDCF+EDCF/EDBF\EDBF;
                      JMP CODE_00EED1                           ;;ED72|EDD2+EDD2/EDC2\EDC2;
                                                                ;;                        ;
                    + JSR CODE_00EFBC                           ;;ED75|EDD5+EDD5/EDC5\EDC5;
                      JMP CODE_00EE85                           ;;ED78|EDD8+EDD8/EDC8\EDC8;
                                                                ;;                        ;
CODE_00EDDB:          CPY.B #$05                                ;;ED7B|EDDB+EDDB/EDCB\EDCB;
                      BNE CODE_00EDE4                           ;;ED7D|EDDD+EDDD/EDCD\EDCD;
                      JSR CODE_00F629                           ;;ED7F|EDDF+EDDF/EDCF\EDCF;
                      BRA CODE_00EDE9                           ;;ED82|EDE2+EDE2/EDD2\EDD2;
                                                                ;;                        ;
CODE_00EDE4:          LDA.B #$04                                ;;ED84|EDE4+EDE4/EDD4\EDD4;
                      JSR CODE_00F2C2                           ;;ED86|EDE6+EDE6/EDD6\EDD6;
CODE_00EDE9:          JSR CODE_00F44D                           ;;ED89|EDE9+EDE9/EDD9\EDD9;
                      BNE CODE_00EDF3                           ;;ED8C|EDEC+EDEC/EDDC\EDDC;
                      JSR CODE_00F309                           ;;ED8E|EDEE+EDEE/EDDE\EDDE;
                      BRA CODE_00EE1D                           ;;ED91|EDF1+EDF1/EDE1\EDE1;
                                                                ;;                        ;
CODE_00EDF3:          CPY.B #$6E                                ;;ED93|EDF3+EDF3/EDE3\EDE3;
                      BCS CODE_00EE1D                           ;;ED95|EDF5+EDF5/EDE5\EDE5;
CODE_00EDF7:          LDA.B !PlayerYSpeed                       ;;ED97|EDF7+EDF7/EDE7\EDE7;
                      BMI Return00EE39                          ;;ED99|EDF9+EDF9/EDE9\EDE9;
                      LDA.W !ObjectTileset                      ;;ED9B|EDFB+EDFB/EDEB\EDEB;
                      CMP.B #$03                                ;;ED9E|EDFE+EDFE/EDEE\EDEE;
                      BEQ CODE_00EE06                           ;;EDA0|EE00+EE00/EDF0\EDF0;
                      CMP.B #$0E                                ;;EDA2|EE02+EE02/EDF2\EDF2;
                      BNE CODE_00EE11                           ;;EDA4|EE04+EE04/EDF4\EDF4;
CODE_00EE06:          LDY.W !Map16TileNumber                    ;;EDA6|EE06+EE06/EDF6\EDF6; $ED3B 
                      CPY.B #$59                                ;;EDA9|EE09+EE09/EDF9\EDF9;
                      BCC CODE_00EE11                           ;;EDAB|EE0B+EE0B/EDFB\EDFB;
                      CPY.B #$5C                                ;;EDAD|EE0D+EE0D/EDFD\EDFD;
                      BCC CODE_00EE1D                           ;;EDAF|EE0F+EE0F/EDFF\EDFF;
CODE_00EE11:          LDA.B !PlayerYPosInBlock                  ;;EDB1|EE11+EE11/EE01\EE01;
                      AND.B #$0F                                ;;EDB3|EE13+EE13/EE03\EE03;
                      STZ.B !PlayerYPosInBlock                  ;;EDB5|EE15+EE15/EE05\EE05;
                      CMP.B #$08                                ;;EDB7|EE17+EE17/EE07\EE07;
                      STA.B !PlayerBlockMoveY                   ;;EDB9|EE19+EE19/EE09\EE09;
                      BCC CODE_00EE3A                           ;;EDBB|EE1B+EE1B/EE0B\EE0B;
CODE_00EE1D:          LDA.W !StandOnSolidSprite                 ;;EDBD|EE1D+EE1D/EE0D\EE0D; \ If Mario isn't on a sprite platform, 
                      BEQ +                                     ;;EDC0|EE20+EE20/EE10\EE10; / branch to $EE2D 
                      LDA.B !PlayerYSpeed                       ;;EDC2|EE22+EE22/EE12\EE12; \ If Mario is moving up, 
                      BMI +                                     ;;EDC4|EE24+EE24/EE14\EE14; / branch to $EE2D 
                      STZ.B !GraphicsUncompPtr+1                ;;EDC6|EE26+EE26/EE16\EE16;
                      LDY.B #$20                                ;;EDC8|EE28+EE28/EE18\EE18;
                      JMP CODE_00EEE1                           ;;EDCA|EE2A+EE2A/EE1A\EE1A;
                                                                ;;                        ;
                    + LDA.B !PlayerBlockedDir                   ;;EDCD|EE2D+EE2D/EE1D\EE1D; \  
                      AND.B #$04                                ;;EDCF|EE2F+EE2F/EE1F\EE1F;  |If Mario is on an edge or in air, 
                      ORA.B !PlayerInAir                        ;;EDD1|EE31+EE31/EE21\EE21;  |branch to $EE39 
                      BNE Return00EE39                          ;;EDD3|EE33+EE33/EE23\EE23; /  
CODE_00EE35:          LDA.B #$24                                ;;EDD5|EE35+EE35/EE25\EE25; \ Set "In air" to x24 (falling) 
                      STA.B !PlayerInAir                        ;;EDD7|EE37+EE37/EE27\EE27; /  
Return00EE39:         RTS                                       ;;EDD9|EE39+EE39/EE29\EE29; Return 
                                                                ;;                        ;
CODE_00EE3A:          LDY.W !Map16TileNumber                    ;;EDDA|EE3A+EE3A/EE2A\EE2A; Current MAP16 tile number 
                      LDA.W !ObjectTileset                      ;;EDDD|EE3D+EE3D/EE2D\EE2D; Tileset 
                      CMP.B #$02                                ;;EDE0|EE40+EE40/EE30\EE30; \ If tileset is "Rope 1", 
                      BEQ CODE_00EE48                           ;;EDE2|EE42+EE42/EE32\EE32; / branch to $EE48 
                      CMP.B #$08                                ;;EDE4|EE44+EE44/EE34\EE34; \ If tileset isn't "Rope 3", 
                      BNE CODE_00EE57                           ;;EDE6|EE46+EE46/EE36\EE36; / branch to $EE57 
CODE_00EE48:          TYA                                       ;;EDE8|EE48+EE48/EE38\EE38; \  
                      SEC                                       ;;EDE9|EE49+EE49/EE39\EE39;  |If the current tile isn't Rope 3's "Conveyor rope", 
                      SBC.B #$0C                                ;;EDEA|EE4A+EE4A/EE3A\EE3A;  |branch to $EE57 
                      CMP.B #$02                                ;;EDEC|EE4C+EE4C/EE3C\EE3C;  | 
                      BCS CODE_00EE57                           ;;EDEE|EE4E+EE4E/EE3E\EE3E; /  
                      ASL A                                     ;;EDF0|EE50+EE50/EE40\EE40;
                      TAX                                       ;;EDF1|EE51+EE51/EE41\EE41;
                      JSR CODE_00EFCD                           ;;EDF2|EE52+EE52/EE42\EE42;
                      BRA CODE_00EE83                           ;;EDF5|EE55+EE55/EE45\EE45;
                                                                ;;                        ;
CODE_00EE57:          JSR CODE_00F267                           ;;EDF7|EE57+EE57/EE47\EE47;
                      LDY.B #$03                                ;;EDFA|EE5A+EE5A/EE4A\EE4A;
                      LDA.W !Map16TileNumber                    ;;EDFC|EE5C+EE5C/EE4C\EE4C; Current MAP16 tile number 
                      CMP.B #$1E                                ;;EDFF|EE5F+EE5F/EE4F\EE4F; \ If block isn't "Turn block", 
                      BNE CODE_00EE78                           ;;EE01|EE61+EE61/EE51\EE51; / branch to $EE78 
                      LDX.B !GraphicsUncompPtr+2                ;;EE03|EE63+EE63/EE53\EE53;
                      BEQ CODE_00EE83                           ;;EE05|EE65+EE65/EE55\EE55;
                      LDX.B !Powerup                            ;;EE07|EE67+EE67/EE57\EE57;
                      BEQ CODE_00EE83                           ;;EE09|EE69+EE69/EE59\EE59;
                      LDX.W !SpinJumpFlag                       ;;EE0B|EE6B+EE6B/EE5B\EE5B;
                      BEQ CODE_00EE83                           ;;EE0E|EE6E+EE6E/EE5E\EE5E;
                      LDA.B #$21                                ;;EE10|EE70+EE70/EE60\EE60;
                      JSL CODE_00F17F                           ;;EE12|EE72+EE72/EE62\EE62;
                      BRA CODE_00EE1D                           ;;EE16|EE76+EE76/EE66\EE66;
                                                                ;;                        ;
CODE_00EE78:          CMP.B #$32                                ;;EE18|EE78+EE78/EE68\EE68; \ If block isn't "Brown block", 
                      BNE +                                     ;;EE1A|EE7A+EE7A/EE6A\EE6A; / branch to $EE7F 
                      STZ.W !BlockSnakeActive                   ;;EE1C|EE7C+EE7C/EE6C\EE6C;
                    + JSL CODE_00F120                           ;;EE1F|EE7F+EE7F/EE6F\EE6F;
CODE_00EE83:          LDY.B #$20                                ;;EE23|EE83+EE83/EE73\EE73;
CODE_00EE85:          LDA.B !PlayerYSpeed                       ;;EE25|EE85+EE85/EE75\EE75; \ If Mario isn't moving up, 
                      BPL CODE_00EE8F                           ;;EE27|EE87+EE87/EE77\EE77; / branch to $EE8F 
                      LDA.B !GraphicsUncompPtr                  ;;EE29|EE89+EE89/EE79\EE79;
                      CMP.B #$02                                ;;EE2B|EE8B+EE8B/EE7B\EE7B;
                      BCC Return00EE39                          ;;EE2D|EE8D+EE8D/EE7D\EE7D;
CODE_00EE8F:          LDX.W !SwitchPalacePressed                ;;EE2F|EE8F+EE8F/EE7F\EE7F;
                      BEQ CODE_00EED1                           ;;EE32|EE92+EE92/EE82\EE82;
                      DEX                                       ;;EE34|EE94+EE94/EE84\EE84;
                      TXA                                       ;;EE35|EE95+EE95/EE85\EE85;
                      AND.B #$03                                ;;EE36|EE96+EE96/EE86\EE86;
                      BEQ CODE_00EEAA                           ;;EE38|EE98+EE98/EE88\EE88;
                      CMP.B #$02                                ;;EE3A|EE9A+EE9A/EE8A\EE8A;
                      BCS CODE_00EED1                           ;;EE3C|EE9C+EE9C/EE8C\EE8C;
                      REP #$20                                  ;;EE3E|EE9E+EE9E/EE8E\EE8E; Accum (16 bit) 
                      LDA.B !TouchBlockXPos                     ;;EE40|EEA0+EEA0/EE90\EE90;
                      SEC                                       ;;EE42|EEA2+EEA2/EE92\EE92;
                      SBC.W #$0010                              ;;EE43|EEA3+EEA3/EE93\EE93;
                      STA.B !TouchBlockXPos                     ;;EE46|EEA6+EEA6/EE96\EE96;
                      SEP #$20                                  ;;EE48|EEA8+EEA8/EE98\EE98; Accum (8 bit) 
CODE_00EEAA:          TXA                                       ;;EE4A|EEAA+EEAA/EE9A\EE9A;
                      LSR A                                     ;;EE4B|EEAB+EEAB/EE9B\EE9B;
                      LSR A                                     ;;EE4C|EEAC+EEAC/EE9C\EE9C;
                      TAX                                       ;;EE4D|EEAD+EEAD/EE9D\EE9D;
                      LDA.W !SwitchBlockFlags,X                 ;;EE4E|EEAE+EEAE/EE9E\EE9E; \ If switch block is already active, 
                      BNE CODE_00EED1                           ;;EE51|EEB1+EEB1/EEA1\EEA1; / branch to $EED1 
                      INC A                                     ;;EE53|EEB3+EEB3/EEA3\EEA3; \ Activate switch block 
                      STA.W !SwitchBlockFlags,X                 ;;EE54|EEB4+EEB4/EEA4\EEA4; /  
                      STA.W !SwitchPalaceColor                  ;;EE57|EEB7+EEB7/EEA7\EEA7;
                      PHY                                       ;;EE5A|EEBA+EEBA/EEAA\EEAA;
                      STX.W !BigSwitchPressTimer                ;;EE5B|EEBB+EEBB/EEAB\EEAB;
                      JSR FlatPalaceSwitch                      ;;EE5E|EEBE+EEBE/EEAE\EEAE;
                      PLY                                       ;;EE61|EEC1+EEC1/EEB1\EEB1;
                      LDA.B #!BGM_LEVELCLEAR                    ;;EE62|EEC2+EEC2/EEB2\EEB2;
                      STA.W !SPCIO2                             ;;EE64|EEC4+EEC4/EEB4\EEB4; / Change music 
                      LDA.B #$FF                                ;;EE67|EEC7+EEC7/EEB7\EEB7; \  
                      STA.W !MusicBackup                        ;;EE69|EEC9+EEC9/EEB9\EEB9; / Set music to xFF 
                      LDA.B #$08                                ;;EE6C|EECC+EECC/EEBC\EEBC;
                      STA.W !EndLevelTimer                      ;;EE6E|EECE+EECE/EEBE\EEBE;
CODE_00EED1:          INC.W !PlayerIsOnGround                   ;;EE71|EED1+EED1/EEC1\EEC1;
                      LDA.B !PlayerYPosNext                     ;;EE74|EED4+EED4/EEC4\EEC4;
                      SEC                                       ;;EE76|EED6+EED6/EEC6\EEC6;
                      SBC.B !PlayerBlockMoveY                   ;;EE77|EED7+EED7/EEC7\EEC7;
                      STA.B !PlayerYPosNext                     ;;EE79|EED9+EED9/EEC9\EEC9;
                      LDA.B !PlayerYPosNext+1                   ;;EE7B|EEDB+EEDB/EECB\EECB;
                      SBC.B !PlayerYPosInBlock                  ;;EE7D|EEDD+EEDD/EECD\EECD;
                      STA.B !PlayerYPosNext+1                   ;;EE7F|EEDF+EEDF/EECF\EECF;
CODE_00EEE1:          LDA.W DATA_00E53D,Y                       ;;EE81|EEE1+EEE1/EED1\EED1;
                      BNE CODE_00EEEF                           ;;EE84|EEE4+EEE4/EED4\EED4;
                      LDX.W !PlayerSlopePose                    ;;EE86|EEE6+EEE6/EED6\EED6;
                      BEQ CODE_00EF05                           ;;EE89|EEE9+EEE9/EED9\EED9;
                      LDX.B !PlayerXSpeed                       ;;EE8B|EEEB+EEEB/EEDB\EEDB;
                      BEQ CODE_00EF02                           ;;EE8D|EEED+EEED/EEDD\EEDD;
CODE_00EEEF:          STA.W !CurrentSlope                       ;;EE8F|EEEF+EEEF/EEDF\EEDF;
                      LDA.B !byetudlrHold                       ;;EE92|EEF2+EEF2/EEE2\EEE2;
                      AND.B #$04                                ;;EE94|EEF4+EEF4/EEE4\EEE4;
                      BEQ CODE_00EF05                           ;;EE96|EEF6+EEF6/EEE6\EEE6;
                      LDA.W !IsCarryingItem                     ;;EE98|EEF8+EEF8/EEE8\EEE8;
                      ORA.W !PlayerSlopePose                    ;;EE9B|EEFB+EEFB/EEEB\EEEB;
                      BNE CODE_00EF05                           ;;EE9E|EEFE+EEFE/EEEE\EEEE;
                      LDX.B #$1C                                ;;EEA0|EF00+EF00/EEF0\EEF0;
CODE_00EF02:          STX.W !PlayerSlopePose                    ;;EEA2|EF02+EF02/EEF2\EEF2;
CODE_00EF05:          LDX.W DATA_00E4B9,Y                       ;;EEA5|EF05+EF05/EEF5\EEF5;
                      STX.W !SlopeType                          ;;EEA8|EF08+EF08/EEF8\EEF8;
                      CPY.B #$1C                                ;;EEAB|EF0B+EF0B/EEFB\EEFB;
                      BCS CODE_00EF38                           ;;EEAD|EF0D+EF0D/EEFD\EEFD;
                      LDA.B !PlayerXSpeed                       ;;EEAF|EF0F+EF0F/EEFF\EEFF;
                      BEQ CODE_00EF31                           ;;EEB1|EF11+EF11/EF01\EF01;
                      LDA.W DATA_00E53D,Y                       ;;EEB3|EF13+EF13/EF03\EF03;
                      BEQ CODE_00EF31                           ;;EEB6|EF16+EF16/EF06\EF06;
                      EOR.B !PlayerXSpeed                       ;;EEB8|EF18+EF18/EF08\EF08;
                      BPL CODE_00EF31                           ;;EEBA|EF1A+EF1A/EF0A\EF0A;
                      STX.W !PlayerPoseLenTimer                 ;;EEBC|EF1C+EF1C/EF0C\EF0C;
                      LDA.B !PlayerXSpeed                       ;;EEBF|EF1F+EF1F/EF0F\EF0F;
                      BPL +                                     ;;EEC1|EF21+EF21/EF11\EF11;
                      EOR.B #$FF                                ;;EEC3|EF23+EF23/EF13\EF13;
                      INC A                                     ;;EEC5|EF25+EF25/EF15\EF15;
                    + CMP.B #con($28,$28,$28,$34,$34)           ;;EEC6|EF26+EF26/EF16\EF16;
                      BCC CODE_00EF2F                           ;;EEC8|EF28+EF28/EF18\EF18;
                      LDA.W DATA_00E4FB,Y                       ;;EECA|EF2A+EF2A/EF1A\EF1A;
                      BRA CODE_00EF60                           ;;EECD|EF2D+EF2D/EF1D\EF1D;
                                                                ;;                        ;
CODE_00EF2F:          LDY.B #$20                                ;;EECF|EF2F+EF2F/EF1F\EF1F;
CODE_00EF31:          LDA.B !PlayerYSpeed                       ;;EED1|EF31+EF31/EF21\EF21;
                      CMP.W DATA_00E4DA,Y                       ;;EED3|EF33+EF33/EF23\EF23;
                      BCC +                                     ;;EED6|EF36+EF36/EF26\EF26;
CODE_00EF38:          LDA.W DATA_00E4DA,Y                       ;;EED8|EF38+EF38/EF28\EF28;
                    + LDX.B !GraphicsUncompPtr+1                ;;EEDB|EF3B+EF3B/EF2B\EF2B;
                      BPL CODE_00EF60                           ;;EEDD|EF3D+EF3D/EF2D\EF2D;
                      INC.W !Layer2Touched                      ;;EEDF|EF3F+EF3F/EF2F\EF2F;
                      PHA                                       ;;EEE2|EF42+EF42/EF32\EF32;
                      REP #$20                                  ;;EEE3|EF43+EF43/EF33\EF33; Accum (16 bit) 
                      LDA.W !Layer2DYPos                        ;;EEE5|EF45+EF45/EF35\EF35;
                      AND.W #$FF00                              ;;EEE8|EF48+EF48/EF38\EF38;
                      BPL +                                     ;;EEEB|EF4B+EF4B/EF3B\EF3B;
                      ORA.W #$00FF                              ;;EEED|EF4D+EF4D/EF3D\EF3D;
                    + XBA                                       ;;EEF0|EF50+EF50/EF40\EF40;
                      EOR.W #$FFFF                              ;;EEF1|EF51+EF51/EF41\EF41;
                      INC A                                     ;;EEF4|EF54+EF54/EF44\EF44;
                      CLC                                       ;;EEF5|EF55+EF55/EF45\EF45;
                      ADC.B !PlayerXPosNext                     ;;EEF6|EF56+EF56/EF46\EF46;
                      STA.B !PlayerXPosNext                     ;;EEF8|EF58+EF58/EF48\EF48;
                      SEP #$20                                  ;;EEFA|EF5A+EF5A/EF4A\EF4A; Accum (8 bit) 
                      PLA                                       ;;EEFC|EF5C+EF5C/EF4C\EF4C;
                      CLC                                       ;;EEFD|EF5D+EF5D/EF4D\EF4D;
                      ADC.B #$28                                ;;EEFE|EF5E+EF5E/EF4E\EF4E;
CODE_00EF60:          STA.B !PlayerYSpeed                       ;;EF00|EF60+EF60/EF50\EF50;
                      TAX                                       ;;EF02|EF62+EF62/EF52\EF52;
                      BPL +                                     ;;EF03|EF63+EF63/EF53\EF53;
                      INC.W !PlayerIsOnGround                   ;;EF05|EF65+EF65/EF55\EF55;
                    + STZ.W !StandingOnCage                     ;;EF08|EF68+EF68/EF58\EF58;
                      STZ.B !PlayerInAir                        ;;EF0B|EF6B+EF6B/EF5B\EF5B;
                      STZ.B !PlayerIsClimbing                   ;;EF0D|EF6D+EF6D/EF5D\EF5D;
                      STZ.W !BouncingOnBoard                    ;;EF0F|EF6F+EF6F/EF5F\EF5F;
                      STZ.W !SpinJumpFlag                       ;;EF12|EF72+EF72/EF62\EF62;
                      LDA.B #$04                                ;;EF15|EF75+EF75/EF65\EF65;
                      TSB.B !PlayerBlockedDir                   ;;EF17|EF77+EF77/EF67\EF67;
                      LDY.W !FlightPhase                        ;;EF19|EF79+EF79/EF69\EF69;
                      BNE CODE_00EF99                           ;;EF1C|EF7C+EF7C/EF6C\EF6C;
                      LDA.W !PlayerRidingYoshi                  ;;EF1E|EF7E+EF7E/EF6E\EF6E;
                      BEQ +                                     ;;EF21|EF81+EF81/EF71\EF71;
                      LDA.B !GraphicsUncompPtr+2                ;;EF23|EF83+EF83/EF73\EF73;
                      BEQ +                                     ;;EF25|EF85+EF85/EF75\EF75;
                      LDA.W !YoshiCanStomp                      ;;EF27|EF87+EF87/EF77\EF77; \ If Yoshi has stomp ability, 
                      BEQ +                                     ;;EF2A|EF8A+EF8A/EF7A\EF7A;  | 
                      JSL YoshiStompRoutine                     ;;EF2C|EF8C+EF8C/EF7C\EF7C;  | Run routine 
                      LDA.B #!SFX_YOSHISTOMP                    ;;EF30|EF90+EF90/EF80\EF80;  | Play sound effect 
                      STA.W !SPCIO3                             ;;EF32|EF92+EF92/EF82\EF82; / 
                    + STZ.W !SpriteStompCounter                 ;;EF35|EF95+EF95/EF85\EF85;
                      RTS                                       ;;EF38|EF98+EF98/EF88\EF88; Return 
                                                                ;;                        ;
CODE_00EF99:          STZ.W !SpriteStompCounter                 ;;EF39|EF99+EF99/EF89\EF89;
                      STZ.W !FlightPhase                        ;;EF3C|EF9C+EF9C/EF8C\EF8C;
                      CPY.B #$05                                ;;EF3F|EF9F+EF9F/EF8F\EF8F;
                      BCS CallGroundPound                       ;;EF41|EFA1+EFA1/EF91\EF91;
                      LDA.B !Powerup                            ;;EF43|EFA3+EFA3/EF93\EF93;
                      CMP.B #$02                                ;;EF45|EFA5+EFA5/EF95\EF95;
                      BNE +                                     ;;EF47|EFA7+EFA7/EF97\EF97;
                      SEC                                       ;;EF49|EFA9+EFA9/EF99\EF99;
                      ROR.W !PlayerSlopePose                    ;;EF4A|EFAA+EFAA/EF9A\EF9A;
                    + RTS                                       ;;EF4D|EFAD+EFAD/EF9D\EF9D; Return 
                                                                ;;                        ;
CallGroundPound:      LDA.B !GraphicsUncompPtr+2                ;;EF4E|EFAE+EFAE/EF9E\EF9E;
                      BEQ +                                     ;;EF50|EFB0+EFB0/EFA0\EFA0;
                      JSL GroundPound                           ;;EF52|EFB2+EFB2/EFA2\EFA2;
                      LDA.B #!SFX_KAPOW                         ;;EF56|EFB6+EFB6/EFA6\EFA6; \ Play sound effect 
                      STA.W !SPCIO3                             ;;EF58|EFB8+EFB8/EFA8\EFA8; / 
                    + RTS                                       ;;EF5B|EFBB+EFBB/EFAB\EFAB; Return 
                                                                ;;                        ;
CODE_00EFBC:          LDX.W !Map16TileNumber                    ;;EF5C|EFBC+EFBC/EFAC\EFAC;
                      CPX.B #$CE                                ;;EF5F|EFBF+EFBF/EFAF\EFAF;
                      BCC +                                     ;;EF61|EFC1+EFC1/EFB1\EFB1;
                      CPX.B #$D2                                ;;EF63|EFC3+EFC3/EFB3\EFB3;
                      BCS +                                     ;;EF65|EFC5+EFC5/EFB5\EFB5;
                      TXA                                       ;;EF67|EFC7+EFC7/EFB7\EFB7;
                      SEC                                       ;;EF68|EFC8+EFC8/EFB8\EFB8;
                      SBC.B #$CC                                ;;EF69|EFC9+EFC9/EFB9\EFB9;
                      ASL A                                     ;;EF6B|EFCB+EFCB/EFBB\EFBB;
                      TAX                                       ;;EF6C|EFCC+EFCC/EFBC\EFBC;
CODE_00EFCD:          LDA.B !TrueFrame                          ;;EF6D|EFCD+EFCD/EFBD\EFBD;
                      AND.B #$03                                ;;EF6F|EFCF+EFCF/EFBF\EFBF;
                      BNE +                                     ;;EF71|EFD1+EFD1/EFC1\EFC1;
                      REP #$20                                  ;;EF73|EFD3+EFD3/EFC3\EFC3; Accum (16 bit) 
                      LDA.B !PlayerXPosNext                     ;;EF75|EFD5+EFD5/EFC5\EFC5;
                      CLC                                       ;;EF77|EFD7+EFD7/EFC7\EFC7;
                      ADC.W DATA_00E913,X                       ;;EF78|EFD8+EFD8/EFC8\EFC8;
                      STA.B !PlayerXPosNext                     ;;EF7B|EFDB+EFDB/EFCB\EFCB;
                      LDA.B !PlayerYPosNext                     ;;EF7D|EFDD+EFDD/EFCD\EFCD;
                      CLC                                       ;;EF7F|EFDF+EFDF/EFCF\EFCF;
                      ADC.W DATA_00E91F,X                       ;;EF80|EFE0+EFE0/EFD0\EFD0;
                      STA.B !PlayerYPosNext                     ;;EF83|EFE3+EFE3/EFD3\EFD3;
                      SEP #$20                                  ;;EF85|EFE5+EFE5/EFD5\EFD5; Accum (8 bit) 
                    + RTS                                       ;;EF87|EFE7+EFE7/EFD7\EFD7; Return 
                                                                ;;                        ;
CODE_00EFE8:          JSR CODE_00F44D                           ;;EF88|EFE8+EFE8/EFD8\EFD8;
                      BNE +                                     ;;EF8B|EFEB+EFEB/EFDB\EFDB;
                      JMP CODE_00F309                           ;;EF8D|EFED+EFED/EFDD\EFDD;
                                                                ;;                        ;
                    + CPY.B #$11                                ;;EF90|EFF0+EFF0/EFE0\EFE0;
                      BCC +                                     ;;EF92|EFF2+EFF2/EFE2\EFE2;
                      CPY.B #$6E                                ;;EF94|EFF4+EFF4/EFE4\EFE4;
                      BCS +                                     ;;EF96|EFF6+EFF6/EFE6\EFE6;
                      TYA                                       ;;EF98|EFF8+EFF8/EFE8\EFE8;
                      LDY.B #$00                                ;;EF99|EFF9+EFF9/EFE9\EFE9;
                      JSL CODE_00F160                           ;;EF9B|EFFB+EFFB/EFEB\EFEB;
                      PLA                                       ;;EF9F|EFFF+EFFF/EFEF\EFEF;
                      PLA                                       ;;EFA0|F000+F000/EFF0\EFF0;
                      JMP ADDR_00EB42                           ;;EFA1|F001+F001/EFF1\EFF1;
                                                                ;;                        ;
                    + RTS                                       ;;EFA4|F004+F004/EFF4\EFF4; Return 
                                                                ;;                        ;
CODE_00F005:          TYA                                       ;;EFA5|F005+F005/EFF5\EFF5;
                      SEC                                       ;;EFA6|F006+F006/EFF6\EFF6;
                      SBC.B #$0E                                ;;EFA7|F007+F007/EFF7\EFF7;
                      CMP.B #$02                                ;;EFA9|F009+F009/EFF9\EFF9;
                      BCS Return00F04C                          ;;EFAB|F00B+F00B/EFFB\EFFB;
                      EOR.B #$01                                ;;EFAD|F00D+F00D/EFFD\EFFD;
                      CMP.B !PlayerDirection                    ;;EFAF|F00F+F00F/EFFF\EFFF;
                      BNE Return00F04C                          ;;EFB1|F011+F011/F001\F001;
                      TAX                                       ;;EFB3|F013+F013/F003\F003;
                      LSR A                                     ;;EFB4|F014+F014/F004\F004;
                      LDA.B !PlayerXPosInBlock                  ;;EFB5|F015+F015/F005\F005;
                      BCC +                                     ;;EFB7|F017+F017/F007\F007;
                      EOR.B #$0F                                ;;EFB9|F019+F019/F009\F009;
                    + CMP.B #con($08,$08,$08,$09,$09)           ;;EFBB|F01B+F01B/F00B\F00B;
                      BCS Return00F04C                          ;;EFBD|F01D+F01D/F00D\F00D;
                      LDA.W !PlayerRidingYoshi                  ;;EFBF|F01F+F01F/F00F\F00F;
                      BEQ +                                     ;;EFC2|F022+F022/F012\F012;
                      LDA.B #!SFX_SPRING                        ;;EFC4|F024+F024/F014\F014;
                      STA.W !SPCIO3                             ;;EFC6|F026+F026/F016\F016; / Play sound effect 
                      LDA.B #$80                                ;;EFC9|F029+F029/F019\F019;
                      STA.B !PlayerYSpeed                       ;;EFCB|F02B+F02B/F01B\F01B;
                      STA.W !BouncingOnBoard                    ;;EFCD|F02D+F02D/F01D\F01D;
                      PLA                                       ;;EFD0|F030+F030/F020\F020;
                      PLA                                       ;;EFD1|F031+F031/F021\F021;
                      JMP CODE_00EE35                           ;;EFD2|F032+F032/F022\F022;
                                                                ;;                        ;
                    + LDA.B !PlayerXSpeed                       ;;EFD5|F035+F035/F025\F025;
                      SEC                                       ;;EFD7|F037+F037/F027\F027;
                      SBC.W DATA_00EAB9,X                       ;;EFD8|F038+F038/F028\F028;
                      EOR.W DATA_00EAB9,X                       ;;EFDB|F03B+F03B/F02B\F02B;
                      BMI Return00F04C                          ;;EFDE|F03E+F03E/F02E\F02E;
                      LDA.W !IsCarryingItem                     ;;EFE0|F040+F040/F030\F030;
                      ORA.B !PlayerIsDucking                    ;;EFE3|F043+F043/F033\F033;
                      BNE Return00F04C                          ;;EFE5|F045+F045/F035\F035;
                      INX                                       ;;EFE7|F047+F047/F037\F037;
                      INX                                       ;;EFE8|F048+F048/F038\F038;
                      STX.W !WallrunningType                    ;;EFE9|F049+F049/F039\F039;
Return00F04C:         RTS                                       ;;EFEC|F04C+F04C/F03C\F03C; Return 
                                                                ;;                        ;
CODE_00F04D:          PHX                                       ;;EFED|F04D+F04D/F03D\F03D;
                      LDX.B #$19                                ;;EFEE|F04E+F04E/F03E\F03E;
CODE_00F050:          CMP.L DATA_00EAC1,X                       ;;EFF0|F050+F050/F040\F040;
                      BEQ CODE_00F05A                           ;;EFF4|F054+F054/F044\F044;
                      DEX                                       ;;EFF6|F056+F056/F046\F046;
                      BPL CODE_00F050                           ;;EFF7|F057+F057/F047\F047;
                      CLC                                       ;;EFF9|F059+F059/F049\F049;
CODE_00F05A:          PLX                                       ;;EFFA|F05A+F05A/F04A\F04A;
                      RTL                                       ;;EFFB|F05B+F05B/F04B\F04B; Return 
                                                                ;;                        ;
                                                                ;;                        ;
DATA_00F05C:          db $01,$05,$01,$02,$01,$01,$00,$00        ;;EFFC|F05C+F05C/F04C\F04C;
                      db $00,$00,$00,$00,$00,$06,$02,$02        ;;F004|F064+F064/F054\F054;
                      db $02,$02,$02,$02,$02,$02,$02,$02        ;;F00C|F06C+F06C/F05C\F05C;
                      db $02,$03,$03,$04,$02,$02,$02,$01        ;;F014|F074+F074/F064\F064;
                      db $01,$07,$11,$10                        ;;F01C|F07C+F07C/F06C\F06C;
                                                                ;;                        ;
DATA_00F080:          db $80,$00,$00,$1E,$00,$00,$05,$09        ;;F020|F080+F080/F070\F070;
                      db $06,$81,$0E,$0C,$14,$00,$05,$09        ;;F028|F088+F088/F078\F078;
                      db $06,$07,$0E,$0C,$16,$18,$1A,$1A        ;;F030|F090+F090/F080\F080;
                      db $00,$09,$00,$00,$FF,$0C,$0A,$00        ;;F038|F098+F098/F088\F088;
                      db $00,$00,$08,$02                        ;;F040|F0A0+F0A0/F090\F090;
                                                                ;;                        ;
DATA_00F0A4:          db $0C,$08,$0C,$08,$0C,$0F,$08,$08        ;;F044|F0A4+F0A4/F094\F094;
                      db $08,$08,$08,$08,$08,$08,$08,$08        ;;F04C|F0AC+F0AC/F09C\F09C;
                      db $08,$08,$08,$08,$08,$08,$08,$08        ;;F054|F0B4+F0B4/F0A4\F0A4;
                      db $08,$03,$03,$08,$08,$08,$08,$08        ;;F05C|F0BC+F0BC/F0AC\F0AC;
                      db $08,$04,$08,$08                        ;;F064|F0C4+F0C4/F0B4\F0B4;
                                                                ;;                        ;
DATA_00F0C8:          db $0E,$13,$0E,$0D,$0E,$10,$0D,$0D        ;;F068|F0C8+F0C8/F0B8\F0B8;
                      db $0D,$0D,$0A,$0D,$0D,$0C,$0D,$0D        ;;F070|F0D0+F0D0/F0C0\F0C0;
                      db $0D,$0D,$0B,$0D,$0D,$16,$0D,$0D        ;;F078|F0D8+F0D8/F0C8\F0C8;
                      db $0D,$11,$11,$12,$0D,$0D,$0D,$0E        ;;F080|F0E0+F0E0/F0D0\F0D0;
                      db $0F,$0C,$0D,$0D                        ;;F088|F0E8+F0E8/F0D8\F0D8;
                                                                ;;                        ;
DATA_00F0EC:          db $08,$01,$02,$04,$ED,$F6,$00,$7D        ;;F08C|F0EC+F0EC/F0DC\F0DC;
                      db $BE,$00,$6F,$B7                        ;;F094|F0F4+F0F4/F0E4\F0E4;
                                                                ;;                        ;
DATA_00F0F8:          db $40,$50,$00,$70,$80,$00,$A0,$B0        ;;F098|F0F8+F0F8/F0E8\F0E8;
DATA_00F100:          db $05,$09,$06,$05,$09,$06,$05,$09        ;;F0A0|F100+F100/F0F0\F0F0;
                      db $06,$05,$09,$06,$05,$09,$06,$05        ;;F0A8|F108+F108/F0F8\F0F8;
                      db $07,$0A,$10,$07,$0A,$10,$07,$0A        ;;F0B0|F110+F110/F100\F100;
                      db $10,$07,$0A,$10,$07,$0A,$10,$07        ;;F0B8|F118+F118/F108\F108;
                                                                ;;                        ;
CODE_00F120:          XBA                                       ;;F0C0|F120+F120/F110\F110;
                      LDA.W !PlayerRidingYoshi                  ;;F0C1|F121+F121/F111\F111;
                      BNE CODE_00F15F                           ;;F0C4|F124+F124/F114\F114;
                      XBA                                       ;;F0C6|F126+F126/F116\F116;
CODE_00F127:          CMP.B #$2F                                ;;F0C7|F127+F127/F117\F117;
                      BEQ CODE_00F154                           ;;F0C9|F129+F129/F119\F119;
                      CMP.B #$59                                ;;F0CB|F12B+F12B/F11B\F11B;
                      BCC CODE_00F144                           ;;F0CD|F12D+F12D/F11D\F11D;
                      CMP.B #$5C                                ;;F0CF|F12F+F12F/F11F\F11F;
                      BCS CODE_00F140                           ;;F0D1|F131+F131/F121\F121;
                      XBA                                       ;;F0D3|F133+F133/F123\F123;
                      LDA.W !ObjectTileset                      ;;F0D4|F134+F134/F124\F124;
                      CMP.B #$05                                ;;F0D7|F137+F137/F127\F127;
                      BEQ CODE_00F154                           ;;F0D9|F139+F139/F129\F129;
                      CMP.B #$0D                                ;;F0DB|F13B+F13B/F12B\F12B;
                      BEQ CODE_00F154                           ;;F0DD|F13D+F13D/F12D\F12D;
                      XBA                                       ;;F0DF|F13F+F13F/F12F\F12F;
CODE_00F140:          CMP.B #$5D                                ;;F0E0|F140+F140/F130\F130;
                      BCC CODE_00F14C                           ;;F0E2|F142+F142/F132\F132;
CODE_00F144:          CMP.B #$66                                ;;F0E4|F144+F144/F134\F134;
                      BCC CODE_00F160                           ;;F0E6|F146+F146/F136\F136;
                      CMP.B #$6A                                ;;F0E8|F148+F148/F138\F138;
                      BCS CODE_00F160                           ;;F0EA|F14A+F14A/F13A\F13A;
CODE_00F14C:          XBA                                       ;;F0EC|F14C+F14C/F13C\F13C;
                      LDA.W !ObjectTileset                      ;;F0ED|F14D+F14D/F13D\F13D;
                      CMP.B #$01                                ;;F0F0|F150+F150/F140\F140;
                      BNE CODE_00F15F                           ;;F0F2|F152+F152/F142\F142;
CODE_00F154:          PHB                                       ;;F0F4|F154+F154/F144\F144;
                      LDA.B #$01                                ;;F0F5|F155+F155/F145\F145;
                      PHA                                       ;;F0F7|F157+F157/F147\F147;
                      PLB                                       ;;F0F8|F158+F158/F148\F148;
                      JSL HurtMario                             ;;F0F9|F159+F159/F149\F149;
                      PLB                                       ;;F0FD|F15D+F15D/F14D\F14D;
                      RTL                                       ;;F0FE|F15E+F15E/F14E\F14E; Return 
                                                                ;;                        ;
CODE_00F15F:          XBA                                       ;;F0FF|F15F+F15F/F14F\F14F;
CODE_00F160:          SEC                                       ;;F100|F160+F160/F150\F150;
                      SBC.B #$11                                ;;F101|F161+F161/F151\F151;
                      CMP.B #$1D                                ;;F103|F163+F163/F153\F153;
                      BCC CODE_00F17F                           ;;F105|F165+F165/F155\F155;
                      XBA                                       ;;F107|F167+F167/F157\F157;
                      PHX                                       ;;F108|F168+F168/F158\F158;
                      LDX.W !ObjectTileset                      ;;F109|F169+F169/F159\F159;
                      LDA.L DATA_00A625,X                       ;;F10C|F16C+F16C/F15C\F15C;
                      PLX                                       ;;F110|F170+F170/F160\F160;
                      AND.B #$03                                ;;F111|F171+F171/F161\F161;
                      BEQ +                                     ;;F113|F173+F173/F163\F163;
                      RTL                                       ;;F115|F175+F175/F165\F165; Return 
                                                                ;;                        ;
                    + XBA                                       ;;F116|F176+F176/F166\F166;
                      SBC.B #$59                                ;;F117|F177+F177/F167\F167;
                      CMP.B #$02                                ;;F119|F179+F179/F169\F169;
                      BCS Return00F1F8                          ;;F11B|F17B+F17B/F16B\F16B;
                      ADC.B #$22                                ;;F11D|F17D+F17D/F16D\F16D;
CODE_00F17F:          PHX                                       ;;F11F|F17F+F17F/F16F\F16F;
                      PHA                                       ;;F120|F180+F180/F170\F170;
                      TYX                                       ;;F121|F181+F181/F171\F171;
                      LDA.L DATA_00F0EC,X                       ;;F122|F182+F182/F172\F172;
                      PLX                                       ;;F126|F186+F186/F176\F176;
                      AND.L DATA_00F0A4,X                       ;;F127|F187+F187/F177\F177;
                      BEQ CODE_00F1F6                           ;;F12B|F18B+F18B/F17B\F17B;
                      STY.B !_6                                 ;;F12D|F18D+F18D/F17D\F17D;
                      LDA.L DATA_00F0C8,X                       ;;F12F|F18F+F18F/F17F\F17F;
                      STA.B !_7                                 ;;F133|F193+F193/F183\F183;
                      LDA.L DATA_00F05C,X                       ;;F135|F195+F195/F185\F185;
                      STA.B !_4                                 ;;F139|F199+F199/F189\F189;
                      LDA.L DATA_00F080,X                       ;;F13B|F19B+F19B/F18B\F18B;
                      BPL CODE_00F1BA                           ;;F13F|F19F+F19F/F18F\F18F;
                      CMP.B #$FF                                ;;F141|F1A1+F1A1/F191\F191;
                      BNE CODE_00F1AE                           ;;F143|F1A3+F1A3/F193\F193;
                      LDA.B #$05                                ;;F145|F1A5+F1A5/F195\F195;
                      LDY.W !GreenStarBlockCoins                ;;F147|F1A7+F1A7/F197\F197;
                      BEQ CODE_00F1D0                           ;;F14A|F1AA+F1AA/F19A\F19A;
                      BRA CODE_00F1CE                           ;;F14C|F1AC+F1AC/F19C\F19C;
                                                                ;;                        ;
CODE_00F1AE:          LSR A                                     ;;F14E|F1AE+F1AE/F19E\F19E;
                      LDA.B !TouchBlockXPos                     ;;F14F|F1AF+F1AF/F19F\F19F;
                      ROR A                                     ;;F151|F1B1+F1B1/F1A1\F1A1;
                      LSR A                                     ;;F152|F1B2+F1B2/F1A2\F1A2;
                      LSR A                                     ;;F153|F1B3+F1B3/F1A3\F1A3;
                      LSR A                                     ;;F154|F1B4+F1B4/F1A4\F1A4;
                      TAX                                       ;;F155|F1B5+F1B5/F1A5\F1A5;
                      LDA.L DATA_00F100,X                       ;;F156|F1B6+F1B6/F1A6\F1A6;
CODE_00F1BA:          LSR A                                     ;;F15A|F1BA+F1BA/F1AA\F1AA;
                      BCC CODE_00F1D0                           ;;F15B|F1BB+F1BB/F1AB\F1AB;
                      CMP.B #$03                                ;;F15D|F1BD+F1BD/F1AD\F1AD;
                      BEQ CODE_00F1C9                           ;;F15F|F1BF+F1BF/F1AF\F1AF;
                      LDY.B !Powerup                            ;;F161|F1C1+F1C1/F1B1\F1B1;
                      BNE CODE_00F1D0                           ;;F163|F1C3+F1C3/F1B3\F1B3;
                      LDA.B #$01                                ;;F165|F1C5+F1C5/F1B5\F1B5;
                      BRA CODE_00F1D0                           ;;F167|F1C7+F1C7/F1B7\F1B7;
                                                                ;;                        ;
CODE_00F1C9:          LDY.W !InvinsibilityTimer                 ;;F169|F1C9+F1C9/F1B9\F1B9; \ Branch if Mario has star 
                      BNE CODE_00F1D0                           ;;F16C|F1CC+F1CC/F1BC\F1BC; / 
CODE_00F1CE:          LDA.B #$06                                ;;F16E|F1CE+F1CE/F1BE\F1BE;
CODE_00F1D0:          STA.B !_5                                 ;;F170|F1D0+F1D0/F1C0\F1C0;
                      CMP.B #$05                                ;;F172|F1D2+F1D2/F1C2\F1C2;
                      BNE +                                     ;;F174|F1D4+F1D4/F1C4\F1C4;
                      LDA.B #$16                                ;;F176|F1D6+F1D6/F1C6\F1C6;
                      STA.B !_7                                 ;;F178|F1D8+F1D8/F1C8\F1C8;
                    + TAY                                       ;;F17A|F1DA+F1DA/F1CA\F1CA;
                      LDA.B #$0F                                ;;F17B|F1DB+F1DB/F1CB\F1CB;
                      TRB.B !TouchBlockXPos                     ;;F17D|F1DD+F1DD/F1CD\F1CD;
                      TRB.B !TouchBlockYPos                     ;;F17F|F1DF+F1DF/F1CF\F1CF;
                      CPY.B #$06                                ;;F181|F1E1+F1E1/F1D1\F1D1;
                      BNE CODE_00F1EC                           ;;F183|F1E3+F1E3/F1D3\F1D3;
                      LDY.W !ObjectTileset                      ;;F185|F1E5+F1E5/F1D5\F1D5;
                      CPY.B #$04                                ;;F188|F1E8+F1E8/F1D8\F1D8;
                      BEQ +                                     ;;F18A|F1EA+F1EA/F1DA\F1DA;
CODE_00F1EC:          PHB                                       ;;F18C|F1EC+F1EC/F1DC\F1DC;
                      LDA.B #$02                                ;;F18D|F1ED+F1ED/F1DD\F1DD;
                      PHA                                       ;;F18F|F1EF+F1EF/F1DF\F1DF;
                      PLB                                       ;;F190|F1F0+F1F0/F1E0\F1E0;
                      JSL CODE_028752                           ;;F191|F1F1+F1F1/F1E1\F1E1;
                      PLB                                       ;;F195|F1F5+F1F5/F1E5\F1E5;
CODE_00F1F6:          PLX                                       ;;F196|F1F6+F1F6/F1E6\F1E6;
                      CLC                                       ;;F197|F1F7+F1F7/F1E7\F1E7;
Return00F1F8:         RTL                                       ;;F198|F1F8+F1F8/F1E8\F1E8; Return 
                                                                ;;                        ;
                    + LDA.B !TouchBlockYPos+1                   ;;F199|F1F9+F1F9/F1E9\F1E9;
                      LSR A                                     ;;F19B|F1FB+F1FB/F1EB\F1EB;
                      LDA.B !TouchBlockYPos                     ;;F19C|F1FC+F1FC/F1EC\F1EC;
                      AND.B #$C0                                ;;F19E|F1FE+F1FE/F1EE\F1EE;
                      ROL A                                     ;;F1A0|F200+F200/F1F0\F1F0;
                      ROL A                                     ;;F1A1|F201+F201/F1F1\F1F1;
                      ROL A                                     ;;F1A2|F202+F202/F1F2\F1F2;
                      TAY                                       ;;F1A3|F203+F203/F1F3\F1F3;
                      LDA.B !TouchBlockXPos                     ;;F1A4|F204+F204/F1F4\F1F4;
                      LSR A                                     ;;F1A6|F206+F206/F1F6\F1F6;
                      LSR A                                     ;;F1A7|F207+F207/F1F7\F1F7;
                      LSR A                                     ;;F1A8|F208+F208/F1F8\F1F8;
                      LSR A                                     ;;F1A9|F209+F209/F1F9\F1F9;
                      TAX                                       ;;F1AA|F20A+F20A/F1FA\F1FA;
                      LDA.W !PBalloonInflating,Y                ;;F1AB|F20B+F20B/F1FB\F1FB;
                      ORA.L DATA_00F0EC,X                       ;;F1AE|F20E+F20E/F1FE\F1FE;
                      LDX.W !PBalloonInflating,Y                ;;F1B2|F212+F212/F202\F202;
                      STA.W !PBalloonInflating,Y                ;;F1B5|F215+F215/F205\F205;
                      CMP.B #$FF                                ;;F1B8|F218+F218/F208\F208;
                      BNE CODE_00F226                           ;;F1BA|F21A+F21A/F20A\F20A;
                      LDA.B #$05                                ;;F1BC|F21C+F21C/F20C\F20C;
                      STA.B !_5                                 ;;F1BE|F21E+F21E/F20E\F20E;
CODE_00F220:          LDA.B #$17                                ;;F1C0|F220+F220/F210\F210;
                      STA.B !_7                                 ;;F1C2|F222+F222/F212\F212;
                      BRA CODE_00F1EC                           ;;F1C4|F224+F224/F214\F214;
                                                                ;;                        ;
CODE_00F226:          LDA.W !DidPlayBonusGame                   ;;F1C6|F226+F226/F216\F216;
                      BNE CODE_00F236                           ;;F1C9|F229+F229/F219\F219;
                      TXA                                       ;;F1CB|F22B+F22B/F21B\F21B;
                      BEQ +                                     ;;F1CC|F22C+F22C/F21C\F21C;
                      LDA.B #$02                                ;;F1CE|F22E+F22E/F21E\F21E;
                    + EOR.B #$03                                ;;F1D0|F230+F230/F220\F220;
                      AND.B !TrueFrame                          ;;F1D2|F232+F232/F222\F222;
                      BNE CODE_00F220                           ;;F1D4|F234+F234/F224\F224;
CODE_00F236:          LDA.B #!SFX_WRONG                         ;;F1D6|F236+F236/F226\F226;
                      STA.W !SPCIO3                             ;;F1D8|F238+F238/F228\F228; / Play sound effect 
                      PHY                                       ;;F1DB|F23B+F23B/F22B\F22B;
                      STZ.B !_5                                 ;;F1DC|F23C+F23C/F22C\F22C;
                      PHB                                       ;;F1DE|F23E+F23E/F22E\F22E;
                      LDA.B #$02                                ;;F1DF|F23F+F23F/F22F\F22F; \ Set data bank = $02 
                      PHA                                       ;;F1E1|F241+F241/F231\F231;  | 
                      PLB                                       ;;F1E2|F242+F242/F232\F232;
                      JSL CODE_028752                           ;;F1E3|F243+F243/F233\F233;
                      PLB                                       ;;F1E7|F247+F247/F237\F237;
                      PLY                                       ;;F1E8|F248+F248/F238\F238;
                      LDX.B #$07                                ;;F1E9|F249+F249/F239\F239;
                      LDA.W !PBalloonInflating,Y                ;;F1EB|F24B+F24B/F23B\F23B;
CODE_00F24E:          LSR A                                     ;;F1EE|F24E+F24E/F23E\F23E;
                      BCS +                                     ;;F1EF|F24F+F24F/F23F\F23F;
                      PHA                                       ;;F1F1|F251+F251/F241\F241;
                      LDA.B #$0D                                ;;F1F2|F252+F252/F242\F242; \ Block to generate = Used block 
                      STA.B !Map16TileGenerate                  ;;F1F4|F254+F254/F244\F244; / 
                      LDA.L DATA_00F0F8,X                       ;;F1F6|F256+F256/F246\F246;
                      STA.B !TouchBlockXPos                     ;;F1FA|F25A+F25A/F24A\F24A;
                      JSL GenerateTile                          ;;F1FC|F25C+F25C/F24C\F24C;
                      PLA                                       ;;F200|F260+F260/F250\F250;
                    + DEX                                       ;;F201|F261+F261/F251\F251;
                      BPL CODE_00F24E                           ;;F202|F262+F262/F252\F252;
                      JMP CODE_00F1F6                           ;;F204|F264+F264/F254\F254;
                                                                ;;                        ;
CODE_00F267:          CPY.B #$2E                                ;;F207|F267+F267/F257\F257;
                      BNE Return00F28B                          ;;F209|F269+F269/F259\F259;
                      BIT.B !byetudlrFrame                      ;;F20B|F26B+F26B/F25B\F25B;
                      BVC Return00F28B                          ;;F20D|F26D+F26D/F25D\F25D;
                      LDA.W !IsCarryingItem                     ;;F20F|F26F+F26F/F25F\F25F;
                      ORA.W !PlayerRidingYoshi                  ;;F212|F272+F272/F262\F262;
                      BNE Return00F28B                          ;;F215|F275+F275/F265\F265;
                      LDA.B #$02                                ;;F217|F277+F277/F267\F267;
                      PHA                                       ;;F219|F279+F279/F269\F269;
                      PLB                                       ;;F21A|F27A+F27A/F26A\F26A;
                      JSL CODE_02862F                           ;;F21B|F27B+F27B/F26B\F26B;
                      BMI +                                     ;;F21F|F27F+F27F/F26F\F26F;
                      LDA.B #$02                                ;;F221|F281+F281/F271\F271; \ Block to generate = #$02 
                      STA.B !Map16TileGenerate                  ;;F223|F283+F283/F273\F273; / 
                      JSL GenerateTile                          ;;F225|F285+F285/F275\F275;
                    + PHK                                       ;;F229|F289+F289/F279\F279;
                      PLB                                       ;;F22A|F28A+F28A/F27A\F27A;
Return00F28B:         RTS                                       ;;F22B|F28B+F28B/F27B\F27B; Return 
                                                                ;;                        ;
CODE_00F28C:          TYA                                       ;;F22C|F28C+F28C/F27C\F27C;
                      SEC                                       ;;F22D|F28D+F28D/F27D\F27D;
                      SBC.B #$6F                                ;;F22E|F28E+F28E/F27E\F27E;
                      CMP.B #$04                                ;;F230|F290+F290/F280\F280;
                      BCS CODE_00F2C0                           ;;F232|F292+F292/F282\F282;
                      CMP.W !OneUpCheckpoints                   ;;F234|F294+F294/F284\F284;
                      BEQ CODE_00F2A8                           ;;F237|F297+F297/F287\F287;
                      INC A                                     ;;F239|F299+F299/F289\F289;
                      CMP.W !OneUpCheckpoints                   ;;F23A|F29A+F29A/F28A\F28A;
                      BEQ +                                     ;;F23D|F29D+F29D/F28D\F28D;
                      LDA.W !OneUpCheckpoints                   ;;F23F|F29F+F29F/F28F\F28F;
                      CMP.B #$04                                ;;F242|F2A2+F2A2/F292\F292;
                      BCS +                                     ;;F244|F2A4+F2A4/F294\F294;
                      LDA.B #$FF                                ;;F246|F2A6+F2A6/F296\F296;
CODE_00F2A8:          INC A                                     ;;F248|F2A8+F2A8/F298\F298;
                      STA.W !OneUpCheckpoints                   ;;F249|F2A9+F2A9/F299\F299;
                      CMP.B #$04                                ;;F24C|F2AC+F2AC/F29C\F29C;
                      BNE +                                     ;;F24E|F2AE+F2AE/F29E\F29E;
                      PHX                                       ;;F250|F2B0+F2B0/F2A0\F2A0;
                      JSL TriggerInivis1Up                      ;;F251|F2B1+F2B1/F2A1\F2A1;
                      JSR CODE_00F3B2                           ;;F255|F2B5+F2B5/F2A5\F2A5;
                      ORA.W !Checkpoint1upCollected,Y           ;;F258|F2B8+F2B8/F2A8\F2A8;
                      STA.W !Checkpoint1upCollected,Y           ;;F25B|F2BB+F2BB/F2AB\F2AB;
                      PLX                                       ;;F25E|F2BE+F2BE/F2AE\F2AE;
                    + RTS                                       ;;F25F|F2BF+F2BF/F2AF\F2AF; Return 
                                                                ;;                        ;
CODE_00F2C0:          LDA.B #$01                                ;;F260|F2C0+F2C0/F2B0\F2B0;
CODE_00F2C2:          CPY.B #$06                                ;;F262|F2C2+F2C2/F2B2\F2B2;
                      BCS CODE_00F2C9                           ;;F264|F2C4+F2C4/F2B4\F2B4;
                      TSB.B !GraphicsCompPtr                    ;;F266|F2C6+F2C6/F2B6\F2B6;
                      RTS                                       ;;F268|F2C8+F2C8/F2B8\F2B8; Return 
                                                                ;;                        ;
CODE_00F2C9:          CPY.B #$38                                ;;F269|F2C9+F2C9/F2B9\F2B9;
                      BNE CODE_00F2EE                           ;;F26B|F2CB+F2CB/F2BB\F2BB;
                      LDA.B #$02                                ;;F26D|F2CD+F2CD/F2BD\F2BD; \ Block to generate = #$02 
                      STA.B !Map16TileGenerate                  ;;F26F|F2CF+F2CF/F2BF\F2BF; / 
                      JSL GenerateTile                          ;;F271|F2D1+F2D1/F2C1\F2C1;
                      JSR CODE_00FD5A                           ;;F275|F2D5+F2D5/F2C5\F2C5;
                      LDA.W !DisableMidway                      ;;F278|F2D8+F2D8/F2C8\F2C8;
                      BEQ +                                     ;;F27B|F2DB+F2DB/F2CB\F2CB;
                      JSR CODE_00CA2B                           ;;F27D|F2DD+F2DD/F2CD\F2CD;
                    + LDA.B !Powerup                            ;;F280|F2E0+F2E0/F2D0\F2D0;
                      BNE +                                     ;;F282|F2E2+F2E2/F2D2\F2D2;
                      LDA.B #$01                                ;;F284|F2E4+F2E4/F2D4\F2D4;
                      STA.B !Powerup                            ;;F286|F2E6+F2E6/F2D6\F2D6;
                    + LDA.B #!SFX_MIDWAY                        ;;F288|F2E8+F2E8/F2D8\F2D8;
                      STA.W !SPCIO0                             ;;F28A|F2EA+F2EA/F2DA\F2DA; / Play sound effect 
                      RTS                                       ;;F28D|F2ED+F2ED/F2DD\F2DD; Return 
                                                                ;;                        ;
CODE_00F2EE:          CPY.B #$06                                ;;F28E|F2EE+F2EE/F2DE\F2DE;
                      BEQ CODE_00F2FC                           ;;F290|F2F0+F2F0/F2E0\F2E0;
                      CPY.B #$07                                ;;F292|F2F2+F2F2/F2E2\F2E2;
                      BCC CODE_00F309                           ;;F294|F2F4+F2F4/F2E4\F2E4;
                      CPY.B #$1D                                ;;F296|F2F6+F2F6/F2E6\F2E6;
                      BCS CODE_00F309                           ;;F298|F2F8+F2F8/F2E8\F2E8;
                      ORA.B #$80                                ;;F29A|F2FA+F2FA/F2EA\F2EA;
CODE_00F2FC:          CMP.B #$01                                ;;F29C|F2FC+F2FC/F2EC\F2EC;
                      BNE +                                     ;;F29E|F2FE+F2FE/F2EE\F2EE;
                      ORA.B #$18                                ;;F2A0|F300+F300/F2F0\F2F0;
                    + TSB.B !GraphicsCompPtr+1                  ;;F2A2|F302+F302/F2F2\F2F2;
                      LDA.B !PlayerBlockXSide                   ;;F2A4|F304+F304/F2F4\F2F4;
                      STA.B !GraphicsCompPtr+2                  ;;F2A6|F306+F306/F2F6\F2F6;
                      RTS                                       ;;F2A8|F308+F308/F2F8\F2F8; Return 
                                                                ;;                        ;
CODE_00F309:          CPY.B #$2F                                ;;F2A9|F309+F309/F2F9\F2F9;
                      BCS CODE_00F311                           ;;F2AB|F30B+F30B/F2FB\F2FB;
                      CPY.B #$2A                                ;;F2AD|F30D+F30D/F2FD\F2FD;
                      BCS CODE_00F32B                           ;;F2AF|F30F+F30F/F2FF\F2FF;
CODE_00F311:          CPY.B #$6E                                ;;F2B1|F311+F311/F301\F301;
                      BNE Return00F376                          ;;F2B3|F313+F313/F303\F303;
                      LDA.B #$0F                                ;;F2B5|F315+F315/F305\F305;
                      JSL CODE_00F38A                           ;;F2B7|F317+F317/F307\F307;
                      INC.W !MoonCounter                        ;;F2BB|F31B+F31B/F30B\F30B;
                      PHX                                       ;;F2BE|F31E+F31E/F30E\F30E;
                      JSR CODE_00F3B2                           ;;F2BF|F31F+F31F/F30F\F30F;
                      ORA.W !MoonCollected,Y                    ;;F2C2|F322+F322/F312\F312;
                      STA.W !MoonCollected,Y                    ;;F2C5|F325+F325/F315\F315;
                      PLX                                       ;;F2C8|F328+F328/F318\F318;
                      BRA CODE_00F36B                           ;;F2C9|F329+F329/F319\F319;
                                                                ;;                        ;
CODE_00F32B:          BNE CODE_00F332                           ;;F2CB|F32B+F32B/F31B\F31B;YOSHI COIN HANDLER        
                      LDA.W !BluePSwitchTimer                   ;;F2CD|F32D+F32D/F31D\F31D;
                      BEQ Return00F376                          ;;F2D0|F330+F330/F320\F320;
CODE_00F332:          CPY.B #$2D                                ;;F2D2|F332+F332/F322\F322;
                      BEQ CODE_00F33F                           ;;F2D4|F334+F334/F324\F324;
                      BCC CODE_00F367                           ;;F2D6|F336+F336/F326\F326;
                      LDA.B !TouchBlockYPos                     ;;F2D8|F338+F338/F328\F328;
                      SEC                                       ;;F2DA|F33A+F33A/F32A\F32A;
                      SBC.B #$10                                ;;F2DB|F33B+F33B/F32B\F32B;
                      STA.B !TouchBlockYPos                     ;;F2DD|F33D+F33D/F32D\F32D;
CODE_00F33F:          JSL CODE_00F377                           ;;F2DF|F33F+F33F/F32F\F32F;
                      INC.W !DragonCoinsShown                   ;;F2E3|F343+F343/F333\F333;
                      LDA.W !DragonCoinsShown                   ;;F2E6|F346+F346/F336\F336;
                      CMP.B #$05                                ;;F2E9|F349+F349/F339\F339;
                      BCC +                                     ;;F2EB|F34B+F34B/F33B\F33B;
                      PHX                                       ;;F2ED|F34D+F34D/F33D\F33D;
                      JSR CODE_00F3B2                           ;;F2EE|F34E+F34E/F33E\F33E;
                      ORA.W !AllDragonCoinsCollected,Y          ;;F2F1|F351+F351/F341\F341;
                      STA.W !AllDragonCoinsCollected,Y          ;;F2F4|F354+F354/F344\F344;
                      PLX                                       ;;F2F7|F357+F357/F347\F347;
                    + LDA.B #!SFX_DRAGONCOIN                    ;;F2F8|F358+F358/F348\F348;
                      STA.W !SPCIO0                             ;;F2FA|F35A+F35A/F34A\F34A; / Play sound effect 
                      LDA.B #$01                                ;;F2FD|F35D+F35D/F34D\F34D;
                      JSL CODE_05B330                           ;;F2FF|F35F+F35F/F34F\F34F;
                      LDY.B #$18                                ;;F303|F363+F363/F353\F353;
                      BRA +                                     ;;F305|F365+F365/F355\F355;
                                                                ;;                        ;
CODE_00F367:          JSL CODE_05B34A                           ;;F307|F367+F367/F357\F357;
CODE_00F36B:          LDY.B #$01                                ;;F30B|F36B+F36B/F35B\F35B; \ Block to generate = #$01 
                    + STY.B !Map16TileGenerate                  ;;F30D|F36D+F36D/F35D\F35D; / 
                      JSL GenerateTile                          ;;F30F|F36F+F36F/F35F\F35F;
                      JSR CODE_00FD5A                           ;;F313|F373+F373/F363\F363;
Return00F376:         RTS                                       ;;F316|F376+F376/F366\F366; Return 
                                                                ;;                        ;
CODE_00F377:          LDA.W !DragonCoinsCollected               ;;F317|F377+F377/F367\F367;
                      INC.W !DragonCoinsCollected               ;;F31A|F37A+F37A/F36A\F36A;
                      CLC                                       ;;F31D|F37D+F37D/F36D\F36D;
                      ADC.B #$09                                ;;F31E|F37E+F37E/F36E\F36E;
                      CMP.B #$0D                                ;;F320|F380+F380/F370\F370;
                      BCC +                                     ;;F322|F382+F382/F372\F372;
                      LDA.B #$0D                                ;;F324|F384+F384/F374\F374;
                    + BRA CODE_00F38A                           ;;F326|F386+F386/F376\F376;
                                                                ;;                        ;
CODE_00F388:          LDA.B #$0D                                ;;F328|F388+F388/F378\F378;
CODE_00F38A:          PHA                                       ;;F32A|F38A+F38A/F37A\F37A;
                      JSL CODE_02AD34                           ;;F32B|F38B+F38B/F37B\F37B;
                      PLA                                       ;;F32F|F38F+F38F/F37F\F37F;
                      STA.W !ScoreSpriteNumber,Y                ;;F330|F390+F390/F380\F380;
                      LDA.B !PlayerXPosNext                     ;;F333|F393+F393/F383\F383;
                      STA.W !ScoreSpriteXPosLow,Y               ;;F335|F395+F395/F385\F385;
                      LDA.B !PlayerXPosNext+1                   ;;F338|F398+F398/F388\F388;
                      STA.W !ScoreSpriteXPosHigh,Y              ;;F33A|F39A+F39A/F38A\F38A;
                      LDA.B !PlayerYPosNext                     ;;F33D|F39D+F39D/F38D\F38D;
                      STA.W !ScoreSpriteYPosLow,Y               ;;F33F|F39F+F39F/F38F\F38F;
                      LDA.B !PlayerYPosNext+1                   ;;F342|F3A2+F3A2/F392\F392;
                      STA.W !ScoreSpriteYPosHigh,Y              ;;F344|F3A4+F3A4/F394\F394;
                      LDA.B #$30                                ;;F347|F3A7+F3A7/F397\F397;
                      STA.W !ScoreSpriteTimer,Y                 ;;F349|F3A9+F3A9/F399\F399;
                      LDA.B #$00                                ;;F34C|F3AC+F3AC/F39C\F39C;
                      STA.W !ScoreSpriteLayer,Y                 ;;F34E|F3AE+F3AE/F39E\F39E;
                      RTL                                       ;;F351|F3B1+F3B1/F3A1\F3A1; Return 
                                                                ;;                        ;
CODE_00F3B2:          LDA.W !TranslevelNo                       ;;F352|F3B2+F3B2/F3A2\F3A2;
                      LSR A                                     ;;F355|F3B5+F3B5/F3A5\F3A5;
                      LSR A                                     ;;F356|F3B6+F3B6/F3A6\F3A6;
                      LSR A                                     ;;F357|F3B7+F3B7/F3A7\F3A7;
                      TAY                                       ;;F358|F3B8+F3B8/F3A8\F3A8;
                      LDA.W !TranslevelNo                       ;;F359|F3B9+F3B9/F3A9\F3A9;
                      AND.B #$07                                ;;F35C|F3BC+F3BC/F3AC\F3AC;
                      TAX                                       ;;F35E|F3BE+F3BE/F3AE\F3AE;
                      LDA.L DATA_05B35B,X                       ;;F35F|F3BF+F3BF/F3AF\F3AF;
                      RTS                                       ;;F363|F3C3+F3C3/F3B3\F3B3; Return 
                                                                ;;                        ;
CODE_00F3C4:          CPY.B #$3F                                ;;F364|F3C4+F3C4/F3B4\F3B4;
                      BNE Return00F376                          ;;F366|F3C6+F3C6/F3B6\F3B6;
                      LDY.B !GraphicsUncompPtr+2                ;;F368|F3C8+F3C8/F3B8\F3B8;
                      BEQ +                                     ;;F36A|F3CA+F3CA/F3BA\F3BA;
                      JMP CODE_00F43F                           ;;F36C|F3CC+F3CC/F3BC\F3BC;
                                                                ;;                        ;
                    + PHX                                       ;;F36F|F3CF+F3CF/F3BF\F3BF;
                      TAX                                       ;;F370|F3D0+F3D0/F3C0\F3C0;
                      LDA.B !PlayerXPosNext                     ;;F371|F3D1+F3D1/F3C1\F3C1;
                      TXY                                       ;;F373|F3D3+F3D3/F3C3\F3C3;
                      BEQ +                                     ;;F374|F3D4+F3D4/F3C4\F3C4;
                      EOR.B #$FF                                ;;F376|F3D6+F3D6/F3C6\F3C6;
                      INC A                                     ;;F378|F3D8+F3D8/F3C8\F3C8;
                    + AND.B #$0F                                ;;F379|F3D9+F3D9/F3C9\F3C9;
                      ASL A                                     ;;F37B|F3DB+F3DB/F3CB\F3CB;
                      CLC                                       ;;F37C|F3DC+F3DC/F3CC\F3CC;
                      ADC.B #$20                                ;;F37D|F3DD+F3DD/F3CD\F3CD;
                      LDY.B #$05                                ;;F37F|F3DF+F3DF/F3CF\F3CF;
                      BRA CODE_00F40A                           ;;F381|F3E1+F3E1/F3D1\F3D1;
                                                                ;;                        ;
                                                                ;;                        ;
DATA_00F3E3:          db $0A,$FF                                ;;F383|F3E3+F3E3/F3D3\F3D3;
                                                                ;;                        ;
DATA_00F3E5:          db $02,$01,$08,$04                        ;;F385|F3E5+F3E5/F3D5\F3D5;
                                                                ;;                        ;
CODE_00F3E9:          XBA                                       ;;F389|F3E9+F3E9/F3D9\F3D9;
                      TYA                                       ;;F38A|F3EA+F3EA/F3DA\F3DA;
                      SEC                                       ;;F38B|F3EB+F3EB/F3DB\F3DB;
                      SBC.B #$37                                ;;F38C|F3EC+F3EC/F3DC\F3DC;
                      CMP.B #$02                                ;;F38E|F3EE+F3EE/F3DE\F3DE;
                      BCS Return00F442                          ;;F390|F3F0+F3F0/F3E0\F3E0;
                      TAY                                       ;;F392|F3F2+F3F2/F3E2\F3E2;
                      LDA.B !PlayerXPosInBlock                  ;;F393|F3F3+F3F3/F3E3\F3E3;
                      SBC.W DATA_00F3E3,Y                       ;;F395|F3F5+F3F5/F3E5\F3E5;
                      CMP.B #$05                                ;;F398|F3F8+F3F8/F3E8\F3E8;
                      BCS CODE_00F43F                           ;;F39A|F3FA+F3FA/F3EA\F3EA;
                      PHX                                       ;;F39C|F3FC+F3FC/F3EC\F3EC;
                      XBA                                       ;;F39D|F3FD+F3FD/F3ED\F3ED;
                      TAX                                       ;;F39E|F3FE+F3FE/F3EE\F3EE;
                      LDA.B #$20                                ;;F39F|F3FF+F3FF/F3EF\F3EF;
                      LDY.W !PlayerRidingYoshi                  ;;F3A1|F401+F401/F3F1\F3F1;
                      BEQ +                                     ;;F3A4|F404+F404/F3F4\F3F4;
                      LDA.B #$30                                ;;F3A6|F406+F406/F3F6\F3F6;
                    + LDY.B #$06                                ;;F3A8|F408+F408/F3F8\F3F8;
CODE_00F40A:          STA.B !PipeTimer                          ;;F3AA|F40A+F40A/F3FA\F3FA;
                      LDA.B !byetudlrHold                       ;;F3AC|F40C+F40C/F3FC\F3FC;
                      AND.W DATA_00F3E5,X                       ;;F3AE|F40E+F40E/F3FE\F3FE;
                      BEQ CODE_00F43E                           ;;F3B1|F411+F411/F401\F401;
                      STA.B !SpriteLock                         ;;F3B3|F413+F413/F403\F403;
                      AND.B #$01                                ;;F3B5|F415+F415/F405\F405;
                      STA.B !PlayerDirection                    ;;F3B7|F417+F417/F407\F407;
                      STX.B !PlayerPipeAction                   ;;F3B9|F419+F419/F409\F409;
                      TXA                                       ;;F3BB|F41B+F41B/F40B\F40B;
                      LSR A                                     ;;F3BC|F41C+F41C/F40C\F40C;
                      TAX                                       ;;F3BD|F41D+F41D/F40D\F40D;
                      BNE +                                     ;;F3BE|F41E+F41E/F40E\F40E;
                      LDA.W !IsCarryingItem                     ;;F3C0|F420+F420/F410\F410;
                      BEQ +                                     ;;F3C3|F423+F423/F413\F413;
                      LDA.B !PlayerDirection                    ;;F3C5|F425+F425/F415\F415;
                      EOR.B #$01                                ;;F3C7|F427+F427/F417\F417;
                      STA.B !PlayerDirection                    ;;F3C9|F429+F429/F419\F419;
                      LDA.B #$08                                ;;F3CB|F42B+F42B/F41B\F41B;
                      STA.W !FaceScreenTimer                    ;;F3CD|F42D+F42D/F41D\F41D;
                    + INX                                       ;;F3D0|F430+F430/F420\F420;
                      STX.W !YoshiInPipeSetting                 ;;F3D1|F431+F431/F421\F421;
                      STY.B !PlayerAnimation                    ;;F3D4|F434+F434/F424\F424;
                      JSR NoButtons                             ;;F3D6|F436+F436/F426\F426;
                      LDA.B #!SFX_PIPE                          ;;F3D9|F439+F439/F429\F429;
                      STA.W !SPCIO0                             ;;F3DB|F43B+F43B/F42B\F42B; / Play sound effect 
CODE_00F43E:          PLX                                       ;;F3DE|F43E+F43E/F42E\F42E;
CODE_00F43F:          LDY.W !Map16TileNumber                    ;;F3DF|F43F+F43F/F42F\F42F;
Return00F442:         RTS                                       ;;F3E2|F442+F442/F432\F432; Return 
                                                                ;;                        ;
CODE_00F443:          LDA.B !PlayerXPosNext                     ;;F3E3|F443+F443/F433\F433;
                      CLC                                       ;;F3E5|F445+F445/F435\F435;
                      ADC.B #$04                                ;;F3E6|F446+F446/F436\F436;
                      AND.B #$0F                                ;;F3E8|F448+F448/F438\F438;
                      CMP.B #$08                                ;;F3EA|F44A+F44A/F43A\F43A;
                      RTS                                       ;;F3EC|F44C+F44C/F43C\F43C; Return 
                                                                ;;                        ;
CODE_00F44D:          INX                                       ;;F3ED|F44D+F44D/F43D\F43D;
                      INX                                       ;;F3EE|F44E+F44E/F43E\F43E;
                      REP #$20                                  ;;F3EF|F44F+F44F/F43F\F43F; Accum (16 bit) 
                      LDA.B !PlayerXPosNext                     ;;F3F1|F451+F451/F441\F441;
                      CLC                                       ;;F3F3|F453+F453/F443\F443;
                      ADC.W DATA_00E830,X                       ;;F3F4|F454+F454/F444\F444;
                      STA.B !TouchBlockXPos                     ;;F3F7|F457+F457/F447\F447;
                      LDA.B !PlayerYPosNext                     ;;F3F9|F459+F459/F449\F449;
                      CLC                                       ;;F3FB|F45B+F45B/F44B\F44B;
                      ADC.W DATA_00E89C,X                       ;;F3FC|F45C+F45C/F44C\F44C;
                      STA.B !TouchBlockYPos                     ;;F3FF|F45F+F45F/F44F\F44F;
CODE_00F461:          JSR CODE_00F465                           ;;F401|F461+F461/F451\F451;
                      RTS                                       ;;F404|F464+F464/F454\F454; Return 
                                                                ;;                        ;
CODE_00F465:          SEP #$20                                  ;;F405|F465+F465/F455\F455; Accum (8 bit) 
                      STZ.W !SwitchPalacePressed                ;;F407|F467+F467/F457\F457;
                      PHX                                       ;;F40A|F46A+F46A/F45A\F45A;
                      LDA.B !GraphicsUncompPtr+1                ;;F40B|F46B+F46B/F45B\F45B;
                      BPL +                                     ;;F40D|F46D+F46D/F45D\F45D;
                      JMP CODE_00F4EC                           ;;F40F|F46F+F46F/F45F\F45F;
                                                                ;;                        ;
                    + BNE CODE_00F4A6                           ;;F412|F472+F472/F462\F462;
                      REP #$20                                  ;;F414|F474+F474/F464\F464; Accum (16 bit) 
                      LDA.B !TouchBlockYPos                     ;;F416|F476+F476/F466\F466;
                      CMP.W #$01B0                              ;;F418|F478+F478/F468\F468;
                      SEP #$20                                  ;;F41B|F47B+F47B/F46B\F46B; Accum (8 bit) 
                      BCS CODE_00F4A0                           ;;F41D|F47D+F47D/F46D\F46D;
                      AND.B #$F0                                ;;F41F|F47F+F47F/F46F\F46F;
                      STA.B !_0                                 ;;F421|F481+F481/F471\F471;
                      LDX.B !TouchBlockXPos+1                   ;;F423|F483+F483/F473\F473;
                      CPX.B !LevelScrLength                     ;;F425|F485+F485/F475\F475;
                      BCS CODE_00F4A0                           ;;F427|F487+F487/F477\F477;
                      LDA.B !TouchBlockXPos                     ;;F429|F489+F489/F479\F479;
                      LSR A                                     ;;F42B|F48B+F48B/F47B\F47B;
                      LSR A                                     ;;F42C|F48C+F48C/F47C\F47C;
                      LSR A                                     ;;F42D|F48D+F48D/F47D\F47D;
                      LSR A                                     ;;F42E|F48E+F48E/F47E\F47E;
                      ORA.B !_0                                 ;;F42F|F48F+F48F/F47F\F47F;
                      CLC                                       ;;F431|F491+F491/F481\F481;
                      ADC.L DATA_00BA60,X                       ;;F432|F492+F492/F482\F482;
                      STA.B !_0                                 ;;F436|F496+F496/F486\F486;
                      LDA.B !TouchBlockYPos+1                   ;;F438|F498+F498/F488\F488;
                      ADC.L DATA_00BA9C,X                       ;;F43A|F49A+F49A/F48A\F48A;
                      BRA CODE_00F4CD                           ;;F43E|F49E+F49E/F48E\F48E;
                                                                ;;                        ;
CODE_00F4A0:          PLX                                       ;;F440|F4A0+F4A0/F490\F490;
                      LDY.B #$25                                ;;F441|F4A1+F4A1/F491\F491;
CODE_00F4A3:          LDA.B #$00                                ;;F443|F4A3+F4A3/F493\F493;
                      RTS                                       ;;F445|F4A5+F4A5/F495\F495; Return 
                                                                ;;                        ;
CODE_00F4A6:          LDA.B !TouchBlockXPos+1                   ;;F446|F4A6+F4A6/F496\F496;
                      CMP.B #$02                                ;;F448|F4A8+F4A8/F498\F498;
                      BCS CODE_00F4E7                           ;;F44A|F4AA+F4AA/F49A\F49A;
                      LDX.B !TouchBlockYPos+1                   ;;F44C|F4AC+F4AC/F49C\F49C;
                      CPX.B !LevelScrLength                     ;;F44E|F4AE+F4AE/F49E\F49E;
                      BCS CODE_00F4E7                           ;;F450|F4B0+F4B0/F4A0\F4A0;
                      LDA.B !TouchBlockYPos                     ;;F452|F4B2+F4B2/F4A2\F4A2;
                      AND.B #$F0                                ;;F454|F4B4+F4B4/F4A4\F4A4;
                      STA.B !_0                                 ;;F456|F4B6+F4B6/F4A6\F4A6;
                      LDA.B !TouchBlockXPos                     ;;F458|F4B8+F4B8/F4A8\F4A8;
                      LSR A                                     ;;F45A|F4BA+F4BA/F4AA\F4AA;
                      LSR A                                     ;;F45B|F4BB+F4BB/F4AB\F4AB;
                      LSR A                                     ;;F45C|F4BC+F4BC/F4AC\F4AC;
                      LSR A                                     ;;F45D|F4BD+F4BD/F4AD\F4AD;
                      ORA.B !_0                                 ;;F45E|F4BE+F4BE/F4AE\F4AE;
                      CLC                                       ;;F460|F4C0+F4C0/F4B0\F4B0;
                      ADC.L DATA_00BA80,X                       ;;F461|F4C1+F4C1/F4B1\F4B1;
                      STA.B !_0                                 ;;F465|F4C5+F4C5/F4B5\F4B5;
                      LDA.B !TouchBlockXPos+1                   ;;F467|F4C7+F4C7/F4B7\F4B7;
                      ADC.L DATA_00BABC,X                       ;;F469|F4C9+F4C9/F4B9\F4B9;
CODE_00F4CD:          STA.B !_1                                 ;;F46D|F4CD+F4CD/F4BD\F4BD;
                      LDA.B #$7E                                ;;F46F|F4CF+F4CF/F4BF\F4BF;
                      STA.B !_2                                 ;;F471|F4D1+F4D1/F4C1\F4C1;
                      LDA.B [!_0]                               ;;F473|F4D3+F4D3/F4C3\F4C3;
                      STA.W !Map16TileNumber                    ;;F475|F4D5+F4D5/F4C5\F4C5;
                      INC.B !_2                                 ;;F478|F4D8+F4D8/F4C8\F4C8;
                      PLX                                       ;;F47A|F4DA+F4DA/F4CA\F4CA;
                      LDA.B [!_0]                               ;;F47B|F4DB+F4DB/F4CB\F4CB;
                      JSL CODE_00F545                           ;;F47D|F4DD+F4DD/F4CD\F4CD;
                      LDY.W !Map16TileNumber                    ;;F481|F4E1+F4E1/F4D1\F4D1;
                      CMP.B #$00                                ;;F484|F4E4+F4E4/F4D4\F4D4;
                      RTS                                       ;;F486|F4E6+F4E6/F4D6\F4D6; Return 
                                                                ;;                        ;
CODE_00F4E7:          PLX                                       ;;F487|F4E7+F4E7/F4D7\F4D7;
                      LDY.B #$25                                ;;F488|F4E8+F4E8/F4D8\F4D8;
                      BRA CODE_00F4A3                           ;;F48A|F4EA+F4EA/F4DA\F4DA;
                                                                ;;                        ;
CODE_00F4EC:          ASL A                                     ;;F48C|F4EC+F4EC/F4DC\F4DC;
                      BNE CODE_00F51B                           ;;F48D|F4ED+F4ED/F4DD\F4DD;
                      REP #$20                                  ;;F48F|F4EF+F4EF/F4DF\F4DF; Accum (16 bit) 
                      LDA.B !TouchBlockYPos                     ;;F491|F4F1+F4F1/F4E1\F4E1;
                      CMP.W #$01B0                              ;;F493|F4F3+F4F3/F4E3\F4E3;
                      SEP #$20                                  ;;F496|F4F6+F4F6/F4E6\F4E6; Accum (8 bit) 
                      BCS CODE_00F4E7                           ;;F498|F4F8+F4F8/F4E8\F4E8;
                      AND.B #$F0                                ;;F49A|F4FA+F4FA/F4EA\F4EA;
                      STA.B !_0                                 ;;F49C|F4FC+F4FC/F4EC\F4EC;
                      LDX.B !TouchBlockXPos+1                   ;;F49E|F4FE+F4FE/F4EE\F4EE;
                      CPX.B #$10                                ;;F4A0|F500+F500/F4F0\F4F0;
                      BCS CODE_00F4E7                           ;;F4A2|F502+F502/F4F2\F4F2;
                      LDA.B !TouchBlockXPos                     ;;F4A4|F504+F504/F4F4\F4F4;
                      LSR A                                     ;;F4A6|F506+F506/F4F6\F4F6;
                      LSR A                                     ;;F4A7|F507+F507/F4F7\F4F7;
                      LSR A                                     ;;F4A8|F508+F508/F4F8\F4F8;
                      LSR A                                     ;;F4A9|F509+F509/F4F9\F4F9;
                      ORA.B !_0                                 ;;F4AA|F50A+F50A/F4FA\F4FA;
                      CLC                                       ;;F4AC|F50C+F50C/F4FC\F4FC;
                      ADC.L DATA_00BA70,X                       ;;F4AD|F50D+F50D/F4FD\F4FD;
                      STA.B !_0                                 ;;F4B1|F511+F511/F501\F501;
                      LDA.B !TouchBlockYPos+1                   ;;F4B3|F513+F513/F503\F503;
                      ADC.L DATA_00BAAC,X                       ;;F4B5|F515+F515/F505\F505;
                      BRA CODE_00F4CD                           ;;F4B9|F519+F519/F509\F509;
                                                                ;;                        ;
CODE_00F51B:          LDA.B !TouchBlockXPos+1                   ;;F4BB|F51B+F51B/F50B\F50B;
                      CMP.B #$02                                ;;F4BD|F51D+F51D/F50D\F50D;
                      BCS CODE_00F4E7                           ;;F4BF|F51F+F51F/F50F\F50F;
                      LDX.B !TouchBlockYPos+1                   ;;F4C1|F521+F521/F511\F511;
                      CPX.B #$0E                                ;;F4C3|F523+F523/F513\F513;
                      BCS CODE_00F4E7                           ;;F4C5|F525+F525/F515\F515;
                      LDA.B !TouchBlockYPos                     ;;F4C7|F527+F527/F517\F517;
                      AND.B #$F0                                ;;F4C9|F529+F529/F519\F519;
                      STA.B !_0                                 ;;F4CB|F52B+F52B/F51B\F51B;
                      LDA.B !TouchBlockXPos                     ;;F4CD|F52D+F52D/F51D\F51D;
                      LSR A                                     ;;F4CF|F52F+F52F/F51F\F51F;
                      LSR A                                     ;;F4D0|F530+F530/F520\F520;
                      LSR A                                     ;;F4D1|F531+F531/F521\F521;
                      LSR A                                     ;;F4D2|F532+F532/F522\F522;
                      ORA.B !_0                                 ;;F4D3|F533+F533/F523\F523;
                      CLC                                       ;;F4D5|F535+F535/F525\F525;
                      ADC.L DATA_00BA8E,X                       ;;F4D6|F536+F536/F526\F526;
                      STA.B !_0                                 ;;F4DA|F53A+F53A/F52A\F52A;
                      LDA.B !TouchBlockXPos+1                   ;;F4DC|F53C+F53C/F52C\F52C;
                      ADC.L DATA_00BACA,X                       ;;F4DE|F53E+F53E/F52E\F52E;
                      JMP CODE_00F4CD                           ;;F4E2|F542+F542/F532\F532;
                                                                ;;                        ;
CODE_00F545:          TAY                                       ;;F4E5|F545+F545/F535\F535;
                      BNE CODE_00F577                           ;;F4E6|F546+F546/F536\F536;
                      LDY.W !Map16TileNumber                    ;;F4E8|F548+F548/F538\F538; Load MAP16 tile number 
                      CPY.B #$29                                ;;F4EB|F54B+F54B/F53B\F53B; \ If block isn't "Invisible POW ? block", 
                      BNE PSwitchNotInvQBlk                     ;;F4ED|F54D+F54D/F53D\F53D; / branch to PSwitchNotInvQBlk 
                      LDY.W !BluePSwitchTimer                   ;;F4EF|F54F+F54F/F53F\F53F;
                      BEQ Return00F594                          ;;F4F2|F552+F552/F542\F542;
                      LDA.B #$24                                ;;F4F4|F554+F554/F544\F544;
                      STA.W !Map16TileNumber                    ;;F4F6|F556+F556/F546\F546;
                      RTL                                       ;;F4F9|F559+F559/F549\F549; Return 
                                                                ;;                        ;
PSwitchNotInvQBlk:    CPY.B #$2B                                ;;F4FA|F55A+F55A/F54A\F54A; \ If block is "Coin", 
                      BEQ PSwitchCoinBrown                      ;;F4FC|F55C+F55C/F54C\F54C; / branch to PSwitchCoinBrown 
                      TYA                                       ;;F4FE|F55E+F55E/F54E\F54E;
                      SEC                                       ;;F4FF|F55F+F55F/F54F\F54F;
                      SBC.B #$EC                                ;;F500|F560+F560/F550\F550;
                      CMP.B #$10                                ;;F502|F562+F562/F552\F552;
                      BCS CODE_00F592                           ;;F504|F564+F564/F554\F554;
                      INC A                                     ;;F506|F566+F566/F556\F556;
                      STA.W !SwitchPalacePressed                ;;F507|F567+F567/F557\F557;
                      BRA CODE_00F571                           ;;F50A|F56A+F56A/F55A\F55A;
                                                                ;;                        ;
PSwitchCoinBrown:     LDY.W !BluePSwitchTimer                   ;;F50C|F56C+F56C/F55C\F55C;
                      BEQ Return00F594                          ;;F50F|F56F+F56F/F55F\F55F;
CODE_00F571:          LDA.B #$32                                ;;F511|F571+F571/F561\F561;
                      STA.W !Map16TileNumber                    ;;F513|F573+F573/F563\F563;
                      RTL                                       ;;F516|F576+F576/F566\F566; Return 
                                                                ;;                        ;
CODE_00F577:          LDY.W !Map16TileNumber                    ;;F517|F577+F577/F567\F567;
                      CPY.B #$32                                ;;F51A|F57A+F57A/F56A\F56A;
                      BNE CODE_00F584                           ;;F51C|F57C+F57C/F56C\F56C;
                      LDY.W !BluePSwitchTimer                   ;;F51E|F57E+F57E/F56E\F56E;
                      BNE CODE_00F58D                           ;;F521|F581+F581/F571\F571;
                      RTL                                       ;;F523|F583+F583/F573\F573; Return 
                                                                ;;                        ;
CODE_00F584:          CPY.B #$2F                                ;;F524|F584+F584/F574\F574;
                      BNE Return00F594                          ;;F526|F586+F586/F576\F576;
                      LDY.W !SilverPSwitchTimer                 ;;F528|F588+F588/F578\F578;
                      BEQ Return00F594                          ;;F52B|F58B+F58B/F57B\F57B;
CODE_00F58D:          LDY.B #$2B                                ;;F52D|F58D+F58D/F57D\F57D;
                      STY.W !Map16TileNumber                    ;;F52F|F58F+F58F/F57F\F57F;
CODE_00F592:          LDA.B #$00                                ;;F532|F592+F592/F582\F582;
Return00F594:         RTL                                       ;;F534|F594+F594/F584\F584; Return 
                                                                ;;                        ;
CODE_00F595:          REP #$20                                  ;;F535|F595+F595/F585\F585; Accum (16 bit) 
                      LDA.W #$FF80                              ;;F537|F597+F597/F587\F587;
                      CLC                                       ;;F53A|F59A+F59A/F58A\F58A;
                      ADC.B !Layer1YPos                         ;;F53B|F59B+F59B/F58B\F58B;
                      CMP.B !PlayerYPosNext                     ;;F53D|F59D+F59D/F58D\F58D;
                      BMI +                                     ;;F53F|F59F+F59F/F58F\F58F;
                      STA.B !PlayerYPosNext                     ;;F541|F5A1+F5A1/F591\F591;
                    + SEP #$20                                  ;;F543|F5A3+F5A3/F593\F593; Accum (8 bit) 
                      LDA.B !PlayerYPosScrRel+1                 ;;F545|F5A5+F5A5/F595\F595;
                      DEC A                                     ;;F547|F5A7+F5A7/F597\F597;
                      BMI Return00F5B6                          ;;F548|F5A8+F5A8/F598\F598;
                      LDA.W !YoshiHeavenFlag                    ;;F54A|F5AA+F5AA/F59A\F59A;
                      BEQ +                                     ;;F54D|F5AD+F5AD/F59D\F59D;
                      JMP CODE_00C95B                           ;;F54F|F5AF+F5AF/F59F\F59F;
                                                                ;;                        ;
                    + JSL CODE_00F60A                           ;;F552|F5B2+F5B2/F5A2\F5A2;
Return00F5B6:         RTS                                       ;;F556|F5B6+F5B6/F5A6\F5A6; Return 
                                                                ;;                        ;
HurtMario:            LDA.B !PlayerAnimation                    ;;F557|F5B7+F5B7/F5A7\F5A7; \ Return if animation sequence activated 
                      BNE Return00F628                          ;;F559|F5B9+F5B9/F5A9\F5A9; / 
                      LDA.W !IFrameTimer                        ;;F55B|F5BB+F5BB/F5AB\F5AB; \ If flashing... 
                      ORA.W !InvinsibilityTimer                 ;;F55E|F5BE+F5BE/F5AE\F5AE;  | ...or have star... 
                      ORA.W !EndLevelTimer                      ;;F561|F5C1+F5C1/F5B1\F5B1;  | ...or level ending... 
                      BNE Return00F628                          ;;F564|F5C4+F5C4/F5B4\F5B4; / ...return 
                      STZ.W !GameCloudCoinCount                 ;;F566|F5C6+F5C6/F5B6\F5B6;
                      LDA.W !WallrunningType                    ;;F569|F5C9+F5C9/F5B9\F5B9;
                      BEQ +                                     ;;F56C|F5CC+F5CC/F5BC\F5BC;
                      PHB                                       ;;F56E|F5CE+F5CE/F5BE\F5BE;
                      PHK                                       ;;F56F|F5CF+F5CF/F5BF\F5BF;
                      PLB                                       ;;F570|F5D0+F5D0/F5C0\F5C0;
                      JSR ADDR_00EB42                           ;;F571|F5D1+F5D1/F5C1\F5C1;
                      PLB                                       ;;F574|F5D4+F5D4/F5C4\F5C4;
                    + LDA.B !Powerup                            ;;F575|F5D5+F5D5/F5C5\F5C5; \ If Mario is small, kill him 
                      BEQ KillMario                             ;;F577|F5D7+F5D7/F5C7\F5C7; / 
                      CMP.B #$02                                ;;F579|F5D9+F5D9/F5C9\F5C9; \ Branch if not Caped Mario 
                      BNE PowerDown                             ;;F57B|F5DB+F5DB/F5CB\F5CB; / 
                      LDA.W !FlightPhase                        ;;F57D|F5DD+F5DD/F5CD\F5CD; \ Branch if not soaring 
                      BEQ PowerDown                             ;;F580|F5E0+F5E0/F5D0\F5D0; / 
                      LDY.B #!SFX_FLYHIT                        ;;F582|F5E2+F5E2/F5D2\F5D2; \ Break Mario out of soaring 
                      STY.W !SPCIO0                             ;;F584|F5E4+F5E4/F5D4\F5D4;  | (Play sound effect) 
                      LDA.B #$01                                ;;F587|F5E7+F5E7/F5D7\F5D7;  | (Set spin jump flag) 
                      STA.W !SpinJumpFlag                       ;;F589|F5E9+F5E9/F5D9\F5D9;  | 
                      LDA.B #$30                                ;;F58C|F5EC+F5EC/F5DC\F5DC;  | (Set flashing timer) 
                      STA.W !IFrameTimer                        ;;F58E|F5EE+F5EE/F5DE\F5DE; / 
                      BRA CODE_00F622                           ;;F591|F5F1+F5F1/F5E1\F5E1;
                                                                ;;                        ;
PowerDown:            LDY.B #!SFX_PIPE                          ;;F593|F5F3+F5F3/F5E3\F5E3; \ Play sound effect 
                      STY.W !SPCIO0                             ;;F595|F5F5+F5F5/F5E5\F5E5; / 
                      JSL CODE_028008                           ;;F598|F5F8+F5F8/F5E8\F5E8;
                      LDA.B #$01                                ;;F59C|F5FC+F5FC/F5EC\F5EC; \ Set power down animation 
                      STA.B !PlayerAnimation                    ;;F59E|F5FE+F5FE/F5EE\F5EE; / 
                      STZ.B !Powerup                            ;;F5A0|F600+F600/F5F0\F5F0; Mario status = Small 
                      LDA.B #$2F                                ;;F5A2|F602+F602/F5F2\F5F2;
                      BRA +                                     ;;F5A4|F604+F604/F5F4\F5F4;
                                                                ;;                        ;
KillMario:            LDA.B #$90                                ;;F5A6|F606+F606/F5F6\F5F6; \ Mario Y speed = #$90 
                      STA.B !PlayerYSpeed                       ;;F5A8|F608+F608/F5F8\F5F8; / 
CODE_00F60A:          LDA.B #!BGM_DEATH                         ;;F5AA|F60A+F60A/F5FA\F5FA; \ 
                      STA.W !SPCIO2                             ;;F5AC|F60C+F60C/F5FC\F5FC; / Change music 
                      LDA.B #$FF                                ;;F5AF|F60F+F60F/F5FF\F5FF;
                      STA.W !MusicBackup                        ;;F5B1|F611+F611/F601\F601;
                      LDA.B #$09                                ;;F5B4|F614+F614/F604\F604; \ Animation sequence = Kill Mario 
                      STA.B !PlayerAnimation                    ;;F5B6|F616+F616/F606\F606; / 
                      STZ.W !SpinJumpFlag                       ;;F5B8|F618+F618/F608\F608; Spin jump flag = 0 
                      LDA.B #$30                                ;;F5BB|F61B+F61B/F60B\F60B;
                    + STA.W !PlayerAniTimer                     ;;F5BD|F61D+F61D/F60D\F60D; Set hurt frame timer 
                      STA.B !SpriteLock                         ;;F5C0|F620+F620/F610\F610; set lock sprite timer 
CODE_00F622:          STZ.W !FlightPhase                        ;;F5C2|F622+F622/F612\F612; Cape status = 0 
                      STZ.W !Empty188A                          ;;F5C5|F625+F625/F615\F615;
Return00F628:         RTL                                       ;;F5C8|F628+F628/F618\F618; Return 
                                                                ;;                        ;
CODE_00F629:          JSL KillMario                             ;;F5C9|F629+F629/F619\F619;
NoButtons:            STZ.B !byetudlrHold                       ;;F5CD|F62D+F62D/F61D\F61D; Zero RAM mirrors for controller Input 
                      STZ.B !byetudlrFrame                      ;;F5CF|F62F+F62F/F61F\F61F;
                      STZ.B !axlr0000Hold                       ;;F5D1|F631+F631/F621\F621;
                      STZ.B !axlr0000Frame                      ;;F5D3|F633+F633/F623\F623;
                      RTS                                       ;;F5D5|F635+F635/F625\F625; Return 
                                                                ;;                        ;
CODE_00F636:          REP #$20                                  ;;F5D6|F636+F636/F626\F626; Accum (16 bit) 
                      LDX.B #$00                                ;;F5D8|F638+F638/F628\F628;
                      LDA.B !_9                                 ;;F5DA|F63A+F63A/F62A\F62A;
                      ORA.W #$0800                              ;;F5DC|F63C+F63C/F62C\F62C;
                      CMP.B !_9                                 ;;F5DF|F63F+F63F/F62F\F62F;
                      BEQ +                                     ;;F5E1|F641+F641/F631\F631;
                      CLC                                       ;;F5E3|F643+F643/F633\F633;
                    + AND.W #$F700                              ;;F5E4|F644+F644/F634\F634;
                      ROR A                                     ;;F5E7|F647+F647/F637\F637;
                      LSR A                                     ;;F5E8|F648+F648/F638\F638;
                      ADC.W #$2000                              ;;F5E9|F649+F649/F639\F639;
                      STA.W !DynGfxTilePtr                      ;;F5EC|F64C+F64C/F63C\F63C;
                      CLC                                       ;;F5EF|F64F+F64F/F63F\F63F;
                      ADC.W #$0200                              ;;F5F0|F650+F650/F640\F640;
                      STA.W !DynGfxTilePtr+$0A                  ;;F5F3|F653+F653/F643\F643;
                      LDX.B #$00                                ;;F5F6|F656+F656/F646\F646;
                      LDA.B !_A                                 ;;F5F8|F658+F658/F648\F648;
                      ORA.W #$0800                              ;;F5FA|F65A+F65A/F64A\F64A;
                      CMP.B !_A                                 ;;F5FD|F65D+F65D/F64D\F64D;
                      BEQ +                                     ;;F5FF|F65F+F65F/F64F\F64F;
                      CLC                                       ;;F601|F661+F661/F651\F651;
                    + AND.W #$F700                              ;;F602|F662+F662/F652\F652;
                      ROR A                                     ;;F605|F665+F665/F655\F655;
                      LSR A                                     ;;F606|F666+F666/F656\F656;
                      ADC.W #$2000                              ;;F607|F667+F667/F657\F657;
                      STA.W !DynGfxTilePtr+2                    ;;F60A|F66A+F66A/F65A\F65A;
                      CLC                                       ;;F60D|F66D+F66D/F65D\F65D;
                      ADC.W #$0200                              ;;F60E|F66E+F66E/F65E\F65E;
                      STA.W !DynGfxTilePtr+$0C                  ;;F611|F671+F671/F661\F661;
                      LDA.B !_B                                 ;;F614|F674+F674/F664\F664;
                      AND.W #$FF00                              ;;F616|F676+F676/F666\F666;
                      LSR A                                     ;;F619|F679+F679/F669\F669;
                      LSR A                                     ;;F61A|F67A+F67A/F66A\F66A;
                      LSR A                                     ;;F61B|F67B+F67B/F66B\F66B;
                      ADC.W #$2000                              ;;F61C|F67C+F67C/F66C\F66C;
                      STA.W !DynGfxTilePtr+4                    ;;F61F|F67F+F67F/F66F\F66F;
                      CLC                                       ;;F622|F682+F682/F672\F672;
                      ADC.W #$0200                              ;;F623|F683+F683/F673\F673;
                      STA.W !DynGfxTilePtr+$0E                  ;;F626|F686+F686/F676\F676;
                      LDA.B !_C                                 ;;F629|F689+F689/F679\F679;
                      AND.W #$FF00                              ;;F62B|F68B+F68B/F67B\F67B;
                      LSR A                                     ;;F62E|F68E+F68E/F67E\F67E;
                      LSR A                                     ;;F62F|F68F+F68F/F67F\F67F;
                      LSR A                                     ;;F630|F690+F690/F680\F680;
                      ADC.W #$2000                              ;;F631|F691+F691/F681\F681;
                      STA.W !DynGfxTile7FPtr                    ;;F634|F694+F694/F684\F684;
                      SEP #$20                                  ;;F637|F697+F697/F687\F687; Accum (8 bit) 
                      LDA.B #$0A                                ;;F639|F699+F699/F689\F689;
                      STA.W !PlayerGfxTileCount                 ;;F63B|F69B+F69B/F68B\F68B;
                      RTS                                       ;;F63E|F69E+F69E/F68E\F68E; Return 
                                                                ;;                        ;
                                                                ;;                        ;
DATA_00F69F:          db $64,$00,$7C,$00                        ;;F63F|F69F+F69F/F68F\F68F;
                                                                ;;                        ;
DATA_00F6A3:          db $00,$00,$FF,$FF                        ;;F643|F6A3+F6A3/F693\F693;
                                                                ;;                        ;
DATA_00F6A7:          db $FD,$FF,$05,$00,$FA,$FF                ;;F647|F6A7+F6A7/F697\F697;
                                                                ;;                        ;
DATA_00F6AD:          db $00,$00,$00,$00,$C0,$00                ;;F64D|F6AD+F6AD/F69D\F69D;
                                                                ;;                        ;
DATA_00F6B3:          db $90,$00,$60,$00,$00,$00,$00,$00        ;;F653|F6B3+F6B3/F6A3\F6A3;
                      db $00,$00,$00,$00                        ;;F65B|F6BB+F6BB/F6AB\F6AB;
                                                                ;;                        ;
DATA_00F6BF:          db $00,$00,$FE,$FF,$02,$00,$00,$00        ;;F65F|F6BF+F6BF/F6AF\F6AF;
                      db $FE,$FF,$02,$00                        ;;F667|F6C7+F6C7/F6B7\F6B7;
                                                                ;;                        ;
DATA_00F6CB:          db $00,$00,$20,$00                        ;;F66B|F6CB+F6CB/F6BB\F6BB;
                                                                ;;                        ;
DATA_00F6CF:          db $D0,$00,$00,$00,$20,$00,$D0,$00        ;;F66F|F6CF+F6CF/F6BF\F6BF;
                      db $01,$00,$FF,$FF                        ;;F677|F6D7+F6D7/F6C7\F6C7;
                                                                ;;                        ;
CODE_00F6DB:          PHB                                       ;;F67B|F6DB+F6DB/F6CB\F6CB;
                      PHK                                       ;;F67C|F6DC+F6DC/F6CC\F6CC;
                      PLB                                       ;;F67D|F6DD+F6DD/F6CD\F6CD;
                      REP #$20                                  ;;F67E|F6DE+F6DE/F6CE\F6CE; Accum (16 bit) 
                      LDA.W !CameraMoveTrigger                  ;;F680|F6E0+F6E0/F6D0\F6D0;
                      SEC                                       ;;F683|F6E3+F6E3/F6D3\F6D3;
                      SBC.W #$000C                              ;;F684|F6E4+F6E4/F6D4\F6D4;
                      STA.W !CameraLeftBuffer                   ;;F687|F6E7+F6E7/F6D7\F6D7;
                      CLC                                       ;;F68A|F6EA+F6EA/F6DA\F6DA;
                      ADC.W #$0018                              ;;F68B|F6EB+F6EB/F6DB\F6DB;
                      STA.W !CameraRightBuffer                  ;;F68E|F6EE+F6EE/F6DE\F6DE;
                      LDA.W !NextLayer1XPos                     ;;F691|F6F1+F6F1/F6E1\F6E1;
                      STA.B !Layer1XPos                         ;;F694|F6F4+F6F4/F6E4\F6E4;
                      LDA.W !NextLayer1YPos                     ;;F696|F6F6+F6F6/F6E6\F6E6;
                      STA.B !Layer1YPos                         ;;F699|F6F9+F6F9/F6E9\F6E9;
                      LDA.W !NextLayer2XPos                     ;;F69B|F6FB+F6FB/F6EB\F6EB;
                      STA.B !Layer2XPos                         ;;F69E|F6FE+F6FE/F6EE\F6EE;
                      LDA.W !NextLayer2YPos                     ;;F6A0|F700+F700/F6F0\F6F0;
                      STA.B !Layer2YPos                         ;;F6A3|F703+F703/F6F3\F6F3;
                      LDA.B !ScreenMode                         ;;F6A5|F705+F705/F6F5\F6F5;
                      LSR A                                     ;;F6A7|F707+F707/F6F7\F6F7;
                      BCC +                                     ;;F6A8|F708+F708/F6F8\F6F8;
                      JMP CODE_00F75C                           ;;F6AA|F70A+F70A/F6FA\F6FA;
                                                                ;;                        ;
                    + LDA.W #$00C0                              ;;F6AD|F70D+F70D/F6FD\F6FD;
                      JSR CODE_00F7F4                           ;;F6B0|F710+F710/F700\F700;
                      LDY.W !HorizLayer1Setting                 ;;F6B3|F713+F713/F703\F703;
                      BEQ CODE_00F75A                           ;;F6B6|F716+F716/F706\F706;
                      LDY.B #$02                                ;;F6B8|F718+F718/F708\F708;
                      LDA.B !PlayerXPosNext                     ;;F6BA|F71A+F71A/F70A\F70A;
                      SEC                                       ;;F6BC|F71C+F71C/F70C\F70C;
                      SBC.B !Layer1XPos                         ;;F6BD|F71D+F71D/F70D\F70D;
                      STA.B !_0                                 ;;F6BF|F71F+F71F/F70F\F70F;
                      CMP.W !CameraMoveTrigger                  ;;F6C1|F721+F721/F711\F711;
                      BPL +                                     ;;F6C4|F724+F724/F714\F714;
                      LDY.B #$00                                ;;F6C6|F726+F726/F716\F716;
                    + STY.B !Layer1ScrollDir                    ;;F6C8|F728+F728/F718\F718;
                      STY.B !Layer2ScrollDir                    ;;F6CA|F72A+F72A/F71A\F71A;
                      SEC                                       ;;F6CC|F72C+F72C/F71C\F71C;
                      SBC.W !CameraLeftBuffer,Y                 ;;F6CD|F72D+F72D/F71D\F71D;
                      BEQ CODE_00F75A                           ;;F6D0|F730+F730/F720\F720;
                      STA.B !_2                                 ;;F6D2|F732+F732/F722\F722;
                      EOR.W DATA_00F6A3,Y                       ;;F6D4|F734+F734/F724\F724;
                      BPL CODE_00F75A                           ;;F6D7|F737+F737/F727\F727;
                      JSR CODE_00F8AB                           ;;F6D9|F739+F739/F729\F729;
                      LDA.B !_2                                 ;;F6DC|F73C+F73C/F72C\F72C;
                      CLC                                       ;;F6DE|F73E+F73E/F72E\F72E;
                      ADC.B !Layer1XPos                         ;;F6DF|F73F+F73F/F72F\F72F;
                      BPL +                                     ;;F6E1|F741+F741/F731\F731;
                      LDA.W #$0000                              ;;F6E3|F743+F743/F733\F733;
                    + STA.B !Layer1XPos                         ;;F6E6|F746+F746/F736\F736;
                      LDA.B !LastScreenHoriz                    ;;F6E8|F748+F748/F738\F738;
                      DEC A                                     ;;F6EA|F74A+F74A/F73A\F73A;
                      XBA                                       ;;F6EB|F74B+F74B/F73B\F73B;
                      AND.W #$FF00                              ;;F6EC|F74C+F74C/F73C\F73C;
                      BPL +                                     ;;F6EF|F74F+F74F/F73F\F73F;
                      LDA.W #$0080                              ;;F6F1|F751+F751/F741\F741;
                    + CMP.B !Layer1XPos                         ;;F6F4|F754+F754/F744\F744;
                      BPL CODE_00F75A                           ;;F6F6|F756+F756/F746\F746;
                      STA.B !Layer1XPos                         ;;F6F8|F758+F758/F748\F748;
CODE_00F75A:          BRA CODE_00F79D                           ;;F6FA|F75A+F75A/F74A\F74A;
                                                                ;;                        ;
CODE_00F75C:          LDA.B !LastScreenVert                     ;;F6FC|F75C+F75C/F74C\F74C;
                      DEC A                                     ;;F6FE|F75E+F75E/F74E\F74E;
                      XBA                                       ;;F6FF|F75F+F75F/F74F\F74F;
                      AND.W #$FF00                              ;;F700|F760+F760/F750\F750;
                      JSR CODE_00F7F4                           ;;F703|F763+F763/F753\F753;
                      LDY.W !HorizLayer1Setting                 ;;F706|F766+F766/F756\F756;
                      BEQ CODE_00F79D                           ;;F709|F769+F769/F759\F759;
                      LDY.B #$00                                ;;F70B|F76B+F76B/F75B\F75B;
                      LDA.B !PlayerXPosNext                     ;;F70D|F76D+F76D/F75D\F75D;
                      SEC                                       ;;F70F|F76F+F76F/F75F\F75F;
                      SBC.B !Layer1XPos                         ;;F710|F770+F770/F760\F760;
                      STA.B !_0                                 ;;F712|F772+F772/F762\F762;
                      CMP.W !CameraMoveTrigger                  ;;F714|F774+F774/F764\F764;
                      BMI +                                     ;;F717|F777+F777/F767\F767;
                      LDY.B #$02                                ;;F719|F779+F779/F769\F769;
                    + SEC                                       ;;F71B|F77B+F77B/F76B\F76B;
                      SBC.W !CameraLeftBuffer,Y                 ;;F71C|F77C+F77C/F76C\F76C;
                      STA.B !_2                                 ;;F71F|F77F+F77F/F76F\F76F;
                      EOR.W DATA_00F6A3,Y                       ;;F721|F781+F781/F771\F771;
                      BPL CODE_00F79D                           ;;F724|F784+F784/F774\F774;
                      JSR CODE_00F8AB                           ;;F726|F786+F786/F776\F776;
                      LDA.B !_2                                 ;;F729|F789+F789/F779\F779;
                      CLC                                       ;;F72B|F78B+F78B/F77B\F77B;
                      ADC.B !Layer1XPos                         ;;F72C|F78C+F78C/F77C\F77C;
                      BPL +                                     ;;F72E|F78E+F78E/F77E\F77E;
                      LDA.W #$0000                              ;;F730|F790+F790/F780\F780;
                    + CMP.W #$0101                              ;;F733|F793+F793/F783\F783;
                      BMI +                                     ;;F736|F796+F796/F786\F786;
                      LDA.W #$0100                              ;;F738|F798+F798/F788\F788;
                    + STA.B !Layer1XPos                         ;;F73B|F79B+F79B/F78B\F78B;
CODE_00F79D:          LDY.W !HorizLayer2Setting                 ;;F73D|F79D+F79D/F78D\F78D;
                      BEQ CODE_00F7AA                           ;;F740|F7A0+F7A0/F790\F790;
                      LDA.B !Layer1XPos                         ;;F742|F7A2+F7A2/F792\F792;
                      DEY                                       ;;F744|F7A4+F7A4/F794\F794;
                      BEQ +                                     ;;F745|F7A5+F7A5/F795\F795;
                      LSR A                                     ;;F747|F7A7+F7A7/F797\F797;
                    + STA.B !Layer2XPos                         ;;F748|F7A8+F7A8/F798\F798;
CODE_00F7AA:          LDY.W !VertLayer2Setting                  ;;F74A|F7AA+F7AA/F79A\F79A;
                      BEQ CODE_00F7C2                           ;;F74D|F7AD+F7AD/F79D\F79D;
                      LDA.B !Layer1YPos                         ;;F74F|F7AF+F7AF/F79F\F79F;
                      DEY                                       ;;F751|F7B1+F7B1/F7A1\F7A1;
                      BEQ +                                     ;;F752|F7B2+F7B2/F7A2\F7A2;
                      LSR A                                     ;;F754|F7B4+F7B4/F7A4\F7A4;
                      DEY                                       ;;F755|F7B5+F7B5/F7A5\F7A5;
                      BEQ +                                     ;;F756|F7B6+F7B6/F7A6\F7A6;
                      LSR A                                     ;;F758|F7B8+F7B8/F7A8\F7A8;
                      LSR A                                     ;;F759|F7B9+F7B9/F7A9\F7A9;
                      LSR A                                     ;;F75A|F7BA+F7BA/F7AA\F7AA;
                      LSR A                                     ;;F75B|F7BB+F7BB/F7AB\F7AB;
                    + CLC                                       ;;F75C|F7BC+F7BC/F7AC\F7AC;
                      ADC.W !BackgroundVertOffset               ;;F75D|F7BD+F7BD/F7AD\F7AD;
                      STA.B !Layer2YPos                         ;;F760|F7C0+F7C0/F7B0\F7B0;
CODE_00F7C2:          SEP #$20                                  ;;F762|F7C2+F7C2/F7B2\F7B2; Accum (8 bit) 
                      LDA.B !Layer1XPos                         ;;F764|F7C4+F7C4/F7B4\F7B4;
                      SEC                                       ;;F766|F7C6+F7C6/F7B6\F7B6;
                      SBC.W !NextLayer1XPos                     ;;F767|F7C7+F7C7/F7B7\F7B7;
                      STA.W !Layer1DXPos                        ;;F76A|F7CA+F7CA/F7BA\F7BA;
                      LDA.B !Layer1YPos                         ;;F76D|F7CD+F7CD/F7BD\F7BD;
                      SEC                                       ;;F76F|F7CF+F7CF/F7BF\F7BF;
                      SBC.W !NextLayer1YPos                     ;;F770|F7D0+F7D0/F7C0\F7C0;
                      STA.W !Layer1DYPos                        ;;F773|F7D3+F7D3/F7C3\F7C3;
                      LDA.B !Layer2XPos                         ;;F776|F7D6+F7D6/F7C6\F7C6;
                      SEC                                       ;;F778|F7D8+F7D8/F7C8\F7C8;
                      SBC.W !NextLayer2XPos                     ;;F779|F7D9+F7D9/F7C9\F7C9;
                      STA.W !Layer2DXPos                        ;;F77C|F7DC+F7DC/F7CC\F7CC;
                      LDA.B !Layer2YPos                         ;;F77F|F7DF+F7DF/F7CF\F7CF;
                      SEC                                       ;;F781|F7E1+F7E1/F7D1\F7D1;
                      SBC.W !NextLayer2YPos                     ;;F782|F7E2+F7E2/F7D2\F7D2;
                      STA.W !Layer2DYPos                        ;;F785|F7E5+F7E5/F7D5\F7D5;
                      LDX.B #$07                                ;;F788|F7E8+F7E8/F7D8\F7D8;
                    - LDA.B !Layer1XPos,X                       ;;F78A|F7EA+F7EA/F7DA\F7DA;
                      STA.W !NextLayer1XPos,X                   ;;F78C|F7EC+F7EC/F7DC\F7DC;
                      DEX                                       ;;F78F|F7EF+F7EF/F7DF\F7DF;
                      BPL -                                     ;;F790|F7F0+F7F0/F7E0\F7E0;
                      PLB                                       ;;F792|F7F2+F7F2/F7E2\F7E2;
                      RTL                                       ;;F793|F7F3+F7F3/F7E3\F7E3; Return 
                                                                ;;                        ;
CODE_00F7F4:          LDX.W !VertLayer1Setting                  ;;F794|F7F4+F7F4/F7E4\F7E4;
                      BNE +                                     ;;F797|F7F7+F7F7/F7E7\F7E7;
                      RTS                                       ;;F799|F7F9+F7F9/F7E9\F7E9; Return 
                                                                ;;                        ;
                    + STA.B !_4                                 ;;F79A|F7FA+F7FA/F7EA\F7EA; Accum (16 bit) 
                      LDY.B #$00                                ;;F79C|F7FC+F7FC/F7EC\F7EC;
                      LDA.B !PlayerYPosNext                     ;;F79E|F7FE+F7FE/F7EE\F7EE;
                      SEC                                       ;;F7A0|F800+F800/F7F0\F7F0;
                      SBC.B !Layer1YPos                         ;;F7A1|F801+F801/F7F1\F7F1;
                      STA.B !_0                                 ;;F7A3|F803+F803/F7F3\F7F3;
                      CMP.W #$0070                              ;;F7A5|F805+F805/F7F5\F7F5;
                      BMI +                                     ;;F7A8|F808+F808/F7F8\F7F8;
                      LDY.B #$02                                ;;F7AA|F80A+F80A/F7FA\F7FA;
                    + STY.B !Layer1ScrollDir                    ;;F7AC|F80C+F80C/F7FC\F7FC;
                      STY.B !Layer2ScrollDir                    ;;F7AE|F80E+F80E/F7FE\F7FE;
                      SEC                                       ;;F7B0|F810+F810/F800\F800;
                      SBC.W DATA_00F69F,Y                       ;;F7B1|F811+F811/F801\F801;
                      STA.B !_2                                 ;;F7B4|F814+F814/F804\F804;
                      EOR.W DATA_00F6A3,Y                       ;;F7B6|F816+F816/F806\F806;
                      BMI +                                     ;;F7B9|F819+F819/F809\F809;
                      LDY.B #$02                                ;;F7BB|F81B+F81B/F80B\F80B;
                      STZ.B !_2                                 ;;F7BD|F81D+F81D/F80D\F80D;
                    + LDA.B !_2                                 ;;F7BF|F81F+F81F/F80F\F80F;
                      BMI CODE_00F82A                           ;;F7C1|F821+F821/F811\F811;
                      LDX.B #$00                                ;;F7C3|F823+F823/F813\F813;
                      STX.W !ScreenScrollAtWill                 ;;F7C5|F825+F825/F815\F815;
                      BRA CODE_00F883                           ;;F7C8|F828+F828/F818\F818;
                                                                ;;                        ;
CODE_00F82A:          SEP #$20                                  ;;F7CA|F82A+F82A/F81A\F81A; Accum (8 bit) 
                      LDA.W !WallrunningType                    ;;F7CC|F82C+F82C/F81C\F81C;
                      CMP.B #$06                                ;;F7CF|F82F+F82F/F81F\F81F;
                      BCS +                                     ;;F7D1|F831+F831/F821\F821;
                      LDA.W !YoshiHasWingsGfx                   ;;F7D3|F833+F833/F823\F823; \ If winged Yoshi... 
                      LSR A                                     ;;F7D6|F836+F836/F826\F826;  | 
                      ORA.W !TakeoffTimer                       ;;F7D7|F837+F837/F827\F827;
                      ORA.B !PlayerIsClimbing                   ;;F7DA|F83A+F83A/F82A\F82A;  | ...or climbing 
                      ORA.W !PBalloonInflating                  ;;F7DC|F83C+F83C/F82C\F82C;
                      ORA.W !PlayerInCloud                      ;;F7DF|F83F+F83F/F82F\F82F;
                      ORA.W !BouncingOnBoard                    ;;F7E2|F842+F842/F832\F832;
                    + TAX                                       ;;F7E5|F845+F845/F835\F835;
                      REP #$20                                  ;;F7E6|F846+F846/F836\F836; Accum (16 bit) 
                      BNE CODE_00F869                           ;;F7E8|F848+F848/F838\F838;
                      LDX.W !PlayerRidingYoshi                  ;;F7EA|F84A+F84A/F83A\F83A;
                      BEQ CODE_00F856                           ;;F7ED|F84D+F84D/F83D\F83D;
                      LDX.W !YoshiHasWingsEvt                   ;;F7EF|F84F+F84F/F83F\F83F; \ Branch if 141E >= #$02 
                      CPX.B #$02                                ;;F7F2|F852+F852/F842\F842;  | 
                      BCS CODE_00F869                           ;;F7F4|F854+F854/F844\F844; / 
CODE_00F856:          LDX.B !PlayerInWater                      ;;F7F6|F856+F856/F846\F846;
                      BEQ CODE_00F85E                           ;;F7F8|F858+F858/F848\F848;
                      LDX.B !PlayerInAir                        ;;F7FA|F85A+F85A/F84A\F84A;
                      BNE CODE_00F869                           ;;F7FC|F85C+F85C/F84C\F84C;
CODE_00F85E:          LDX.W !VertLayer1Setting                  ;;F7FE|F85E+F85E/F84E\F84E;
                      DEX                                       ;;F801|F861+F861/F851\F851;
                      BEQ CODE_00F875                           ;;F802|F862+F862/F852\F852;
                      LDX.W !VerticalScrollEnabled              ;;F804|F864+F864/F854\F854;
                      BNE CODE_00F875                           ;;F807|F867+F867/F857\F857;
CODE_00F869:          STX.W !VerticalScrollEnabled              ;;F809|F869+F869/F859\F859;
                      LDX.W !VerticalScrollEnabled              ;;F80C|F86C+F86C/F85C\F85C;
                      BNE CODE_00F881                           ;;F80F|F86F+F86F/F85F\F85F;
                      LDY.B #$04                                ;;F811|F871+F871/F861\F861;
                      BRA CODE_00F881                           ;;F813|F873+F873/F863\F863;
                                                                ;;                        ;
CODE_00F875:          LDX.W !ScreenScrollAtWill                 ;;F815|F875+F875/F865\F865;
                      BNE CODE_00F881                           ;;F818|F878+F878/F868\F868;
                      LDX.B !PlayerInAir                        ;;F81A|F87A+F87A/F86A\F86A;
                      BNE Return00F8AA                          ;;F81C|F87C+F87C/F86C\F86C;
                      INC.W !ScreenScrollAtWill                 ;;F81E|F87E+F87E/F86E\F86E;
CODE_00F881:          LDA.B !_2                                 ;;F821|F881+F881/F871\F871;
CODE_00F883:          SEC                                       ;;F823|F883+F883/F873\F873;
                      SBC.W DATA_00F6A7,Y                       ;;F824|F884+F884/F874\F874;
                      EOR.W DATA_00F6A7,Y                       ;;F827|F887+F887/F877\F877;
                      ASL A                                     ;;F82A|F88A+F88A/F87A\F87A;
                      LDA.B !_2                                 ;;F82B|F88B+F88B/F87B\F87B;
                      BCS +                                     ;;F82D|F88D+F88D/F87D\F87D;
                      LDA.W DATA_00F6A7,Y                       ;;F82F|F88F+F88F/F87F\F87F;
                    + CLC                                       ;;F832|F892+F892/F882\F882;
                      ADC.B !Layer1YPos                         ;;F833|F893+F893/F883\F883;
                      CMP.W DATA_00F6AD,Y                       ;;F835|F895+F895/F885\F885;
                      BPL +                                     ;;F838|F898+F898/F888\F888;
                      LDA.W DATA_00F6AD,Y                       ;;F83A|F89A+F89A/F88A\F88A;
                    + STA.B !Layer1YPos                         ;;F83D|F89D+F89D/F88D\F88D;
                      LDA.B !_4                                 ;;F83F|F89F+F89F/F88F\F88F;
                      CMP.B !Layer1YPos                         ;;F841|F8A1+F8A1/F891\F891;
                      BPL Return00F8AA                          ;;F843|F8A3+F8A3/F893\F893;
                      STA.B !Layer1YPos                         ;;F845|F8A5+F8A5/F895\F895;
                      STZ.W !VerticalScrollEnabled              ;;F847|F8A7+F8A7/F897\F897;
Return00F8AA:         RTS                                       ;;F84A|F8AA+F8AA/F89A\F89A; Return 
                                                                ;;                        ;
CODE_00F8AB:          LDY.W !CameraIsScrolling                  ;;F84B|F8AB+F8AB/F89B\F89B;
                      BNE Return00F8DE                          ;;F84E|F8AE+F8AE/F89E\F89E;
                      SEP #$20                                  ;;F850|F8B0+F8B0/F8A0\F8A0; Accum (8 bit) 
                      LDX.W !CameraScrollPlayerDir              ;;F852|F8B2+F8B2/F8A2\F8A2;
                      REP #$20                                  ;;F855|F8B5+F8B5/F8A5\F8A5; Accum (16 bit) 
                      LDY.B #$08                                ;;F857|F8B7+F8B7/F8A7\F8A7;
                      LDA.W !CameraMoveTrigger                  ;;F859|F8B9+F8B9/F8A9\F8A9;
                      CMP.W DATA_00F6B3,X                       ;;F85C|F8BC+F8BC/F8AC\F8AC;
                      BPL +                                     ;;F85F|F8BF+F8BF/F8AF\F8AF;
                      LDY.B #$0A                                ;;F861|F8C1+F8C1/F8B1\F8B1;
                    + LDA.W DATA_00F6BF,Y                       ;;F863|F8C3+F8C3/F8B3\F8B3;
                      EOR.B !_2                                 ;;F866|F8C6+F8C6/F8B6\F8B6;
                      BPL Return00F8DE                          ;;F868|F8C8+F8C8/F8B8\F8B8;
                      LDA.W DATA_00F6BF,X                       ;;F86A|F8CA+F8CA/F8BA\F8BA;
                      EOR.B !_2                                 ;;F86D|F8CD+F8CD/F8BD\F8BD;
                      BPL Return00F8DE                          ;;F86F|F8CF+F8CF/F8BF\F8BF;
                      LDA.B !_2                                 ;;F871|F8D1+F8D1/F8C1\F8C1;
                      CLC                                       ;;F873|F8D3+F8D3/F8C3\F8C3;
                      ADC.W DATA_00F6CF,Y                       ;;F874|F8D4+F8D4/F8C4\F8C4;
                      BEQ Return00F8DE                          ;;F877|F8D7+F8D7/F8C7\F8C7;
                      STA.B !_2                                 ;;F879|F8D9+F8D9/F8C9\F8C9;
                      STY.W !CameraProperMove                   ;;F87B|F8DB+F8DB/F8CB\F8CB;
Return00F8DE:         RTS                                       ;;F87E|F8DE+F8DE/F8CE\F8CE; Return 
                                                                ;;                        ;
                                                                ;;                        ;
DATA_00F8DF:          db $0C,$0C,$08,$00,$20,$04,$0A,$0D        ;;F87F|F8DF+F8DF/F8CF\F8CF;
                      db $0D                                    ;;F887|F8E7+F8E7/F8D7\F8D7;
                                                                ;;                        ;
DATA_00F8E8:          db $2A,$00,$2A,$00,$12,$00,$00,$00        ;;F888|F8E8+F8E8/F8D8\F8D8;
                      db $ED,$FF                                ;;F890|F8F0+F8F0/F8E0\F8E0;
                                                                ;;                        ;
CODE_00F8F2:          JSR CODE_00EAA6                           ;;F892|F8F2+F8F2/F8E2\F8E2;
                      BIT.W !IRQNMICommand                      ;;F895|F8F5+F8F5/F8E5\F8E5;
                      BVC CODE_00F94E                           ;;F898|F8F8+F8F8/F8E8\F8E8;
                      JSR CODE_00E92B                           ;;F89A|F8FA+F8FA/F8EA\F8EA;
                      LDA.W !ActiveBoss                         ;;F89D|F8FD+F8FD/F8ED\F8ED;
                      ASL A                                     ;;F8A0|F900+F900/F8F0\F8F0;
                      TAX                                       ;;F8A1|F901+F901/F8F1\F8F1;
                      PHX                                       ;;F8A2|F902+F902/F8F2\F8F2;
                      LDY.B !PlayerYSpeed                       ;;F8A3|F903+F903/F8F3\F8F3;
                      BPL +                                     ;;F8A5|F905+F905/F8F5\F8F5;
                      REP #$20                                  ;;F8A7|F907+F907/F8F7\F8F7; Accum (16 bit) 
                      LDA.B !PlayerYPosNext                     ;;F8A9|F909+F909/F8F9\F8F9;
                      CMP.W DATA_00F8E8,X                       ;;F8AB|F90B+F90B/F8FB\F8FB;
                      BPL +                                     ;;F8AE|F90E+F90E/F8FE\F8FE;
                      LDA.W DATA_00F8E8,X                       ;;F8B0|F910+F910/F900\F900;
                      STA.B !PlayerYPosNext                     ;;F8B3|F913+F913/F903\F903;
                      SEP #$20                                  ;;F8B5|F915+F915/F905\F905; Accum (8 bit) 
                      STZ.B !PlayerYSpeed                       ;;F8B7|F917+F917/F907\F907;
                      LDA.B #!SFX_BONK                          ;;F8B9|F919+F919/F909\F909;
                      STA.W !SPCIO0                             ;;F8BB|F91B+F91B/F90B\F90B; / Play sound effect 
                    + SEP #$20                                  ;;F8BE|F91E+F91E/F90E\F90E; Accum (8 bit) 
                      PLX                                       ;;F8C0|F920+F920/F910\F910;
                      LDA.W DATA_00F8E8,X                       ;;F8C1|F921+F921/F911\F911;
                      CMP.B #$2A                                ;;F8C4|F924+F924/F914\F914;
                      BNE Return00F94D                          ;;F8C6|F926+F926/F916\F916;
                      REP #$20                                  ;;F8C8|F928+F928/F918\F918; Accum (16 bit) 
                      LDY.B #$00                                ;;F8CA|F92A+F92A/F91A\F91A;
                      LDA.W !SpriteMisc160E+9                   ;;F8CC|F92C+F92C/F91C\F91C;
                      AND.W #$00FF                              ;;F8CF|F92F+F92F/F91F\F91F;
                      INC A                                     ;;F8D2|F932+F932/F922\F922;
                      CMP.B !PlayerXPosNext                     ;;F8D3|F933+F933/F923\F923;
                      BEQ +                                     ;;F8D5|F935+F935/F925\F925;
                      BMI +                                     ;;F8D7|F937+F937/F927\F927;
                      LDA.W !SpriteMisc1534+9                   ;;F8D9|F939+F939/F929\F929;
                      AND.W #$00FF                              ;;F8DC|F93C+F93C/F92C\F92C;
                      STA.B !_0                                 ;;F8DF|F93F+F93F/F92F\F92F;
                      INY                                       ;;F8E1|F941+F941/F931\F931;
                      LDA.B !PlayerXPosNext                     ;;F8E2|F942+F942/F932\F932;
                      CLC                                       ;;F8E4|F944+F944/F934\F934;
                      ADC.W #$000F                              ;;F8E5|F945+F945/F935\F935;
                      CMP.B !_0                                 ;;F8E8|F948+F948/F938\F938;
                    + JMP CODE_00E9C8                           ;;F8EA|F94A+F94A/F93A\F93A;
                                                                ;;                        ;
Return00F94D:         RTS                                       ;;F8ED|F94D+F94D/F93D\F93D; Return 
                                                                ;;                        ;
CODE_00F94E:          LDY.B #$00                                ;;F8EE|F94E+F94E/F93E\F93E;
                      LDA.B !PlayerYSpeed                       ;;F8F0|F950+F950/F940\F940;
                      BPL +                                     ;;F8F2|F952+F952/F942\F942;
                      JMP CODE_00F997                           ;;F8F4|F954+F954/F944\F944;
                                                                ;;                        ;
                    + JSR CODE_00F9A8                           ;;F8F7|F957+F957/F947\F947;
                      BCS +                                     ;;F8FA|F95A+F95A/F94A\F94A;
                      JSR CODE_00EE1D                           ;;F8FC|F95C+F95C/F94C\F94C;
                      JMP CODE_00F997                           ;;F8FF|F95F+F95F/F94F\F94F;
                                                                ;;                        ;
                    + LDA.B !PlayerInAir                        ;;F902|F962+F962/F952\F952;
                      BEQ +                                     ;;F904|F964+F964/F954\F954;
                      REP #$20                                  ;;F906|F966+F966/F956\F956; Accum (16 bit) 
                      LDA.W !BrSwingPlatXPos                    ;;F908|F968+F968/F958\F958;
                      AND.W #$00FF                              ;;F90B|F96B+F96B/F95B\F95B;
                      STA.W !BrSwingXDist                       ;;F90E|F96E+F96E/F95E\F95E;
                      STA.W !KeyholeXPos                        ;;F911|F971+F971/F961\F961;
                      LDA.W !BrSwingPlatYPos                    ;;F914|F974+F974/F964\F964;
                      AND.W #$00F0                              ;;F917|F977+F977/F967\F967;
                      STA.W !BrSwingYDist                       ;;F91A|F97A+F97A/F96A\F96A;
                      STA.W !KeyholeYPos                        ;;F91D|F97D+F97D/F96D\F96D;
                      JSR CODE_00F9C9                           ;;F920|F980+F980/F970\F970;
                    + LDA.B !Mode7Angle                         ;;F923|F983+F983/F973\F973; Accum (8 bit) 
                      CLC                                       ;;F925|F985+F985/F975\F975;
                      ADC.B #$48                                ;;F926|F986+F986/F976\F976;
                      LSR A                                     ;;F928|F988+F988/F978\F978;
                      LSR A                                     ;;F929|F989+F989/F979\F979;
                      LSR A                                     ;;F92A|F98A+F98A/F97A\F97A;
                      LSR A                                     ;;F92B|F98B+F98B/F97B\F97B;
                      TAX                                       ;;F92C|F98C+F98C/F97C\F97C;
                      LDY.W DATA_00F8DF,X                       ;;F92D|F98D+F98D/F97D\F97D;
                      LDA.B #$80                                ;;F930|F990+F990/F980\F980;
                      STA.B !GraphicsUncompPtr+1                ;;F932|F992+F992/F982\F982;
                      JSR CODE_00EEE1                           ;;F934|F994+F994/F984\F984;
CODE_00F997:          REP #$20                                  ;;F937|F997+F997/F987\F987; Accum (16 bit) 
                      LDA.B !PlayerYPosScrRel                   ;;F939|F999+F999/F989\F989;
                      CMP.W #$00AE                              ;;F93B|F99B+F99B/F98B\F98B;
                      SEP #$20                                  ;;F93E|F99E+F99E/F98E\F98E; Accum (8 bit) 
                      BMI +                                     ;;F940|F9A0+F9A0/F990\F990;
                      JSR CODE_00F629                           ;;F942|F9A2+F9A2/F992\F992;
                    + JMP CODE_00E98C                           ;;F945|F9A5+F9A5/F995\F995;
                                                                ;;                        ;
CODE_00F9A8:          REP #$20                                  ;;F948|F9A8+F9A8/F998\F998; Accum (16 bit) 
                      LDA.B !PlayerXPosNext                     ;;F94A|F9AA+F9AA/F99A\F99A;
                      CLC                                       ;;F94C|F9AC+F9AC/F99C\F99C;
                      ADC.W #$0008                              ;;F94D|F9AD+F9AD/F99D\F99D;
                      STA.W !BrSwingXDist                       ;;F950|F9B0+F9B0/F9A0\F9A0;
                      LDA.B !PlayerYPosNext                     ;;F953|F9B3+F9B3/F9A3\F9A3;
                      CLC                                       ;;F955|F9B5+F9B5/F9A5\F9A5;
                      ADC.W #$0020                              ;;F956|F9B6+F9B6/F9A6\F9A6;
                      STA.W !BrSwingYDist                       ;;F959|F9B9+F9B9/F9A9\F9A9;
CODE_00F9BC:          SEP #$20                                  ;;F95C|F9BC+F9BC/F9AC\F9AC; Accum (8 bit) 
                      PHB                                       ;;F95E|F9BE+F9BE/F9AE\F9AE;
                      LDA.B #$01                                ;;F95F|F9BF+F9BF/F9AF\F9AF;
                      PHA                                       ;;F961|F9C1+F9C1/F9B1\F9B1;
                      PLB                                       ;;F962|F9C2+F9C2/F9B2\F9B2;
                      JSL CODE_01CC9D                           ;;F963|F9C3+F9C3/F9B3\F9B3;
                      PLB                                       ;;F967|F9C7+F9C7/F9B7\F9B7;
                      RTS                                       ;;F968|F9C8+F9C8/F9B8\F9B8; Return 
                                                                ;;                        ;
CODE_00F9C9:          LDA.B !Mode7Angle                         ;;F969|F9C9+F9C9/F9B9\F9B9; Accum (16 bit) 
                      PHA                                       ;;F96B|F9CB+F9CB/F9BB\F9BB;
                      EOR.W #$FFFF                              ;;F96C|F9CC+F9CC/F9BC\F9BC;
                      INC A                                     ;;F96F|F9CF+F9CF/F9BF\F9BF;
                      STA.B !Mode7Angle                         ;;F970|F9D0+F9D0/F9C0\F9C0;
                      JSR CODE_00F9BC                           ;;F972|F9D2+F9D2/F9C2\F9C2;
                      REP #$20                                  ;;F975|F9D5+F9D5/F9C5\F9C5; Accum (16 bit) 
                      PLA                                       ;;F977|F9D7+F9D7/F9C7\F9C7;
                      STA.B !Mode7Angle                         ;;F978|F9D8+F9D8/F9C8\F9C8;
                      LDA.W !BrSwingPlatXPos                    ;;F97A|F9DA+F9DA/F9CA\F9CA;
                      AND.W #$00FF                              ;;F97D|F9DD+F9DD/F9CD\F9CD;
                      SEC                                       ;;F980|F9E0+F9E0/F9D0\F9D0;
                      SBC.W #$0008                              ;;F981|F9E1+F9E1/F9D1\F9D1;
                      STA.B !PlayerXPosNext                     ;;F984|F9E4+F9E4/F9D4\F9D4;
                      LDA.W !BrSwingPlatYPos                    ;;F986|F9E6+F9E6/F9D6\F9D6;
                      AND.W #$00FF                              ;;F989|F9E9+F9E9/F9D9\F9D9;
                      SEC                                       ;;F98C|F9EC+F9EC/F9DC\F9DC;
                      SBC.W #$0020                              ;;F98D|F9ED+F9ED/F9DD\F9DD;
                      STA.B !PlayerYPosNext                     ;;F990|F9F0+F9F0/F9E0\F9E0;
                      SEP #$20                                  ;;F992|F9F2+F9F2/F9E2\F9E2; Accum (8 bit) 
                      RTS                                       ;;F994|F9F4+F9F4/F9E4\F9E4; Return 
                                                                ;;                        ;
                      %insert_empty($1B,$1B,$1B,$4D,$4D)        ;;F995|F9F5+F9F5/F9E5\F9E5;
                                                                ;;                        ;
                      LDX.B #$0B                                ;;F9B0|FA10+FA10/FA32\FA32; \ Unreachable 
                    - STZ.W !SpriteStatus,X                     ;;F9B2|FA12+FA12/FA34\FA34;  | Clear out sprite status table 
                      DEX                                       ;;F9B5|FA15+FA15/FA37\FA37;  | 
                      BPL -                                     ;;F9B6|FA16+FA16/FA38\FA38;  | 
                      RTL                                       ;;F9B8|FA18+FA18/FA3A\FA3A; / 
                                                                ;;                        ;
CODE_00FA19:          LDY.B #DATA_00E632                        ;;F9B9|FA19+FA19/FA3B\FA3B;
                      STY.B !_5                                 ;;F9BB|FA1B+FA1B/FA3D\FA3D;
                      LDY.B #DATA_00E632>>8                     ;;F9BD|FA1D+FA1D/FA3F\FA3F;
                      STY.B !_6                                 ;;F9BF|FA1F+FA1F/FA41\FA41;
                      LDY.B #DATA_00E632>>16                    ;;F9C1|FA21+FA21/FA43\FA43;
                      STY.B !_7                                 ;;F9C3|FA23+FA23/FA45\FA45;
                      SEC                                       ;;F9C5|FA25+FA25/FA47\FA47;
                      SBC.B #$6E                                ;;F9C6|FA26+FA26/FA48\FA48;
                      TAY                                       ;;F9C8|FA28+FA28/FA4A\FA4A;
                      LDA.B [!SlopesPtr],Y                      ;;F9C9|FA29+FA29/FA4B\FA4B;
                      STA.B !_8                                 ;;F9CB|FA2B+FA2B/FA4D\FA4D;
                      ASL A                                     ;;F9CD|FA2D+FA2D/FA4F\FA4F;
                      ASL A                                     ;;F9CE|FA2E+FA2E/FA50\FA50;
                      ASL A                                     ;;F9CF|FA2F+FA2F/FA51\FA51;
                      ASL A                                     ;;F9D0|FA30+FA30/FA52\FA52;
                      STA.B !_1                                 ;;F9D1|FA31+FA31/FA53\FA53;
                      BCC +                                     ;;F9D3|FA33+FA33/FA55\FA55;
                      INC.B !_6                                 ;;F9D5|FA35+FA35/FA57\FA57;
                    + LDA.B !_C                                 ;;F9D7|FA37+FA37/FA59\FA59;
                      AND.B #$0F                                ;;F9D9|FA39+FA39/FA5B\FA5B;
                      STA.B !_0                                 ;;F9DB|FA3B+FA3B/FA5D\FA5D;
                      LDA.B !_A                                 ;;F9DD|FA3D+FA3D/FA5F\FA5F;
                      AND.B #$0F                                ;;F9DF|FA3F+FA3F/FA61\FA61;
                      ORA.B !_1                                 ;;F9E1|FA41+FA41/FA63\FA63;
                      TAY                                       ;;F9E3|FA43+FA43/FA65\FA65;
                      RTL                                       ;;F9E4|FA44+FA44/FA66\FA66; Return 
                                                                ;;                        ;
FlatPalaceSwitch:     LDA.B #$20                                ;;F9E5|FA45+FA45/FA67\FA67; \ Set "Time to shake ground" to x20 
                      STA.W !ScreenShakeTimer                   ;;F9E7|FA47+FA47/FA69\FA69; / 
                      LDY.B #$02                                ;;F9EA|FA4A+FA4A/FA6C\FA6C; \  
                      LDA.B #$60                                ;;F9EC|FA4C+FA4C/FA6E\FA6E;  |Set sprite x02 to x60 (Flat palace switch) 
                      STA.W !SpriteNumber,Y                     ;;F9EE|FA4E+FA4E/FA70\FA70; /  
                      LDA.B #$08                                ;;F9F1|FA51+FA51/FA73\FA73; \ Set sprite's status to x08 
                      STA.W !SpriteStatus,Y                     ;;F9F3|FA53+FA53/FA75\FA75; /  
                      LDA.B !TouchBlockXPos                     ;;F9F6|FA56+FA56/FA78\FA78; \  
                      AND.B #$F0                                ;;F9F8|FA58+FA58/FA7A\FA7A;  |Set sprite X (low) to $9A & 0xF0 
                      STA.W !SpriteXPosLow,Y                    ;;F9FA|FA5A+FA5A/FA7C\FA7C; /  
                      LDA.B !TouchBlockXPos+1                   ;;F9FD|FA5D+FA5D/FA7F\FA7F; \ Set sprite X (high) to $9B 
                      STA.W !SpriteYPosHigh,Y                   ;;F9FF|FA5F+FA5F/FA81\FA81; /  
                      LDA.B !TouchBlockYPos                     ;;FA02|FA62+FA62/FA84\FA84; \  
                      AND.B #$F0                                ;;FA04|FA64+FA64/FA86\FA86;  | 
                      CLC                                       ;;FA06|FA66+FA66/FA88\FA88;  |Set sprite Y (low) to ($98 & 0xF0) + 0x10 
                      ADC.B #$10                                ;;FA07|FA67+FA67/FA89\FA89;  | 
                      STA.W !SpriteYPosLow,Y                    ;;FA09|FA69+FA69/FA8B\FA8B; /  
                      LDA.B !TouchBlockYPos+1                   ;;FA0C|FA6C+FA6C/FA8E\FA8E; \  
                      ADC.B #$00                                ;;FA0E|FA6E+FA6E/FA90\FA90;  |Set sprite Y (high) to $99 + carry 
                      STA.W !SpriteXPosHigh,Y                   ;;FA10|FA70+FA70/FA92\FA92; / (Carry carried over from previous addition) 
                      PHX                                       ;;FA13|FA73+FA73/FA95\FA95;
                      TYX                                       ;;FA14|FA74+FA74/FA96\FA96;
                      JSL InitSpriteTables                      ;;FA15|FA75+FA75/FA97\FA97;
                      PLX                                       ;;FA19|FA79+FA79/FA9B\FA9B;
                      LDA.B #$5F                                ;;FA1A|FA7A+FA7A/FA9C\FA9C; \ Set sprite's "Spin Jump Death Frame Counter" to x5F 
                      STA.W !SpriteMisc1540,Y                   ;;FA1C|FA7C+FA7C/FA9E\FA9E; /  
                      RTS                                       ;;FA1F|FA7F+FA7F/FAA1\FAA1; Return 
                                                                ;;                        ;
TriggerGoalTape:      STZ.W !PBalloonInflating                  ;;FA20|FA80+FA80/FAA2\FAA2;
                      STZ.W !PBalloonTimer                      ;;FA23|FA83+FA83/FAA5\FAA5;
                      STZ.W !SpriteRespawnTimer                 ;;FA26|FA86+FA86/FAA8\FAA8; Don't respawn sprites 
                   if ver_is_english(!_VER)           ;\   IF   ;;++++++++++++++++++++++++; U, SS, E0, & E1
                      STZ.W !CurrentGenerator                   ;;    |FA89+FA89/FAAB\FAAB;
                   endif                              ;/ ENDIF  ;;++++++++++++++++++++++++;
                      STZ.W !SilverCoinsCollected               ;;FA29|FA8C+FA8C/FAAE\FAAE;
                      LDY.B #$0B                                ;;FA2C|FA8F+FA8F/FAB1\FAB1; Loop over sprites: 
LvlEndSprLoopStrt:    LDA.W !SpriteStatus,Y                     ;;FA2E|FA91+FA91/FAB3\FAB3; \ If sprite status < 8, 
                      CMP.B #$08                                ;;FA31|FA94+FA94/FAB6\FAB6;  | skip the current sprite 
                      BCC LvlEndNextSprite                      ;;FA33|FA96+FA96/FAB8\FAB8; / 
                      CMP.B #$0B                                ;;FA35|FA98+FA98/FABA\FABA; \ If Mario carries a sprite past the goal, 
                      BNE CODE_00FAA3                           ;;FA37|FA9A+FA9A/FABC\FABC;  | 
                      PHX                                       ;;FA39|FA9C+FA9C/FABE\FABE;  | 
                      JSR LvlEndPowerUp                         ;;FA3A|FA9D+FA9D/FABF\FABF;  | he gets a powerup 
                      PLX                                       ;;FA3D|FAA0+FAA0/FAC2\FAC2;  | 
                      BRA LvlEndNextSprite                      ;;FA3E|FAA1+FAA1/FAC3\FAC3; / 
                                                                ;;                        ;
CODE_00FAA3:          LDA.W !SpriteNumber,Y                     ;;FA40|FAA3+FAA3/FAC5\FAC5; \ Branch if goal tape 
                      CMP.B #$7B                                ;;FA43|FAA6+FAA6/FAC8\FAC8;  | 
                      BEQ CODE_00FAB2                           ;;FA45|FAA8+FAA8/FACA\FACA; / 
                      LDA.W !SpriteOffscreenX,Y                 ;;FA47|FAAA+FAAA/FACC\FACC; \ If sprite on screen... 
                      ORA.W !SpriteOffscreenVert,Y              ;;FA4A|FAAD+FAAD/FACF\FACF;  | 
                      BNE CODE_00FAC5                           ;;FA4D|FAB0+FAB0/FAD2\FAD2;  | 
CODE_00FAB2:          LDA.W !SpriteTweakerE,Y                   ;;FA4F|FAB2+FAB2/FAD4\FAD4;  | ...and "don't turn into coin" not set, 
                      AND.B #$20                                ;;FA52|FAB5+FAB5/FAD7\FAD7;  | 
                      BNE CODE_00FAC5                           ;;FA54|FAB7+FAB7/FAD9\FAD9;  | 
                      LDA.B #$10                                ;;FA56|FAB9+FAB9/FADB\FADB;  | Set coin animation timer = #$10 
                      STA.W !SpriteMisc1540,Y                   ;;FA58|FABB+FABB/FADD\FADD;  | 
                      LDA.B #$06                                ;;FA5B|FABE+FABE/FAE0\FAE0;  | Sprite status = Level end, turn to coins 
                      STA.W !SpriteStatus,Y                     ;;FA5D|FAC0+FAC0/FAE2\FAE2;  | 
                      BRA LvlEndNextSprite                      ;;FA60|FAC3+FAC3/FAE5\FAE5; / 
                                                                ;;                        ;
CODE_00FAC5:          LDA.W !SpriteTweakerF,Y                   ;;FA62|FAC5+FAC5/FAE7\FAE7; \ If "don't erase" not set, 
                      AND.B #$02                                ;;FA65|FAC8+FAC8/FAEA\FAEA;  | 
                      BNE LvlEndNextSprite                      ;;FA67|FACA+FACA/FAEC\FAEC;  | 
                      LDA.B #$00                                ;;FA69|FACC+FACC/FAEE\FAEE;  | Erase sprite 
                      STA.W !SpriteStatus,Y                     ;;FA6B|FACE+FACE/FAF0\FAF0; / 
LvlEndNextSprite:     DEY                                       ;;FA6E|FAD1+FAD1/FAF3\FAF3; \ Goto next sprite 
                      BPL LvlEndSprLoopStrt                     ;;FA6F|FAD2+FAD2/FAF4\FAF4; / 
                      LDY.B #$07                                ;;FA71|FAD4+FAD4/FAF6\FAF6; \ 
                      LDA.B #$00                                ;;FA73|FAD6+FAD6/FAF8\FAF8;  | Clear out all extended sprites 
                    - STA.W !ExtSpriteNumber,Y                  ;;FA75|FAD8+FAD8/FAFA\FAFA;  | 
                      DEY                                       ;;FA78|FADB+FADB/FAFD\FAFD;  | 
                      BPL -                                     ;;FA79|FADC+FADC/FAFE\FAFE; / 
                      RTL                                       ;;FA7B|FADE+FADE/FB00\FB00; Return 
                                                                ;;                        ;
                                                                ;;                        ;
DATA_00FADF:          db $74,$74,$77,$75,$76,$E0,$F0,$74        ;;FA7C|FADF+FADF/FB01\FB01;
                      db $74,$77,$75,$76,$E0,$F1,$F0,$F0        ;;FA84|FAE7+FAE7/FB09\FB09;
                      db $F0,$F0,$F1,$E0,$F2,$E0,$E0,$E0        ;;FA8C|FAEF+FAEF/FB11\FB11;
                      db $E0,$F1,$E0,$E4                        ;;FA94|FAF7+FAF7/FB19\FB19;
                                                                ;;                        ;
DATA_00FAFB:          db $FF,$74,$75,$76,$77                    ;;FA98|FAFB+FAFB/FB1D\FB1D;
                                                                ;;                        ;
LvlEndPowerUp:        LDX.B !Powerup                            ;;FA9D|FB00+FB00/FB22\FB22; X = Mario's power up status 
                      LDA.W !InvinsibilityTimer                 ;;FA9F|FB02+FB02/FB24\FB24; \ If Mario has star, X = #$04.  However this never happens as $1490 is cleared earlier 
                      BEQ +                                     ;;FAA2|FB05+FB05/FB27\FB27;  | Otherwise Mario could get a star from carrying a sprite past the goal. 
                      LDX.B #$04                                ;;FAA4|FB07+FB07/FB29\FB29; / Unreachable instruction 
                    + LDA.W !PlayerRidingYoshi                  ;;FAA6|FB09+FB09/FB2B\FB2B; \ If Mario on Yoshi, X = #$05 
                      BEQ +                                     ;;FAA9|FB0C+FB0C/FB2E\FB2E;  | 
                      LDX.B #$05                                ;;FAAB|FB0E+FB0E/FB30\FB30; / 
                    + LDA.W !SpriteNumber,Y                     ;;FAAD|FB10+FB10/FB32\FB32; \ If Spring Board, X += #$07 
                      CMP.B #$2F                                ;;FAB0|FB13+FB13/FB35\FB35;  | 
                      BEQ CODE_00FB2D                           ;;FAB2|FB15+FB15/FB37\FB37; / 
                      CMP.B #$3E                                ;;FAB4|FB17+FB17/FB39\FB39; \ If P Switch, X += #$07 
                      BEQ CODE_00FB2D                           ;;FAB6|FB19+FB19/FB3B\FB3B; / 
                      CMP.B #$80                                ;;FAB8|FB1B+FB1B/FB3D\FB3D; \ If Key, X += #$0E 
                      BEQ ADDR_00FB28                           ;;FABA|FB1D+FB1D/FB3F\FB3F; / 
                      CMP.B #$2D                                ;;FABC|FB1F+FB1F/FB41\FB41; \ If Baby Yoshi, X += #$15 
                      BNE +                                     ;;FABE|FB21+FB21/FB43\FB43; / 
                      TXA                                       ;;FAC0|FB23+FB23/FB45\FB45;
                      CLC                                       ;;FAC1|FB24+FB24/FB46\FB46;
                      ADC.B #$07                                ;;FAC2|FB25+FB25/FB47\FB47;
                      TAX                                       ;;FAC4|FB27+FB27/FB49\FB49;
ADDR_00FB28:          TXA                                       ;;FAC5|FB28+FB28/FB4A\FB4A;
                      CLC                                       ;;FAC6|FB29+FB29/FB4B\FB4B;
                      ADC.B #$07                                ;;FAC7|FB2A+FB2A/FB4C\FB4C;
                      TAX                                       ;;FAC9|FB2C+FB2C/FB4E\FB4E;
CODE_00FB2D:          TXA                                       ;;FACA|FB2D+FB2D/FB4F\FB4F;
                      CLC                                       ;;FACB|FB2E+FB2E/FB50\FB50;
                      ADC.B #$07                                ;;FACC|FB2F+FB2F/FB51\FB51;
                      TAX                                       ;;FACE|FB31+FB31/FB53\FB53;
                    + LDA.L DATA_00FADF,X                       ;;FACF|FB32+FB32/FB54\FB54;
                      LDX.W !PlayerItembox                      ;;FAD3|FB36+FB36/FB58\FB58;
                      CMP.L DATA_00FAFB,X                       ;;FAD6|FB39+FB39/FB5B\FB5B;
                      BNE +                                     ;;FADA|FB3D+FB3D/FB5F\FB5F;
                      LDA.B #$78                                ;;FADC|FB3F+FB3F/FB61\FB61;
                    + STZ.B !_F                                 ;;FADE|FB41+FB41/FB63\FB63;
                      CMP.B #$E0                                ;;FAE0|FB43+FB43/FB65\FB65;
                      BCC +                                     ;;FAE2|FB45+FB45/FB67\FB67;
                      PHA                                       ;;FAE4|FB47+FB47/FB69\FB69;
                      AND.B #$0F                                ;;FAE5|FB48+FB48/FB6A\FB6A;
                      STA.B !_F                                 ;;FAE7|FB4A+FB4A/FB6C\FB6C;
                      PLA                                       ;;FAE9|FB4C+FB4C/FB6E\FB6E;
                      CMP.B #$F0                                ;;FAEA|FB4D+FB4D/FB6F\FB6F;
                      LDA.B #$78                                ;;FAEC|FB4F+FB4F/FB71\FB71;
                      BCS +                                     ;;FAEE|FB51+FB51/FB73\FB73;
                      LDA.B #$78                                ;;FAF0|FB53+FB53/FB75\FB75;
                    + STA.W !SpriteNumber,Y                     ;;FAF2|FB55+FB55/FB77\FB77;
                      CMP.B #$76                                ;;FAF5|FB58+FB58/FB7A\FB7A;
                      BNE +                                     ;;FAF7|FB5A+FB5A/FB7C\FB7C;
                      INC.W !UnusedStarCounter                  ;;FAF9|FB5C+FB5C/FB7E\FB7E;
                    + TYX                                       ;;FAFC|FB5F+FB5F/FB81\FB81;
                      JSL InitSpriteTables                      ;;FAFD|FB60+FB60/FB82\FB82;
                      LDA.B !_F                                 ;;FB01|FB64+FB64/FB86\FB86;
                      STA.W !SpriteMisc1594,Y                   ;;FB03|FB66+FB66/FB88\FB88;
                      LDA.B #$0C                                ;;FB06|FB69+FB69/FB8B\FB8B; \ Sprite status = Goal tape power up 
                      STA.W !SpriteStatus,Y                     ;;FB08|FB6B+FB6B/FB8D\FB8D; / 
                      LDA.B #$D0                                ;;FB0B|FB6E+FB6E/FB90\FB90;
                      STA.W !SpriteYSpeed,Y                     ;;FB0D|FB70+FB70/FB92\FB92;
                      LDA.B #$05                                ;;FB10|FB73+FB73/FB95\FB95;
                      STA.W !SpriteXSpeed,Y                     ;;FB12|FB75+FB75/FB97\FB97;
                      LDA.B #$20                                ;;FB15|FB78+FB78/FB9A\FB9A;
                      STA.W !SpriteMisc154C,Y                   ;;FB17|FB7A+FB7A/FB9C\FB9C;
                      LDA.B #!SFX_ITEMGOAL                      ;;FB1A|FB7D+FB7D/FB9F\FB9F;
                      STA.W !SPCIO0                             ;;FB1C|FB7F+FB7F/FBA1\FBA1; / Play sound effect 
                      LDX.B #$03                                ;;FB1F|FB82+FB82/FBA4\FBA4;
CODE_00FB84:          LDA.W !SmokeSpriteNumber,X                ;;FB21|FB84+FB84/FBA6\FBA6;
                      BEQ CODE_00FB8D                           ;;FB24|FB87+FB87/FBA9\FBA9;
                      DEX                                       ;;FB26|FB89+FB89/FBAB\FBAB;
                      BPL CODE_00FB84                           ;;FB27|FB8A+FB8A/FBAC\FBAC;
                      RTS                                       ;;FB29|FB8C+FB8C/FBAE\FBAE; Return 
                                                                ;;                        ;
CODE_00FB8D:          LDA.B #$01                                ;;FB2A|FB8D+FB8D/FBAF\FBAF;
                      STA.W !SmokeSpriteNumber,X                ;;FB2C|FB8F+FB8F/FBB1\FBB1;
                      LDA.W !SpriteYPosLow,Y                    ;;FB2F|FB92+FB92/FBB4\FBB4;
                      STA.W !SmokeSpriteYPos,X                  ;;FB32|FB95+FB95/FBB7\FBB7;
                      LDA.W !SpriteXPosLow,Y                    ;;FB35|FB98+FB98/FBBA\FBBA;
                      STA.W !SmokeSpriteXPos,X                  ;;FB38|FB9B+FB9B/FBBD\FBBD;
                      LDA.B #$1B                                ;;FB3B|FB9E+FB9E/FBC0\FBC0;
                      STA.W !SmokeSpriteTimer,X                 ;;FB3D|FBA0+FBA0/FBC2\FBC2;
                      RTS                                       ;;FB40|FBA3+FBA3/FBC5\FBC5; Return 
                                                                ;;                        ;
                                                                ;;                        ;
LvlEndSmokeTiles:     db $66,$64,$62,$60,$E8,$EA,$EC,$EA        ;;FB41|FBA4+FBA4/FBC6\FBC6;
                                                                ;;                        ;
LvlEndSprCoins:       PHB                                       ;;FB49|FBAC+FBAC/FBCE\FBCE;
                      PHK                                       ;;FB4A|FBAD+FBAD/FBCF\FBCF;
                      PLB                                       ;;FB4B|FBAE+FBAE/FBD0\FBD0;
                      JSR LvlEndSprCoinsRt                      ;;FB4C|FBAF+FBAF/FBD1\FBD1;
                      PLB                                       ;;FB4F|FBB2+FBB2/FBD4\FBD4;
                      RTL                                       ;;FB50|FBB3+FBB3/FBD5\FBD5; Return 
                                                                ;;                        ;
LvlEndSprCoinsRt:     LDY.B #$00                                ;;FB51|FBB4+FBB4/FBD6\FBD6;
                      LDA.W !Layer1DXPos                        ;;FB53|FBB6+FBB6/FBD8\FBD8;
                      BPL +                                     ;;FB56|FBB9+FBB9/FBDB\FBDB;
                      DEY                                       ;;FB58|FBBB+FBBB/FBDD\FBDD;
                    + CLC                                       ;;FB59|FBBC+FBBC/FBDE\FBDE;
                      ADC.B !SpriteXPosLow,X                    ;;FB5A|FBBD+FBBD/FBDF\FBDF;
                      STA.B !SpriteXPosLow,X                    ;;FB5C|FBBF+FBBF/FBE1\FBE1;
                      TYA                                       ;;FB5E|FBC1+FBC1/FBE3\FBE3;
                      ADC.W !SpriteYPosHigh,X                   ;;FB5F|FBC2+FBC2/FBE4\FBE4;
                      STA.W !SpriteYPosHigh,X                   ;;FB62|FBC5+FBC5/FBE7\FBE7;
                      LDA.W !SpriteMisc1540,X                   ;;FB65|FBC8+FBC8/FBEA\FBEA;
                      BEQ CODE_00FBF0                           ;;FB68|FBCB+FBCB/FBED\FBED;
                      CMP.B #$01                                ;;FB6A|FBCD+FBCD/FBEF\FBEF;
                      BNE +                                     ;;FB6C|FBCF+FBCF/FBF1\FBF1;
                      LDA.B #$D0                                ;;FB6E|FBD1+FBD1/FBF3\FBF3;
                      STA.B !SpriteYSpeed,X                     ;;FB70|FBD3+FBD3/FBF5\FBF5;
                    + PHX                                       ;;FB72|FBD5+FBD5/FBF7\FBF7;
                      LDA.B #$04                                ;;FB73|FBD6+FBD6/FBF8\FBF8; \ Use Palette A 
                      STA.W !SpriteOBJAttribute,X               ;;FB75|FBD8+FBD8/FBFA\FBFA; / 
                      JSL GenericSprGfxRt2                      ;;FB78|FBDB+FBDB/FBFD\FBFD;
                      LDA.W !SpriteMisc1540,X                   ;;FB7C|FBDF+FBDF/FC01\FC01;
                      LSR A                                     ;;FB7F|FBE2+FBE2/FC04\FC04;
                      LSR A                                     ;;FB80|FBE3+FBE3/FC05\FC05;
                      LDY.W !SpriteOAMIndex,X                   ;;FB81|FBE4+FBE4/FC06\FC06; Y = Index into sprite OAM 
                      TAX                                       ;;FB84|FBE7+FBE7/FC09\FC09;
                      LDA.W LvlEndSmokeTiles,X                  ;;FB85|FBE8+FBE8/FC0A\FC0A;
                      STA.W !OAMTileNo+$100,Y                   ;;FB88|FBEB+FBEB/FC0D\FC0D;
                      PLX                                       ;;FB8B|FBEE+FBEE/FC10\FC10;
                      RTS                                       ;;FB8C|FBEF+FBEF/FC11\FC11; Return 
                                                                ;;                        ;
CODE_00FBF0:          INC.W !SpriteMisc1570,X                   ;;FB8D|FBF0+FBF0/FC12\FC12;
                      JSL UpdateYPosNoGvtyW                     ;;FB90|FBF3+FBF3/FC15\FC15;
                      INC.B !SpriteYSpeed,X                     ;;FB94|FBF7+FBF7/FC19\FC19;
                      INC.B !SpriteYSpeed,X                     ;;FB96|FBF9+FBF9/FC1B\FC1B;
                      LDA.B !SpriteYSpeed,X                     ;;FB98|FBFB+FBFB/FC1D\FC1D;
                      CMP.B #$20                                ;;FB9A|FBFD+FBFD/FC1F\FC1F;
                      BMI CODE_00FC1E                           ;;FB9C|FBFF+FBFF/FC21\FC21;
                      JSL CODE_05B34A                           ;;FB9E|FC01+FC01/FC23\FC23;
                      LDA.W !SilverCoinsCollected               ;;FBA2|FC05+FC05/FC27\FC27;
                      CMP.B #$0D                                ;;FBA5|FC08+FC08/FC2A\FC2A;
                      BCC +                                     ;;FBA7|FC0A+FC0A/FC2C\FC2C;
                      LDA.B #$0D                                ;;FBA9|FC0C+FC0C/FC2E\FC2E;
                    + JSL GivePoints                            ;;FBAB|FC0E+FC0E/FC30\FC30;
                      LDA.W !SilverCoinsCollected               ;;FBAF|FC12+FC12/FC34\FC34;
                      CLC                                       ;;FBB2|FC15+FC15/FC37\FC37;
                      ADC.B #$02                                ;;FBB3|FC16+FC16/FC38\FC38;
                      STA.W !SilverCoinsCollected               ;;FBB5|FC18+FC18/FC3A\FC3A;
                      STZ.W !SpriteStatus,X                     ;;FBB8|FC1B+FC1B/FC3D\FC3D;
CODE_00FC1E:          JSL CoinSprGfx                            ;;FBBB|FC1E+FC1E/FC40\FC40;
                      RTS                                       ;;FBBF|FC22+FC22/FC44\FC44; Return 
                                                                ;;                        ;
                      LDY.B #$0B                                ;;FBC0|FC23+FC23/FC45\FC45; \ Unreachable instructions 
ADDR_00FC25:          LDA.W !SpriteStatus,Y                     ;;FBC2|FC25+FC25/FC47\FC47; / Status = Carried 
                      CMP.B #$08                                ;;FBC5|FC28+FC28/FC4A\FC4A;
                      BNE ADDR_00FC73                           ;;FBC7|FC2A+FC2A/FC4C\FC4C;
                      LDA.W !SpriteNumber,Y                     ;;FBC9|FC2C+FC2C/FC4E\FC4E;
                      CMP.B #$35                                ;;FBCC|FC2F+FC2F/FC51\FC51;
                      BNE ADDR_00FC73                           ;;FBCE|FC31+FC31/FC53\FC53;
                      LDA.B #$01                                ;;FBD0|FC33+FC33/FC55\FC55;
                      STA.W !CarryYoshiThruLvls                 ;;FBD2|FC35+FC35/FC57\FC57;
                      STZ.W !YoshiHasWingsEvt                   ;;FBD5|FC38+FC38/FC5A\FC5A; No Yoshi wings 
                      LDA.W !SpriteOBJAttribute,Y               ;;FBD8|FC3B+FC3B/FC5D\FC5D;
                      AND.B #$F1                                ;;FBDB|FC3E+FC3E/FC60\FC60;
                      ORA.B #$0A                                ;;FBDD|FC40+FC40/FC62\FC62;
                      STA.W !SpriteOBJAttribute,Y               ;;FBDF|FC42+FC42/FC64\FC64;
                      LDA.W !PlayerRidingYoshi                  ;;FBE2|FC45+FC45/FC67\FC67;
                      BNE +                                     ;;FBE5|FC48+FC48/FC6A\FC6A;
                      LDA.B !Layer1XPos                         ;;FBE7|FC4A+FC4A/FC6C\FC6C;
                      SEC                                       ;;FBE9|FC4C+FC4C/FC6E\FC6E;
                      SBC.B #$10                                ;;FBEA|FC4D+FC4D/FC6F\FC6F;
                      STA.W !SpriteXPosLow,Y                    ;;FBEC|FC4F+FC4F/FC71\FC71;
                      LDA.B !Layer1XPos+1                       ;;FBEF|FC52+FC52/FC74\FC74;
                      SBC.B #$00                                ;;FBF1|FC54+FC54/FC76\FC76;
                      STA.W !SpriteYPosHigh,Y                   ;;FBF3|FC56+FC56/FC78\FC78;
                      LDA.B !PlayerYPosNext                     ;;FBF6|FC59+FC59/FC7B\FC7B;
                      STA.W !SpriteYPosLow,Y                    ;;FBF8|FC5B+FC5B/FC7D\FC7D;
                      LDA.B !PlayerYPosNext+1                   ;;FBFB|FC5E+FC5E/FC80\FC80;
                      STA.W !SpriteXPosHigh,Y                   ;;FBFD|FC60+FC60/FC82\FC82;
                      LDA.B #$03                                ;;FC00|FC63+FC63/FC85\FC85;
                      STA.W !SpriteTableC2,Y                    ;;FC02|FC65+FC65/FC87\FC87;
                      LDA.B #$00                                ;;FC05|FC68+FC68/FC8A\FC8A;
                      STA.W !SpriteMisc157C,Y                   ;;FC07|FC6A+FC6A/FC8C\FC8C;
                      LDA.B #$10                                ;;FC0A|FC6D+FC6D/FC8F\FC8F;
                      STA.W !SpriteXSpeed,Y                     ;;FC0C|FC6F+FC6F/FC91\FC91;
                    + RTL                                       ;;FC0F|FC72+FC72/FC94\FC94; Return 
                                                                ;;                        ;
ADDR_00FC73:          DEY                                       ;;FC10|FC73+FC73/FC95\FC95;
                      BPL ADDR_00FC25                           ;;FC11|FC74+FC74/FC96\FC96;
                      STZ.W !CarryYoshiThruLvls                 ;;FC13|FC76+FC76/FC98\FC98;
                      RTL                                       ;;FC16|FC79+FC79/FC9B\FC9B; Return 
                                                                ;;                        ;
CODE_00FC7A:          LDA.B #!SFX_YOSHIDRUMON                   ;;FC17|FC7A+FC7A/FC9C\FC9C;
                      STA.W !SPCIO1                             ;;FC19|FC7C+FC7C/FC9E\FC9E; / Play sound effect 
                      LDX.B #$00                                ;;FC1C|FC7F+FC7F/FCA1\FCA1;
                      LDA.W !DisableBonusSprite                 ;;FC1E|FC81+FC81/FCA3\FCA3;
                      BNE +                                     ;;FC21|FC84+FC84/FCA6\FCA6;
                      LDX.B #$05                                ;;FC23|FC86+FC86/FCA8\FCA8;
                      LDA.W !SpriteMemorySetting                ;;FC25|FC88+FC88/FCAA\FCAA;
                      CMP.B #$0A                                ;;FC28|FC8B+FC8B/FCAD\FCAD;
                      BEQ +                                     ;;FC2A|FC8D+FC8D/FCAF\FCAF;
                      JSL FindFreeSprSlot                       ;;FC2C|FC8F+FC8F/FCB1\FCB1; \ X = First free sprite slot, #$03 if none free 
                      TYX                                       ;;FC30|FC93+FC93/FCB5\FCB5;  | 
                      BPL +                                     ;;FC31|FC94+FC94/FCB6\FCB6;  | 
                      LDX.B #$03                                ;;FC33|FC96+FC96/FCB8\FCB8; / 
                    + LDA.B #$08                                ;;FC35|FC98+FC98/FCBA\FCBA; \ Status = Normal 
                      STA.W !SpriteStatus,X                     ;;FC37|FC9A+FC9A/FCBC\FCBC; / 
                      LDA.B #$35                                ;;FC3A|FC9D+FC9D/FCBF\FCBF; \ Sprite = Yoshi 
                      STA.B !SpriteNumber,X                     ;;FC3C|FC9F+FC9F/FCC1\FCC1; / 
                      LDA.B !PlayerXPosNext                     ;;FC3E|FCA1+FCA1/FCC3\FCC3; \ Yoshi X position = Mario X position 
                      STA.B !SpriteXPosLow,X                    ;;FC40|FCA3+FCA3/FCC5\FCC5;  | 
                      LDA.B !PlayerXPosNext+1                   ;;FC42|FCA5+FCA5/FCC7\FCC7;  | 
                      STA.W !SpriteYPosHigh,X                   ;;FC44|FCA7+FCA7/FCC9\FCC9; / 
                      LDA.B !PlayerYPosNext                     ;;FC47|FCAA+FCAA/FCCC\FCCC; \ Yoshi's Y position = Mario Y position - #$10 
                      SEC                                       ;;FC49|FCAC+FCAC/FCCE\FCCE;  | Mario Y position = Mario Y position - #$10 
                      SBC.B #$10                                ;;FC4A|FCAD+FCAD/FCCF\FCCF;  | 
                      STA.B !PlayerYPosNext                     ;;FC4C|FCAF+FCAF/FCD1\FCD1;  | 
                      STA.B !SpriteYPosLow,X                    ;;FC4E|FCB1+FCB1/FCD3\FCD3;  | 
                      LDA.B !PlayerYPosNext+1                   ;;FC50|FCB3+FCB3/FCD5\FCD5;  | 
                      SBC.B #$00                                ;;FC52|FCB5+FCB5/FCD7\FCD7;  | 
                      STA.B !PlayerYPosNext+1                   ;;FC54|FCB7+FCB7/FCD9\FCD9;  | 
                      STA.W !SpriteXPosHigh,X                   ;;FC56|FCB9+FCB9/FCDB\FCDB; / 
                      JSL InitSpriteTables                      ;;FC59|FCBC+FCBC/FCDE\FCDE; Reset sprite tables 
                      LDA.B #$04                                ;;FC5D|FCC0+FCC0/FCE2\FCE2;
                      STA.W !SpriteMisc1FE2,X                   ;;FC5F|FCC2+FCC2/FCE4\FCE4;
                      LDA.W !YoshiColor                         ;;FC62|FCC5+FCC5/FCE7\FCE7; \ Set Yoshi palette 
                      STA.W !SpriteOBJAttribute,X               ;;FC65|FCC8+FCC8/FCEA\FCEA; / 
                      LDA.W !YoshiHeavenFlag                    ;;FC68|FCCB+FCCB/FCED\FCED;
                      BEQ +                                     ;;FC6B|FCCE+FCCE/FCF0\FCF0;
                      LDA.B #$06                                ;;FC6D|FCD0+FCD0/FCF2\FCF2;
                      STA.W !SpriteOBJAttribute,X               ;;FC6F|FCD2+FCD2/FCF4\FCF4;
                    + INC.W !PlayerRidingYoshi                  ;;FC72|FCD5+FCD5/FCF7\FCF7;
                      INC.B !SpriteTableC2,X                    ;;FC75|FCD8+FCD8/FCFA\FCFA;
                      LDA.B !PlayerDirection                    ;;FC77|FCDA+FCDA/FCFC\FCFC;
                      EOR.B #$01                                ;;FC79|FCDC+FCDC/FCFE\FCFE;
                      STA.W !SpriteMisc157C,X                   ;;FC7B|FCDE+FCDE/FD00\FD00;
                      DEC.W !SpriteMisc160E,X                   ;;FC7E|FCE1+FCE1/FD03\FD03;
                      INX                                       ;;FC81|FCE4+FCE4/FD06\FD06;
                      STX.W !CurrentYoshiSlot                   ;;FC82|FCE5+FCE5/FD07\FD07;
                      STX.W !YoshiIsLoose                       ;;FC85|FCE8+FCE8/FD0A\FD0A;
                      RTL                                       ;;FC88|FCEB+FCEB/FD0D\FD0D; Return 
                                                                ;;                        ;
CODE_00FCEC:          LDX.B #$0B                                ;;FC89|FCEC+FCEC/FD0E\FD0E;
                    - STZ.W !SpriteStatus,X                     ;;FC8B|FCEE+FCEE/FD10\FD10;
                      DEX                                       ;;FC8E|FCF1+FCF1/FD13\FD13;
                      BPL -                                     ;;FC8F|FCF2+FCF2/FD14\FD14;
                      RTS                                       ;;FC91|FCF4+FCF4/FD16\FD16; Return 
                                                                ;;                        ;
CODE_00FCF5:          LDA.B #$A0                                ;;FC92|FCF5+FCF5/FD17\FD17;
                      STA.B !SpriteXPosLow,X                    ;;FC94|FCF7+FCF7/FD19\FD19;
                      LDA.B #$00                                ;;FC96|FCF9+FCF9/FD1B\FD1B;
                      STA.W !SpriteYPosHigh,X                   ;;FC98|FCFB+FCFB/FD1D\FD1D;
                      LDA.B #$00                                ;;FC9B|FCFE+FCFE/FD20\FD20;
                      STA.B !SpriteYPosLow,X                    ;;FC9D|FD00+FD00/FD22\FD22;
                      LDA.B #$00                                ;;FC9F|FD02+FD02/FD24\FD24;
                      STA.W !SpriteXPosHigh,X                   ;;FCA1|FD04+FD04/FD26\FD26;
                      RTL                                       ;;FCA4|FD07+FD07/FD29\FD29; Return 
                                                                ;;                        ;
CODE_00FD08:          LDY.B #$3F                                ;;FCA5|FD08+FD08/FD2A\FD2A;
                      LDA.B !byetudlrHold                       ;;FCA7|FD0A+FD0A/FD2C\FD2C;
                      AND.B #$83                                ;;FCA9|FD0C+FD0C/FD2E\FD2E;
                      BNE +                                     ;;FCAB|FD0E+FD0E/FD30\FD30;
                      LDY.B #$7F                                ;;FCAD|FD10+FD10/FD32\FD32;
                    + TYA                                       ;;FCAF|FD12+FD12/FD34\FD34;
                      AND.B !EffFrame                           ;;FCB0|FD13+FD13/FD35\FD35;
                      ORA.B !SpriteLock                         ;;FCB2|FD15+FD15/FD37\FD37;
                      BNE Return00FD23                          ;;FCB4|FD17+FD17/FD39\FD39;
                      LDX.B #$07                                ;;FCB6|FD19+FD19/FD3B\FD3B; \ Find a free extended sprite slot 
CODE_00FD1B:          LDA.W !ExtSpriteNumber,X                  ;;FCB8|FD1B+FD1B/FD3D\FD3D;  | 
                      BEQ CODE_00FD26                           ;;FCBB|FD1E+FD1E/FD40\FD40;  | 
                      DEX                                       ;;FCBD|FD20+FD20/FD42\FD42;  | 
                      BPL CODE_00FD1B                           ;;FCBE|FD21+FD21/FD43\FD43;  | 
Return00FD23:         RTS                                       ;;FCC0|FD23+FD23/FD45\FD45; / Return if no free slots 
                                                                ;;                        ;
                                                                ;;                        ;
DATA_00FD24:          db $02,$0A                                ;;FCC1|FD24+FD24/FD46\FD46;
                                                                ;;                        ;
CODE_00FD26:          LDA.B #$12                                ;;FCC3|FD26+FD26/FD48\FD48; \ Extended sprite = Water buble 
                      STA.W !ExtSpriteNumber,X                  ;;FCC5|FD28+FD28/FD4A\FD4A; / 
                      LDY.B !PlayerDirection                    ;;FCC8|FD2B+FD2B/FD4D\FD4D;
                      LDA.B !PlayerXPosNext                     ;;FCCA|FD2D+FD2D/FD4F\FD4F;
                      CLC                                       ;;FCCC|FD2F+FD2F/FD51\FD51;
                      ADC.W DATA_00FD24,Y                       ;;FCCD|FD30+FD30/FD52\FD52;
                      STA.W !ExtSpriteXPosLow,X                 ;;FCD0|FD33+FD33/FD55\FD55;
                      LDA.B !PlayerXPosNext+1                   ;;FCD3|FD36+FD36/FD58\FD58;
                      ADC.B #$00                                ;;FCD5|FD38+FD38/FD5A\FD5A;
                      STA.W !ExtSpriteXPosHigh,X                ;;FCD7|FD3A+FD3A/FD5C\FD5C;
                      LDA.B !Powerup                            ;;FCDA|FD3D+FD3D/FD5F\FD5F;
                      BEQ CODE_00FD47                           ;;FCDC|FD3F+FD3F/FD61\FD61;
                      LDA.B #$04                                ;;FCDE|FD41+FD41/FD63\FD63;
                      LDY.B !PlayerIsDucking                    ;;FCE0|FD43+FD43/FD65\FD65;
                      BEQ +                                     ;;FCE2|FD45+FD45/FD67\FD67;
CODE_00FD47:          LDA.B #$0C                                ;;FCE4|FD47+FD47/FD69\FD69;
                    + CLC                                       ;;FCE6|FD49+FD49/FD6B\FD6B;
                      ADC.B !PlayerYPosNext                     ;;FCE7|FD4A+FD4A/FD6C\FD6C;
                      STA.W !ExtSpriteYPosLow,X                 ;;FCE9|FD4C+FD4C/FD6E\FD6E;
                      LDA.B !PlayerYPosNext+1                   ;;FCEC|FD4F+FD4F/FD71\FD71;
                      ADC.B #$00                                ;;FCEE|FD51+FD51/FD73\FD73;
                      STA.W !ExtSpriteYPosHigh,X                ;;FCF0|FD53+FD53/FD75\FD75;
                      STZ.W !ExtSpriteMisc176F,X                ;;FCF3|FD56+FD56/FD78\FD78;
                      RTS                                       ;;FCF6|FD59+FD59/FD7B\FD7B; Return 
                                                                ;;                        ;
CODE_00FD5A:          LDA.B !PlayerXPosScrRel+1                 ;;FCF7|FD5A+FD5A/FD7C\FD7C;
                      ORA.B !PlayerYPosScrRel+1                 ;;FCF9|FD5C+FD5C/FD7E\FD7E;
                      BNE Return00FD6A                          ;;FCFB|FD5E+FD5E/FD80\FD80;
                      LDY.B #$03                                ;;FCFD|FD60+FD60/FD82\FD82;
CODE_00FD62:          LDA.W !SmokeSpriteNumber,Y                ;;FCFF|FD62+FD62/FD84\FD84;
                      BEQ CODE_00FD6B                           ;;FD02|FD65+FD65/FD87\FD87;
                      DEY                                       ;;FD04|FD67+FD67/FD89\FD89;
                      BPL CODE_00FD62                           ;;FD05|FD68+FD68/FD8A\FD8A;
Return00FD6A:         RTS                                       ;;FD07|FD6A+FD6A/FD8C\FD8C; Return 
                                                                ;;                        ;
CODE_00FD6B:          LDA.B #$05                                ;;FD08|FD6B+FD6B/FD8D\FD8D;
                      STA.W !SmokeSpriteNumber,Y                ;;FD0A|FD6D+FD6D/FD8F\FD8F;
                      LDA.B !TouchBlockXPos                     ;;FD0D|FD70+FD70/FD92\FD92;
                      AND.B #$F0                                ;;FD0F|FD72+FD72/FD94\FD94;
                      STA.W !SmokeSpriteXPos,Y                  ;;FD11|FD74+FD74/FD96\FD96;
                      LDA.B !TouchBlockYPos                     ;;FD14|FD77+FD77/FD99\FD99;
                      AND.B #$F0                                ;;FD16|FD79+FD79/FD9B\FD9B;
                      STA.W !SmokeSpriteYPos,Y                  ;;FD18|FD7B+FD7B/FD9D\FD9D;
                      LDA.W !LayerProcessing                    ;;FD1B|FD7E+FD7E/FDA0\FDA0;
                      BEQ +                                     ;;FD1E|FD81+FD81/FDA3\FDA3;
                      LDA.B !TouchBlockXPos                     ;;FD20|FD83+FD83/FDA5\FDA5;
                      SEC                                       ;;FD22|FD85+FD85/FDA7\FDA7;
                      SBC.B !Layer23XRelPos                     ;;FD23|FD86+FD86/FDA8\FDA8;
                      AND.B #$F0                                ;;FD25|FD88+FD88/FDAA\FDAA;
                      STA.W !SmokeSpriteXPos,Y                  ;;FD27|FD8A+FD8A/FDAC\FDAC;
                      LDA.B !TouchBlockYPos                     ;;FD2A|FD8D+FD8D/FDAF\FDAF;
                      SEC                                       ;;FD2C|FD8F+FD8F/FDB1\FDB1;
                      SBC.B !Layer23YRelPos                     ;;FD2D|FD90+FD90/FDB2\FDB2;
                      AND.B #$F0                                ;;FD2F|FD92+FD92/FDB4\FDB4;
                      STA.W !SmokeSpriteYPos,Y                  ;;FD31|FD94+FD94/FDB6\FDB6;
                    + LDA.B #$10                                ;;FD34|FD97+FD97/FDB9\FDB9;
                      STA.W !SmokeSpriteTimer,Y                 ;;FD36|FD99+FD99/FDBB\FDBB;
                      RTS                                       ;;FD39|FD9C+FD9C/FDBE\FDBE; Return 
                                                                ;;                        ;
                                                                ;;                        ;
DATA_00FD9D:          db $08,$FC,$10,$04                        ;;FD3A|FD9D+FD9D/FDBF\FDBF;
                                                                ;;                        ;
DATA_00FDA1:          db $00,$FF,$00,$00                        ;;FD3E|FDA1+FDA1/FDC3\FDC3;
                                                                ;;                        ;
CODE_00FDA5:          LDA.B !PlayerInAir                        ;;FD42|FDA5+FDA5/FDC7\FDC7;
                      BEQ CODE_00FDB3                           ;;FD44|FDA7+FDA7/FDC9\FDC9;
                      LDY.B #$0B                                ;;FD46|FDA9+FDA9/FDCB\FDCB;
CODE_00FDAB:          LDA.W !MinExtSpriteNumber,Y               ;;FD48|FDAB+FDAB/FDCD\FDCD;
                      BEQ CODE_00FDB4                           ;;FD4B|FDAE+FDAE/FDD0\FDD0;
                      DEY                                       ;;FD4D|FDB0+FDB0/FDD2\FDD2;
                      BPL CODE_00FDAB                           ;;FD4E|FDB1+FDB1/FDD3\FDD3;
CODE_00FDB3:          INY                                       ;;FD50|FDB3+FDB3/FDD5\FDD5;
CODE_00FDB4:          PHX                                       ;;FD51|FDB4+FDB4/FDD6\FDD6;
                      LDX.B #$00                                ;;FD52|FDB5+FDB5/FDD7\FDD7;
                      LDA.B !Powerup                            ;;FD54|FDB7+FDB7/FDD9\FDD9;
                      BEQ +                                     ;;FD56|FDB9+FDB9/FDDB\FDDB;
                      INX                                       ;;FD58|FDBB+FDBB/FDDD\FDDD;
                    + LDA.W !PlayerRidingYoshi                  ;;FD59|FDBC+FDBC/FDDE\FDDE;
                      BEQ +                                     ;;FD5C|FDBF+FDBF/FDE1\FDE1;
                      INX                                       ;;FD5E|FDC1+FDC1/FDE3\FDE3;
                      INX                                       ;;FD5F|FDC2+FDC2/FDE4\FDE4;
                    + LDA.B !PlayerYPosNext                     ;;FD60|FDC3+FDC3/FDE5\FDE5;
                      CLC                                       ;;FD62|FDC5+FDC5/FDE7\FDE7;
                      ADC.W DATA_00FD9D,X                       ;;FD63|FDC6+FDC6/FDE8\FDE8;
                      PHP                                       ;;FD66|FDC9+FDC9/FDEB\FDEB;
                      AND.B #$F0                                ;;FD67|FDCA+FDCA/FDEC\FDEC;
                      CLC                                       ;;FD69|FDCC+FDCC/FDEE\FDEE;
                      ADC.B #$03                                ;;FD6A|FDCD+FDCD/FDEF\FDEF;
                      STA.W !MinExtSpriteYPosLow,Y              ;;FD6C|FDCF+FDCF/FDF1\FDF1;
                      LDA.B !PlayerYPosNext+1                   ;;FD6F|FDD2+FDD2/FDF4\FDF4;
                      ADC.B #$00                                ;;FD71|FDD4+FDD4/FDF6\FDF6;
                      PLP                                       ;;FD73|FDD6+FDD6/FDF8\FDF8;
                      ADC.W DATA_00FDA1,X                       ;;FD74|FDD7+FDD7/FDF9\FDF9;
                      STA.W !MinExtSpriteYPosHigh,Y             ;;FD77|FDDA+FDDA/FDFC\FDFC;
                      PLX                                       ;;FD7A|FDDD+FDDD/FDFF\FDFF;
                      LDA.B !PlayerXPosNext                     ;;FD7B|FDDE+FDDE/FE00\FE00;
                      STA.W !MinExtSpriteXPosLow,Y              ;;FD7D|FDE0+FDE0/FE02\FE02;
                      LDA.B !PlayerXPosNext+1                   ;;FD80|FDE3+FDE3/FE05\FE05;
                      STA.W !MinExtSpriteXPosHigh,Y             ;;FD82|FDE5+FDE5/FE07\FE07;
                      LDA.B #$07                                ;;FD85|FDE8+FDE8/FE0A\FE0A;
                      STA.W !MinExtSpriteNumber,Y               ;;FD87|FDEA+FDEA/FE0C\FE0C;
                      LDA.B #$00                                ;;FD8A|FDED+FDED/FE0F\FE0F;
                      STA.W !MinExtSpriteXPosSpx,Y              ;;FD8C|FDEF+FDEF/FE11\FE11;
                      LDA.B !PlayerYSpeed                       ;;FD8F|FDF2+FDF2/FE14\FE14;
                      BMI Return00FE0D                          ;;FD91|FDF4+FDF4/FE16\FE16;
                      STZ.B !PlayerYSpeed                       ;;FD93|FDF6+FDF6/FE18\FE18;
                      LDY.B !PlayerInAir                        ;;FD95|FDF8+FDF8/FE1A\FE1A;
                      BEQ +                                     ;;FD97|FDFA+FDFA/FE1C\FE1C;
                      STZ.B !PlayerXSpeed                       ;;FD99|FDFC+FDFC/FE1E\FE1E;
                    + LDY.B #$03                                ;;FD9B|FDFE+FDFE/FE20\FE20;
                      LDA.B !Powerup                            ;;FD9D|FE00+FE00/FE22\FE22;
                      BNE CODE_00FE05                           ;;FD9F|FE02+FE02/FE24\FE24;
                      DEY                                       ;;FDA1|FE04+FE04/FE26\FE26;
CODE_00FE05:          LDA.W !ExtSpriteNumber,Y                  ;;FDA2|FE05+FE05/FE27\FE27;
                      BEQ CODE_00FE16                           ;;FDA5|FE08+FE08/FE2A\FE2A;
CODE_00FE0A:          DEY                                       ;;FDA7|FE0A+FE0A/FE2C\FE2C;
                      BPL CODE_00FE05                           ;;FDA8|FE0B+FE0B/FE2D\FE2D;
Return00FE0D:         RTS                                       ;;FDAA|FE0D+FE0D/FE2F\FE2F; Return 
                                                                ;;                        ;
                                                                ;;                        ;
DATA_00FE0E:          db $10,$16,$13,$1C                        ;;FDAB|FE0E+FE0E/FE30\FE30;
                                                                ;;                        ;
DATA_00FE12:          db $00,$04,$0A,$07                        ;;FDAF|FE12+FE12/FE34\FE34;
                                                                ;;                        ;
CODE_00FE16:          LDA.B #$12                                ;;FDB3|FE16+FE16/FE38\FE38; \ Extended sprite = Water bubble 
                      STA.W !ExtSpriteNumber,Y                  ;;FDB5|FE18+FE18/FE3A\FE3A; / 
                      TYA                                       ;;FDB8|FE1B+FE1B/FE3D\FE3D;
                      ASL A                                     ;;FDB9|FE1C+FE1C/FE3E\FE3E;
                      ASL A                                     ;;FDBA|FE1D+FE1D/FE3F\FE3F;
                      ASL A                                     ;;FDBB|FE1E+FE1E/FE40\FE40;
                      ADC.B #$F7                                ;;FDBC|FE1F+FE1F/FE41\FE41;
                      STA.W !ExtSpriteMisc1765,Y                ;;FDBE|FE21+FE21/FE43\FE43;
                      LDA.B !PlayerYPosNext                     ;;FDC1|FE24+FE24/FE46\FE46;
                      ADC.W DATA_00FE0E,Y                       ;;FDC3|FE26+FE26/FE48\FE48;
                      STA.W !ExtSpriteYPosLow,Y                 ;;FDC6|FE29+FE29/FE4B\FE4B;
                      LDA.B !PlayerYPosNext+1                   ;;FDC9|FE2C+FE2C/FE4E\FE4E;
                      ADC.B #$00                                ;;FDCB|FE2E+FE2E/FE50\FE50;
                      STA.W !ExtSpriteYPosHigh,Y                ;;FDCD|FE30+FE30/FE52\FE52;
                      LDA.B !PlayerXPosNext                     ;;FDD0|FE33+FE33/FE55\FE55;
                      ADC.W DATA_00FE12,Y                       ;;FDD2|FE35+FE35/FE57\FE57;
                      STA.W !ExtSpriteXPosLow,Y                 ;;FDD5|FE38+FE38/FE5A\FE5A;
                      LDA.B !PlayerXPosNext+1                   ;;FDD8|FE3B+FE3B/FE5D\FE5D;
                      ADC.B #$00                                ;;FDDA|FE3D+FE3D/FE5F\FE5F;
                      STA.W !ExtSpriteXPosHigh,Y                ;;FDDC|FE3F+FE3F/FE61\FE61;
                      LDA.B #$00                                ;;FDDF|FE42+FE42/FE64\FE64;
                      STA.W !ExtSpriteMisc176F,Y                ;;FDE1|FE44+FE44/FE66\FE66;
                      JMP CODE_00FE0A                           ;;FDE4|FE47+FE47/FE69\FE69;
                                                                ;;                        ;
CODE_00FE4A:          LDA.B !TrueFrame                          ;;FDE7|FE4A+FE4A/FE6C\FE6C;
                      AND.B #$03                                ;;FDE9|FE4C+FE4C/FE6E\FE6E;
                      ORA.B !PlayerInAir                        ;;FDEB|FE4E+FE4E/FE70\FE70;
                      ORA.B !PlayerXPosScrRel+1                 ;;FDED|FE50+FE50/FE72\FE72;
                      ORA.B !PlayerYPosScrRel+1                 ;;FDEF|FE52+FE52/FE74\FE74;
                      ORA.B !SpriteLock                         ;;FDF1|FE54+FE54/FE76\FE76;
                      BNE Return00FE71                          ;;FDF3|FE56+FE56/FE78\FE78;
                      LDA.B !byetudlrHold                       ;;FDF5|FE58+FE58/FE7A\FE7A;
                      AND.B #$04                                ;;FDF7|FE5A+FE5A/FE7C\FE7C;
                      BEQ CODE_00FE67                           ;;FDF9|FE5C+FE5C/FE7E\FE7E;
                      LDA.B !PlayerXSpeed                       ;;FDFB|FE5E+FE5E/FE80\FE80;
                      CLC                                       ;;FDFD|FE60+FE60/FE82\FE82;
                      ADC.B #$08                                ;;FDFE|FE61+FE61/FE83\FE83;
                      CMP.B #$10                                ;;FE00|FE63+FE63/FE85\FE85;
                      BCC Return00FE71                          ;;FE02|FE65+FE65/FE87\FE87;
CODE_00FE67:          LDY.B #$03                                ;;FE04|FE67+FE67/FE89\FE89;
CODE_00FE69:          LDA.W !SmokeSpriteNumber,Y                ;;FE06|FE69+FE69/FE8B\FE8B;
                      BEQ CODE_00FE72                           ;;FE09|FE6C+FE6C/FE8E\FE8E;
                      DEY                                       ;;FE0B|FE6E+FE6E/FE90\FE90;
                      BNE CODE_00FE69                           ;;FE0C|FE6F+FE6F/FE91\FE91;
Return00FE71:         RTS                                       ;;FE0E|FE71+FE71/FE93\FE93; Return 
                                                                ;;                        ;
CODE_00FE72:          LDA.B #$03                                ;;FE0F|FE72+FE72/FE94\FE94;
                      STA.W !SmokeSpriteNumber,Y                ;;FE11|FE74+FE74/FE96\FE96;
                      LDA.B !PlayerXPosNext                     ;;FE14|FE77+FE77/FE99\FE99;
                      ADC.B #$04                                ;;FE16|FE79+FE79/FE9B\FE9B;
                      STA.W !SmokeSpriteXPos,Y                  ;;FE18|FE7B+FE7B/FE9D\FE9D;
                      LDA.B !PlayerYPosNext                     ;;FE1B|FE7E+FE7E/FEA0\FEA0;
                      ADC.B #$1A                                ;;FE1D|FE80+FE80/FEA2\FEA2;
                      PHX                                       ;;FE1F|FE82+FE82/FEA4\FEA4;
                      LDX.W !PlayerRidingYoshi                  ;;FE20|FE83+FE83/FEA5\FEA5;
                      BEQ +                                     ;;FE23|FE86+FE86/FEA8\FEA8;
                      ADC.B #$10                                ;;FE25|FE88+FE88/FEAA\FEAA;
                    + STA.W !SmokeSpriteYPos,Y                  ;;FE27|FE8A+FE8A/FEAC\FEAC;
                      PLX                                       ;;FE2A|FE8D+FE8D/FEAF\FEAF;
                      LDA.B #$13                                ;;FE2B|FE8E+FE8E/FEB0\FEB0;
                      STA.W !SmokeSpriteTimer,Y                 ;;FE2D|FE90+FE90/FEB2\FEB2;
                      RTS                                       ;;FE30|FE93+FE93/FEB5\FEB5; Return 
                                                                ;;                        ;
                                                                ;;                        ;
DATA_00FE94:          db $FD,$03                                ;;FE31|FE94+FE94/FEB6\FEB6;
                                                                ;;                        ;
DATA_00FE96:          db $00,$08,$F8,$10,$F8,$10                ;;FE33|FE96+FE96/FEB8\FEB8;
                                                                ;;                        ;
DATA_00FE9C:          db $00,$00,$FF,$00,$FF,$00                ;;FE39|FE9C+FE9C/FEBE\FEBE;
                                                                ;;                        ;
DATA_00FEA2:          db $08,$08,$0C,$0C,$14,$14                ;;FE3F|FEA2+FEA2/FEC4\FEC4;
                                                                ;;                        ;
ShootFireball:        LDX.B #$09                                ;;FE45|FEA8+FEA8/FECA\FECA; \ Find a free fireball slot (08-09) 
CODE_00FEAA:          LDA.W !ExtSpriteNumber,X                  ;;FE47|FEAA+FEAA/FECC\FECC;  | 
                      BEQ CODE_00FEB5                           ;;FE4A|FEAD+FEAD/FECF\FECF;  | 
                      DEX                                       ;;FE4C|FEAF+FEAF/FED1\FED1;  | 
                      CPX.B #$07                                ;;FE4D|FEB0+FEB0/FED2\FED2;  | 
                      BNE CODE_00FEAA                           ;;FE4F|FEB2+FEB2/FED4\FED4;  | 
                      RTS                                       ;;FE51|FEB4+FEB4/FED6\FED6; / Return if no free slots 
                                                                ;;                        ;
CODE_00FEB5:          LDA.B #!SFX_FIREBALL                      ;;FE52|FEB5+FEB5/FED7\FED7;
                      STA.W !SPCIO3                             ;;FE54|FEB7+FEB7/FED9\FED9; / Play sound effect 
                      LDA.B #$0A                                ;;FE57|FEBA+FEBA/FEDC\FEDC;
                      STA.W !ShootFireTimer                     ;;FE59|FEBC+FEBC/FEDE\FEDE;
                      LDA.B #$05                                ;;FE5C|FEBF+FEBF/FEE1\FEE1; \ Extended sprite = Mario fireball 
                      STA.W !ExtSpriteNumber,X                  ;;FE5E|FEC1+FEC1/FEE3\FEE3; / 
                      LDA.B #$30                                ;;FE61|FEC4+FEC4/FEE6\FEE6;
                      STA.W !ExtSpriteYSpeed,X                  ;;FE63|FEC6+FEC6/FEE8\FEE8;
                      LDY.B !PlayerDirection                    ;;FE66|FEC9+FEC9/FEEB\FEEB;
                      LDA.W DATA_00FE94,Y                       ;;FE68|FECB+FECB/FEED\FEED;
                      STA.W !ExtSpriteXSpeed,X                  ;;FE6B|FECE+FECE/FEF0\FEF0;
                      LDA.W !PlayerRidingYoshi                  ;;FE6E|FED1+FED1/FEF3\FEF3;
                      BEQ +                                     ;;FE71|FED4+FED4/FEF6\FEF6;
                      INY                                       ;;FE73|FED6+FED6/FEF8\FEF8;
                      INY                                       ;;FE74|FED7+FED7/FEF9\FEF9;
                      LDA.W !PlayerDuckingOnYoshi               ;;FE75|FED8+FED8/FEFA\FEFA;
                      BEQ +                                     ;;FE78|FEDB+FEDB/FEFD\FEFD;
                      INY                                       ;;FE7A|FEDD+FEDD/FEFF\FEFF;
                      INY                                       ;;FE7B|FEDE+FEDE/FF00\FF00;
                    + LDA.B !PlayerXPosNext                     ;;FE7C|FEDF+FEDF/FF01\FF01;
                      CLC                                       ;;FE7E|FEE1+FEE1/FF03\FF03;
                      ADC.W DATA_00FE96,Y                       ;;FE7F|FEE2+FEE2/FF04\FF04;
                      STA.W !ExtSpriteXPosLow,X                 ;;FE82|FEE5+FEE5/FF07\FF07;
                      LDA.B !PlayerXPosNext+1                   ;;FE85|FEE8+FEE8/FF0A\FF0A;
                      ADC.W DATA_00FE9C,Y                       ;;FE87|FEEA+FEEA/FF0C\FF0C;
                      STA.W !ExtSpriteXPosHigh,X                ;;FE8A|FEED+FEED/FF0F\FF0F;
                      LDA.B !PlayerYPosNext                     ;;FE8D|FEF0+FEF0/FF12\FF12;
                      CLC                                       ;;FE8F|FEF2+FEF2/FF14\FF14;
                      ADC.W DATA_00FEA2,Y                       ;;FE90|FEF3+FEF3/FF15\FF15;
                      STA.W !ExtSpriteYPosLow,X                 ;;FE93|FEF6+FEF6/FF18\FF18;
                      LDA.B !PlayerYPosNext+1                   ;;FE96|FEF9+FEF9/FF1B\FF1B;
                      ADC.B #$00                                ;;FE98|FEFB+FEFB/FF1D\FF1D;
                      STA.W !ExtSpriteYPosHigh,X                ;;FE9A|FEFD+FEFD/FF1F\FF1F;
                      LDA.W !PlayerBehindNet                    ;;FE9D|FF00+FF00/FF22\FF22;
                      STA.W !ExtSpritePriority,X                ;;FEA0|FF03+FF03/FF25\FF25;
                      RTS                                       ;;FEA3|FF06+FF06/FF28\FF28; Return 
                                                                ;;                        ;
ADDR_00FF07:          REP #$20                                  ;;FEA4|FF07+FF07/FF29\FF29; Accum (16 bit) 
                      LDA.W !Layer1DYPos                        ;;FEA6|FF09+FF09/FF2B\FF2B;
                      AND.W #$FF00                              ;;FEA9|FF0C+FF0C/FF2E\FF2E;
                      BPL +                                     ;;FEAC|FF0F+FF0F/FF31\FF31;
                      ORA.W #$00FF                              ;;FEAE|FF11+FF11/FF33\FF33;
                    + XBA                                       ;;FEB1|FF14+FF14/FF36\FF36;
                      CLC                                       ;;FEB2|FF15+FF15/FF37\FF37;
                      ADC.B !PlayerXPosNext                     ;;FEB3|FF16+FF16/FF38\FF38;
                      STA.B !PlayerXPosNext                     ;;FEB5|FF18+FF18/FF3A\FF3A;
                      LDA.W !LoadingLevelNumber                 ;;FEB7|FF1A+FF1A/FF3C\FF3C;
                      AND.W #$FF00                              ;;FEBA|FF1D+FF1D/FF3F\FF3F;
                      BPL +                                     ;;FEBD|FF20+FF20/FF42\FF42;
                      ORA.W #$00FF                              ;;FEBF|FF22+FF22/FF44\FF44;
                    + XBA                                       ;;FEC2|FF25+FF25/FF47\FF47;
                      EOR.W #$FFFF                              ;;FEC3|FF26+FF26/FF48\FF48;
                      INC A                                     ;;FEC6|FF29+FF29/FF4B\FF4B;
                      CLC                                       ;;FEC7|FF2A+FF2A/FF4C\FF4C;
                      ADC.B !PlayerYPosNext                     ;;FEC8|FF2B+FF2B/FF4D\FF4D;
                      STA.B !PlayerYPosNext                     ;;FECA|FF2D+FF2D/FF4F\FF4F;
                      SEP #$20                                  ;;FECC|FF2F+FF2F/FF51\FF51; Accum (8 bit) 
                      RTL                                       ;;FECE|FF31+FF31/FF53\FF53; Return 
                                                                ;;                        ;
ADDR_00FF32:          LDA.W !SpriteYPosHigh,X                   ;;FECF|FF32+FF32/FF54\FF54;
                      XBA                                       ;;FED2|FF35+FF35/FF57\FF57;
                      LDA.B !SpriteXPosLow,X                    ;;FED3|FF36+FF36/FF58\FF58;
                      REP #$20                                  ;;FED5|FF38+FF38/FF5A\FF5A; Accum (16 bit) 
                      SEC                                       ;;FED7|FF3A+FF3A/FF5C\FF5C;
                      SBC.B !Layer1XPos                         ;;FED8|FF3B+FF3B/FF5D\FF5D;
                      STA.B !_0                                 ;;FEDA|FF3D+FF3D/FF5F\FF5F;
                      LDA.W #$0030                              ;;FEDC|FF3F+FF3F/FF61\FF61;
                      SEC                                       ;;FEDF|FF42+FF42/FF64\FF64;
                      SBC.B !_0                                 ;;FEE0|FF43+FF43/FF65\FF65;
                      STA.B !Layer3XPos                         ;;FEE2|FF45+FF45/FF67\FF67;
                      SEP #$20                                  ;;FEE4|FF47+FF47/FF69\FF69; Accum (8 bit) 
                      LDA.W !SpriteXPosHigh,X                   ;;FEE6|FF49+FF49/FF6B\FF6B;
                      XBA                                       ;;FEE9|FF4C+FF4C/FF6E\FF6E;
                      LDA.B !SpriteYPosLow,X                    ;;FEEA|FF4D+FF4D/FF6F\FF6F;
                      REP #$20                                  ;;FEEC|FF4F+FF4F/FF71\FF71; Accum (16 bit) 
                      SEC                                       ;;FEEE|FF51+FF51/FF73\FF73;
                      SBC.B !Layer1YPos                         ;;FEEF|FF52+FF52/FF74\FF74;
                      STA.B !_0                                 ;;FEF1|FF54+FF54/FF76\FF76;
                      LDA.W #$0100                              ;;FEF3|FF56+FF56/FF78\FF78;
                      SEC                                       ;;FEF6|FF59+FF59/FF7B\FF7B;
                      SBC.B !_0                                 ;;FEF7|FF5A+FF5A/FF7C\FF7C;
                      STA.B !Layer3YPos                         ;;FEF9|FF5C+FF5C/FF7E\FF7E;
                      SEP #$20                                  ;;FEFB|FF5E+FF5E/FF80\FF80; Accum (8 bit) 
                      RTL                                       ;;FEFD|FF60+FF60/FF82\FF82; Return 
                                                                ;;                        ;
CODE_00FF61:          LDA.W !SpriteYPosHigh,X                   ;;FEFE|FF61+FF61/FF83\FF83;
                      XBA                                       ;;FF01|FF64+FF64/FF86\FF86;
                      LDA.B !SpriteXPosLow,X                    ;;FF02|FF65+FF65/FF87\FF87;
                      REP #$20                                  ;;FF04|FF67+FF67/FF89\FF89; Accum (16 bit) 
                      CMP.W #$FF00                              ;;FF06|FF69+FF69/FF8B\FF8B;
                      BMI CODE_00FF73                           ;;FF09|FF6C+FF6C/FF8E\FF8E;
                      CMP.W #$0100                              ;;FF0B|FF6E+FF6E/FF90\FF90;
                      BMI +                                     ;;FF0E|FF71+FF71/FF93\FF93;
CODE_00FF73:          LDA.W #$0100                              ;;FF10|FF73+FF73/FF95\FF95;
                    + STA.B !Layer3XPos                         ;;FF13|FF76+FF76/FF98\FF98;
                      SEP #$20                                  ;;FF15|FF78+FF78/FF9A\FF9A; Accum (8 bit) 
                      LDA.W !SpriteXPosHigh,X                   ;;FF17|FF7A+FF7A/FF9C\FF9C;
                      XBA                                       ;;FF1A|FF7D+FF7D/FF9F\FF9F;
                      LDA.B !SpriteYPosLow,X                    ;;FF1B|FF7E+FF7E/FFA0\FFA0;
                      REP #$20                                  ;;FF1D|FF80+FF80/FFA2\FFA2; Accum (16 bit) 
                      STA.B !_0                                 ;;FF1F|FF82+FF82/FFA4\FFA4;
                      LDA.W #$00A0                              ;;FF21|FF84+FF84/FFA6\FFA6;
                      SEC                                       ;;FF24|FF87+FF87/FFA9\FFA9;
                      SBC.B !_0                                 ;;FF25|FF88+FF88/FFAA\FFAA;
                      CLC                                       ;;FF27|FF8A+FF8A/FFAC\FFAC;
                      ADC.W !ScreenShakeYOffset                 ;;FF28|FF8B+FF8B/FFAD\FFAD;
                      STA.B !Layer3YPos                         ;;FF2B|FF8E+FF8E/FFB0\FFB0;
                      SEP #$20                                  ;;FF2D|FF90+FF90/FFB2\FFB2; Accum (8 bit) 
                      RTL                                       ;;FF2F|FF92+FF92/FFB4\FFB4; Return 
                                                                ;;                        ;
                      padbyte $FF : pad $00FFC0                 ;;FF30|FF93+FF93/FFB5\FFB5;
